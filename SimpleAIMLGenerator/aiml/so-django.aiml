<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've created and used my own generic view classes, defining <strong><code>__call__</code></strong> so an instance of the class is callable.  I really like it; while Django's generic views allow some customization through keyword arguments, OO generic views (if their behavior is split into a number of separate methods) can have much more fine-grained customization via subclassing, which lets me repeat myself a lot less.  (I get tired of rewriting the same create/update view logic anytime I need to tweak something Django's generic views don't quite allow).</p><br/><br/><p>I've posted some code at <a href="http://www.djangosnippets.org/snippets/1009/" rel="nofollow">djangosnippets.org</a>.</p><br/><br/><p>The only real downside I see is the proliferation of internal method calls, which may impact performance somewhat. I don't think this is much of a concern; it's rare that Python code execution would be your performance bottleneck in a web app.</p><br/><br/><p><strong>UPDATE</strong>: Django's own <a href="http://docs.djangoproject.com/en/dev/topics/class-based-views/" rel="nofollow">generic views</a> are now class-based.</p><br/><br/><p><strong>UPDATE</strong>: FWIW, I've changed my opinion on class-based views since this answer was written. After having used them extensively on a couple of projects, I feel they tend to lead to code that is satisfyingly DRY to write, but very hard to read and maintain later, because functionality is spread across so many different places, and subclasses are so dependent on every implementation detail of the superclasses and mixins. I now feel that <a href="https://docs.djangoproject.com/en/dev/ref/template-response/" rel="nofollow">TemplateResponse</a> and view decorators is a better answer for decomposing view code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOST SERVIC IS BEST FOR DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>I'm a huge fan of <a href="http://www.webfaction.com/" rel="nofollow">webfaction</a> as well. They are not the cheapest hosts at $9.50 a month (if you are not prepaying for a year) but they have supported django for as long as it has been around, they support the stable and 1.0 alpha releases and they have a control panel app that allows you to setup in about two minutes.  Have you checked out <a href="http://djangofriendly.com/hosts/" rel="nofollow">djangofriendly?</a>  There are quite a few reviews and recommendations for django hosts there. </p>]]>    </template>
  </category>
  <category>
    <pattern>
      N AUTO NOW DATETIMEFIELD IN A PARENT MODEL W DJANGO
    </pattern>
    <template>
<![CDATA[<p>You would also need to then save the message.  Then it that should work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRES ORDER IN A RELAT DATABAS
    </pattern>
    <template>
<![CDATA[<p>Since I've mostly run into this with Django, I've found <a href="http://www.djangosnippets.org/snippets/1053/" rel="nofollow">this solution</a> to be the most workable.  It seems that there isn't any "right way" to do this in a relational database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS UTF 8 CONFUS IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>what is a "Unicode string" in Python? Does that mean UCS-2?</p><br/></blockquote><br/><br/><p>Unicode strings in Python are stored internally either as UCS-2 (fixed-length 16-bit representation, almost the same as UTF-16) or UCS-4/UTF-32 (fixed-length 32-bit representation). It's a compile-time option; on Windows it's always UTF-16 whilst many Linux distributions set UTF-32 ('wide mode') for their versions of Python.</p><br/><br/><p>You are generally not supposed to care: you will see Unicode code-points as single elements in your strings and you won't know whether they're stored as two or four bytes. If you're in a UTF-16 build and you need to handle characters outside the Basic Multilingual Plane you'll be Doing It Wrong, but that's still very rare, and users who really need the extra characters should be compiling wide builds.</p><br/><br/><blockquote><br/>  <p>plain wrong, or is it?</p><br/></blockquote><br/><br/><p>Yes, it's quite wrong. To be fair I think that tutorial is rather old; it probably pre-dates wide Unicode strings, if not Unicode 3.1 (the version that introduced characters outside the Basic Multilingual Plane).</p><br/><br/><p>There is an additional source of confusion stemming from Windows's habit of using the term "Unicode" to mean, specifically, the UTF-16LE encoding that NT uses internally. People from Microsoftland may often copy this somewhat misleading habit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EST FASTEST SERVER SETUP FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Since i was looking for some more in-depth answers, i decided to research the issue myself in some more depth. Please let me know if i've misunderstood something.</p><br/><br/><p>General recommendation is to use a separate webserver for handling media. Separate means a webserver which is not running django. This server can be for instance:</p><br/><br/><ul><br/><li>Lighttpd (Lighty)</li><br/><li>Nginx (EngineX</li><br/><li>Or some other light-weight server</li><br/></ul><br/><br/><p>Then, for django, you can go down different paths. You can either:</p><br/><br/><ul><br/><li><p>Serve Django via <strong>Apache</strong> and:</p><br/><br/><ul><br/><li><p><strong>mod_python</strong></p><br/><br/><p>This is the stable and recommended/well documented way. Cons: uses a lot of memory.</p></li><br/><li><p><strong>mod_wsgi</strong></p><br/><br/><p>From what i understand, mod_wsgi is a newer alternative. It appears to be faster and easier on resources.</p></li><br/><li><p><strong>mod_fastcgi</strong></p><br/><br/><p>When using FastCGI you are delegating the serving of Django to another process. Since mod_python includes a python interpreter in every request it uses a lot of memory. This is a way to bypass that problem. Also there is some security concerns.</p><br/><br/><p>What you do is that you start your django fastcgi server in a separate process and then configures apache via rewrites to call this process when needed.</p></li><br/></ul></li><br/></ul><br/><br/><p>Or you can:</p><br/><br/><ul><br/><li><p>Serve django <strong>without using Apache</strong> but with another server that supports FastCGI natively:</p><br/><br/><p>(The documentation mentions that you can do this if you don't have any Apache specific needs. I guess the reason must be to save memory.)</p><br/><br/><ul><br/><li><strong>Lighttpd</strong></li><br/></ul><br/><br/><p>This is the server that runs Youtube. It seems fast and easy to use, however i've seen reports on memoryleaks.</p><br/><br/><ul><br/><li><strong>nginx</strong></li><br/></ul><br/><br/><p><p>I've seen benchmarks claiming that this server is even faster than lighttpd. It's mostly documented in russian though.</p></li><br/></ul><br/>Another thing, du to limitations in Python your server should be running in forked mode, note threaded.</p><br/><br/><p>So this is my current research, But i want more opinions and experiences.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER A TREE STRUCTUR ( RECURS ) USE A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I think the canonical answer is: "Don't".</p><br/><br/><p>What you should probably do instead is unravel the thing in your <em>view</em> code, so it's just a matter of iterating over (in|de)dents in the template. I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that "travelogue" list to the template. (the template would then insert <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> from that list, creating the recursive structure with "understanding" it.)</p><br/><br/><p>I'm also pretty sure recursively including template files is really a <em>wrong</em> way to do it...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEFIELD CORE FALS IN NEWFORM ADMIN
    </pattern>
    <template>
<![CDATA[<p>To get rid of "This field is required," you need to make it not required, by using blank=True (and possibly null=True as well, if it's not a CharField).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT AND VARIABL ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>I found a "nicer"/"better" solution for getting variables inside<br/>Its not the nicest way, but it works.</p><br/><br/><p>You install a custom filter into django which gets the key of your dict as a parameter</p><br/><br/><p>To make it work in google app-engine you need to add a file to your main directory,<br/>I called mine *django_hack.py* which contains this little piece of code</p><br/><br/><pre><code>from google.appengine.ext import webapp<br/><br/>register = webapp.template.create_template_register()<br/><br/>def hash(h,key):<br/>    if key in h:<br/>        return h[key]<br/>    else:<br/>        return None<br/><br/>register.filter(hash)<br/></code></pre><br/><br/><p>Now that we have this file, all we need to do is tell the app-engine to use it...<br/>we do that by adding this little line to your main file</p><br/><br/><pre><code>webapp.template.register_template_library('django_hack')<br/></code></pre><br/><br/><p>and in your template view add this template instead of the usual code</p><br/><br/><pre><code>{{ user|hash:item }}<br/></code></pre><br/><br/><p>And its should work perfectly =)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP DJANGO WITH WSGI AND APACH
    </pattern>
    <template>
<![CDATA[<p>What happens if you remove the <code>Alias /</code> directive?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA TO AN EXIST MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You will want to wire your URL to the Django <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-create-update-create-object">create_object generic view</a>, and pass it either "model" (the model you want to create) or "form_class" (a customized <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#topics-forms-modelforms">ModelForm</a> class).  There are a number of <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-create-update-create-object">other arguments</a> you can also pass to override default behaviors.</p><br/><br/><p>Sample URLconf for the simplest case:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from django.views.generic.create_update import create_object<br/><br/>from my_products_app.models import Product<br/><br/>urlpatterns = patterns('',<br/>    url(r'^admin/products/add/$', create_object, {'model': Product}))<br/></code></pre><br/><br/><p>Your template will get the context variable "form", which you just need to wrap in a &lt;form> tag and add a submit button.  The simplest working template (by default should go in "my_products_app/product_form.html"):</p><br/><br/><pre><code>&lt;form action="." method="POST"&gt;<br/>  {{ form }}<br/>  &lt;input type="submit" name="submit" value="add"&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TIME D WIDGET IN CUSTOM FORM
    </pattern>
    <template>
<![CDATA[<p>What you have to do to make this work:</p><br/><br/><ol><br/><li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p><br/><br/><pre><code>from django import forms<br/>from my_app.models import Product<br/>from django.contrib.admin import widgets                                       <br/><br/><br/>class ProductForm(forms.ModelForm):<br/>    class Meta:<br/>        model = Product<br/>    def __init__(self, *args, **kwargs):<br/>        super(ProductForm, self).__init__(*args, **kwargs)<br/>        self.fields['mydate'].widget = widgets.AdminDateWidget()<br/>        self.fields['mytime'].widget = widgets.AdminTimeWidget()<br/>        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()<br/></code></pre></li><br/><li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean "from my_app.forms import ProductForm" instead of "from my_app.models import Product", of course).</p></li><br/><li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li><br/><li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p><br/><br/><pre><code>&lt;script type="text/javascript" src="/my_admin/jsi18n/"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/media/admin/js/core.js"&gt;&lt;/script&gt;<br/></code></pre><br/><br/><p>You may also wish to use the following admin CSS (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583">Alex</a> for mentioning this):</p><br/><br/><pre><code>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/&gt;<br/></code></pre></li><br/></ol><br/><br/><p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p><br/><br/><p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p><br/><br/><pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),<br/></code></pre><br/><br/><p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p><br/><br/><pre><code>{% load adminmedia %} /* At the top of the template. */<br/><br/>/* In the head section of the template. */<br/>&lt;script type="text/javascript"&gt;<br/>window.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}";<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>Thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128">lupefiasco</a> for this addition.</p><br/><br/><p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LWAY INCLUD THE USER IN THE DJANGO TEMPLAT CONTEXT
    </pattern>
    <template>
<![CDATA[<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors" rel="nofollow">context processor</a>.</p><br/><br/><p>From the docs:</p><br/><br/><blockquote><br/>  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you need to use something similar to the {% url %} template tag in your code, Django provides the django.core.urlresolvers.reverse(). The reverse() function has the following signature:</p><br/><br/><pre><code>reverse(viewname, urlconf=None, args=None, kwargs=None)<br/></code></pre><br/><br/><p><a href="http://www.djangoproject.com/documentation/url_dispatch/#utility-methods" rel="nofollow">http://www.djangoproject.com/documentation/url_dispatch/#utility-methods</a></p><br/>]]>    </template>
  </category>
</aiml>
