<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      CSV FILE TO XML IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Maybe this might help: <a href="http://jsefa.sourceforge.net/quick-tutorial.html" rel="nofollow">JSefa</a></p><br/><br/><p>Read csv file with this tool and serialize to xml :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS OBJECT PROPERTI FROM WITHIN AN OBJECT METHOD
    </pattern>
    <template>
<![CDATA[<p>This has religious war potential, but it seems to me that if you're using a getter/setter, you should use it internally as well - using both will lead to maintenance problems down the road (e.g. somebody adds code to a setter that <em>needs</em> to run every time that property is set, and the property is being set internally w/o that setter being called).</p>]]>    </template>
  </category>
  <category>
    <pattern>
      THE TYPE SAFETI WARN IN CERTAIN JAVA GENER CAST
    </pattern>
    <template>
<![CDATA[<p>This warning is there because Java is not actually storing type information at runtime in an object that uses generics.  Thus, if 'object' is actually a List&lt;String&gt;, there will be no ClassCastException at runtime except until an item is accessed from the list that doesn't match the generic type defined in the variable.  This can cause further complications if items are added to the list with this incorrect generic type information.  Any code still holding a reference to the list but with the correct generic type information will now have an inconsistent list.  To remove the warning, try:</p><br/><br/><pre><code>List&lt;?&gt; list = (List&lt;?&gt;) object;<br></code></pre><br/><br/><p>However, note that you will not be able to use certain methods such as add because the compiler doesn't know if you are trying to add an object of incorrect type.  The above will work in a lot of situations, but if you have to use add or some similarly restricted method, you will just have to suffer the yellow underline in Eclipse (or a SuppressWarning annotation).</p>]]>    </template>
  </category>
  <category>
    <pattern>
      AN INT AND AN INTEG IN JAVA C #
    </pattern>
    <template>
<![CDATA[<p>In object oriented languages such as Java and C#, the 'int' type is a primitive , whereas the 'Integer' type is an object.</p><br/><br/><p>The differences between objects and primitives are somewhat beyond the scope of this question, but to summarize: </p><br/><br/><p><strong>Objects</strong> provide facilities for polymorphism, are passed by reference, and are allocated from the <a href="http://en.wikipedia.org/wiki/Dynamic_memory_allocation" rel="nofollow">heap</a>. Conversely, <strong>primitives</strong> are passed by value and are allocated from the <a href="http://en.wikipedia.org/wiki/Stack-based_memory_allocation" rel="nofollow">stack</a>.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM BUTTON IN JAVA
    </pattern>
    <template>
<![CDATA[<p>When I was first learning Java we had to make Yahtzee and I thought it would be cool to create custom Swing components and containers instead of just drawing everything on one JPanel.  The benefit of extending Swing components, of course, is to have the ability to add support for keyboard shortcuts and other accessibility features that you can't do just by having a paint() method print a pretty picture.  It may not be done the best way however, but it may be a good starting point for you.</p><br/><br/><p>Edit 8/6 - If it wasn't apparent from the images, each Die is a button you can click. This will move it to the DiceContainer below.  Looking at the source code you can see that each Die button is drawn dynamically, based on its value.</p><br/><br/><p><img src="http://www.kevinx.net/tf2/uploads/dice.jpg" alt="alt text"><br><br/><img src="http://www.kevinx.net/tf2/uploads/dice2.jpg" alt="alt text"><br><br/><img src="http://www.kevinx.net/tf2/uploads/dice3.jpg" alt="alt text"></p><br/><br/><p>Here are the basic steps:</p><br/><br/><ol><br/><li>Create a class that extends JComponent</li><br/><li>Call parent constructor super() in your constructors</li><br/><li>Make sure you class implements MouseListener</li><br/><li><p>Put this in the constructor:</p><br/><br/><pre><code>enableInputMethods(true);   <br/>addMouseListener(this);<br/></code></pre></li><br/><li><p>Override these methods:</p><br/><br/><pre><code>public Dimension getPreferredSize()  <br/>public Dimension getMinimumSize()  <br/>public Dimension getMaximumSize()<br/></code></pre></li><br/><li><p>Override this method:</p><br/><br/><pre><code>public void paintComponent(Graphics g)<br/></code></pre></li><br/></ol><br/><br/><p>The amount of space you have to work with when drawing your button is defined by getPreferredSize(), assuming getMinimumSize() and getMaximumSize() return the same value.  I haven't experimented too much with this but, depending on the layout you use for your GUI your button could look completely different.</p><br/><br/><p>And finally, the <a href="http://kevinx.net/labs/java/yahtzee/Dice.java" rel="nofollow">source code</a>.  In case I missed anything.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR AND COMMUN WITH A SERIAL PORT
    </pattern>
    <template>
<![CDATA[<p>Build a time machine and go back to 1987? Ho ho.</p><br/><br/><p>Ok, no more snarky comments.</p><br/><br/><blockquote><br/>  <p>How do I figure out what the configuration settings (e.g. baud rate) should be...</p><br/></blockquote><br/><br/><p>Read the datasheet? Ok, ok. Seriously, last one. If you don't know the baud rate of the device you are trying to communicate with, you have two choices. Start guessing, or possibly bust out an o-scope. If you need a good starting point, let me suggest 9600-8-N-1. My suspicion is you can get there with brute force relatively quickly. There's a third option of having an old-school ninja who can tell just by the LOOK of the garbled characters at some standard baud rate what actual baud rate is. An impressive party trick to be sure.</p><br/><br/><p>Hopefully though you have access to this information. In unix/linux, you can get ahold of minicom to play with the serial port directly. This should make it fairly quick to get the configuration figured out.</p><br/><br/><blockquote><br/>  <p>one of the major Unix shells</p><br/></blockquote><br/><br/><p>In Unix the serial port(s) is/are file-mapped into the /dev/ subdir. ttyS0, for example. If you setup the correct baud rate and whatnot using minicom, you can even cat stuff to that file to send stuff out there.</p><br/><br/><p>On to the meat of the question, you can access it programmatically through the POSIX headers. termios.h is the big one. </p><br/><br/><p>See: <a href="http://www.easysw.com/%7Emike/serial/serial.html#3_1" rel="nofollow">http://www.easysw.com/~mike/serial/serial.html#3_1</a></p><br/><br/><blockquote><br/>  <p>but I also have some interest in serial programming using Windows/Hyperterminal.</p><br/></blockquote><br/><br/><p>Hyperterminal and minicom are basically the same program. As for how Windows let's you get access to the serial port, I'll leave that question for someone else. I haven't done that in Windows since the Win95 days.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      LLEGALARGUMENTEXCEPT OR NULLPOINTEREXCEPT FOR A NULL PARAMET
    </pattern>
    <template>
<![CDATA[<p>I'm not a Java developer, but just from the sound of it, it seems like an IllegalArgumentException is called for if you don't want null to be an allowed value, and the NullPointerException would be thrown if you were trying to <em>use</em> a variable that turns out to be null.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE ANALYSI TOOL DO YOU USE FOR YOUR JAVA PROJECT
    </pattern>
    <template>
<![CDATA[<p>For static analysis tools I often use CPD, <a href="http://pmd.sourceforge.net" rel="nofollow">PMD</a>, <a href="http://findbugs.sourceforge.net" rel="nofollow">FindBugs</a>, and <a href="http://checkstyle.sourceforge.net" rel="nofollow">Checkstyle</a>.</p><br/><br/><p><p>CPD is the PMD "Copy/Paste Detector" tool. I was using PMD for a little while before I noticed the <a href="http://pmd.sourceforge.net/cpd.html" rel="nofollow">"Finding Duplicated Code" link</a> on the <a href="http://pmd.sourceforge.net" rel="nofollow">PMD web page</a>.</p><br/><br/><p><p>I'd like to point out that these tools can sometimes be extended beyond their "out-of-the-box" set of rules. And not just because they're open source so that you can rewrite them. Some of these tools come with applications or "hooks" that allow them to be extended. For example, PMD comes with the <a href="http://pmd.sourceforge.net/howtowritearule.html" rel="nofollow">"designer" tool</a> that allows you to create new rules. Also, Checkstyle has the <a href="http://checkstyle.sourceforge.net/config_misc.html#DescendantToken" rel="nofollow">DescendantToken</a> check that has properties that allow for substantial customization.</p><br/><br/><p><p>I integrate these tools with <a href="http://virtualteamtls.svn.sourceforge.net/viewvc/virtualteamtls/trunk/scm/common.xml?view=markup" rel="nofollow">an Ant-based build</a>. You can follow the link to see my commented configuration.</p><br/><br/><p><p>In addition to the simple integration into the build, I find it helpful to configure the tools to be somewhat "integrated" in a couple of other ways. Namely, report generation and warning suppression uniformity. I'd like to add these aspects to this discussion (which should probably have the "static-analysis" tag also): how are folks configuring these tools to create a "unified" solution? (I've asked this question separately <a href="http://stackoverflow.com/questions/79918/configuring-static-analysis-tools-for-uniformity">here</a>)</p><br/><br/><p><p>First, for warning reports, I transform the output so that each warning has the simple format:</p><br/><br/><pre><code>/absolute-path/filename:line-number:column-number: warning(tool-name): message</code></pre><br/><br/><p><p>This is often called the "Emacs format," but even if you aren't using Emacs, it's a reasonable format for homogenizing reports. For example:</p><br/><br/><pre><code>/project/src/com/example/Foo.java:425:9: warning(Checkstyle):Missing a Javadoc comment.</code></pre><br/><br/><p><p>My warning format transformations are done by my Ant script with Ant <a href="http://ant.apache.org/manual/Types/filterchain.html" rel="nofollow">filterchains</a>.</p><br/><br/><p><p>The second "integration" that I do is for warning suppression. By default, each tool supports comments or an annotation (or both) that you can place in your code to silence a warning that you want to ignore. But these various warning suppression requests do not have a consistent look which seems somewhat silly. When you're suppressing a warning, you're suppressing a warning, so why not always write "<code>SuppressWarning</code>?"</p><br/><br/><p><p>For example, PMD's default configuration suppresses warning generation on lines of code with the string "<code>NOPMD</code>" in a comment. Also, PMD supports Java's <code>@SuppressWarnings</code> annotation. I configure PMD to use comments containing "<code>SuppressWarning(PMD.</code>" instead of <code>NOPMD</code> so that PMD suppressions look alike. I fill in the particular rule that is violated when using the comment style suppression:</p><br/><br/><pre><code>// SuppressWarnings(PMD.PreserveStackTrace) justification: (false positive) exceptions are chained</code></pre><br/><br/><p><p>Only the "<code>SuppressWarnings(PMD.</code>" part is significant for a comment, but it is consistent with PMD's support for the <code>@SuppressWarning</code> annotation which does recognize individual rule violations by name:</p><br/><br/><pre><code>@SuppressWarnings("PMD.CompareObjectsWithEquals") // justification: identity comparision intended</code></pre><br/><br/><p><p>Similarly, Checkstyle suppresses warning generation between pairs of comments (no annotation support is provided). By default, comments to turn Checkstyle off and on contain the strings <code>CHECKSTYLE:OFF</code> and <code>CHECKSTYLE:ON</code>, respectively. Changing this configuration (with Checkstyle's "SuppressionCommentFilter") to use the strings "<code>BEGIN&nbsp;SuppressWarnings(CheckStyle.</code>" and "<code>END&nbsp;SuppressWarnings(CheckStyle.</code>" makes the controls look more like PMD:</p><br/><br/><pre><br/><code>// BEGIN SuppressWarnings(Checkstyle.HiddenField) justification: "Effective Java," 2nd ed., Bloch, Item 2</code><br/><code>// END SuppressWarnings(Checkstyle.HiddenField)</code><br/></pre><br/><br/><p><p>With Checkstyle comments, the particular check violation (<code>HiddenField</code>) <em>is</em> significant because each check has its own "<code>BEGIN/END</code>" comment pair.</p><br/><br/><p><p>FindBugs also supports warning generation suppression with a <code>@SuppressWarnings</code> annotation, so no further configuration is required to achieve some level of uniformity with other tools. Unfortunately, Findbugs has to support a custom <code>@SuppressWarnings</code> annotation because the built-in Java <code>@SuppressWarnings</code> annotation has a <code>SOURCE</code> retention policy which is not strong enough to retain the annotation in the class file where FindBugs needs it. I fully qualify FindBugs warnings suppressions to avoid clashing with Java's <code>@SuppressWarnings</code> annotation:</p><br/><br/><pre><code>@edu.umd.cs.findbugs.annotations.SuppressWarnings("UWF&#95;FIELD&#95;NOT&#95;INITIALIZED&#95;IN&#95;CONSTRUCTOR")</code></pre><br/><br/><p><p>These techniques makes things look reasonably consistent across tools. Note that having each warning suppression contain the string "<code>SuppressWarnings</code>" makes it easy to run a simple search to find all instances for all tools over an entire code base.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA TO READ FROM A FILE THAT IS ACTIV BE WRITTEN
    </pattern>
    <template>
<![CDATA[<p>Could not get the example to work using FileChannel.read(ByteBuffer) because it isn't a blocking read. Did however get the code below to work:</p><br/><br/><pre><code>boolean running = true;<br/>BufferedInputStream reader = new BufferedInputStream( <br/>    new FileInputStream( "out.txt" ) );<br/><br/>public void run() {<br/>    while( running ) {<br/>        if( reader.available() &gt; 0 ) {<br/>            System.out.print( (char)reader.read() );<br/>        }<br/>        else {<br/>            try {<br/>                sleep( 500 );<br/>            }<br/>            catch( InterruptedException ex )<br/>            {<br/>                running = false;<br/>            }<br/>        }<br/>    }<br/>}<br/></code></pre><br/><br/><p>Of course the same thing would work as a timer instead of a Thread, but I leave that up to the programmer. I'm still looking for a better way, but this works for me for now.</p><br/><br/><p>Oh, and I'll caveat this with: I'm using 1.4.2. Yes I know I'm in the stone ages still.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALL TOSTR ( ) ON A JAVA PRIMIT
    </pattern>
    <template>
<![CDATA[<p>Java autoboxing/unboxing doesn't go to the extent to allow you to dereference a primitive, so your compiler prevents it. Your compiler still knows <code>myInt</code> as a primitive.  There's a paper about this issue at <a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/autoboxing.html" rel="nofollow">jcp.org</a>.</p><br/><br/><p>Autoboxing is mainly useful during assignment or parameter passing -- allowing you to pass a primitive as an object (or vice versa), or assign a primitive to an object (or vice versa).</p><br/><br/><p>So unfortunately, you would have to do it like this: (kudos Patrick, I switched to your way)</p><br/><br/><pre><code><br/>   Integer.toString(myInt);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA WEBSTART MULTIPL DEPEND NATIV LIBRARI
    </pattern>
    <template>
<![CDATA[<p>Static compilation proved to be the only way to webstart multiple dependent native libraries.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REALLI WIDEN VS AUTOBOX
    </pattern>
    <template>
<![CDATA[<p>In the first case, you have a widening conversion happening. This can be see when runinng the "javap" utility program (included w/ the JDK), on the compiled class:</p><br/><br/><pre><code>public static void main(java.lang.String[]);<br>  Code:<br>   0:   iconst_ 5<br>   1:   istore_ 1<br>   2:   iload_ 1<br>   3:   i2l<br>   4:   invokestatic    #6; //Method hello:(J)V<br>   7:   return<br><br>}<br></code></pre><br/><br/><p>Clearly, you see the I2L, which is the mnemonic for the widening Integer-To-Long bytecode instruction. See reference <a href="http://java.sun.com/docs/books/jvms/second_edition/html/Instructions2.doc6.html" rel="nofollow">here</a>.</p><br/><br/><p>And in the other case, replacing the "long x" with the object "Long x" signature, you'll have this code in the main method:</p><br/><br/><pre><code>public static void main(java.lang.String[]);<br>  Code:<br>   0:   iconst_ 5<br>   1:   istore_ 1<br>   2:   iload_ 1<br>   3:   invokestatic    #6; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;<br>   6:   invokestatic    #7; //Method hello:(Ljava/lang/Integer;)V<br>   9:   return<br><br>}<br></code></pre><br/><br/><p>So you see the compiler has created the instruction Integer.valueOf(int), to box the primitive inside the wrapper.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSON LINUX WEB SERVER
    </pattern>
    <template>
<![CDATA[<p>This article has some of the best ways to lock things down:</p><br/><br/><p><a href="http://www.petefreitag.com/item/505.cfm" rel="nofollow">http://www.petefreitag.com/item/505.cfm</a></p><br/><br/><p>Some highlights:</p><br/><br/><ul><br/><li>Make sure no one can browse the directories</li><br/><li>Make sure only root has write privileges to everything, and only root has read privileges to certain config files</li><br/><li>Run mod_security</li><br/></ul><br/><br/><p>The article also takes some pointers from this book:</p><br/><br/><p><a href="http://spendfish.com/product/0596007248" rel="nofollow">Apache Securiy</a> (O'Reilly Press)</p><br/><br/><p>As far as distros, I've run Debain and Ubuntu, but it just depends on how much you want to do. I ran Debian with no X and just ssh'd into it whenever i needed anything. That is a simple way to keep overhead down. Or Ubuntu has some nice GUI things that make it easy to control Apache/MySQL/PHP.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      POST VARIABL USE JAVA SERVLET
    </pattern>
    <template>
<![CDATA[<p>Your <code>HttpServletRequest</code> object has a <code>getParameter(String paramName)</code> method that can be used to get parameter values.  <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" rel="nofollow">http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE A TRI BLOCK AROUND MY SUPER ( ) CALL
    </pattern>
    <template>
<![CDATA[<p>Unfortunately, compilers can't work on theoretical principles, and even though you may know that it is safe in your case, if they allowed it, it would have to be safe for all cases.</p><br/><br/><p>In other words, the compiler isn't stopping just you, it's stopping everyone, including all those that don't know that it is unsafe and needs special handling. There are probably other reasons for this as well, as all languages usually have ways to do <em>unsafe</em> things if one knows how to deal with them.</p><br/><br/><p>In C# .NET there are similar provisions, and the only way to declare a constructor that calls a base constructor is this:</p><br/><br/><pre><code>public ClassName(...) : base(...)<br></code></pre><br/><br/><p>in doing so, the base constructor will be called before the body of the constructor, and you cannot change this order.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      PUBLIC POPULAR WEBSIT USE JAVASERV FACE
    </pattern>
    <template>
<![CDATA[<p>This may help: <a href="http://wiki.java.net/bin/view/Projects/RealWorldJSFLinks" rel="nofollow">http://wiki.java.net/bin/view/Projects/RealWorldJSFLinks</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      REAL BENEFIT OF USE J #
    </pattern>
    <template>
<![CDATA[<p>J# is no longer included in VS2008. Unless you already have J# code, you should probably stay away.</p><br/><br/><p>From <a href="http://msdn.microsoft.com/en-us/vjsharp/default.aspx" rel="nofollow">j# product page:</a></p><br/><br/><blockquote><br/>  <p>Since customers have told us that the<br/>  existing J# feature set largely meets<br/>  their needs and usage of J# is<br/>  declining, Microsoft is retiring the<br/>  Visual J# product and Java Language<br/>  Conversion Assistant tool to better<br/>  allocate resources for other customer<br/>  requirements. The J# language and JLCA<br/>  tool will not be available in future<br/>  versions of Visual Studio. To preserve<br/>  existing customer investments in J#,<br/>  Microsoft will continue to support the<br/>  J# and JLCA technology that shipped<br/>  with Visual Studio 2005 through to<br/>  2015 as per our product life-cycle<br/>  strategy. For more information, see<br/>  Expanded Microsoft Support Lifecycle<br/>  Policy for Business &amp; Development<br/>  Products.</p><br/></blockquote>]]>    </template>
  </category>
  <category>
    <pattern>
      BUILD FOR JAVA RCP FOR DEPLOY WITH JNLP
    </pattern>
    <template>
<![CDATA[<p>I haven't done this before, but I found <a href="http://i-proving.ca/space/RCP+and+Java+Web+Start" rel="nofollow">this site</a> on the web giving an explanation.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      ON WIN64
    </pattern>
    <template>
<![CDATA[<p>I'm using Eclipse with a 64bit VM. However I have to use Java 1.5, because with Java 1.6, even 1.6.0_10ea, Eclipse crashed when changing the .classpath-file. On Linux I had the same problems and could only get the 64bit Eclipse to work with 64bit Java 1.5.</p><br/><br/><p>The problem seems to be with the just in time compilation, since with vmparam -Xint eclipse works -- but this is not a sollution, because it's slow then.</p><br/><br/><p><strong>Edit:</strong></p><br/><br/><p>With 1.6.0_11 it seems to work. </p><br/><br/><p>1.6_10 final might work as well as mentioned in the comment, but I've not tested that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIME ZONE IS MESS UP
    </pattern>
    <template>
<![CDATA[<p>It's a "quirk" in the way the JVM looks up the zoneinfo file.  See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6456628" rel="nofollow">Bug ID 6456628</a>.</p><br/><br/><p>The easiest workaround is to make /etc/localtime a symlink to the correct zoneinfo file.  For Pacific time, the following commands should work:</p><br/><br/><pre><code># sudo cp /etc/localtime /etc/localtime.dist<br># sudo ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime<br></code></pre><br/><br/><p>I haven't had any problems with the symlink approach.</p><br/><br/><p>Edit: Added "sudo" to the commands.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      DECENT FREE JAVA DATA PLOT LIBRARI OUT THERE
    </pattern>
    <template>
<![CDATA[<p>I've had success using JFreeChart on multiple projects. It is <em>very</em> configurable. JFreeChart is open source, but they charge for the developer guide. If you're doing something simple, the sample code is probably good enough. Otherwise, $50 for the developer guide is a pretty good bargain.</p><br/><br/><p>With respect to "real-time" data, I've also used JFreeChart for these sorts of applications. Unfortunately, I had to create some custom data models with appropriate synchronization mechanisms to avoid race conditions. However, it wasn't terribly difficult and JFreeChart would still be my first choice. However, as the FAQ suggests, JFreeChart might not give you the best performance if that is a big concern.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      JUNIT VS TESTNG
    </pattern>
    <template>
<![CDATA[<p>I've used both, but I have to agree with Justin Standard that you shouldn't really consider rewriting your existing tests to any new format.  Regardless of the decision, it is pretty trivial to run both.  TestNG strives to be much more configurable than JUnit, but in the end they both work equally well.</p><br/><br/><p>TestNG has a neat feature where you can mark tests as a particular group, and then easily run all tests of a specific group, or exclude tests of a particular group.  Thus you can mark tests that run slowly as in the "slow" group and then ignore them when you want quick results.  A suggestion from their documentation is to mark some subset as "checkin" tests which should be run whenever you check new files in.  I never saw such a feature in JUnit, but then again, if you don't have it, you don't REALLY miss it.</p><br/><br/><p>For all its claims of high configuration, I did run into a corner case the a couple weeks ago where I couldn't do what I wanted to do... I wish I could remember what it is, but I wanted to bring it up so you know that it's not perfect.</p><br/><br/><p>The biggest advantage TestNG has is annotations... which JUnit added in version 4 anyways.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      + SQL SERVER A VIABL SOLUT
    </pattern>
    <template>
<![CDATA[<p>I've worked on a project using MSQL Server in conjunction with a Java Stack. It works very well and as long, since JDBC shouldn't really care about your database. We used ehcache together with Hibernate and had problems with the MS JDBC Driver, so we switched to jtds and it works really good.</p><br/><br/><p>It's quite a while ago, so you still might wanna give the MS driver a chance...</p>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS FILE NAME MUST END WITH .CLASS EXCEPT IN JAVA SEARCH
    </pattern>
    <template>
<![CDATA[<p>Two more general-purpose mechanisms for fixing some of Eclipse's idiosyncrasies:</p><br/><br/><ul><br/><li>Close and open the project</li><br/><li>Delete the project (but not from disk!) and reimport it as an existing project</li><br/></ul><br/><br/><p>Failing that, <a href="https://bugs.eclipse.org/bugs/buglist.cgi?query_format=specific&amp;order=relevance+desc&amp;bug_status=__all__&amp;product=JDT&amp;content=Class+file+name+must+end+with+.class" rel="nofollow">bugs.eclipse.org</a> might provide the answer.</p><br/><br/><p>If the workspace is caching something broken, you may be able to delete it by poking around in <strong>workspace/.metadata/.plugins</strong>. Most of that stuff is fairly transient (though backup and watch for deleted preferences).</p>]]>    </template>
  </category>
  <category>
    <pattern>
      IDENTIFI IN WHICH JAVA APPLET CONTEXT I M RUN WITHOUT PASS AN ID
    </pattern>
    <template>
<![CDATA[<p>Singletons are evil, what do you expect? ;)</p><br/><br/><p>Perhaps the most comprehensive approach would be to load the bulk of the applet in a different class loader (use java.net.URLClassLoader.newInstance). Then use a WeakHashMap to associate class loader with an applet. If you could split most of the code into a common class loader (as a parent of each per-applet class loader) and into the normal applet codebase, that would be faster but more work.</p><br/><br/><p>Other hacks:</p><br/><br/><p>If you have access to any component, you can use Component.getParent repeatedly or SwingUtilities.getRoot.</p><br/><br/><p>If you are in a per-applet instance thread, then you can set up a ThreadLocal.</p><br/><br/><p>From the EDT, you can read the current event from the queue (java.awt.EventQueue.getCurrentEvent()), and possibly find a component from that. Alternatively push an EventQueue with a overridden dispatchEvent method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA SOURC CODE ANALYZ AND MODIFI LIBRARI
    </pattern>
    <template>
<![CDATA[<p>I don't have any great advice for you, but I wanted to point out that there are a couple of Java 1.5 grammars for Antlr available already on their <a href="http://www.antlr.org/grammar/list" rel="nofollow">grammar list</a>.</p><br/><br/><p>You might also want to take a look at the <a href="http://www.eclipse.org/" rel="nofollow">Eclipse</a> source.  They should have a very robust parser, and they already have code transformations (refactorings) built-in, so you'll have some valuable example code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPLAIN THE USE OF JAVA.MATH.MATHCONTEXT
    </pattern>
    <template>
<![CDATA[<p>@jatan</p><br/><br/><blockquote><br/>  <p>Thanks for you answer. It makes sense. Can you please explain me MathContext in the context of BigDecimal#round method.</p><br/></blockquote><br/><br/><p>There's nothing special about <code>BigDecimal.round()</code> <em>vs.</em> any other <code>BigDecimal</code> method.  In all cases, the <code>MathContext</code> specifies the number of significant digits and the rounding technique.  Basically, there are two parts of every <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/math/MathContext.html" rel="nofollow"><code>MathContext</code></a>.  There's a precision, and there's also a <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/math/RoundingMode.html" rel="nofollow"><code>RoundingMode</code></a>.</p><br/><br/><p>The precision again specifies the number of significant digits.  So if you specify <code>123</code> as a number, and ask for 2 significant digits, you're going to get <code>120</code>.  It might be clearer if you think in terms of scientific notation.</p><br/><br/><p><code>123</code> would be <code>1.23e2</code> in scientific notation.  If you only keep 2 significant digits, then you get <code>1.2e2</code>, or <code>120</code>.  By reducing the number of significant digits, we reduce the precision with which we can specify a number.</p><br/><br/><p>The <code>RoundingMode</code> part specifies how we should handle the loss of precision.  To reuse the example, if you use <code>123</code> as the number, and ask for 2 significant digits, you've reduced your precision.  With a <code>RoundingMode</code> of <code>HALF_UP</code> (the default mode), <code>123</code> will become <code>120</code>.  With a <code>RoundingMode</code> of <code>CEILING</code>, you'll get <code>130</code>.</p><br/><br/><p>For example:</p><br/><br/><pre><code>System.out.println(new BigDecimal("123.4",<br/>                   new MathContext(4,RoundingMode.HALF_UP)));<br/>System.out.println(new BigDecimal("123.4",<br/>                   new MathContext(2,RoundingMode.HALF_UP)));<br/>System.out.println(new BigDecimal("123.4",<br/>                   new MathContext(2,RoundingMode.CEILING)));<br/>System.out.println(new BigDecimal("123.4",<br/>                   new MathContext(1,RoundingMode.CEILING)));<br/></code></pre><br/><br/><p>Outputs:</p><br/><br/><pre><code>123.4<br/>1.2E+2<br/>1.3E+2<br/>2E+2<br/></code></pre><br/><br/><p>You can see that both the precision and the rounding mode affect the output.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRUCTUR A JAVA APPLIC IN OTHER WORD WHERE DO I PUT MY CLASS
    </pattern>
    <template>
<![CDATA[<p>I've really come to like Maven's <a href="http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html" rel="nofollow" title="S">Standard Directory Layout</a>.</p><br/><br/><p>One of the key ideas for me is to have two source roots - one for production code and one for test code like so:</p><br/><br/><pre><code>MyProject/src/main/java/com/acme/Widget.java<br/>MyProject/src/test/java/com/acme/WidgetTest.ava<br/></code></pre><br/><br/><p>(here, both src/main/java and src/test/java are source roots).</p><br/><br/><p>Advantages:</p><br/><br/><ul><br/><li>Your tests have package (or "default") level access to your classes under test.</li><br/><li>You can easily package only your production sources into a JAR by dropping src/test/java as a source root.</li><br/></ul><br/><br/><p>One rule of thumb about class placement and packages:</p><br/><br/><p>Generally speaking, well structured projects will be free of <a href="http://en.wikipedia.org/wiki/Circular_dependency" rel="nofollow" title="screenshot">circular dependencies</a>. Learn when they are bad (and when they are <a href="http://beust.com/weblog/archives/000208.html" rel="nofollow" title="Effective Java 2nd Edition">not</a>), and consider a tool like <a href="http://www.google.ca/search?q=JDepend&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a" rel="nofollow">JDepend</a> or <a href="http://www.hello2morrow.com/en/sonarj/sonarj.php" rel="nofollow">SonarJ</a> that will help you eliminate them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE FOR WGS84 TO GOOGL MAP POSIT AND BACK
    </pattern>
    <template>
<![CDATA[<p><a href="http://mapki.com/wiki/Tile_utility_code_in_Java" rel="nofollow">Tile utility code in Java</a> on mapki.com (great resource for google map developers)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL ENCOD
    </pattern>
    <template>
<![CDATA[<p>Perhaps you could deserialise the byte array using a known encoding and ensure that (a) it doesn't throw any exceptions, and (b) deserialises to the original string. It seems that from your description of the scenario, you may not have the original string readily available. Might there be a way to create it?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PACKAG JAVA APP FOR THE WINDOWS LINUX DESKTOP
    </pattern>
    <template>
<![CDATA[<p>To follow up on pauxu's answer, I'm using launch4j and NSIS on a project of mine and thought it would be helpful to show just how I'm using them.  Here's what I'm doing for Windows.  BTW, I'm creating .app and .dmg for Mac, but haven't figured out what to do for Linux yet.</p><br/><br/><h2>Project Copies of launch4j and NSIS</h2><br/><br/><p>In my project I have a "vendor" directory and underneath it I have a directory for "launch4j" and "nsis".  Within each is a copy of the install for each application.  I find it easier to have a copy local to the project rather than forcing others to install both products and set up some kind of environment variable to point to each.</p><br/><br/><h2>Script Files</h2><br/><br/><p>I also have a "scripts" directory in my project that holds various configuration/script files for my project.  First there is the launch4j.xml file:</p><br/><br/><pre><code>&lt;launch4jConfig&gt;<br/>  &lt;dontWrapJar&gt;true&lt;/dontWrapJar&gt;<br/>  &lt;headerType&gt;gui&lt;/headerType&gt;<br/>  &lt;jar&gt;rpgam.jar&lt;/jar&gt;<br/>  &lt;outfile&gt;rpgam.exe&lt;/outfile&gt;<br/>  &lt;errTitle&gt;&lt;/errTitle&gt;<br/>  &lt;cmdLine&gt;&lt;/cmdLine&gt;<br/>  &lt;chdir&gt;.&lt;/chdir&gt;<br/>  &lt;priority&gt;normal&lt;/priority&gt;<br/>  &lt;downloadUrl&gt;http://www.rpgaudiomixer.com/&lt;/downloadUrl&gt;<br/>  &lt;supportUrl&gt;&lt;/supportUrl&gt;<br/>  &lt;customProcName&gt;false&lt;/customProcName&gt;<br/>  &lt;stayAlive&gt;false&lt;/stayAlive&gt;<br/>  &lt;manifest&gt;&lt;/manifest&gt;<br/>  &lt;icon&gt;&lt;/icon&gt;<br/>  &lt;jre&gt;<br/>    &lt;path&gt;&lt;/path&gt;<br/>    &lt;minVersion&gt;1.5.0&lt;/minVersion&gt;<br/>    &lt;maxVersion&gt;&lt;/maxVersion&gt;<br/>    &lt;jdkPreference&gt;preferJre&lt;/jdkPreference&gt;<br/>  &lt;/jre&gt;<br/>  &lt;splash&gt;<br/>    &lt;file&gt;..\images\splash.bmp&lt;/file&gt;<br/>    &lt;waitForWindow&gt;true&lt;/waitForWindow&gt;<br/>    &lt;timeout&gt;60&lt;/timeout&gt;<br/>    &lt;timeoutErr&gt;true&lt;/timeoutErr&gt;<br/>  &lt;/splash&gt;<br/>&lt;/launch4jConfig&gt;<br/></code></pre><br/><br/><p>And then there's the NSIS script rpgam-setup.nsis.  It can take a VERSION argument to help name the file.</p><br/><br/><pre><code>; The name of the installer<br/>Name "RPG Audio Mixer"<br/><br/>!ifndef VERSION<br/>    !define VERSION A.B.C<br/>!endif<br/><br/>; The file to write<br/>outfile "..\dist\installers\windows\rpgam-${VERSION}.exe"<br/><br/>; The default installation directory<br/>InstallDir "$PROGRAMFILES\RPG Audio Mixer"<br/><br/>; Registry key to check for directory (so if you install again, it will <br/>; overwrite the old one automatically)<br/>InstallDirRegKey HKLM "Software\RPG_Audio_Mixer" "Install_Dir"<br/><br/># create a default section.<br/>section "RPG Audio Mixer"<br/><br/>    SectionIn RO<br/><br/>    ; Set output path to the installation directory.<br/>    SetOutPath $INSTDIR<br/>    File /r "..\dist\layout\windows\"<br/><br/>    ; Write the installation path into the registry<br/>    WriteRegStr HKLM SOFTWARE\RPG_Audio_Mixer "Install_Dir" "$INSTDIR"<br/><br/>    ; Write the uninstall keys for Windows<br/>    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer" "DisplayName" "RPG Audio Mixer"<br/>    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer" "UninstallString" '"$INSTDIR\uninstall.exe"'<br/>    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer" "NoModify" 1<br/>    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer" "NoRepair" 1<br/>    WriteUninstaller "uninstall.exe"<br/><br/>    ; read the value from the registry into the $0 register<br/>    ;readRegStr $0 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment" CurrentVersion<br/><br/>    ; print the results in a popup message box<br/>    ;messageBox MB_OK "version: $0"<br/><br/>sectionEnd<br/><br/>Section "Start Menu Shortcuts"<br/>  CreateDirectory "$SMPROGRAMS\RPG Audio Mixer"<br/>  CreateShortCut "$SMPROGRAMS\RPG Audio Mixer\Uninstall.lnk" "$INSTDIR\uninstall.exe" "" "$INSTDIR\uninstall.exe" 0<br/>  CreateShortCut "$SMPROGRAMS\RPG AUdio Mixer\RPG Audio Mixer.lnk" "$INSTDIR\rpgam.exe" "" "$INSTDIR\rpgam.exe" 0<br/>SectionEnd<br/><br/>Section "Uninstall"<br/><br/>    ; Remove registry keys<br/>    DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\RPGAudioMixer"<br/>    DeleteRegKey HKLM SOFTWARE\RPG_Audio_Mixer<br/><br/>    ; Remove files and uninstaller<br/>    Delete $INSTDIR\rpgam.exe<br/>    Delete $INSTDIR\uninstall.exe<br/><br/>    ; Remove shortcuts, if any<br/>    Delete "$SMPROGRAMS\RPG Audio Mixer\*.*"<br/><br/>    ; Remove directories used<br/>    RMDir "$SMPROGRAMS\RPG Audio Mixer"<br/>    RMDir "$INSTDIR"<br/><br/>SectionEnd<br/></code></pre><br/><br/><h2>Ant Integration</h2><br/><br/><p>I have some targets in my Ant buildfile (build.xml) to handle the above.  First I tel Ant to import launch4j's Ant tasks:</p><br/><br/><pre><code>&lt;property name="launch4j.dir" location="vendor/launch4j" /&gt;<br/>&lt;taskdef name="launch4j" <br/>    classname="net.sf.launch4j.ant.Launch4jTask"<br/>    classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" /&gt;<br/></code></pre><br/><br/><p>I then have a simple target for creating the wrapper executable:</p><br/><br/><pre><code>&lt;target name="executable-windows" depends="jar" description="Create Windows executable (EXE)"&gt;<br/>    &lt;launch4j configFile="scripts/launch4j.xml" outfile="${exeFile}" /&gt;<br/>&lt;/target&gt;<br/></code></pre><br/><br/><p>And another target for making the installer:</p><br/><br/><pre><code>&lt;target name="installer-windows" depends="executable-windows" description="Create the installer for Windows (EXE)"&gt;<br/>    &lt;!-- Lay out files needed for building the installer --&gt;<br/>    &lt;mkdir dir="${windowsLayoutDirectory}" /&gt;<br/>    &lt;copy file="${jarFile}" todir="${windowsLayoutDirectory}" /&gt;<br/>    &lt;copy todir="${windowsLayoutDirectory}/lib"&gt;<br/>        &lt;fileset dir="${libraryDirectory}" /&gt;<br/>        &lt;fileset dir="${windowsLibraryDirectory}" /&gt;<br/>    &lt;/copy&gt;<br/>    &lt;copy todir="${windowsLayoutDirectory}/icons"&gt;<br/>         &lt;fileset dir="${iconsDirectory}" /&gt;<br/>    &lt;/copy&gt;<br/>    &lt;copy todir="${windowsLayoutDirectory}" file="${exeFile}" /&gt;<br/><br/>    &lt;mkdir dir="${windowsInstallerDirectory}" /&gt;<br/><br/>    &lt;!-- Build the installer using NSIS --&gt;<br/>    &lt;exec executable="vendor/nsis/makensis.exe"&gt;<br/>        &lt;arg value="/DVERSION=${version}" /&gt;<br/>        &lt;arg value="scripts/rpgam-setup.nsi" /&gt;<br/>    &lt;/exec&gt;<br/>&lt;/target&gt;<br/></code></pre><br/><br/><p>The top portion of that just copies the necessary files for the installer to a temporary location and the second half executes the script that uses all of it to make the installer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WOULD LIKE A RECOMMEND FOR A BOOK ON ECLIPS S RICH CLIENT PLATFORM ( RCP )
    </pattern>
    <template>
<![CDATA[<p>I've been doing Eclipse RCP development for almost 2 years now.  When I first started, I wanted a book for help and many people told me, with Eclipse you're better off using the <a href="http://wiki.eclipse.org/index.php/Rich_Client_Platform" rel="nofollow">Eclipsepedia</a> and Google.</p><br/><br/><p>However, I started with "<a href="http://rads.stackoverflow.com/amzn/click/0321305027" rel="nofollow">The Java Developer's Guide to Eclipse</a>" by D'Anjou et al, and I still reference it when I need a better starting point or a good reference.  It's probably a little outdated now, but is very thorough and really explains how the Eclipse framework works.  Like just about anything, RCP isn't too hard to pick up if you've figured out how the framework supporting it works and you'll get a lot more mileage out of your code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISTRIBUT
    </pattern>
    <template>
<![CDATA[<p>I've seen some people having a play with <a href="http://216.93.179.140:8080/wiki/display/GG15UG/Distributed+JUnit+Overview" rel="nofollow">distributed JUnit</a>. I can't particularly vouch for how effective it is, but the other teams I've seen seemed to think it was straight forward enough. Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION FIXAT IN JBOSS
    </pattern>
    <template>
<![CDATA[<p><a href="https://jira.jboss.org/jira/browse/JBAS-4436" rel="nofollow">This defect</a> (found <a href="http://forum.springframework.org/showthread.php?t=54688" rel="nofollow">here</a>) points the way to the solution. The Tomcat instance that runs in JBoss is configured with emptySessionPath="true", rather than "false", which is the default. This can be modified in <code>.../deploy/jboss-web.deployer/server.xml</code>; both the HTTP and AJP connectors have this option.</p><br/><br/><p>The feature itself is used to eliminate the context path (eg. "foo" in <a href="http://example.com/foo" rel="nofollow">http://example.com/foo</a>) from being included in the JSESSIONID cookie. Setting it to false will break applications that rely on cross-application authentication, which includes stuff built using some portal frameworks. It didn't negatively affect the application in question, however.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BINARI XML FORMAT FOR JAVAM
    </pattern>
    <template>
<![CDATA[<p>You might want to take a look at <a href="http://en.wikipedia.org/wiki/WBXML" rel="nofollow">wbxml</a> (Wireless Binary XML) it is optimized for size, and often used on mobile phones, but it is not optimized for parsing speed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OSS PROJECT SHOULD I LOOK AT IF I NEED TO DO SPRING FRIENDLI WORKFLOW
    </pattern>
    <template>
<![CDATA[<p>If you only need some simple process orchestration, Spring's own <a href="http://springframework.org/webflow" rel="nofollow" title="Unison Home Page">Web Flow</a>, despite its name can serve as a orchestration task manager.   If you need to preserve state for several days then you will need to become an 'early adopter' of one of the open-source projects.  You may want to look at <a href="http://www.eclipse.org/bpel/" rel="nofollow">Eclipse's BPEL project</a>.  </p><br/><br/><p>My hunch is that once a clearer picture of the BPEL/BPM/Workflow space emerges you will see Spring provide an abstraction layer the same way they have for JDBC, Transactions, ORM frameworks etc... </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIFI A CLASS WIDE GROUP ON A TESTNG TEST CASE
    </pattern>
    <template>
<![CDATA[<p>The answer is through a custom <strong>org.testng.IMethodSelector</strong>:</p><br/><br/><p>Its <strong>includeMethod()</strong> can exclude any method we want, like a public not-annotated method.</p><br/><br/><p>However, to register a custom <em>Java</em> MethodSelector, you must add it to the <strong>XMLTest</strong> instance managed by any TestRunner, which means you need your own <strong>custom TestRunner</strong>.</p><br/><br/><p>But, to build a custom TestRunner, you need to register a <strong>TestRunnerFactory</strong>, through the <strong>-testrunfactory</strong> option.</p><br/><br/><p>BUT that -testrunfactory is NEVER taken into account by <strong>TestNG</strong> class... so you need also to define a custom TestNG class :</p><br/><br/><ul><br/><li>in order to override the configure(Map) method, </li><br/><li>so you can actually set the TestRunnerFactory</li><br/><li>TestRunnerFactory which will build you a custom TestRunner,</li><br/><li>TestRunner which will set to the XMLTest instance a custom XMLMethodSelector</li><br/><li>XMLMethodSelector which will build a custom IMethodSelector</li><br/><li>IMethodSelector which will exclude any TestNG methods of your choosing!</li><br/></ul><br/><br/><p>Ok... it's a nightmare. But it is also a code-challenge, so it must be a little challenging ;)</p><br/><br/><p>All the code is available at <a href="http://snippets.dzone.com/posts/show/6446" rel="nofollow"><strong>DZone snippets</strong></a>.</p><br/><br/><p>As usual for a code challenge:</p><br/><br/><ul><br/><li>one java class (and quite a few inner classes)</li><br/><li>copy-paste the class in a 'source/test' directory (since the package is 'test')</li><br/><li>run it (no arguments needed)</li><br/></ul><br/><br/><p><hr /></p><br/><br/><p><strong>Update from Mike Stone:</strong></p><br/><br/><p>I'm going to accept this because it sounds pretty close to what I ended up doing, but I figured I would add what I did as well.</p><br/><br/><p>Basically, I created a Groups annotation that behaves like the groups property of the Test (and other) annotations.</p><br/><br/><p>Then, I created a GroupsAnnotationTransformer, which uses IAnnotationTransformer to look at all tests and test classes being defined, then modifies the test to add the groups, which works perfectly with group exclusion and inclusion.</p><br/><br/><p>Modify the build to use the new annotation transformer, and it all works perfectly!</p><br/><br/><p>Well... the one caveat is that it doesn't add the groups to non-test methods... because at the time I did this, there was another annotation transformer that lets you transform ANYTHING, but it somehow wasn't included in the TestNG I was using for some reason... so it is a good idea to make your before/after annotated methods to alwaysRun=true... which is sufficient for me.</p><br/><br/><p>The end result is I can do:</p><br/><br/><pre><code>@Groups({ "myGroup1", "myGroup2"})<br/>public class MyTestCase {<br/>    @Test<br/>    @Groups("aMethodLevelGroup")<br/>    public void myTest() {<br/>    }<br/>}<br/></code></pre><br/><br/><p>And I made the transformer work with subclassing and everything.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CE FACE FILEINPUT FILE PATH AND FILE NAME PROPERTI
    </pattern>
    <template>
<![CDATA[<p>I believe that the real answer is that you can't.  The file path won't be sent by the browser for security reasons.  The file name will be sent, however I don't believe it gets sent without an actual upload.</p><br/><br/><p>The closest you could come, afaik, would be to forcibly kill the connection just when the upload starts.  That would net you the filename with little actual transferred data, but it doesn't sound like it would be useful to you.</p><br/><br/><p>Alternatively, a signed Java applet might get you closer to a solution that you'd want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A LINK LIST IN JAVA
    </pattern>
    <template>
<![CDATA[<p>The obvious solution to developers familiar to Java is to use the <strong>LinkedList</strong> class already provided in <strong>java.util</strong>. Say, however, you wanted to make your own implementation for some reason. Here is a quick example of a linked list that inserts a new link at the beginning of the list, deletes from the beginning of the list and loops through the list to print the links contained in it. <strong>Enhancements</strong> to this implementation include making it a <strong>double-linked list</strong>, adding methods to <strong>insert</strong> and <strong>delete</strong> from the middle or end, and by adding <strong>get</strong> and <strong>sort</strong> methods as well. </p><br/><br/><p><strong>Note</strong>: In the example, the Link object doesn't actually contain another Link object -  <em>nextLink</em> is actually only a reference to another link. </p><br/><br/><pre><code>class Link {<br/>    public int data1;<br/>    public double data2;<br/>    public Link nextLink;<br/><br/>    //Link constructor<br/>    public Link(int d1, double d2) {<br/>	    data1 = d1;<br/>	    data2 = d2;<br/>    }<br/><br/>    //Print Link data<br/>    public void printLink() {<br/>	    System.out.print("{" + data1 + ", " + data2 + "} ");<br/>    }<br/>}<br/><br/>class LinkList {<br/>    private Link first;<br/><br/>    //LinkList constructor<br/>    public LinkList() {<br/>	    first = null;<br/>    }<br/><br/>    //Returns true if list is empty<br/>    public boolean isEmpty() {<br/>	    return first == null;<br/>    }<br/><br/>    //Inserts a new Link at the first of the list<br/>    public void insert(int d1, double d2) {<br/>	    Link link = new Link(d1, d2);<br/>	    link.nextLink = first;<br/>	    first = link;<br/>    }<br/><br/>    //Deletes the link at the first of the list<br/>    public Link delete() {<br/>	    Link temp = first;<br/>	    first = first.nextLink;<br/>	    return temp;<br/>    }<br/><br/>    //Prints list data<br/>    public void printList() {<br/>	    Link currentLink = first;<br/>	    System.out.print("List: ");<br/>	    while(currentLink != null) {<br/>		    currentLink.printLink();<br/>		    currentLink = currentLink.nextLink;<br/>	    }<br/>	    System.out.println("");<br/>    }<br/>}  <br/><br/>class LinkListTest {<br/>    public static void main(String[] args) {<br/>	    LinkList list = new LinkList();<br/><br/>	    list.insert(1, 1.01);<br/>	    list.insert(2, 2.02);<br/>	    list.insert(3, 3.03);<br/>	    list.insert(4, 4.04);<br/>	    list.insert(5, 5.05);<br/><br/>	    list.printList();<br/><br/>	    while(!list.isEmpty()) {<br/>		    Link deletedLink = list.delete();<br/>		    System.out.print("deleted: ");<br/>		    deletedLink.printLink();<br/>		    System.out.println("");<br/>	    }<br/>	    list.printList();<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DB2 ISSU WITH DBUNIT
    </pattern>
    <template>
<![CDATA[<p>Well, I think I fixed it by doing the following:</p><br/><br/><pre><code>db2stop force<br/>db2start<br/></code></pre><br/><br/><p>At least, things seem to be working now.....</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SMALL MODIF TO AN XML DOCUMENT USE STAX
    </pattern>
    <template>
<![CDATA[<p>StAX works pretty well and is very fast. I used it in a project to parse XML files which are up to 20MB. I don't have a thorough analysis, but it was definitely faster than SAX. </p><br/><br/><p>As for your question: The difference between streaming and event-handling, AFAIK is control. With the streaming API you can walk through your document step by step and get the contents you want. Whereas the event-based API you can only handle what you are interested in.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KVM AND LICENS
    </pattern>
    <template>
<![CDATA[<p>There are multiple issues here as ikvm is currently being transitioned away from the GNU classpath system to Sun's OpenJDK.  Both are licensed as GPL+Exceptions to state explicitly that applications which merely use the OpenJDK libraries will not be considered derived works.</p><br/><br/><p>Generally speaking, applications which rely upon components with defined specs such as this do not fall under the GPL anyway.  For example, linking against public POSIX APIs does not trigger GPL reliance in a Linux application, despite the kernel being GPL.  A similar principal will usually (the details can be tricky) apply to replacing Sun's Java with a FOSS/GPL implementation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORK AROUND THE FACT THAT ALL JAVA BYTE ARE SIGN
    </pattern>
    <template>
<![CDATA[<p>When reading any single value from the array copy it into something like a short or an int and manually convert the negative number into the positive value it should be.</p><br/><br/><pre><code>byte[] foobar = ..;<br/>int value = foobar[10];<br/>if (value &lt; 0) value += 256 // Patch up the 'falsely' negative value<br/></code></pre><br/><br/><p>You can do a similar conversion when writing into the array.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PDF FROM MULTIPAG FORM IN WEBOBJECT
    </pattern>
    <template>
<![CDATA[<p>The canonical response when asked about PDFs from WebObjects has generally been <a href="http://www.reportmill.com/" rel="nofollow" title="Human Interface Guidelines">ReportMill</a>.    It's a PDF document generating framework that works a lot like WebObjects, and includes its own graphical PDF builder tool similar to WebObjects Builder and Interface Builder.  You can bind elements in your generated PDFs to dynamic data in your application just as you would for a <code>WOComponent</code>.</p><br/><br/><p>They have couple of tutorial videos on the <a href="http://reportmill.com/product/" rel="nofollow">ReportMill product page</a> that should give you an idea of how the tool works.  It'll probably be a lot easier than trying to work with FOP programmatically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ENDPOINT A SERVIC AND A PORT WHEN WORK WITH WEBSERVIC
    </pattern>
    <template>
<![CDATA[<p>I'd hop over to <a href="http://www.w3.org/TR/wsdl.html" rel="nofollow" title="excanvas"><a href="http://www.w3.org/TR/wsdl.html" rel="nofollow">http://www.w3.org/TR/wsdl.html</a></a> which I think explains Port, Service and Endpoint reasonably well. A locator is an implementation specific mechanism that some WS stacks use to provide access to service endpoints.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE IP OF MY ROUTER GATEWAY IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Java doesn't make this as pleasant as other languages, unfortunately. Here's what I did:</p><br/><br/><pre><code>import java.io.*;<br/>import java.util.*;<br/><br/>public class ExecTest {<br/>    public static void main(String[] args) throws IOException {<br/>        Process result = Runtime.getRuntime().exec("traceroute -m 1 www.amazon.com");<br/><br/>        BufferedReader output = new BufferedReader(new InputStreamReader(result.getInputStream()));<br/>        String thisLine = output.readLine();<br/>        StringTokenizer st = new StringTokenizer(thisLine);<br/>        st.nextToken();<br/>        String gateway = st.nextToken();<br/>        System.out.printf("The gateway is %s\n", gateway);<br/>    }<br/>}<br/></code></pre><br/><br/><p>This presumes that the gateway is the second token and not the third. If it is, you need to add an extra <code>st.nextToken();</code> to advance the tokenizer one more spot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBFUSC YOUR COMMERCI JAVA CODE
    </pattern>
    <template>
<![CDATA[<p>If you do obfuscate, stay away from obfuscators that modify the code by changing code flow and/or adding exception blocks and such to make it hard to disassemble it. To make the code unreadable it is usually enough to just change all names of methods, fields and classes.</p><br/><br/><p>The reason to stay away from chaining code flow is that some of those changes makes it impossible for the JVM to efficiently optimize the code. In effect it will actually degrade the performance of your application. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR FILE
    </pattern>
    <template>
<![CDATA[<p>XML XML XML XML.  We're talking <em>config files here</em>.  There is no "angle bracket tax" if you're not serializing objects in a performance-intense situation.  </p><br/><br/><p>Config files must be human readable and human understandable, in addition to machine readable.  XML is a good compromise between the two.</p><br/><br/><p>If your shop has people that are afraid of that new-fangled XML technology, I feel bad for you.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF ARRAY IN JAVA
    </pattern>
    <template>
<![CDATA[<p>You could do essentially the same code with Hashtables (or some other Map):</p><br/><br/><pre><code>Hashtable&lt;String, Hashtable&lt;String, String&gt;&gt; schedule<br/>    = new Hashtable&lt;String, Hashtable&lt;String, String&gt;&gt;();<br/>schedule.put("A", new Hashtable&lt;String, String&gt;());<br/>schedule.put("B", new Hashtable&lt;String, String&gt;());<br/>schedule.put("C", new Hashtable&lt;String, String&gt;());<br/>schedule.put("D", new Hashtable&lt;String, String&gt;());<br/>schedule.put("E", new Hashtable&lt;String, String&gt;());<br/><br/>schedule.get("A").put("Winter", "M");<br/>schedule.get("A").put("Spring", "tTS");<br/>// Etc...<br/></code></pre><br/><br/><p>Not as elegant, but then again, Java isn't a dynamic language, and it doesn't have hashes on the language level.</p><br/><br/><p>Note: You might be able to do a better solution, this just popped in my head as I read your question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP NOT RESPONS WHEN TRI TO VIEW TABL ( OR SUGGEST AN ORACL MAC CLIENT )
    </pattern>
    <template>
<![CDATA[<p>I get the same problem after there's been an active connection sitting idle for a while. I solve it by restarting sql developer every once in a while.</p><br/><br/><p>I also have Toad for Oracle running on a vmware XP session, and it works great.  If you don't mind the money, try that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOU HAVE A JAVA APPLIC THAT IS CONSUM CPU WHEN IT IS N T DO ANYTH HOW DO YOU DETERMIN WHAT IT IS DO
    </pattern>
    <template>
<![CDATA[<p>If you are using Java 5 or later, you can connect to your application using <a href="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html" rel="nofollow">jconsole</a> to view all running threads. jstack also will do a stack dump. I think this should still work even inside a container like Tomcat.</p><br/><br/><p>Both of these tools are included with JDK5 and later (I assume the process needs to be at least Java 5, though I could be wrong)</p><br/><br/><p>Update:<br/>It's also worth noting that starting with JDK 1.6 update 7 there is now a bundled profiler called <a href="http://java.sun.com/javase/6/docs/technotes/guides/visualvm/" rel="nofollow">VisualVM</a> which can be launched with 'jvisualvm'. It looks like it is a <a href="https://visualvm.dev.java.net/" rel="nofollow">java.net project</a>, so additional info may be available at that page. I haven't used this yet but it looks useful for more serious analysis.</p><br/><br/><p>Hope that helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REFACTOR HTML MARKUP OUT OF MY PROPERTI FILE
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Avoid creating links within long<br/>  blocks of text. Prefer shorter text<br/>  that can act as a logically complete<br/>  and independent link.</p><br/></blockquote><br/><br/><p>Generally, it will lead to fewer problems. Sometimes you have to compromise your UI design to accommodate localization; sometimes you need to compromise your localization process to accommodate the UI.</p><br/><br/><p>Any time a developer manually manipulates post-translation strings is a source of potentially expensive bugs. Cutting/pasting or string editing can result in character corruption, misplaced strings, etc. A translation defect needs the participation of outside parties to fix which involves cost and takes time.</p><br/><br/><p>Thinking on it, something like this might be less ugly:</p><br/><br/><pre><code>&lt;p&gt;Please update your address and contact information.<br/>&lt;br /&gt;<br/>&lt;a href="/address.do"&gt;update address&lt;/a&gt;<br/>&lt;br /&gt;<br/>&lt;a href="/contact.do"&gt;update contact information&lt;/a&gt;&lt;/p&gt;<br/></code></pre><br/><br/><p>...but I'm no UI designer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERMAN HAVE LINE NUMBER IN INTELLIJ
    </pattern>
    <template>
<![CDATA[<p>This should work:</p><br/><br/><ul><br/><li>Select Tools | IDE Options</li><br/><li>Select Editor</li><br/><li>In the Display group, click Show line numbers</li><br/><li>When you're finished here, click OK</li><br/></ul><br/><br/><p>attributed to: http://www.devdaily.com/blog/post/intellij/displaying-line-numbers/</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A MULTI MODUL PROJECT TO SPLIT INTO SEPAR REPOSITORI TREE
    </pattern>
    <template>
<![CDATA[<p>The Subversion book contains two sections on this:</p><br/><br/><ul><br/><li><a href="http://svnbook.red-bean.com/en/1.4/svn.branchmerge.maint.html#svn.branchmerge.maint.layout" rel="nofollow">Repository Layout</a></li><br/><li><a href="http://svnbook.red-bean.com/en/1.4/svn.reposadmin.planning.html#svn.reposadmin.projects.chooselayout" rel="nofollow">Planning Your Repository Organization</a></li><br/></ul><br/><br/><p>A blog entry on the subject: <a href="http://blogs.open.collab.net/svn/2007/04/subversion_repo.html" rel="nofollow">"Subversion Repository Layout"</a></p><br/><br/><p>The short answer, though: while your mileage will vary (every situation is individual), your <code>/bundle/&lt;project&gt;/(trunk|tags|branches)</code> scheme is rather common and will likely work well for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT IS THE BEST WAY TO SFTP A FILE FROM A SERVER
    </pattern>
    <template>
<![CDATA[<p>Another option is to consider looking at the <a href="http://www.jcraft.com/jsch/" rel="nofollow" title="JSch library">JSch library</a>. JSch seems to be the preferred library for a few large open source projects, including Eclipse, Ant and Apache Commons HttpClient, amongst others.</p><br/><br/><p>It supports both user/pass and certificate-based logins nicely, as well as all a whole host  of other yummy SSH2 features.</p><br/><br/><p>Here's a simple remote file retrieve over SFTP. Error handling is left as an exercise for the reader :-)</p><br/><br/><pre><code>JSch jsch = new JSch();<br/><br/>String knownHostsFilename = "/home/username/.ssh/known_hosts";<br/>jsch.setKnownHosts( knownHostsFilename );<br/><br/>Session session = jsch.getSession( "remote-username", "remote-host" );    <br/>{<br/>  // "interactive" version<br/>  // can selectively update specified known_hosts file <br/>  // need to implement UserInfo interface<br/>  // MyUserInfo is a swing implementation provided in <br/>  //  examples/Sftp.java in the JSch dist<br/>  UserInfo ui = new MyUserInfo();<br/>  session.setUserInfo(ui);<br/><br/>  // OR non-interactive version. Relies in host key being in known-hosts file<br/>  session.setPassword( "remote-password" );<br/>}<br/><br/>session.connect();<br/><br/>Channel channel = session.openChannel( "sftp" );<br/>channel.connect();<br/><br/>ChannelSftp sftpChannel = (ChannelSftp) channel;<br/><br/>sftpChannel.get("remote-file", "local-file" );<br/>// OR<br/>InputStream in = sftpChannel.get( "remote-file" );<br/>  // process inputstream as needed<br/><br/>sftpChannel.exit();<br/>session.disconnect();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOMMEND A JAVA PROFIL
    </pattern>
    <template>
<![CDATA[<p>A list of <a href="http://java-source.net/open-source/profilers" rel="nofollow">Open source JAVA profilers</a> that you may find useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERRID AN EJB 3 SESSION BEAN METHOD WITH A GENER ARGUMENT IF POSSIBL AT ALL
    </pattern>
    <template>
<![CDATA[<p>I tried it with a pojo and it seems to work. I had to modify your code a bit.<br/>I think your interfaces were a bit off, but I'm not sure.</p><br/><br/><p>I assumed "Foo" was a concrete type, but if not I can do some more testing for you.</p><br/><br/><p>I just wrote a main method to test this.<br/>I hope this helps!</p><br/><br/><pre><code>public static void main(String[] args){<br/>    	FooRepository fooRepository = new FooRepositoryImpl();<br/>    	fooRepository.delete(new Foo("Bar"));<br/>}<br/><br/>public class Foo<br/>{<br/>    private String value;<br/><br/>    public Foo(String inValue){<br/>    	super();<br/>    	value = inValue;<br/>    }<br/>    public String toString(){<br/>    	return value;<br/>    }<br/>}<br/><br/>public interface Repository&lt;E&gt;<br/>{<br/>    public void delete(E entity);<br/>}<br/><br/>public interface FooRepository extends Repository&lt;Foo&gt;<br/>{<br/>    //other methods<br/>}<br/><br/>public class AbstractRespository&lt;E&gt; implements Repository&lt;E&gt;<br/>{<br/>    public void delete(E entity){<br/>    	System.out.println("Delete-" + entity.toString());<br/>    }<br/>}<br/><br/>public class FooRepositoryImpl extends AbstractRespository&lt;Foo&gt; implements FooRepository<br/>{<br/>     @Override<br/>       public void delete(Foo entity){<br/>          //do something before deleting the entity<br/>    	 	System.out.println("something before");<br/>          super.delete(entity);<br/>       }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JNI AND JAVA ANT CALL MAKE OR MAKE CALL ANT
    </pattern>
    <template>
<![CDATA[<p>I strongly dislike make because of its implicit ruleset and treatment of whitespace.  Personally I would use cpp tasks (<a href="http://ant-contrib.sourceforge.net/cpptasks/index.html" rel="nofollow">http://ant-contrib.sourceforge.net/cpptasks/index.html</a>) to do my C compilation.   They are not as flexible as make but they are also far less complex and it will mean you don't have to burden your developers with learning make.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE STANDARD BEST PRACTIC LABEL BREAK CONTINU
    </pattern>
    <template>
<![CDATA[<p>If you have to use them use capitals, this draws attention to them and singles them out from being mistakenly interpreted as "Class" names.  Drawing attention to them has the additional benefit of catching someone's eye that will come along and refactor your code and remove them. ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REALLI BUILD A FAST WORD PROCESSOR WITH GOF DESIGN PATTERN
    </pattern>
    <template>
<![CDATA[<p>Flyweight really is just a way of conserving resources in situations where there are thousands of objects with intrinsic shared state, so it could be useful in higher level languages than C/C++. Maybe the GoF's example using glyphs in a document was not the best choice to illustrate this pattern.</p><br/><br/><p>I think there's a lot more to building a high performance word processor than just these basic patterns though - not sure whether there is anything in GoF that rules out being able to successfully do this.</p><br/><br/><p>Generally, Visual Studio (VS) is more advanced and performs significantly better than Eclipse - at least, the versions of VS that I have seen. Eclipse is one of the most impressive Java applications out there though, it runs quite well on more recent machines with lots of RAM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEGIN DESIGN A LARG SYSTEM
    </pattern>
    <template>
<![CDATA[<p>Do you know much about OOP?  If so, look into Spring and Hibernate to keep your implementation clean and <a href="http://codebetter.com/blogs/jeremy.miller/archive/2007/01/08/Orthogonal-Code.aspx" rel="nofollow">orthogonal</a>.  If you get that, you should find TDD a good way to keep your design compact and lean, especially since you have "automated testing" up and running.</p><br/><br/><p>UPDATE:<br/>Looking at the first slew of answers, I couldn't disagree more.  Particularly in the Java space, you should find plenty of mentors/resources on working out your application with Objects, <strong>not a database-centric approach</strong>.  Database design is typically the first step for Microsoft folks (which I do daily, but am in a recovery program, er, Alt.Net).  If you keep the focus on what you need to deliver to a customer and let your ORM figure out how to persist your objects, your design should be better.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRIPE TUTORI EXAMPL
    </pattern>
    <template>
<![CDATA[<p>I've never used (or even heard of) Stripes.</p><br/><br/><p>Regardless, there's a book from <a href="http://www.pragprog.com/" rel="nofollow">The Pragmatic Bookshelf</a> called <a href="http://www.pragprog.com/titles/fdstr/stripes" rel="nofollow">Stripes: ...and Java web development is fun again</a> that may be worth checking out. You could also check out the Stripes <a href="https://sourceforge.net/mail/?group_id=145476" rel="nofollow">mailing list archive</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID AN XML FILE AGAINST AN XSD FILE
    </pattern>
    <template>
<![CDATA[<p>The Java runtime library supports validation. Last time I checked this was the Apache Xerces parser under the covers. You should probably use a <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/xml/validation/Validator.html" rel="nofollow">javax.xml.validation.Validator</a>.</p><br/><br/><pre><code>import javax.xml.XMLConstants;<br/>import javax.xml.transform.Source;<br/>import javax.xml.transform.stream.StreamSource;<br/>import javax.xml.validation.*;<br/>...<br/><br/>URL schemaFile = new URL("http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd");<br/>Source xmlFile = new StreamSource(new File("web.xml"));<br/>SchemaFactory schemaFactory = SchemaFactory<br/>    .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);<br/>Schema schema = schemaFactory.newSchema(schemaFile);<br/>Validator validator = schema.newValidator();<br/>try {<br/>  validator.validate(xmlFile);<br/>  System.out.println(xmlFile.getSystemId() + " is valid");<br/>} catch (SAXException e) {<br/>  System.out.println(xmlFile.getSystemId() + " is NOT valid");<br/>  System.out.println("Reason: " + e.getLocalizedMessage());<br/>}<br/></code></pre><br/><br/><p>The schema factory constant is the string <code>http://www.w3.org/2001/XMLSchema</code> which defines XSDs. The above code validates a WAR deployment descriptor against the URL <code>http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd</code> but you could just as easily validate against a local file.</p><br/><br/><p>You should not use the DOMParser to validate a document (unless your goal is to create a document object model anyway). This will start creating DOM objects as it parses the document - wasteful if you aren't going to use them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AWAY LABEL LOOP
    </pattern>
    <template>
<![CDATA[<p>Looking at the solutions presented so far:</p><br/><br/><ul><br/><li><p>They all look less readable than the original, in that they involve spending more code on the mechanism of the code rather than on the algorithm itself</p></li><br/><li><p>Some of them are broken, or were before they were edited. Most damning is the fact that people are having to think quite hard about how to write the code without labels and not break anything.</p></li><br/><li><p>Some come with a performance penalty of running the same test twice, which may not always be trivial. The alternative to that is storing and passing round booleans, which gets ugly.</p></li><br/><li><p>Refactoring the relevant part of the code into a method is effectively a no-op: it rearranges how the code is laid out in the file, but has no effect on how it's executed.</p></li><br/></ul><br/><br/><p>All of which makes me believe that, at least in the case of this question as phrased, the label is the correct solution and doesn't need to be refactored away. Certainly there are cases where labels are used incorrectly and should be refactored away. I just don't think it should be treated as some unbreakable rule.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC XML TAG IN XMLDOCUMENT
    </pattern>
    <template>
<![CDATA[<p>How about an XPath based approach? I like this approach as the logic is super-easy to understand. The code is pretty much self-documenting.</p><br/><br/><p>If your xml document is available to you as an org.w3c.dom.Document object (as most parsers return), then you could do something like the following:</p><br/><br/><pre><code>// get the list of customdata nodes<br/>NodeList customDataNodeSet = findNodes(document, "//customdata" );<br/><br/>for (int i=0 ; i &lt; customDataNodeSet.getLength() ; i++) {<br/>  Node customDataNode = customDataNodeSet.item( i );<br/><br/>  // get the location nodes (if any) within this one customdata node<br/>  NodeList locationNodeSet = findNodes(customDataNode, "location" );<br/><br/>  if (locationNodeSet.getLength() &gt; 0) {<br/>    // replace<br/>    locationNodeSet.item( 0 ).setTextContent( "http://stackoverflow.com/" );<br/>  }<br/>  else {<br/>    // insert<br/>    Element newLocationNode = document.createElement( "location" );<br/>    newLocationNode.setTextContent("http://stackoverflow.com/" );<br/>    customDataNode.appendChild( newLocationNode );<br/>  }<br/>}<br/></code></pre><br/><br/><p>And here's the helper method findNodes that does the XPath search.</p><br/><br/><pre><code>private NodeList findNodes( Object obj, String xPathString )<br/>  throws XPathExpressionException {<br/><br/>  XPath xPath = XPathFactory.newInstance().newXPath();<br/>  XPathExpression expression = xPath.compile( xPathString );<br/>  return (NodeList) expression.evaluate( obj, XPathConstants.NODESET );<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + TOMCAT DIE DATABAS CONNECT
    </pattern>
    <template>
<![CDATA[<p><a href="http://tomcat.apache.org/tomcat-5.5-doc/jndi-datasource-examples-howto.html" rel="nofollow">Tomcat Documentation</a></p><br/><br/><p>DBCP uses the Jakarta-Commons Database Connection Pool. It relies on number of Jakarta-Commons components:</p><br/><br/><pre><code>* Jakarta-Commons DBCP<br/>* Jakarta-Commons Collections<br/>* Jakarta-Commons Pool<br/></code></pre><br/><br/><p>This attribute may help you out.</p><br/><br/><pre><code>removeAbandonedTimeout="60"<br/></code></pre><br/><br/><p>I'm using the same connection pooling stuff and I'm setting these properties to prevent the same thing it's just not configured through tomcat.<br/>But if the first thing doesn't work try these.</p><br/><br/><pre><code>testWhileIdle=true<br/>timeBetweenEvictionRunsMillis=300000<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET START WITH OSGI
    </pattern>
    <template>
<![CDATA[<p>Well, since you can not have one part OSGi and one part non-OSGi you'll need to make your entire app OSGi. In its simplest form you make a single OSGi bundle out of your entire application. Clearly this is not a best practice but it can be useful to get a feel for deploying a bundle in an OSGi container (Equinox, Felix, Knoplerfish, etc).</p><br/><br/><p>To take it to the next level you'll want to start splitting your app into components, components should typically have a set of responsibilities that can be isolated from the rest of your application through a set of interfaces and class dependencies. Identifying these purely by hand can range from rather straightforward for a well designed highly cohesive but loosely coupled application to a nightmare for interlocked source code that you are not familiar with.</p><br/><br/><p>Some help can come from tools like <a href="http://clarkware.com/software/JDepend.html" rel="nofollow">JDepend</a> which can show you the coupling of Java packages against other packages/classes in your system. A package with low efferent coupling should be easier to extract into an OSGi bundle than one with high efferent coupling. Even more architectural insight can be had with pro tools like <a href="http://www.headwaysoftware.com/products/structure101/index.php" rel="nofollow">Structure 101</a>.</p><br/><br/><p>Purely on a technical level, working daily with an application that consists of 160 OSGi bundles and using Spring DM I can confirm that the transition from "normal" Spring to Spring DM is largely pain free. The extra namespace and the fact that you can (and should) isolate your OSGi specific Spring configuration in separate files makes it even easier to have both with and without OSGi deployment scenarios.</p><br/><br/><p>OSGi is a deep and wide component model, documentation I recommend:</p><br/><br/><ul><br/><li><a href="http://www.osgi.org/Release4/Download" rel="nofollow">OSGi R4 Specification</a>: Get the PDFs of the Core and Compendium specification, they are canonical, authoritative and very readable. Have a shortcut to them handy at all times, you will consult them.</li><br/><li>Read up on OSGi best practices, there is a large set of things you <strong>can</strong> do but a somewhat smaller set of things you <strong>should</strong> do and there are some things you should <strong>never do</strong> (DynamicImport: * for example). </li><br/></ul><br/><br/><p>Some links: </p><br/><br/><ul><br/><li><a href="http://cwiki.apache.org/FELIX/presentations.data/best-practices-apachecon-20060628.pdf" rel="nofollow">OSGi best practices and using Apache Felix</a></li><br/><li><a href="http://developers.sun.com/learning/javaoneonline/2007/pdf/TS-1419.pdf" rel="nofollow">Peter Kriens and BJ Hargrave in a Sun presentation on OSGi best practices</a> </li><br/><li>one key OSGi concept are Services, learn why and how they supplant the Listener pattern with the <a href="http://www.osgi.org/wiki/uploads/Links/whiteboard.pdf" rel="nofollow">Whiteboard pattern</a></li><br/><li><a href="http://groups.google.com/group/spring-osgi" rel="nofollow">The Spring DM Google Group</a> is very responsive and friendly in my experience</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET WEB SERVIC ( WSE 2 3 WS SECUR ) FROM JAVA
    </pattern>
    <template>
<![CDATA[<p>This seems to be a popular question so I'll provide an overview of what we did in our situation.</p><br/><br/><p>It seems that services built in .NET are following an older ws-addressing standard (<a href="http://schemas.xmlsoap.org/ws/2004/03/addressing/" rel="nofollow">http://schemas.xmlsoap.org/ws/2004/03/addressing/</a>) and axis2 only understands the newer standard (<a href="http://schemas.xmlsoap.org/ws/2004/08/addressing/" rel="nofollow">http://schemas.xmlsoap.org/ws/2004/08/addressing/</a>).</p><br/><br/><p>In addition, the policyCache.config file provided is in a form that the axis2 rampart module can't understand.</p><br/><br/><p>So the steps we had to do, in a nutshell:</p><br/><br/><ul><br/><li>Read the policyCache.config and try to understand it.  Then rewrite it into a policy that rampart could understand.  (Some <a href="http://www.scribd.com/doc/466238/Official-Documentation-ws-apache-org-Axis2-Part-2" rel="nofollow">updated docs</a> helped.)</li><br/><li>Configure rampart with this policy.</li><br/><li>Take the keys that were provided in the .pfx file and convert them to a java key store.  There is a utility that comes with Jetty that can do that.</li><br/><li>Configure rampart with that key store.</li><br/><li>Write a custom axis2 handler that backward-converts the newer ws-addressing stuff that comes out of axis2 into the older stuff expected by the service.</li><br/><li>Configure axis2 to use the handler on outgoing messages.</li><br/></ul><br/><br/><p>In the end it was a lot of configuration and code for something that is supposed to be an open standard supported by the vendors.</p><br/><br/><p>Although I'm not sure what the alternative is...can you wait for the vendors (or in this case, the one vendor) to make sure that everything will inter-op?</p><br/><br/><p>As a postscript I'll add that I didn't end up doing the work, it was someone else on my team, but I think I got the salient details correct.  The other option that I was considering (before my teammate took over) was to call the WSS4J API directly to construct the SOAP envelope as the .NET service expected it.  I think that would have worked too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY ARTIFACT FROM A MAVEN BUILD TO THE SOURCEFORG FILE RELEAS SYSTEM
    </pattern>
    <template>
<![CDATA[<p>I'm not able to test this to confirm, but I believe it is possible without writing any plugins.</p><br/><br/><p>You can <a href="http://sourceforge.net/apps/trac/sourceforge/wiki/SCP" rel="nofollow">deploy to SourceForge using SCP</a>, and the maven-deploy-plugin can be configured to <a href="http://maven.apache.org/plugins/maven-deploy-plugin/examples/deploy-ssh-external.html" rel="nofollow">use SCP</a> so it should work. You can also deploy your <a href="http://maven.apache.org/plugins/maven-site-plugin/examples/site-deploy-to-sourceforge.net.html" rel="nofollow">site to SourceForge</a> via SCP.</p><br/><br/><p>You would configure the SourceForge server in your settings.xml to use a "combined" username with a comma separator. With these credentials:</p><br/><br/><pre><code>SourceForge username: foo<br/>SourceForge user password: secret<br/>SourceForge project name: bar<br/>Path: /home/frs/project/P/PR/PROJECT_UNIX_NAME/ <br/>    - Substitute your project UNIX name data for /P/PR/PROJECT_UNIX_NAME<br/></code></pre><br/><br/><p>The server element would look like this:</p><br/><br/><pre><code>&lt;server&gt;<br/>  &lt;id&gt;sourceforge&lt;/id&gt;<br/>  &lt;username&gt;foo,bar&lt;/username&gt;<br/>  &lt;password&gt;secret&lt;/password&gt;<br/>&lt;/server&gt;<br/></code></pre><br/><br/><p>And the distributionManagement section in your POM would look like this:</p><br/><br/><pre><code>&lt;!-- Enabling the use of FTP --&gt;<br/>&lt;distributionManagement&gt;<br/>  &lt;repository&gt;<br/>    &lt;id&gt;ssh-repository&lt;/id&gt;<br/>    &lt;url&gt;<br/>scpexe://frs.sourceforge.net:/home/frs/project/P/PR/PROJECT_UNIX_NAME&lt;/url&gt;<br/>  &lt;/repository&gt;<br/>&lt;/distributionManagement&gt;<br/></code></pre><br/><br/><p>Finally declare that ssh-external is to be used:</p><br/><br/><pre><code>&lt;build&gt;<br/>  &lt;extensions&gt;<br/>    &lt;extension&gt;<br/>      &lt;groupId&gt;org.apache.maven.wagon&lt;/groupId&gt;<br/>       &lt;artifactId&gt;wagon-ssh-external&lt;/artifactId&gt;<br/>       &lt;version&gt;1.0-alpha-5&lt;/version&gt;<br/>    &lt;/extension&gt;<br/>  &lt;/extensions&gt;<br/>&lt;/build&gt;<br/></code></pre><br/><br/><p><hr /></p><br/><br/><p>If this doesn't work, you may be able to use the recommended approach in the site reference above, i.e. create a shell on shell.sourceforge.net with your username and project group:</p><br/><br/><pre><code>ssh -t &lt;username&gt;,&lt;project name&gt;@shell.sf.net create<br/></code></pre><br/><br/><p>Then use shell.sourceforge.net (instead of web.sourceforge.net) in your site URL in the diestributionManagement section:</p><br/><br/><pre><code>&lt;url&gt;scp://shell.sourceforge.net/home/frs/project/P/PR/PROJECT_UNIX_NAME/&lt;/url&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERID THE EQUAL METHOD VS CREAT A NEW METHOD
    </pattern>
    <template>
<![CDATA[<p>Overriding the equals method is necessary if you want to test equivalence in standard library classes (for example, ensuring a java.util.Set contains unique elements or using objects as keys in java.util.Map objects).</p><br/><br/><p>Note, if you override equals, ensure you honour the API contract as described in the documentation. For example, ensure you also override <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/Object.html" rel="nofollow">Object.hashCode</a>:</p><br/><br/><blockquote><br/>  <p>If two objects are equal according to<br/>  the equals(Object)  method, then<br/>  calling the hashCode method on each of<br/>  the two objects must produce the same<br/>  integer result.</p><br/></blockquote><br/><br/><p>EDIT: I didn't post this as a complete answer on the subject, so I'll echo Fredrik Kalseth's statement that overriding equals works best for <a href="http://en.wikipedia.org/wiki/Immutable_object" rel="nofollow">immutable objects</a>. To quote the API for <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Map.html" rel="nofollow">Map</a>:</p><br/><br/><blockquote><br/>  <p>Note: great care must be exercised if<br/>  mutable objects are used as map keys.<br/>  The behavior of a map is not specified<br/>  if the value of an object is changed<br/>  in a manner that affects equals<br/>  comparisons while the object is a key<br/>  in the map.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S JAVAC TASK THROW STACKOVERFLOWEXCEPT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>It will be nice to know; what can<br/>  cause or causes a StackOverflowError<br/>  during compilation of Java code?</p><br/></blockquote><br/><br/><p>It is probable that evaluating the long expression in your java file consumes lots of memory and because this is being done in conjunction with the compilation of other classes, the VM just runs out of stack space. Your generated class is perhaps pushing the legal limits for its contents. See chapter <a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#88659" rel="nofollow">4.10 Limitations of the Java Virtual Machine</a> in <a href="http://java.sun.com/docs/books/jvms/" rel="nofollow">The Java Virtual Machine Specification, Second Edition</a>.</p><br/><br/><p><strong>Fix 1: refactor the class</strong></p><br/><br/><p>Since your class is being generated, this might not be an option. Still, it is worth looking at the options your class generation tool offers to see if it can produce something less troublesome.</p><br/><br/><p><strong>Fix 2: increase the stack size</strong></p><br/><br/><p>I think <a href="http://stackoverflow.com/questions/16935/ants-javac-tasks-throws-stackoverflowexception#16982" rel="nofollow">Kieron</a> has one solution when he mentions the -Xss argument. <a href="http://java.sun.com/javase/6/docs/technotes/tools/windows/javac.html" rel="nofollow">javac</a> takes a number of non-standard arguments that will vary between versions and compiler vendors.</p><br/><br/><p>My compiler:</p><br/><br/><pre><code>$ javac -version<br/>javac 1.6.0_05<br/></code></pre><br/><br/><p>To list all the options for it, I'd use these commands:</p><br/><br/><pre><code>javac -help<br/>javac -X<br/>javac -J-X<br/></code></pre><br/><br/><p>I <em>think</em> the stack limit for javac is 512Kb by default. You can increase the stack size for this compiler to 10Mb with this command:</p><br/><br/><pre><code>javac -J-Xss10M Foo.java<br/></code></pre><br/><br/><p>You might be able to pass this in an Ant file with a <em>compilerarg</em> element nested in your <em>javac</em> task.</p><br/><br/><pre><code>&lt;javac srcdir="gen" destdir="gen-bin" debug="on" fork="true"&gt;<br/>    &lt;compilerarg value="-J-Xss10M" /&gt;<br/>&lt;/javac&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPEN THE DEFAULT MAIL PROGRAM WITH A SUBJECT AND BODI IN A CROSS PLATFORM WAY
    </pattern>
    <template>
<![CDATA[<p>In Java 1.6 you have a stardard way to open the default mailer of the platform:<br/><a href="http://java.sun.com/javase/6/docs/api/java/awt/Desktop.html" rel="nofollow">the Desktop.mail(URI) method</a>.The URI can be used to set all the fields of the mail (sender, recipients, body, subject).<br/>You can check a full example of desktop integration in Java 1.6 on <a href="http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/desktop_api/" rel="nofollow">Using the Desktop API in Java SE 6</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIX AND WINDOW FILE
    </pattern>
    <template>
<![CDATA[<p>This is only a difference in text files, where UNIX uses a single Line Feed (LF) to signify a new line, Windows uses a Carriage Return/Line Feed (CRLF) and Mac uses just a CR.</p><br/><br/><p>Binary files there should be no difference (i.e. a JPEG on a windows machine will be byte for byte the same as the same JPEG on a unix box.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROUND UP THE RESULT OF INTEG DIVIS
    </pattern>
    <template>
<![CDATA[<p>Found an elegant solution:</p><br/><br/><pre><code>int pageCount = (records + recordsPerPage - 1) / recordsPerPage;<br/></code></pre><br/><br/><p>Source: <a href="http://www.cs.nott.ac.uk/~rcb/G51MPC/slides/NumberLogic.pdf" rel="nofollow">Number Conversion, Roland Backhouse, 2001</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STUDI COMPAR JEE VS. .NET
    </pattern>
    <template>
<![CDATA[<p>People have successfully built applications with both technology stacks.  People have also experienced colossal failures with both.  In the end, compatibility with existing platforms and skill sets is probably what matters most when selecting one over the other.  If you intend to deploy on non-Windows servers, for instance, then Java is obviously a better fit.</p><br/><br/><p>EDIT: The best way to get access to those kinds of studies is to get them from someone interested in selling you the technology.  Otherwise, companies like the Gartner Group charge large sums of money for papers like that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEST WAY OF CONVERT LIST INTEG TO LIST STRING
    </pattern>
    <template>
<![CDATA[<p>As far as I know, iterate and instantiate is the only way to do this.  Something like (for others potential help, since I'm sure you know how to do this):</p><br/><br/><pre><code>List&lt;Integer&gt; oldList = ...<br/>/* Specify the size of the list up front to prevent resizing. */<br/>List&lt;String&gt; newList = new ArrayList&lt;String&gt;(oldList.size()) <br/>for (Integer myInt : oldList) { <br/>  newList.add(String.valueOf(myInt)); <br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHORTCUT FOR CREAT A MAP FROM A LIST IN GROOVI
    </pattern>
    <template>
<![CDATA[<p>I've recently came across the need to do exactly that: converting a list into a map. This question was posted before Groovy version 1.7.9 came out, so the method <a href="http://groovy.codehaus.org/groovy-jdk/java/util/Collection.html#collectEntries%28groovy.lang.Closure%29" rel="nofollow"><code>collectEntries</code></a> didn't exist yet. It works exactly as the <code>collectMap</code> method <a href="http://stackoverflow.com/questions/18538/shortcut-for-creating-a-map-from-a-list-in-groovy/19077#19077">that was proposed</a>:</p><br/><br/><pre><code>Map rowToMap(row) {<br/>    row.columns.collectEntries{[it.name, it.val]}<br/>}<br/></code></pre><br/><br/><p>If for some reason you are stuck with an older Groovy version, the <a href="http://groovy.codehaus.org/groovy-jdk/java/util/Collection.html#inject%28java.lang.Object,%20groovy.lang.Closure%29" rel="nofollow"><code>inject</code></a> method can also be used (as proposed <a href="http://stackoverflow.com/questions/18538/shortcut-for-creating-a-map-from-a-list-in-groovy/198614#198614">here</a>). This is a slightly modified version that takes only one expression inside the closure (just for the sake of character saving!):</p><br/><br/><pre><code>Map rowToMap(row) {<br/>    row.columns.inject([:]) {map, col -&gt; map &lt;&lt; [(col.name): col.val]}<br/>}<br/></code></pre><br/><br/><p>The <code>+</code> operator can also be used instead of the <code>&lt;&lt;</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE LARG AMOUNT OF DATA WITH J2ME
    </pattern>
    <template>
<![CDATA[<p>For anything past a few kilobytes you need to use either JSR 75 or a remote server. RMS records are extremely limited in size and speed, even in some higher end handsets. If you need to juggle 1MB of data in J2ME the only reliable, portable way is to store it on the network. The HttpConnection class and the GET and POST methods are always supported.</p><br/><br/><p>On the handsets that support JSR 75 FileConnection it may be valid alternative but without code signing it is an user experience nightmare. Almost every single API call will invoke a security prompt with no blanket permission choice. Companies that deploy apps with JSR 75 usually need half a dozen binaries for every port just to cover a small part of the possible certificates. And this is just for the manufacturer certificates; some handsets only have carrier-locked certificates.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACK I18N FOR JAVA WEB APP
    </pattern>
    <template>
<![CDATA[<p>Are you just asking how to store UTF-8/16 characters in a DB? in mysql it's just a matter of making sure you build with UTF8 support and setting that as the default, or specifying it at the column or table level. I've done this in oracle and mysql before. Create a table and cut and paste some i18n data into it and see what happens... you might be set already..</p><br/><br/><p>or am I completely missing your point? </p><br/><br/><p>edit: </p><br/><br/><p>to be more explicit... I usually implement a three column table... language, key, value... where "value" contains potentially foreign language words or phrases... "language" contains some language key and "key" is an english key (i.e. login.error.password.dup)... language and key are indexed...  </p><br/><br/><p>I've then built interfaces on a structure like this that shows each key with all its translations (values)... it can get fancy and include audit trails and "dirty" markers and all the other stuff you need to enable translators and data entry folk to make use of it..</p><br/><br/><p>Edit 2:</p><br/><br/><p>Now that you added the info about the JSTL tags, I understand a bit more... I've never done that myself.. but I found this old info on <a href="http://www.theserverside.com/discussions/thread.tss?thread_id=27390" rel="nofollow">theserverside</a>...</p><br/><br/><pre><code>HttpSession session = .. [get hold of the session] <br/>ResourceBundle bundle = new PropertyResourceBundle(toInputStream(myOwnProperties)) [toInputStream just stores the properties into an inputstream] <br/>Locale locale = .. [get hold of the locale]<br/>javax.servlet.jsp.jstl.core.Config.set(session, Config.FMT_LOCALIZATION_CONTEXT, new LocalizationContext(bundle ,locale));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GO FROM JAVA C # TO C + +
    </pattern>
    <template>
<![CDATA[<p>Yeah, I got bit by the same bug.  The university tended to lean on Java, and then allowed you to choose the language you wanted to work with during projects.</p><br/><br/><p>The best way is to just jump in. Start small, take baby steps, and just Google things that confuse you when you get there. Also find projects that have released their source code. See how they structure their programs. Basically, just tinker with concepts.  There is plenty of information around the web.</p><br/><br/><p>Make it fun and grab a <a href="http://rads.stackoverflow.com/amzn/click/1598633600" rel="nofollow">C++ game development book</a> so it doesn't become mind numbing too quickly. </p><br/><br/><p>Here's some places that I found useful while learning</p><br/><br/><p><a href="http://www.cprogramming.com/" rel="nofollow"><a href="http://www.cprogramming.com/" rel="nofollow">http://www.cprogramming.com/</a></a></p><br/><br/><p><a href="http://www.wikipedia.com" rel="nofollow"><a href="http://www.wikipedia.com" rel="nofollow">http://www.wikipedia.com</a></a></p><br/><br/><p><a href="http://www.cplusplus.com/" rel="nofollow"><a href="http://www.cplusplus.com/" rel="nofollow">http://www.cplusplus.com/</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST WITH CHECKBOX IN JAVA SWING
    </pattern>
    <template>
<![CDATA[<p>Create a custom <code>ListCellRenderer</code> and asign it to the <code>JList</code>.</p><br/><br/><p>This custom <code>ListCellRenderer</code> must return a <code>JCheckbox</code> in the implementantion of <code>getListCellRendererComponent(...)</code> method.</p><br/><br/><p>But this <code>JCheckbox</code> will not be editable, is a simple paint in the screen is up to you to choose when this <code>JCheckbox</code> must be 'ticked' or not, </p><br/><br/><p>For example, show it ticked when the row is selected (parameter <code>isSelected</code>), but this way the check status will no be mantained if the selection changes. Its better to show it checked consulting the data below the <code>ListModel</code>, but then is up to you to implement the method who changes the check status of the data, and notify the change to the <code>JList</code> to be repainted.</p><br/><br/><p>I Will post sample code later if you need it</p><br/><br/><p><a href="http://java.sun.com/javase/6/docs/api/javax/swing/ListCellRenderer.html" rel="nofollow">ListCellRenderer</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BLOCKS JAVA CLOSUR IN C
    </pattern>
    <template>
<![CDATA[<p>The concept of closures requires the concept of contexts. C's context is based on the stack and the registers of the CPU, so to create a block/closure, you need to be able to manipulate the stack pointer in a correct (and reentrant) way, and store/restore registers as needed.</p><br/><br/><p>The way this is done by interpreters or virtual machines is to have a <code>context</code> structure or something similar, and not use the stack and registers directly. This structure keeps track of a stack and optionally some registers, if you're designing a register based VM. At least, that's the simplest way to do it (though slightly less performant than actually mapping things correctly).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMB BINARI DATA IN XML
    </pattern>
    <template>
<![CDATA[<p>You could encode the binary data using base64 and put it into a Base64 element; the below article is a pretty good one on the subject.</p><br/><br/><p><a href="http://www.xml.com/pub/a/98/07/binary/binary.html" rel="nofollow">Handling Binary Data in XML Documents</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO PERFORM RFC CALCUL IN JAVA
    </pattern>
    <template>
<![CDATA[<p>You could use the <a href="http://jakarta.apache.org/bcel/index.html" rel="nofollow">Byte Code Engineering Library</a> with binaries. You can use a <a href="http://jakarta.apache.org/bcel/apidocs/org/apache/bcel/classfile/DescendingVisitor.html" rel="nofollow">DescendingVisitor</a> to visit a class' members and references. I've used it to <a href="http://illegalargumentexception.blogspot.com/2008/04/java-finding-binary-class-dependencies.html" rel="nofollow">find class dependencies</a>.</p><br/><br/><p>Alternatively, you could reuse some model of the source files. I'm pretty sure the Java editor in the <a href="http://www.eclipse.org/jdt/" rel="nofollow">Eclipse JDT</a> is backed by some form of model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POSITORI LAYOUT FOR LARG MAVEN PROJECT
    </pattern>
    <template>
<![CDATA[<p>We have a largish application (160+ OSGi bundles where each bundle is a Maven module) and the lesson we learned, and continue to learn, is that flat is better. The problem with encoding semantics in your hierarchy is that you lose flexibility. A module that is 100% say "communication" today may be partly "service" tomorrow and then you'll need to be moving things around in your repository and that will break all sorts of scripts, documentation, references, etc.</p><br/><br/><p>So I would recommend a flat structure and to encode the semantics in another place (say for example an IDE workspace or documentation).</p><br/><br/><p>I've answered a question about version control layout in some detail <a href="http://stackoverflow.com/questions/16829/structure-of-projects-in-version-control#16915" rel="nofollow">with examples at another question</a>, it may be relevant to your situation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR JAVA DEVELOP
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.25hoursaday.com/CsharpVsJava.html" rel="nofollow">http://www.25hoursaday.com/CsharpVsJava.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT DARKSTAR REALIST
    </pattern>
    <template>
<![CDATA[<p><strong>Edit: This was written before Oracle bought Sun and started a rampage to kill everything that does not make them a billion $ per day. See the comments for an OSS Fork.</strong> <em>I still stand by my opinion that stuff like that (MMO Middleware) is realistic, you just need a company that doesn't suck behind it.</em></p><br/><br/><p>The Market may be dominated by few large games, but that does not mean that there is not a lot of room for more niche games. Lets face it: If you want to reach 100.000+ players, you're ending up building your own technology stack, at least for the critical core. That's what CCP did for EVE Online (<a href="http://myeve.eve-online.com/devblog.asp?a=blog&amp;bid=584" rel="nofollow">StacklessIO</a>), that's what Blizzard did for World of Warcraft (although they do use many third-party libraries), that's what Mythic did for Warhammer Online (although they are based on Gamebryo).</p><br/><br/><p>However, if you aim to be a small, niche MMO (like the dozens of Free-to-Play/Itemshop MMOs), then getting the Network stuff right is just insanely hard, data consistency is even harder and scalability is the biggest b*tch.</p><br/><br/><p>But game technology is not your only problem - you also need to tackle Billing. Credit Card only? Have fun selling in Germany then, people there want ELV. That's where you need a reliable billing provider, but you still need to wire in the billing application with your accounts to make sure that accounts are blocked/reactivated when the billing fails.</p><br/><br/><p>There are some companies already offering "MMO Infratructure Services" (i.e. <a href="http://www.e-eis.com/cms/front_content.php?changelang=2" rel="nofollow">Arvato's EEIS</a>), but the bottom line is: Stuff like Project Darkstar IS realistic, but assuming that you can build a Multi-Billion-MMO entirely on a Third Party Stack is optimistic, possibly idealistic.</p><br/><br/><p>But then again, entirely inventing all of the technology is even more stupid - use the Third Party stuff that you need (i.e. Billing, Font Rendering, Audio Output...), but <a href="http://www.codinghorror.com/blog/archives/001172.html" rel="nofollow">write the stuff that really makes or breaks your business</a> (i.e. Network stack, User interface etc.) on your own. (Note: Jeff's posting may be <a href="http://damilare.net/random-talks/dare-obasanjo-vs-jeff-atwood-on-html-validation/" rel="nofollow">a bit flawed</a>, but the overall direction is correct IMHO.)</p><br/><br/><p>Addendum: Also, the game industry does license and reuse engines a lot. The most prominent game Engines are the <a href="http://en.wikipedia.org/wiki/Unreal_Engine" rel="nofollow">Unreal Engine</a>, <a href="http://en.wikipedia.org/wiki/Source_Engine" rel="nofollow">Source Engine</a> and <a href="http://en.wikipedia.org/wiki/Id_tech" rel="nofollow">id Tech</a>, which fuel dozens, if not hundreds of games. But there are some lesser-known (outside of the industry) engines. There is <a href="http://en.wikipedia.org/wiki/Gamebryo" rel="nofollow">Gamebryo</a>, the Middleware behind games like Civilization 4 and Fallout 3, there was <a href="http://en.wikipedia.org/wiki/RenderWare" rel="nofollow">RenderWare</a> that is now only EA-in-House, but used in games like Battlefield 2 or The Sims 3. There is the open source <a href="http://www.ogre3d.org/" rel="nofollow">Ogre3d</a>, which was used in <a href="http://www.dtp-entertainment.com/en/games/game_detail.php?id=2973&amp;landid=1" rel="nofollow">some</a> commercial <a href="http://www.venetica-game.com/" rel="nofollow">titles</a>. If you're just looking for Sound, there's stuff like <a href="http://www.fmod.org/" rel="nofollow">FMOD</a> or if you want to do font-rendering, why not give <a href="http://www.freetype.org/" rel="nofollow">FreeType</a> a spin?</p><br/><br/><p>What I'm saying is: Third-Party Engines/Middleware do exist, and they ARE being successfully used since more than a decade (I know for sure that id's Wolfenstein Engine was licensed to other companies, and that was 1992), even by big companies in multi-million-dollar titles. The important thing is the support, because a good engine with no help in case of an issue is pretty much worthless or at least very expensive if the developer has to spend their game-development-time with unneccessary debugging of the Engine.</p><br/><br/><p>If the Darkstar folks manage to get the support side right and 2 or 3 higher profile titles out, I do believe it could succeed in opening the MMO market to a lot more smaller developers and indies.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUAL MACHIN OPTIM
    </pattern>
    <template>
<![CDATA[<p>I'm just gonna add two links which explain <a href="http://www.ibm.com/developerworks/ibm/library/it-haggar%5Fbytecode/" rel="nofollow">Java's bytecode</a> pretty well and some of the <a href="http://www.ibm.com/developerworks/java/library/j-benchmark1.html" rel="nofollow">various optimization</a> of the JVM during runtime.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3DE ENCRYPTION DECRYPT IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Your code was fine except for the Base 64 encoding bit (which you mentioned was a test), the reason the output may not have made sense is that you were displaying a raw byte array (doing toString() on a byte array returns its internal Java reference, not the String representation of the <strong>contents</strong>). Here's a version that's just a teeny bit cleaned up and which prints "kyle boon" as the decoded string:</p><br/><br/><pre><code>import java.security.MessageDigest;<br/>import java.util.Arrays;<br/><br/>import javax.crypto.Cipher;<br/>import javax.crypto.SecretKey;<br/>import javax.crypto.spec.IvParameterSpec;<br/>import javax.crypto.spec.SecretKeySpec;<br/><br/>public class TripleDESTest {<br/><br/>    public static void main(String[] args) throws Exception {<br/><br/>    	String text = "kyle boon";<br/><br/>    	byte[] codedtext = new TripleDESTest().encrypt(text);<br/>    	String decodedtext = new TripleDESTest().decrypt(codedtext);<br/><br/>    	System.out.println(codedtext); // this is a byte array, you'll just see a reference to an array<br/>    	System.out.println(decodedtext); // This correctly shows "kyle boon"<br/>    }<br/><br/>    public byte[] encrypt(String message) throws Exception {<br/>    	final MessageDigest md = MessageDigest.getInstance("md5");<br/>    	final byte[] digestOfPassword = md.digest("HG58YZ3CR9"<br/>    			.getBytes("utf-8"));<br/>    	final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);<br/>    	for (int j = 0, k = 16; j &lt; 8;) {<br/>    		keyBytes[k++] = keyBytes[j++];<br/>    	}<br/><br/>    	final SecretKey key = new SecretKeySpec(keyBytes, "DESede");<br/>    	final IvParameterSpec iv = new IvParameterSpec(new byte[8]);<br/>    	final Cipher cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");<br/>    	cipher.init(Cipher.ENCRYPT_MODE, key, iv);<br/><br/>    	final byte[] plainTextBytes = message.getBytes("utf-8");<br/>    	final byte[] cipherText = cipher.doFinal(plainTextBytes);<br/>    	// final String encodedCipherText = new sun.misc.BASE64Encoder()<br/>    	// .encode(cipherText);<br/><br/>    	return cipherText;<br/>    }<br/><br/>    public String decrypt(byte[] message) throws Exception {<br/>    	final MessageDigest md = MessageDigest.getInstance("md5");<br/>    	final byte[] digestOfPassword = md.digest("HG58YZ3CR9"<br/>    			.getBytes("utf-8"));<br/>    	final byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);<br/>    	for (int j = 0, k = 16; j &lt; 8;) {<br/>    		keyBytes[k++] = keyBytes[j++];<br/>    	}<br/><br/>    	final SecretKey key = new SecretKeySpec(keyBytes, "DESede");<br/>    	final IvParameterSpec iv = new IvParameterSpec(new byte[8]);<br/>    	final Cipher decipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");<br/>    	decipher.init(Cipher.DECRYPT_MODE, key, iv);<br/><br/>    	// final byte[] encData = new<br/>    	// sun.misc.BASE64Decoder().decodeBuffer(message);<br/>    	final byte[] plainText = decipher.doFinal(message);<br/><br/>    	return new String(plainText, "UTF-8");<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVERT BINARI DATA TO STRING AND BACK IN JAVA
    </pattern>
    <template>
<![CDATA[<p>If you encode it in base64, this will turn any data into ascii safe text, but base64 encoded data is larger than the orignal data</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JPANEL REDRAW ISSU
    </pattern>
    <template>
<![CDATA[<p>Can you give us some more information on how you add the combo boxes to the JPanel?  This is a pretty common thing to do in Swing so I doubt that it's a JVM issue but I guess anything is possible.</p><br/><br/><p>Specifically, I would double check to make sure you're not accessing the GUI from any background threads.  In this case, maybe you're reading the choices from a DB or something and updating the JComboBox from a background thread, which is a big no-no in Swing.  See SwingUtils.invokeLater().</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DB4O EXPERI
    </pattern>
    <template>
<![CDATA[<p>We run DB40 .NET version in a large client/server project.</p><br/><br/><p>Our experiences is that you can potentially get much better performance than typical relational databases.</p><br/><br/><p>However, you really have to tweak your objects to get this kind of performance. For example, if you've got a list containing a lot of objects, DB4O activation of these lists is slow. There are a number of ways to get around this problem, for example, by inverting the relationship.</p><br/><br/><p>Another pain is activation. When you retrieve or delete an object from DB4O, by default it will activate the whole object tree. For example, loading a Foo will load Foo.Bar.Baz.Bat, etc until there's nothing left to load. While this is nice from a programming standpoint, performance will slow down the more nesting in your objects. To improve performance, you can tell DB4O how many levels deep to activate. This is time-consuming to do if you've got a lot of objects.</p><br/><br/><p>Another area of pain was text searching. DB4O's text searching is far, far slower than SQL full text indexing. (They'll tell you this outright on their site.) The good news is, it's easy to setup a text searching engine on top of DB4O. On our project, we've hooked up Lucene.NET to index the text fields we want.</p><br/><br/><p>Some APIs don't seem to work, such as the GetField APIs useful in applying database upgrades. (For example, you've renamed a property and you want to upgrade your existing objects in the database, you need to use these "reflection" APIs to find objects in the database. Other APIs, such as the [Index] attribute don't work in the stable 6.4 version, and you must instead specify indexes using the Configure().Index("someField"), which is not strongly typed.</p><br/><br/><p>We've witnessed performance degrade the larger your database. We have a 1GB database right now and things are still fast, but not nearly as fast as when we started with a tiny database.</p><br/><br/><p>We've found another issue where Db4O.GetByID will close the database if the ID doesn't exist anymore in the database.</p><br/><br/><p>We've found the Native Query syntax (the most natural, language-integrated syntax for queries) is far, far slower than the less-friendly SODA queries. So instead of typing:</p><br/><br/><pre><code>// C# syntax for "Find all MyFoos with Bar == 23".<br/>// (Note the Java syntax is more verbose using the Predicate class.)<br/>IList&lt;MyFoo&gt; results = db4o.Query&lt;MyFoo&gt;(input =&gt; input.Bar == 23);<br/></code></pre><br/><br/><p>Instead of that nice query code, you have to an ugly SODA query which is string-based and not strongly-typed.</p><br/><br/><p>For .NET folks, they've recently introduced a LINQ-to-DB4O provider, which provides for the best syntax yet. However, it's yet to be seen whether performance will be up-to-par with the ugly SODA queries.</p><br/><br/><p>DB4O support has been decent: we've talked to them on the phone a number of times and have received helpful info. Their user forums are next to worthless, however, almost all questions go unanswered. Their JIRA bug tracker receives a lot of attention, so if you've got a nagging bug, file it on JIRA on it often will get fixed. (We've had 2 bugs that have been fixed, and another one that got patched in a half-assed way.)</p><br/><br/><p>If all this hasn't scared you off, let me say that we're very happy with DB4O, despite the problems we've encountered. The performance we've got has blown away some O/RM frameworks we tried. I recommend it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PPLIC NAME FROM WINDOW XP CUT AND PAST
    </pattern>
    <template>
<![CDATA[<p>That depends on the clipboard format. If it is plain-text, then no. Unless you want to install global hooks on the clipboard.</p><br/><br/><p>Which you cannot do from Java.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE EXCEPT FOR SPECIF ISSU OR GENER EXCEPT
    </pattern>
    <template>
<![CDATA[<p>I usually start with a general exception and subclass it as needed. I always can catch the general exception (and with it all subclassed exceptions) if needed, but also the specific.</p><br/><br/><p>An example from the Java-API is IOException, that has subclasses like FileNotFoundException or EOFException (and much more).</p><br/><br/><p>This way you get the advantages of both, you don't have throw-clauses like:</p><br/><br/><pre><code>throws SpecificException1, SpecificException2, SpecificException3 ...<br/></code></pre><br/><br/><p>a general</p><br/><br/><pre><code>throws GeneralException<br/></code></pre><br/><br/><p>is enough. But if you want to have a special reaction to special circumstances you can always catch the specific exception.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN SWING APPLIC WITH IDEA 8M1
    </pattern>
    <template>
<![CDATA[<p>I have actually experienced problems from using the JDK 6u10 beta myself and had to downgrade to JDK 6u7 for the time being. This solved some of my problems with among other things swing.</p><br/><br/><p>Also, i have been running IJ8M1 since the 'release' and I am very satisfied with it, especially if you regard the "beta" tag. It feels snappier and also supports multiple cores which makes my development machine rejoice. ;p</p><br/><br/><p>Anyway, i use WinXP32 and IJ8M1 with JDK 6u7 and that is afaik very stable indeed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECLAR STATIC METHOD IN AN INTERFAC
    </pattern>
    <template>
<![CDATA[<p>There are a few issues at play here.  The first is the issue of declaring a static method without defining it.  This is the difference between</p><br/><br/><pre><code>public interface Foo {<br/>  public static int bar();<br/>}<br/></code></pre><br/><br/><p>and</p><br/><br/><pre><code>public interface Foo {<br/>  public static int bar() {<br/>    ...<br/>  }<br/>}<br/></code></pre><br/><br/><p>Java doesn't allow either, but it <em>could</em> allow the second.  The first is impossible for the reasons that <a href="http://stackoverflow.com/questions/21817/why-cant-i-declare-static-methods-in-an-interface#21826">Espo</a> mentions: you don't know which implementing class is the correct definition.</p><br/><br/><p>Java <em>could</em> allow the latter, as long as it treated <code>Interface</code>s as first-class <code>Object</code>s.  Ruby's <code>Module</code>s, which are approximately equivalent to Java's <code>Interface</code>s, allow exactly that:</p><br/><br/><pre><code>module Foo<br/>  def self.bar<br/>    ...<br/>  end<br/>end<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA AND PYTHON GARBAG COLLECT METHOD ARE DIFFER
    </pattern>
    <template>
<![CDATA[<p>There are drawbacks of using reference counting. One of the most mentioned is circular references: Suppose A references B, B references C and C references B. If A were to drop its reference to B, both B and C will still have a reference count of 1 and won't be deleted with traditional reference counting. CPython (reference counting is not part of python itself, but part of the C implementation thereof) catches circular references with a separate garbage collection routine that it runs periodically...</p><br/><br/><p>Another drawback: Reference counting can make execution slower. Each time an object is referenced and dereferenced, the interpreter/VM must check to see if the count has gone down to 0 (and then deallocate if it did). Garbage Collection does not need to do this.</p><br/><br/><p>Also, Garbage Collection can be done in a separate thread (though it can be a bit tricky). On machines with lots of RAM and for processes that use memory only slowly, you might not want to be doing GC at all! Reference counting would be a bit of a drawback there in terms of performance...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGEX TO GENER STRING RATHER THAN MATCH THEM
    </pattern>
    <template>
<![CDATA[<p><strong>Edit:</strong> </p><br/><br/><p>As mentioned in the comments, there is a library available at Google Code to acheive this:<br/><a href="http://code.google.com/p/xeger" rel="nofollow">http://code.google.com/p/xeger</a></p><br/><br/><p><strong>Original message:</strong></p><br/><br/><p>Firstly, with a complex enough regexp, i beleive this can be impossible. But you should be able to put something together for simple regexps.</p><br/><br/><p>If you take a look at the source code of the class java.util.regex.Pattern, you'll see that it uses an internal representation of Node instances. Each of the different pattern components have their own implementation of a Node subclass. These Nodes are organised into a tree.</p><br/><br/><p>By producing a visitor that traverses this tree, you should be able to call an overloaded generator method or some kind of Builder that cobbles something together.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG BETWEEN CMYK AND RGB IN COLDFUS ( JAVA )
    </pattern>
    <template>
<![CDATA[<p>I use the Java ImageIO libraries (https://jai-imageio.dev.java.net).  They aren't perfect, but can be simple and get the job done.  As far as converting from CMYK to RGB, here is the best I have been able to come up with.</p><br/><br/><p>Download and install the ImageIO JARs and native libraries for your platform.  The native libraries are essential.  Without them the ImageIO JAR files will not be able to detect the CMYK images.  Originally, I was under the impression that the native libraries would improve performance but was not required for any functionality. I was wrong.</p><br/><br/><p>The only other thing that I noticed is that the converted RGB images are sometimes much lighter than the CMYK images. If anyone knows how to solve that problem, I would be appreciative.</p><br/><br/><p>Below is some code to convert a CMYK image into an RGB image of any supported format.</p><br/><br/><p>Thank you,<br><br/>Randy Stegbauer</p><br/><br/><pre><code>package cmyk;<br/><br/>import java.awt.color.ColorSpace;<br/>import java.awt.image.BufferedImage;<br/>import java.awt.image.ColorConvertOp;<br/>import java.io.File;<br/>import java.io.IOException;<br/><br/>import javax.imageio.ImageIO;<br/><br/>import org.apache.commons.lang.StringUtils;<br/><br/>public class Main<br/>{<br/><br/>    /**<br/>     * Creates new RGB images from all the CMYK images passed<br/>     * in on the command line.<br/>     * The new filename generated is, for example "GIF_original_filename.gif".<br/>     *<br/>     */<br/>    public static void main(String[] args)<br/>    {<br/>        for (int ii = 0; ii &lt; args.length; ii++)<br/>        {<br/>            String filename = args[ii];<br/>            boolean cmyk = isCMYK(filename);<br/>            System.out.println(cmyk + ": " + filename);<br/>            if (cmyk)<br/>            {<br/>                try<br/>                {<br/>                    String rgbFile = cmyk2rgb(filename);<br/>                    System.out.println(isCMYK(rgbFile) + ": " + rgbFile);<br/>                }<br/>                catch (IOException e)<br/>                {<br/>                    System.out.println(e.getMessage());<br/>                }<br/>            }<br/>        }<br/>    }<br/><br/>    /**<br/>     * If 'filename' is a CMYK file, then convert the image into RGB,<br/>     * store it into a JPEG file, and return the new filename.<br/>     *<br/>     * @param filename<br/>     */<br/>    private static String cmyk2rgb(String filename) throws IOException<br/>    {<br/>        // Change this format into any ImageIO supported format.<br/>        String format = "gif";<br/>        File imageFile = new File(filename);<br/>        String rgbFilename = filename;<br/>        BufferedImage image = ImageIO.read(imageFile);<br/>        if (image != null)<br/>        {<br/>            int colorSpaceType = image.getColorModel().getColorSpace().getType();<br/>            if (colorSpaceType == ColorSpace.TYPE_CMYK)<br/>            {<br/>                BufferedImage rgbImage =<br/>                    new BufferedImage(<br/>                        image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);<br/>                ColorConvertOp op = new ColorConvertOp(null);<br/>                op.filter(image, rgbImage);<br/><br/>                rgbFilename = changeExtension(imageFile.getName(), format);<br/>                rgbFilename = new File(imageFile.getParent(), format + "_" + rgbFilename).getPath();<br/>                ImageIO.write(rgbImage, format, new File(rgbFilename));<br/>            }<br/>        }<br/>        return rgbFilename;<br/>    }<br/><br/>    /**<br/>     * Change the extension of 'filename' to 'newExtension'.<br/>     *<br/>     * @param filename<br/>     * @param newExtension<br/>     * @return filename with new extension<br/>     */<br/>    private static String changeExtension(String filename, String newExtension)<br/>    {<br/>        String result = filename;<br/>        if (filename != null &amp;&amp; newExtension != null &amp;&amp; newExtension.length() != 0);<br/>        {<br/>            int dot = filename.lastIndexOf('.');<br/>            if (dot != -1)<br/>            {<br/>                result = filename.substring(0, dot) + '.' + newExtension;<br/>            }<br/>        }<br/>        return result;<br/>    }<br/><br/>    private static boolean isCMYK(String filename)<br/>    {<br/>        boolean result = false;<br/>        BufferedImage img = null;<br/>        try<br/>        {<br/>            img = ImageIO.read(new File(filename));<br/>        }<br/>        catch (IOException e)<br/>        {<br/>            System.out.println(e.getMessage() + ": " + filename);<br/>        }<br/>        if (img != null)<br/>        {<br/>            int colorSpaceType = img.getColorModel().getColorSpace().getType();<br/>            result = colorSpaceType == ColorSpace.TYPE_CMYK;<br/>        }<br/><br/>        return result;<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOCK FRAMEWORK FOR JAVA
    </pattern>
    <template>
<![CDATA[<p>I've had good success using <a href="http://code.google.com/p/mockito/" rel="nofollow">Mockito</a>.</p><br/><br/><p>When I tried learning about JMock and EasyMock, I found the learning curve to be a bit steep (though maybe that's just me).</p><br/><br/><p>I like Mockito because of its simple and clean syntax that I was able to grasp pretty quickly. The minimal syntax is designed to support the common cases very well, although the few times I needed to do something more complicated I found what I wanted was supported and easy to grasp.</p><br/><br/><p>Here's an (abridged) example from the Mockito homepage:</p><br/><br/><pre><code>import static org.mockito.Mockito.*;<br/><br/>List mockedList = mock(List.class);<br/>mockedList.clear();<br/>verify(mockedList).clear();<br/></code></pre><br/><br/><p>It doesn't get much simpler than that.</p><br/><br/><p>The only major downside I can think of is that it won't mock static methods.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A JAVA SOCKET TO FAIL FAST ON DISCONNECT
    </pattern>
    <template>
<![CDATA[<p>Set a short timeout?</p><br/><br/><p>Does <code>isOutputShutdown()</code> not get you what you want?</p><br/><br/><p>You could always build a <code>SocketWatcher</code> class that spins up in its own <code>Thread</code> and repeatedly tries to write empty strings to the <code>Socket</code> until that raises a <code>SocketClosedException</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND DROP AN EMAIL FROM MS OUTLOOK TO ECLIPS RCP
    </pattern>
    <template>
<![CDATA[<p>Maybe this is a solution for your problem: <br/><a href="http://sourceforge.net/projects/javaoutlookdd/" rel="nofollow">http://sourceforge.net/projects/javaoutlookdd/</a><br/>It allows to handle outlook items like File objects during drag&amp;drop.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR PRETTI CHART IN SWT
    </pattern>
    <template>
<![CDATA[<p>I have not used BIRT or JGraph, however I use JFreeChart in my SWT application. I have found the best way to use JFreeChart in SWT is by making a composite an AWT frame and using the AWT functionality for JFreeChart. The way to do this is by creating a composite </p><br/><br/><pre><code>Composite comp = new Composite(parent, SWT.NONE | SWT.EMBEDDED);<br/>Frame frame = SWT_AWT.new_Frame(comp);<br/>JFreeChart chart = createChart();<br/>ChartPanel chartPanel = new ChartPanel(chart);<br/>frame.add(chartPanel);<br/></code></pre><br/><br/><p>There are several problems in regards to implementations across different platforms as well as the SWT code in it is very poor (in its defense Mr. Gilbert does not know SWT well and it is made for AWT). My two biggest problems are as AWT events bubble up through SWT there are some erroneous events fired and due to wrapping the AWT frame JFreeChart becomes substantially slower.</p><br/><br/><p>@zvikico</p><br/><br/><p>The idea of putting the chart into a web page is probably not a great way to go. There are a few problems first being how Eclipse handles integrating the web browser on different platforms is inconsistent. Also from my understanding of a few graphing packages for the web they are server side requiring that setup, also many companies including mine use proxy servers and sometimes this creates issues with the Eclipse web browsing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD TO PARS VARIOU CUSTOM XML DOCUMENT IN JAVA
    </pattern>
    <template>
<![CDATA[<p>I would use <a href="http://jcp.org/en/jsr/detail?id=173" rel="nofollow">Stax</a> to parse XML, it's fast and easy to use. I've been using it on my last project to parse XML files up to 24MB. There's a nice introduction on <a href="http://today.java.net/pub/a/today/2006/07/20/introduction-to-stax.html" rel="nofollow">java.net</a>, which tells you everything you need to know to get started.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALTERN TO GIGASPAC
    </pattern>
    <template>
<![CDATA[<p>Gigaspaces is top notch as far as a Javaspaces implementation goes for scalability and performance. Are you restricted to a Javaspaces implementation? Blitz Javaspaces is top notch for a free product.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OLOR IMAG IN JAVA
    </pattern>
    <template>
<![CDATA[<p>I have never used GIMP's colorize command. However, if your getting the RGB value of each pixel and adding RGB value to it you should really use a <strong><a href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/image/LookupOp.html" rel="nofollow">LookupOp</a>.</strong> Here is some code that I wrote to apply a BufferedImageOp to a BufferedImage.</p><br/><br/><p>Using Nicks example from above heres how I would do it.</p><br/><br/><blockquote><br/>  <p>Let Y = 0.3*R + 0.59*G + 0.11*B for<br/>  each pixel</p><br/>  <br/>  <p>(R1,G1,B1) is what you are colorizing<br/>  with</p><br/></blockquote><br/><br/><pre><code>protected LookupOp createColorizeOp(short R1, short G1, short B1) {<br/>    short[] alpha = new short[256];<br/>    short[] red = new short[256];<br/>    short[] green = new short[256];<br/>    short[] blue = new short[256];<br/><br/>    int Y = 0.3*R + 0.59*G + 0.11*B<br/><br/>    for (short i = 0; i &lt; 256; i++) {<br/>        alpha[i] = i;<br/>        red[i] = (R1 + i*.3)/2;<br/>        green[i] = (G1 + i*.59)/2;<br/>        blue[i] = (B1 + i*.11)/2;<br/>    }<br/><br/>    short[][] data = new short[][] {<br/>            red, green, blue, alpha<br/>    };<br/><br/>    LookupTable lookupTable = new ShortLookupTable(0, data);<br/>    return new LookupOp(lookupTable, null);<br/>}<br/></code></pre><br/><br/><p>It creates a <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/image/BufferedImageOp.html" rel="nofollow">BufferedImageOp</a> that will mask out each color if the mask boolean is true.</p><br/><br/><p>Its simple to call too.</p><br/><br/><pre><code>BufferedImageOp colorizeFilter = createColorizeOp(R1, G1, B1);<br/>BufferedImage targetImage = colorizeFilter.filter(sourceImage, null);<br/></code></pre><br/><br/><p>If this is not what your looking for I suggest you look more into BufferedImageOp's.</p><br/><br/><p>This is would also be more efficient since you would not need to do the calculations multiple times on different images. Or do the calculations over again on different BufferedImages as long as the R1,G1,B1 values don't change.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HIDE EMPTI VELOC VARIABL NAME
    </pattern>
    <template>
<![CDATA[<p>You can mark variables as "<a href="http://velocity.apache.org/engine/releases/velocity-1.5/vtl-reference-guide.html" rel="nofollow">silent</a>" like this:</p><br/><br/><pre><code>$!variable<br/></code></pre><br/><br/><p>If $variable is null, nothing will be rendered. If it is not null, its value will render as it normally would.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD TO GET OBJECT FROM A BLOCKINGQUEU IN A CONCURR PROGRAM
    </pattern>
    <template>
<![CDATA[<pre><code>class Producer implements Runnable {<br/>   private final BlockingQueue queue;<br/>   Producer(BlockingQueue q) { queue = q; }<br/>   public void run() {<br/>     try {<br/>       while (true) { queue.put(produce()); }<br/>     } catch (InterruptedException ex) { ... handle ...}<br/>   }<br/>   Object produce() { ... }<br/> }<br/><br/> class Consumer implements Runnable {<br/>   private final BlockingQueue queue;<br/>   Consumer(BlockingQueue q) { queue = q; }<br/>   public void run() {<br/>     try {<br/>       while (true) { consume(queue.take()); }<br/>     } catch (InterruptedException ex) { ... handle ...}<br/>   }<br/>   void consume(Object x) { ... }<br/> }<br/><br/> class Setup {<br/>   void main() {<br/>     BlockingQueue q = new SomeQueueImplementation();<br/>     Producer p = new Producer(q);<br/>     Consumer c1 = new Consumer(q);<br/>     Consumer c2 = new Consumer(q);<br/>     new Thread(p).start();<br/>     new Thread(c1).start();<br/>     new Thread(c2).start();<br/>   }<br/> }<br/></code></pre><br/><br/><p>This example was taken from the <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html" rel="nofollow">JDK 1.6 docs of <code>BlockingQueue</code></a>. So You can see that you are doing it the right way. Here's the quote which tells you that it have to work:</p><br/><br/><blockquote><br/>  <p>Memory consistency effects: As with<br/>  other concurrent collections, actions<br/>  in a thread prior to placing an object<br/>  into a BlockingQueue happen-before<br/>  actions subsequent to the access or<br/>  removal of that element from the<br/>  BlockingQueue in another thread.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANNOT
    </pattern>
    <template>
<![CDATA[<p>Annotations are primarily used by code that is inspecting other code. They are often used for modifying (i.e. decorating or wrapping) existing classes at run-time to change their behavior. Frameworks such as <a href="http://www.junit.org/">JUnit</a> and <a href="http://www.hibernate.org/">Hibernate</a> use annotations to minimize the amount of code you need to write yourself to use the frameworks.</p><br/><br/><p>Oracle has <a href="http://download.oracle.com/javase/tutorial/java/javaOO/annotations.html">a good explanation of the concept and its meaning in Java</a> on their site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL OBJECT MAP IN VELOC TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You should change the #if line to:</p><br/><br/><pre><code>#if($car)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITI CLASS FIELD IN CONSTRUCTOR OR AT DECLAR
    </pattern>
    <template>
<![CDATA[<p>My rules:<br><br/>1. Don't initialize with the default values in declaration (null, false, 0, 0.0...).<br><br/>2. Prefer initialization in declaration if you don't have a constructor parameter that changes the value of the field.<br><br/>3. If the value of the field changes because of a constructor parameter put the initialization in the constructors.<br><br/>4. Be consistent in your practice. (the most important rule)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRO AND CON OF THE ASSORT JAVA WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I've used <a href="http://tapestry.apache.org/tapestry3/" rel="nofollow">Tapestry 3</a>, <a href="http://wicket.apache.org/" rel="nofollow">Wicket</a>, <a href="http://echo.nextapp.com/site/" rel="nofollow">Echo</a>, and <a href="http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html" rel="nofollow">JSF</a> fairly extensively.  I'd really recommend you look those over and pick the one that appears the easiest for you, and to most closely fit the way you prefer to work.</p><br/><br/><p>Of them, the most comfortable for me to work with was <a href="http://wicket.apache.org/" rel="nofollow">Wicket</a>, due to the lightweight nature of component building and simplicity of page templating.  That goes doubly so if you are using your own db code instead of Hibernate or some other framework (I was never completely happy with Wicket Hibernate or Spring Integration).</p><br/><br/><p><a href="http://echo.nextapp.com/site/" rel="nofollow">Echo</a> is great if you don't mind writing all of your layout in Java.  I know that is different now, but I still think that product serves a fairly narrow niche.  They change the development model with every major release as well it seems.</p><br/><br/><p><a href="http://tapestry.apache.org/tapestry3/" rel="nofollow">Tapestry</a> is a great product, but it is obviously very different from the others in terms of development model as it is led mainly by one dude.  Howard Lewis Ship is no doubt quite smart, but I am disappointed with their decision to basically forget backwards compatibility with each release.  Again, though, for your needs this may not matter, and I've always found the Tapestry products pleasurable to work against.</p><br/><br/><p><a href="http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html" rel="nofollow">JSF</a> has been out for years, and still feels like something that a <a href="http://struts.apache.org/" rel="nofollow">Struts</a> guy built to fix all of the problems of Struts.  Without really understanding all of the problems with Struts.  It still has an unfinished feel to it, although the product is obviously very flexible.  I use it and have some fondness for it, with great hopes for its future.  I think the next release (2.0) to be delivered in JEE6 will really bring it into its own, with a new template syntax (similar to Facelets) and a simplified component model (custom components in only 1 file... finally).</p><br/><br/><p>And, of course, there are a million smaller frameworks and tools that get their own following (<a href="http://velocity.apache.org/" rel="nofollow">Velocity</a> for basic needs, raw <a href="http://en.wikipedia.org/wiki/JavaServer_Pages" rel="nofollow">JSPs</a>, Struts, etc).  I generally prefer component oriented frameworks myself, though.  </p><br/><br/><p>In the end, I'd recommend just taking a look at Tapestry, Wicket, and JSF and just picking the one that feels the best to you.  You'll probably find one that just fits the way you like to work very quickly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGEX TO CATCH XSS ( CROSS SIT SCRIPT ) ATTACK ( IN JAVA )
    </pattern>
    <template>
<![CDATA[<p>Don't do this with regular expressions. Remember, you're not protecting just against valid HTML; you're protecting against the DOM that web browsers create. Browsers can be tricked into producing valid DOM from invalid HTML quite easily. </p><br/><br/><p>For example, see this list of <a href="http://ha.ckers.org/xss.html" rel="nofollow">obfuscated XSS attacks</a>. Are you prepared to tailor a regex to prevent this real world attack on <a href="http://www.greymagic.com/security/advisories/gm005-mc/" rel="nofollow">Yahoo and Hotmail</a> on IE6/7/8?</p><br/><br/><pre><code>&lt;HTML&gt;&lt;BODY&gt;<br/>&lt;?xml:namespace prefix="t" ns="urn:schemas-microsoft-com:time"&gt;<br/>&lt;?import namespace="t" implementation="#default#time2"&gt;<br/>&lt;t:set attributeName="innerHTML" to="XSS&amp;lt;SCRIPT DEFER&amp;gt;alert(&amp;quot;XSS&amp;quot;)&amp;lt;/SCRIPT&amp;gt;"&gt;<br/>&lt;/BODY&gt;&lt;/HTML&gt;<br/></code></pre><br/><br/><p>How about this attack that works on IE6? </p><br/><br/><pre><code>&lt;TABLE BACKGROUND="javascript:alert('XSS')"&gt;<br/></code></pre><br/><br/><p>How about attacks that are not listed on this site? The problem with Jeff's approach is that it's not a whitelist, as claimed. As someone on <a href="http://refactormycode.com/codes/333-sanitize-html#refactor_13642" rel="nofollow">that page</a> adeptly notes:</p><br/><br/><blockquote><br/>  <p>The problem with it, is that the html<br/>  must be clean. There are cases where<br/>  you can pass in hacked html, and it<br/>  won't match it, in which case it'll<br/>  return the hacked html string as it<br/>  won't match anything to replace. This<br/>  isn't strictly whitelisting.</p><br/></blockquote><br/><br/><p>I would suggest a purpose built tool like <a href="http://www.owasp.org/index.php/Category:OWASP_AntiSamy_Project" rel="nofollow">AntiSamy</a>. It works by actually parsing the HTML, and then traversing the DOM and removing anything that's not in the <em>configurable</em> whitelist. The major difference is the ability to gracefully handle malformed HTML. </p><br/><br/><p>The best part is that it actually unit tests for all the XSS attacks on the above site. Besides, what could be easier than this API call:</p><br/><br/><pre><code>public String toSafeHtml(String html) throws ScanException, PolicyException {<br/><br/>    Policy policy = Policy.getInstance(POLICY_FILE);<br/>    AntiSamy antiSamy = new AntiSamy();<br/>    CleanResults cleanResults = antiSamy.scan(html, policy);<br/>    return cleanResults.getCleanHTML().trim();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ESSENTI THAT I USE LIBRARI TO MANIPUL XML
    </pattern>
    <template>
<![CDATA[<p>It's not essential, but advisable. However, if string manipulation works for you, then go for it! There are plenty of cases where small or simple XML text can be safely built by hand.</p><br/><br/><p>Just be aware that creating XML text is harder than it looks. Here's some criteria I would consider:</p><br/><br/><ul><br/><li>First: how much <em>control</em> do you have on the information that goes into the xml?</li><br/></ul><br/><br/><p>The less control you have on the source data, the more likely you will have trouble, and the more advantageous the library becomes. For example: (a) Can you <em>guarantee</em> that the element names will never have a character that is illegal in a name? (b) How about quotes in an attribute's content? Can they happen, and are you handling them? (c) Does the data ever contain anything that might need to be encoded as an <a href="http://en.wikipedia.org/wiki/XML_entity" rel="nofollow">entity</a> (like the less-than which often needs to be output as <strong>&amp;lt;</strong>); are you doing it correctly?</p><br/><br/><ul><br/><li>Second, maintainability: is the code that builds the XML easy to understand <em>by someone else</em>?</li><br/></ul><br/><br/><p>You probably don't want to be stuck with the code for life. I've worked with second-hand C++ code that hand-builds XML and it can be surprisingly obscure. Of course, if this is a personal project of yours, then you don't need to worry about "others": substitute "in a year" for "others" above.</p><br/><br/><p>I wouldn't worry about performance. If your XML is simple enough that you can hand-write it, any overhead from the library is probably meaningless. Of course, your case might be different, but you should measure to prove it first.</p><br/><br/><p>Finally, Yes; you can hand build XML text by hand if it's simple enough; but not knowing the libraries available is <em>probably</em> not the right reason.</p><br/><br/><p>A modern XML library is a quite powerful tool, but it can also be daunting. However, learning the essentials of your XML library is not that hard, and it can be quite handy; among other things, it's almost a requisite in today's job marketplace. Just don't get bogged down by namespaces, schemas and other fancier features until you get the essentials.</p><br/><br/><p>Good luck.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPLICITLI PASS THE TYPE ARGUMENT TO A GENER JAVA METHOD
    </pattern>
    <template>
<![CDATA[<p>You can, if you pass in the type as a method parameter.</p><br/><br/><pre><code>static &lt;T&gt; List&lt;T&gt; createEmptyList( Class&lt;T&gt; type ) {<br/>  return new ArrayList&lt;T&gt;();<br/>}<br/><br/>@Test<br/>public void createStringList() {<br/>  List&lt;String&gt; stringList = createEmptyList( String.class );<br/>}<br/></code></pre><br/><br/><p>Methods cannot be genericised in the same way that a type can, so the only option for a method with a dynamically-typed generic return type -- phew that's a mouthful :-) -- is to pass in the type as an argument.</p><br/><br/><p>For a truly excellent FAQ on Java generics, <a href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html" rel="nofollow">see Angelika Langer's generics FAQ</a>.</p><br/><br/><p>.<br /><br/>.   </p><br/><br/><p><strong>Follow-up:</strong></p><br/><br/><p>It wouldn't make sense in this context to use the array argument as in <code>Collection.toArray( T[] )</code>. The only reason an array is used there is because the same (pre-allocated) array is used to contain the results (if the array is large enough to fit them all in). This saves on allocating a new array at run-time all the time.</p><br/><br/><p>However, for the purposes of education, if you did want to use the array typing, the syntax is very similar:</p><br/><br/><pre><code>static &lt;T&gt; List&lt;T&gt; createEmptyList( T[] array ) {<br/>  return new ArrayList&lt;T&gt;();<br/>}<br/><br/>@Test<br/>public void testThing() {<br/>  List&lt;Integer&gt; integerList = createEmptyList( new Integer[ 1 ] );<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT GET THE RESULT I EXPECT USE READLIN ( ) IN JAVA
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>From my understanding of this, readLine should return null the first time no input is entered other than a line termination, like '\r'.</p><br/></blockquote><br/><br/><p>That is not correct. <code>readLine</code> will return <code>null</code> if the end of the stream is reached. That is, for example, if you are reading a file, and the file ends, or if you're reading from a socket and the socket closses.</p><br/><br/><p>But if you're simply reading the console input, hitting the return key on your keyboard does not constitute an end of stream. It's simply a character that is returned (<code>\n</code> or <code>\r\n</code> depending on your OS).</p><br/><br/><p>So, if you want to break on both the empty string and the end of line, you should do:</p><br/><br/><pre><code>while (line != null &amp;&amp; !line.equals(""))<br/></code></pre><br/><br/><p>Also, your current program should work as expected if you pipe some file directly into it, like so:</p><br/><br/><pre><code>java -cp . Echo &lt; test.txt<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SWIFT LIBRARI
    </pattern>
    <template>
<![CDATA[<p>SWIFT is releasing a "Standards Developer Kit" which includes an "MT/XML Schema Library".</p><br/><br/><p>From the doc:<br/>"The MT/XML Schema Library is a complete set of XML schema definitions for MT messages, and software which shows how to convert messages from an MT format to an MT XML representation and back. This approach allows XML integration between applications while the MT (FIN) format will continue to be transported over the SWIFT network."</p><br/><br/><p>Java source code will also be made available, again from the doc:<br/>"Working sample Java source code that converts a message in MT format to an XML instance and from an XML instance to a message in MT format."</p><br/><br/><p>See: https://www.swiftcommunity.net/communities/download.cfm?id=4798</p><br/><br/><p>This can be a great aid in dealing with FIN messages in XML syntax.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK RESOURC FOR LEARN JAVA DESIGN PATTERN
    </pattern>
    <template>
<![CDATA[<p><em>The</em> definitive guide and a must-have tome is <a href="http://rads.stackoverflow.com/amzn/click/0201633612">Design Patterns</a> by Gamma, et al (a.k.a. the Gang of Four, or simply, GoF).  For Java-specific I'd recommend Sun's <a href="http://rads.stackoverflow.com/amzn/click/0130935387">Applied Java Patterns</a> by Stelting and Maassen.</p><br/><br/><p><em>Thanks for the <a href="http://stackoverflow.com/questions/25331/best-bookresource-for-learning-java-design-patterns#25400">correction</a>, <a href="http://stackoverflow.com/users/133/luke-girvin">Luke</a>!</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLUGIN JAVA PROGRAM
    </pattern>
    <template>
<![CDATA[<p>I've done this for software I've written in the past, it's very handy. I did it by first creating an Interface that all my 'plugin' classes needed to implement. I then used the Java <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/ClassLoader.html" rel="nofollow">ClassLoader</a> to load those classes and create instances of them.</p><br/><br/><p>One way you can go about it is this:</p><br/><br/><pre><br/>File dir = new File("put path to classes you want to load here");<br/>URL loadPath = dir.toURI().toURL();<br/>URL[] classUrl = new URL[]{loadPath};<br/><br/>ClassLoader cl = new URLClassLoader(classUrl);<br/><br/>Class loadedClass = cl.loadClass("classname"); // must be in package.class name format<br/></pre><br/><br/><p>That has loaded the class, now you need to create an instance of it, assuming the interface name is MyModule:</p><br/><br/><pre><br/>MyModule modInstance = (MyModule)loadedClass.newInstance();<br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD TO RUN A JAVA APPLIC AS A NIX DAEMON OR WINDOW SERVIC
    </pattern>
    <template>
<![CDATA[<p>I've had great success with Java Service Wrapper myself.  I haven't looked at the others, but the major strengths of ServiceWrapper are:</p><br/><br/><ul><br/><li>Great x-platform support - I've used it on Windows and Linux, and found it easy on both</li><br/><li>Solid Documentation - The docs are clear and to the point, with great examples</li><br/><li>Deep per-platform support - There are some unique features in the window service management system that are supported perfectly by service wrapper (w/o restarting).  And on Windows, you will even see your app name in the process list instead of just "java.exe".</li><br/><li>Standards Compliant - Unlike many ad-hoc Java init scripts, the scripts for service wrapper tend to be compliant with LSB standards.  This can end up being very important if you ever want high availability management from something like Linux Heartbeat/HA.</li><br/></ul><br/><br/><p>Anyway, just my 2 cents... :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MASTER PAGE EQUIVAL IN JAVA
    </pattern>
    <template>
<![CDATA[<p>First, the equivalent of ASP.Net in Java is going to be a web framework, such as the ones you mention (Tiles, Tapestry and Velocity).</p><br/><br/><p>Master pages give the ability to define pages in terms of content slotted into a master template.</p><br/><br/><p>Master pages are a feature of ASP.Net (the .Net web framework), so you are looking for a feature similar to master pages in a Java web framework.  </p><br/><br/><p><a href="http://tiles.apache.org/tutorial/basic/pages.html" rel="nofollow">http://tiles.apache.org/tutorial/basic/pages.html</a> gives some basic examples using Tiles and JSP to implement something similar with Struts, a Java web framework.  In this case, the Master Pages functionality is a plugin on top of Struts.</p><br/><br/><p>Velocity is a generic templating engine, not specialized for web pages and definitely more complicated than you need.  (I've seen it used for code generation.)</p><br/><br/><p>Tapestry is more of a full featured web stack than Tile, and is probably good for your purposes.  Its templating functionality involves creating a component and putting all common markup in that.  An example is at <a href="http://www.infoq.com/articles/tapestry5-intro" rel="nofollow">http://www.infoq.com/articles/tapestry5-intro</a>.</p><br/><br/><p>The specifics of this differ based on which Java web framework you choose.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA TO GET OS LEVEL SYSTEM INFORM
    </pattern>
    <template>
<![CDATA[<p>You can get some limited memory information from the Runtime class. It really isn't exactly what you are looking for, but I thought I would provide it for the sake of completeness. Here is a small example. Edit: You can also get disk usage information from the java.io.File class. The disk space usage stuff requires Java 1.6 or higher.</p><br/><br/><pre><code>public class Main {<br/>  public static void main(String[] args) {<br/>    /* Total number of processors or cores available to the JVM */<br/>    System.out.println("Available processors (cores): " + <br/>        Runtime.getRuntime().availableProcessors());<br/><br/>    /* Total amount of free memory available to the JVM */<br/>    System.out.println("Free memory (bytes): " + <br/>        Runtime.getRuntime().freeMemory());<br/><br/>    /* This will return Long.MAX_VALUE if there is no preset limit */<br/>    long maxMemory = Runtime.getRuntime().maxMemory();<br/>    /* Maximum amount of memory the JVM will attempt to use */<br/>    System.out.println("Maximum memory (bytes): " + <br/>        (maxMemory == Long.MAX_VALUE ? "no limit" : maxMemory));<br/><br/>    /* Total memory currently in use by the JVM */<br/>    System.out.println("Total memory (bytes): " + <br/>        Runtime.getRuntime().totalMemory());<br/><br/>    /* Get a list of all filesystem roots on this system */<br/>    File[] roots = File.listRoots();<br/><br/>    /* For each filesystem root, print some info */<br/>    for (File root : roots) {<br/>      System.out.println("File system root: " + root.getAbsolutePath());<br/>      System.out.println("Total space (bytes): " + root.getTotalSpace());<br/>      System.out.println("Free space (bytes): " + root.getFreeSpace());<br/>      System.out.println("Usable space (bytes): " + root.getUsableSpace());<br/>    }<br/>  }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA DOM WRAPPER IS THE BEST OR MOST POPULAR
    </pattern>
    <template>
<![CDATA[<p>I like <a href="http://www.xom.nu/" rel="nofollow">XOM</a>, because I like the way Elliotte Rusty Harold thinks. Of the ones you mention I belive it's the one that strays away from the DOM standard API:s the most, but I consider that a benefit.</p><br/><br/><p>I once implemented a DOM library for Cocoa, and XOM was my inspiration.</p><br/><br/><p>I've worked with JDOM as well, and there's absolutely nothing wrong with it, although I do prefer XOM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHUT DOWN A COMPUT USE JAVA
    </pattern>
    <template>
<![CDATA[<p>Create your own function to execute an OS <a href="http://www.exampledepot.com/egs/java.lang/Exec.html?l=new" rel="nofollow">command</a> through the <a href="http://www.computerhope.com/shutdown.htm" rel="nofollow">command line</a>?</p><br/><br/><p>For the sake of an example. But know where and why you'd want to use this as others note.</p><br/><br/><pre><code>public static void main(String arg[]) throws IOException{<br/>	Runtime runtime = Runtime.getRuntime();<br/>	Process proc = runtime.exec("shutdown -s -t 0");<br/>	System.exit(0);<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>If your hardcoded values are just simple key-value pairs, you should look at <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Properties.html" rel="nofollow">java.util.Properties</a>.  It's a lot simpler than xml, easier to use, and mind-numbingly trivial to implement.</p><br/><br/><p>If you are working with Java and the data you are storing or retrieving from disk is modeled as a key value pair (which it sounds like it is in your case), then I really can't imagine a better solution.</p><br/><br/><p>I have used properties files for simple configuration of small packages in a bigger project, and as a more global configuration for a whole project, and I have never had problems with it.</p><br/><br/><p>Of course this has the huge benefit of not requiring any 3rd party libraries to utilize.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAY SOUND IN JAVA
    </pattern>
    <template>
<![CDATA[<p>I personally made this code that works fine. I think it only works with .wav format.</p><br/><br/><pre><code>  public static synchronized void playSound(final String url) {<br/>    new Thread(new Runnable() { // the wrapper thread is unnecessary, unless it blocks on the Clip finishing, see comments<br/>      public void run() {<br/>        try {<br/>          Clip clip = AudioSystem.getClip();<br/>          AudioInputStream inputStream = AudioSystem.getAudioInputStream(Main.class.getResourceAsStream("/path/to/sounds/" + url));<br/>          clip.open(inputStream);<br/>          clip.start(); <br/>        } catch (Exception e) {<br/>          System.err.println(e.getMessage());<br/>        }<br/>      }<br/>    }).start();<br/>  }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK RECOMMEND FOR JAVA GOOD PRACTIC
    </pattern>
    <template>
<![CDATA[<p>I personally consider <a href="http://rads.stackoverflow.com/amzn/click/0321356683" rel="nofollow">Effective Java</a> by Josh Bloch a must.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHICH BLOG API
    </pattern>
    <template>
<![CDATA[<p>Many (most?) blogs will have a meta tag for "generator" which will list the blog engine. For example a blogger blog will contain the following meta tag:  </p><br/><br/><pre><code>&lt;meta name="generator" content="Blogger" /&gt;<br/></code></pre><br/><br/><p>My Subtext blog shows the following generator meta tag:  </p><br/><br/><pre><code>&lt;meta name="Generator" content="Subtext Version 1.9.5.177" /&gt;<br/></code></pre><br/><br/><p>This meta tag would be the first place to look. For blogs that don't set this meta tag in the source, you'd have to resort to looking for patterns to determine the blog type. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREVIEW HTML IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Many of the Swing controls (like JLabel) can render basic HTML content. <a href="http://java.sun.com/javase/6/docs/api/javax/swing/JEditorPane.html" rel="nofollow">JEditorPane</a> can be used to display HTML pages. However, these controls are limited to <a href="http://www.w3.org/TR/REC-html32" rel="nofollow">HTML 3.2</a> support.</p><br/><br/><p>For a richer experience, I would use the <a href="https://jdic.dev.java.net/" rel="nofollow">JDesktop Integration Components</a>.</p><br/><br/><blockquote><br/>  <p>JDIC provides Java applications with<br/>  access to functionalities and<br/>  facilities provided by the native<br/>  desktop. It consists of a collection<br/>  of Java packages and tools. JDIC<br/>  supports a variety of features such as<br/>  <strong>embedding the native browser</strong>,<br/>  launching the desktop applications,<br/>  creating tray icons on the desktop,<br/>  registering file type associations,<br/>  creating JNLP installer packages, etc.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML PARS LIBRARI DO YOU RECOMMEND IN JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://sourceforge.net/projects/nekohtml/" rel="nofollow">NekoHTML</a>, <a href="http://home.ccil.org/~cowan/XML/tagsoup/" rel="nofollow">TagSoup</a>, and <a href="http://sourceforge.net/projects/jtidy/" rel="nofollow">JTidy</a> will allow you to parse HTML and then process with XML tools, like XPath.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL PATTERN SERVLET MAP IN TOMCAT 6.0
    </pattern>
    <template>
<![CDATA[<pre><code>&lt;url-pattern&gt;*NEXTEVENT*&lt;/url-pattern&gt;<br/></code></pre><br/><br/><p>The URL pattern is not valid. It can either end in an asterisk or start with one (to denote a file extension mapping).</p><br/><br/><p>The url-pattern specification:</p><br/><br/><blockquote><br/>  <ul><br/>  <li>A string beginning with a '/' character and ending with a '/*'<br/>  suffix is used for path mapping.</li><br/>  <li>A string beginning with a '*.' prefix is used as an extension<br/>  mapping.</li><br/>  <li>A string containing only the '/' character indicates the "default"<br/>  servlet of the application. In this<br/>  case the servlet path is the request<br/>  URI minus the context path and the<br/>  path info is null.</li><br/>  <li>All other strings are used for exact matches only.</li><br/>  </ul><br/></blockquote><br/><br/><p>See SRV.11.2 of the <a href="http://java.sun.com/products/servlet/download.html" rel="nofollow">Java Servlet Specification</a> Version 2.4 for more details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER RULE OF THUMB FOR CREAT AN EXCEPT IN JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.javaspecialists.eu/" rel="nofollow">The Java Specialists</a> wrote a post about <a href="http://www.javaspecialists.eu/archive/Issue162.html" rel="nofollow">Exceptions in Java</a>, and in it they list a few "best practices" for creating Exceptions, summarized below:</p><br/><br/><ul><br/><li><p>Don't Write Own Exceptions (there are lots of useful Exceptions that are already part of the Java API)</p></li><br/><li><p>Write Useful Exceptions (if you have to write your own Exceptions, make sure they provide useful information about the problem that occurred)</p></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      READ AND DISPLAY JAVA .CLASS VERSION
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://java.sun.com/javase/6/docs/technotes/tools/solaris/javap.html" rel="nofollow">javap</a> tool that comes with the JDK. The <code>-verbose</code> option will print the version number of the class file.</p><br/><br/><pre><code>&gt; javap -verbose MyClass<br/>Compiled from "MyClass.java"<br/>public class MyClass<br/>  SourceFile: "MyClass.java"<br/>  minor version: 0<br/>  major version: 46<br/>...<br/></code></pre><br/><br/><p>To only show the version:</p><br/><br/><pre><code>WINDOWS&gt; javap -verbose MyClass | find "version"<br/>LINUX  &gt; javap -verbose MyClass | grep version<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HART LIBRARI FOR JAVA AND .NET
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.advsofteng.com/" rel="nofollow">ChartDirector</a> is fantastic and supports more than just Java and .NET.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N T ENUMER ITER
    </pattern>
    <template>
<![CDATA[<p>Enumeration hasn't been modified to support Iterable because it's an interface not a concrete class (like Vector, which was modifed to support the Collections interface).</p><br/><br/><p>If Enumeration was changed to support Iterable it would break a bunch of people's code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GRADIENT PROGRAMAT
    </pattern>
    <template>
<![CDATA[<p>you want an interpolation between the first and the second colour. Interpolating colours is easy by calculating the same interpolation for each of its components (R, G, B). There are many ways to interpolate. The easiest is to use linear interpolation: just take percentage <em>p</em> of the first colour and percentage 1 - <em>p</em> of the second:</p><br/><br/><pre><code>R = firstCol.R * p + secondCol.R * (1 - p)<br/></code></pre><br/><br/><p>There's <a href="http://stackoverflow.com/questions/25007/conditional-formatting-percentage-to-color-conversion" rel="nofollow">another question</a> related to this.</p><br/><br/><p>There are other methods of interpolation that sometimes work better. For example, using a <a href="http://en.wikipedia.org/wiki/Sigmoid_function" rel="nofollow">bell-shaped (sigmoidal)</a> interpolation function makes the transition smoother.</p><br/><br/><p>/EDIT: Oops, you mean using a predefined function. OK, even easier. The blog post you linked now has an example code in Python.</p><br/><br/><p>In Java, you could use the <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/GradientPaint.html" rel="nofollow"><code>GradientPaint</code></a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVICEWRAPP ON 64BIT LINUX ANI PROBLEM
    </pattern>
    <template>
<![CDATA[<p>I've had it running in production on 64-bit red hat without any trouble for the last year or so. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHOOS CHECK AND UNCHECK EXCEPT
    </pattern>
    <template>
<![CDATA[<p>From <a href="http://lankireddy.blogspot.com/2007/10/checked-vs-unchecked-exceptions.html" rel="nofollow">A Java Learner</a>:</p><br/><br/><blockquote><br/>  <p>When an exception occurs, you have to<br/>  either catch and handle the exception,<br/>  or tell compiler that you can't handle<br/>  it by declaring that your method<br/>  throws that exception, then the code<br/>  that uses your method will have to<br/>  handle that exception (even it also<br/>  may choose to declare that it throws<br/>  the exception if it can't handle it). </p><br/>  <br/>  <p>Compiler will check that we have done<br/>  one of the two things (catch, or<br/>  declare).  So these are called Checked<br/>  exceptions.   But Errors, and Runtime<br/>  Exceptions are not checked for by<br/>  compiler (even though you can choose<br/>  to catch, or declare, it is not<br/>  required).  So, these two are called<br/>  Unchecked exceptions.</p><br/>  <br/>  <p>Errors are used to represent those<br/>  conditions which occur outside the<br/>  application, such as crash of the<br/>  system.  Runtime exceptions are<br/>  usually occur by fault in the<br/>  application logic.  You can't do<br/>  anything in these situations.  When<br/>  runtime exception occur, you have to<br/>  re-write your program code.  So, these<br/>  are not  checked by compiler.  These<br/>  runtime exceptions will uncover in<br/>  development, and testing period.  Then<br/>  we have to refactor our code to remove<br/>  these errors.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUAL AND HASHCOD IN JAVA
    </pattern>
    <template>
<![CDATA[<h3>The theory (for the language lawyers and the mathematically inclined):</h3><br/><br/><p>equals() (<a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html#equals(java.lang.Object)" rel="nofollow">javadoc</a>) must define an equality relation (it must be <em>reflexive</em>, <em>symmetric</em>, and <em>transitive</em>). In addition, it must be <em>consistent</em> (if the objects are not modified, then it must keep returning the same value). Furthermore, o.equals(null) must always return false.</p><br/><br/><p>hashCode() (<a href="http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html#hashCode()" rel="nofollow">javadoc</a>) must also be <em>consistent</em> (if the object is not modified in terms of equals(), it must keep returning the same value).</p><br/><br/><p>The relation between the two methods is:</p><br/><br/><p><em>Whenever a.equals(b), then a.hashCode() must be same as b.hashCode().</em></p><br/><br/><h3>In practice:</h3><br/><br/><p>If you override one, then you should override the other.</p><br/><br/><p>Use the same set of fields that you use to compute equals() to compute hashCode().</p><br/><br/><p>Use the excellent helper classes <a href="http://commons.apache.org/lang/api-release/org/apache/commons/lang3/builder/EqualsBuilder.html" rel="nofollow">EqualsBuilder</a> and <a href="http://commons.apache.org/lang/api-release/org/apache/commons/lang3/builder/HashCodeBuilder.html" rel="nofollow">HashCodeBuilder</a> from the <a href="http://commons.apache.org/lang/" rel="nofollow">Apache Commons Lang</a> library. An example:</p><br/><br/><pre><code>public class Person {<br/>    private String name;<br/>    private int age;<br/>    // ...<br/><br/>    public int hashCode() {<br/>        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers<br/>            // if deriving: appendSuper(super.hashCode()).<br/>            append(name).<br/>            append(age).<br/>            toHashCode();<br/>    }<br/><br/>    public boolean equals(Object obj) {<br/>        if (obj == null)<br/>            return false;<br/>        if (obj == this)<br/>            return true;<br/>        if (obj.getClass() != getClass())<br/>            return false;<br/><br/>        Person rhs = (Person) obj;<br/>        return new EqualsBuilder().<br/>            // if deriving: appendSuper(super.equals(obj)).<br/>            append(name, rhs.name).<br/>            append(age, rhs.age).<br/>            isEquals();<br/>    }<br/>}<br/></code></pre><br/><br/><h3>Also remember:</h3><br/><br/><p>When using a hash-based <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html" rel="nofollow">Collection</a> or <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Map.html" rel="nofollow">Map</a> such as <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashSet.html" rel="nofollow">HashSet</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/LinkedHashSet.html" rel="nofollow">LinkedHashSet</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html" rel="nofollow">HashMap</a>, <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/Hashtable.html" rel="nofollow">Hashtable</a>, or <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/WeakHashMap.html" rel="nofollow">WeakHashMap</a>, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, <a href="http://www.javapractices.com/topic/TopicAction.do?Id=29" rel="nofollow">which has also other benefits</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JCONSOL WORK WITH WEBSPHER 6.1
    </pattern>
    <template>
<![CDATA[<p>WebSphere's support for JMX is crap.  Particularly, if you need to connect to any secured JMX beans.  Here's an interesting tidbit, their own implementation of jConsole will not connect to their own JVM.  I have had a PMR open with IBM for over a year to fix this issue, and have gotten nothing but the runaround.  They clearly don't want to fix this issue.</p><br/><br/><p>The only way I have been able to invoke remote secured JMX beans hosted on WebSphere has been to implement a client using the "WebSphere application client".  This is basically a stripped down app server used for stuff like this.</p><br/><br/><p>Open a PMR with IBM.  Perhaps if more people report this issue, they will actually fix it. </p><br/><br/><blockquote><br/>  <p><strong>Update:</strong> You can run your application as a WebSphere Application Client in RAD.  Open the run menu, then choose "Run...".  In the dialog that opens, towards the bottom on the left hand side, you will see "WebSphere v6.1 Application Client".  I'm not sure how to start and Application Client outside of RAD.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APACH ANT TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>An alternative to making a template is to evolve one by gradually generalising your current project's Ant script so that there are fewer changes to make the next time you copy it for use on a new project. There are several things you can do.</p><br/><br/><p>Use ${ant.project.name} in file names, so you only have to mention your application name in the project element. For example, if you generate myapp.jar:</p><br/><br/><pre><code>&lt;project name="myapp"&gt;<br/>   ...<br/>   &lt;target name="jar"&gt;<br/>      ...<br/>      &lt;jar jarfile="${ant.project.name}.jar" ...<br/></code></pre><br/><br/><p>Structure your source directory structure so that you can package your build by copying whole directories, rather than naming individual files. For example, if you are copying JAR files to a web application archive, do something like:</p><br/><br/><pre><code>&lt;copy todir="${war}/WEB-INF/lib" flatten="true"&gt;<br/>   &lt;fileset dir="lib" includes="**/*.jar"&gt;<br/>&lt;/copy&gt;<br/></code></pre><br/><br/><p>Use properties files for machine-specific and project-specific build file properties.</p><br/><br/><pre><code>&lt;!-- Machine-specific property over-rides --&gt;<br/>&lt;property file="/etc/ant/build.properties" /&gt;<br/><br/>&lt;!-- Project-specific property over-rides --&gt;<br/>&lt;property file="build.properties" /&gt;<br/><br/>&lt;!-- Default property values, used if not specified in properties files --&gt;<br/>&lt;property name="jboss.home" value="/usr/share/jboss" /&gt;<br/>...<br/></code></pre><br/><br/><p>Note that Ant properties cannot be changed once set, so you override a value by defining a new value <em>before</em> the default value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SINGLETON VS STATIC IS THERE A REAL PERFORM BENEFIT
    </pattern>
    <template>
<![CDATA[<p>From a strict runtime performance point of view, the difference is really negligible. The main difference between the two lies down in the fact that the "static" lifecycle is linked to the classloader, whereas for the singleton it's a regular instance lifecycle. Usually it's better to stay away from the ClassLoader business, you avoid some tricky problems, especially when you try to reload the web application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MPOS A TOTAL ORDER ON ALL INSTANC OF ANI CLASS IN JAVA
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Hey, look at what I found!</p><br/>  <br/>  <p><a href="http://gafter.blogspot.com/2007/03/compact-object-comparator.html" rel="nofollow">http://gafter.blogspot.com/2007/03/compact-object-comparator.html</a></p><br/></blockquote><br/><br/><p>Oh yes, I forgot about the IdentityHashMap (Java 6 and above only). Just have to pay attention at releasing your comparator. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATH WHERE THE USER INSTAL MY JAVA APPLIC
    </pattern>
    <template>
<![CDATA[<pre><code>System.getProperty("user.dir")<br/></code></pre><br/><br/><p>gets the directory the Java VM was started from.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT EXPORT DEPEND
    </pattern>
    <template>
<![CDATA[<p>You could use the <a href="http://depfind.sourceforge.net/Manual.html#ShowingOnlyOutboundDependencies" rel="nofollow">Outbound dependencies</a> feature of <a href="http://depfind.sourceforge.net/" rel="nofollow">DependencyFinder</a>. You can do that entirely in the GUI, or in command line exporting XML.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUTOFMEMORYERROR WHEN USE BYTEBUFF AND NIO
    </pattern>
    <template>
<![CDATA[<p>I would say don't create a huge ByteBuffer that contains ALL of the data at once.  Create a much smaller ByteBuffer, fill it with data, then write this data to the FileChannel.  Then reset the ByteBuffer and continue until all the data is written.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND MANUAL EXECUT FINAL
    </pattern>
    <template>
<![CDATA[<p>According to this simple test program, the JVM will still make its call to finalize() even if you explicitly called it:</p><br/><br/><pre><code>private static class Blah<br/>{<br/>  public void finalize() { System.out.println("finalizing!"); }<br/>}<br/><br/>private static void f() throws Throwable<br/>{<br/>   Blah blah = new Blah();<br/>   blah.finalize();<br/>}<br/><br/>public static void main(String[] args) throws Throwable<br/>{<br/>	System.out.println("start");<br/>	f();<br/>	System.gc();<br/>	System.out.println("done");<br/>}<br/></code></pre><br/><br/><p>The output is:</p><br/><br/><blockquote><br/>  <p>start<br /><br/>  finalizing!<br /><br/>  finalizing!<br /><br/>  done</p><br/></blockquote><br/><br/><p>Every resource out there says to never call finalize() explicitly, and pretty much never even implement the method because there are no guarantees as to if and when it will be called.  You're better off just closing all of your resources manually.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOU NOT EXPLICITLI CALL FINAL ( ) OR START THE GARBAG COLLECTOR
    </pattern>
    <template>
<![CDATA[<p>The short answer: Java garbage collection is a very finely tuned tool. System.gc() is a sledge-hammer.</p><br/><br/><p>Java's heap is divided into different generations, each of which is collected using a different strategy. If you attach a profiler to a healthy app, you'll see that it very rarely has to run the most expensive kinds of collections because most objects are caught by the faster copying collector in the young generation.</p><br/><br/><p>Calling System.gc() directly, while technically not guaranteed to do anything, in practice will trigger an expensive, stop-the-world full heap collection. This is <em>almost always the wrong thing to do</em>. You think you're saving resources, but you're actually wasting them for no good reason, forcing Java to recheck all your live objects "just in case".</p><br/><br/><p>If you are having problems with GC pauses during critical moments, you're better off configuring the JVM to use the concurrent mark/sweep collector, which was designed specifically to minimise time spent paused, than trying to take a sledgehammer to the problem and just breaking it further.</p><br/><br/><p>The Sun document you were thinking of is here: <a href="http://java.sun.com/javase/technologies/hotspot/gc/gc_tuning_6.html" rel="nofollow">Java SE 6 HotSpot&trade; Virtual Machine Garbage Collection Tuning</a></p><br/><br/><p>(Another thing you might not know: implementing a finalize() method on your object makes garbage collection slower. Firstly, it will take <em>two</em> GC runs to collect the object: one to run finalize() and the next to ensure that the object wasn't resurrected during finalization. Secondly, objects with finalize() methods have to be treated as special cases by the GC because they have to be collected individually, they can't just be thrown away in bulk.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HASH TABL IN JAVA
    </pattern>
    <template>
<![CDATA[<pre><code>Map map = new HashMap();<br/>Hashtable ht = new Hashtable();<br/></code></pre><br/><br/><p>Both classes can be found from the java.util package. The difference between the 2 is explained in the following <a href="http://www.jguru.com/faq/view.jsp?EID=430247" rel="nofollow">jGuru FAQ entry</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUI DESIGN FOR ECLIPS
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/webtoolkit/tools/wbpro/index.html" rel="nofollow">Window Builder Pro</a> is a great GUI Designer for eclipse and is now offered for free by google:</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MUST COVER IN MY GROOVI PRESENT
    </pattern>
    <template>
<![CDATA[<p>I don't know anything about groovy so in a sense I've qualified to answer this...</p><br/><br/><p>I would want you to:</p><br/><br/><ul><br/><li>Tell me why I would want to use Scripting (in general) as opposed to Java-- what does it let me do quicker (as in development time), what does it make more readable. Give tantalising examples of ways I can use chunks of scripting in my mostly Java app. You want to make this relevant to Java devs moreso than tech-junkies.</li><br/><li>With that out of the way, why Groovy? Why not Ruby, Python or whatever (which are all runnable on the JVM).</li><br/><li>Don't show me syntax that Java can already do (if statements, loops etc) or if you do make it quick. It's as boring as hell to watch someone walk through language syntax 101 for 20min.<br/><ul><br/><li>For syntax that has a comparible feature in Java maybe show them side by side quickly.</li><br/><li>For syntax that is not in Java (closures etc) you can talk to them in a bit more detail.</li><br/></ul></li><br/><li>Remember those examples from the first point. Show me one, fully working (or at least looking like it is).</li><br/><li>At the end have question time. That is <strong>crazy</strong> important, and with that comes a burden on you to be a psuedo-guru :P.</li><br/></ul><br/><br/><p>I'm not sure about how the Java6 scripting support works but I'm fairly sure it can be made secure. I remember something about defining the API the script can use before it's run.</p><br/><br/><p>If this is the case then an example you could show would be some thick-client application (e.g. a music player) where users can write their own scripts with an API you provide them in Groovy which allows them to script their app in interesting and secure ways (e.g. creating custom columns in the playlist)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN A DIFFER LANGUAG
    </pattern>
    <template>
<![CDATA[<p>Generally, no.</p><br/><br/><p>The stream format for Java serialization is defined <a href="http://java.sun.com/j2se/1.4/pdf/serial-spec.pdf" rel="nofollow">in this document</a>, but you need access to the original class definitions (and a Java runtime to load them into) to turn the stream data back into something approaching the original objects. For example, classes may define writeObject() and readObject() methods to customise their own serialized form.</p><br/><br/><p>(<strong>edit:</strong> lubos hasko suggests having a little java program to deserialize the objects in front of Python, but the problem is that for this to work, your "little java program" needs to load the same versions of all the same classes that it might deserialize. Which is tricky if you're receiving log messages from one app, and really tricky if you're multiplexing more than one log stream. Either way, it's not going to be a little program any more. <strong>edit2:</strong> I could be wrong here, I don't know what gets serialized. If it's just log4j classes you should be fine. On the other hand, it's possible to log arbitrary exceptions, and if they get put in the stream as well my point stands.)</p><br/><br/><p>It would be much easier to customise the log4j network adapter and replace the raw serialization with some more easily-deserialized form (for example you could use XStream to turn the object into an XML representation)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPLAT ENGIN FOR SPRING FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I prefer Velocity to Freemarker for the clarity/simplicity of the syntax and professionalism of the community.  I also get a lot of mileage out of the VelocityTools library.  Freemarker can be a bit more intimidating but is also totally solid.  It lacks VelocityTools, but makes up for it with native support for JSP tag libraries.</p><br/><br/><p>Either of these template languages is a great improvement over JSP/JSTL, if you ask me.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOC TEMPLAT GENER
    </pattern>
    <template>
<![CDATA[<p>The JAutodoc plugin for eclipse does exactly what you need, but with a package granularity : </p><br/><br/><p>right click on a package, select "Add javadoc for members..." and the skeleton will be added.</p><br/><br/><p>There are numerous interesting options : templates for javadoc, adding a TODO in the header of every file saying : "template javadoc, must be filled...", etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATELESS SESSION BEAN ARE SINGL THREAD
    </pattern>
    <template>
<![CDATA[<p>The SLSBs are single threaded because of the TX Context, Principal is associated with a bean instance when it is called. These beans are pooled and unless the max pool size is reached are processed in separate threads ( Vendor dependent).</p><br/><br/><p>If SLSBs were designed thread safe every call would have looked like a servlet doGet/Post with request info containing Tx Context , Security Context info and etc. So at least the code looks clean (developer dependent). </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN COPI
    </pattern>
    <template>
<![CDATA[<p>Turn that into a spec:<br /><br/>-that objects need to implement an interface in order to be allowed into the collection<br/>Something like <code>ArrayList&lt;ICloneable&gt;()</code></p><br/><br/><p>Then you can be assured that you always do a deep copy - the interface should have a method that is guaranteed to return a deep copy.  </p><br/><br/><p>I think that's the best you can do.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA CONSOLE EDITOR SIMILAR TO THE GROOVYCONSOL
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.drjava.org/" rel="nofollow">DrJava</a> is your best bet. It also has an <a href="http://www.drjava.org/eclipse.shtml" rel="nofollow">Eclipse plugin</a> to use the interactions pane like GroovyConsole.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET DESERI MY PRIMIT ARRAY FROM A WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>Here's what I ended up with.  I have never found another solution out there for this, so if you have something better, by all means, contribute.</p><br/><br/><p>First, the long array definition in the wsdl:types area:</p><br/><br/><pre><code>  &lt;xsd:complexType name="ArrayOf_xsd_long"&gt;<br/>    &lt;xsd:complexContent mixed="false"&gt;<br/>      &lt;xsd:restriction base="soapenc:Array"&gt;<br/>        &lt;xsd:attribute wsdl:arrayType="soapenc:long[]" ref="soapenc:arrayType" /&gt;<br/>      &lt;/xsd:restriction&gt;<br/>    &lt;/xsd:complexContent&gt;<br/>  &lt;/xsd:complexType&gt;<br/></code></pre><br/><br/><p>Next, we create a SoapExtensionAttribute that will perform the fix.  It seems that the problem was that .NET wasn't following the multiref id to the element containing the double value.  So, we process the array item, go find the value, and then insert it the value into the element:</p><br/><br/><pre><code>[AttributeUsage(AttributeTargets.Method)]<br/>public class LongArrayHelperAttribute : SoapExtensionAttribute<br/>{<br/>    private int priority = 0;<br/><br/>    public override Type ExtensionType<br/>    {<br/>        get { return typeof (LongArrayHelper); }<br/>    }<br/><br/>    public override int Priority<br/>    {<br/>        get { return priority; }<br/>        set { priority = value; }<br/>    }<br/>}<br/><br/>public class LongArrayHelper : SoapExtension<br/>{<br/>    private static ILog log = LogManager.GetLogger(typeof (LongArrayHelper));<br/><br/>    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)<br/>    {<br/>        return null;<br/>    }<br/><br/>    public override object GetInitializer(Type serviceType)<br/>    {<br/>        return null;<br/>    }<br/><br/>    public override void Initialize(object initializer)<br/>    {<br/>    }<br/><br/>    private Stream originalStream;<br/><br/>    private Stream newStream;<br/><br/>    public override void ProcessMessage(SoapMessage m)<br/>    {<br/>        switch (m.Stage)<br/>        {<br/>            case SoapMessageStage.AfterSerialize:<br/>                newStream.Position = 0; //need to reset stream <br/>                CopyStream(newStream, originalStream);<br/>                break;<br/><br/>            case SoapMessageStage.BeforeDeserialize:<br/>                XmlWriterSettings settings = new XmlWriterSettings();<br/>                settings.Indent = false;<br/>                settings.NewLineOnAttributes = false;<br/>                settings.NewLineHandling = NewLineHandling.None;<br/>                settings.NewLineChars = "";<br/>                XmlWriter writer = XmlWriter.Create(newStream, settings);<br/><br/>                XmlDocument xmlDocument = new XmlDocument();<br/>                xmlDocument.Load(originalStream);<br/><br/>                List&lt;XmlElement&gt; longArrayItems = new List&lt;XmlElement&gt;();<br/>                Dictionary&lt;string, XmlElement&gt; multiRefs = new Dictionary&lt;string, XmlElement&gt;();<br/>                FindImportantNodes(xmlDocument.DocumentElement, longArrayItems, multiRefs);<br/>                FixLongArrays(longArrayItems, multiRefs);<br/><br/>                xmlDocument.Save(writer);<br/>                newStream.Position = 0;<br/>                break;<br/>        }<br/>    }<br/><br/>    private static void FindImportantNodes(XmlElement element, List&lt;XmlElement&gt; longArrayItems,<br/>                                           Dictionary&lt;string, XmlElement&gt; multiRefs)<br/>    {<br/>        string val = element.GetAttribute("soapenc:arrayType");<br/>        if (val != null &amp;&amp; val.Contains(":long["))<br/>        {<br/>            longArrayItems.Add(element);<br/>        }<br/>        if (element.Name == "multiRef")<br/>        {<br/>            multiRefs[element.GetAttribute("id")] = element;<br/>        }<br/>        foreach (XmlNode node in element.ChildNodes)<br/>        {<br/>            XmlElement child = node as XmlElement;<br/>            if (child != null)<br/>            {<br/>                FindImportantNodes(child, longArrayItems, multiRefs);<br/>            }<br/>        }<br/>    }<br/><br/>    private static void FixLongArrays(List&lt;XmlElement&gt; longArrayItems, Dictionary&lt;string, XmlElement&gt; multiRefs)<br/>    {<br/>        foreach (XmlElement element in longArrayItems)<br/>        {<br/>            foreach (XmlNode node in element.ChildNodes)<br/>            {<br/>                XmlElement child = node as XmlElement;<br/>                if (child != null)<br/>                {<br/>                    string href = child.GetAttribute("href");<br/>                    if (href == null || href.Length == 0)<br/>                    {<br/>                        continue;<br/>                    }<br/>                    if (href.StartsWith("#"))<br/>                    {<br/>                        href = href.Remove(0, 1);<br/>                    }<br/>                    XmlElement multiRef = multiRefs[href];<br/>                    if (multiRef == null)<br/>                    {<br/>                        continue;<br/>                    }<br/>                    child.RemoveAttribute("href");<br/>                    child.InnerXml = multiRef.InnerXml;<br/>                    if (log.IsDebugEnabled)<br/>                    {<br/>                        log.Debug("Replaced multiRef id '" + href + "' with value: " + multiRef.InnerXml);<br/>                    }<br/>                }<br/>            }<br/>        }<br/>    }<br/><br/>    public override Stream ChainStream(Stream s)<br/>    {<br/>        originalStream = s;<br/>        newStream = new MemoryStream();<br/>        return newStream;<br/>    }<br/><br/>    private static void CopyStream(Stream from, Stream to)<br/>    {<br/>        TextReader reader = new StreamReader(from);<br/>        TextWriter writer = new StreamWriter(to);<br/>        writer.WriteLine(reader.ReadToEnd());<br/>        writer.Flush();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Finally, we tag all methods in the Reference.cs file that will be deserializing a long array with our attribute:</p><br/><br/><pre><code>    [SoapRpcMethod("", RequestNamespace="http://some.service.provider",<br/>        ResponseNamespace="http://some.service.provider")]<br/>    [return : SoapElement("getFooReturn")]<br/>    [LongArrayHelper]<br/>    public Foo getFoo()<br/>    {<br/>        object[] results = Invoke("getFoo", new object[0]);<br/>        return ((Foo) (results[0]));<br/>    }<br/></code></pre><br/><br/><p>This fix is long-specific, but it could probably be generalized to handle any primitive type having this problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPULAR IS THE SEAM FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>In our <a href="http://www.lunatech-research.com/archives/2007/12/14/javapolis-2007-seam" rel="nofollow">JBoss Seam in Action presentation</a> at the Javapolis conference last year, my colleague and I said that 'Seam is the next Struts'. This needed some explanation, which I later wrote-up as <a href="http://www.lunatech-research.com/archives/2008/03/17/seam-is-the-new-struts" rel="nofollow">Seam is the new Struts</a>. Needless to say, we like Seam.</p><br/><br/><p>One indication of Seam's popularity is the level of traffic on the <a href="http://www.seamframework.org/Community/SeamUsers" rel="nofollow">Seam Users Forum</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAVEN TO USE THE LATEST VERSION OF A DEPEND
    </pattern>
    <template>
<![CDATA[<p>Please take a look at <a href="http://docs.codehaus.org/display/MAVEN/Dependency+Mediation+and+Conflict+Resolution#DependencyMediationandConflictResolution-DependencyVersionRanges" rel="nofollow">this page</a> (section "Dependency Version Ranges"). What you might want to do is something like </p><br/><br/><pre><code>&lt;version&gt;[1.2.3,)&lt;/version&gt;<br/></code></pre><br/><br/><p>HTH</p><br/><br/><p><strong>Edit:</strong> Just saw the note that the ideas expressed in the linked document may not be implemented yet...</p><br/><br/><p><strong>Edit 2:</strong> The version ranges are implemented in Maven2.</p><br/><br/><p><strong>PLEASE NOTE:</strong> @AndersSandvig Please consider changing the accepted answer to a different one than mine. By now, I'd suggest to go for the versions plugin, see <a href="http://stackoverflow.com/a/1172805/1793">Tim's answer</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE JAVA TO HANDL VARIOU XML DOCUMENT
    </pattern>
    <template>
<![CDATA[<p>As I understand it, the problem is that you don't know what format the document is prior to parsing. You could use a delegate pattern. I'm assuming you're not validating against a DTD/XSD/etcetera and that it is OK for the DefaultHandler to have state.</p><br/><br/><pre><code>public class DelegatingHandler extends DefaultHandler {<br/><br/>    private Map&lt;String, DefaultHandler&gt; saxHandlers;<br/>    private DefaultHandler delegate = null;<br/><br/>    public DelegatingHandler(Map&lt;String, DefaultHandler&gt; delegates) {<br/>        saxHandlers = delegates;<br/>    }<br/><br/>    @Override<br/>    public void startElement(String uri, String localName, String name,<br/>            Attributes attributes) throws SAXException {<br/>       if(delegate == null) {<br/>           delegate = saxHandlers.get(name);<br/>       }<br/>       delegate.startElement(uri, localName, name, attributes);<br/>    }<br/><br/>    @Override<br/>    public void endElement(String uri, String localName, String name)<br/>            throws SAXException {<br/>        delegate.endElement(uri, localName, name);<br/>    }<br/><br/>//etcetera...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SWING DISPLAY IMAG FROM WITHIN A JAR
    </pattern>
    <template>
<![CDATA[<p>To create an <code>ImageIcon</code> from an image file within the same jars your code is loaded:</p><br/><br/><pre><code>new javax.swing.ImageIcon(getClass().getResource("myimage.jpeg")<br/></code></pre><br/><br/><p><code>Class.getResource</code> returns a URL of a resource (or <code>null</code>!). <code>ImageIcon</code> has a constructors that load from a URL.</p><br/><br/><p>To construct a URL for a resource in a jar not on your "classpath", see the documentation for <code>java.net.JarURLConnection</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A REFER TO THE ENCLOS CLASS FROM AN ANONYM INNER CLASS IN JAVA
    </pattern>
    <template>
<![CDATA[<p>I just found this recently. Use <code>OuterClassName.this</code>.</p><br/><br/><pre><code>class Outer {<br/>    void foo() {<br/>        new Thread() {<br/>            public void run() {<br/>                Outer.this.bar();<br/>            }<br/>        }.start();<br/>    }<br/>    void bar() {<br/>        System.out.println("BAR!");<br/>    }<br/>}<br/></code></pre><br/><br/><p><strong>Updated</strong> If you just want the object itself (instead of invoking members), then <code>Outer.this</code> is the way to go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REASON TO USE BUFFEREDREAD OVER INPUTSTREAMREAD WHEN READ ALL CHARACT
    </pattern>
    <template>
<![CDATA[<p>In this case, I would do as you are doing (use a byte array for buffering and not one of the stream buffers).</p><br/><br/><p>There are exceptions, though. One place you see buffers (output this time) is in the servlet API. Data isn't written to the underlying stream until <em>flush()</em> is called, allowing you to buffer output but then dump the buffer if an error occurs and write an error page instead. You might buffer input if you needed to reset the stream for rereading using <em>mark(int)</em> and <em>reset()</em>. For example, maybe you'd inspect the file header before deciding on which content handler to pass the stream to.</p><br/><br/><p>Unrelated, but I think you should rewrite your stream handling. This pattern works best to avoid resource leaks:</p><br/><br/><pre><code>    InputStream stream = new FileInputStream("in");<br/>    try { //no operations between open stream and try block<br/>        //work<br/>    } finally { //do nothing but close this one stream in the finally<br/>        stream.close();<br/>    }<br/></code></pre><br/><br/><p>If you are opening multiple streams, nest try/finally blocks.</p><br/><br/><p>Another thing your code is doing is making the assumption that the returned content is encoded in your VM's default character set (though that might be adequate, depending on the use case).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMAT WAY TO DETERMIN CURRENT WINDOW USER
    </pattern>
    <template>
<![CDATA[<p>You're actually really close. This is what you're looking for:</p><br/><br/><pre><code>System.getProperty("user.name")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO FIND A VALU IN HTML ( JAVA )
    </pattern>
    <template>
<![CDATA[<p>Depends on how sophisticated of an Http request you need to build (authentication, etc). Here's one simple way I've seen used in the past. </p><br/><br/><pre><code>StringBuilder html = new StringBuilder();<br/>java.net.URL url = new URL("http://www.google.com/");<br/>BufferedReader input = null;<br/>try {<br/>    input new BufferedReader(<br/>        new InputStreamReader(url.openStream()));<br/><br/>    String htmlLine;<br/>    while ((htmlLine=input.readLine())!=null) {<br/>        html.appendLine(htmlLine);<br/>    }<br/>}<br/>finally {<br/>    input.close();<br/>}<br/><br/>Pattern exp = Pattern.compile(<br/>    "&lt;meta name=\"generator\" value=\"([^\"]*)\" /&gt;");<br/>Matcher matcher = exp.matcher(html.toString());<br/>if(matcher.find())<br/>{<br/>    System.out.println("Generator: "+matcher.group(1));<br/>}<br/></code></pre><br/><br/><p><em>Probably plenty of typos here to be found when compiled.<br/>(hope this wasn't homework)</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETACH AN ENTITI FROM JPA EJB3 PERSIST CONTEXT
    </pattern>
    <template>
<![CDATA[<p>Unfortunately, there's no way to disconnect one object from the entity manager in the current JPA implementation, AFAIR.</p><br/><br/><p>EntityManager.clear() will disconnect <em>all</em> the JPA objects, so that might not be an appropriate solution in all the cases, if you have other objects you do plan to keep connected.</p><br/><br/><p>So your best bet would be to clone the objects and pass the clones to the code that changes the objects. Since primitive and immutable object fields are taken care of by the default cloning mechanism in a proper way, you won't have to write a lot of plumbing code (apart from deep cloning any aggregated structures you might have).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML IN JAVA
    </pattern>
    <template>
<![CDATA[<p>I'm currently using this:</p><br/><br/><pre><code>String content = null;<br/>URLConnection connection = null;<br/>try {<br/>  connection =  new URL("http://www.google.com").openConnection();<br/>  Scanner scanner = new Scanner(connection.getInputStream());<br/>  scanner.useDelimiter("\\Z");<br/>  content = scanner.next();<br/>}catch ( Exception ex ) {<br/>    ex.printStackTrace();<br/>}<br/>System.out.println(content);<br/></code></pre><br/><br/><p>But not sure if there's a better way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA AND RETURN SELF REFER IN SETTER METHOD
    </pattern>
    <template>
<![CDATA[<p>@pek<br/><br/>Chained invocation is one of proposals for Java 7. It says that if a method return type is void, it should implicitly return <strong>this</strong>. If you're interested in this topic, there is a bunch of links and a simple example on <a href="http://tech.puredanger.com/java7#chained" rel="nofollow">Alex Miller's Java 7 page</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER IN C # AND JAVA... AND TEMPLAT IN C + +
    </pattern>
    <template>
<![CDATA[<p>I'll add my voice to the noise and take a stab at making things clear:</p><br/><br/><h2>C# Generics allow you to declare something like this.</h2><br/><br/><pre><code>List&lt;Person&gt; foo = new List&lt;Person&gt;();<br/></code></pre><br/><br/><p>and then the compiler will prevent you from putting things that aren't <code>Person</code> into the list.<br><br/>Behind the scenes the C# compiler is just putting <code>List&lt;Person&gt;</code> into the .NET dll file, but at runtime the JIT compiler  goes and builds a new set of code, as if you had written a special list class just for containing people - something like <code>ListOfPerson</code>.</p><br/><br/><p>The benefit of this is that it makes it really fast. There's no casting or any other stuff, and because the dll contains the information that this is a List of <code>Person</code>, other code that looks at it later on using reflection can tell that it contains <code>Person</code> objects (so you get intellisense and so on).</p><br/><br/><p>The downside of this is that old C# 1.0 and 1.1 code (before they added generics) doesn't understand these new <code>List&lt;something&gt;</code>, so you have to manually convert things back to plain old <code>List</code> to interoperate with them. This is not that big of a problem, because C# 2.0 binary code is not backwards compatible. The only time this will ever happen is if you're upgrading some old C# 1.0/1.1 code to C# 2.0</p><br/><br/><h2>Java Generics allow you to declare something like this.</h2><br/><br/><pre><code>ArrayList&lt;Person&gt; foo = new ArrayList&lt;Person&gt;();<br/></code></pre><br/><br/><p>On the surface it looks the same, and it sort-of is. The compiler will also prevent you from putting things that aren't <code>Person</code> into the list.</p><br/><br/><p>The difference is what happens behind the scenes. Unlike C#, Java does not go and build a special <code>ListOfPerson</code> - it just uses the plain old <code>ArrayList</code> which has always been in Java. When you get things out of the array, the usual <code>Person p = (Person)foo.get(1);</code> casting-dance still has to be done. The compiler is saving you the key-presses, but the speed hit/casting is still incurred just like it always was.<br><br/>When people mention "Type Erasure" this is what they're talking about. The compiler inserts the casts for you, and then 'erases' the fact that it's meant to be a list of <code>Person</code> not just <code>Object</code></p><br/><br/><p>The benefit of this approach is that old code which doesn't understand generics doesn't have to care. It's still dealing with the same old <code>ArrayList</code> as it always has. This is more important in the java world because they wanted to support compiling code using Java 5 with generics, and having it run on old 1.4 or previous JVM's, which microsoft deliberately decided not to bother with.</p><br/><br/><p>The downside is the speed hit I mentioned previously, and also because there is no <code>ListOfPerson</code> pseudo-class or anything like that going into the .class files, code that looks at it later on (with reflection, or if you pull it out of another collection where it's been converted into <code>Object</code> or so on) can't tell in any way that it's meant to be a list containing only <code>Person</code> and not just any other array list.</p><br/><br/><h2>C++ Templates allow you to declare something like this</h2><br/><br/><pre><code>std::list&lt;Person&gt;* foo = new std::list&lt;Person&gt;();<br/></code></pre><br/><br/><p>It looks like C# and Java generics, and it will do what you think it should do, but behind the scenes different things are happening.</p><br/><br/><p>It has the most in common with C# generics in that it builds special <code>pseudo-classes</code> rather than just throwing the type information away like java does, but it's a whole different kettle of fish.</p><br/><br/><p>Both C# and Java produce output which is designed for virtual machines. If you write some code which has a <code>Person</code> class in it, in both cases some information about a <code>Person</code> class will go into the .dll or .class file, and the JVM/CLR will do stuff with this.</p><br/><br/><p>C++ produces raw x86 binary code. Everything is <em>not</em> an object, and there's no underlying virtual machine which needs to know about a <code>Person</code> class. There's no boxing or unboxing, and functions don't have to belong to classes, or indeed anything. </p><br/><br/><p>Because of this, the C++ compiler places no restrictions on what you can do with templates - basically any code you could write manually, you can get templates to write for you.<br><br/>The most obvious example is adding things:</p><br/><br/><p>In C# and Java, the generics system needs to know what methods are available for a class, and it needs to pass this down to the virtual machine. The only way to tell it this is by either hard-coding the actual class in, or using interfaces. For example:</p><br/><br/><pre><code>int addNames&lt;T&gt;( T first, T second ) { return first.Name() + second.Name(); }<br/></code></pre><br/><br/><p>That code won't compile in C# or Java, because it doesn't know that the type <code>T</code> actually provides a method called Name(). You have to tell it - in C# like this:</p><br/><br/><pre><code>interface IHasName{ string Name(); };<br/>int addNames&lt;T&gt;( T first, T second ) where T : IHasName { .... }<br/></code></pre><br/><br/><p>And then you have to make sure the things you pass to addNames implement the IHasName interface and so on. The java syntax is different (<code>&lt;T extends IHasName&gt;</code>), but it suffers from the same problems.</p><br/><br/><p>The 'classic' case for this problem is trying to write a function which does this</p><br/><br/><pre><code>int addNames&lt;T&gt;( T first, T second ) { return first + second; }<br/></code></pre><br/><br/><p>You can't actually write this code because there are no ways to declare an interface with the <code>+</code> method in it. You fail.</p><br/><br/><p>C++ suffers from none of these problems. The compiler doesn't care about passing types down to any VM's - if both your objects have a .Name() function, it will compile. If they don't, it won't. Simple.</p><br/><br/><p>So, there you have it :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRACTIC FOR JSF
    </pattern>
    <template>
<![CDATA[<p>Some tips:<br/>Understand the JSF request <a href="http://www.java-samples.com/showtutorial.php?tutorialid=470" rel="nofollow">lifecycle</a> and where your various pieces of code fit in it. Especially find out why your model values will not be updated if there are validation errors.</p><br/><br/><p>Choose a tag library and then stick with it. Take your time to determine your needs and prototype different libraries. Mixing different taglibs may cause severe harm to your mental health.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      T JAVA TIMER
    </pattern>
    <template>
<![CDATA[<p>According to the <a href="http://java.sun.com/javase/6/docs/api/java/util/Timer.html" rel="nofollow"><code>Timer</code></a> documentation, in Java 1.5 onwards, you should prefer the <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html" rel="nofollow"><code>ScheduledThreadPoolExecutor</code></a> instead. (You may like to create this executor using <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/Executors.html" rel="nofollow"><code>Executors</code></a><code>.newSingleThreadScheduledExecutor()</code> for ease of use; it creates something much like a <code>Timer</code>.)</p><br/><br/><p>The cool thing is, when you schedule a task (by calling <code>schedule()</code>), it returns a <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledFuture.html" rel="nofollow"><code>ScheduledFuture</code></a> object. You can use this to cancel the scheduled task. You're then free to submit a new task with a different triggering time.</p><br/><br/><p>ETA: The <code>Timer</code> documentation linked to doesn't say anything about <code>ScheduledThreadPoolExecutor</code>, however the <a href="http://openjdk.java.net/" rel="nofollow">OpenJDK</a> version had this to say:</p><br/><br/><blockquote><br/>  <p>Java 5.0 introduced the <code>java.util.concurrent</code> package and<br/>  one of the concurrency utilities therein is the <br/>  <code>ScheduledThreadPoolExecutor</code> which is a thread pool for repeatedly<br/>  executing tasks at a given rate or delay.  It is effectively a more<br/>  versatile replacement for the <code>Timer</code>/<code>TimerTask</code><br/>  combination, as it allows multiple service threads, accepts various<br/>  time units, and doesn't require subclassing <code>TimerTask</code> (just<br/>  implement <code>Runnable</code>).  Configuring<br/>  <code>ScheduledThreadPoolExecutor</code> with one thread makes it equivalent to<br/>  <code>Timer</code>.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEBUG STATEMENT FROM PRODUCT CODE IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Two recommendations.</p><br/><br/><p><strong>First:</strong><br/>for real logging, use a modern logging package like log4j or java's own built in logging. Don't worry about performance so much, the logging level check is on the order of nanoseconds. (it's an integer comparison).</p><br/><br/><p>And if you have more than a single log statement, guard the whole block:</p><br/><br/><p>(log4j, for example:)</p><br/><br/><pre><code>if (logger.isDebugEnabled()) {<br/><br/>  // perform expensive operations<br/>  // build string to log<br/><br/>  logger.debug("....");<br/>}<br/></code></pre><br/><br/><p>This gives you the added ability control logging at runtime. Having to restart and run a debug build can be very inconvenient.</p><br/><br/><p><strong>Second:</strong></p><br/><br/><p>You may find <a href="http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html" rel="nofollow">assertions</a> are more what you need. An assertion is a statement which evaluates to a boolean result, with an optional message:</p><br/><br/><pre><code> assert (sky.state != FALLING) : "The sky is falling!";<br/></code></pre><br/><br/><p>Whenever the assertion results in a false, the assertion fails and an AssertionError is thrown containing your message (this is an unchecked exception, intended to exit the application). </p><br/><br/><p>The neat thing is, these are treated special by the JVM and can toggled at runtime down to the class level, using a VM parameter (no recompile needed). If not enabled, there is zero overhead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NULL TO A METHOD
    </pattern>
    <template>
<![CDATA[<p>Both the use of assertions and the throwing of exceptions are valid approaches here.  Either mechanism can be used to indicate a programming error, not a runtime error, as is the case here.</p><br/><br/><ul><br/><li>Assertions have the advantage of performance as they are typically disabled on production systems.  </li><br/><li>Exceptions have the advantage of safety, as the check is always performed.  </li><br/></ul><br/><br/><p>The choice really depends on the development practices of the project.  The project as a whole needs to decide on an assertion policy: if the choice is to enable assertions during all development, then I'd say to use assertions to check this kind of invalid parameter - in a production system, a NullPointerException thrown due to a programming error is unlikely to be able to be caught and handled in a meaningful way anyway and so will act just like an assertion.</p><br/><br/><p>Practically though, I know a lot of developers that don't trust that assertions will be enabled when appropriate and so opt for the safety of throwing a NullPointerException.</p><br/><br/><p>Of course if you can't enforce a policy for your code (if you're creating a library, for example, and so are dependent on how other developers run your code), you should opt for the safe approach of throwing NullPointerException for those methods that are part of the library's API.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN JSCROLLPAN PAINT OUTSID THE VIEWPORT
    </pattern>
    <template>
<![CDATA[<p>Have you tried explicitly enabling double-buffering on the JList and/or the components that it is drawing over? (with:<code>setDoubleBuffered(boolean aFlag)</code>)</p><br/><br/><p>Another thought is that you <em>might</em> need to exit the function immediately after delegating to the EDT.  The way your code is written, it looks like the update will happen in both threads if <code>ContentChanged</code> is invoked from a non-EDT thread.  Logging in the first <code>if</code> (or set a breakpoint in the if -- but <em>not</em> in the runnable -- should help determine if that is your problem.</p><br/><br/><p>eg:</p><br/><br/><pre><code>public void contentsChanged(final ListDataEvent evt)<br/>{<br/>    if (!EventQueue.isDispatchThread())<br/>    {<br/>        log.debug("Delegating contentsChanged(...) to EDT");<br/><br/>        EventQueue.invokeLater(new Runnable() <br/>        {<br/>            public void run() <br/>            {<br/>                contentsChanged(evt);<br/>            }<br/>        });<br/>        // don't run ensureIndexIsVisible twice:<br/>        return;<br/>     }<br/><br/>     if (playbackInProgress)<br/>     {<br/>         int index = evt.getIndex0();<br/>         currentContentList.ensureIndexIsVisible(index);<br/>     }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESTRICT JFILECHOOS TO A DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>You can probably do this by setting your own <a href="http://java.sun.com/j2se/1.4.2/docs/api/javax/swing/filechooser/FileSystemView.html" rel="nofollow">FileSystemView</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISCOV A FILE S CREATION TIME WITH JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.wmcow.com/java/wfile/wfile.html" rel="nofollow">Wfile</a></p><br/><br/><p>If you're only working with windows files it looks like this may work for you.<br/>It looks like it costs 1 dollar, but that may be worth it to you.</p><br/><br/><p>The other option is to the one you already mentioned. Shell out and do a dir.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSTEM.EXIT ( 1 )
    </pattern>
    <template>
<![CDATA[<p>The use of System.exit is frowned upon when the 'application' is really a sub-application (e.g. servlet, applet) of a larger Java application (server): in this case the System.exit could stop the JVM and hence also all other sub-applications. In this situation, throwing an appropriate exception, which could be caught and handled by the application framework/server is the best option.</p><br/><br/><p>If the java application is really meant to be run as a standalone application, there is nothing wrong with using System.exit. in this case, setting an exit value is probably the easiest (and also most used) way of communicating failure or success to the parent process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA MULTI LIN COMMENT ACCOUNT FOR STRING
    </pattern>
    <template>
<![CDATA[<p>Eclipse is correct. There is no interpretation context inside a comment (no escaping, etc). See <a href="http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48125" rel="nofollow">JLS §3.7</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOAD AN ORG.W3C.DOM.DOCU FROM XML IN A STRING
    </pattern>
    <template>
<![CDATA[<p>This works for me in Java 1.5 - I stripped out specific exceptions for readability.</p><br/><br/><pre><code>import javax.xml.parsers.DocumentBuilderFactory;<br/>import javax.xml.parsers.DocumentBuilder;<br/>import org.w3c.dom.Document;<br/>import java.io.ByteArrayInputStream;<br/><br/>public Document loadXMLFromString(String xml) throws Exception<br/>{<br/>    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<br/><br/>    factory.setNamespaceAware(true);<br/>    DocumentBuilder builder = factory.newDocumentBuilder();<br/><br/>    return builder.parse(new ByteArrayInputStream(xml.getBytes()));<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR HTTPONLI COOKI IN TOMCAT JAVA WEBAPP
    </pattern>
    <template>
<![CDATA[<p>httpOnly is supported as of Tomcat 6.0.19 and Tomcat 5.5.28.</p><br/><br/><p>See the <a href="http://tomcat.apache.org/tomcat-6.0-doc/changelog.html" rel="nofollow">changelog</a> entry for bug 44382. </p><br/><br/><p>The last comment for bug <a href="https://issues.apache.org/bugzilla/show%5Fbug.cgi?id=44382" rel="nofollow">44382</a> states, "this has been applied to 5.5.x and will be included in 5.5.28 onwards." However, it does not appear that 5.5.28 has been released.</p><br/><br/><p>The httpOnly functionality can be enabled for all webapps in <strong>conf/context.xml</strong>:</p><br/><br/><pre><code>&lt;Context useHttpOnly="true"&gt;<br/>...<br/>&lt;/Context&gt;<br/></code></pre><br/><br/><p>My interpretation is that it also works for an individual context by setting it on the desired <strong><em>Context</em></strong> entry in <strong>conf/server.xml</strong> (in the same manner as above).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HIBERN TO WORK WITH TEXT FILE
    </pattern>
    <template>
<![CDATA[<p>Hibernate is written against the JDBC API. So, you need a JDBC driver that works with the file format you are interested in. Obviously, even for read-only access, this isn't going to perform well, but it might still be useful if that's not a high priority. On a Windows system, you can set up ODBC datasources for delimited text files, Excel files, etc. Then you can set up the JdbcOdbcDriver in your Java application to use this data source.</p><br/><br/><p>For most of the applications I work on, I would not consider this approach; I would use an import/export mechanism to convert from a real database (even if it's an in-process database like Berkeley DB or Derby) to the text files. Yes, it's an extra step, but it could be automated, and the performance isn't likely to be much worse than trying to use the text files directly (it will likely be much better, overall), and it will be more robust and easy to develop.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIFECYCL AND CUSTOM COMPON
    </pattern>
    <template>
<![CDATA[<p>There is a pretty good diagram in the <a href="http://java.sun.com/javaee/javaserverfaces/download.html" rel="nofollow">JSF specification</a> that shows the request lifecycle - essential for understanding this stuff.</p><br/><br/><p>The steps are:</p><br/><br/><ul><br/><li><strong>Restore View</strong>. The UIComponent tree is rebuilt.</li><br/><li><strong>Apply Request Values</strong>. Editable components should implement EditableValueHolder. This phase walks the component tree and calls the <em>processDecodes</em> methods. If the component isn't something complex like a UIData, it won't do much except call its own <em>decode</em> method. The <em>decode</em> method doesn't do much except find its renderer and invokes its <em>decode</em> method, passing itself as an argument. It is the renderer's job to get any submitted value and set it via <em>setSubmittedValue</em>.</li><br/><li><strong>Process Validations</strong>. This phase calls <em>processValidators</em> which will call <em>validate</em>. The <em>validate</em> method takes the submitted value, converts it with any converters, validates it with any validators and (assuming the data passes those tests) calls <em>setValue</em>. This will store the value as a local variable. While this local variable is not null, it will be returned and not the value from the value binding for any calls to <em>getValue</em>.</li><br/><li><strong>Update Model Values</strong>. This phase calls <em>processUpdates</em>. In an input component, this will call <em>updateModel</em> which will get the <em>ValueExpression</em> and invoke it to set the value on the model.</li><br/><li><strong>Invoke Application</strong>. Button event listeners and so on will be invoked here (as will navigation if memory serves).</li><br/><li><strong>Render Response</strong>. The tree is rendered via the renderers and the state saved.</li><br/><li>If any of these phases fail (e.g. a value is invalid), the lifecycle skips to Render Response.</li><br/><li>Various events can be fired after most of these phases, invoking listeners as appropriate (like value change listeners after Process Validations).</li><br/></ul><br/><br/><p>This is a somewhat simplified version of events. Refer to the specification for more details.</p><br/><br/><p>I would question why you are writing your own UIComponent. This is a non-trivial task and a deep understanding of the JSF architecture is required to get it right. If you need a custom control, it is better to create a concrete control that extends an exisiting UIComponent (like HtmlInputText does) with an equivalent renderer.</p><br/><br/><p>If contamination isn't an issue, there is an open-source JSF implementation in the form of Apache MyFaces.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOV FROM AN UNCHECK EXCEPT
    </pattern>
    <template>
<![CDATA[<p>IMO, wrapping exceptions (checked or otherwise) has several benefits that are worth the cost:</p><br/><br/><p>1) It encourages you to think about the failure modes for the code you write. Basically, you have to consider the exceptions that the code you call may throw, and in turn you'll consider the exceptions you'll throw for the code that calls yours.</p><br/><br/><p>2) It gives you the opportunity to add additional debugging information into the exception chain. For instance, if you have a method that throws an exception on a duplicate username, you might wrap that exception with one that includes additional information about the circumstances of the failure (for example, the IP of the request that provided the dupe username) that wasn't available to the lower-level code. The cookie trail of exceptions may help you debug a complex problem (it certainly has for me).</p><br/><br/><p>3) It lets you become implementation-independent from the lower level code. If you're wrapping exceptions and need to swap out Hibernate for some other ORM, you only have to change your Hibernate-handling code. All the other layers of code will still be successfully using the wrapped exceptions and will interpret them in the same way, even though the underlying circumstances have changed. Note that this applies even if Hibernate changes in some way (ex: they switch exceptions in a new version); it's not just for wholesale technology replacement.</p><br/><br/><p>4) It encourages you use different classes of exceptions to represent different situations. For example, you may have a DuplicateUsernameException when the user tries to reuse a username, and a DatabaseFailureException when you can't check for dupe usernames due to a broken DB connection. This, in turn, lets you answer your question ("how do I recover?") in flexible and powerful ways. If you get a DuplicateUsernameException, you may decide to suggest a different username to the user. If you get a DatabaseFailureException, you may let it bubble up to the point where it displays a "down for maintenance" page to the user and send off a notification email to you. Once you have custom exceptions, you have customizeable responses -- and that's a good thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( JAVA SW ) MOUSELISTEN IS N T LISTEN HELP ME FIGUR OUT WHI
    </pattern>
    <template>
<![CDATA[<p>The <em>implements mouselistener, mousemotionlistener</em> just allows the displayArea class to listen to some, to be defined, Swing component's mouse events. You have to explicitly define what it should be listening at. So I suppose you could add something like this to the constructor:</p><br/><br/><pre><code>this.addMouseListener(this);<br/>this.addMouseMotionListener(this);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIME TYPE TO .HTACCESS
    </pattern>
    <template>
<![CDATA[<pre><code>AddType application/x-java-jnlp-file .jnlp<br/></code></pre><br/><br/><p>Note that you might not actually be allowed to do that.</p><br/><br/><p>See also the <a href="http://HTTPd.Apache.Org/docs/trunk/mod/mod_mime.html#addtype" rel="nofollow" title="mod_mime - AddType">documentation of the AddType directive</a> and the <a href="http://HTTPd.Apache.Org/docs/trunk/howto/htaccess.html" rel="nofollow" title=".htaccess howto">.htaccess howto</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETECT IF A FUNCTION IS AVAIL DURE JNLP EXECUT
    </pattern>
    <template>
<![CDATA[<p>You want to ask to the <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/SecurityManager.html" rel="nofollow">SecurityManager</a> if you have Exec right with the checkExec method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ICALENDAR LIBRARI FOR JAVA
    </pattern>
    <template>
<![CDATA[<p>I had limited success with <a href="http://ical4j.sourceforge.net/" rel="nofollow">iCal4j</a> on a project last year.</p><br/><br/><p>It seems to be a fairly popular choice for ical work in the java community. </p><br/><br/><p>If I remember correctly the API can be slightly confusing at first glance.<br/>However It's pretty solid in the long run.</p><br/><br/><p>Good luck, <br/>Brian </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE ETHERNET ADDRESS USE JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://java.sun.com/javase/6/docs/api/java/net/NetworkInterface.html#getHardwareAddress%28%29" rel="nofollow" rel="nofollow"> java.net.NetworkInterface.getHardwareAddress</a> (method added in Java 6)</p><br/><br/><p>It has to be called on the machine you are interested in - the MAC is not transferred across network boundaries (i.e. LAN and WAN). If you want to make use of it on a website server to interrogate the clients, you'd have to run an applet that would report the result back to you.</p><br/><br/><p>For Java 5 and older I found code <a href="http://forums.sun.com/thread.jspa?messageID=3424868#4204392" rel="nofollow" rel="nofollow">parsing output of command line tools on various systems</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAVEN 2 HOW DO I KNOW FROM WHICH DEPEND COME A TRANSIT DEPEND
    </pattern>
    <template>
<![CDATA[<p>To add to @<a href="#34156" rel="nofollow">David Crow</a>, here's <a href="http://maven.apache.org/plugins/maven-dependency-plugin/examples/filtering-the-dependency-tree.html" rel="nofollow">a dependency:tree example</a> from the Maven site:</p><br/><br/><pre><code>mvn dependency:tree -Dincludes=velocity:velocity<br/></code></pre><br/><br/><p>might output</p><br/><br/><pre><code>[INFO] [dependency:tree]<br/>[INFO] org.apache.maven.plugins:maven-dependency-plugin:maven-plugin:2.0-alpha-5-SNAPSHOT<br/>[INFO] \- org.apache.maven.doxia:doxia-site-renderer:jar:1.0-alpha-8:compile<br/>[INFO]    \- org.codehaus.plexus:plexus-velocity:jar:1.1.3:compile<br/>[INFO]       \- velocity:velocity:jar:1.4:compile<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A NOCLASSDEFFOUNDERROR IN JAVA
    </pattern>
    <template>
<![CDATA[<p>This is caused when there is a class file that your code depends on and it is present at compile time but not found at runtime. Look for differences in your build time and runtime  classpaths. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROPER WAY TO TEST A CLASS WITH PRIVAT METHOD USE JUNIT
    </pattern>
    <template>
<![CDATA[<p>If you have somewhat of a legacy application and you're not allowed to change the visibility of your methods, best way to test private methods is to use Reflection. Internally we're using helpers to get/set <code>private</code> and <code>private static</code> variables as well as invoke <code>private</code> and <code>private static</code> methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course you can't change <code>private static final</code> variables through Reflection.</p><br/><br/><pre><code>Method method = targetClass.getDeclaredMethod(methodName, argClasses);<br/>method.setAccessible(true);<br/>return method.invoke(targetObject, argObjects);<br/></code></pre><br/><br/><p>And for fields:</p><br/><br/><pre><code>Field field = targetClass.getDeclaredField(fieldName);<br/>field.setAccessible(true);<br/>field.set(object, value);<br/></code></pre><br/><br/><p>Notes:<br /><br/>*  <code>targetClass.getDeclaredMethod(methodName, argClasses)</code> lets you look into <code>private</code> methods. Same thing applies for <code>getDeclaredField</code>.<br /><br/>*  The <code>setAccessible(true)</code> is required to play around with privates.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECUR WITH JAVA AND HIBERN
    </pattern>
    <template>
<![CDATA[<p>Hibernate has a <a href="http://in.relation.to/Bloggers/Hibernate3Filters" rel="nofollow">filter mechanism</a> that may work for you.  The filters will rewrite the queries hibernate generates to include an additional clause to limit the rows returned.  I'm not aware of anything in hibernate to mask/hide columns.</p><br/><br/><p>Your database may also have support for this functionality.  Oracle, for example, has the <a href="http://www.devshed.com/c/a/Oracle/RowLevel-Security-with-Virtual-Private-Database/" rel="nofollow">Virtual Private Database</a> (VPD) which will rewrite your queries at the database level.  This solution has the added benefit that any external program (e.g. reporting tools) that goes against your db will have your security restrictions enforced.  VPD also has support to mask restricted columns with NULLs.</p><br/><br/><p>Unfortunately, the above solutions have not been adequate to support the security requirements for the types projects I typically work on.  There is usually some sort of context that cannot be easily expressed in the above solutions.  For example, users can view data that they have created, or that have been been marked as public, or belong to a project which they manage.</p><br/><br/><p>We typically create query/finder/DAO objects where we pass in the values required to enforce the security and then create the query accordingly.</p><br/><br/><p>I hope this helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A THING DONE COUNT IN A RECURS ALGORITHM IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Since you've already discovered the pseudo-mutable integer "hack," how about this option:</p><br/><br/><p>Does it make sense for you to make a separate Parser class?  If you do this, you can store the current state in a member variable.  You probably need to think about how you're going to handle any thread safety issues, and it might be overkill for this particular application, but it might work for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # HAVE A WAY OF GIVE ME AN IMMUT DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>No, but a wrapper is rather trivial:</p><br/><br/><pre><code>public class ReadOnlyDictionary&lt;TKey, TValue&gt; : IDictionary&lt;TKey, TValue&gt;<br/>{<br/>    IDictionary&lt;TKey, TValue&gt; _dict;<br/><br/>    public ReadOnlyDictionary(IDictionary&lt;TKey, TValue&gt; backingDict)<br/>    {<br/>        _dict = backingDict;<br/>    }<br/><br/>    public void Add(TKey key, TValue value)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool ContainsKey(TKey key)<br/>    {<br/>        return _dict.ContainsKey(key);<br/>    }<br/><br/>    public ICollection&lt;TKey&gt; Keys<br/>    {<br/>        get { return _dict.Keys; }<br/>    }<br/><br/>    public bool Remove(TKey key)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool TryGetValue(TKey key, out TValue value)<br/>    {<br/>        return _dict.TryGetValue(key, out value);<br/>    }<br/><br/>    public ICollection&lt;TValue&gt; Values<br/>    {<br/>        get { return _dict.Values; }<br/>    }<br/><br/>    public TValue this[TKey key]<br/>    {<br/>        get { return _dict[key]; }<br/>        set { throw new InvalidOperationException(); }<br/>    }<br/><br/>    public void Add(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public void Clear()<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool Contains(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        return _dict.Contains(item);<br/>    }<br/><br/>    public void CopyTo(KeyValuePair&lt;TKey, TValue&gt;[] array, int arrayIndex)<br/>    {<br/>        _dict.CopyTo(array, arrayIndex);<br/>    }<br/><br/>    public int Count<br/>    {<br/>        get { return _dict.Count; }<br/>    }<br/><br/>    public bool IsReadOnly<br/>    {<br/>        get { return true; }<br/>    }<br/><br/>    public bool Remove(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator()<br/>    {<br/>        return _dict.GetEnumerator();<br/>    }<br/><br/>    System.Collections.IEnumerator <br/>           System.Collections.IEnumerable.GetEnumerator()<br/>    {<br/>        return ((System.Collections.IEnumerable)_dict).GetEnumerator();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Obviously, you can change the this[] setter above if you want to allow modifying values. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SWT SCROLLEDCOMPOSIT FROM EAT PART OF IT S CHILDREN
    </pattern>
    <template>
<![CDATA[<p>This is a common hurdle when using ScrolledComposite.  When the SC is gets so small that the scroll bar must be shown, the client control has to shrink horizontally to make room for the scroll bar.  This has the side effect of making some labels wrap lines, which moved the following controls farther down, which increased the minimum height needed by the content composite.</p><br/><br/><p>You need to listen for width changes on the content composite (mParent), compute the minimum height again given the new content width, and call setMinHeight() on the scrolled composite with new height.</p><br/><br/><pre><code>public void createPartControl(Composite parent) {<br/>  parent.setLayout(new FillLayout());<br/>  ScrolledComposite scrollBox = new ScrolledComposite(parent, SWT.V_SCROLL);<br/>  scrollBox.setExpandHorizontal(true);<br/>  scrollBox.setExpandVertical(true);<br/><br/>  // Using 0 here ensures the horizontal scroll bar will never appear.  If<br/>  // you want the horizontal bar to appear at some threshold (say 100<br/>  // pixels) then send that value instead.<br/>  scrollBox.setMinWidth(0);<br/><br/>  mParent = new Composite(scrollBox, SWT.NONE);<br/><br/>  FormLayout layout = new FormLayout();<br/>  mParent.setLayout(layout);<br/><br/>  // Adds a bunch of controls here<br/><br/>  mParent.addListener(SWT.Resize, new Listener() {<br/>    int width = -1;<br/>    public void handleEvent(Event e) {<br/>      int newWidth = mParent.getSize().x;<br/>      if (newWidth != width) {<br/>        scrollBox.setMinHeight(mParent.computeSize(newWidth, SWT.DEFAULT).y);<br/>        width = newWidth;<br/>      }<br/>    }<br/>  }<br/><br/>  // Wait until here to set content pane.  This way the resize listener will<br/>  // fire when the scrolled composite first resizes mParent, which in turn<br/>  // computes the minimum height and calls setMinHeight()<br/>  scrollBox.setContent(mParent);<br/>}<br/></code></pre><br/><br/><p>In listening for size changes, note that we ignore any resize events where the width stays the same.  This is because changes in the height of the content do not affect the <i>minimum</i> height of the content, as long as the width is the same.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A NOSUCHMETHODERROR
    </pattern>
    <template>
<![CDATA[<p>Without any more information it is difficult to pinpoint the problem, but the root cause is that you most likely have compiled a class against a different version of the class that is missing a method, than the one you are using when running it.</p><br/><br/><p>Look at the stack trace ... If the exception appears when calling a method on an object in a library, you are most likely using separate versions of the library when compiling and running. Make sure you have the right version both places.</p><br/><br/><p>If the exception appears when calling a method on objects instantiated by classes <em>you</em> made, then your build process seems to be faulty. Make sure the class files that you are actually running are updated when you compile.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT FILE STRUCTUR IN A JAVA STRUT APP
    </pattern>
    <template>
<![CDATA[<p>If I understood your question about Struts config files right, they are specified in web.xml. Find the Struts servlet config param. The param-value can be a list of comma separated list of XML files to load. Eg:</p><br/><br/><pre><code>&lt;servlet&gt;<br/>    &lt;servlet-name&gt;action&lt;/servlet-name&gt;<br/>    &lt;servlet-class&gt;org.apache.struts.action.ActionServlet&lt;/servlet-class&gt;<br/>    &lt;init-param&gt;<br/>    	&lt;param-name&gt;config&lt;/param-name&gt;<br/>    	&lt;param-value&gt;<br/>    		WEB-INF/config/struts-config.xml,<br/>    		WEB-INF/config/struts-config-stuff.xml,<br/>    		WEB-INF/config/struts-config-good.xml,<br/>    		WEB-INF/config/struts-config-bad.xml,<br/>    		WEB-INF/config/struts-config-ugly.xml<br/>    	&lt;/param-value&gt;<br/>    &lt;/init-param&gt;<br/>    ...<br/>&lt;/servlet&gt;<br/></code></pre><br/><br/><p>See this <a href="http://struts.apache.org/1.x/userGuide/configuration.html" rel="nofollow">Struts guide</a> under 5.3.2. And yes, this applies to 2.x also.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL IN JAVA
    </pattern>
    <template>
<![CDATA[<p>The "Official" Java API for this is now JAXB - Java API for XML Binding. The reference implementation lives at <a href="http://jaxb.dev.java.net/">http://jaxb.dev.java.net/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ID IN JAVA
    </pattern>
    <template>
<![CDATA[<p>There exists no platform-independent way that can be guaranteed to work in all jvm implementations.<br/><code>ManagementFactory.getRuntimeMXBean().getName()</code> looks like the best (closest) solution. It's short, and <em>probably</em> works in every implementation in wide use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER TYPE IN C + + AND JAVA
    </pattern>
    <template>
<![CDATA[<p>There is a big difference between them. In C++ you don't have to specify a class or an interface for the generic type. That's why you can create truly generic functions and classes, with the caveat of a looser typing.</p><br/><br/><pre><code>&lt;typename T&gt; T sum(T a, T b) { return a + b; }<br/></code></pre><br/><br/><p>The method above adds two objects of the same type, and can be used for any type T that has the "+" operator available.</p><br/><br/><p>In Java you have to specify a type if you want to call methods on the objects passed, something like:</p><br/><br/><pre><code>&lt;T extends Something&gt; T sum(T a, T b) { return a.add ( b ); }<br/></code></pre><br/><br/><p>In C++ generic functions/classes can only be defined in headers, since the compiler generates different functions for different types (that it's invoked with). So the compilation is slower. In Java the compilation doesn't have a major penalty, but Java uses a technique called "erasure" where the generic type is erased at runtime, so at runtime Java is actually calling ...</p><br/><br/><pre><code>Something sum(Something a, Something b) { return a.add ( b ); }<br/></code></pre><br/><br/><p>So generic programming in Java is not really useful, it's only a little syntactic sugar to help with the new foreach construct.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRUCT LIKE OBJECT IN JAVA
    </pattern>
    <template>
<![CDATA[<p>This is often picked up topic. The drawback of creating public fields in objects is that you have no control over values that are set to it. And sometimes it's better to return a copy of field's object or transform it somehow etc. You can mock such methods in your tests. If you create new class you might not see all possible actions. It's like defensive programming - someday getters and setters may be helpful and it doesn't cost a lot to create/use them. So they are sometimes useful.</p><br/><br/><p>In practice most fields have simple getters and setters. That's why in Java 7 probably there will be added properties which would behave like normal fields unless you need more control over getting/setting a value to them. There's still discussion over it. One of possible solutions would look like this: </p><br/><br/><pre><code>public property String foo;   <br/>a-&gt;Foo = b-&gt;Foo;<br/></code></pre><br/><br/><p>You can read more on this on <a href="http://tech.puredanger.com/java7/#property" rel="nofollow">Alex Miller's Java 7</a> page.</p><br/><br/><p><em>Update: It's highly unlikely that property support will be added in Java 7 or perhaps ever.  Other JVM languages like Groovy, Scala, etc do support this feature now. - Alex Miller</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUAL FUNCTION IN CONSTRUCTOR WHI DO LANGUAG DIFFER
    </pattern>
    <template>
<![CDATA[<p>There's a fundamental difference in how the languages define an object's life time. In Java and .Net the object members are zero/null initialized before any constructor is run and is at this point that the object life time begins. So when you enter the constructor you've already got an initialized object.</p><br/><br/><p>In C++ the object life time only begins when the constructor finishes (although member variables and base classes are fully constructed before it starts). This explains the behaviour when virtual functions are called and also why the destructor isn't run if there's an exception in the constructor's body.</p><br/><br/><p>The problem with the Java/.Net definition of object lifetime is that it's harder to make sure the object always meets its invariant without having to put in special cases for when the object is initialized but the constructor hasn't run. The problem with the C++ definition is that you have this odd period where the object is in limbo and not fully constructed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTIFI ( ) VS. NOTIFYAL ( ) ALL OVER AGAIN
    </pattern>
    <template>
<![CDATA[<p>Simply put, it depends on why your threads are waiting to be notified. Do you want to tell one of the waiting threads that something happened, or do you want to tell all of them at the same time?</p><br/><br/><p>In some cases, all waiting threads can take useful action once the wait finishes. An example would be a set of threads waiting for a certain task to finish; once the task has finished, all waiting threads can continue with their business. In such a case you would use <b>notifyAll()</b> to wake up all waiting threads at the same time.</p><br/><br/><p>Another case, for example mutually exclusive locking, only one of the waiting threads can do something useful after being notified (in this case acquire the lock). In such a case, you would rather use <b>notify()</b>. Properly implemented, you <i>could</i> use <b>notifyAll()</b> in this situation as well, but you would unnecessarily wake threads that can't do anything anyway.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPOS A REMOT INTERFAC OR OBJECT MODEL
    </pattern>
    <template>
<![CDATA[<p>For the asynchronous bit, I would suggest checking into java.util.concurrent, and especially the Future interface. The future interface is used to represent objects which are not ready yet, but are beeing created in a seperate thread. You say that objects can be modified at any time by a third party, but I would still suggest you use immutable return objects here, and instead have a seperate thread/event log you can subscribe to to get noticed when objects expire. I have little programming with UIs, but I believe using Futures for asynchronus calls would let you have a responsive gui, rather than one that was waiting for a server reply.</p><br/><br/><p>For the queries I would suggest using method chaining to build the query object, and each object returned by method chaining should be Iterable. Similar to how Djangos model is. Say you have QuerySet which implements Iterable. You can then call allSongs() which would return a result iterating over all Songs. Or allSongs().artist("Beatles"), and you would have an iterable over all Betles songs. Or even allSongs().artist("Beatles").years(1965,1967) and so on. </p><br/><br/><p>Hope this helps as a starting place.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N APPLIC USE MULTIPL CORE OR CPU IN .NET OR JAVA
    </pattern>
    <template>
<![CDATA[<p>If you're using multiple threads, the operating system will automatically take care of using multiple cores.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSIST DATA IN A JAVA DESKTOP APPLIC
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.db4o.com" rel="nofollow">db4objects</a> might be the best choice</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE RESULT OF A FACTORI IN A UNIT TEST
    </pattern>
    <template>
<![CDATA[<p>Since I don't know how your factory method looks like, all I can advise right now is to </p><br/><br/><ol><br/><li><p>Check to see the object is the correct concrete implementation you were looking for:</p><br/><br/><pre><code>IMyInterface fromFactory = factory.create(...);  <br/>Assert.assertTrue(fromFactory instanceof MyInterfaceImpl1);<br/></code></pre></li><br/><li><p>You can check if the factory setup the concrete instances with valid instance variables.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA.LANG.OUTOFMEMORYERROR JAVA HEAP SPACE ERROR ( 64MB HEAP SIZE )
    </pattern>
    <template>
<![CDATA[<p>Ultimately you always have a finite max of heap to use no matter what platform you are running on. In Windows 32 bit this is around 2gb (not specifically heap but total amount of memory per process). It just happens that Java happens to make the default smaller (presumably so that the programmer can't create programs that have runaway memory allocation without running into this problem and having to examine exactly what they are doing).</p><br/><br/><p>So this given there are several approaches you could take to either determine what amount of memory you need or to reduce the amount of memory you are using. One common mistake with garbage collected languages such as Java or C# is to keep around references to objects that you no longer are using, or allocating many objects when you could reuse them instead. As long as objects have a reference to them they will continue to use heap space as the garbage collector will not delete them.</p><br/><br/><p>In this case you can use a Java memory profiler to determine what methods in your program are allocating large number of objects and then determine if there is a way to make sure they are no longer referenced, or to not allocate them in the first place. One option which I have used in the past is "JMP" <a href="http://www.khelekore.org/jmp/" rel="nofollow">http://www.khelekore.org/jmp/</a>.</p><br/><br/><p>If you determine that you are allocating these objects for a reason and you need to keep around references (depending on what you are doing this might be the case), you will just need to increase the max heap size when you start the program. However, once you do the memory profiling and understand how your objects are getting allocated you should have a better idea about how much memory you need. </p><br/><br/><p>In general if you can't guarantee that your program will run in some finite amount of memory (perhaps depending on input size) you will always run into this problem. Only after exhausting all of this will you need to look into caching objects out to disk etc. At this point you should have a very good reason to say "I need Xgb of memory" for something and you can't work around it by improving your algorithms or memory allocation patterns. Generally this will only usually be the case for algorithms operating on large datasets (like a database or some scientific analysis program) and then techniques like caching and memory mapped IO become useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO STAX FOR C
    </pattern>
    <template>
<![CDATA[<p><a href="http://xmlsoft.org/" rel="nofollow">libxml</a> is a heavily used and documented XML library for C, which provides a SAX API. <a href="http://expat.sourceforge.net/" rel="nofollow">Expat</a> is another, but in my experience is not as well documented.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REFLECT AND WHI IS IT USE
    </pattern>
    <template>
<![CDATA[<p>The name reflection is used to describe code which is able to inspect other code in the same system (or itself).</p><br/><br/><p>For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething', and then, call it if you want to.</p><br/><br/><p>So, to give you a code example of this in Java (imagine the object in question is foo) :</p><br/><br/><pre><code>Method method = foo.getClass().getMethod("doSomething", null);<br/>method.invoke(foo, null);<br/></code></pre><br/><br/><p>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.</p><br/><br/><p>There are some good reflection examples to get you started at <a href="http://java.sun.com/developer/technicalArticles/ALT/Reflection/index.html" rel="nofollow">http://java.sun.com/developer/technicalArticles/ALT/Reflection/index.html</a></p><br/><br/><p>And finally, yes, the concepts are pretty much similar in other statically types languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLUGIN DEV HOW DO I GET THE PATH FOR THE CURRENT SELECT PROJECT
    </pattern>
    <template>
<![CDATA[<p>You should take a look at <a href="http://help.eclipse.org/help33/index.jsp?topic=/org.eclipse.cdt.doc.isv/reference/api/org/eclipse/cdt/core/model/ICProject.html" rel="nofollow">ICProject</a>, especially the getOutputEntries and getAllSourceRoots operations. <a href="http://dev.eclipse.org/viewcvs/index.cgi/cdt-core-home/docs/qnx/cpathentry.html?root=Tools_Project&amp;revision=1.11" rel="nofollow">This tutorial</a> has some brief examples too. I work with JDT so thats pretty much what I can do. Hope it helps :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA APPLIC FOR PERFORM BOTTLENECK
    </pattern>
    <template>
<![CDATA[<p>Try using a profiler on your running code. It should help you identify the bottlenecks. Try <a href="http://www.ej-technologies.com/products/jprofiler/overview.html" rel="nofollow">jprofiler</a> or <a href="http://www.netbeans.org/features/java/profiler.html" rel="nofollow">Netbeans profiler</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XML INDENT IN INTELLIJ IDEA
    </pattern>
    <template>
<![CDATA[<p>Sure there is. This is all you need to do:</p><br/><br/><ul><br/><li>Go to</li><br/></ul><br/><br/><pre>File -> Settings -> Global Code Style -> General</pre><br/><br/><ul><br/><li>Disable the checkbox next to 'Use same settings for all file types'  </li><br/><li>The 'XML' tab should become enabled. Click it and set the 'tab' (and probably 'indent') size to 2.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONETOMANI DOE NOT WORK WITH INHERIT IN HIBERN
    </pattern>
    <template>
<![CDATA[<p>I think it's a wise decision made by the Hibernate team. They could be less arrogante and make it clear why it was implemented this way, but that's just how Emmanuel, Chris and Gavin works. :)</p><br/><br/><p>Let's try to understand the problem. I think your concepts are "lying". Firts you say that many <strong>Problem</strong>s are associated to <strong>People</strong>. But, then you say that one <strong>Person</strong> have many <strong>UglyProblem</strong>s (and does not relate to other <strong>Problem</strong>s). Something is wrong with that design.</p><br/><br/><p>Imagine how it's going to be mapped to the database. You have a single table inheritance, so:</p><br/><br/><pre><code>          _____________<br/>          |__PROBLEMS__|          |__PEOPLE__|<br/>          |id &lt;PK&gt;     |          |          |<br/>          |person &lt;FK&gt; | --------&gt;|          |<br/>          |problemType |          |_________ |<br/>          --------------<br/></code></pre><br/><br/><p>How is hibernate going to enforce the database to make <strong>Problem</strong> only relate to <strong>People</strong> if its <strong>problemType</strong> is equal UP? That's a very difficult problem to solve. So, if you want this kind of relation, every subclass must be in it's own table. That's what <em>@MappedSuperclass</em> does.</p><br/><br/><p>PS.: Sorry for the ugly drawing :D</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN JAVA
    </pattern>
    <template>
<![CDATA[<p>There's the <a href="http://www.ibm.com/developerworks/java/library/j-jtp02216/index.html" rel="nofollow">pseudo-typedef antipattern</a>... </p><br/><br/><pre><code>class StringList extends ArrayList&lt;String&gt; { }<br/></code></pre><br/><br/><p>Good stuff, drink up! ;-)</p><br/><br/><p>As the article notes, this technique has some serious issues, primarily that this "typedef" is actually a separate class and thus cannot be used interchangeably with either the type it extends or other similarly defined types.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIGHTWEIGHT NEURAL NETWORK ARE THERE FOR JAVA
    </pattern>
    <template>
<![CDATA[<p>You may get some mileage out of the book <a href="http://www.heatonresearch.com/book/programming-neural-networks-java.html" rel="nofollow">Introduction to Neural Networks with Java</a> and its <a href="http://www.heatonresearch.com/dload/JavaNeuralExamples.zip" rel="nofollow">downloadable examples</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRIP THE FLUFF OUT OF A THIRD PARTI LIBRARI
    </pattern>
    <template>
<![CDATA[<p>There is a way.</p><br/><br/><p>The JarJar project does this AFAIR. The first goal of the JarJar project is to allow one to embed third party libraries in your own jar, changing the package structure if necessary. Doing so it can strip out the classes that are not needed.</p><br/><br/><p>Check it out at <a href="http://code.google.com/p/jarjar/" rel="nofollow">http://code.google.com/p/jarjar/</a>.</p><br/><br/><p>Here is a link about shrinking jars: <a href="http://sixlegs.com/blog/java/jarjar-keep.html" rel="nofollow">http://sixlegs.com/blog/java/jarjar-keep.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTENT OF PAGE THAT PASS THROUGH AN HTTP PROXI ( AND CALL JAVA )
    </pattern>
    <template>
<![CDATA[<p>I have varying familiarity with what I consider are The Big Three open source proxy servers for *nix systems, and each has their own approach to the kind of functionality you are asking for, although I must say I've never done this myself.</p><br/><br/><ul><br/><li><strong>Squid</strong>: Very mature and performant, although single threaded</li><br/><li><strong>Apache httpd with mod_proxy</strong>: what I'm using now for reverse proxy work</li><br/><li><strong>Varnish Cache</strong>: The new kid on the block.  Very cool and interesting, but arguably not stable enough for mission critical production systems</li><br/></ul><br/><br/><p>BUT, they are each very C/*nix/systems-oriented.  So it's pretty straight forward although detailed work to create custom directives or filters or whatever each project might call their approach.   But I'd not think any of them would allow for decent, straightforward, fast Java integration.  Perl?  A C program?  Sure...</p><br/><br/><p>If you are interested in having your proxy server <em>only</em> do this HTML work, and have no interest in the caching or authentication or whatever functionality that a proper caching server would provide, and your environment allows for it, you may want to consider a simple Java servlet approach: </p><br/><br/><ol><br/><li>Your custom Java servlet in a servlet container, like Tomcat or Jetty or whatever, listens for requests, </li><br/><li>Uses a client library (like Jakarta's http client) to pass the request on the the destination server, </li><br/><li>Receives the response from the destination server, and modifies it,</li><br/><li>And then the servlet returns the modified response to the client.</li><br/></ol><br/><br/><p>I sure hope you aren't doing anything evil with this system.  :P</p><br/><br/><p>The first approach seems more 'correct' to me, even with the Java integration issues.  The second seems easier, especially if the available skill sets and libraries tie you into a Java-centric approach.  Anyway, that is my two cents.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM JAVA TO C #
    </pattern>
    <template>
<![CDATA[<p>Check these:</p><br/><br/><ul><br/><li>Dare Obasanjo's article "<a href="http://www.25hoursaday.com/weblog/2007/04/30/CFromAJavaDevelopersPerspectiveV20.aspx" rel="nofollow">C# from a Java Developer's Perspective</a>". It's very detailed and I'm sure it will help you a lot.</li><br/><li>Charles Petzold's <a href="http://www.charlespetzold.com/dotnet/" rel="nofollow">.NET Book Zero</a> (What the C or C++ Programmer Needs to<br/>Know About C# and the .NET Framework)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNICOD SUPPORT
    </pattern>
    <template>
<![CDATA[<p>Have a look at this: <a href="http://www.icu-project.org/" rel="nofollow" title="International Components for Unicode">http://www.icu-project.org/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE MAXIMUM SUPPORT RESOLUT OF A CONNECT DISPLAY IN OS X FROM JAVA
    </pattern>
    <template>
<![CDATA[<pre><code>	GraphicsDevice[] devices = GraphicsEnvironment.getLocalGraphicsEnvironment()<br/>		.getScreenDevices();<br/>	for (int i = 0; i &lt; devices.length; i++) {<br/>		GraphicsDevice dev = devices[i];<br/>		System.out.println("device " + i);<br/>		DisplayMode[] modes = dev.getDisplayModes();<br/>		for (int j = 0; j &lt; modes.length; j++) {<br/>			DisplayMode m = modes[j];<br/>			System.out.println(" " + j + ": " + m.getWidth() + " x " + m.getHeight());<br/>		}<br/>	}<br/></code></pre><br/><br/><p>With this code you can determine the current resolution. On my system (SuSE linux) it does NOT output the possible resolutions. </p><br/><br/><p>Seems to work an Mac and Windows.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A MAC TO MAKE A JAVA APPLIC BUNDL
    </pattern>
    <template>
<![CDATA[<p>A Java application bundle on OS X is nothing more than a directory containing your .jars and a number of configuration files.  The SetFile tool sets a custom HFS filesystem property on the directory to tell finder that it is an app, but giving it a ".app" extension serves the same purpose.  I don't think there's anything stopping you from building one on, say, Windows, though of course you have no way of testing that it works, but if you are able to test it at least once on a real Mac, you could then conceivably update the .jars within it on Windows to reflect code changes without too much difficulty.</p><br/><br/><p>Have a look at the <a href="http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFBundles/CFBundles.html" rel="nofollow">Bundle Programming Guide</a> for more info.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR FAVOURIT CODE COVERAG TOOL ( S ) ( FREE AND NON FRE )
    </pattern>
    <template>
<![CDATA[<p>I use <a href="http://cobertura.sourceforge.net/" rel="nofollow">Cobertura</a>.  I prefer it to Emma because it does branch coverage as well as line coverage and because I think the HTML reports it generates are nicer.</p><br/><br/><p>An example of why branch coverage is important is code that uses the ternary operator (a ? b : c).  If the tool does only line coverage, this statement will be considered 100% covered even if it always executes the same branch.  With branch coverage it will be only 50% covered unless both branches have been executed.</p><br/><br/><p>Code coverage doesn't directly help you write better code, but it does help you write better tests, which in turn help you write better code.  Code coverage will uncover execution paths that are not being exercised by your tests.  As well as indicating where you can improve your tests, this can also identify pieces of code that can be removed (since they are not being used).</p><br/><br/><p>If you use a continuous integration tool, such as <a href="https://hudson.dev.java.net" rel="nofollow">Hudson</a>, you can plot your coverage scores over time, which can be useful for indentifying trends.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW URL ( ... ) .OPENCONNECT ( ) NECESSARILI IMPLI A POST
    </pattern>
    <template>
<![CDATA[<p>If you retrieve the URLConnection object using openConnection() it doesn't actually start communicating with the server.  That doesn't happen until you get the stream from the URLConnection().  When you first get the connection you can add/change headers and other connection properties before actually opening it.</p><br/><br/><p>URLConnection's lifecycle is a bit odd.  It doesn't send the headers to the server until you've gotten one of the streams.  If you just get the input stream then I believe it does a GET, sends the headers, then lets you read the output.  If you get the output stream then I believe it sends it as a POST, as it assumes you'll be writing data to it (You may need to call setDoOutput(true) for the output stream to work).  As soon as you get the input stream the output stream is closed and it waits for the response from the server.</p><br/><br/><p>For example, this should do a POST:</p><br/><br/><pre><code>URL myURL = new URL("http://example.com/my/path");<br/>URLConnection conn = myURL.openConnection();<br/>conn.setDoOutput(true);<br/>conn.setDoInput(true);<br/><br/>OutputStream os = conn.getOutputStream();<br/>os.write("Hi there!");<br/>os.close();<br/><br/>InputStream is = conn.getInputStream();<br/>// read stuff here<br/></code></pre><br/><br/><p>While this would do a GET:</p><br/><br/><pre><code>URL myURL = new URL("http://example.com/my/path");<br/>URLConnection conn = myURL.openConnection();<br/>conn.setDoOutput(false);<br/>conn.setDoInput(true);<br/><br/>InputStream is = conn.getInputStream();<br/>// read stuff here<br/></code></pre><br/><br/><p>URLConnection will also do other weird things.  If the server specifies a content length then URLConnection will keep the underlying input stream open until it receives that much data, <em>even if you explicitly close it</em>.  This caused a lot of problems for us as it made shutting our client down cleanly a bit hard, as the URLConnection would keep the network connection open.  This probably probably exists even if you just use getStream() though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ECTJ DOE N T CATCH ALL EVENT IN SPRING FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Your breakpoints aren't being hit because you are using Spring's AOP Proxies. See <a href="http://static.springframework.org/spring/docs/2.5.x/reference/aop.html#aop-understanding-aop-proxies" rel="nofollow">understanding-aop-proxies</a> for a description of how AOP Proxies are special. </p><br/><br/><p>Basically, the MVC framework is going to call the handleRequest method on your controller's proxy (which for example the MultiActionController you're using as a base class implements), this method will then make an "internal" call to its rebuildThumbnail method, but this won't go through the proxy and thus won't pick up any aspects. (This has nothing to do with the methods being final.)</p><br/><br/><p>To achieve what you want, investigate using "real" AOP via load time weaving (which Spring supports very nicely).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A NORMAL VECTOR POINT DIRECTLI FROM VIRTUAL WORLD TO SCREEN IN JAVA3D
    </pattern>
    <template>
<![CDATA[<p>Yes, you got my question right. Sorry that I was a little bit confused yesterday. Now I have corrected the code by following your suggestion and mixing two pieces of code in the question together:</p><br/><br/><pre><code>Vector3f toScreenVector = new Vector3f(0, 0, 1);<br/><br/>Transform3D t3d = new Transform3D();<br/>canvas.getImagePlateToVworld(t3d);<br/>t3d.transform(toScreenVector);<br/><br/>tg.getTransform(t3d); //tg is Transform Group of all objects in a scene<br/>t3d.transform(toScreenVector);<br/></code></pre><br/><br/><p>Thank you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND WRITE RAW IP PACKET FROM JAVA ON A MAC
    </pattern>
    <template>
<![CDATA[<p>If you start with the idea that you need something <em>like</em> a packet sniffer, you'll want to look at <a href="http://netresearch.ics.uci.edu/kfujii/jpcap/doc/" rel="nofollow">http://netresearch.ics.uci.edu/kfujii/jpcap/doc/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A JAVA MEMORI LEAK
    </pattern>
    <template>
<![CDATA[<p>I use following approach to finding memory leaks in Java. I've used jProfiler with great success, but I believe that any specialized tool with graphing capabilities (diffs are easier to analyze in graphical form) will work.</p><br/><br/><ol><br/><li>Start the application and wait until it get to "stable" state, when all the initialization is complete and the application is idle.</li><br/><li>Run the operation suspected of producing a memory leak several times to allow any cache, DB-related initialization to take place.</li><br/><li>Run GC and take memory snapshot.</li><br/><li>Run the operation again. Depending on the complexity of operation and sizes of data that is processed operation may need to be run several to many times.</li><br/><li>Run GC and take memory snapshot.</li><br/><li>Run a diff for 2 snapshots and analyze it.</li><br/></ol><br/><br/><p>Basically analysis should start from greatest positive diff by, say, object types and find what causes those extra objects to stick in memory.</p><br/><br/><p>For web applications that process requests in several threads analysis gets more complicated, but nevertheless general approach still applies.</p><br/><br/><p>I did quite a number of projects specifically aimed at reducing memory footprint of the applications and this general approach with some application specific tweaks and trick always worked well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT AN EXIST MESSI WEBAPP TO ELEG MVC
    </pattern>
    <template>
<![CDATA[<p>Your best bet is probably to refactor it slowly as you go along.  Few us of have the resources that would be required to completely start from scratch with something that has so many business rules buried in it.  Management really hates it when you spend months on developing an app that has more bugs than the one you replaced.</p><br/><br/><p>If you have the opportunity to build any separate apps from scratch, use all of the best practices there and use it to demonstrate how effective they are.  When you can, incorporate those ideas gradually into the old application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGNAL IN THE JAVA VIRTUAL MACHIN
    </pattern>
    <template>
<![CDATA[<p>The JVM responds to signals on its own. Some will cause the JVM to shutdown gracefully, which includes running shutdown hooks. Other signals will cause the JVM to abort without running shutdown hooks.</p><br/><br/><p>http://java.sun.com/javase/6/docs/api/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)</p><br/><br/><p>I don't think the JDK provides an official way to handle signals within your Java application. However, I did find the link below, which describes using some undocumented <code>sun.misc.Signal</code> class to do exactly that. The article dates from 2002 and uses JDK 1.3.1, but I've confirmed that the <code>sun.misc.Signal</code> class still exists in JDK 1.6.0.</p><br/><br/><p><a href="http://www.ibm.com/developerworks/java/library/i-signalhandling/">http://www.ibm.com/developerworks/java/library/i-signalhandling/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HASHMAP AND HASHTABL
    </pattern>
    <template>
<![CDATA[<p>There are several differences between HashMap and Hashtable in Java:</p><br/><br/><ol><br/><li><a href="http://java.sun.com/javase/6/docs/api/java/util/Hashtable.html" rel="nofollow">Hashtable</a> is synchronized, whereas <a href="http://java.sun.com/javase/6/docs/api/java/util/HashMap.html" rel="nofollow">HashMap</a> is not.  This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.</li><br/><li>Hashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.</li><br/><li>One of HashMap's subclasses is <a href="http://java.sun.com/javase/6/docs/api/java/util/LinkedHashMap.html" rel="nofollow">LinkedHashMap</a>, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap.  This wouldn't be as easy if you were using Hashtable.</li><br/></ol><br/><br/><p>Since synchronization is not an issue for you, I'd recommend HashMap.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQUAR BRACKET IN URL
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.ietf.org/rfc/rfc3986.txt" rel="nofollow">RFC 3986</a> states</p><br/><br/><blockquote><br/>  <p>A host identified by an Internet<br/>  Protocol literal address, version 6<br/>  [RFC3513] or later, is distinguished<br/>  by enclosing the IP literal within<br/>  square brackets ("[" and "]").  This<br/>  is the only place where square bracket<br/>  characters are allowed in the URI<br/>  syntax.</p><br/></blockquote><br/><br/><p>So you should not be seeing such URI's in the wild in theory, as they should arrive encoded.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A HUGE XML FILE
    </pattern>
    <template>
<![CDATA[<p>Instead of using a DOMParser, use a SAXParser.  This reads from an input stream or reader so you can keep the XML on disk instead of loading it all into memory.</p><br/><br/><pre><code>SAXParserFactory factory = SAXParserFactory.newInstance();<br/>factory.setValidating(true);<br/>factory.setNamespaceAware(true);<br/><br/>SAXParser parser = factory.newSAXParser();<br/><br/>XMLReader reader = parser.getXMLReader();<br/>reader.setErrorHandler(new SimpleErrorHandler());<br/>reader.parse(new InputSource(new FileReader ("document.xml")));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCJP 1.6 EXAM ( CHANG FROM 1.5 )
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://saloon.javaranch.com/cgi-bin/ubb/ultimatebb.cgi?ubb=get_topic&amp;f=24&amp;t=042471" rel="nofollow">Java Ranch forum</a> explains that the main difference is the addition of 3 classes/interfaces: <a href="http://java.sun.com/javase/6/docs/api/java/io/Console.html" rel="nofollow">Console</a>, <a href="http://java.sun.com/javase/6/docs/api/java/util/NavigableSet.html" rel="nofollow">NavigableSet</a> and <a href="http://java.sun.com/javase/6/docs/api/java/util/NavigableMap.html" rel="nofollow">NavigableMap</a>.</p><br/><br/><p>NavigableSet is implemented by <a href="http://java.sun.com/javase/6/docs/api/java/util/TreeSet.html" rel="nofollow">TreeSet</a> and <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListSet.html" rel="nofollow">ConcurrentSkipListSet</a>. NavigableMap is implemented by <a href="http://java.sun.com/javase/6/docs/api/java/util/TreeMap.html" rel="nofollow">TreeMap</a> and <a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html" rel="nofollow">ConcurrentSkipListMap</a>. I don't <em>think</em> SkipLists are in the syllabus, so the important thing to learn is the extensions to the TreeMap and TreeList classes. These are largely focussed on methods that return subsets of the collection <em>which are backed by the original collection</em>. This means that changes to either collection can affect the other collection.</p><br/><br/><p>The Console questions are about getting input from the user, usually from the terminal. Note:</p><br/><br/><ul><br/><li>System.console() will return null if there isn't an available terminal</li><br/><li>The readLine() methods return a String</li><br/><li>The readPassword() methods return a char[]</li><br/><li>Several methods take printf/format style arguments that can be used to provided a formatted prompt</li><br/></ul><br/><br/><p>I'm not sure why there is so little extra material. Possibly Sun felt a lot of stuff in 1.6 wasn't core Java or were just too big, e.g. the XML and Scripting APIs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVA TOOL FOR EMAC
    </pattern>
    <template>
<![CDATA[<p>I've used <a href="http://jdee.sourceforge.net/" rel="nofollow">JDEE</a> on several projects.  It handles Code Completion.  I've never used it for debugging or browsing docs, but it's a big step up from a basic text editor.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RANDOM ALPHA NUMER STRING IN JAVA
    </pattern>
    <template>
<![CDATA[<p>Here is code for secure, easy, but a little bit more expensive session identifiers.</p><br/><br/><pre><code>import java.security.SecureRandom;<br/>import java.math.BigInteger;<br/><br/>public final class SessionIdentifierGenerator<br/>{<br/><br/>  private SecureRandom random = new SecureRandom();<br/><br/>  public String nextSessionId()<br/>  {<br/>    return new BigInteger(130, random).toString(32);<br/>  }<br/><br/>}<br/></code></pre><br/><br/><p>If you allow session identifiers to be easily guessable (too short, flawed random number generator, etc.), attackers can hijack other's sessions. Note that SecureRandom objects are expensive to initialize, so you'll want to keep one around and reuse it.</p><br/><br/><p>Here is alternative code for cheap, insecure random alpha-numeric strings. You can tweak the "symbols" if you want to use more characters.</p><br/><br/><pre><code>import java.util.Random;<br/><br/>public class RandomString<br/>{<br/><br/>  private static final char[] symbols = new char[36];<br/><br/>  static {<br/>    for (int idx = 0; idx &lt; 10; ++idx)<br/>      symbols[idx] = (char) ('0' + idx);<br/>    for (int idx = 10; idx &lt; 36; ++idx)<br/>      symbols[idx] = (char) ('a' + idx - 10);<br/>  }<br/><br/>  private final Random random = new Random();<br/><br/>  private final char[] buf;<br/><br/>  public RandomString(int length)<br/>  {<br/>    if (length &lt; 1)<br/>      throw new IllegalArgumentException("length &lt; 1: " + length);<br/>    buf = new char[length];<br/>  }<br/><br/>  public String nextString()<br/>  {<br/>    for (int idx = 0; idx &lt; buf.length; ++idx) <br/>      buf[idx] = symbols[random.nextInt(symbols.length)];<br/>    return new String(buf);<br/>  }<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND SQLITE
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://www.sqlite.org/cvstrac/wiki?p=SqliteWrappers">wiki</a> lists some more wrappers:</p><br/><br/><ul><br/><li>Java wrapper (around a SWIG interface): <a href="http://tk-software.home.comcast.net/">http://tk-software.home.comcast.net/</a></li><br/><li>A good tutorial to use JDBC driver for SQLite. (it works at least !) <a href="http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite">http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite</a></li><br/><li>JDBC driver for Windows, Linux, Mac OS X, and Pure Java: <a href="http://www.zentus.com/sqlitejdbc">http://www.zentus.com/sqlitejdbc</a></li><br/><li>Another Java - SWIG wrapper. It only works on Win32. <a href="http://rodolfo_3.tripod.com/index.html">http://rodolfo_3.tripod.com/index.html</a></li><br/><li>sqlite-java-shell: 100% pure Java port of the sqlite3 commandline shell built with NestedVM. (This is not a JDBC driver).</li><br/><li>SQLite JDBC Driver for Mysaifu JVM: SQLite JDBC Driver for Mysaifu JVM and SQLite JNI Library for Windows (x86) and Linux (i386/PowerPC). </li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL WITH STATIC INITI
    </pattern>
    <template>
<![CDATA[<p>You can find some information about that in the <a href="http://bugs.sun.com/view_bug.do?bug_id=4365406" rel="nofollow">bug 4365406</a> and in the <a href="http://java.sun.com/j2se/1.5.0/docs/guide/serialization/spec/class.html#4100" rel="nofollow">algorithm for computing serialVersionUID</a>. Basically, when changing the initialization of your static member with System.getProperty, the compiler introduces a new static property in your class referencing the System class (I assume that the System class was previously unreferenced in your class), and since this property introduced by the compiler is not private, it takes part in the serialVersionUID computation.</p><br/><br/><p>Morality: always use explicit serialVersionUID, you'll save some CPU cycles and some headaches :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS WEB.XML PROPERTI FROM A JAVA BEAN
    </pattern>
    <template>
<![CDATA[<p>One way you could do this is:</p><br/><br/><pre><code>public class FactoryInitialisingServletContextListener implements ServletContextListener {<br/><br/>    public void contextDestroyed(ServletContextEvent event) {<br/>    }<br/><br/>    public void contextInitialized(ServletContextEvent event) {<br/>        Properties properties = new Properties();<br/>        ServletContext servletContext = event.getServletContext();<br/>        Enumeration&lt;?&gt; keys = servletContext.getInitParameterNames();<br/>        while (keys.hasMoreElements()) {<br/>            String key = (String) keys.nextElement();<br/>            String value = servletContext.getInitParameter(key);<br/>            properties.setProperty(key, value);<br/>        }<br/>        Factory.setServletContextProperties(properties);<br/>    }<br/>}<br/><br/>public class Factory {<br/><br/>    static Properties _servletContextProperties = new Properties();<br/><br/>    public static void setServletContextProperties(Properties servletContextProperties) {<br/>        _servletContextProperties = servletContextProperties;<br/>    }<br/>}<br/></code></pre><br/><br/><p>And then have the following in your web.xml</p><br/><br/><pre><code>&lt;listener&gt;<br/>    &lt;listener-class&gt;com.acme.FactoryInitialisingServletContextListener&lt;listener-class&gt;<br/>&lt;/listener&gt;<br/></code></pre><br/><br/><p>If your application is running in a web container, then the listener will be invoked by the container once the context has been created. In which case, the _servletContextProperties will be replaced with any context-params specified in the web.xml.</p><br/><br/><p>If your application is running outside a web container, then _servletContextProperties will be empty.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG COME OUT GARBL
    </pattern>
    <template>
<![CDATA[<p>One thing I don't like is here in this block from StreamUtils.getBytes():</p><br/><br/><pre><code> 1 while (true) {<br/> 2   int nBytesRead = src.read(buff);<br/> 3   if (nBytesRead &lt; 0) {<br/> 4     break;<br/> 5   }<br/> 6   byteStream.write(buff);<br/> 7 }<br/></code></pre><br/><br/><p>At line 6, it writes the entire buffer, no matter how many bytes are read in.  I am not convinced this will always be the case.  It would be more correct  like this:</p><br/><br/><pre><code> 1 while (true) {<br/> 2   int nBytesRead = src.read(buff);<br/> 3   if (nBytesRead &lt; 0) {<br/> 4     break;<br/> 5   } else {<br/> 6     byteStream.write(buff, 0, nBytesRead);<br/> 7   }<br/> 8 }<br/></code></pre><br/><br/><p>Note the 'else' on line 5, along with the two additional parameters (array index start position and length to copy) on line 6.</p><br/><br/><p>I could imagine that for larger files, like images, the buffer returns before it is filled (maybe it is waiting for more).  That means you'd be unintentionally writing old data that was remaining in the tail end of the buffer.  This is almost certainly happening most of the time at EoF, assuming a buffer > 1 byte, but extra data at EoF is probably not the cause of your corruption...it is just not desirable.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      0 ( PROGRAM NAME ) IN JAVA DISCOV MAIN CLASS
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>    StackTraceElement[] stack = Thread.currentThread ().getStackTrace ();<br/>    StackTraceElement main = stack[stack.length - 1];<br/>    String mainClass = main.getClassName ();<br/></code></pre><br/><br/><p>Of course, this only works if you're running from the main thread.  Unfortunately I don't think there's a system property you can query to find this out.</p><br/><br/><p><strong>Edit:</strong> Pulling in @John Meagher's comment, which is a great idea:</p><br/><br/><blockquote><br/>  <p>To expand on @jodonnell you can also<br/>  get all stack traces in the system<br/>  using Thread.getAllStackTraces(). From<br/>  this you can search all the stack<br/>  traces for the "main" Thread to<br/>  determine what the main class is. This<br/>  will work even if your class is not<br/>  running in the main thread.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFER CLASSLOAD FOR DIFFER JUNIT TEST
    </pattern>
    <template>
<![CDATA[<p>Singletons lead to a whole world of hurt. Avoid singletons and your code becomes much easier to test and just all-round nicer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAPPLET HOW DO YOU EMB IT IN A WEBPAG
    </pattern>
    <template>
<![CDATA[<p>Here is an example from <a href="http://java.sun.com/docs/books/tutorial/uiswing/components/applet.html" rel="nofollow">sun's website</a>:</p><br/><br/><pre><code>&lt;applet code="TumbleItem.class" <br/>        codebase="examples/"<br/>        archive="tumbleClasses.jar, tumbleImages.jar"<br/>        width="600" height="95"&gt;<br/>    &lt;param name="maxwidth" value="120"&gt;<br/>    &lt;param name="nimgs" value="17"&gt;<br/>    &lt;param name="offset" value="-57"&gt;<br/>    &lt;param name="img" value="images/tumble"&gt;<br/><br/>Your browser is completely ignoring the &amp;lt;APPLET&amp;gt; tag!<br/>&lt;/applet&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT ALLOC OVERHEAD
    </pattern>
    <template>
<![CDATA[<p>These days, object creation is pretty dang fast, and the concept of object pooling is kind of obsolete (at least in general; connection pooling is of course still valid).</p><br/><br/><p>Avoid premature optimization.  Create your nodes when you need them when doing your copies, and then see if that becomes prohibitively slow.  If so, then look into some techniques to speed it up.  But unless you already know that what you've got isn't fast enough, I wouldn't go introducing all the complexity you're going to need to get pooling going.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BCEL MONKEYPATCH FOR JAVA
    </pattern>
    <template>
<![CDATA[<p>It's a bit more low-level than classic monkey patching, and from what I read, the classes already loaded into the VM are not updated. It only supports saving it to class files again, not modifying run time classes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ESHOOT JAVA LUCEN IGNOR FIELD
    </pattern>
    <template>
<![CDATA[<p>For debugging Lucene, the best tool to use is <a href="http://www.getopt.org/luke/">Luke</a>, which lets you poke around in the index itself to see what got indexed, carry out searches, etc. I recommend downloading it, pointing it at your index, and seeing what's in there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSP AND JSF
    </pattern>
    <template>
<![CDATA[<p>To solve this one I'd probably create a JSF fragment that only includes your form, then use a  tag to include it in my JSF page.  </p><br/><br/><p>That solution is probably a little fragile depending on your environment though.</p><br/><br/><p>EDIT: See Chris Hall's answer, FacesContext is not available outside the FacesServlet.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DBUNIT DATASET GENER
    </pattern>
    <template>
<![CDATA[<p>Hmmm, I guess I should have browsed around the DBUnit website a bit more...</p><br/><br/><p><a href="http://www.dbunit.org/faq.html#extract" rel="nofollow">http://www.dbunit.org/faq.html#extract</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATCH AGAINST SOMETH THAT IS NOT A SPECIF SUBSTR
    </pattern>
    <template>
<![CDATA[<p>I think in this case you want <strong>negative lookbehind</strong>, like so:</p><br/><br/><pre><code>foo.*(?&lt;!bar)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE CONTENT OF A JAVA INPUTSTREAM TO AN OUTPUTSTREAM
    </pattern>
    <template>
<![CDATA[<p>As WMR mentioned, IOUtils from apache has a method called copy which does exactly what you're looking for.</p><br/><br/><p>So, you have <br/></p><br/><br/><p><b><code>IOUtils.copy(in,out);</code></b><br/><br/> in your code.</p><br/><br/><p>Is there a reason you're avoiding IOUtils? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATION PAGE PROPERTI IN TAPESTRI 4.1.2
    </pattern>
    <template>
<![CDATA[<p>I found the problem. Tomcat was mangling the parameters before Tapestry or my page class even had a crack at it. Creating a servlet filter that enforced the desired character encoding fixed it.</p><br/><br/><h2>CharacterEncodingFilter.java</h2><br/><br/><pre><code>package mycode;<br/><br/>import java.io.IOException;<br/><br/>import javax.servlet.*;<br/><br/>/**<br/> * Allows you to enforce a particular character encoding on incoming requests.<br/> * @author Robert J. Walker<br/> */<br/>public class CharacterEncodingFilter implements Filter {<br/>    private static final String ENCODINGPARAM = "encoding";<br/><br/>    private String encoding;<br/><br/>    public void init(FilterConfig config) throws ServletException {<br/>	    encoding = config.getInitParameter(ENCODINGPARAM);<br/><br/>    	if (encoding != null) {<br/>		    encoding = encoding.trim();<br/>	    }<br/>    }<br/><br/>    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)<br/>		    throws IOException, ServletException {<br/>	    request.setCharacterEncoding(encoding);<br/>	    chain.doFilter(request, response);<br/>    }<br/><br/>    public void destroy() {<br/>	    // do nothing<br/>    }<br/>}<br/></code></pre><br/><br/><h2>web.xml</h2><br/><br/><pre><code>&lt;web-app&gt;<br/>    ...<br/>    &lt;filter&gt;<br/>        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;<br/>        &lt;filter-class&gt;mycode.CharacterEncodingFilter&lt;/filter-class&gt;<br/>        &lt;init-param&gt;<br/>            &lt;param-name&gt;encoding&lt;/param-name&gt;<br/>            &lt;param-value&gt;UTF-8&lt;/param-value&gt;<br/>        &lt;/init-param&gt;<br/>    &lt;/filter&gt;<br/>    &lt;filter-mapping&gt;<br/>        &lt;filter-name&gt;characterEncoding&lt;/filter-name&gt;<br/>        &lt;url-pattern&gt;/app/*&lt;/url-pattern&gt;<br/>    &lt;/filter-mapping&gt;<br/>    ...<br/>&lt;/web-app&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAIN DIFFER BETWEEN NEW ASP.NET MVC FRAMEWORK AND TYPIC JAVA STRUT PROJECT
    </pattern>
    <template>
<![CDATA[<p>I think you're mostly right. While my MVC experience is largely with RoR, I read up on Struts before the opportunity to work with it evaporated.</p><br/><br/><p>IIRC, Struts and RoR are both fairly clean implementations of MVC as I see it defined on <a href="http://en.wikipedia.org/wiki/Model-view-controller" rel="nofollow">Wikipedia</a>, to pick an obvious reference.</p><br/><br/><p>What's more interesting is that ASP.NET's MVC framework appears also to be a fairly close match. I was listening to a <a href="http://slickthought.net/spaghetticode/podcast/spaghetticode-ruby.mp3" rel="nofollow">podcast</a> that, amongst other things, seemed to confirm this. Why interesting? Because Microsoft didn't crazy trying to outdo what was already out there, just make the same thing available within their environment. How much simpler would web page design and styling be if they'd taken that approach when developing IE?</p><br/><br/><p>Of course, it's not always that simple: how much poorer would the web experience be if MS hadn't "extended" the standards and given us, or example, XmlHttpRequest() ? We'd probably still be waiting for it to be approved by the standards body so someone could invent AJAX...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME TOOL TO VISUAL JAVA CLASS HIERARCHI AND RELAT
    </pattern>
    <template>
<![CDATA[<p>If you use the <a href="http://www.netbeans.org/" rel="nofollow">Netbeans</a> IDE it does have tools to reverse engineer your source code into UML class diagrams. After loading your source code into the IDE. You can create a new UML->Reverse Engineered java-platform model.</p><br/><br/><p>Check out <a href="http://wiki.netbeans.org/NetbeansUML" rel="nofollow">This Netbeans Wiki page</a> for more details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE STRING TO A DATE OR CALENDAR OBJECT
    </pattern>
    <template>
<![CDATA[<p>In brief:</p><br/><br/><pre><code>DateFormat formatter = new SimpleDateFormat("MM/dd/yy");<br/>Date date = formatter.parse("01/29/02");<br/></code></pre><br/><br/><p>See <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html" rel="nofollow"><code>SimpleDateFormat</code> javadoc</a> for more.</p><br/><br/><p>And to turn it into a <code>Calendar</code>, do:</p><br/><br/><pre><code>Calendar calendar = Calendar.getInstance();<br/>calendar.setTime(date);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREFETCH ORACL SEQUENC ID IN A DISTRIBUT ENVIRON
    </pattern>
    <template>
<![CDATA[<p>Why not just have the sequence as increment by 100 all the time? each "nextval" gives you 100 sequence numbers to work with</p><br/><br/><pre><code>SQL&gt; create sequence so_test start with 100 increment by 100 nocache;<br/><br/>Sequence created.<br/><br/>SQL&gt; select so_test.nextval - 99 as first_seq, so_test.currval as last_seq from dual;<br/><br/> FIRST_SEQ   LAST_SEQ<br/>---------- ----------<br/>         1        100<br/><br/>SQL&gt; /<br/><br/> FIRST_SEQ   LAST_SEQ<br/>---------- ----------<br/>       101        200<br/><br/>SQL&gt; /<br/><br/> FIRST_SEQ   LAST_SEQ<br/>---------- ----------<br/>       201        300<br/><br/>SQL&gt;<br/></code></pre><br/><br/><p>A note on your example.. Watch out for DDL.. It will produce an implicit commit</p><br/><br/><p><strong>Example of commit produced by DDL</strong></p><br/><br/><pre><code>SQL&gt; select * from xx;<br/><br/>no rows selected<br/><br/>SQL&gt; insert into xx values ('x');<br/><br/>1 row created.<br/><br/>SQL&gt; alter sequence so_test increment by 100;<br/><br/>Sequence altered.<br/><br/>SQL&gt; rollback;<br/><br/>Rollback complete.<br/><br/>SQL&gt; select * from xx;<br/><br/>Y<br/>-----<br/>x<br/><br/>SQL&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSTL URL SHOULD I REFER IN MY JSP
    </pattern>
    <template>
<![CDATA[<p>Go with </p><br/><br/><pre><code>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;<br/></code></pre><br/><br/><p>More on this topic <a href="http://faq.javaranch.com/view?JstlTagLibDefinitions" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMMAT CREAT A PATTERN FROM A DATE THAT IS STORE IN A STRING
    </pattern>
    <template>
<![CDATA[<p>The format to pass to SimpleDateFormat could be looked up at <a href="http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html" rel="nofollow">http://java.sun.com/javase/6/docs/api/java/text/SimpleDateFormat.html</a></p><br/><br/><pre><code>new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy")<br/></code></pre><br/><br/><p>As for your second question, I don't know of any Java library to figure out a date format and parse it without knowing in advance what the format is.</p><br/>]]>    </template>
  </category>
</aiml>
