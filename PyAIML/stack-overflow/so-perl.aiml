<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      SAFEST WAY TO ITER THROUGH THE KEY OF A PERL HASH
    </pattern>
    <template>
<![CDATA[<p>The rule of thumb is to use the function most suited to your needs.</p><br/><br/><p>If you just want the keys and do not plan to ever <em>read</em> any of the values, use keys():</p><br/><br/><pre><code>foreach my $key (keys %hash) { ... }<br/></code></pre><br/><br/><p>If you just want the values, use values():</p><br/><br/><pre><code>foreach my $val (values %hash) { ... }<br/></code></pre><br/><br/><p>If you need the keys <em>and</em> the values, use each():</p><br/><br/><pre><code>keys %hash; # reset the internal iterator so a prior each() doesn't affect the loop<br/>while(my($k, $v) = each %hash) { ... }<br/></code></pre><br/><br/><p>If you plan to change the keys of the hash in any way <em>except</em> for deleting the current key during the iteration, then you must not use each().  For example, this code to create a new set of uppercase keys with doubled values works fine using keys():</p><br/><br/><pre><code>%h = (a =&gt; 1, b =&gt; 2);<br/><br/>foreach my $k (keys %h)<br/>{<br/>  $h{uc $k} = $h{$k} * 2;<br/>}<br/></code></pre><br/><br/><p>producing the expected resulting hash:</p><br/><br/><pre><code>(a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 4)<br/></code></pre><br/><br/><p>But using each() to do the same thing:</p><br/><br/><pre><code>%h = (a =&gt; 1, b =&gt; 2);<br/><br/>keys %h;<br/>while(my($k, $v) = each %h)<br/>{<br/>  $h{uc $k} = $h{$k} * 2; # BAD IDEA!<br/>}<br/></code></pre><br/><br/><p>produces incorrect results in hard-to-predict ways.  For example:</p><br/><br/><pre><code>(a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 8)<br/></code></pre><br/><br/><p>This, however, is safe:</p><br/><br/><pre><code>keys %h;<br/>while(my($k, $v) = each %h)<br/>{<br/>  if(...)<br/>  {<br/>    delete $h{$k}; # This is safe<br/>  }<br/>}<br/></code></pre><br/><br/><p>All of this is described in the perl documentation:</p><br/><br/><pre><code>% perldoc -f keys<br/>% perldoc -f each<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORC EITHER A SCALAR OR ARRAY REF TO BE AN ARRAY IN PERL
    </pattern>
    <template>
<![CDATA[<p>im not sure there's any other way than:</p><br/><br/><blockquote><br/><pre><code>$result = [ $result ]   if ref($result) ne 'ARRAY';  <br/>foreach .....<br/></code></pre><br/></blockquote>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL JOURNAL AVAIL ONLIN
    </pattern>
    <template>
<![CDATA[<p>Volumes 1-5 (1996 -&gt; 2000) can be found at <a href="http://www.foo.be/docs/tpj/" rel="nofollow">http://www.foo.be/docs/tpj/</a></p><br/><br/><p>Hmm, looks like that was the entire run?  I though it was longer than that for some reason.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      DUPLIC ITEM FROM AN ARRAY IN PERL
    </pattern>
    <template>
<![CDATA[<p>You can do something like this:</p><br/><br/><pre><code>sub uniq {<br/>    return keys %{{ map { $_ =&gt; 1 } @_ }};<br/>}<br/><br/>@my_array = ("one","two","three","two","three");<br/>print join(" ", @my_array), "\n";<br/>print join(" ", uniq(@my_array)), "\n";<br/></code></pre><br/><br/><p>That destroys the original order of the items in the array, though.</p><br/><br/><p>Update: Here's an easier to understand function that preserves the original order:</p><br/><br/><pre><code>sub uniq2 {<br/>    my %seen = ();<br/>    my @r = ();<br/>    foreach my $a (@_) {<br/>        unless ($seen{$a}) {<br/>            push @r, $a;<br/>            $seen{$a} = 1;<br/>        }<br/>    }<br/>    return @r;<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT IN PERL
    </pattern>
    <template>
<![CDATA[<p>You should definitely take a look at <a href="http://search.cpan.org/perldoc?Moose" rel="nofollow"><code>Moose</code></a>.</p><br/><br/><pre><code>package Point;<br/>use Moose; # automatically turns on strict and warnings<br/><br/>has 'x' =&gt; (is =&gt; 'rw', isa =&gt; 'Int');<br/>has 'y' =&gt; (is =&gt; 'rw', isa =&gt; 'Int');<br/><br/>sub clear {<br/>    my $self = shift;<br/>    $self-&gt;x(0);<br/>    $self-&gt;y(0);<br/>}<br/></code></pre><br/><br/><p>Moose gives you (among other things) a constructor, accessor methods, and type checking for free! </p><br/><br/><p>So in your code you can:</p><br/><br/><pre><code>my $p = Point-&gt;new({x=&gt;10 , y=&gt;20}); # Free constructor<br/>$p-&gt;x(15);     # Free setter<br/>print $p-&gt;x(); # Free getter<br/>$p-&gt;clear();<br/>$p-&gt;x(15.5);   # FAILS! Free type check.<br/></code></pre><br/><br/><p>A good starting point is <a href="http://search.cpan.org/perldoc?Moose::Manual" rel="nofollow"><code>Moose::Manual</code></a> and <a href="http://search.cpan.org/perldoc?Moose::Cookbook" rel="nofollow"><code>Moose::Cookbook</code></a></p><br/><br/><p>If you just need the basic stuff you can also use <a href="http://search.cpan.org/perldoc?Mouse" rel="nofollow"><code>Mouse</code></a> which is not as complete, but without most of the compile time penalty.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DBI LIK LIBRARI FOR PHP
    </pattern>
    <template>
<![CDATA[<p>It's now defunct but <a href="http://phpdbi.sourceforge.net/web/" rel="nofollow" title="Reading List: Fog Creek Software Management Training Program">phpdbi</a> is possibly worth a look. If you're willing to let go of some of your caveats (the framework one), I've found that <a href="http://www.phpdoctrine.org/" rel="nofollow" title="Bootstrap">Doctrine</a> is a pretty neat way of accessing DBs in PHP. Worth investigating anyway.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL CONDIT OPER NOT DO WHAT I EXPECT
    </pattern>
    <template>
<![CDATA[<p>This is explained in the Perl <a href="http://perldoc.perl.org/perlop.html#Conditional-Operator" rel="nofollow">documentation</a>.</p><br/><br/><p>Because of Perl operator precedence the statement is being parsed as</p><br/><br/><pre><code>($condition ? $a= 2 : $a ) = 3 ;<br/></code></pre><br/><br/><p>Because the ?: operator  produces an assignable result, 3 is assigned to the result of the condition.</p><br/><br/><p>When $condition is true this means ($a=2)=3 giving $a=3</p><br/><br/><p>When $condition is false this means ($a)=3 giving $a=3</p><br/><br/><p>The correct way to write this is</p><br/><br/><pre><code>$a = ( $condition ? 2 : 3 );<br/>print $a;<br/></code></pre><br/><br/><p>We got bitten by this at work, so I am posting here hoping others will find it useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETRIEV SELECT TEXT USE REGEX IN C #
    </pattern>
    <template>
<![CDATA[<pre><code>int indexVal = 0;<br/>Regex re = new Regex(@"Index: (\d*)")<br/>Match m = re.Match(s)<br/>if(m.Success)<br/>  indexVal = int.TryParse(m.Groups[1].toString());<br/></code></pre><br/><br/><p>I might  have the group number wrong, but you should be able to figure it out from here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTRIBUT WITH REGEX IN PERL
    </pattern>
    <template>
<![CDATA[<p>I'm not the best at regular expressions, but this seems pretty close to what you're looking for:</p><br/><br/><pre><code>/x=(.+) and y=([^ ]+)( and (.*))?/<br/></code></pre><br/><br/><p>Except you use $1, $2, and $4.  In use:</p><br/><br/><pre><code>my @strs = ("x=1 and y=abc and z=c4g and w=v4l",<br/>            "x=yes and y=no",<br/>            "z=nox and w=noy");<br/><br/>foreach (@strs) {<br/>    if ($_ =~ /x=(.+) and y=([^ ]+)( and (.*))?/) {<br/>        $x = $1;<br/>        $y = $2;<br/>        $remainder = $4;<br/>        print "x: $x; y: $y; remainder: $remainder\n";<br/>    } else {<br/>        print "Failed.\n";<br/>    }<br/>}<br/></code></pre><br/><br/><p>Output:</p><br/><br/><pre><code>x: 1; y: abc; remainder: z=c4g and w=v4l<br/>x: yes; y: no; remainder: <br/>Failed.<br/></code></pre><br/><br/><p>This of course leaves out plenty of error checking, and I don't know everything about your inputs, but this seems to work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE TYPE OF A BLESS REFER IN PERL
    </pattern>
    <template>
<![CDATA[<p><code>Scalar::Util::reftype()</code> is the cleanest solution. The <a href="http://search.cpan.org/dist/Scalar-List-Utils/lib/Scalar/Util.pm"><code>Scalar::Util</code></a> module was added to the Perl core in version 5.7 but is available for older versions (5.004 or later) from CPAN.</p><br/><br/><p>You can also probe with <code>UNIVERSAL::isa()</code>:</p><br/><br/><pre><code>$x-&gt;isa('HASH')             # if $x is known to be an object<br/>UNIVERSAL::isa($x, 'HASH')  # if $x might not be an object or reference<br/></code></pre><br/><br/><p>Obviously, you'd also have to check for <code>ARRAY</code> and <code>SCALAR</code> types. The UNIVERSAL module (which serves as the base class for all objects) has been part of the core since Perl 5.003.</p><br/><br/><p>Another way -- easy but a little dirty -- is to stringify the reference. Assuming that the class hasn't overloaded stringification you'll get back something resembling <code>Class=HASH(0x1234ABCD)</code>, which you can parse to extract the underlying data type:</p><br/><br/><pre><code>my $type = ($object =~ /=(.+)\(0x[0-9a-f]+\)$/i);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL MAP RETURN ANYTH
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>@filtered = map {s/&amp;nbsp;//g; $_} @outdata;<br/></code></pre><br/><br/><p>The problem is the s operator in perl modifies $_ but actually returns the number of changes it made. So, the extra $_ at the end causes perl to return the modified string for each element of @outdata.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF A VARIABL HA A NUMER VALU IN PERL
    </pattern>
    <template>
<![CDATA[<p>Use <code>Scalar::Util::looks_like_number()</code> which uses the internal Perl C API's looks_like_number() function, which is probably the most efficient way to do this.</p><br/><br/><h2>Example:</h2><br/><br/><pre><code>#!/usr/local/bin/perl<br/><br/>use warnings;<br/>use strict;<br/><br/>use Scalar::Util qw(looks_like_number);<br/><br/>my @exprs = qw(1 5.25 0.001 1.3e8 foo bar 1dd);<br/><br/>foreach my $expr (@exprs) {<br/>    print "$expr is", looks_like_number($expr) ? '' : ' not', " a number\n";<br/>}<br/></code></pre><br/><br/><p>Gives this output:</p><br/><br/><pre><code>1 is a number<br/>5.25 is a number<br/>0.001 is a number<br/>1.3e8 is a number<br/>foo is not a number<br/>bar is not a number<br/>1dd is not a number<br/></code></pre><br/><br/><h2>see also:</h2><br/><br/><pre><code>perldoc Scalar::Util<br/>perldoc perlapi<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST STDIN WITHOUT BLOCK IN PERL
    </pattern>
    <template>
<![CDATA[<p>The Perl built-in is <a href="http://perldoc.perl.org/functions/select.html" rel="nofollow"><code>select()</code></a>, which is a pass-through to the <code>select()</code> system call, but for sane people I recommend <a href="http://search.cpan.org/dist/IO/lib/IO/Select.pm" rel="nofollow"><code>IO::Select</code></a>.</p><br/><br/><p>Code sample:</p><br/><br/><pre><code>#!/usr/bin/perl<br/><br/>use IO::Select;<br/><br/>$s = IO::Select-&gt;new();<br/>$s-&gt;add(\*STDIN);<br/><br/>while (++$i) {<br/>  print "Hiya $i!\n";<br/>  sleep(5);<br/>  if ($s-&gt;can_read(.5)) {<br/>    chomp($foo = &lt;STDIN&gt;);<br/>    print "Got '$foo' from STDIN\n";<br/>  }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL S SYSTEM ( ) PRINT THE COMMAND THAT IT S RUN
    </pattern>
    <template>
<![CDATA[<p>As I understand, system() will print the result of the command, but not assign it. Eg.</p><br/><br/><pre><code>[daniel@tux /]$ perl -e '$ls = system("ls"); print "Result: $ls\n"'<br/>bin   dev  home  lost+found  misc  net  proc  sbin     srv  System  tools  var<br/>boot  etc  lib   media       mnt   opt  root  selinux  sys  tmp     usr<br/>Result: 0<br/></code></pre><br/><br/><p>Backticks will capture the output of the command and not print it:</p><br/><br/><pre><code>[daniel@tux /]$ perl -e '$ls = `ls`; print "Result: $ls\n"'<br/>Result: bin<br/>boot<br/>dev<br/>etc<br/>home<br/>lib<br/></code></pre><br/><br/><p>etc...</p><br/><br/><p><strong>Update:</strong> If you want to print the name of the command being system()'d as well, I think <a href="http://stackoverflow.com/questions/17225/echo-system-commands-to-terminal-in-perl#17304" rel="nofollow">Rudd</a>'s approach is good. Repeated here for consolidation:</p><br/><br/><pre><code>sub execute {<br/>    my $cmd = shift;<br/>    print "$cmd\n";<br/>    system($cmd);<br/>}<br/><br/>my $cmd = $ARGV[0];<br/>execute($cmd);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN THE CONTENT OF A DIRECTORI IN PERL
    </pattern>
    <template>
<![CDATA[<pre><code>opendir(D, "/path/to/directory") || die "Can't opedir: $!\n";<br/>while (my $f = readdir(D)) {<br/>  print "\$f = $f\n";<br/>}<br/>closedir(D);<br/></code></pre><br/><br/><p>EDIT: Oh, sorry, missed the "into an array" part:</p><br/><br/><pre><code>my $d = shift;<br/><br/>opendir(D, "$d") || die "Can't opedir $d: $!\n";<br/>my @list = readdir(D);<br/>closedir(D);<br/><br/>foreach my $f (@list) {<br/>  print "\$f = $f\n";<br/>}<br/></code></pre><br/><br/><p>EDIT2: Most of the other answers are valid, but I wanted to comment on <a href="http://stackoverflow.com/questions/22566/how-do-i-read-in-the-contents-of-a-directory-in-perl#24436" rel="nofollow">this answer</a> specifically, in which this solution is offered:</p><br/><br/><pre><code>opendir(DIR, $somedir) || die "can't opendir $somedir: $!";<br/>@dots = grep { (!/^\./) &amp;&amp; -f "$somedir/$_" } readdir(DIR);<br/>closedir DIR;<br/></code></pre><br/><br/><p>First, to document what it's doing since the poster didn't, it's passing the returned list from readdir() through a grep() that only returns those values that are files (as opposed to dirs, devices, named pipes, etc) and that do not begin with a dot (which makes the list name @dots misleading, but that's due to the change he made when copying it over from the readdir() documentation).  Since it limits the contents of the directory it returns I don't think it's technically a correct answer to this question, but it illustrates a common idiom used to filter filenames in perl and I thought it would be valuable to document.  Another example seen a lot is:</p><br/><br/><pre><code>@list = grep !/^\.\.?$/, readdir(D);<br/></code></pre><br/><br/><p>This snippet reads all contents from the dir handle D <strong>except</strong> '.' and '..', since those are very rarely desired to be used in the listing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM A PERL SUBSTITUT ON A STRING WHILE KEEP THE ORIGIN
    </pattern>
    <template>
<![CDATA[<p>This is the idiom I've always used to get a modified copy of a string without changing the original:</p><br/><br/><pre><code>($new = $original) =~ s/foo/bar/;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FETCH WIKIPEDIA PAGE WITH LWP SIMPL
    </pattern>
    <template>
<![CDATA[<p>Apparently Wikipedia blocks LWP::Simple requests: <a href="http://www.perlmonks.org/?node_id=695886" rel="nofollow">http://www.perlmonks.org/?node_id=695886</a></p><br/><br/><p>The following works instead:</p><br/><br/><pre><code>#!/usr/bin/perl<br/>use strict;<br/>use LWP::UserAgent;<br/><br/>my $url = "http://en.wikipedia.org/wiki/Stack_overflow";<br/><br/>my $ua = LWP::UserAgent-&gt;new();<br/>my $res = $ua-&gt;get($url);<br/><br/>print $res-&gt;content;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONNECT TO MY CA SERVER WITH PERL S AUTHCA
    </pattern>
    <template>
<![CDATA[<p>As usually happens when I post questions like this, I found the problem.  It turns out the <a href="http://search.cpan.org/dist/Crypt-SSLeay" rel="nofollow">Crypt::SSLeay</a> module was not installed or at least not up to date.  Of course the error messages didn't give me any clues.  Updating it and all the problems go away and things are working fine now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FASTEST WAY TO DETERMIN A FULL URL FROM A REL URL ( GIVEN A BASE URL )
    </pattern>
    <template>
<![CDATA[<p>The following code should work.</p><br/><br/><pre><code>$uri = URI-&gt;new_abs( $str, $base_uri )<br/></code></pre><br/><br/><p>You should also take a look at <a href="http://search.cpan.org/dist/URI/URI.pm" rel="nofollow">the URI page on search.cpan.org</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRACT DATA FROM A FILEMAK PRO DATABAS IN A SCRIPT
    </pattern>
    <template>
<![CDATA[<p>It has been a <strong>really</strong> long time since I did anything with FileMaker Pro, but I know that it does have capabilities for an ODBC (and JDBC) connection to be made to it (however, I don't know how, or if, that translates to the linux/perl/python world though).  </p><br/><br/><p>This article shows how to share/expose your FileMaker data via ODBC &amp; JDBC:<br /><br/><a href="http://www.filemaker.com/help/15-Using%20ODBC2.html" rel="nofollow">Sharing FileMaker Pro data via ODBC or JDBC</a>   </p><br/><br/><p>From there, if you're able to create an ODBC/JDBC connection you could query out data as needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATCH ALL HTML TAG EXCEPT P AND P
    </pattern>
    <template>
<![CDATA[<p>I came up with this:</p><br/><br/><pre><code>&lt;(?!\/?p(?=&gt;|\s.*&gt;))\/?.*?&gt;<br/><br/>x/<br/>&lt;   		# Match open angle bracket<br/>(?! 		# Negative lookahead (Not matching and not consuming)<br/>    \/? 	# 0 or 1 /<br/>    p   		# p<br/>    (?= 	# Positive lookahead (Matching and not consuming)<br/>    &gt;		# &gt; - No attributes<br/>        |		# or<br/>    \s		# whitespace<br/>    .*		# anything up to <br/>    &gt;		# close angle brackets - with attributes<br/>    )   		# close positive lookahead<br/>)   		# close negative lookahead<br/>    		# if we have got this far then we don't match<br/>    		# a p tag or closing p tag<br/>    		# with or without attributes<br/>\/? 		# optional close tag symbol (/)<br/>.*? 		# and anything up to<br/>&gt;   		# first closing tag<br/>/<br/></code></pre><br/><br/><p>This will now deal with p tags with or without attributes and the closing p tags, but will match pre and similar tags, with or without attributes.</p><br/><br/><p>It doesn't strip out attributes, but my source data does not put them in.  I may change this later to do this, but this will suffice for now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELEMENT ATTRIBUT WITH PERL
    </pattern>
    <template>
<![CDATA[<p><code>$item</code> is a hashref that looks like this:</p><br/><br/><pre><code>$item = {<br/>    'RunningTime'  =&gt; {'content' =&gt; '90', 'Units' =&gt; 'minutes'},<br/>    'ProductGroup' =&gt; 'DVD'<br/>};<br/></code></pre><br/><br/><p>Therefore you can get the running time like this:</p><br/><br/><pre><code>$RunningTime = $item-&gt;{RunningTime}-&gt;{content}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XML PARSER WITH STYLE OBJECTS
    </pattern>
    <template>
<![CDATA[<p>In all cases here is actual code that runs ... doesn't mean much but produces output and hopefully can get you started ...</p><br/><br/><pre><code>use XML::Parser;<br/><br/>package MyNode::inner;<br/>	sub doSomething {<br/>	  my $self = shift;<br/>	  print "This is an inner node containing : ";<br/>	  print $self-&gt;{Kids}-&gt;[0]-&gt;{Text};<br/>	  print "\n";<br/>	}<br/>package MyNode::Characters;<br/>	sub doSomething {}<br/>package MyNode::foo;<br/>	sub doSomething {<br/>	  my $self = shift;<br/>	  print "This is an external node\n";<br/>	  for $kid (@ { $self-&gt;{Kids} }) {<br/>		$kid-&gt;doSomething();<br/>	  }<br/>	}<br/><br/>package main;<br/><br/>my $p = XML::Parser-&gt;new(Style =&gt; 'Objects', Pkg =&gt; 'MyNode');<br/>my $tree = $p-&gt;parsefile('foo.xml');<br/>for (@$tree) {<br/>	$_-&gt;doSomething();<br/>}<br/></code></pre><br/><br/><p>with foo.xml</p><br/><br/><pre><code> &lt;foo&gt; &lt;inner&gt;some text&lt;/inner&gt; &lt;inner&gt;something else&lt;/inner&gt;&lt;/foo&gt;<br/></code></pre><br/><br/><p>which outputs</p><br/><br/><pre><code>&gt;perl -w "tree.pl"     <br/>This is an external node<br/>This is an inner node containing : some text<br/>This is an inner node containing : something else<br/></code></pre><br/><br/><p>Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCK A FILE IN PERL
    </pattern>
    <template>
<![CDATA[<p>If you end up using flock, here's some code to do it:</p><br/><br/><pre><code>use Fcntl ':flock'; # Import LOCK_* constants<br/><br/># We will use this file path in error messages and function calls.<br/># Don't type it out more than once in your code.  Use a variable.<br/>my $file = '/path/to/some/file';<br/><br/># Open the file for appending.  Note the file path is quoted<br/># in the error message.  This helps debug situations where you<br/># have a stray space at the start or end of the path.<br/>open(my $fh, '&gt;&gt;', $file) or die "Could not open '$file' - $!";<br/><br/># Get exclusive lock (will block until it does)<br/>flock($fh, LOCK_EX) or die "Could not lock '$file' - $!";<br/><br/># Do something with the file here...<br/><br/># Do NOT use flock() to unlock the file if you wrote to the<br/># file in the "do something" section above.  This could create<br/># a race condition.  The close() call below will unlock the<br/># file for you, but only after writing any buffered data.<br/><br/># In a world of buffered i/o, some or all of your data may not <br/># be written until close() completes.  Always, always, ALWAYS <br/># check the return value of close() if you wrote to the file!<br/>close($fh) or die "Could not write '$file' - $!";<br/></code></pre><br/><br/><p>Some useful links:</p><br/><br/><ul><br/><li><a href="http://www.perlmonks.org/?node_id=7058" rel="nofollow">PerlMonks file locking tutorial</a> (somewhat old)</li><br/><li><a href="http://perldoc.perl.org/functions/flock.html" rel="nofollow"><code>flock()</code> documentation</a></li><br/></ul><br/><br/><p>In response to your added question, I'd say either place the lock on the file or create a file that you call 'lock' whenever the file is locked and delete it when it is no longer locked (and then make sure your programs obey those semantics).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLEAR CLASS DBI S INTERN CACH
    </pattern>
    <template>
<![CDATA[<p>The "<a href="http://wiki.class-dbi.com/wiki/Common_problems" rel="nofollow">common problems</a>" page on the <a href="http://wiki.class-dbi.com/wiki" rel="nofollow">Class::DBI wiki</a> has a <a href="http://wiki.class-dbi.com/wiki/Common_problems#Old_data_due_to_object_index" rel="nofollow">section</a> on this subject.  The simplest solution is to disable the live object index entirely using:</p><br/><br/><pre><code>$Class::DBI::Weaken_Is_Available = 0;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL AND ORACL ADVANC QUEU
    </pattern>
    <template>
<![CDATA[<p>This <a href="http://www.stanford.edu/dept/itss/docs/oracle/9i/appdev.920/a96587/qintro.htm#65422" rel="nofollow">Introduction to Oracle Advanced Queuing</a> states that you can interface to it through "Internet access using HTTP, HTTPS, and SMTP" so it should be straightforward to do that using a Perl script.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ARI TREE IMPLEMENT IN PERL
    </pattern>
    <template>
<![CDATA[<p>Adding to what Matthew already said, it looks like the following modules would be suitable:</p><br/><br/><p><a href="http://search.cpan.org/perldoc?Tree::Nary" rel="nofollow">Tree::Nary</a><br /><br/><a href="http://search.cpan.org/perldoc?Tree::Simple" rel="nofollow">Tree::Simple</a><br /><br/><a href="http://search.cpan.org/perldoc?Tree" rel="nofollow">Tree</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELEG ZIP TO INTERLEAV TWO LIST IN PERL 5
    </pattern>
    <template>
<![CDATA[<p>Assuming you have exactly two lists and they are exactly the same length, here is a solution originally by merlyn (Randal Schwartz), who called it perversely perlish:</p><br/><br/><pre><code>sub zip2 {<br/>    my $p = @_ / 2; <br/>    return @_[ map { $_, $_ + $p } 0 .. $p - 1 ];<br/>}<br/></code></pre><br/><br/><p>What happens here is that for a 10-element list, first, we find the pivot point in the middle, in this case 5, and save it in <code>$p</code>. Then we make a list of indices up to that point, in this case 0 1 2 3 4. Next we use <code>map</code> to pair each index with another index that's at the same distance from the pivot point as the first index is from the start, giving us (in this case) 0 5 1 6 2 7 3 8 4 9. Then we take a slice from <code>@_</code> using that as the list of indices. This means that if <code>'a', 'b', 'c', 1, 2, 3</code> is passed to <code>zip2</code>, it will return that list rearranged into <code>'a', 1, 'b', 2, 'c', 3</code>.</p><br/><br/><p>This can be written in a single expression <a href="#100082" rel="nofollow">along ysth's lines</a> like so:</p><br/><br/><pre><code>sub zip2 { @_[map { $_, $_ + @_/2 } 0..(@_/2 - 1)] }<br/></code></pre><br/><br/><p>Whether you'd want to use either variation depends on whether you can see yourself remembering how they work, but for me, it was a mind expander.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRACT DATA FROM A MS PROJECT .MPP FILE
    </pattern>
    <template>
<![CDATA[<p>I would recommend using MPXJ (<a href="http://mpxj.sf.net" rel="nofollow">mpxj.sf.net</a>) to extract data from Microsoft Project files. Don't be put off by the fact that it was originally a Java library - the current release of MPXJ includes native .net dlls as well as the original Java JAR file, thanks to the magic of IKVM.</p><br/><br/><p>Disclaimer: I maintain MPXJ.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNICOD SUPPORT
    </pattern>
    <template>
<![CDATA[<p>Have a look at this: <a href="http://www.icu-project.org/" rel="nofollow" title="International Components for Unicode">http://www.icu-project.org/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERL DATABAS INTERFAC SHOULD I USE
    </pattern>
    <template>
<![CDATA[<p>If you're just looking for low-level database access&mdash;you feed it and SQL string (optionally with place-holders and bind values) and it runs your query and gives you back the results&mdash;then yes, <a href="http://search.cpan.org/dist/DBI/" rel="nofollow">DBI</a> is your best bet, by far.</p><br/><br/><p>If you want a higher-level interface (i.e., one that requires little or no use of raw SQL in your code) then there are several ORMs (<a href="http://en.wikipedia.org/wiki/Object-relational_mapping" rel="nofollow">object-relational mappers</a>) available for Perl.  Check out the <a href="http://www.perlfoundation.org/perl5/index.cgi?orm" rel="nofollow">ORM</a> page at the Perl Foundation's Perl 5 wiki for more information and links.  (If you want help choosing among them or have specific questions, you could narrow the focus of this question or perhaps post another one.)</p><br/>]]>    </template>
  </category>
</aiml>
