<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      CALCUL SOMEON S AGE IN C #
    </pattern>
    <template>
<![CDATA[<p>For some reason Jeff's code didn't seem simple enough. To me this seems simpler and easier to understand:</p><br/><br/><pre><code>DateTime now = DateTime.Today;<br/>int age = now.Year - bday.Year;<br/>if (bday &gt; now.AddYears(-age)) age--;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALCUL REL TIME
    </pattern>
    <template>
<![CDATA[<p>Jeff, <a href="http://stackoverflow.com/questions/11/how-do-i-calculate-relative-time/12#12">your code</a> is nice but could be clearer with constants (as suggested in Code Complete).</p><br/><br/><pre><code>const int SECOND = 1;<br/>const int MINUTE = 60 * SECOND;<br/>const int HOUR = 60 * MINUTE;<br/>const int DAY = 24 * HOUR;<br/>const int MONTH = 30 * DAY;<br/><br/>if (delta &lt; 0)<br/>{<br/>  return "not yet";<br/>}<br/>if (delta &lt; 1 * MINUTE)<br/>{<br/>  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";<br/>}<br/>if (delta &lt; 2 * MINUTE)<br/>{<br/>  return "a minute ago";<br/>}<br/>if (delta &lt; 45 * MINUTE)<br/>{<br/>  return ts.Minutes + " minutes ago";<br/>}<br/>if (delta &lt; 90 * MINUTE)<br/>{<br/>  return "an hour ago";<br/>}<br/>if (delta &lt; 24 * HOUR)<br/>{<br/>  return ts.Hours + " hours ago";<br/>}<br/>if (delta &lt; 48 * HOUR)<br/>{<br/>  return "yesterday";<br/>}<br/>if (delta &lt; 30 * DAY)<br/>{<br/>  return ts.Days + " days ago";<br/>}<br/>if (delta &lt; 12 * MONTH)<br/>{<br/>  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));<br/>  return months &lt;= 1 ? "one month ago" : months + " months ago";<br/>}<br/>else<br/>{<br/>  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));<br/>  return years &lt;= 1 ? "one year ago" : years + " years ago";<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIABL TIMER IN A CONSOL APPLIC
    </pattern>
    <template>
<![CDATA[<p>You can use something like Console.ReadLine() to block the main thread, so other background threads (like timer threads) will still work. You may also use an <a href="http://msdn.microsoft.com/en-us/library/system.threading.autoresetevent.aspx" rel="nofollow">AutoResetEvent</a> to block the execution, then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATOMI OF A MEMORI LEAK
    </pattern>
    <template>
<![CDATA[<p>The best explanation I've seen is in Chapter 7 of the free <a href="http://codebetter.com/files/folders/codebetter_downloads/entry179694.aspx" rel="nofollow">Foundations of Programming ebook</a>.</p><br/><br/><p>Basically, in .NET a memory leak occurs when referenced objects are rooted and thus cannot be garbage collected. This occurs accidentally when you hold on to references beyond the intended scope.</p><br/><br/><p>You'll know that you have leaks when you start getting outofmemoryexceptions or your memory usage goes up beyond what you'd expect (perfmon has nice memory counters). </p><br/><br/><p>Understanding .NET's memory model is your best way of avoiding it. Specifically, understanding how the garbage collector works and how references work (again, I refer you to chapter 7 of the ebook). Also, be mindful of common pitfalls, probably the most common being events. If object A registered to an event on object B, then object A will stick around until object B disappears because B holds a reference to A. The solution is to unregister your events when you're done. </p><br/><br/><p>Of course, a good memory profile will let you see your object graphs and explore the nesting/referencing of your objects to see where references are coming from and what root object is responsible (<a href="http://www.red-gate.com/products/ants_memory_profiler/index.htm" rel="nofollow">red-gate ants profile</a>, JetBrains dotTrace, <a href="http://memprofiler.com/" rel="nofollow">memprofiler</a> are really good choices, or you can use the text-only windbg and sos, but I'd strongly recommend a commercial/visual product unless you're a real guru).</p><br/><br/><p>I believe unmanaged code is subject to typical memory leaks of unamanged code, except that references shared between the two are managed by the garbage collector. Could be wrong about this last point.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XSD DATASET AND IGNOR FOREIGN KEY
    </pattern>
    <template>
<![CDATA[<p>You can try turning CheckConstraints off on the DataSet (it's in its properties), or altering the properties of that relationship, and change the key to a simple reference - up to you.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNC THE SVN REVIS NUMBER WITH MY ASP.NET WEB SITE
    </pattern>
    <template>
<![CDATA[<P>Looks like Jeff is using <A href="http://confluence.public.thoughtworks.org/display/CCNET/What+is+CruiseControl.NET" rel="nofollow">CruiseControl.NET</A> based on some leafing through the podcast transcripts. This seems to have automated deployment capabilities from source control to production. Might this be where the insertion is happening?</P>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMMAT CREAT A PDF IN MY .NET APPLIC
    </pattern>
    <template>
<![CDATA[<p>Just for completeness - if you represent your data in xml, you can apply an xslt to it and run it through <a href="http://nfop.sourceforge.net/" rel="nofollow">nFOP</a>, and generate a PDF that way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POINT NUMBER PARS IS THERE A CATCH ALL ALGORITHM
    </pattern>
    <template>
<![CDATA[<p>I think the best you can do in this case is to take their input and then show them what you think they meant. If they disagree, show them the format you're expecting and get them to enter it again.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      AND XSD
    </pattern>
    <template>
<![CDATA[<p>I suspect in the general case this is hard; XML Schema allows for some quite bizarre type constructions.  I'm not sure how you would do substitution groups, or extensions to restrictions of types for example.</p><br/><br/><p>However it should be possible to knock something together quite quickly (especially mapping from the classes in System.Xml.Schema) that works for 90% of schemas (i.e. sequence and choice elements with a few simple data types).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCRIPT FUNCTION TO .NET APPLIC
    </pattern>
    <template>
<![CDATA[<p>Oleg Shilo's C# Script solution (at <a href="http://en.wikipedia.org/wiki/The_Code_Project" rel="nofollow">The Code Project</a>) really is a great introduction to providing script abilities in your application.</p><br/><br/><p>A different approach would be to consider a language that is specifically built for scripting, such as <a href="http://en.wikipedia.org/wiki/IronRuby" rel="nofollow">IronRuby</a>, <a href="http://en.wikipedia.org/wiki/IronPython" rel="nofollow">IronPython</a>, or <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29" rel="nofollow">Lua</a>.</p><br/><br/><p>IronPython and IronRuby are both available today.</p><br/><br/><p>For a guide to embedding IronPython read<br/><a href="http://blogs.msdn.com/b/jmstall/archive/2005/09/01/howto-embed-ironpython.aspx" rel="nofollow" title="How to embed IronPython script support in your existing app in 10 easy steps">How to embed IronPython script support in your existing app in 10 easy steps</a>.</p><br/><br/><p>Lua is a scripting language commonly used in games. There is a Lua compiler for .NET, available from CodePlex -- <a href="http://www.codeplex.com/Nua" rel="nofollow" title="Nua is Lua for .net">http://www.codeplex.com/Nua</a></p><br/><br/><p>That codebase is a great read if you want to learn about building a compiler in .NET.</p><br/><br/><p>A different angle altogether is to try <a href="http://en.wikipedia.org/wiki/Windows_PowerShell" rel="nofollow">PowerShell</a>. There are numerous examples of embedding PowerShell into an application -- here's a thorough project on the topic: <br/><a href="http://code.msdn.microsoft.com/PowerShellTunnel/Wiki/View.aspx?title=PowerShellTunnel%20Reference" rel="nofollow" title="PowerShell Tunnel">Powershell Tunnel</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT A LARG APP FROM VISUAL BASIC 6.0 TO VB.NET
    </pattern>
    <template>
<![CDATA[<p>The book on upgrading VB6 to VB.NET recommended by Jonathan is useful, but you don't <strong>have</strong> to <strong>buy</strong> it - it's available as a <a href="http://msdn.microsoft.com/en-us/vbrun/ms788236.aspx" rel="nofollow">free download</a> from Microsoft's web site.</p><br/><br/><p>My advice is don't underestimate the effort of conversion - be very cautious about embarking on a rewrite. It's a common pitfall to start out optimistically, make good early progress fixing some of the well-known flaws in the old architecture, and then get bogged down in the functionality that you've just been taking for granted for years. At this point your management begin to get twitchy and everything can get very uncomfortable. </p><br/><br/><p>...and here's a blog post by a Microsofty that <a href="http://blogs.msdn.com/goto100/archive/2008/11/03/rewrite-vs-migrate-vs-reuse-vs-replace.aspx" rel="nofollow">agrees with me</a>:</p><br/><br/><blockquote><br/>  <p>Many companies I worked with in the early days of .NET looked first at rewriting driven in part by a strong desire to improve the underlying architecture and code structures at the same time as they moved to .NET. Unfortunately many of those projects ran into difficulty and several were never completed. The problem they were trying to solve was too large</p><br/></blockquote><br/><br/><p>EDIT: (added this quote from a new excellent Microsoft <a href="http://msdn.microsoft.com/en-gb/dd408373.aspx#migrate" rel="nofollow">webpage</a>).</p><br/><br/><blockquote><br/>  <p>Performing a complete rewrite to .NET is far more costly and difficult to do well [than converting] ... we would only recommend this approach for a small number of situations. </p><br/></blockquote><br/><br/><p>Also the renowned VB expert Dan Appleman <a href="http://www.danappleman.com/?p=35" rel="nofollow" title="says">says</a>: </p><br/><br/><blockquote><br/>  <p>In most cases porting [VB6 to VB.NET] is stupid and a<br/>  complete waste of money.</p><br/></blockquote><br/><br/><p>And Joel <a href="http://www.joelonsoftware.com/articles/fog0000000069.html" rel="nofollow">said</a> a while back:</p><br/><br/><blockquote><br/>  <p>The single worst strategic mistake<br/>  that any software company can make [is<br/>  to] decide to rewrite the code from<br/>  scratch.</p><br/></blockquote><br/><br/><p>A couple of other useful links about migration including links to another free book from Microsoft.<br/><a href="http://msdn.microsoft.com/en-us/vbrun/ms788239.aspx" rel="nofollow">One</a>.<br/><a href="http://blogs.msdn.com/ericnel/archive/2008/04/25/visual-basic-6-migration-to-net.aspx" rel="nofollow">Two</a>. EDIT: New Microsoft <a href="http://msdn.microsoft.com/en-gb/dd408373.aspx" rel="nofollow">page</a> including <a href="http://mms://wm.microsoft.com/ms/uk/msdn/vb6/VB6CampaignV4.wmv" rel="nofollow">screencast with their answer</a> to this question.</p><br/><br/><p>And finally, Microsoft have <strong>not</strong> actually totally dropped support for Visual Basic 6. The <strong>runtime</strong> <strong>is supported</strong> on Windows Vista, Windows 7 and Server 2008 for the full support lifetime of those operating systems. See the <a href="http://msdn.microsoft.com/en-us/vbrun/ms788708.aspx" rel="nofollow">official Microsoft statement</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOMEGROWN CONSUMPT OF WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>No, what you're doing is fine. Don't let those people confuse you.</p><br/><br/><p>If you've written the web services with .net then the reference proxies generated by .net are going to be quite suitable. The situation you describe (where you are both producer and consumer) is the ideal situation.</p><br/><br/><p>If you need to connect to a web services that is <em>unknown</em> at compile time, then you would want a more dynamic approach, where you deduce the 'shape' of the web service. </p><br/><br/><p>But start by using the auto generated proxy class, and don't worry about it until you hit a limitation. And when you do -- come back to stack overflow ;-)</p>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT VERSION NUMBER
    </pattern>
    <template>
<![CDATA[<p>With the "Built in" stuff, you can't, as using 1.0.* or 1.0.0.* will replace the revision and build numbers with a coded date/timestamp, which is usually also a good way. For more info, see the <a href="http://msdn2.microsoft.com/en-us/library/c405shex%28vs.80%29.aspx" rel="nofollow">Assembly Linker</a> Documentation in the /v tag.</p><br/><br/><p>As for automatically incrementing numbers, use the AssemblyInfo Task:</p><br/><br/><p><a href="http://code.msdn.microsoft.com/AssemblyInfoTaskvers" rel="nofollow">http://code.msdn.microsoft.com/AssemblyInfoTaskvers</a></p><br/><br/><p>This can be configured to automatically increment the build number.</p><br/><br/><p>There are 2 Gotchas:</p><br/><br/><ol><br/><li>Each of the 4 numbers in the Version string is limited to 65535. This is a Windows Limitation and unlikely to get fixed.<br/><ul><br/><li><a href="http://blogs.msdn.com/msbuild/archive/2007/01/03/why-are-build-numbers-limited-to-65535.aspx" rel="nofollow">http://blogs.msdn.com/msbuild/archive/2007/01/03/why-are-build-numbers-limited-to-65535.aspx</a></li><br/></ul></li><br/><li>Using with with Subversion requires a small change:<br/><ul><br/><li><a href="http://www.andrewconnell.com/blog/archive/2006/08/29/4078.aspx" rel="nofollow">http://www.andrewconnell.com/blog/archive/2006/08/29/4078.aspx</a></li><br/></ul></li><br/></ol><br/><br/><p>Retreiving the Version number is then quite easy:</p><br/><br/><pre><code>Version v = Assembly.GetExecutingAssembly().GetName().Version;<br/>string About = string.Format(CultureInfo.InvariantCulture, @"YourApp Version {0}.{1}.{2} (r{3})", v.Major, v.Minor, v.Build, v.Revision);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS FOR .NET THAT CAN RUN OFF A NETWORK
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.sqlite.org/" rel="nofollow">SQLite</a> came to my mind while reading your question, and I'm quite sure that it's possible to access it from a network drive <em>if</em> you keep yourself to the constraint of 1 user at a time.</p><br/><br/><p>[edit:] added some more links to get you started with using SQLite with .NET: <br/><a href="http://www.mikeduncan.com/sqlite-on-dotnet-in-3-mins/" rel="nofollow">http://www.mikeduncan.com/sqlite-on-dotnet-in-3-mins/</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST FRAMEWORK ADVIC
    </pattern>
    <template>
<![CDATA[<p>I think NUnit <strong>is</strong> your best bet. With TestDriven.NET, you get great integration within VS.NET. (Resharper also has a unit test runner if you're using it).  NUnit it simple to use and follows an established paradigm. You'll also find plenty of projects/tutorials/guides using it which always helps.</p><br/><br/><p>Your other main choice is probably MBUnit, which is more and more position itself as the BDD framework of choice (in conjunction with Gallio <a href="http://www.gallio.org" rel="nofollow">http://www.gallio.org</a>).</p>]]>    </template>
  </category>
  <category>
    <pattern>
      VFP .NET OLEDB PROVID WORK IN 64 BIT WINDOW
    </pattern>
    <template>
<![CDATA[<p>Have you tried changing the target CPU to x86 instead of "Any CPU" in the advanced compiler options? I know that this solves some problems with other OLEDB providers by forcing the use of the 32-bit version.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW OBJECT INSTANC FROM A TYPE IN C #
    </pattern>
    <template>
<![CDATA[<p>The Activator class within the root System namespace is pretty powerful.</p><br/><br/><p>There are a lot of overloads for passing parameters to the constructor and such. Check out the documentation at: <a href="http://msdn.microsoft.com/en-us/library/system.activator.createinstance.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.activator.createinstance.aspx</a></p><br/><br/><p>Here are some simple examples:</p><br/><br/><pre><code>ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);<br/><br/>ObjectType instance = (ObjectType)Activator.CreateInstance("MyNamespace.ObjectType, MyAssembly");<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS DATE FORMAT DESCRIPTOR
    </pattern>
    <template>
<![CDATA[<p>Here is my current method. Any suggestions?</p><br/><br/><pre><code>Regex singleMToDoubleRegex = new Regex("(?&lt;!m)m(?!m)");<br>Regex singleDToDoubleRegex = new Regex("(?&lt;!d)d(?!d)");<br>CultureInfo currentCulture = CultureInfo.CurrentUICulture;<br><br>// If the culture is netural there is no date pattern to use, so use the default.<br>if (currentCulture.IsNeutralCulture)<br>{<br>    currentCulture = CultureInfo.InvariantCulture;<br>}<br><br>// Massage the format into a more general user friendly form.<br>string shortDatePattern = CultureInfo.CurrentUICulture.DateTimeFormat.ShortDatePattern.ToLower();<br>shortDatePattern = singleMToDoubleRegex.Replace(shortDatePattern, "mm");<br>shortDatePattern = singleDToDoubleRegex.Replace(shortDatePattern, "dd");<br></code></pre>]]>    </template>
  </category>
  <category>
    <pattern>
      UNHANDL EXCEPT HANDLER IN .NET 1.1
    </pattern>
    <template>
<![CDATA[<p>Oh, in WinForms you definitely should be able to get it to work. The only thing you have to watch out for is things happening on different threads.</p><br/><br/><p>I have an old CodeProject article here which should help:</p><br/><br/><p><a href="http://www.codeproject.com/KB/exception/ExceptionHandling.aspx" rel="nofollow">http://www.codeproject.com/KB/exception/ExceptionHandling.aspx</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      OCR LIBRARI
    </pattern>
    <template>
<![CDATA[<p>tessnet (<a href="http://www.pixel-technology.com/freeware/tessnet2/" rel="nofollow">http://www.pixel-technology.com/freeware/tessnet2/</a>) is an open-source .NET OCR engine based on tesseract</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STAT INVALID WHEN USE SAFARI
    </pattern>
    <template>
<![CDATA[<p>I've been doing a little research into this and whilst I'm not entirely sure its the cause I believe it is because Safari is not returning the full result set (hence cropping it).</p><br/><br/><p>I have been in dicussion with another developer and found the following post on Channel 9 as well which recommends making use of the SQL State service to store the viewstate avoiding the postback issue and also page size.</p><br/><br/><p><a href="http://channel9.msdn.com/forums/TechOff/250549-ASPNET-ViewState-flawed-architecture/?CommentID=270477#263702" rel="nofollow">http://channel9.msdn.com/forums/TechOff/250549-ASPNET-ViewState-flawed-architecture/?CommentID=270477#263702</a></p><br/><br/><p>Does this seem like the best solution?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SIZE OF QUEUE T IN .NET
    </pattern>
    <template>
<![CDATA[<p>I've knocked up a basic version of what I'm looking for, it's not perfect but it'll do the job until something better comes along.</p><br/><br/><pre><code>public class LimitedQueue&lt;T&gt; : Queue&lt;T&gt;<br>{<br>    private int limit = -1;<br><br>    public int Limit<br>    {<br>        get { return limit; }<br>        set { limit = value; }<br>    }<br><br>    public LimitedQueue(int limit)<br>        : base(limit)<br>    {<br>        this.Limit = limit;<br>    }<br><br>    public new void Enqueue(T item)<br>    {<br>        if (this.Count &gt;= this.Limit)<br>        {<br>            this.Dequeue();<br>        }<br>        base.Enqueue(item);<br>    }<br>}<br></code></pre>]]>    </template>
  </category>
  <category>
    <pattern>
      NANT STILL SUPPORT AND SUITABL FOR .NET 3.5 VS2008
    </pattern>
    <template>
<![CDATA[<p>If you are quite happy with MSBuild, then I would stick with MSBuild.  This may be one of those cases where the tool you learn first is the one you will prefer.  I started with NAnt and can't quite get used to MSBuild.  I'm sure they will both be around for quite some time.</p><br/><br/><p>There are some fundamental differences between the two, probably best highlighted by <a href="http://forums.msdn.microsoft.com/en-US/msbuild/thread/994761a3-ea9d-40c7-8d4f-4c208b2023f6/" rel="nofollow">this conversation between some NAnt fans and a Microsoftie</a>.</p><br/><br/><p>Interestingly, <a href="http://codebetter.com/blogs/jeremy.miller/default.aspx" rel="nofollow">Jeremy Miller</a> asked the exact opposite question <a href="http://codebetter.com/blogs/jeremy.miller/archive/2007/09/20/is-there-a-good-reason-to-switch-to-msbuild.aspx" rel="nofollow">on his blog</a> last year.  </p>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE LOCK IN C #
    </pattern>
    <template>
<![CDATA[<p>No, unfortunately, and if you think about it, that information would be worthless anyway since the file could become locked the very next second (read: short timespan).</p><br/><br/><p>Why specifically do you need to know if the file is locked anyway? Knowing that might give us some other way of giving you good advice.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      LT.NET
    </pattern>
    <template>
<![CDATA[<p>I think you can find the information you need on this site:<br/><a href="http://altnetpedia.com/OverviewWhatIsIt.ashx" rel="nofollow">http://altnetpedia.com/OverviewWhatIsIt.ashx</a></p><br/><br/><blockquote><br/>  <p>What's It All About? In April of 2007,<br/>  David Laribee coined the phrase<br/>  ALT.NET after reading a post by Scott<br/>  Bellware about the NHibernate Mafia.<br/>  The core message David was keying off<br/>  of was the maintainability of a<br/>  software solution and not the tools<br/>  involved in creating it.</p><br/>  <br/>  <p>ALT.NET means many things to many<br/>  people and the debate will continue<br/>  about what it means to you.</p><br/>  <br/>  <p>David proposed ALT.NET signifies:</p><br/>  <br/>  <ol><br/>  <li>You're the type of developer who uses what works while keeping an eye<br/>  out for a better way.</li><br/>  <li>You reach outside the mainstream to adopt the best of any community:<br/>  Open Source, Agile, Java, Ruby, etc.</li><br/>  <li>You're not content with the status quo. Things can always be<br/>  better expressed, more elegant and<br/>  simple, more mutable, higher quality,<br/>  etc.</li><br/>  <li>You know tools are great, but they only take you so far. It's the<br/>  principles and knowledge that really<br/>  matter. The best tools are those that<br/>  embed the knowledge and encourage the<br/>  principles (e.g. Resharper.)</li><br/>  </ol><br/>  <br/>  <p>Ralph Waldo Emerson wrote "there are<br/>  always two parties; the establishment<br/>  and the movement." If you're ALT.NET,<br/>  you're in the movement. You're shaking<br/>  out the innovation. When the movement<br/>  fails, stalls, or needs improving<br/>  you're there<br/>  starting/finding/supporting that next<br/>  leap forward.</p><br/></blockquote>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST PACKAG
    </pattern>
    <template>
<![CDATA[<p>There are so many it's crazy.  Crazy good, I guess.</p><br/><br/><ul><br/><li>For the conservative types (me), <a href="http://www.nunit.org/" rel="nofollow"><strong>NUnit</strong></a> is still available and still more than capable.</li><br/><li>For the Microsoft-types, <a href="http://msdn.microsoft.com/en-us/vstudio/default.aspx" rel="nofollow"><strong>MSTest</strong></a> is adequate, but slow and clunky compared to Nunit.  It also lacks code coverage without paying the big bucks for the pricey versions of Visual Studio.</li><br/><li>There's also <a href="http://www.mbunit.com/About.aspx" rel="nofollow"><strong>MbUnit</strong></a>.  It's like NUnit, but has nifty features like RowTest (run the same test with different parameters) and Rollback (put the database back like you found it after a test) </li><br/><li>And finally, <a href="http://www.codeplex.com/xunit" rel="nofollow"><strong>xUnit.net</strong></a> is the trendy option with some attitude.</li><br/><li>Oh, and <a href="http://testdriven.net/" rel="nofollow"><strong>TestDriven.NET</strong></a> will give you IDE integration for both Nunit and MBunit.</li><br/></ul><br/><br/><p>I'm sure they're all just fine.  I'd steer away from MSTest though, unless you just enjoy the convenience of having everything in one IDE out of the box.</p><br/><br/><p><a href="http://www.hanselminutes.com/default.aspx?showID=130" rel="nofollow">Scott Hanselman</a> has a podcast on this very topic.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL DATACONTEXT CLASS EVER APPROPRI
    </pattern>
    <template>
<![CDATA[<p>I disagree with John's answer. The DataContext (or Linq to Entities ObjectContext) is more of a "unit of work" than a connection. It manages change tracking, etc. See this blog post for a description:</p><br/><br/><p><a href="http://blogs.msdn.com/dinesh.kulkarni/archive/2008/04/27/lifetime-of-a-linq-to-sql-datacontext.aspx" rel="nofollow">Lifetime of a LINQ to SQL DataContext</a></p><br/><br/><p>The four main points of this blog post are that DataContext:</p><br/><br/><ol><br/><li>Is ideally suited<br/>for a "unit of work" approach </li><br/><li>Is also designed for<br/>"stateless" server operation</li><br/><li>Is not designed for<br/>    Long-lived usage</li><br/><li><br/>    Should be used very carefully after<br/>    any SumbitChanges() operation.</li><br/></ol><br/><br/><p>Considering that, I don't think using more than one DataContext would do any harm- in fact, creating different DataContexts for different types of work would help make your LinqToSql impelmentation more usuable and organized. The only downside is you wouldn't be able to use sqlmetal to auto-generate your dmbl. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST OBJECT TYPE
    </pattern>
    <template>
<![CDATA[<P>would use double.TryParse , has performance benefits.</P>]]>    </template>
  </category>
  <category>
    <pattern>
      SEAL CLASS REALLI OFFER PERFORM BENEFIT
    </pattern>
    <template>
<![CDATA[<p>The JITter will sometimes use non-virtual calls to methods in sealed classes since there is no way they can be extended further.</p><br/><br/><p>There are complex rules regarding calling type, virtual/nonvirtual, and I don't know them all so I can't really outline them for you, but if you google for sealed classes and virtual methods you might find some articles on the topic.</p><br/><br/><p>Note that any kind of performance benefit you would obtain from this level of optimization should be regarded as last-resort, always optimize on the algorithmic level before you optimize on the code-level.</p><br/><br/><p>Here's one link mentioning this: <a href="http://codebetter.com/blogs/patricksmacchia/archive/2008/01/05/rambling-on-the-sealed-keyword.aspx" rel="nofollow">Rambling on the sealed keyword</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      ON THE .NET 2.0 RUNTIM
    </pattern>
    <template>
<![CDATA[<p>There are some "Hacks" that involve using a System.Core.dll from the 3.5 Framework to make it run with .net 2.0, but personally I would not want use such a somewhat shaky foundation.</p><br/><br/><p>See here: <a href="http://weblogs.asp.net/fmarguerie/archive/2007/09/05/linq-support-on-net-2-0.aspx">http://weblogs.asp.net/fmarguerie/archive/2007/09/05/linq-support-on-net-2-0.aspx</a></p><br/><br/><blockquote><br/>  <ol><br/>  <li>Create a new console application</li><br/>  <li>Keep only System and System.Core as referenced assemblies</li><br/>  <li>Set Copy Local to true for System.Core, because it does not exist in .NET 2.0</li><br/>  <li>Use a LINQ query in the Main method. For example the one below.</li><br/>  <li>Build</li><br/>  <li>Copy all the bin output to a machine where only .NET 2.0 is installed</li><br/>  <li>Run</li><br/>  </ol><br/></blockquote><br/><br/><p>(Requires .net 2.0 SP1 and I have no idea if bundling the System.Core.dll violates the EULA)</p>]]>    </template>
  </category>
  <category>
    <pattern>
      BACKGROUND OF A MASTERPAG FROM THE CODE BEHIND OF A CONTENT PAGE
    </pattern>
    <template>
<![CDATA[<p>What I would do for the particular case is:</p><br/><br/><p>i. Define the body as a server side control</p><br/><br/><pre><code>&lt;body runat="server" id="masterpageBody"&gt;<br></code></pre><br/><br/><p>ii. In your content aspx page, register the MasterPage with the register:</p><br/><br/><pre><code>&lt;% MasterPageFile="..." %&gt;<br></code></pre><br/><br/><p>iii. In the Content Page, you can now simply use </p><br/><br/><pre><code>Master.FindControl("masterpageBody")<br></code></pre><br/><br/><p>and have access to the control. Now, you can change whatever properties/style that you like!</p>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT BDD TDD IN .NET 2.0
    </pattern>
    <template>
<![CDATA[<p>We use <a href="http://www.mbunit.com/" rel="nofollow">MbUnit</a> and <a href="http://www.ayende.com/Blog/archive/2007/03/28/Rhino-Mocks-3.0-Released.aspx" rel="nofollow">Rihno Mocks</a> and they prove to work very well together. When doing TDD you will almost certainly need to do some form of dependency injection, while this can be done manually, its worth looking at an IoC container such as <a href="http://www.castleproject.org/container/index.html" rel="nofollow">Castle Windor</a>.</p><br/><br/><p>It well worth looking at John Paul Bodhood's screen casts to get you started. <a href="http://blog.jpboodhoo.com/ScreencastAppliedTestDrivenDevelopmentForWebApplicationsPart3.aspx" rel="nofollow">JPB's Blog</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( NEWTYP ) VS. OBJECT AS NEWTYP
    </pattern>
    <template>
<![CDATA[<p>The former will throw an exception if the source type can't be cast to the target type. The latter will result in sc2 being a null reference, but no exception.</p><br/><br/><p>[Edit]</p><br/><br/><p>My original answer is certainly the most pronounced difference, but as Eric Lippert <a href="http://blogs.msdn.com/ericlippert/archive/2009/10/08/what-s-the-difference-between-as-and-cast-operators.aspx" rel="nofollow">points out</a>, it's not the only one. Other differences include:</p><br/><br/><ul><br/><li>You can't use the 'as' operator to cast to a type that doesn't accept 'null' as a value</li><br/><li>You can't use 'as' to <em>convert</em> things, like numbers to a different representation (float to int, for example).</li><br/></ul><br/><br/><p>And finally, using 'as' vs. the cast operator, you're also saying "I'm not sure if this will succeed." </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET OBFUSC TOOLS STRATEGI
    </pattern>
    <template>
<![CDATA[<p>Back with .Net 1.1 obfuscation was essential: decompiling code was easy, and you could go from assembly, to IL, to C# code and have it compiled again with very little effort.</p><br/><br/><p>Now with .Net 3.5 I'm not at all sure.  Try decompiling a 3.5 assembly; what you get is a long long way from compiling.</p><br/><br/><p>Add the optimisations from 3.5 (far better than 1.1) and the way anonymous types, delegates and so on are handled by reflection (they are a nightmare to recompile). Add lambda expressions, compiler 'magic' like Linq-syntax and <code>var</code>, and C#2 functions like <code>yield</code> (which results in new classes with unreadable names). Your decompiled code ends up a long long way from compilable. </p><br/><br/><p>A professional team with lots of time could still reverse engineer it back again, but then the same is true of any obfuscated code. What code they got out of that would be unmaintainable and highly likely to be very buggy.</p><br/><br/><p>I would recommend key-signing your assemblies (meaning if hackers can recompile one they have to recompile all) but I don't think obfuscation's worth it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT TO NULL NOTH AFTER USE IN .NET
    </pattern>
    <template>
<![CDATA[<P>Karl is absolutely correct, there is no need to set objects to null after use. If an object implements IDisposable, just make sure you call IDisposable.Dispose() when you're done with that object (wrapped in a try..finally, or, a using() block). But even if you don't remember to call Dispose, the finaliser method on the object should be calling Dispose() for you.</P><br/><P>I thought this was a good treatment:</P><br/><P><A href="http://msdn.microsoft.com/en-us/magazine/cc163392.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc163392.aspx</A></P><br/><P>and this</P><br/><P><A href="http://www.marcclifton.com/tabid/79/Default.aspx" rel="nofollow">http://www.marcclifton.com/tabid/79/Default.aspx</A></P><br/><P>There isn't any point in trying to second guess the GC and its management strategies because it's self tuning and opaque. There was a good discussion about the inner workings with Jeffrey Richter on Dot Net Rocks here: <A href="http://www.dotnetrocks.com/default.aspx?showNum=361" rel="nofollow">http://www.dotnetrocks.com/default.aspx?showNum=361</A> and Richters book <A href="http://www.compman.co.uk/scripts/browse.asp?ref=747022" rel="nofollow">CLR via C#</A> chapter 20 has a great treatment: </P>]]>    </template>
  </category>
  <category>
    <pattern>
      C C + + DATA STRUCTUR IN C # FROM A BYTE ARRAY
    </pattern>
    <template>
<![CDATA[<p>From what I can see in that context, you don't need to copy SomeByteArray into a buffer. You simply need to get the handle from SomeByteArray, pin it, copy the IntPtr data using PtrToStructure and then release. No need for a copy.</p><br/><br/><p>That would be:</p><br/><br/><pre><code>NewStuff ByteArrayToNewStuff(byte[] bytes)<br/>{<br/>    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);<br/>    NewStuff stuff = (NewStuff)Marshal.PtrToStructure(<br/>        handle.AddrOfPinnedObject(), typeof(NewStuff));<br/>    handle.Free();<br/>    return stuff;<br/>}<br/></code></pre><br/><br/><p>Generic version:</p><br/><br/><pre><code>T ByteArrayToStructure&lt;T&gt;(byte[] bytes) where T: struct <br/>{<br/>    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);<br/>    T stuff = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(),<br/>        typeof(T));<br/>    handle.Free();<br/>    return stuff;<br/>}<br/></code></pre><br/><br/><p>...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPIN OFF SEVER GUI THREAD ( NOT HALT THE SYSTEM AT APPLICATION.RUN )
    </pattern>
    <template>
<![CDATA[<p><strong>Application.Run</strong> method displays one (or more) forms and initiates the standard message loop which runs until all the forms are closed. You cannot force a return from that method except by closing all your forms or forcing an application shutdown.</p><br/><br/><p>You can, however, pass an <strong>ApplicationContext</strong> (instad of a new Form()) to Application.Run method and ApplicationContext can be used to launch several forms at once. Your application will only end when all of those are closed. See here: <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.application.run.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.windows.forms.application.run.aspx</a></p><br/><br/><p>Also, any forms that you Show non-modally will continue to run alongside your main form, which will enable you to have more than one windows that do not block each other. I believe this is actually what you are trying to accomplish.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      HSL IN .NET
    </pattern>
    <template>
<![CDATA[<p>The color struct provides three methods: GetHue, GetSaturation and GetBrightness.</p><br/><br/><p>Bob Powell wrote an <a href="http://www.bobpowell.net/RGBHSB.htm" rel="nofollow" title="ISO Address">interesting piece on this</a> several years ago.</p><br/><br/><p>Bizarre historical note -- "HSL" (and the related "HSV") are one of the many things originating from Xerox's Palo Alto Research Center (PARC) in the 70's, courtesy of <a href="http://en.wikipedia.org/wiki/Alvy_Ray_Smith" rel="nofollow" title="Bootstrap">Alvy Ray Smith</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRACTIC FOR USE EXTENS METHOD IN .NET
    </pattern>
    <template>
<![CDATA[<p>I would recommend that you check out the following blog article:</p><br/><br/><p><a href="http://blogs.msdn.com/vbteam/archive/2007/03/10/extension-methods-best-practices-extension-methods-part-6.aspx" rel="nofollow">http://blogs.msdn.com/vbteam/archive/2007/03/10/extension-methods-best-practices-extension-methods-part-6.aspx</a></p><br/><br/><p>It has some guidelines for how to use extension methods.</p><br/><br/><p>I wrote it back when I used to work for Microsoft, where I was the guy on the VB compiler team that implemented extension methods.</p><br/><br/><p>-Scott</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE ABSTRACT STATIC METHOD IN C #
    </pattern>
    <template>
<![CDATA[<p>Static methods are not <em>instantiated</em> as such, they're just available without an object reference.</p><br/><br/><p>A call to a static method is done through the class name, not through an object reference, and the IL code to call it will call the abstract method through the name of the class that defined it, not necessarily the name of the class you used.</p><br/><br/><p>Let me show an example.</p><br/><br/><p>With the following code:</p><br/><br/><pre><code>public class A<br>{<br>    public static void Test()<br>    {<br>    }<br>}<br><br>public class B : A<br>{<br>}<br></code></pre><br/><br/><p>If you call B.Test, like this:</p><br/><br/><pre><code>class Program<br>{<br>    static void Main(string[] args)<br>    {<br>        B.Test();<br>    }<br>}<br></code></pre><br/><br/><p>Then the actual code inside the Main method is as follows:</p><br/><br/><pre><code>.entrypoint<br>.maxstack 8<br>L0000: nop <br>L0001: call void ConsoleApplication1.A::Test()<br>L0006: nop <br>L0007: ret <br></code></pre><br/><br/><p>As you can see, the call is made to A.Test, because it was the A class that defined it, and not to B.Test, even though you can write the code that way.</p><br/><br/><p>If you had <em>class types</em>, like in Delphi, where you can make a variable referring to a type and not an object, you would have more use for virtual and thus abstract static methods (and also constructors), but they aren't available and thus static calls are non-virtual in .NET.</p><br/><br/><p>I realize that the IL designers could allow the code to be compiled to call B.Test, and resolve the call at runtime, but it still wouldn't be virtual, as you would still have to write some kind of class name there.</p><br/><br/><p>Virtual methods, and thus abstract ones, are only useful when you're using a variable which, at runtime, can contain many different types of objects, and you thus want to call the right method for the current object you have in the variable. With static methods you need to go through a class name anyway, so the exact method to call is known at compile time because it can't and won't change.</p><br/><br/><p>Thus, virtual/abstract static methods are not available in .NET.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR FAVORIT .NET OBJECT RELAT MAPPER ( ORM )
    </pattern>
    <template>
<![CDATA[<p>Small\Medium Projects: <a href="http://subsonicproject.com/" rel="nofollow">SubSonic</a>.</p><br/><br/><p>It's really really quick to get up and running with it, and has well developed querying built into it.</p><br/><br/><p>Enterprise Projects: <a href="http://www.hibernate.org/343.html" rel="nofollow">NHibernate</a>.</p><br/><br/><p>It makes it much easier to separate your domain model from your data model.</p><br/><br/><p>Ultimately though I still find that there are many occasions where you still have to bend to the will of the database, even using NHibernate.</p><br/><br/><p>In my opinion the only true way to totally separate your domain Model from your database model is to write your own <a href="http://en.wikipedia.org/wiki/Data_Transfer_Object" rel="nofollow">DTO</a>s (essentially <a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object" rel="nofollow">POCO</a>s for passing data around), and then <a href="http://automapper.codeplex.com/" rel="nofollow">map</a> them back to your ORM of choice in your data layer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLITE WITH VISUAL STUDIO 2008 AND SILVERLIGHT
    </pattern>
    <template>
<![CDATA[<p>You should really check out the ADO.Net provider at <a href="http://sqlite.phxsoftware.com/" rel="nofollow">http://sqlite.phxsoftware.com/</a> Top notch stuff.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      GET INNERXML OF AN XELEMENT
    </pattern>
    <template>
<![CDATA[<p>I wanted to see which of these suggested solutions performed best, so I ran some comparative tests. Out of interest, I also compared the LINQ methods to the plain old System.Xml method suggested by Greg. The variation was interesting and not what I expected, with the slowest methods being <strong>more than 3 times slower than the fastest</strong>.</p><br/><br/><p>The results were, ordered fastest to slowest:</p><br/><br/><ol><br/><li>CreateReader - Daniel Straight (0.113 seconds)</li><br/><li>Plain old System.Xml - Greg Hurlman (0.134 seconds)</li><br/><li>Aggregate with string concatenation - Mike Powell (0.324 seconds)</li><br/><li>StringBuilder - Vin (0.333 seconds)</li><br/><li>String.Join on array - Terry (0.360 seconds)</li><br/><li>String.Concat on array - Marcin Kosieradzki (0.364)</li><br/></ol><br/><br/><p><hr></p><br/><br/><p><strong>Method</strong></p><br/><br/><p>I used a single XML document with 20 identical nodes (called 'hint'):</p><br/><br/><pre><code>&lt;hint&gt;<br/>  &lt;strong&gt;Thinking of using a fake address?&lt;/strong&gt;<br/>  &lt;br /&gt;<br/>  Please don't. If we can't verify your address we might just<br/>  have to reject your application.<br/>&lt;/hint&gt;<br/></code></pre><br/><br/><p>The numbers shown as seconds above are the result of extracting the "inner XML" of the 20 nodes, 1000 times in a row, and taking the average (mean) of 5 runs. I didn't include the time it took to load and parse the XML into an XmlDocument (for the System.Xml method) or XDocument (for all the others).</p><br/><br/><p>The LINQ algorithms I used were: <em>(C# - all take an XElement "parent" and return the inner XML string)</em></p><br/><br/><p><strong>CreateReader:</strong></p><br/><br/><pre><code>var reader = parent.CreateReader();<br/>reader.MoveToContent();<br/>return reader.ReadInnerXml();<br/></code></pre><br/><br/><p><strong>Aggregate with string concatenation:</strong></p><br/><br/><pre><code>return parent.Nodes().Aggregate("", (b, node) =&gt; b += node.ToString());<br/></code></pre><br/><br/><p><strong>StringBuilder:</strong></p><br/><br/><pre><code>StringBuilder sb = new StringBuilder();<br/>foreach(var node in parent.Nodes()) {<br/>    sb.Append(node.ToString());<br/>}<br/>return sb.ToString();<br/></code></pre><br/><br/><p><strong>String.Join on array:</strong></p><br/><br/><pre><code>return String.Join("", parent.Nodes().Select(x =&gt; x.ToString()).ToArray());<br/></code></pre><br/><br/><p><strong>String.Concat on array:</strong></p><br/><br/><pre><code>return String.Concat(parent.Nodes().Select(x =&gt; x.ToString()).ToArray());<br/></code></pre><br/><br/><p>I haven't shown the "Plain old System.Xml" algorithm here as it's just calling .InnerXml on nodes.</p><br/><br/><p><hr></p><br/><br/><p><strong>Conclusion</strong></p><br/><br/><p>If performance is important (e.g. lots of XML, parsed frequently), I'd <strong>use Daniel's CreateReader method every time</strong>. If you're just doing a few queries, you might want to use Mike's more concise Aggregate method.</p><br/><br/><p>If you're using XML on large elements with lots of nodes (maybe 100's), you'd probably start to see the benefit of using StringBuilder over the Aggregate method, but not over CreateReader. I don't think the Join and Concat methods would ever be more efficient in these conditions because of the penalty of converting a large list to a large array (even obvious here with smaller lists).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET PROFIL
    </pattern>
    <template>
<![CDATA[<p>I have used <a href="http://www.jetbrains.com/profiler/">JetBrains dotTrace</a> and <a href="http://www.red-gate.com/products/ants_performance_profiler/">Redgate ANTS</a> extensively. They are fairly similar in features and price. They both offer useful performance profiling and quite basic memory profiling.</p><br/><br/><p>dotTrace integrates with Resharper, which is really convenient, as you can profile the performance of a unit test with one click from the IDE. However, dotTrace often seems to give spurious results (e.g. saying that a method took several years to run)</p><br/><br/><p>I prefer the way that ANTS presents the profiling results. It shows you the source code and to the left of each line tells you how long it took to run. dotTrace just has a tree view.</p><br/><br/><p><a href="http://www.eqatec.com/Profiler/">EQATEC profiler</a> is quite basic and requires you to compile special instrumented versions of your assemblies which can then be run in the EQATEC profiler. It is, however, free.</p><br/><br/><p>Overall I prefer ANTS for performance profiling, although if you use Resharper then the integration of dotTrace is a killer feature and means it beats ANTS in usability.</p><br/><br/><p>The free Microsoft CLR Profiler (<a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=13382">.Net framework 2.0</a> / <a href="http://www.microsoft.com/download/en/details.aspx?id=16273">.Net Framework 4.0</a>) is all you need for .NET memory profiling.</p><br/><br/><p><strong>2011 Update:</strong></p><br/><br/><p>The <a href="http://memprofiler.com/">Scitech memory profiler</a> has quite a basic UI but lots of useful information, including some information on unmanaged memory which dotTrace and ANTS lack - you might find it useful if you are doing COM interop, but I have yet to find any profiler that makes COM memory issues easy to diagnose - you usually have to break out <code>windbg.exe</code>.</p><br/><br/><p>The ANTS profiler has come on in leaps and bounds in the last few years, and its memory profiler has some truly useful features which now pushed it ahead of dotTrace as a package in my estimation. I'm lucky enough to have licenses for both, but if you are going to buy one .Net profiler for both performance and memory, make it ANTS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND LONG RUN CODE IN A WINDOW FORM APPLIC
    </pattern>
    <template>
<![CDATA[<p>I appreciate the desire to find free software. However, in this case, I would strongly recommend looking at all options, including commercial products. I tried to play with nProf (which is at version 0.1 I think) and didn't have much luck. Even so, performance profiling an application is a subtle business and is best approached using a powerful, flexible tool. Unless you are working for free, I strongly believe the time you will save using a professional product will far outweigh the cost of a license. And of course, if you are only wanting to profile a single application, each commercial package has a 15 or 30 day trial, more than enough time to pinpoint any issues in an existing application. And if you need profiling support for more than just the one-off project, you're better buying a full strength tool anyway. </p><br/><br/><p>We use the <a href="http://www.red-gate.com/products/ants_profiler/index.htm" rel="nofollow">ANTS profiler</a> from RedGate and have been very happy with it. I have also used <a href="http://memprofiler.com/features.aspx" rel="nofollow">.NET Memory Profiler</a> with excellent results. The cool thing about .NET Memory Profiler is that it can attach to and profile running production applications, which really saved our butts when we had a memory leak in production we couldn't reproduce in our test lab.</p><br/><br/><p>The JetBrains folks <a href="http://www.jetbrains.com/profiler/" rel="nofollow">have a profiler as well called dotTrace</a> which I haven't tried, but I have to believe that if it comes from the JetBrains shop it is probably top notch as well.</p><br/><br/><p>Anyway, my advice is this: try to fix your app within the free trial window of one or an aggregated combination of the three of them (minimum of 45 days free use) and if that isn't enough time, pick your favorite and spring for one of them. You won't be sorry.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      DRIVEN.NET IS NOT RUN MY SETUP METHOD FOR MBUNIT
    </pattern>
    <template>
<![CDATA[<p>No longer an issue with recent versions of Gallio since v3.0.4.  Just make sure to use the 64-bit installer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET
    </pattern>
    <template>
<![CDATA[<BLOCKQUOTE><br/><P>I can see a downside being that you <STRONG>have</STRONG> to run it on Windows</P></BLOCKQUOTE><br/><P>That's actually untrue. The <A href="http://www.mono-project.com/Main_Page" rel="nofollow">Mono Project</A> has made great progress on making .NET applications cross-platform. A client that my company has worked with recently was actually using Mono on Linux servers to run C#.NET Web Services. The system worked out very well and is very stable.</P><br/><P><STRONG>Edit</STRONG>:</P><br/><BLOCKQUOTE><br/><P><A href="http://stackoverflow.com/questions/3999/why-net#4016" rel="nofollow">kevin d wrote</A>: $$$$$$$$$</P></BLOCKQUOTE><br/><P>This is another really good point. Go have a look at the sheer number of .NET job opportunities there are available and how much they usually pay.</P>]]>    </template>
  </category>
  <category>
    <pattern>
      ATIONMANAGER.APPSET PERFORM CONCERN
    </pattern>
    <template>
<![CDATA[<p>since you're using a winforms app, if it's in .net 2.0 there's actually a user settings system (called Properties) that is designed for this purpose. <a href="http://msdn.microsoft.com/en-us/library/aa730869(VS.80).aspx" rel="nofollow">This article on MSDN</a> has a pretty good introduction into this</p><br/><br/><p>If you're still worried about performance then take a look at <a href="http://www.microsoft.com/sql/editions/compact/default.mspx" rel="nofollow">SQL Compact Edition</a> which is similar to SQLite but is the Microsoft offering which I've found plays very nicely with winforms and there's even the ability to <a href="http://geekswithblogs.net/steveclements/archive/2007/11/13/LINQ-to-SQL.compact.aspx" rel="nofollow">make it work with Linq</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS A DICTIONARY.KEY KEY THROUGH A NUMER INDEX
    </pattern>
    <template>
<![CDATA[<p>You can use an <a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.ordereddictionary.aspx" rel="nofollow">OrderedDictionary</a>.</p><br/><br/><blockquote><br/>  <p>Represents a collection of key/value<br/>  pairs that are accessible by the key<br/>  or index.</p><br/></blockquote>]]>    </template>
  </category>
  <category>
    <pattern>
      HIGH AVAIL
    </pattern>
    <template>
<![CDATA[<p>You need to use a layer 4 load balancer in front of the two endpoints. Prob best to stick with a dedicated piece of hardware.</p><br/><br/><p><a href="http://en.wikipedia.org/wiki/Load_balancing_" rel="nofollow">http://en.wikipedia.org/wiki/Load_balancing_</a>(computing)#Relationship<em>with</em>failover</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR VISUAL STUDIO NOT TO CHANG STARTUP PROJECT EVERYTIM I OPEN A FILE FROM ONE OF THE PROJECT
    </pattern>
    <template>
<![CDATA[<p>The way to select a startup project is described in <a href="http://blogs.msdn.com/saraford/default.aspx">Sara Ford's blog "Visual Studio Tip of the Day</a>" (highly recommended). She has a post there about <a href="http://blogs.msdn.com/saraford/archive/2008/07/29/did-you-know-how-to-select-the-startup-project-269.aspx">setting up StartUp projects</a>. Essentially there are 2 ways, the easiest one being right-clicking on the desired project, and choosing "Set As StartUp Project". That prevents other projects from becoming the StartUp project, even if you click on one their files. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I AND MANAG CODE EXPERI
    </pattern>
    <template>
<![CDATA[<p>Have a separate helper EXE that takes command-line params (or pipe to its StandardInput) that does what is required and call that from your main app. This keeps the MAPI stuff outside of your main app's process space. OK, you're still mixing MAPI and .NET but in a very short-lived process. The assumption is that MAPI and the CLR start causing issues with longer-running processes.</p><br/><br/><p>We use Dmitry Streblechenko's superb <a href="http://www.dimastr.com/redemption/">Redemption Data Objects</a> library which allows us to write such "shim" code in JScript and invoke that, which keeps the CLR and MAPI worlds in separate processes, but in a supported fashion.</p><br/><br/><p>@<a href="#18691">Chris Fournier</a> re. writing an unmanaged DLL. This won't work because the issue is mixing MAPI and managed code <em>in the same process</em>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROTOTYP METHOD
    </pattern>
    <template>
<![CDATA[<p>You can't dynamically add methods to existing objects or classes in .NET, except by changing the source for that class.</p><br/><br/><p>You can, however, in C# 3.0, use extension methods, which <em>look</em> like new methods, but are compile-time magic.</p><br/><br/><p>To do this for your code:</p><br/><br/><pre><code>public static class StringExtensions<br>{<br>    public static String trim(this String s)<br>    {<br>        return s.Trim();<br>    }<br>}<br></code></pre><br/><br/><p>To use it:</p><br/><br/><pre><code>String s = "  Test  ";<br>s = s.trim();<br></code></pre><br/><br/><p>This looks like a new method, but will compile the exact same way as this code:</p><br/><br/><pre><code>String s = "  Test  ";<br>s = StringExtensions.trim(s);<br></code></pre><br/><br/><p>What exactly are you trying to accomplish? Perhaps there are better ways of doing what you want?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FOLDER IN A SOLUT MATCH THE NAMESPAC
    </pattern>
    <template>
<![CDATA[<p>Also, note that if you use the built-in templates to add classes to a folder, it will by default be put in a namespace that reflects the folder hierarchy.</p><br/><br/><p>The classes will be easier to find and that alone should be reasons good enough.</p><br/><br/><p>The rules we follow are:</p><br/><br/><ul><br/><li>Project/assembly name is the same as the root namespace, except for the .dll ending</li><br/><li>Only exception to the above rule is a project with a .Core ending, the .Core is stripped off</li><br/><li>Folders equals namespaces</li><br/><li>One type per file (class, struct, enum, delegate, etc.) makes it easy to find the right file</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESOLV A DOMAIN NAME TO AN IP ADDRESS WITH .NET C #
    </pattern>
    <template>
<![CDATA[<pre><code>using System.Net;<br><br>foreach (IPAddress address in Dns.GetHostAddresses("www.google.com"))<br>{<br>   Console.WriteLine(address.ToString());<br>}<br></code></pre>]]>    </template>
  </category>
  <category>
    <pattern>
      BUTTON APPEAR AS IF IT IS PRESS
    </pattern>
    <template>
<![CDATA[<p>One method you can used to obtain this option is by placing a "CheckBox" object and changing its "Appearance" from "Normal" to "Button" this will give you the same functionality that I believe you are looking for.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      TO MULTIPL VERSION ASSEMBL
    </pattern>
    <template>
<![CDATA[<P>Is this what you need?</P><br/><P><A href="http://www.infosysblogs.com/microsoft/2007/04/loading_multiple_versions_of_s.html" rel="nofollow">http://www.infosysblogs.com/microsoft/2007/04/loading_multiple_versions_of_s.html</A></P>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSIST A TREE STRUCTUR TO A DATABAS TABL WITH AUTO INCREMENT ID USE AN ADO.NET DATASET AND A DATAADAPT
    </pattern>
    <template>
<![CDATA[<p>I don't know ADO.net in particular, but most ORMs won't automatically insert the ID of a new record in a relationship.  You'll have to resort to the 2-step process:</p><br/><br/><ol><br/><li>build and save parent</li><br/><li>build and save child with relationship to parent</li><br/></ol><br/><br/><p>The reason that this is difficult for ORMs is because you might have circular dependencies, and it wouldn't know which object it needed to create an ID for first.  Some ORMs are smart enough to figure out those relationships where there are no such circular dependencies, but most aren't.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX LIBRARI FOR SHAREPOINT
    </pattern>
    <template>
<![CDATA[<p>If by WSS application you mean a SharePoint or MOSS site, there are no <strong>free</strong> full-featured AJAX libraries that are specifically designed for MOSS.</p><br/><br/><p>However, the most recent service pack for SharePoint 2007 included some updates to improve compatibility with the standard <a href="http://www.asp.net/ajax/" rel="nofollow">ASP.NET AJAX control suite</a>.</p><br/><br/><p>Telerik's <a href="http://www.telerik.com/products/aspnet-ajax/overview.aspx" rel="nofollow">RadControls</a> are far from free (1000USD per developer seat), but their RichText editor has a <a href="http://www.telerik.com/products/sharepoint/radeditor.aspx" rel="nofollow">MOSS-specific version</a>. Microsoft's official guidance for enterprise deployments is to use the Telerik RadEdit control instead of SharePoint's built-in rich text editor. I can say from experience that it is not bug-free, but if you just plan on using it out of the box, it is pretty slick.</p><br/><br/><p>As far as the rest of Telerik's AJAX controls, implementation inside of MOSS is difficult but possible.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      PLOT LIBRARI FOR .NET
    </pattern>
    <template>
<![CDATA[<p>There's a good post about this <a href="http://weblogs.asp.net/gbarnett/archive/2008/06/03/visualising-data.aspx" rel="nofollow">here</a> and <a href="http://weblogs.asp.net/gbarnett/archive/2008/03/23/free-graphing-libraries-for-net-my-thoughts.aspx" rel="nofollow">here</a>. I have also used NPlot in our last project since it's easier to use.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVIC BACKWARD COMPAT ISSU
    </pattern>
    <template>
<![CDATA[<p>OK, we needed to resolve this issue in the short term, and so we came up with the idea of a "interop", or compatibility layer.</p><br/><br/><p>Baiscally, all we did was added a traditional ASMX web service to the project, and called the WCF service from that using native WCF calls.  We were then able to return the appropriate types back to the client applications without a significant amount of re-factoring work.  I know it was a hacky solution, but it was the best option we had with such a large legacy code-base.  And the added bonus is that it actually works surprisingly well. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROVID ACCESSOR METHOD GETTER SETTER FOR PUBLIC PROTECT COMPON ON A FORM
    </pattern>
    <template>
<![CDATA[<P>"<EM>However, the VS designer doesn't seem to implement such Getters/Setters for those public objects that are components on a form (and therefore does not comply with good programming practice).</EM>"</P><br/><P>If you mean the controls you're dragging and dropping onto the form, these are marked as private instance members and are added to the form's Controls collection. Why would they be otherwise? A form could have forty or fifty controls, it'd be somewhat unnecessary and unwieldy to provide a getter/setter for every control on the form. The designer leaves it up to you to provide delegated access to specific controls via public getter/setters.</P><br/><P>The designer does the right thing here.</P>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE CONNECT STRING IN .NET DLL
    </pattern>
    <template>
<![CDATA[<p>I'm not certain, but I believe you can put it in a config file and encrypt the config file.</p><br/><br/><p>Update: See Jon Galloway's post <a href="http://weblogs.asp.net/jgalloway/archive/2008/04/13/encrypting-passwords-in-a-net-app-config-file.aspx" rel="nofollow">here.</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR PARS LINK FROM A WEBPAG
    </pattern>
    <template>
<![CDATA[<p>((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)</p><br/><br/><p>I took this from <a href="http://regexlib.com/Search.aspx?k=URL" rel="nofollow">regexlib.com</a></p><br/><br/><p>[editor's note: the {1} has no real function in this regex; <a href="http://stackoverflow.com/questions/13470/question-about-specific-regular-expression" rel="nofollow">see this post</a>]</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVENT CALLBACK INTO MY WIN FORM THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>To simplify Simon's code a bit, you could use the built in generic Action delegate.  It saves peppering your code with a bunch of delegate types you don't really need.  Also, in .NET 3.5 they added a params parameter to the Invoke method so you don't have to define a temporary array.</p><br/><br/><pre><code>void SomethingHappened(object sender, EventArgs ea)<br/>{<br/>   if (InvokeRequired)<br/>   {<br/>      Invoke(new Action&lt;object, EventArgs&gt;(SomethingHappened), sender, ea);<br/>      return;<br/>   }<br/><br/>   textBox1.Text = "Something happened";<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPERI OF THE SMART CLIENT SOFTWAR FACTORI
    </pattern>
    <template>
<![CDATA[<p>We used SCSF for a real world app with about 10 developers. It was a steep learning curve to set up and develop a pattern of usage, but once it was set up, introducing new developers to the project was VERY easy. Using CAB and SCSF was very beneficial to our project especially getting each developer up to speed and productive. </p><br/><br/><p>A downfall of SCSF is that it provides ALOT of functionality that may not be used (we probably only used 60% of the functionality).</p><br/><br/><p>I am also using SCSF for a new project and am considering refactoring to PRISM. PRISM allows you to cull the functionality that is not used. If you use WPF, I suggest looking into PRISM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E MAIL NOTIF
    </pattern>
    <template>
<![CDATA[<p>From a high level, yes.  :D  The main thing is some place to store the templates.  A database is a great option unless you're not already using one, then file systems work fine.</p><br/><br/><p>WSIWIG editors (such as fckeditor) work well and give you some good options regarding the features that you allow.</p><br/><br/><p>Some sort of token replacement system is also a good idea if you need it.  For example, if someone puts %FIRSTNAME% in the email template, the code that generates the email can do some simple pattern matching to replace known tokens with other known values that may be dynamic based on user or other circumstances.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      VS 2008 OBJECT DISAPPEAR
    </pattern>
    <template>
<![CDATA[<p>I am also having a number of problems with VS 2008.  Who would guess that I don't ever need to select multiple controls on a web form...</p><br/><br/><p>Anyway, a lot has been fixed in Service Pack 1, which is in Beta currently.  Might be worth installing that.  It has gone a little way to fixing absolute positioning.  This isn't your problem, of course, but your fix might be in there as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARRAY.LENGTH AN INT AND NOT AN UINT
    </pattern>
    <template>
<![CDATA[<P>Unsigned int isn't CLS compliant and would therefore restrict usage of the property to those languages that do implement a UInt. </P><br/><P>Update: See here:</P><br/><P>Framework 1.1</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.71).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.71).aspx</A></P><br/><P>Framework 2.0</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.80).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.80).aspx</A></P>]]>    </template>
  </category>
  <category>
    <pattern>
      UNSIGN INT S NOT CL COMPLIANT
    </pattern>
    <template>
<![CDATA[<P>Not all languages have the concept of unsigned ints. For example VB 6 had no concept of unsigned ints which I suspect drove the decision of the designers of VB7/7.1 not to implement as well (it's implemented now in VB8).</P><br/><P>To quote -</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx</A></P><br/><P><EM>"The CLS was designed to be large enough to include the language constructs that are commonly needed by developers, yet small enough that most languages are able to support it. In addition, any language construct that makes it impossible to rapidly verify the type safety of code was excluded from the CLS so that all CLS-compliant languages can produce verifiable code if they choose to do so."</EM></P><br/><P>Update: I did wonder about this some years back, and whilst I can't see why a UInt wouldn't be type safety verifiable, I guess the CLS guys had to have a cut off point somewhere as to what would be the baseline minimum number of value types supported. Also when you think about the longer term where more and more languages are being ported to the CLR why force them to implement unsigned ints to gain CLS compliance if there is absolutely no concept, ever?</P>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET ELEMENT ON MASTER PAGE FROM A CONTENT PAGE
    </pattern>
    <template>
<![CDATA[<p>I believe you <em>could</em> do this by using this.Master.FindControl or something similar, but you probably shouldn't - it requires the content page to know too much about the structure of the master page.</p><br/><br/><p>I would suggest another method, such as firing an event in the content area that the master could listen for and re-bind when fired.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      3.5 REDISTRIBUT 200 MB OTHER OPTION
    </pattern>
    <template>
<![CDATA[<p>That's one of the sad reasons i'm still targeting .net 2.0 whenever possible :/</p><br/><br/><p>But people don't neccessarily need the full 200 MB Package. There is a 3 MB Bootstrapper which will only download the required components:</p><br/><br/><p><a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=ab99342f-5d1a-413d-8319-81da479ab0d7&amp;DisplayLang=en" rel="nofollow">.net 3.5 SP1 Bootstrapper</a></p><br/><br/><p>However, the worst case scenario is still a pretty hefty download. Also, see <a href="http://blogs.msdn.com/astebner/archive/2008/01/10/7067719.aspx" rel="nofollow">this article</a> for a more detailed explanation on the size and an alternative workaround to the size problem.</p><br/><br/><p>Addition: Since answering this question, Scott Hanselman created <a href="http://www.smallestdotnet.com" rel="nofollow">SmallestDotNet.com</a>, which will determine the smallest required download. Doesn't change the worst case scenario, but is still useful to know.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      # WHI CA N T A LIST STRING OBJECT BE STORE IN A LIST OBJECT VARIABL
    </pattern>
    <template>
<![CDATA[<p>Think of it this way, if you were to do such a cast, and then add an object of type Foo to the list, the list of strings is no longer consistent.  If you were to iterate the first reference, you would get a class cast exception because once you hit the Foo instance, the Foo could not be converted to string!</p><br/><br/><p>As a side note, I think it would be more significant whether or not you can do the reverse cast:</p><br/><br/><pre><code>List&lt;object&gt; ol = new List&lt;object&gt;();<br>List&lt;string&gt; sl;<br>sl = (List&lt;string&gt;)ol;<br></code></pre><br/><br/><p>I haven't used C# in a while, so I don't know if that is legal, but that sort of cast is actually (potentially) useful.  In this case, you are going from a more general class (object) to a more specific class (string) that extends from the general one.  In this way, if you add to the list of strings, you are not violating the list of objects.</p><br/><br/><p>Does anybody know or can test if such a cast is legal in C#?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      WCF VS. STANDARD
    </pattern>
    <template>
<![CDATA[<p>What is a "regular old fashioned web service?" An ASMX service, or are you using WSE as well? ASMX services are not naturally interoperable, don't support WS-* specs, and ASMX is a technology that is aging very quickly. WSE (Web Service Enhancements) services DO add support for WS-* and can be made to be interoperable, but WCF is meant to replace WSE, so you should take the time to learn it. I would say that unless your application is a quick an dirty one-off, you will gain immense flexibility and end up with a better design if you choose WCF. WCF <em>does</em> have a learning curve beyond a [WebMethod] attribute, but the learning curve is over-exaggerated in my opinion, and it is exponentially more powerful and future proof than legacy ASMX services.</p><br/><br/><p>Unless your time line simply cannot tolerate the learning curve, you would be doing yourself a huge favor learning WCF instead of just sticking with ASP.NET Web Services. Applications will only continue to become more and more distributed and interconnected, and WCF is the future of distributed computing on the Microsoft platform.</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/aa738737.aspx" rel="nofollow">Here is a comparison</a> between the two.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      MASTER PAGE
    </pattern>
    <template>
<![CDATA[<p>I'm pretty sure I've only used master pages in the context of ASP.NET MVC so I'm not sure if it differs from web forms but in my experience they are not only excellent but I couldn't imagine not using them.  Master pages are code inheritance to web pages.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      CONSIDER FOR THROW EXCEPT
    </pattern>
    <template>
<![CDATA[<p>@Brad Tutterow</p><br/><br/><p>The exception is not being lost in the first case, it is being passed in to the constructor.  I will agree with you on the rest though, the second approach is a very bad idea because of the loss of stack trace.  When I worked with .NET, I ran into many cases where other programmers did just that, and it frustrated me to no end when I needed to see the true cause of an exception, only to find it being rethrown from a huge try block where I now have no idea where the problem originated.</p><br/><br/><p>I also second Brad's comment that you shouldn't worry about the performance.  This kind of micro optimization is a HORRIBLE idea.  Unless you are talking about throwing an exception in every iteration of a for loop that is running for a long time, you will more than likely not run into performance issues by the way of your exception usage.</p><br/><br/><p>Always optimize performance when you have metrics that indicate you NEED to optimize performance, and then hit the spots that are proven to be the culprit.</p><br/><br/><p>It is much better to have readable code with easy debugging capabilities (IE not hiding the stack trace) rather than make something run a nanosecond faster.</p><br/><br/><p>A final note about wrapping exceptions into a custom exception... this can be a very useful construct, especially when dealing with UIs.  You can wrap every known and reasonable exceptional case into some base custom exception (or one that extends from said base exception), and then the UI can just catch this base exception.  When caught, the exception will need to provide means of displaying information to the user, say a ReadableMessage property, or something along those lines.  Thus, any time the UI misses an exception, it is because of a bug you need to fix, and anytime it catches an exception, it is a known error condition that can and should be handled properly by the UI.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      GET SPEAKER FOR MY USER GROUP
    </pattern>
    <template>
<![CDATA[<p>Ask people directly.  If you know that someone has something interesting they've been working on, or they have some specific or special knowledge that they could share, ask them to give a presentation about it.  If someone has given a presentation at a conference recently, ask them to present it to the group.  (Groups are also great practice for conferences.)  A lot of people who would never volunteer to speak will do so with a bit of gentle nudging.</p><br/><br/><p>You can also get external speakers to come in.  The same things apply.  If someone who lives nearby (or might be traveling in the area) has given a conference presentation, published an interesting article, works on some cool system, etc., ask them to come and present.  Offer them a free dinner for their trouble.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN .NET
    </pattern>
    <template>
<![CDATA[<p><a href="http://silverlight.net/Default.aspx" rel="nofollow" title="BenQ X-Touch">Silverlight</a> springs to mind as an obvious choice if you want to do animation using .NET on the web. It may not cover all platforms but will work in IE and FireFox and on the Mac.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECK BOUNC EMAIL VIA POP3
    </pattern>
    <template>
<![CDATA[<p>I have done a great deal of work handling bounce emails and there different types. If you want to be absolutely sure that the email your looking at is indeed a bounce of a specific kind I highly recommend getting a good filter. I have worked with <a href="http://www.boogietools.com/" rel="nofollow" title="ISO Address">Boogie Tools</a> and it has worked very well. It lets you know what kind of bounce it is, Hard, Soft, Transient or if its even someone trying to unsubscribe. It has a muliple API's including .Net and I found it quite easy to get working. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KNOW A GOOD WORKAROUND FOR THE LACK OF AN ENUM GENER CONSTRAINT
    </pattern>
    <template>
<![CDATA[<p><strong>EDIT: This is now live in version 0.0.0.2 of UnconstrainedMelody.</strong></p><br/><br/><p>(As requested on my <a href="http://msmvps.com/blogs/jon%5Fskeet/archive/2009/09/11/1722426.aspx" rel="nofollow">blog post about enum constraints</a>. I've included the basic facts below for the sake of a standalone answer.)</p><br/><br/><p>The best solution is to wait for me to include it in <a href="http://code.google.com/p/unconstrained-melody/" rel="nofollow">UnconstrainedMelody</a><sup>1</sup>. This is a library which takes C# code with "fake" constraints such as</p><br/><br/><pre><code>where T : struct, IEnumConstraint<br/></code></pre><br/><br/><p>and turns it into</p><br/><br/><pre><code>where T : struct, System.Enum<br/></code></pre><br/><br/><p>via a postbuild step.</p><br/><br/><p>It shouldn't be too hard to write <code>IsSet</code>... although catering for both <code>Int64</code>-based and <code>UInt64</code>-based flags could be the tricky part. (I smell some helper methods coming on, basically allowing me to treat any flags enum as if it had a base type of <code>UInt64</code>.)</p><br/><br/><p>What would you want the behaviour to be if you called</p><br/><br/><pre><code>tester.IsSet(MyFlags.A | MyFlags.C)<br/></code></pre><br/><br/><p>? Should it check that <em>all</em> the specified flags are set? That would be my expectation.</p><br/><br/><p>I'll try to do this on the way home tonight... I'm hoping to have a quick blitz on useful enum methods to get the library up to a usable standard quickly, then relax a bit.</p><br/><br/><p>EDIT: I'm not sure about <code>IsSet</code> as a name, by the way. Options:</p><br/><br/><ul><br/><li>Includes</li><br/><li>Contains</li><br/><li>HasFlag (or HasFlags)</li><br/><li>IsSet (it's certainly an option)</li><br/></ul><br/><br/><p>Thoughts welcome. I'm sure it'll be a while before anything's set in stone anyway...</p><br/><br/><p><hr /></p><br/><br/><p><sup>1</sup> or submit it as a patch, of course...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW DEFAULT PROPERTI VALU FOR INHERIT CONTROL
    </pattern>
    <template>
<![CDATA[<p>In your derived class you need to either override (or shadow using <em>new</em>) the property in question and then re-apply the default value attribute.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER WPF CONTROL THROUGH CODE
    </pattern>
    <template>
<![CDATA[<p>WPF makes use of a funky thing called <a href="http://msdn.microsoft.com/en-us/library/ms749011.aspx" rel="nofollow" title="Jonathan Livingston Seagull">attached properties</a>. So in your XAML you might write this:</p><br/><br/><pre><code>&lt;TextBlock Grid.Row="0" Grid.Column="0" /&gt;<br/></code></pre><br/><br/><p>And this will effectively move the TextBlock into cell (0,0) of your grid.</p><br/><br/><p>In code this looks a little strange. I believe it'd be something like:</p><br/><br/><pre><code>g.Children.Add(tb);<br/>Grid.SetRow(tb, 0);<br/>Grid.SetColumn(tb, 0);<br/></code></pre><br/><br/><p>Have a look at that link above - attached properties make things really easy to do in XAML perhaps at the expense of intuitive-looking code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOUSEDOWN EVENT FOR .NET TEXTBOX
    </pattern>
    <template>
<![CDATA[<p>Looks like you're right. Bummer. No MouseOver event.</p><br/><br/><p>One of the fallbacks that always works with .NET, though, is P/Invoke. Someone already took the time to do this for the .NET CF TextBox. I found this on CodeProject:</p><br/><br/><p><a href="http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx" rel="nofollow" title="Presentation Zen"><a href="http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx" rel="nofollow">http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx</a></a></p><br/><br/><p>Hope this helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALUE BIND SYNTAX IN XAML
    </pattern>
    <template>
<![CDATA[<p>The ElementName property on a Binding is not supported in Silverlight.</p><br/><br/><p>You will notice, if you go into the code behind or inspect the Binding object in class explorer, it doesn't have a property named ElementName.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATTERN QUESTION WHO HA WHAT WHO CALL WHAT
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference#2387" rel="nofollow" title="Presentation Zen">this</a> StackOverflow question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM A .NET SERVIC
    </pattern>
    <template>
<![CDATA[<p>Trust me, you will spend more money trying to search/develop a solution for this as compared to buying a third party component. Do not reinvent the wheel and go for the paid solution.</p><br/><br/><p>Printing is a complex problem and I would love to see the day when better framework support is added for this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTERFAC
    </pattern>
    <template>
<![CDATA[<p>I'm not sure if interfaces are going to help you a lot here. My understanding is that you are breaking a page down into set of "composite" user controls that contain other controls, and you want to decide whether to use properties for setting values. </p><br/><br/><p>I guess this really depends on how the user controls are designed and whether they are being dynamically added to a page etc (one possible scenario). I have a personal preference for specifying stuff in a constructor or using a factory method to create controls. I assume responsibility at creation for making sure that everything is set. My experience with properties is that I'll sometimes forget to set something and not realize my mistake. Your point about setting properties or using a sub, and everything being populated doesn't make a lot of sense to me. If you have some sort of dependency and need something else to be loaded then this could happen irrespective of whether it's a property or sub.</p><br/><br/><p>I would refer to any book on VB.NET/C#/OOP to see the syntax for interfaces. Interfaces basically describe a contract for a class. If you have class A and B and both implement an interface called ITime then both will provide all of the methods defined on ITime. They can still add their own methods but they must at minimum include an implementation of ITime's methods (eg. we might have GetDate(), GetCurrentTime() as methods on ITime). An interface doesn't tell class A or B how those methods should work - just their name, parameters and return type. Lookup inheritance in an OOP book for more information on how interfaces inheritance is different from implementation inheritance.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN PERFORM BENCHMARK COMPAR LINQ
    </pattern>
    <template>
<![CDATA[<p>Rico Mariani is the performance guy at MSFT and he has a nice series on LINQ to SQL performance:</p><br/><br/><ul><br/><li><a href="http://blogs.msdn.com/ricom/archive/2007/06/22/dlinq-linq-to-sql-performance-part-1.aspx" rel="nofollow">part 1</a></li><br/><li><a href="http://blogs.msdn.com/ricom/archive/2007/06/25/dlinq-linq-to-sql-performance-part-2.aspx" rel="nofollow">part 2</a></li><br/><li><a href="http://blogs.msdn.com/ricom/archive/2007/06/29/dlinq-linq-to-sql-performance-part-3.aspx" rel="nofollow">part 3</a></li><br/><li><a href="http://blogs.msdn.com/ricom/archive/2007/07/05/dlinq-linq-to-sql-performance-part-4.aspx" rel="nofollow">part 4</a></li><br/><li><a href="http://blogs.msdn.com/ricom/archive/2007/07/16/dlinq-linq-to-sql-performance-part-5.aspx" rel="nofollow">part 5</a></li><br/></ul><br/><br/><p>Haven't seen anything with perf comparison to the libraries you mention, but this should give you an idea of baseline perf..</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALCUL CRC32 OF A STRING
    </pattern>
    <template>
<![CDATA[<p>This guy seems to have your answer.</p><br/><br/><p><a href="http://damieng.com/blog/2006/08/08/Calculating_CRC32_in_C_and_NET" rel="nofollow">http://damieng.com/blog/2006/08/08/Calculating_CRC32_in_C_and_NET</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPIL LINQ VS NORMAL LINQ
    </pattern>
    <template>
<![CDATA[<p>Short answer: when it's only going to happen once in a long time.</p><br/><br/><p><a href="http://blogs.msdn.com/ricom/archive/2008/01/14/performance-quiz-13-linq-to-sql-compiled-query-cost-solution.aspx" rel="nofollow" title="Using Subversion hooks to send out build emails">Long Answer</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POOL IN .NET SQL SERVER
    </pattern>
    <template>
<![CDATA[<p>The connection pooling built-in to ADO.Net is robust and mature.  I would recommend against attempting to write your own version.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF WORK PATTERN IN .NET
    </pattern>
    <template>
<![CDATA[<p>It sounds like implementing repositories would work really well here. There are good concrete examples in Java that you could port to C# or Visual Basic. Fowler's <a href="http://rads.stackoverflow.com/amzn/click/0321127420" rel="nofollow" title="Patterns of Enterprise Application Architecture">Patterns of Enterprise Application Architecture</a> has a good <a href="http://books.google.com/books?id=FyWZt5DdvFkC&amp;pg=PT211&amp;dq=patterns+of+enterprise+architecture+unit+of+work&amp;ei=m7egSOX_Lof0sQPZ7omeBQ&amp;sig=ACfU3U1bQUl0WtBc3UrGda2ipSvt-RkmyA#PPT211,M1" rel="nofollow">discussion</a> with examples in Java. <a href="http://rads.stackoverflow.com/amzn/click/0321125215" rel="nofollow" title="Domain-Driven Design">Domain-Driven Design</a> has a deeper discussion if you wanted more theory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNHANDL EXCEPT INSTEAD OF CONTAIN ( )
    </pattern>
    <template>
<![CDATA[<p>I would have to say that this is pretty bad practice. Whilst some people might be happy to say that looping through the collection is less efficient to throwing an exception, there is an overhead to throwing an exception. I would also question why you are using a collection to access an item by key when you would be better suited to using a dictionary or hashtable.</p><br/><br/><p>My main problem with this code however, is that regardless of the type of exception thrown, you are always going to be left with the same result.</p><br/><br/><p>For example, an exception could be thrown because the object doesn't exist in the collection, or because the collection itself is null or because you can't cast myCollect[myObject] to aObject.</p><br/><br/><p>All of these exceptions will get handled in the same way, which may not be your intention.</p><br/><br/><p>These are a couple of nice articles on when and where it is usally considered acceptable to throw exceptions:</p><br/><br/><ul><br/><li><a href="http://codebetter.com/blogs/karlseguin/archive/2008/05/29/foundations-of-programming-pt-8-back-to-basics-exceptions.aspx" rel="nofollow">Foundations of Programming</a></li><br/><li><a href="http://www.blackwasp.co.uk/CSharpThrowingExceptions.aspx" rel="nofollow">Throwing exceptions in c#</a></li><br/></ul><br/><br/><p>I particularly like this quote from the second article:</p><br/><br/><blockquote><br/>  <p>It is important that exceptions are<br/>  thrown only when an unexpected or<br/>  invalid activity occurs that prevents<br/>  a method from completing its normal<br/>  function. Exception handling<br/>  introduces a small overhead and lowers<br/>  performance so should not be used for<br/>  normal program flow instead of<br/>  conditional processing. It can also be<br/>  difficult to maintain code that<br/>  misuses exception handling in this<br/>  way.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPTIM
    </pattern>
    <template>
<![CDATA[<p>Here's my list. All of these can be accessed on <strong>Tools->Options</strong> menu:</p><br/><br/><ol><br/><li>Disable F1. (<strong>Environment->Keyboard</strong>) This is probably the best advice that I found somewhere.</li><br/><li>Disable "Animate environment tools" (<strong>Environment->General</strong>).</li><br/><li>Disable Start Page (<strong>Environment->Startup</strong>).</li><br/><li>Disable "Track Active Item in Solution Explorer" (<strong>Projects and Solutions</strong>).</li><br/><li>Disable Navigation Bar (<strong>Text Editor->C#</strong>). I think this is available for every language.</li><br/><li>Set "AutoToolboxPopulate" to false (<strong>Windows Forms Designer</strong>). </li><br/><li>You can set the Code view as the default view when viewing Windows Forms. Just right-click on the cs file and select "Open With...".</li><br/><li>Open Visual Studio using the command line (devenv) rather than using the Start menu. I don't know why but I notice it loads faster.</li><br/><li>Turn off Track Changes. (<strong>Text Editor->Track changes</strong>)</li><br/></ol><br/><br/><p>Basically I just customized <a href="http://iunknown.com/2007/06/vibrant-ink-visual-studio-and-vim-settings.html-0" rel="nofollow">John Lam's settings</a>. It's very minimal. </p><br/><br/><p><strong>Last Resort:</strong></p><br/><br/><ul><br/><li>Reset all settings (<strong>Tools->Import and Export Settings->Reset All Settings</strong>)</li><br/></ul><br/><br/><p><strong>Related articles:</strong></p><br/><br/><ul><br/><li><a href="http://weblogs.asp.net/scottgu/archive/2006/09/22/Tip_2F00_Trick_3A00_-Optimizing-ASP.NET-2.0-Web-Project-Build-Performance-with-VS-2005.aspx" rel="nofollow">Optimizing ASP.NET 2.0 Web Project Build Performance with VS 2005</a></li><br/><li><a href="http://weblogs.asp.net/scottgu/archive/2007/11/01/tip-trick-hard-drive-speed-and-visual-studio-performance.aspx" rel="nofollow">Hard Drive Speed and Visual Studio Performance</a></li><br/><li><a href="http://dotnettipoftheday.org/tips/speedup_visual_studio.aspx" rel="nofollow">Speed up Visual Studio 2005</a></li><br/><li><a href="http://dotnettipoftheday.org/tips/optimize_launch_of_vs2005.aspx" rel="nofollow">Optimize the launch of the Visual Studio 2005</a></li><br/></ul><br/><br/><p>@Orion Edwards:</p><br/><br/><p>I agree. Snippets are really a time saver. Actually there's a snippet editor that you can use and I'm using it for a while now. You can find it <a href="http://www.codeplex.com/SnippetEditor" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WATCH FOR CHANG IN IP ADDRESS STATU
    </pattern>
    <template>
<![CDATA[<p>Check NetworkChange class. It raises an event when a network address changes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMER FORMAT USE STRING.FORMAT
    </pattern>
    <template>
<![CDATA[<p>Loads, stick <code>string.Format</code> into Google :-)</p><br/><br/><p>A quite good tutorial is at <a href="http://idunno.org/archive/2004/14/01/122.aspx" rel="nofollow"><a href="http://idunno.org/archive/2004/14/01/122.aspx" rel="nofollow">http://idunno.org/archive/2004/14/01/122.aspx</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS LINQ TO SQL
    </pattern>
    <template>
<![CDATA[<p>LINQ to SQL only supports 1 to 1 mapping of database tables, views, sprocs and functions available in Microsoft SQL Server.  It's a great API to use for quick data access construction to relatively well designed SQL Server databases.  LINQ2SQL was first released with C# 3.0 and .Net Framework 3.5.</p><br/><br/><p>LINQ to Entities (ADO.Net Entity Framework) is an ORM (Object Relational Mapper) API which allows for a broad definition of object domain models and their relationships to many different ADO.Net data providers.  As such, you can mix and match a number of different database vendors, application servers or protocols to design an aggregated mash-up of objects which are constructed from a variety of tables, sources, services, etc.  ADO.Net Framework was released with the .Net Framework 3.5 SP1.</p><br/><br/><p>This is a good introductory article on MSDN:<br/><a href="http://msdn.microsoft.com/en-us/library/cc161164.aspx" rel="nofollow">Introducing LINQ to Relational Data</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CCUR TICK FROM A TIMER IN C #
    </pattern>
    <template>
<![CDATA[<p>There are three timer classes called 'Timer' in .NET.   It sounds like you're using the Windows Forms one, but actually you might find the System.Threading.Timer class more useful - but be careful because it calls back on a pool thread, so you can't directly interact with your form from the callback.</p><br/><br/><p>Another approach might be to p/invoke to the Win32 multimedia timers - timeGetTime, timeSetPeriod, etc.</p><br/><br/><p>A quick google found this, which might be useful <a href="http://www.codeproject.com/KB/miscctrl/lescsmultimediatimer.aspx" rel="nofollow">http://www.codeproject.com/KB/miscctrl/lescsmultimediatimer.aspx</a></p><br/><br/><p>'Multimedia' (timer) is the buzz-word to search for in this context.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAY MIDI SOUND USE C #
    </pattern>
    <template>
<![CDATA[<p>I think you'll need to p/invoke out to the windows api to be able to play midi files from .net.</p><br/><br/><p>I thought this codeproject article did quite a good job on explaining how to do this:<br/><a href="http://www.codeproject.com/KB/audio-video/vbnetSoundClass.aspx" rel="nofollow" title="http://www.scribd.com/doc/2547864/msnetformattingstrings">vb.net article to play midi files</a></p><br/><br/><p>To rewrite this is c# you'd need the following import statement for mciSendString:</p><br/><br/><pre><code>[DllImport("winmm.dll")] <br/>static extern Int32 mciSendString(String command, StringBuilder buffer, <br/>                                  Int32 bufferSize, IntPtr hwndCallback);<br/></code></pre><br/><br/><p>Hope this is of some help - good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # WIA VERSION 2.0 ON VISTA TO SCAN
    </pattern>
    <template>
<![CDATA[<p>To access WIA, you'll need to add a reference to the COM library, "Microsoft Windows Image Acquisition Library v2.0" (wiaaut.dll).<br/>add a "using WIA;"</p><br/><br/><pre><code>const string wiaFormatJPEG = "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}";<br/>CommonDialogClass wiaDiag = new CommonDialogClass();<br/>WIA.ImageFile wiaImage = null;<br/><br/>wiaImage = wiaDiag.ShowAcquireImage(<br/>        WiaDeviceType.UnspecifiedDeviceType, <br/>        WiaImageIntent.GrayscaleIntent, <br/>        WiaImageBias.MaximizeQuality, <br/>        wiaFormatJPEG, true, true, false);<br/><br/>WIA.Vector vector = wiaImage.FileData;<br/></code></pre><br/><br/><p>(System.Drawing)</p><br/><br/><pre><code>Image i = Image.FromStream(new MemoryStream((byte[])vector.get_BinaryData()));<br/>i.Save(filename)<br/></code></pre><br/><br/><p>Thats a basic way, works with my flatbed/doc feeder. If you need more than one document/page at a time though, there is probably a better way to do it (from what I could see, this only handles one image at a time, although I'm not entirely sure). While it is a WIA v1 doc, Scott Hanselman's <a href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912546.aspx" rel="nofollow">Coding4Fun article on WIA</a> does contain some more info on how to do it for multiple pages, I think (I'm yet to go further than that myself)</p><br/><br/><p>If its for a paperless office system, you might want also check out MODI (Office Document Imaging) to do all the OCR for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABLE VALU SQL FUNCTION FROM .NET
    </pattern>
    <template>
<![CDATA[<p>No because you need to select them.  However you can create a stored proc wrapper.  Which may defeat the point of having a table function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINGER ASSEMBL DEPEND IN C # .NET
    </pattern>
    <template>
<![CDATA[<p>It's likely a transitive reference, where some type method call returns an instance of SuperException boxed ("downcast") as e.g. Exception, but from inspecting the code in the transitively included code, i.e. code from your external method calls, the compiler knows that you need to be able to have information about that type at some point. </p><br/><br/><p>Resharper would tell you where it's the case that you need to add a reference, and you could use Lütz Roeder's aka RedGate's Reflector to scan compiled IL for a reference to this type in two ways: 1) use the search-facility, 2) open each public type you're using and for that one which requires the "ghost" assembly, it will ask you to specify its location.</p><br/><br/><p>This most often happends to me when I reference Castle.Windsor but not Castle.MicroKernel. :p</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      L LEVEL CODE DEBUGG
    </pattern>
    <template>
<![CDATA[<p>Does this help?</p><br/><br/><p><a href="http://debug-companion.com/DebugCompanion.aspx" rel="nofollow">http://debug-companion.com/DebugCompanion.aspx</a></p><br/><br/><p><a href="http://postsharp.blogspot.com/index.html" rel="nofollow">http://postsharp.blogspot.com/index.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3.0 AUTO PROPERTI USE OR NOT
    </pattern>
    <template>
<![CDATA[<p>We use them all the time in Stack Overflow.</p><br/><br/><p>You may also be interested in a discussion of <a href="http://www.codinghorror.com/blog/archives/000654.html" rel="nofollow">Properties vs. Public Variables</a>. IMHO that's really what this is a reaction to, and for that purpose, it's great.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND TYPE ERROR LOAD A FORM IN THE DESIGN
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>when you added the listview, did you add it to the toolbox and then add it to the form?</p><br/></blockquote><br/><br/><p>No, I just edited <code>Main.Designer.cs</code> and changed it from <code>System.Windows.Forms.ListView</code> to <code>MyApp.Controls.SortableListView&lt;Image&gt;</code></p><br/><br/><p>Suspecting it might have been due to the generics led me to actually finding a solution.</p><br/><br/><p>For each class that I need to make a SortableListView for, I defined a 'stub class' like this</p><br/><br/><pre><code>class ImagesListView : SortableListView&lt;Image&gt; { }<br/></code></pre><br/><br/><p>Then made the <code>Main.Designer.cs</code> file refer to these stub classes instead of the <code>SortableListView</code>.</p><br/><br/><p>It now works, hooray!</p><br/><br/><p>Thankfully I am able to do this because all my types are known at compile-time, and I'm only using the <code>SortableListView</code> as a method of reducing duplicate code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SITEMAP ON THE FLI
    </pattern>
    <template>
<![CDATA[<p>Usually you'll use an <a href="http://www.google.com/search?q=HTTPHandler+ASP.NET&amp;spell=1" rel="nofollow">HTTP Handler</a> for this. Given a request for...</p><br/><br/><blockquote><br/>  <p><a href="http://www.yoursite.com/sitemap.axd" rel="nofollow">http://www.yoursite.com/sitemap.axd</a></p><br/></blockquote><br/><br/><p>...your handler will respond with a formatted XML sitemap. Whether that sitemap is generated on the fly, from a database, or some other method is up to the HTTP Handler implementation.</p><br/><br/><p>Here's roughly what it would look like:</p><br/><br/><pre><code>void IHttpHandler.ProcessRequest(HttpContext context)<br/>{<br/>    //<br/>    // Important to return qualified XML (text/xml) for sitemaps<br/>    //<br/>    context.Response.ClearHeaders();<br/>    context.Response.ClearContent();<br/>    context.Response.ContentType = "text/xml";<br/>    //<br/>    // Create an XML writer<br/>    //<br/>    XmlTextWriter writer = new XmlTextWriter(context.Response.Output);<br/>    writer.WriteStartDocument();<br/>    writer.WriteStartElement("urlset", "http://www.sitemaps.org/schemas/sitemap/0.9");<br/>    //<br/>    // Now add entries for individual pages..<br/>    //<br/>    writer.WriteStartElement("url");<br/>    writer.WriteElementString("loc", "http://www.codingthewheel.com");<br/>    // use W3 date format..<br/>    writer.WriteElementString("lastmod", postDate.ToString("yyyy-MM-dd"));<br/>    writer.WriteElementString("changefreq", "daily");<br/>    writer.WriteElementString("priority", "1.0");<br/>    writer.WriteEndElement();<br/>    //<br/>    // Close everything out and go home.<br/>    //<br/>    result.WriteEndElement();<br/>    result.WriteEndDocument();<br/>    writer.Flush();<br/>}<br/></code></pre><br/><br/><p>This code can be improved but that's the basic idea.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LMERG BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>I use ILMerge for almost all of my different applications.  I have it integrated right into the release build process so what I end up with is one exe per application with no extra dll's.  </p><br/><br/><p>You can't ILMerge any C++ assemblies that have native code.<br/>You also can't ILMerge any assemblies that contain XAML for WPF (at least I haven't had any success with that).  It complains at runtime that the resources cannot be located.</p><br/><br/><p>I did write a wrapper executable for ILMerge where I pass in the startup exe name for the project I want to merge, and an output exe name, and then it reflects the dependent assemblies and calls ILMerge with the appropriate command line parameters.  It is much easier now when I add new assemblies to the project, I don't have to remember to update the build script.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE A REST SERVIC CLIENT IN .NET
    </pattern>
    <template>
<![CDATA[<p>My approach was</p><br/><br/><ol><br/><li><p>Write some libraries and interfaces to serialize your objects into REST-compatible XML.<br/>You can't neccessarily just use the built-in serializers, because your service may not accept the same kind of XML that .NET wants to give you.</p><br/><br/><p>Example: When passing booleans to a Rails REST service, <code>"true"</code> gets unserialized as <code>true</code>, whereas <code>"True"</code> (which .NET gives you) unserializes to <code>false</code>.</p></li><br/><li><p>Write some libraries to do the HTTP, wrapping around the basic .NET <code>WebRequest</code> objects.<br/>You might get some mileage out of some third party libraries in this area as it tends to be more standard. I found some issues though, such as this <a href="http://www.simple-talk.com/community/blogs/dana/archive/2006/07/28/1484.aspx" rel="nofollow">lovely bug in the .NET framework</a>, so I'm glad I stuck with the basics.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACKWARD COMPAT ISSU
    </pattern>
    <template>
<![CDATA[<p>One of those instances that you need to edit the WSDL.  For a start a useful tool</p><br/><br/><p><a href="http://codeplex.com/storm" rel="nofollow" title="Unison Home Page"><a href="http://codeplex.com/storm" rel="nofollow">http://codeplex.com/storm</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2.0 CODE CONSUM ASSEMBL COMPIL WITH C # 3.0
    </pattern>
    <template>
<![CDATA[<p>C#3 and .Net 3.5 adds new assemblies, but the IL is unchanged.</p><br/><br/><p>This means that with .Net 2 assemblies you can compile and use C#3, as long as you don't use Linq or anything else that references System.Linq or System.Core</p><br/><br/><p><code>yield</code>, <code>var</code>, lambda syntax, anon types and initialisers are all compiler cleverness. The IL they produce is cross-compatible.</p><br/><br/><p>If you can reference the new assemblies for 3.5 it should all just work.</p><br/><br/><p>There is no new version of ASP.Net - it should still be 2.0.50727 - but you should still compile for 3.5</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CASE INSENSIT STRING
    </pattern>
    <template>
<![CDATA[<p><strong><code>string</code></strong> is a language keyword while <code>System.String</code> is the type it aliases.</p><br/><br/><p>Both compile to exactly the same thing, similarly:</p><br/><br/><ul><br/><li><strong><code>int</code></strong> is <code>System.Int32</code></li><br/><li><strong><code>long</code></strong> is <code>System.Int64</code></li><br/><li><strong><code>float</code></strong> is <code>System.Single</code></li><br/><li><strong><code>double</code></strong> is <code>System.Double</code></li><br/><li><strong><code>char</code></strong> is <code>System.Char</code></li><br/><li><strong><code>byte</code></strong> is <code>System.Byte</code></li><br/><li><strong><code>short</code></strong> is <code>System.Int16</code></li><br/><li><strong><code>ushort</code></strong> is <code>System.UInt16</code></li><br/><li><strong><code>uint</code></strong> is <code>System.UInt32</code></li><br/><li><strong><code>ulong</code></strong> is <code>System.UInt64</code></li><br/></ul><br/><br/><p>I think in most cases this is about code legibility - all the basic system value types have aliases, I think the lower case <code>string</code> might just be for consistency.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRITIC GUI APPLIC ( WINDOWS LINUX )
    </pattern>
    <template>
<![CDATA[<p>First off, I would put some time into trying out a few <a href="http://www.google.com/search?q=VB.NET+to+C%23+converter&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a" rel="nofollow">VB.NET to C# converters</a>.  You're basically porting syntax, and there's no reason to do that by hand if you don't have to.  Sure, you might have to clean up what comes out of the converter, but that's way better than a by-hand conversion.</p><br/><br/><p>Now, as for your questions:</p><br/><br/><blockquote><br/>  <p>1) does it make sense to do a GUI in winforms but the expensive stuff in native, unmanaged C/C++ ?</p><br/></blockquote><br/><br/><p>Not yet.  Wait until you've done the conversion, and then find out where you're actually spending your time.  There's no reason to jump into mixing C/C++ with C# until you find out that it's necessary.  You may find that dropping into unsafe C# is sufficient.  Even that may be unnecessary.  You might just need to optimize algorithms.  Find out what your bottlenecks are and <em>then</em> decide how to fix them.</p><br/><br/><blockquote><br/>  <p>2) any recommendations for a good cross platform windowing kit that would fit for the scenario described above? </p><br/></blockquote><br/><br/><p>I'd be looking into <a href="http://www.mono-project.com" rel="nofollow">mono</a> for sure.  That's really the best you can do if you're going with C#.  It's pretty much either mono or another rewrite in another language when/if you move to Linux.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOOK FOR FROM A USER GROUP
    </pattern>
    <template>
<![CDATA[<p>It's true that some of the talks out there are very rudimentary, unfortunately some times the bulk of your crowd may need that.  I consider myself a novice in a lot of fields, but I've attend talks that I thought were beneath me and still people were asking very basic questions.  Perhaps it would be worth having a bi-monthly user group, one week for entry level and one week for advanced.  It doesn't necessarily have to mean twice the work if you can get someone to help you coordinate a lot of the work will overlap.  On the other hand you might just need to feel out the members of the group and see what their average skill level is and play to that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A PAGE OF RESULT FROM SQL
    </pattern>
    <template>
<![CDATA[<p>On MS SQL Server 2005 and above, <a href="http://msdn.microsoft.com/en-us/library/ms186734.aspx" rel="nofollow" title="I/O management and disk scheduling">ROW_NUMBER()</a> seems to work:</p><br/><br/><p><a href="http://blogs.x2line.com/al/archive/2005/11/18/1323.aspx" rel="nofollow" title="Inside Windows Vista Kernel"><a href="http://blogs.x2line.com/al/archive/2005/11/18/1323.aspx" rel="nofollow">http://blogs.x2line.com/al/archive/2005/11/18/1323.aspx</a></a></p><br/><br/><pre><code>DECLARE @PageNum AS INT;<br/>DECLARE @PageSize AS INT;<br/>SET @PageNum = 2;<br/>SET @PageSize = 10;<br/><br/>WITH OrdersRN AS<br/>(<br/>    SELECT ROW_NUMBER() OVER(ORDER BY OrderDate, OrderID) AS RowNum<br/>          ,OrderID<br/>          ,OrderDate<br/>          ,CustomerID<br/>          ,EmployeeID<br/>      FROM dbo.Orders<br/>)<br/><br/>SELECT * <br/>  FROM OrdersRN<br/> WHERE RowNum BETWEEN (@PageNum - 1) * @PageSize + 1 <br/>                  AND @PageNum * @PageSize<br/> ORDER BY OrderDate<br/>         ,OrderID;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESIGN BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>Option 3 is the best:</p><br/><br/><p>Use Async IO.</p><br/><br/><p>Unless your request processing is complex and heavy, your program is going to spend 99% of it's time waiting for the HTTP requests.</p><br/><br/><p>This is exactly what Async IO is designed for - Let the windows networking stack (or .net framework or whatever) worry about all the waiting, and just use a single thread to dispatch and 'pick up' the results.</p><br/><br/><p>Unfortunately the .NET framework makes it a right pain in the ass. It's easier if you're just using raw sockets or the Win32 api. Here's a (tested!) example using C#3 anyway:</p><br/><br/><pre><code>using System.Net; // need this somewhere<br/><br/>// need to declare an class so we can cast our state object back out<br/>class RequestState<br/>{<br/>	public WebRequest Request { get; set; }<br/>}<br/><br/>static void Main( string[] args )<br/>{<br/>	// stupid cast neccessary to create the request<br/>	HttpWebRequest request = WebRequest.Create( "http://www.stackoverflow.com" ) as HttpWebRequest;<br/><br/>	request.BeginGetResponse(<br/>		(asyncResult) =&gt; { /* callback to be invoked when finished */<br/>			var state = (RequestState)asyncResult.AsyncState; // fetch the request object out of the AsyncState<br/>			var webResponse = state.Request.EndGetResponse( asyncResult ) as HttpWebResponse;<br/><br/>			Debug.Assert( webResponse.StatusCode == HttpStatusCode.OK ); // there we go;<br/><br/>			Console.WriteLine( "Got Response from server:" + webResponse.Server );<br/>		},<br/>		new RequestState { Request = request } /* pass the request through to our callback */ );<br/><br/>	// blah<br/>	Console.WriteLine( "Waiting for response. Press a key to quit" );<br/>	Console.ReadKey();<br/>}<br/></code></pre><br/><br/><p>EDIT:</p><br/><br/><p>In the case of .NET, the 'completion callback' actually gets fired in a ThreadPool thread, not in your main thread, so you will still need to lock any shared resources, but it still saves you all the trouble of managing threads.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT USE THE THREADPOOL IN .NET
    </pattern>
    <template>
<![CDATA[<p>@Eric, I'm going to have to agree with Dean.  Threads are expensive.  You can't assume that your program is the only one running.  When everyone is greedy with resources, the problem multiplies.</p><br/><br/><blockquote><br/>  <p>I prefer to create my threads manually and control them myself. It keeps the code very easy to understand.</p><br/></blockquote><br/><br/><p>That's fine when it's appropriate.  If you need a bunch of worker threads, though, all you've done is make your code more complicated.  Now you have to write code to manage them.  If you just used a thread pool, you'd get all the thread management for free.  And the thread pool provided by the language is very likely to be more robust, more efficient, and less buggy than whatever you roll for yourself.</p><br/><br/><blockquote><br/>  <p>Thread t = new Thread(new ThreadStart(DoSomething));<br /><br/>  t.Start();<br /><br/>  t.Join();  </p><br/></blockquote><br/><br/><p>I hope that you would normally have some additional code in between <code>Start()</code> and <code>Join()</code>.  Otherwise, the extra thread is useless, and you're wasting resources for no reason.</p><br/><br/><blockquote><br/>  <p>People are way too afraid of the resources used by threads. I've never seen creating and starting a thread to take more than a millisecond. There is no hard limit on the number of threads you can create. RAM usage is minimal. Once you have a few hundred threads, CPU becomes an issue because of context switches, so at that point you might want to get fancy with your design.</p><br/></blockquote><br/><br/><p>A millisecond is a <em>long</em> time on modern hardware.  That's 3 million cycles on a 3GHz machine.  And again, you aren't the only one creating threads.  Your threads compete for the CPU along with every other program's threads.  If you use not-quite-too-many threads, and so does another program, then together you've used too many threads.</p><br/><br/><blockquote><br/>  <p>Seriously, don't make life more complex than it needs to be. Don't use the thread pool unless you need something very specific that it offers.</p><br/></blockquote><br/><br/><p>Indeed.  Don't make life more complex.  If your program needs multiple worker threads, don't reinvent the wheel.  Use the thread pool.  That's why it's there.  Would you roll your own string class?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORD DOCUMENT BE CREAT IN C #
    </pattern>
    <template>
<![CDATA[<p>The answer is going to depend slightly upon if the application is running on a server or if it is running on the client machine. If you are running on a server then you are going to want to use one of the XML based office generation formats as there are know issues when <a href="http://support.microsoft.com/kb/257757" rel="nofollow">using Office Automation on a server</a>.</p><br/><br/><p>However, if you are working on the client machine then you have a choice of either <a href="http://msdn.microsoft.com/en-us/office/default.aspx" rel="nofollow">using Office Automation</a> or using the Office Open XML format (see links below), which is supported by Microsoft Office 2000 and up either natively or through service packs. One draw back to this though is that you might not be able to embed some kinds of graphs or images that you wish to show. </p><br/><br/><p>The best way to go about things will all depend sightly upon how much time you have to invest in development. If you go the route of Office Automation there are quite a few good tutorials out there that can be found via Google and is fairly simple to learn. However, the Open Office XML format is fairly new so you might find the learning curve to be a bit higher.</p><br/><br/><p>Office Open XML Iinformation</p><br/><br/><ul><br/><li>Office Open XML - <a href="http://en.wikipedia.org/wiki/Office%5FOpen%5FXML" rel="nofollow">http://en.wikipedia.org/wiki/Office%5FOpen%5FXML</a></li><br/><li>OpenXML Developer - <a href="http://openxmldeveloper.org/default.aspx" rel="nofollow">http://openxmldeveloper.org/default.aspx</a></li><br/><li>Introducing the Office (2007) Open XML File Formats - <a href="http://msdn.microsoft.com/en-us/library/aa338205.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa338205.aspx</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISABL WEBBROWS CLICK SOUND IN YOUR APP ONLI
    </pattern>
    <template>
<![CDATA[<p>I've noticed that if you use WebBrowser.Document.Write rather than WebBrowser.DocumentText then the click sound doesn't happen.</p><br/><br/><p>So instead of this:</p><br/><br/><pre><code>webBrowser1.DocumentText = "&lt;h1&gt;Hello, world!&lt;/h1&gt;";<br/></code></pre><br/><br/><p>try this:</p><br/><br/><pre><code>webBrowser1.Document.OpenNew(true);<br/>webBrowser1.Document.Write("&lt;h1&gt;Hello, world!&lt;/h1&gt;");<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPRESSION.INVOK IN ENTITI FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.albahari.com/nutshell/predicatebuilder.aspx" rel="nofollow">PredicateBuilder</a> and <a href="http://www.albahari.com/nutshell/linqkit.aspx" rel="nofollow">LINQKit</a> now support Entity Framework.</p><br/><br/><p>Sorry, guys, for not doing this earlier!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECENT C # PROFIL OUT THERE
    </pattern>
    <template>
<![CDATA[<p>You can try the following:</p><br/><br/><ul><br/><li><a href="http://nprof.sourceforge.net/Site/Description.html" rel="nofollow">nprof</a> (free but kinda old)</li><br/><li><a href="http://www.softprodigy.com/index.php?option=com_content&amp;view=article&amp;id=9&amp;Itemid=8" rel="nofollow">ProfileSharp</a> (open source)</li><br/><li><a href="http://memprofiler.com/" rel="nofollow">.Net Memory Profiler</a> (really good for memory leaks, there's a trial version)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS ACCESS TEST FROM .NET
    </pattern>
    <template>
<![CDATA[<p>You haven't mentioned what database you are connecting to, however. In SQL Server 2005, from .Net, you can specify a Connection Timeout in your connection string like so:</p><br/><br/><pre><code>server=&lt;server&gt;;database=&lt;database&gt;;uid=&lt;user&gt;;password=&lt;password&gt;;Connect Timeout=3<br/></code></pre><br/><br/><p>This will try to connect to the server and if it doesn't do so in 3 seconds, it will throw a timeout error.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR EXPERI WITH .NET BASE CM
    </pattern>
    <template>
<![CDATA[<p>I'd highly recommend you take a look at <a href="http://www.dotnetnuke.com" rel="nofollow">DotNetNuke</a>, an open-source .NET CMS.  </p><br/><br/><p>I have used it for internal sites, and external sites for both small and large companies.  You'll have thousands of pre-built modules and skins available, plus readily available documentation and support (plus several books specifically for DotNetNuke as well) for developing your own skins and modules.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI ON A DATAT
    </pattern>
    <template>
<![CDATA[<p>You can't query against the <code>DataTable</code>'s <em>Rows</em> collection, since <code>DataRowCollection</code> doesn't implement <code>IEnumerable&lt;T&gt;</code>. You need to use the <code>AsEnumerable()</code> extension for <code>DataTable</code>. Like so:</p><br/><br/><pre><code>var results = from myRow in myDataTable.AsEnumerable()<br/>where myRow.Field&lt;int&gt;("RowNo") == 1<br/>select myRow;<br/></code></pre><br/><br/><p>And as Keith says, you'll need to add a reference to <a href="http://msdn.microsoft.com/en-us/library/system.data.datarowextensions.aspx">System.Data.DataSetExtensions</a></p><br/><br/><p><code>AsEnumerable()</code> returns <code>IEnumerable&lt;DataRow&gt;</code>. If you need to convert <code>IEnumerable&lt;DataRow&gt;</code> to a <code>DataTable</code>, use the <code>CopyToDataTable()</code> extension.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LAYER BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>It really depends on your view of the world - I used to be in the uncoupled camp. The DAL was only there to supply data to the BAL - end of story.</p><br/><br/><p>With emerging technologies such as Linq to SQL and Entity Framework becoming a bit more popular, then the line between DAL and BAL have been blurred a bit. In L2S especially your DAL is quite tightly coupled to the Business objects as the object model has a 1-1 mapping to your database field.</p><br/><br/><p>Like anything in software development there is no right or wrong answer. You need to understand your requirements and future requirments and work from there. I would no more use a Ferrari on the Dakhar rally as I would a Range Rover on a track day.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER FORM IN C #
    </pattern>
    <template>
<![CDATA[<p>Yes you can! Here's a blog post I made a while ago with the trick:</p><br/><br/><p><a href="http://www.madprops.org/blog/designing-generic-forms/" rel="nofollow" title="Bristol University Language Engineering Course">Designing Generic Forms</a></p><br/><br/><p>Edit: Looks like you're already doing it this way. This method works fine so I wouldn't consider it too hacky.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KVM AND LICENS
    </pattern>
    <template>
<![CDATA[<p>There are multiple issues here as ikvm is currently being transitioned away from the GNU classpath system to Sun's OpenJDK.  Both are licensed as GPL+Exceptions to state explicitly that applications which merely use the OpenJDK libraries will not be considered derived works.</p><br/><br/><p>Generally speaking, applications which rely upon components with defined specs such as this do not fall under the GPL anyway.  For example, linking against public POSIX APIs does not trigger GPL reliance in a Linux application, despite the kernel being GPL.  A similar principal will usually (the details can be tricky) apply to replacing Sun's Java with a FOSS/GPL implementation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK DEPEND
    </pattern>
    <template>
<![CDATA[<p>You can still develop applications for the windows desktop using C/C++, eliminating the requirement to the .NET framework, but you'll need to make sure the necessary libraries are already on the system or installed.</p><br/><br/><p>The nice thing about the .NET framework is that Windows XP SP2 and Vista has the 3.0 framework runtime installed by default.</p><br/><br/><p>In a lot of ways, this is Microsoft's "development standard" and has been that way for a while. This allows you to not worry about having a bunch of libraries tacked onto your application. If you're sticking to all of the .NET provided libraries, you wind up only have to worry about deploying your executable, which is a big headache reliever. When you have a bunch of libraries you have to deploy as well, then you start to run into hassles when you write updates, because you have to make sure those updates are pushed out in your existing installer and to all the existing installed apps out there.</p><br/><br/><p>As for "preferred", that always tends to ruffle feathers at times, but there are more and more .NET developers wanted for the web and the desktop at the job hunt sites I tend to visit. 8^D</p><br/><br/><p>EDIT: Many thanks to Orion for pointing out my confusion on the frameworks. You get 3.0 "out the gate if you're on XP SP2 or Vista. Everything else is going to require a simple download or run of Windows Update.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCREMENT REVIS NUMBER DOE N T SHOW UP IN THE ABOUT BOX
    </pattern>
    <template>
<![CDATA[<p>Change the code for the About box to </p><br/><br/><pre><code>Me.LabelVersion.Text = String.Format("Version {0}", My.Application.Deployment.CurrentVersion.ToString)<br/></code></pre><br/><br/><p>Please note that all the other answers are correct for "how do I get my assembly version", not the stated question "how do I show my publish version".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SORT A COMPOSIT COLLECT
    </pattern>
    <template>
<![CDATA[<p>Update: I found a much more elegant solution:</p><br/><br/><pre><code>class MyCompositeObject<br/>{<br/>    DateTime    CreatedDate;<br/>    string      SomeAttribute;<br/>    Object      Obj1;<br/>{<br/>class MyCompositeObjects : List&lt;MyCompositeObject&gt; { }<br/></code></pre><br/><br/><p>I found that due to reflection, the specific type stored in Obj1 is resolved at runtime and the type specific DataTemplate is applied as expected!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANIM IN WINFORM
    </pattern>
    <template>
<![CDATA[<p>In some situations, it's faster and more convenient to not draw using the paint event, but getting the Graphics object from the control/form and painting "on" that. This may give some troubles with opacity/anti aliasing/text etc, but could be worth the trouble in terms of not having to repaint the whole shabang. Something along the lines of:</p><br/><br/><pre><code>private void AnimationTimer_Tick(object sender, EventArgs args)<br/>{<br/>    // First paint background, like Clear(Control.Background), or by<br/>    // painting an image you have previously buffered that was the background.<br/>    animationControl.CreateGraphics().DrawImage(0, 0, animationImages[animationTick++)); <br/>}<br/></code></pre><br/><br/><p>I use this in some Cntrols myself, and have then buffered images to "clear" the bakground with when the object of interest moves or need to be removed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETUP PROJECT CUSTOM DIALOG
    </pattern>
    <template>
<![CDATA[<p>I've always found the custom dialogs in visual studio setup projects to be woefully limited and barely functional.</p><br/><br/><p>By contrast, I normally create custom actions that display winforms gui's for any remotely difficult tasks during setup.  Works really well and you can do just about anything you want by creating a custom action and passing a few parameters across.</p><br/><br/><p>In the dayjob we built a collection of common custom actions for tasks like application config and database creation / script execution to get around custom dialog limitations.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROXI APPLIC
    </pattern>
    <template>
<![CDATA[<p>Why won't any old proxy software work for this?  Why does it need to be an ASP.NET application?  There are TONS of tools out there (both Windows and *nix) that will get the job done quite easily.  Check <a href="http://www.squid-cache.org/" rel="nofollow" title="excanvas">Squid</a> or <a href="http://www.grok.co.uk/netproxy/" rel="nofollow">NetProxy</a> for starters.</p><br/><br/><p>If you need to integrate with IIS, <a href="http://www.iisproxy.net/" rel="nofollow">IISProxy</a> looks like it would do the trick too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST OF RESHARP LIKE PLUGIN FOR VS I SHOULD CONSID
    </pattern>
    <template>
<![CDATA[<p>The other major player would be DevExpress and their CodeRush and Refactor products. <a href="http://www.devexpress.com/Products/Visual_Studio_Add-in/Refactoring/" rel="nofollow" title="excanvas">Found here.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ENDPOINT A SERVIC AND A PORT WHEN WORK WITH WEBSERVIC
    </pattern>
    <template>
<![CDATA[<p>I'd hop over to <a href="http://www.w3.org/TR/wsdl.html" rel="nofollow" title="excanvas"><a href="http://www.w3.org/TR/wsdl.html" rel="nofollow">http://www.w3.org/TR/wsdl.html</a></a> which I think explains Port, Service and Endpoint reasonably well. A locator is an implementation specific mechanism that some WS stacks use to provide access to service endpoints.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIBRARI TO UNZIP ZIP AND RAR FILE
    </pattern>
    <template>
<![CDATA[<p>ZipLib - Free GPL - don't think it does rar though:</p><br/><br/><p><a href="http://www.sharpdevelop.net/OpenSource/SharpZipLib/Default.aspx" rel="nofollow" title="excanvas"><a href="http://sharpdevelop.net/OpenSource/SharpZipLib/Default.aspx" rel="nofollow">http://sharpdevelop.net/OpenSource/SharpZipLib/Default.aspx</a></a></p><br/><br/><p>You can use UnRAR.dll with P/Invoke:</p><br/><br/><p><a href="http://www.rarlab.com/rar_add.htm" rel="nofollow"><a href="http://www.rarlab.com/rar_add.htm" rel="nofollow">http://www.rarlab.com/rar_add.htm</a></a></p><br/><br/><p><a href="http://www.rarlab.com/rar/UnRARDLL.exe" rel="nofollow"><a href="http://www.rarlab.com/rar/UnRARDLL.exe" rel="nofollow">http://www.rarlab.com/rar/UnRARDLL.exe</a></a></p><br/><br/><p>Here's a .NET UnRAR libary:</p><br/><br/><p><a href="http://www.chilkatsoft.com/rar-dotnet.asp" rel="nofollow"><a href="http://www.chilkatsoft.com/rar-dotnet.asp" rel="nofollow">http://www.chilkatsoft.com/rar-dotnet.asp</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABL PREFIX WITH A .NET OR M
    </pattern>
    <template>
<![CDATA[<p>I've now researched what it takes to do this in both Entity Framework and LINQ to SQL and <a href="http://theruntime.com/blogs/jacob/archive/2008/08/27/changing-table-names-in-an-orm.aspx" rel="nofollow">documented the steps required in each</a>. It's much longer than answers here tend to be so I'll be content with a link to the answer rather than duplicate it here. It's relatively involved for each, but the LINQ to SQL is the more flexible solution and also the easiest to implment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSIST DATA IN .NET WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>Extending on <a href="http://stackoverflow.com/questions/11761/persisting-data-in-net-web-service-memory#11779" rel="nofollow" title="excanvas">Ice^^Heat</a>'s idea, you might want to think about where you would cache - either cache the contents of the json file in the Application cache like so:  </p><br/><br/><pre><code>Context.Cache.Insert("foo", _<br/>                 Foo, _<br/>                 Nothing, _<br/>                 DateAdd(DateInterval.Minute, 30, Now()), _<br/>                 System.Web.Caching.Cache.NoSlidingExpiration)<br/></code></pre><br/><br/><p>And then generate the results you need from that on every hit. Alternatively you can cache the webservice output on the function definition:  </p><br/><br/><pre><code>&lt;WebMethod(CacheDuration:=60)&gt; _<br/>Public Function HelloWorld() As String<br/>    Return "Hello World"<br/>End Function<br/></code></pre><br/><br/><p>Info gathered from <a href="http://msdn.microsoft.com/en-us/library/aa480499.aspx" rel="nofollow">XML Web Service Caching Strategies</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRYPTOGRAPHICEXCEPT PAD IS INVALID AND CAN NOT BE REMOV
    </pattern>
    <template>
<![CDATA[<p>Although this have been already answered I think it would be a good idea to explain <strong>why</strong> it is to be expected.</p><br/><br/><p>A padding scheme is usually applied because most cryptographic filters are not semantically secure and to prevent some forms of cryptoatacks. For example, usually in RSA the <a href="http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding" rel="nofollow">OAEP</a> padding scheme is used which prevents some sorts of attacks (such as a chosen plaintext attack or <a href="http://en.wikipedia.org/wiki/Blinding_(cryptography)" rel="nofollow">blinding</a>).</p><br/><br/><p>A padding scheme appends some (usually) random garbage to the message m before the message is sent. In the OAEP method, for example, two Oracles are used (this is a simplistic explanation):</p><br/><br/><ol><br/><li>Given the size of the modulus you padd k1 bits with 0 and k0 bits with a random number.</li><br/><li>Then by applying some transformation to the message you obtain the padded message wich is encrypted and sent.</li><br/></ol><br/><br/><p>That provides you with a randomization for the messages and with a way to test if the message is garbage or not. As the padding scheme is reversible, when you decrypt the message whereas you can't say anything about the integrity of the message itself you can, in fact, make some assertion about the padding and thus you can know if the message has been correctly decrypted or you're doing something wrong (i.e someone has tampered with the message or you're using the wrong key)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROWS FOR A DIRECTORI IN C #
    </pattern>
    <template>
<![CDATA[<p>FolderBrowserDialog class?</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.folderbrowserdialog.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.windows.forms.folderbrowserdialog.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIA WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.123aspx.com/redir.aspx?res=32473" rel="nofollow" title="excanvas">This article</a> has a pretty nice intro on how to do it... </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LARG RESULT VIA A WEBSERVIC
    </pattern>
    <template>
<![CDATA[<p>I have seen all three approaches, paged, store and retrieve, and massive push.</p><br/><br/><p>I think the solution to your problem depends to some extent on why your result set is so large and how it is generated.  Do your results grow over time, are they calculated all at once and then pushed, do you want to stream them back as soon as you have them?</p><br/><br/><p>In my experience, using a paging approach is appropriate when the client needs quick access to reasonably sized chunks of the result set similar to pages in search results.  Considerations here are overall chattiness of your protocol, caching of the entire result set between client page requests, and/or the processing time it takes to generate a page of results.</p><br/><br/><p>Store and retrieve is useful when the results are not random access and the result set grows in size as the query is processed.  Issues to consider here are complexity for clients and if you can provide the user with partial results or if you need to calculate all results before returning anything to the client (think sorting of results from distributed search engines).</p><br/><br/><p>The massive push approach is almost certainly flawed.  Even if the client needs all of the information and it needs to be pushed in a monolithic result set, I would recommend taking the approach of WS-ReliableMessaging (either directly or through your own simplified version) and chunking your results.  By doing this you 1) ensure that the pieces reach the client, 2) you can discard the chunk as soon as you get a receipt from the client, and 3) you can reduce the possible issues with memory consumption from having to retain 5MB of XML, DOM, or whatever in memory (assuming that you aren't processing the results in a streaming manner) on the server and client sides.</p><br/><br/><p>Like others have said though, don't do anything until you know your result set size, how it is generated, and overall performance to be actual issues.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET SOLUT FOR FREQUENT CHANG DATABAS
    </pattern>
    <template>
<![CDATA[<p>One key thing to be aware of here is that if the database schema is changing frequently, you want to have some level of compile time type safety. I've found this to be a problem with NHibernate because it uses xml mapping files so if you change something in your database schema, you don't know until runtime that the mapping is broken.</p><br/><br/><p>It will also be a problem with stored procs.</p><br/><br/><p>Using Linq2Sql will give you the advantage of knowing where exactly your code is breaking when you change a schema at compile time. This for me, is something that would take precedence over everything else if I'm working with a frequently changing schema</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SN.EX FAIL WITH ACCESS DENI ERROR MESSAG
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Yes I have tried running PS and the<br/>  regular command prompt as<br/>  administrator. The same error message<br/>  comes up.</p><br/></blockquote><br/><br/><p>Another possible solution could be that you need to give your user account access to the key container located at C:\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A TIMER BASE APPLIC
    </pattern>
    <template>
<![CDATA[<p>What I have done is to mock the timer, and also the current system time, that my events could be triggered immediately, but as far as the code under test was concerned time elapsed was seconds.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BE WORRI ABOUT OBFUSC MY .NET CODE
    </pattern>
    <template>
<![CDATA[<p>I wouldn't worry about it too much. I'd rather focus on putting out an awesome product, getting a good user base, and treating your customers right than worry about the minimal percentage of users concerned with stealing your code or looking at the source.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTFOUNDEXCEPT FOR MSCORLIB.XMLSERIALIZERS.DL WHICH DOE N T EXIST
    </pattern>
    <template>
<![CDATA[<p>I'm guessing now. but:</p><br/><br/><ol><br/><li>The system might be generating a serializer for the whole of mscorlib, which could be very slow.</li><br/><li>You could probably avoid this by wrapping the system type in your own type and serialising that instead - then you'd get a serializer for your own assembly.</li><br/><li>You might be able to build the serializer for mscorlib with sgen.exe, which was the old way of building serializer dlls before it got integrated into VS.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS SCHEMA IN ENTITI FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I would guess that possibly those don't happen because they would break the build for existing code, but that's just a guess on my part.</p><br/><br/><p>Here's my logic:</p><br/><br/><p>First, EF is supposed to be more than 1:1 table mapping, so it's quite possible that just because you are deleting a column from table A doesn't mean that for that entity, there shouldn't be a property Description. You might just map that property to another table.</p><br/><br/><p>Second, changing a type could just break builds. that's the only rationale there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVIS VERSION IN .NET ASSEMBL W OUT CC.NET
    </pattern>
    <template>
<![CDATA[<p>Have a look at SubWCRev - <a href="http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-subwcrev.html" rel="nofollow">http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-subwcrev.html</a></p><br/><br/><p>The assembly version numbers are usually in assemblyinfo.cs</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOU EVER REFLECT REFLECTOR
    </pattern>
    <template>
<![CDATA[<p>It would have been kind of ironic if it weren't ;-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NODE FROM A SITEMAPNODECOLLECT
    </pattern>
    <template>
<![CDATA[<p>Your shouldn't need CType</p><br/><br/><pre><code>Dim children = _<br/>    From n In SiteMap.CurrentNode.ChildNodes.Cast(Of SiteMapNode)() _<br/>    Where n.Url &lt;&gt; "/Registration.aspx" _<br/>    Select n<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISPOS A CLASS IN .NET
    </pattern>
    <template>
<![CDATA[<p>IDisposable has nothing to do with freeing memory.  IDisposable is a pattern for freeing <em>unmanaged</em> resources -- and memory is quite definitely a managed resource.</p><br/><br/><p>The links pointing to GC.Collect() are the correct answer, though use of this function is generally discouraged by the Microsoft .NET documentation.</p><br/><br/><p><strong>Edit:</strong> Having earned a substantial amount of karma for this answer, I feel a certain responsibility to elaborate on it, lest a newcomer to .NET resource management get the wrong impression.</p><br/><br/><p>Inside a .NET process, there are two kinds of resource -- managed and unmanaged.  "Managed" means that the runtime is in control of the resource, while "unmanaged" means that it's the programmer's responsibility.  And there really is only one kind of managed resource that we care about in .NET today -- memory.  The programmer tells the runtime to allocate memory and after that it's up to the runtime to figure out when the memory can freed.  The mechanism that .NET uses for this purpose is called garbage collection and you can find plenty of information about GC on the internet simply by using Google.</p><br/><br/><p>For the other kinds of resources, .NET doesn't know anything about cleaning them up so it has to rely on the programmer to do the right thing.  To this end, the platform gives the programmer three tools:</p><br/><br/><ol><br/><li>The IDisposable interface and the "using" statement in VB and C#</li><br/><li>Finalizers</li><br/><li>The IDisposable pattern as implemented by many BCL classes</li><br/></ol><br/><br/><p>The first of these allows the programmer to efficiently acquire a resource, use it and then release it all within the same method.</p><br/><br/><pre><code>using (DisposableObject tmp = DisposableObject.AcquireResource()) {<br/>    // Do something with tmp<br/>}<br/>// At this point, tmp.Dispose() will automatically have been called<br/>// BUT, tmp may still a perfectly valid object that still takes up memory<br/></code></pre><br/><br/><p>If "AcquireResource" is a factory method that (for instance) opens a file and "Dispose" automatically closes the file, then this code cannot leak a file resource.  But the memory for the "tmp" object itself may well still be allocated.  That's because the IDisposable interface has absolutely no connection to the garbage collector.  If you <em>did</em> want to ensure that the memory was freed, your only option would be to call <code>GC.Collect()</code> to force a garbage collection.</p><br/><br/><p>However, it cannot be stressed enough that this is probably not a good idea.  It's generally much better to let the garbage collector do what it was designed to do, which is to manage memory.</p><br/><br/><p>What happens if the resource is being used for a longer period of time, such that its lifespan crosses several methods?  Clearly, the "using" statement is no longer applicable, so the programmer would have to manually call "Dispose" when he or she is done with the resource.  And what happens if the programmer forgets?  If there's no fallback, then the process or computer may eventually run out of whichever resource isn't being properly freed.</p><br/><br/><p>That's where finalizers come in.  A finalizer is a method on your class that has a special relationship with the garbage collector.  The GC promises that -- before freeing the memory for any object of that type -- it will first give the finalizer a chance to do some kind of cleanup.</p><br/><br/><p>So in the case of a file, we theoretically don't need to close the file manually at all.  We can just wait until the garbage collector gets to it and then let the finalizer do the work.  Unfortunately, this doesn't work well in practice because the garbage collector runs non-deterministically.  The file may stay open considerably longer than the programmer expects.  And if enough files are kept open, the system may fail when trying to open an additional file.</p><br/><br/><p>For most resources, we want both of these things.  We want a convention to be able to say "we're done with this resource now" and we want to make sure that there's at least some chance for the cleanup to happen automatically if we forget to do it manually.  That's where the "IDisposable" pattern comes into play.  This is a convention that allows IDispose and a finalizer to play nicely together.  You can see how the pattern works by looking at the <a href="http://msdn.microsoft.com/en-us/library/system.idisposable.aspx" rel="nofollow">official documentation for IDisposable</a>.</p><br/><br/><p><strong>Bottom line:</strong> If what you really want to do is to just make sure that memory is freed, then IDisposable and finalizers will not help you.  But the IDisposable interface is part of an extremely important pattern that all .NET programmers should understand.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SILVERLIGHT HOW TO YOU ATTACH A CHANGEEV HANDLER TO AN INHERIT DEPEND PROPERTI
    </pattern>
    <template>
<![CDATA[<p>(edited to remove recommendation to use DependencyPropertyDescriptor, which is not available in Silverlight)</p><br/><br/><p><a href="http://agsmith.wordpress.com/2008/04/07/propertydescriptor-addvaluechanged-alternative/" rel="nofollow">PropertyDescriptor AddValueChanged Alternative</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSTEM.XML USE MSXML
    </pattern>
    <template>
<![CDATA[<p>System.Xml doesn't use MSXML6. They are seperate xml processing engines. See post here: <a href="http://blogs.msdn.com/stan_kitsis/archive/2005/09/20/472185.aspx" rel="nofollow">http://blogs.msdn.com/stan_kitsis/archive/2005/09/20/472185.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BINARI DATA WITH SILVERLIGHT 2B2
    </pattern>
    <template>
<![CDATA[<p>The way i get around it is through INotifyPropertyChanged and event notification.</p><br/><br/><p>The essentials:</p><br/><br/><pre><code> public void DoIt(){<br/>this.IsUploading = True;    <br/><br/>        WebRequest postRequest = WebRequest.Create(new Uri(ServiceURL));<br/><br/>        postRequest.BeginGetRequestStream(new AsyncCallback(RequestOpened), postRequest);<br/>    }<br/><br/>private void RequestOpened(IAsyncResult result){<br/>      WebRequest req = result.AsyncState as WebRequest;<br/>   req.BeginGetResponse(new AsyncCallback(GetResponse), req);<br/>    }<br/><br/>  private void GetResponse(IAsyncResult result)<br/>        {<br/>            WebRequest req = result.AsyncState as WebRequest;<br/>              string  serverresult = string.Empty;<br/>              WebResponse postResponse = req.EndGetResponse(result);<br/><br/>              StreamReader responseReader = new StreamReader(postResponse.GetResponseStream());<br/><br/>this.IsUploading= False;<br/>}<br/><br/> private Bool_IsUploading;<br/>        public Bool IsUploading<br/>        {<br/>            get { return _IsUploading; }<br/>          private  set<br/>            {<br/><br/>                _IsUploading = value;<br/><br/>                OnPropertyChanged("IsUploading");<br/>            }<br/>        }<br/></code></pre><br/><br/><p>Right now silverlight is a PiTA because of the double and triple Async calls. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN DATAT IN WCF
    </pattern>
    <template>
<![CDATA[<p>For anyone having similar problems, I have solved my issue.  It was several-fold.</p><br/><br/><ul><br/><li>As Darren suggested and Paul backed up, the Max..Size properties in the configuration needed to be enlarged.  The SvcTraceViewer utility helped in determining this, but it still does not always give the most helpful error messages.  </li><br/><li>It also appears that when the Service Reference is updated on the client side, the configuration will sometimes not update properly (e.g. Changing config values on the server will not always properly update on the client. I had to go in and change the Max..Size properties multiple times on both the client and server sides in the course of my debugging)</li><br/><li><p>My final problem seemed to be that<br/>the DataTable was not initialized<br/>with a name.  I'm still trying to<br/>figure out why this matters, but<br/>this:</p><br/><br/><pre><code>return new DataTable();<br/></code></pre><br/><br/><p>will fail, where this:</p><br/><br/><pre><code>return new DataTable("someName");<br/></code></pre><br/><br/><p>will not. Any input on this would be great.</p></li><br/></ul><br/><br/><p>Hopefully that will help someone.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR PREFER METHOD OF SEND COMPLEX DATA OVER A WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>there is also an argument for separating the tiers - have a set of serializable objects that get passed to and from the web service and a translator to map and convert between that set and the business objects (which might have properties not suitable for passing over the wire)</p><br/><br/><p>Its the approach favoured by the web service software factory (<a href="http://www.codeplex.com/servicefactory" rel="nofollow">http://www.codeplex.com/servicefactory</a>) and means that you can change your business objects without breaking the web service interface/contract</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRUCT AND CLASS IN .NET
    </pattern>
    <template>
<![CDATA[<p>In .NET, there are two categories of types, <em>reference types</em> and <em>value types</em>.</p><br/><br/><p>Structs are <em>value types</em> and classes are <em>reference types</em>.</p><br/><br/><p>The general different is that a <em>reference type</em> lives on the heap, and a <em>value type</em> lives inline, that is, wherever it is your variable or field is defined.</p><br/><br/><p>A variable containing a <em>value type</em> contains the entire <em>value type</em> value. For a struct, that means that the variable contains the entire struct, with all its fields.</p><br/><br/><p>A variable containing a <em>reference type</em> contains a pointer, or a <em>reference</em> to somewhere else in memory where the actual value resides.</p><br/><br/><p>This has one benefit, to begin with:</p><br/><br/><ul><br/><li><em>value type</em>s always contains a value</li><br/><li><em>reference types</em> can contain a <em>null</em>-reference, meaning that they don't refer to anything at all at the moment</li><br/></ul><br/><br/><p>Internally, <em>reference type</em>s are implemented as pointers, and knowing that, and knowing how variable assignment works, there are other behavioral patterns:</p><br/><br/><ul><br/><li>copying the contents of a <em>value type</em> variable into another variable, copies the entire contents into the new variable, making the two distinct. In other words, after the copy, changes to one won't affect the other</li><br/><li>copying the contents of a <em>reference type</em> variable into another variable, copies the reference, which means you now have two references to the same <em>somewhere else</em> storage of the actual data. In other words, after the copy, changing the data in one reference will appear to affect the other as well, but only because you're really just looking at the same data both places</li><br/></ul><br/><br/><p>When you declare variables or fields, here's how the two types differ:</p><br/><br/><ul><br/><li>variable: <em>value type</em> lives on the stack, <em>reference type</em> lives on the stack as a pointer to somewhere in heap memory where the actual memory lives</li><br/><li>class/struct-field: <em>value type</em> lives inside the class, <em>reference type</em> lives inside the class as a pointer to somewhere in heap memory where the actual memory lives.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REF VAL AND OUT MEAN ON METHOD PARAMET
    </pattern>
    <template>
<![CDATA[<p>By default (in C#), passing an object to a function actually passes a copy of the reference to that object. Changing the parameter itself only changes the value in the parameter, and not the variable that was specified.</p><br/><br/><pre><code>void Test1(string param)<br/>{<br/>    param = "new value";<br/>}<br/><br/>string s1 = "initial value";<br/>Test1(s1);<br/>// s1 == "initial value"<br/></code></pre><br/><br/><p>Using <code>out</code> or <code>ref</code> passes a reference to the variable specified in the call to the function. Any changes to the value of an <code>out</code> or <code>ref</code> parameter will be passed back to the caller.</p><br/><br/><p>Both <code>out</code> and <code>ref</code> behave identically except for one slight difference: <code>ref</code> parameters are required to be initialised before calling, while <code>out</code> parameters can be uninitialised. By extension, <code>ref</code> parameters are guaranteed to be initialised at the start of the method, while <code>out</code> parameters are treated as uninitialised.</p><br/><br/><pre><code>void Test2(ref string param)<br/>{<br/>    param = "new value";<br/>}<br/><br/>void Test3(out string param)<br/>{<br/>    // Use of param here will not compile<br/>    param = "another value";<br/>}<br/><br/>string s2 = "initial value";<br/>string s3;<br/>Test2(ref s2);<br/>// s2 == "new value"<br/>// Test2(ref s3); // Passing ref s3 will not compile<br/>Test3(out s2);<br/>// s2 == "another value"<br/>Test3(out s3);<br/>// s3 == "another value"<br/></code></pre><br/><br/><p><strong>Edit</strong>: As <a href="http://stackoverflow.com/questions/13060/what-do-ref-val-and-out-mean-on-method-parameters#13105" rel="nofollow" title="dp">dp</a> points out, the difference between <code>out</code> and <code>ref</code> is only enforced by the C# compiler, not by the CLR. As far as I know, VB has no equivalent for <code>out</code> and implements <code>ref</code> (as <code>ByRef</code>) only, matching the support of the CLR.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THREADSTATEEXCEPT OCCUR WHEN TRI TO RESTART A THREAD
    </pattern>
    <template>
<![CDATA[<p>The problem is that you have code that first checks if it should create a new thread object, and another piece of code that determines wether to start the thread object. Due to race conditions and similar things, your code might end up trying to call .Start on an existing thread object. Considering you don't post the details behind the <em>check</em> variable, it's impossible to know what might trigger this behavior.</p><br/><br/><p>You should reorganize your code so that .Start is guaranteed to only be called on new objects. In short, you should put the Start method into the same if-statement as the one that creates a new thread object.</p><br/><br/><p>Personally, I would try to reorganize the entire code so that I didn't need to create another thread, but wrap the code inside the thread object inside a loop so that the thread just keeps on going.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAB BEHAVIOR IN WINFORM
    </pattern>
    <template>
<![CDATA[<p>As a general rule, I would say overriding the standard behavior of the TAB key would be a bad idea.  Maybe you can do something like disabling the 3rd text box until a valid entry is made in the 2nd text box.</p><br/><br/><p><em>Now, having said this, I've also broken this rule at the request of the customer.  We made the enter key function like the tab key, where the enter key would save the value in a text field, and advance the cursor to the next field.</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR FOR... IF ARRAY ITER
    </pattern>
    <template>
<![CDATA[<p>The increment in the original <code>foreach</code> loop will not affect the contents of the array, the only way to do this remains a <code>for</code> loop:</p><br/><br/><pre><code>for(int i = 0; i &lt; intArray.Length; ++i)<br/>{<br/>    if(intArray[i] &gt; 3) ++intArray[i];<br/>}<br/></code></pre><br/><br/><p>Linq is not intended to modify existing collections or sequences. It creates new sequences based on existing ones. It is possible to achieve the above code using Linq, though it is slightly against its purposes:</p><br/><br/><pre><code>var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));<br/>var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));<br/></code></pre><br/><br/><p>Using <code>where</code> (or equivalent), as shown in some of the other answers, will exclude any values less than or equal to 3 from the resulting sequence.</p><br/><br/><pre><code>var intArray = new int[] { 10, 1, 20, 2 };<br/>var newArray = from i in intArray where i &gt; 3 select i + 1;<br/>// newArray == { 11, 21 }<br/></code></pre><br/><br/><p>There is a <code>ForEach</code> method on arrays that will allow you to use a lambda function instead of a <code>foreach</code> block, though for anything more than a method call I would stick with <code>foreach</code>.</p><br/><br/><pre><code>intArray.ForEach(i =&gt; DoSomething(i));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS TO CALL STACK IN .NET
    </pattern>
    <template>
<![CDATA[<p>Try <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.stacktrace.aspx" rel="nofollow" title="Human Interface Guidelines">System.Diagnostics.StackTrace</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3.5 SP1 AND ASPNET CLI CRYSTAL REPORT
    </pattern>
    <template>
<![CDATA[<p>No it is a side effect of Crystal Reports.  If you don't need it, remove it from your computer it is nothing but a headache.  It is safe to delete the aspnet_client folder.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST CONTENT OF REMOT FILE
    </pattern>
    <template>
<![CDATA[<p><strong>Short answer:</strong> No, unless you have more control over that web-server</p><br/><br/><p><strong>Long answer:</strong> Here are possible solutions...</p><br/><br/><ol><br/><li><p>You will need server-side script that will do it locally and output this list in your preferred format.</p></li><br/><li><p>Most of the web-servers implement default file-browsing pages, so you could theoretically parse those but this solution will be very fragile and not very portable even between different versions of the same web-server.</p></li><br/><li><p>If you have FTP access...</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT FROM ASP.NET WEBFORM TO ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Any pointers, tips, tricks, or<br/>  gotchas to be aware of?</p><br/></blockquote><br/><br/><p>Well, I think you're probably a little ways away from thinking about tricks &amp; gotchas :) As I'm sure you're aware, ASP.NET MVC is not some new version of ASP.NET, but a totally different paradigm from ASP.NET, you won't be migrating, you'll be initiating a brand new development effort to replace an existing system. So maybe you can get a leg up on determining requirements for the app, but the rest will probably re-built from scratch.</p><br/><br/><p>Based on the (very common) problems you described in your existing code base you should consider taking this opportunity to learn some of the current best practices in designing loosely coupled systems. This is easy to do because modern "best practices" are easy to understand and easy to practice, and there is enormous community support, and high quality, open source tooling to help in the process.</p><br/><br/><p>We are moving an ASP/ASP.NET application to ASP.NET MVC at this time as well, and this is the conclusion my preparatory research has led me to, anyway.</p><br/><br/><p><a href="http://www.thefreakparade.com/2008/07/to-aspnetmvc-or-not-to-mvc-or-aspnet-mvc-hyperlink-acupuncture/" rel="nofollow" title="InfoQ">Here is a post to links on using ASP.NET MVC</a>, but I would start by <a href="http://www.thefreakparade.com/2008/07/so-you-want-to-learn-nhibernate-part-12-prerequisites-or-nhibernate-marijuananet/" rel="nofollow" title="JavaLobby">reading this post</a>. The post is about NHibernate (an ORM tool) on its surface but the discussion and the links are about getting the foundations right and is the result of preparing to port an ASP.NET site to MVC. Some of the reference architectures linked to in that post are based on ASP.NET MVC. <a href="http://www.thefreakparade.com/2008/07/so-you-want-to-learn-nhibernate-part-1-of-1-the-links/" rel="nofollow">Here is another post about NHibernate</a>, but in the "Best Practices &amp; Reference Applications" section most if not all of the reference applications listed are ASP.NET MVC applications also. Reference architectures can be extremely useful for quickly getting a feeling for how an optimal, maintainable ASP.NET MVC site might be designed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUOT SYSTEM.DIRECTORYSERVICES.RESULTPROPERTYCOLLECT
    </pattern>
    <template>
<![CDATA[<p>When you included $<em>.properties.name in the string, it was returning the type name of the property.  When a variable is included in a string and the string is evaluated, it calls the ToString method on that object referenced by the variable (not including the members specified after).  In this case, the ToString method is returning the type name.  You can force the evaluation of the variable and members similar to what EBGreen suggested, but by using "Server name in quotes $($</em>.properties.name)"  In the other scenario PowerShell is evaluating the variable and members specified first and then adding it to the previous string.</p><br/><br/><p>You are right that you are getting back a collection of properties.  If you pipe $computer[0].properties to get-member, you can explore the object model right from the command line.<br /><br/>The important part is below.</p><br/><br/><p>TypeName: System.DirectoryServices.ResultPropertyCollection</p><br/><br/><p>Name                    MemberType            Definition</p><br/><br/><p><hr /></p><br/><br/><p>Values            Property              System.Collections.ICollection Values {get;}</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A LISTVIEW IN C # BUT STILL SHOW THE CURRENT SELECT
    </pattern>
    <template>
<![CDATA[<p>You could also make the ListView ownerdraw. You then have complete control over how the items look whether they are selected or not or whether the ListView itself is enabled or not. The DrawListViewItemEventArgs provides a way to ask the ListView to draw individual parts of the item so you only have to draw the bits you're interested in. For example, you can draw the background of the item but leave it up to the ListView to draw the text.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI LEAK WITH ATTACH BEHAVIOUR
    </pattern>
    <template>
<![CDATA[<p>I do not agree DannySmurf</p><br/><br/><p>Some WPF layout objects can clog up your memory and make your application really slow when they are not garbadge collected. So I find the choice of words to be correct, you are leaking memory to objects you no longer use. You expect the items to be garbadge collected, but they aren't, because there is a reference somewhere (in this case in the from an event handler).</p><br/><br/><p>Now for a real answer :)</p><br/><br/><p>I advise you to read this <a href="http://msdn.microsoft.com/en-us/library/bb613565.aspx" rel="nofollow">WPF Performance article on MSDN</a></p><br/><br/><blockquote><br/>  <p>Not Removing Event Handlers on Objects<br/>  may Keep Objects Alive</p><br/>  <br/>  <p>The delegate that an object passes to<br/>  its event is effectively a reference<br/>  to that object. Therefore, event<br/>  handlers can keep objects alive longer<br/>  than expected. When performing clean<br/>  up of an object that has registered to<br/>  listen to an object's event, it is<br/>  essential to remove that delegate<br/>  before releasing the object. Keeping<br/>  unneeded objects alive increases the<br/>  application's memory usage. This is<br/>  especially true when the object is the<br/>  root of a logical tree or a visual<br/>  tree.</p><br/></blockquote><br/><br/><p>They advise you to look into the <a href="http://msdn.microsoft.com/en-us/library/aa970850.aspx" rel="nofollow">Weak Event pattern</a></p><br/><br/><p>Another solution would be to remove the event handlers when you are done with an object. But I know that with Attached Properties that point might not always be clear..</p><br/><br/><p>Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSTEM.DATA.SQLCLIENT.SQLEXCEPT FAIL TO GENER A USER INSTANC OF SQL SERVER DUE TO A FAILUR IN START THE PROCESS FOR THE USER INSTANCE. THE CONNECT WILL BE CLOSE
    </pattern>
    <template>
<![CDATA[<p>Can you list the connection string you are using for this?</p><br/><br/><p>You might want to try adding an explicit User Instance=true/false to your connection string</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEAL WITH PIPE DELIMIT VARIABL IN CONNECT STRING
    </pattern>
    <template>
<![CDATA[<p>From the MSDN <a href="https://blogs.msdn.com/smartclientdata/archive/2005/08/26/456886.aspx" rel="nofollow">Smart Client Data Blog</a>:</p><br/><br/><blockquote><br/>  <p>In this version, the .NET runtime<br/>  added support for what we call the<br/>  DataDirectory macro. This allows<br/>  Visual Studio to put a special<br/>  variable in the connection string that<br/>  will be expanded at run-time...</p><br/>  <br/>  <p>By default, the |DataDirectory|<br/>  variable will be expanded as follow:</p><br/>  <br/>  <ul><br/>  <li>For applications placed in a<br/>  directory on the user machine, this<br/>  will be the app's (.exe) folder.</li><br/>  <li>For apps running under ClickOnce, this will be a special data folder<br/>  created by ClickOnce</li><br/>  <li>For Web apps, this will be the App_Data folder</li><br/>  </ul><br/>  <br/>  <p>Under the hood, the value for<br/>  |DataDirectory| simply comes from a<br/>  property on the app domain. It is<br/>  possible to change that value and<br/>  override the default behavior by doing<br/>  this:</p><br/><br/><pre><code>AppDomain.CurrentDomain.SetData("DataDirectory", newpath)<br/></code></pre><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLUGIN IN .NET
    </pattern>
    <template>
<![CDATA[<p>The following code snippet (C#) constructs an instance of any concrete classes derived from <code>Base</code> found in class libraries (*.dll) in the application path and stores them in a list.</p><br/><br/><pre><code>using System.IO;<br/>using System.Reflection;<br/><br/>List&lt;Base&gt; objects = new List&lt;Base&gt;();<br/>DirectoryInfo dir = new DirectoryInfo(Application.StartupPath);<br/><br/>foreach (FileInfo file in dir.GetFiles("*.dll"))<br/>{<br/>    Assembly assembly = Assembly.LoadFrom(file.FullName);<br/>    foreach (Type type in assembly.GetTypes())<br/>    {<br/>        if (type.IsSubclassOf(typeof(Base)) &amp;&amp; type.IsAbstract == false)<br/>        {<br/>            Base b = type.InvokeMember(null,<br/>                                       BindingFlags.CreateInstance,<br/>                                       null, null, null) as Base;<br/>            objects.Add(b);<br/>        }<br/>    }<br/>}<br/></code></pre><br/><br/><p><strong>Edit:</strong> The classes referred to by <a href="http://stackoverflow.com/questions/14278/how-to-load-plugins-in-net#14305" rel="nofollow">Matt</a> are probably a better option in .NET 3.5.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM PLUGIN LOAD WITH AUTHOR
    </pattern>
    <template>
<![CDATA[<p>Basically, if you're putting your code on someone else's machine, there's no absolute guarantee of security.</p><br/><br/><p>You can look at all kinds of security tricks, but in the end, the code is on their machine so it's out of your control.</p><br/><br/><p>How much do you stand to lose if the end user loads an unauthorised plugin? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      64BIT .NET PERFORM TUNE
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://blogs.msdn.com/davbr/pages/tail-call-jit-conditions.aspx" rel="nofollow">64bit JIT is different</a> from the one for 32bit, so I would expect some differences in the output - but I wouldn't switch to 64bit just for that, and I wouldn't expect to gain much speed (if any) in CPU time by switching to 64bit. </p><br/><br/><p>You will notice a big performance improvement if your app uses a lot of memory and the PC has enough RAM to keep up with it. I've found that 32bit .NET apps tend to start throwing out of memory exceptions when you get to around 1.6gb in use, but they start to thrash the disk due to <a href="http://en.wikipedia.org/wiki/Paging" rel="nofollow">paging</a> long before that - so you end being I/O bound.</p><br/><br/><p>Basically, if you're bottleneck is CPU then 64bit is unlikely to help. If your bottleneck is is memory then you should see a big improvement. </p><br/><br/><blockquote><br/>  <p>Will using Int64 improve performance and will the JIT compiler automatically make Int64 work on 32bit systems</p><br/></blockquote><br/><br/><p>Int64 already works on both 32bit and 64bit systems, but it'll be faster running on 64bit. So if you're mostly number crunching with Int64, running on a 64bit system should help. </p><br/><br/><p>The most important thing is to <a href="http://channel9vip.orcsweb.com/shows/Behind+The+Code/Rico-Mariani-Writing-better-faster-code/?CommentID=290154" rel="nofollow">measure</a> your performance.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LPHA BLEND COLOR IN .NET COMPACT FRAMEWORK 2.0
    </pattern>
    <template>
<![CDATA[<p>Apparently, it's not quite that simple, but <a href="http://blogs.msdn.com/chrislorton/archive/2006/04/07/570649.aspx" rel="nofollow">still possible</a>, if you have Windows Mobile 5.0 or newer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD IN AN INTERFACE ABSTRACT CLASS
    </pattern>
    <template>
<![CDATA[<p>Looking at <a href="http://stackoverflow.com/questions/14614/static-methods-in-an-interfaceabstract-class#14655" rel="nofollow">your response</a> I am thinking along the following lines:</p><br/><br/><ul><br/><li>You could just have a static method that takes a type parameter and performs the expected logic based on the type.</li><br/><li>You could create a virtual method in your abstract base, where you specify the SQL in the concrete class. So that contains all the common code that is required by both (e.g. exectuting the command and returning the object) while encapsulating the "specialist" bits (e.g. the SQL) in the sub classes.</li><br/></ul><br/><br/><p>I prefer the second option, although its of course down to you. If you need me to go into further detail, please let me know and I will be happy to edit/update :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCOD THROUGH A CONSOL APPLIC
    </pattern>
    <template>
<![CDATA[<p>I'm not a .NET guy, but, can't you use:</p><br/><br/><pre><code>HttpUtility.UrlEncode Method (String)<br/></code></pre><br/><br/><p>Which is described here:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx" rel="nofollow">HttpUtility.UrlEncode Method (String) on MSDN</a></p><br/><br/><p>Andrew</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEST TO USE FILE VERSION AND ASSEMBL VERSION
    </pattern>
    <template>
<![CDATA[<p>In a scenario where I have multiple file assemblies (i.e. 1 exe and 5 dlls) I will use a different file version for each, but the same assembly version for all of them, allowing you to know which exe each of the dlls go with.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS 2005 KEEP GIVE ME THE X IS AMBIGU IN THE NAMESPAC Y ERROR
    </pattern>
    <template>
<![CDATA[<p>Based on the results of your gacutil output (thanks for doing that; I think it helps), I would say you need to try and run a repair on the .NET Framework install and Visual Studio 2005.  I'm not sure if that will fix it, but as you can see from the output of the gacutil, you have none for 2.0.</p><br/><br/><p>From my VS2005 Command Prompt, I get:</p><br/><br/><pre><br/>Microsoft (R) .NET Global Assembly Cache Utility.  Version 2.0.50727.42<br/>Copyright (c) Microsoft Corporation.  All rights reserved.<br/><br/>The Global Assembly Cache contains the following assemblies:<br/>  mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=x86<br/><br/>Number of items = 1<br/></pre><br/><br/><p>From my VS2003 Command Prompt, I get:</p><br/><br/><pre><br/>Microsoft (R) .NET Global Assembly Cache Utility.  Version 1.1.4322.573<br/>Copyright (C) Microsoft Corporation 1998-2002. All rights reserved.<br/><br/>The Global Assembly Cache contains the following assemblies:<br/><br/>The cache of ngen files contains the following entries:<br/>    mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=5a00410050002d004e0035002e0031002d003800460053002d00330037004200430043003300430035000000<br/>    mscorlib, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, Custom=5a00410050002d004e0035002e0031002d0038004600440053002d00330037004200440036004600430034000000<br/><br/>Number of items = 2<br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALT + F4 CLOSE FORM
    </pattern>
    <template>
<![CDATA[<p>This does the job:</p><br/><br/><pre><code>private void Form1_FormClosing(object sender, FormClosingEventArgs e)<br/>{<br/>    e.Cancel = true;<br/>}<br/></code></pre><br/><br/><p>Edit: In response to pix0rs concern - yes you are correct that you will not be able to programatically close the app.  However, you can simply remove the event handler for the form_closing event before closing the form:</p><br/><br/><pre><code>this.FormClosing -= new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);<br/>this.Close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLIC TEST FOR .NET ( WATIN TEST RECORD )
    </pattern>
    <template>
<![CDATA[<p>I have used:</p><br/><br/><blockquote><br/>  <ul><br/>  <li><a href="http://watin.sourceforge.net/" rel="nofollow">WatiN</a></li><br/>  <li><a href="http://www.automatedqa.com/products/testcomplete/index.asp" rel="nofollow">AutomatedQA TestComplete</a></li><br/>  </ul><br/></blockquote><br/><br/><p>All of them have had their purpose and are very good tools.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXAMPL OF COMMAND PATTERN FOR UI
    </pattern>
    <template>
<![CDATA[<p>Let's first make sure we know what the Command pattern is:</p><br/><br/><blockquote><br/>  <p>Command pattern encapsulates a request<br/>  as an object and gives it a known<br/>  public interface. Command Pattern<br/>  ensures that every object receives its<br/>  own commands and provides a decoupling<br/>  between sender and receiver. A sender<br/>  is an object that invokes an<br/>  operation, and a receiver is an object<br/>  that receives the request and acts on<br/>  it.</p><br/></blockquote><br/><br/><p>Here's an example for you.  There are many ways you can do this, but I am going to take an interface base approach to make the code more testable for you.  I am not sure what language you prefer, but I am writing this in C#.</p><br/><br/><p>First, create an interface that describes a Command.</p><br/><br/><pre><code>public interface ICommand<br/>{<br/>    void Execute();<br/>}<br/></code></pre><br/><br/><p>Second, create command objects that will implement the command interface.</p><br/><br/><pre><code>public class CutCommand : ICommand<br/>{<br/>    public void Execute()<br/>    {<br/>        // Put code you like to execute when the CutCommand.Execute method is called.<br/>    }<br/>}<br/></code></pre><br/><br/><p>Third, we need to setup our invoker or sender object.</p><br/><br/><pre><code>public class TextOperations<br/>{<br/>    public void Invoke(ICommand command)<br/>    {<br/>        command.Execute();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Fourth, create the client object that will use the invoker/sender object.</p><br/><br/><pre><code>public class Client<br/>{<br/>    static void Main()<br/>    {<br/>        TextOperations textOperations = new TextOperations();<br/>        textOperation.Invoke(new CutCommand());<br/>    }<br/>}<br/></code></pre><br/><br/><p>I hope you can take this example and put it into use for the application you are working on.  If you would like more clarification, just let me know.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORPHAN METHOD IN CODEBAS
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/bb429476(VS.80).aspx" rel="nofollow">FxCop</a> will warn you of methods where nothing calls them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YCL BUTTON BACKGROUND IMAG IN C #
    </pattern>
    <template>
<![CDATA[<p>Why don't you just put the images in an array?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JOB INTERVIEW
    </pattern>
    <template>
<![CDATA[<p>Take this with a grain of salt, but in my experience, LINQ and WPF are still in the realm of "yeah we'd like to get into that someday".</p><br/><br/><p>Most shops are still on VS2005 and .NET 2.0, so I'd want to make sure I was up to speed on core facilities:</p><br/><br/><ul><br/><li>generics</li><br/><li>ADO.NET</li><br/><li>WinForms / WebForms depending</li><br/></ul><br/><br/><p>And so forth. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITER THROUGH A STRONGLY TYP GENER LIST T
    </pattern>
    <template>
<![CDATA[<p>For C#:</p><br/><br/><pre><code>foreach(ObjectType objectItem in objectTypeList)<br/>{<br/>    // ...do some stuff<br/>}<br/></code></pre><br/><br/><p>Answer for VB.NET from <strong>Purple Ant</strong>:</p><br/><br/><pre><code>For Each objectItem as ObjectType in objectTypeList<br/>    'Do some stuff '<br/>Next<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ASP.NET MASTER PAGE AT RUNTIM
    </pattern>
    <template>
<![CDATA[<p>I've done this once before, I did exactly what you described (Made all pages inherit from a custom page with an OnPreInit event). Also I had a custom Application_PreRequestHandlerExecute in my Global.asax.cs for setting Page.StyleSheetTheme for doing image/css changes that didn't require a different Master Page.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE ANI REAL WORLD EXPERI OF CSLA
    </pattern>
    <template>
<![CDATA[<p>Before I specifically answer your question, I'd like to put a few thoughts down. Is CSLA right for your project? It depends. I would personally consider CSLA for desktop based applications that does not value unit testing as a high priority. CSLA is great if you want to easily scale to an n-tier application. CSLA tends to get some flack because it does not allow pure unit testing. This is true, however like anything in technology, I believe that there is <em>No One True Way</em>. Unit testing may not be something you are undertaking for a specific project. What works for one team and one project may not work for another team or other project.<br /></p><br/><br/><p>There are also many misconceptions in regards to CSLA. It is not an ORM. it is not a competitor to NHibernate (in fact using CLSA Business Objects &amp; NHibernate as data access fit really well together). It formalises the concept of a <em>Mobile Object</em>.</p><br/><br/><p><strong>1. How many people are using CSLA?</strong><br /><br/>Based on the <a href="http://forums.lhotka.net/forums/default.aspx" rel="nofollow">CSLA Forums</a>, I would say there are quite a number of CSLA based projects out there. Honestly though, I have no idea how many people are actually using it. I have used it in the past on two projects.</p><br/><br/><p><strong>2. What are the pros and cons?</strong><br /><br/>While it is difficult to summarise in a short list, here is some of the pro/con's that come to mind.<br /><br/><em>Pros:</em></p><br/><br/><ul><br/><li>It's easy to get new developers up<br/>to speed. The CSLA book and sample<br/>app are great resources to get up to speed.</li><br/><li>The Validation framework is truly world class - and has been "borrowed" for many many other non-CSLA projects and technologies.</li><br/><li>n-Level Undo within your business objects</li><br/><li>Config line change for n-Tier scalability (Note: not even a<br/>recompile is necessary)</li><br/><li>Key technologies are abstracted from the "real" code. When WCF was<br/>introduced, it had minimal impact on<br/>CSLA code.<br /></li><br/><li>It is possible to share your business objects between windows and web projects.</li><br/><li>CSLA promotes the normalization of <em>behaviour</em> rather than the normalization of <em>data</em> (leaving the database for data normalization).</li><br/></ul><br/><br/><p><em>Cons:</em></p><br/><br/><ul><br/><li>Difficulty in unit testing</li><br/><li>Lack of Separation of Concern (generally your business objects have data access code inside them).</li><br/><li>As CSLA promotes the normalization of <em>behavior</em>, rather than the normalization of <em>data</em>, and this can result in business objects that are named similarly, but have different purposes. This can cause some confusion and a feeling like you are not reusing objects appropriately. That said, once the physiological leap is taken, it more than makes sense - it seems inappropriate to structure objects the "old" way.</li><br/><li>It's not "in fashion" to build applications this way. You may struggle to get developers who are passionate about the technology.</li><br/></ul><br/><br/><p><strong>3. After reading this does CSLA really not fit in with TDD?</strong><br /><br/>I haven't found an effective way to do TDD with CSLA. That said, I am sure there are many smarter people out there than me that may have tried this with greater success.</p><br/><br/><p><strong>4. What are my alternatives?</strong><br /><br/>Domain-Driven-Design is getting big push at the moment (and rightfully so - it's fantastic for some applications). There are also a number of interesting patterns developing from the introduction of LINQ (and LINQ to SQL, Entity Framework, etc). Fowlers book <a href="http://rads.stackoverflow.com/amzn/click/0321127420" rel="nofollow">PoEAA</a>, details many patterns that may be suitable for your application. Note that some patterns are competing (i.e. Active Record and Repository), and thus are meant to be used for specific scenarios. While CSLA doesn't exactly match any of the patterns described in that book, it most closely resembles Active Record (although I feel it is short-sighted to claim an exact match for this pattern).</p><br/><br/><p><strong>5. If you have stopped using it or decided against why?</strong><br /><br/>I didn't fully recommend CSLA for my last project, because I believe the scope of the application is too large for the benefits CSLA provides. <br /><br/>I would <em>not</em> use CSLA on a web project. I feel there are other technologies better suited to building applications in that environment.</p><br/><br/><p>In summary, while CSLA is anything but a <em>silver bullet</em>, it is appropriate for some scenarios.</p><br/><br/><p>Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRACTIC USE OF SYSTEM.WEAKREFER
    </pattern>
    <template>
<![CDATA[<p>One useful example is the guys who run DB4O object oriented database. There, WeakReferences are used as a kind of light cache: it will keep your objects in memory only as long as your application does, allowing you to put a real cache on top.</p><br/><br/><p>Another use would be in the implementation of weak event handlers. Currently, one big source of memory leaks in .NET applications is forgetting to remove event handlers. E.g.</p><br/><br/><pre><code>public MyForm()<br/>{<br/>    MyApplication.Foo += someHandler;<br/>}<br/></code></pre><br/><br/><p>See the problem? In the above snippet, MyForm will be kept alive in memory forever as long as MyApplication is alive in memory. Create 10 MyForms, close them all, your 10 MyForms will still be in memory, kept alive by the event handler.</p><br/><br/><p>Enter WeakReference. You can build a weak event handler using WeakReferences so that someHandler is a weak event handler to MyApplication.Foo, thus fixing your memory leaks!</p><br/><br/><p>This isn't just theory. Dustin Campbell from the DidItWith.NET blog posted <a href="http://diditwith.net/PermaLink,guid,aacdb8ae-7baa-4423-a953-c18c1c7940ab.aspx" rel="nofollow">an implementation of weak event handlers</a> using System.WeakReference.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET CLIENT PROFIL WORTH TARGET
    </pattern>
    <template>
<![CDATA[<p>Ultimately, it will not hurt any users if you target the Client Profile. This is because the client profile is a subset of the .net framework v3.5 sp1, and if v3.5 sp1 is already installed you don't need to install anything. </p><br/><br/><p>The assemblies in the client profile are the same binaries as the full framework, so unless you're loading assemblies dynamically, then you shouldn't need to do any additional testing. </p><br/><br/><p>My thinking is that unless you must use assemblies which are NOT in the client profile, then you should target it. </p><br/><br/><p>As for the OS requirements, WPF won't run on pre-XP sp2, so if you need to run on other OSes, then you'll have to use WinForms anyways.</p><br/><br/><p>EDIT:</p><br/><br/><blockquote><br/>  <p>On IE, yes. It sends the .NET Framework version as part of the UA string, e.g.:</p><br/></blockquote><br/><br/><p>Actually so does FF3+3.5sp1:</p><br/><br/><blockquote><br/>  <p>Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1 (.NET CLR 3.5.30729)</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEL FILE FROM C #
    </pattern>
    <template>
<![CDATA[<p>If it is just simple data contained in the Excel file you can read the data via ADO.NET. See the connection strings listed here:</p><br/><br/><p><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow"><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow">http://www.connectionstrings.com/?carrier=excel2007</a></a><br/>or <br/><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow"><a href="http://www.connectionstrings.com/?carrier=excel" rel="nofollow">http://www.connectionstrings.com/?carrier=excel</a></a></p><br/><br/><p>-Ryan</p><br/><br/><p>Update: then you can just read the worksheet via something like <code>select * from [Sheet1$]</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL STYLE IN WPF
    </pattern>
    <template>
<![CDATA[<p><strong>I think the simple answer is that you can't do (at least in this version of WPF) what you are trying to do.</strong></p><br/><br/><p><em>That is, for any particular element only one Style can be applied.</em></p><br/><br/><p>However, as others have stated above, maybe you can use BasedOn to help you out. Check out the following piece of loose xaml. In it you will see that I have a base style that is setting a property that exists on the base class of the element that I want to apply two styles to. And, in the second style which is based on the base style, I set another property.</p><br/><br/><p><strong>So, the idea here ... is if you can somehow separate the properties that you want to set ... according the inheritance hierarchy of the element you want to set multiple styles on ... you might have a workaround.</strong></p><br/><br/><pre><code>&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;<br/>    &lt;Page.Resources&gt;<br/>        &lt;Style x:Key="baseStyle" TargetType="FrameworkElement"&gt;<br/>            &lt;Setter Property="HorizontalAlignment" Value="Left"/&gt;<br/>        &lt;/Style&gt;<br/>        &lt;Style TargetType="Button" BasedOn="{StaticResource baseStyle}"&gt;<br/>            &lt;Setter Property="Content" Value="Hello World"/&gt;<br/>        &lt;/Style&gt;<br/>    &lt;/Page.Resources&gt;<br/>    &lt;Grid&gt;<br/>        &lt;Button Width="200" Height="50"/&gt;<br/>    &lt;/Grid&gt;<br/>&lt;/Page&gt;<br/></code></pre><br/><br/><p><br><br/>Hope this helps.<br/><br><br/>cplotts<br/><p><br/><strong>Note:</strong><br/><br><br/>One thing in particular to note. If you change the TargetType in the second style (in first set of xaml above) to ButtonBase, the two Styles do not get applied. However, check out the following xaml below to get around that restriction. Basically, it means you need to give the Style a key and reference it with that key.</p><br/><br/><pre><code>&lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;<br/>    &lt;Page.Resources&gt;<br/>        &lt;Style x:Key="baseStyle" TargetType="FrameworkElement"&gt;<br/>            &lt;Setter Property="HorizontalAlignment" Value="Left"/&gt;<br/>        &lt;/Style&gt;<br/>        &lt;Style x:Key="derivedStyle" TargetType="ButtonBase" BasedOn="{StaticResource baseStyle}"&gt;<br/>            &lt;Setter Property="Content" Value="Hello World"/&gt;<br/>        &lt;/Style&gt;<br/>    &lt;/Page.Resources&gt;<br/>    &lt;Grid&gt;<br/>        &lt;Button Width="200" Height="50" Style="{StaticResource derivedStyle}"/&gt;<br/>    &lt;/Grid&gt;<br/>&lt;/Page&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETERMIN IF .NET 3.5 IS INSTAL
    </pattern>
    <template>
<![CDATA[<p>You could try:</p><br/><br/><pre><code>static bool HasNet35()<br/>{<br/>    try<br/>    {<br/>    	AppDomain.CurrentDomain.Load(<br/>    		"System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");<br/>    	return true;<br/>    }<br/>    catch<br/>    {<br/>    	return false;<br/>    }<br/>}<br/></code></pre><br/><br/><p>@<a href="http://stackoverflow.com/questions/16178/best-way-to-determine-if-net-35-is-installed#16253" rel="nofollow">Nick</a>: Good question, I'll try it in a bit. </p><br/><br/><p>Kev</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET WEB SERVIC ( WSE 2 3 WS SECUR ) FROM JAVA
    </pattern>
    <template>
<![CDATA[<p>This seems to be a popular question so I'll provide an overview of what we did in our situation.</p><br/><br/><p>It seems that services built in .NET are following an older ws-addressing standard (<a href="http://schemas.xmlsoap.org/ws/2004/03/addressing/" rel="nofollow">http://schemas.xmlsoap.org/ws/2004/03/addressing/</a>) and axis2 only understands the newer standard (<a href="http://schemas.xmlsoap.org/ws/2004/08/addressing/" rel="nofollow">http://schemas.xmlsoap.org/ws/2004/08/addressing/</a>).</p><br/><br/><p>In addition, the policyCache.config file provided is in a form that the axis2 rampart module can't understand.</p><br/><br/><p>So the steps we had to do, in a nutshell:</p><br/><br/><ul><br/><li>Read the policyCache.config and try to understand it.  Then rewrite it into a policy that rampart could understand.  (Some <a href="http://www.scribd.com/doc/466238/Official-Documentation-ws-apache-org-Axis2-Part-2" rel="nofollow">updated docs</a> helped.)</li><br/><li>Configure rampart with this policy.</li><br/><li>Take the keys that were provided in the .pfx file and convert them to a java key store.  There is a utility that comes with Jetty that can do that.</li><br/><li>Configure rampart with that key store.</li><br/><li>Write a custom axis2 handler that backward-converts the newer ws-addressing stuff that comes out of axis2 into the older stuff expected by the service.</li><br/><li>Configure axis2 to use the handler on outgoing messages.</li><br/></ul><br/><br/><p>In the end it was a lot of configuration and code for something that is supposed to be an open standard supported by the vendors.</p><br/><br/><p>Although I'm not sure what the alternative is...can you wait for the vendors (or in this case, the one vendor) to make sure that everything will inter-op?</p><br/><br/><p>As a postscript I'll add that I didn't end up doing the work, it was someone else on my team, but I think I got the salient details correct.  The other option that I was considering (before my teammate took over) was to call the WSS4J API directly to construct the SOAP envelope as the .NET service expected it.  I think that would have worked too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ITEM FROM A LIST CONDIT
    </pattern>
    <template>
<![CDATA[<p>If you want to specify both a limit for number of items to remove and a condition to select the items to remove, you can use this approach:</p><br/><br/><pre><code>int limit = 30; // Suppose you want to remove 30 items at most<br/>list.RemoveAll(item =&gt; ShouldIRemoveThis(item) &amp;&amp; limit-- &gt; 0);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET BUILD TOOL
    </pattern>
    <template>
<![CDATA[<p>We actually use a combination of NAnt and MSBuild with Cruise Control.  NAnt is used for script flow control and calls MSBuild to compile projects.  After the physical build is triggered, NAnt is used to publish the individual project build outputs to a shared location.</p><br/><br/><p>Not sure this is <i>the best</i> process.  I think many of us are still looking for a great build tool.  One promising thing I heard on <a href="http://www.dotnetrocks.com/default.aspx?showNum=362" rel="nofollow">.Net Rocks</a> recently is <a href="http://codebetter.com/blogs/james.kovacs/archive/2008/06/27/introducing-psake.aspx" rel="nofollow">James Kovac's PSake</a>, a build system he based entirely on PowerShell.  Sounds really promising since what you can do with PowerShell is fairly limitless in theory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS.NET APPLIC DIAGRAM
    </pattern>
    <template>
<![CDATA[<p>I used to use it a lot.  This designer worked good for stubbing out prototype projects, but ultimately I found myself wasting a lot of time moving the mouse around when I could be typing.  It seemed like an awesome idea to be able to print out the class diagrams to show APIs to other developers while I was prototyping, but it proved quite limiting and it looks awful on a non-color printer.</p><br/><br/><p>Now I just use the text editor and some <a href="http://www.autohotkey.com" rel="nofollow">AutoHotkey</a> macros to get everything done.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RGUMENTNULLEXCEPT FOR INTEG
    </pattern>
    <template>
<![CDATA[<p>Throwing an ArgumentNullException isn't appropriate unless the argument is actually <strong>null</strong>. Throw an ArgumentOutOfRangeException instead (preferably with a message informing the user what values of int are actually acceptable).</p><br/><br/><blockquote><br/>  <p><strong>ArgumentOutOfRangeException</strong> is thrown when a method is invoked and at least one of the arguments passed to the method is not a null reference (<strong>Nothing</strong> in Visual Basic) and does not contain a valid value.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPORI FOLDER
    </pattern>
    <template>
<![CDATA[<p>Here's what I've used in VB.NET.   Essentially the same as presented, except I usually didn't want to create the folder immediately.  </p><br/><br/><p>The advantage to use <a href="http://msdn.microsoft.com/en-us/library/system.io.path.getrandomfilename.aspx" rel="nofollow">GetRandomFilename</a> is that it doesn't create a file, so you don't have to clean up if your using the name for something other than a file.  Like using it for folder name.</p><br/><br/><pre><code>Private Function GetTempFolder() As String<br/>    Dim folder As String = Path.Combine(Path.GetTempPath, Path.GetRandomFileName)<br/>    Do While Directory.Exists(folder)<br/>        folder = Path.Combine(Path.GetTempPath, Path.GetRandomFileName)<br/>    Loop<br/><br/>    Return folder<br/>End Function<br/></code></pre><br/><br/><p><strong>Random</strong> Filename Example:</p><br/><br/><p>C:\Documents and Settings\username\Local Settings\Temp\u3z5e0co.tvq</p><br/><br/><p><hr /></p><br/><br/><p>Here's a variation using a Guid to get the temp folder name.  </p><br/><br/><pre><code>Private Function GetTempFolderGuid() As String<br/>    Dim folder As String = Path.Combine(Path.GetTempPath, Guid.NewGuid.ToString)<br/>    Do While Directory.Exists(folder)<br/>        folder = Path.Combine(Path.GetTempPath, Guid.NewGuid.ToString)<br/>    Loop<br/><br/>    Return folder<br/>End Function<br/></code></pre><br/><br/><p><strong>guid</strong> Example:</p><br/><br/><p>C:\Documents and Settings\username\Local Settings\Temp\2dbc6db7-2d45-4b75-b27f-0bd492c60496</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTMLSPECIALCHARACT EQUIVAL IN .NET
    </pattern>
    <template>
<![CDATA[<p>Try this.</p><br/><br/><pre><code>var encodedHtml = HttpContext.Current.Server.HtmlEncode(...);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOWNLOAD AND EXTRACT A GZIP FILE WITH C #
    </pattern>
    <template>
<![CDATA[<p>Here is a post I wrote last year that shows how to decompress a gzip file using C# and the built-in GZipStream class.<br/><a href="http://blogs.msdn.com/miah/archive/2007/09/05/zipping-files.aspx" rel="nofollow">http://blogs.msdn.com/miah/archive/2007/09/05/zipping-files.aspx</a></p><br/><br/><p>As for downloading it, you can use the standard <a href="http://msdn.microsoft.com/en-us/library/system.net.webrequest.aspx" rel="nofollow">WebRequest</a> or <a href="http://msdn.microsoft.com/en-us/library/system.net.webclient.aspx" rel="nofollow">WebClient</a> classes in .NET. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND CONVERT DATETIM S TO THE RFC 3339 DATE TIM FORMAT
    </pattern>
    <template>
<![CDATA[<p>This is an implementation in C# of how to parse and convert a DateTime to and from its RFC-3339 representation. The only restriction it has is that the DateTime is in Coordinated Universal Time (UTC).</p><br/><br/><pre><code>using System;<br/>using System.Globalization;<br/><br/>namespace DateTimeConsoleApplication<br/>{<br/>    /// &lt;summary&gt;<br/>    /// Provides methods for converting &lt;see cref="DateTime"/&gt; structures to and from the equivalent RFC 3339 string representation.<br/>    /// &lt;/summary&gt;<br/>    public static class Rfc3339DateTime<br/>    {<br/>        //============================================================<br/>        //  Private members<br/>        //============================================================<br/>        #region Private Members<br/>        /// &lt;summary&gt;<br/>        /// Private member to hold array of formats that RFC 3339 date-time representations conform to.<br/>        /// &lt;/summary&gt;<br/>        private static string[] formats = new string[0];<br/>        /// &lt;summary&gt;<br/>        /// Private member to hold the DateTime format string for representing a DateTime in the RFC 3339 format.<br/>        /// &lt;/summary&gt;<br/>        private const string format = "yyyy-MM-dd'T'HH:mm:ss.fffK";<br/>        #endregion<br/><br/>        //============================================================<br/>        //  Public Properties<br/>        //============================================================<br/>        #region Rfc3339DateTimeFormat<br/>        /// &lt;summary&gt;<br/>        /// Gets the custom format specifier that may be used to represent a &lt;see cref="DateTime"/&gt; in the RFC 3339 format.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;value&gt;A &lt;i&gt;DateTime format string&lt;/i&gt; that may be used to represent a &lt;see cref="DateTime"/&gt; in the RFC 3339 format.&lt;/value&gt;<br/>        /// &lt;remarks&gt;<br/>        /// &lt;para&gt;<br/>        /// This method returns a string representation of a &lt;see cref="DateTime"/&gt; that <br/>        /// is precise to the three most significant digits of the seconds fraction; that is, it represents <br/>        /// the milliseconds in a date and time value. The &lt;see cref="Rfc3339DateTimeFormat"/&gt; is a valid <br/>        /// date-time format string for use in the &lt;see cref="DateTime.ToString(String, IFormatProvider)"/&gt; method.<br/>        /// &lt;/para&gt;<br/>        /// &lt;/remarks&gt;<br/>        public static string Rfc3339DateTimeFormat<br/>        {<br/>            get<br/>            {<br/>                return format;<br/>            }<br/>        }<br/>        #endregion<br/><br/>        #region Rfc3339DateTimePatterns<br/>        /// &lt;summary&gt;<br/>        /// Gets an array of the expected formats for RFC 3339 date-time string representations.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;value&gt;<br/>        /// An array of the expected formats for RFC 3339 date-time string representations <br/>        /// that may used in the &lt;see cref="DateTime.TryParseExact(String, string[], IFormatProvider, DateTimeStyles, out DateTime)"/&gt; method.<br/>        /// &lt;/value&gt;<br/>        public static string[] Rfc3339DateTimePatterns<br/>        {<br/>            get<br/>            {<br/>                if (formats.Length &gt; 0)<br/>                {<br/>                    return formats;<br/>                }<br/>                else<br/>                {<br/>                    formats = new string[11];<br/><br/>                    // Rfc3339DateTimePatterns<br/>                    formats[0] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";<br/>                    formats[1] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffffK";<br/>                    formats[2] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffK";<br/>                    formats[3] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffK";<br/>                    formats[4] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK";<br/>                    formats[5] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffK";<br/>                    formats[6] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fK";<br/>                    formats[7] = "yyyy'-'MM'-'dd'T'HH':'mm':'ssK";<br/><br/>                    // Fall back patterns<br/>                    formats[8] = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK"; // RoundtripDateTimePattern<br/>                    formats[9] = DateTimeFormatInfo.InvariantInfo.UniversalSortableDateTimePattern;<br/>                    formats[10] = DateTimeFormatInfo.InvariantInfo.SortableDateTimePattern;<br/><br/>                    return formats;<br/>                }<br/>            }<br/>        }<br/>        #endregion<br/><br/>        //============================================================<br/>        //  Public Methods<br/>        //============================================================<br/>        #region Parse(string s)<br/>        /// &lt;summary&gt;<br/>        /// Converts the specified string representation of a date and time to its &lt;see cref="DateTime"/&gt; equivalent.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;param name="s"&gt;A string containing a date and time to convert.&lt;/param&gt;<br/>        /// &lt;returns&gt;A &lt;see cref="DateTime"/&gt; equivalent to the date and time contained in &lt;paramref name="s"/&gt;.&lt;/returns&gt;<br/>        /// &lt;remarks&gt;<br/>        /// The string &lt;paramref name="s"/&gt; is parsed using formatting information in the &lt;see cref="DateTimeFormatInfo.InvariantInfo"/&gt; object.<br/>        /// &lt;/remarks&gt;<br/>        /// &lt;exception cref="ArgumentNullException"&gt;&lt;paramref name="s"/&gt; is a &lt;b&gt;null&lt;/b&gt; reference (Nothing in Visual Basic).&lt;/exception&gt;<br/>        /// &lt;exception cref="FormatException"&gt;&lt;paramref name="s"/&gt; does not contain a valid RFC 3339 string representation of a date and time.&lt;/exception&gt;<br/>        public static DateTime Parse(string s)<br/>        {<br/>            //------------------------------------------------------------<br/>            //  Validate parameter<br/>            //------------------------------------------------------------<br/>            if(s == null)<br/>            {<br/>                throw new ArgumentNullException("s");<br/>            }<br/><br/>            DateTime result;<br/>            if (Rfc3339DateTime.TryParse(s, out result))<br/>            {<br/>                return result;<br/>            }<br/>            else<br/>            {<br/>                throw new FormatException(String.Format(null, "{0} is not a valid RFC 3339 string representation of a date and time.", s));<br/>            }<br/>        }<br/>        #endregion<br/><br/>        #region ToString(DateTime utcDateTime)<br/>        /// &lt;summary&gt;<br/>        /// Converts the value of the specified &lt;see cref="DateTime"/&gt; object to its equivalent string representation.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;param name="utcDateTime"&gt;The Coordinated Universal Time (UTC) &lt;see cref="DateTime"/&gt; to convert.&lt;/param&gt;<br/>        /// &lt;returns&gt;A RFC 3339 string representation of the value of the &lt;paramref name="utcDateTime"/&gt;.&lt;/returns&gt;<br/>        /// &lt;remarks&gt;<br/>        /// &lt;para&gt;<br/>        /// This method returns a string representation of the &lt;paramref name="utcDateTime"/&gt; that <br/>        /// is precise to the three most significant digits of the seconds fraction; that is, it represents <br/>        /// the milliseconds in a date and time value.<br/>        /// &lt;/para&gt;<br/>        /// &lt;para&gt;<br/>        /// While it is possible to display higher precision fractions of a second component of a time value, <br/>        /// that value may not be meaningful. The precision of date and time values depends on the resolution <br/>        /// of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's <br/>        /// resolution is approximately 10-15 milliseconds.<br/>        /// &lt;/para&gt;<br/>        /// &lt;/remarks&gt;<br/>        /// &lt;exception cref="ArgumentException"&gt;The specified &lt;paramref name="utcDateTime"/&gt; object does not represent a &lt;see cref="DateTimeKind.Utc"&gt;Coordinated Universal Time (UTC)&lt;/see&gt; value.&lt;/exception&gt;<br/>        public static string ToString(DateTime utcDateTime)<br/>        {<br/>            if (utcDateTime.Kind != DateTimeKind.Utc)<br/>            {<br/>                throw new ArgumentException("utcDateTime");<br/>            }<br/><br/>            return utcDateTime.ToString(Rfc3339DateTime.Rfc3339DateTimeFormat, DateTimeFormatInfo.InvariantInfo);<br/>        }<br/>        #endregion<br/><br/>        #region TryParse(string s, out DateTime result)<br/>        /// &lt;summary&gt;<br/>        /// Converts the specified string representation of a date and time to its &lt;see cref="DateTime"/&gt; equivalent.<br/>        /// &lt;/summary&gt;<br/>        /// &lt;param name="s"&gt;A string containing a date and time to convert.&lt;/param&gt;<br/>        /// &lt;param name="result"&gt;<br/>        /// When this method returns, contains the &lt;see cref="DateTime"/&gt; value equivalent to the date and time <br/>        /// contained in &lt;paramref name="s"/&gt;, if the conversion succeeded, <br/>        /// or &lt;see cref="DateTime.MinValue"&gt;MinValue&lt;/see&gt; if the conversion failed. <br/>        /// The conversion fails if the s parameter is a &lt;b&gt;null&lt;/b&gt; reference (Nothing in Visual Basic), <br/>        /// or does not contain a valid string representation of a date and time. <br/>        /// This parameter is passed uninitialized.<br/>        /// &lt;/param&gt;<br/>        /// &lt;returns&gt;&lt;b&gt;true&lt;/b&gt; if the &lt;paramref name="s"/&gt; parameter was converted successfully; otherwise, &lt;b&gt;false&lt;/b&gt;.&lt;/returns&gt;<br/>        /// &lt;remarks&gt;<br/>        /// The string &lt;paramref name="s"/&gt; is parsed using formatting information in the &lt;see cref="DateTimeFormatInfo.InvariantInfo"/&gt; object.<br/>        /// &lt;/remarks&gt;<br/>        public static bool TryParse(string s, out DateTime result)<br/>        {<br/>            //------------------------------------------------------------<br/>            //  Attempt to convert string representation<br/>            //------------------------------------------------------------<br/>            bool wasConverted   = false;<br/>            result              = DateTime.MinValue;<br/><br/>            if (!String.IsNullOrEmpty(s))<br/>            {<br/>                DateTime parseResult;<br/>                if (DateTime.TryParseExact(s, Rfc3339DateTime.Rfc3339DateTimePatterns, DateTimeFormatInfo.InvariantInfo, DateTimeStyles.AdjustToUniversal, out parseResult))<br/>                {<br/>                    result          = DateTime.SpecifyKind(parseResult, DateTimeKind.Utc);<br/>                    wasConverted    = true;<br/>                }<br/>            }<br/><br/>            return wasConverted;<br/>        }<br/>        #endregion<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REAL LIFE APPLIC OF YIELD
    </pattern>
    <template>
<![CDATA[<p>I realise this is an old question (pre Jon Skeet?) but I have been considering this question myself just lately. Unfortunately the current answers here (in my opinion) don't mention the most obvious advantage of the yield statement.</p><br/><br/><p>The biggest benefit of the yield statement is that it allows you to iterate over very large lists with much more efficient memory usage then using say a standard list.</p><br/><br/><p>For example, let's say you have a database query that returns 1 million rows.  You could retrieve all rows using a DataReader and store them in a List, therefore requiring list_size * row_size bytes of memory.</p><br/><br/><p>Or you could use the yield statement to create an Iterator and only ever store one row in memory at a time.  In effect this gives you the ability to provide a "streaming" capability over large sets of data. </p><br/><br/><p>Moreover, in the code that uses the Iterator, you use a simple foreach loop and can decide to break out from the loop as required.  If you do break early, you have not forced the retrieval of the entire set of data when you only needed the first 5 rows (for example).</p><br/><br/><p>Regarding:</p><br/><br/><pre><code>Ideally some problem that cannot be solved some other way<br/></code></pre><br/><br/><p>The yield statement does not give you anything you could not do using your own custom iterator implementation, but it saves you needing to write the often complex code needed.  There are very few problems (if any) that can't solved more than one way.</p><br/><br/><p>Here are a couple of more recent questions and answers that provide more detail:</p><br/><br/><p><a href="http://stackoverflow.com/questions/384392/yield-keyword-value-added">http://stackoverflow.com/questions/384392/yield-keyword-value-added</a></p><br/><br/><p><a href="http://stackoverflow.com/questions/317619/is-yield-useful-outside-of-linq">http://stackoverflow.com/questions/317619/is-yield-useful-outside-of-linq</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ILIST AND WHEN TO USE LIST
    </pattern>
    <template>
<![CDATA[<p>There are two rules I follow:</p><br/><br/><ul><br/><li>Accept the most basic type that will work</li><br/><li>Return the richest type your user will need</li><br/></ul><br/><br/><p>So when writing a function or method that takes a collection, write it not to take a List, but an IList&lt;T&gt;, an ICollection&lt;T&gt;, or IEnumerable&lt;T&gt;.  The generic interfaces will still work even for heterogenous lists because System.Object can be a T too.  Doing this will save you headache if you decide to use a Stack or some other data structure further down the road.  If all you need to do in the function is foreach through it, IEnumerable&lt;T&gt; is really all you should be asking for.</p><br/><br/><p>On the other hand, when returning an object out of a function, you want to give the user the richest possible set of operations without them having to cast around.  So in that case, if it's a List&lt;T&gt; internally, return a copy as a List&lt;T&gt;.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR TOP FEATUR REQUEST FOR SILVERLIGHT
    </pattern>
    <template>
<![CDATA[<ul><br/><li>SQL Compact Edition running on the Silverlight CLR</li><br/><li>Support for Triggers</li><br/><li>Support for resource dictionaries</li><br/></ul><br/><br/><p>Also, since you brought up Webcam I have to plug my Silverlight 2 Webcam Support POC. It's using Flash interop and allows you to capture PNG stills from Silverlight. I guess it's more a fun example of Silverlight, JavaScript and Flash interoperability than a really useful webcam solution. But you can do fun things with it. In my most recent blog post I use the webcam support to capture still pictures for a sliding puzzle game.</p><br/><br/><p><a href="http://jonas.follesoe.no/WebcamInSilverlight2NdashSlidingPuzzleGame.aspx" rel="nofollow"><a href="http://jonas.follesoe.no/WebcamInSilverlight2NdashSlidingPuzzleGame.aspx" rel="nofollow">http://jonas.follesoe.no/WebcamInSilverlight2NdashSlidingPuzzleGame.aspx</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIVAT A BLOGENGINE.NET INSTAL
    </pattern>
    <template>
<![CDATA[<p>I use this extension. Just save the file as RequireLogin.cs in your App_Code\Extensions folder and make sure the extension is activated.</p><br/><br/><pre><code>using System;<br/><br/>using System.Data;<br/><br/>using System.Configuration;<br/><br/>using System.Web;<br/><br/>using System.Web.Security;<br/><br/>using System.Web.UI;<br/><br/>using System.Web.UI.HtmlControls;<br/><br/>using System.Web.UI.WebControls;<br/><br/>using System.Web.UI.WebControls.WebParts;<br/><br/>using BlogEngine.Core;<br/><br/>using BlogEngine.Core.Web.Controls;<br/><br/>using System.Collections.Generic;<br/><br/><br/><br/>/// &lt;summary&gt;<br/><br/>/// Summary description for PostSecurity<br/><br/>/// &lt;/summary&gt;<br/><br/>[Extension("Checks to see if a user can see this blog post.",<br/><br/>            "1.0", "&lt;a href=\"http://www.lavablast.com\"&gt;LavaBlast.com&lt;/a&gt;")]<br/><br/>public class RequireLogin<br/>{<br/><br/>    static protected ExtensionSettings settings = null;<br/><br/><br/><br/>    public RequireLogin()<br/>    {<br/><br/>        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);<br/><br/><br/><br/>        ExtensionSettings s = new ExtensionSettings("RequireLogin");<br/><br/>        // describe specific rules for entering parameters<br/><br/>        s.Help = "Checks to see if the user has any of those roles before displaying the post. ";<br/><br/>        s.Help += "You can associate a role with a specific category. ";<br/><br/>        s.Help += "All posts having this category will require that the user have the role. ";<br/><br/>        s.Help += "A parameter with only a role without a category will enable to filter all posts to this role. ";<br/><br/>        ExtensionManager.ImportSettings(s);<br/><br/>        settings = ExtensionManager.GetSettings("PostSecurity");<br/><br/>    }<br/><br/><br/><br/>    protected void Post_Serving(object sender, ServingEventArgs e)<br/>    {<br/>        MembershipUser user = Membership.GetUser();<br/>        if(HttpContext.Current.Request.RawUrl.Contains("syndication.axd"))<br/>        {<br/>            return;<br/>        }<br/><br/>        if (user == null)<br/>        {<br/>            HttpContext.Current.Response.Redirect("~/Login.aspx");<br/>        }<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USTOM CONTROL COMPOSIT
    </pattern>
    <template>
<![CDATA[<p>I say go ahead with the custom rendered control. I find that in most cases the composite can be easier done and used in a UserControl, but anything beyond that and you'd need to have a finer degree of control (pun unintended) to merit your own rendering strategy.</p><br/><br/><p>There maybe controls that are simple enough to merit a composite (e.g., a textbox combined with a javascript/dhtml based datepicker, for example) but beyond that one example, it looks like custom rendered controls are the way to go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WINDOW VISTA UAC ELEV IF PATH IS PROTECT
    </pattern>
    <template>
<![CDATA[<p>The best way to detect if they are unable to perform an action is to attempt it and catch the <code>UnauthorizedAccessException</code>.</p><br/><br/><p>However as @<a href="http://stackoverflow.com/users/941/dannysmurf">DannySmurf</a> <a href="http://stackoverflow.com/questions/17533/request-vista-uac-elevation-if-path-is-protected#17544">correctly points out</a> you can only elevate a COM object or separate process.</p><br/><br/><p>There is a demonstration application within the Windows SDK Cross Technology Samples called <a href="http://msdn.microsoft.com/en-us/library/aa970890.aspx" rel="nofollow" title="MSDN - UAC Sample">UAC Demo</a>.  This demonstration application shows a method of executing actions with an elevated process.  It also demonstrates how to find out if a user is currently an administrator.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLACE A FILE IN RECYCL BIN INSTEAD OF DELET
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.daveamenta.com/2008-05/c-delete-a-file-to-the-recycle-bin/" rel="nofollow">http://www.daveamenta.com/2008-05/c-delete-a-file-to-the-recycle-bin/</a></p><br/><br/><p>From above:</p><br/><br/><pre><code>using Microsoft.VisualBasic;<br/><br/>string path = @"c:\myfile.txt";<br/>FileIO.FileSystem.DeleteDirectory(path, <br/>    FileIO.UIOption.OnlyErrorDialogs, <br/>    RecycleOption.SendToRecycleBin);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUID.TOSTR ( ) REVERS THE BYTE ORDER
    </pattern>
    <template>
<![CDATA[<p>Uniqueidentifier fields in Sql server can be indexed, and so are 'backwards'.</p><br/><br/><p>Guids can be generated from both machine specific info and 'event-time' information.</p><br/><br/><p>The default Guid in .Net is random, but you can get sequential Guids from it with an extern call:</p><br/><br/><pre><code>[DllImport( "rpcrt4.dll", SetLastError = true )]<br/>static extern int UuidCreateSequential( out Guid guid );<br/></code></pre><br/><br/><p>This will get you Guids based on your MAC address (<a href="http://msdn.microsoft.com/en-us/library/aa379322.aspx" rel="nofollow">MSDN docs</a>) that are sequential. </p><br/><br/><p>If you <code>.ToString()</code> these sequential guids then you will see the first part of the string varies, while the rest stays constant.</p><br/><br/><p>This makes equality checks between Guids quicker (as the differences will be at the start) and improves the variation for truncated ones. </p><br/><br/><p>For searching columns SqlServer builds indexes in a similar way to a telephone directory or dictionary.  It is much quicker to search for words starting with "Over*" than it would be to find ones ending in "*flow".</p><br/><br/><p>This means that for Sql server any sequential Guids need to be stored with the repeating value first, so it stores them back to front.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KNOW A QUICK WAY TO GET TO CUSTOM ATTRIBUT ON AN ENUM VALU
    </pattern>
    <template>
<![CDATA[<p>This is probably the easiest way.</p><br/><br/><p>A quicker way would be to Statically Emit the IL code using Dynamic Method and ILGenerator. Although I've only used this to GetPropertyInfo, but can't see why you couldn't emit CustomAttributeInfo as well. </p><br/><br/><p>For example code to emit a getter from a property</p><br/><br/><pre><code>   public delegate object FastPropertyGetHandler(object target);    <br/><br/>    private static void EmitBoxIfNeeded(ILGenerator ilGenerator, System.Type type)<br/>    {<br/>        if (type.IsValueType)<br/>        {<br/>            ilGenerator.Emit(OpCodes.Box, type);<br/>        }<br/>    }<br/><br/>    public static FastPropertyGetHandler GetPropertyGetter(PropertyInfo propInfo)<br/>        {<br/>            // generates a dynamic method to generate a FastPropertyGetHandler delegate<br/>            DynamicMethod dynamicMethod =<br/>                new DynamicMethod(string.Empty, typeof (object), new Type[] {typeof (object)},<br/>                                  propInfo.DeclaringType.Module);<br/><br/>            ILGenerator ilGenerator = dynamicMethod.GetILGenerator();<br/>            // loads the object into the stack<br/>            ilGenerator.Emit(OpCodes.Ldarg_0);<br/>            // calls the getter<br/>            ilGenerator.EmitCall(OpCodes.Callvirt, propInfo.GetGetMethod(), null);<br/>            // creates code for handling the return value<br/>            EmitBoxIfNeeded(ilGenerator, propInfo.PropertyType);<br/>            // returns the value to the caller<br/>            ilGenerator.Emit(OpCodes.Ret);<br/>            // converts the DynamicMethod to a FastPropertyGetHandler delegate to get the property<br/>            FastPropertyGetHandler getter =<br/>                (FastPropertyGetHandler) dynamicMethod.CreateDelegate(typeof (FastPropertyGetHandler));<br/><br/><br/>            return getter;<br/>        }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C4341 XX SIGN VALU IS OUT OF RANG FOR ENUM CONSTANT
    </pattern>
    <template>
<![CDATA[<p>This is a <a href="http://forums.msdn.microsoft.com/en-US/vclanguage/thread/7bc77d72-c223-4d5e-b9f7-4c639c68b624/" rel="nofollow">compiler bug</a>.  Here's <a href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=159519&amp;SiteID=1" rel="nofollow">another post</a> confirming it's a known issue. I've got the same issue in one of my projects and there's no way to prevent it from being triggered unless you have some way of avoiding the use of OdbcParameter. The most conservative way to suppress only the buggy warnings is to use</p><br/><br/><pre><code>#pragma warning( push )<br/>#pragma warning( disable: 4341 )<br/><br/>// code affected by bug<br/><br/>#pragma warning( pop )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REMOT NAME ADDRESS ( NOT IP )
    </pattern>
    <template>
<![CDATA[<p>Edit of my previous answer. <br/>Try (in vb.net): </p><br/><br/><pre><code>    Dim sTmp As String<br/>    Dim ip As IPHostEntry<br/><br/>    sTmp = MaskedTextBox1.Text<br/>    Dim ipAddr As IPAddress = IPAddress.Parse(sTmp)<br/>    ip = Dns.GetHostEntry(ipAddr)<br/>    MaskedTextBox2.Text = ip.HostName<br/></code></pre><br/><br/><p>Dns.resolve appears to be obsolete in later versions of .Net. As stated here before I believe the issue is caused by your IP address not having a fixed name or by it having multiple names. The example above works with Google addresses, but not with an address we use that has a couple of names associated with it. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOUND CONFLICT BETWEEN DIFFER VERSION OF THE SAME DEPEND ASSEMBL
    </pattern>
    <template>
<![CDATA[<p>This warning means that two projects reference the same assembly (e.g. System.Windows.Forms) but the two project require different versions. You have a few options:</p><br/><br/><ol><br/><li><p>Recompile all projects to use the same versions (e.g. move all to .Net 3.5). This is the preferred option because all code is running with the versions of dependencies they were compiled with.</p></li><br/><li><p>Add a <a href="http://msdn.microsoft.com/en-us/library/433ysdt1.aspx">binding redirect</a>. This will suppress the warning. However, your .Net 2.0 projects will (at runtime) be bound to the .Net 3.5 versions of dependent assemblies such as System.Windows.Forms. You can quickly add a binding redirect by double-clicking on error in Visual Studio.</p></li><br/><li><p>Use CopyLocal=true. I'm not sure if this will suppress the warning. It will, like option 2 above, mean that all projects will use the .Net 3.5 version of System.Windows.Forms.</p></li><br/></ol><br/><br/><p>Here is a utility to identify the offending reference(s):</p><br/><br/><p><a href="https://gist.github.com/1553265">https://gist.github.com/1553265</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A .NET COMPON TO ACCESS AN EMAIL INBOX
    </pattern>
    <template>
<![CDATA[<p>I recomment <a href="http://www.chilkatsoft.com" rel="nofollow">chilkat</a>.  They have pretty stable components, and you can get their email component for as cheap as $99 for a single developer.  Personally, I think going with the whole package of components is a better deal, as it's only $289, and comes with many useful components.  I'm not affiliated with them in any way, although I probably sound like I am.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEBBROWS CONTROL FROM SWALLOW EXCEPT
    </pattern>
    <template>
<![CDATA[<p>My best bet why it happens is because there is a native-managed-native boundary to cross. The native part doesn't forward the managed exceptions correctly and there is not much that can be done.</p><br/><br/><p>I am still hoping for a better answer though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STUDI COMPAR JEE VS. .NET
    </pattern>
    <template>
<![CDATA[<p>People have successfully built applications with both technology stacks.  People have also experienced colossal failures with both.  In the end, compatibility with existing platforms and skill sets is probably what matters most when selecting one over the other.  If you intend to deploy on non-Windows servers, for instance, then Java is obviously a better fit.</p><br/><br/><p>EDIT: The best way to get access to those kinds of studies is to get them from someone interested in selling you the technology.  Otherwise, companies like the Gartner Group charge large sums of money for papers like that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL SERVER 2005 2008 REFER
    </pattern>
    <template>
<![CDATA[<p>Have to also point out that the "SQL Server Books Online" is a great reference, and despite its name it is installed on your computer as part of the client tools installation.</p><br/><br/><p>Start>Microsoft SQL Server 2005>Documentation and Tutorials>SQL Server Books Online</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO SECUR PUBLISH A SITE POST BUILD
    </pattern>
    <template>
<![CDATA[<p>For some projects I use <a href="http://www.capify.org/" rel="nofollow">Capistrano</a> to push out to live. It is built on top of ruby and makes deploy script writing super easy and uses ssh. </p><br/><br/><p>On other projects I have a tiny deploy app that uses bash to do an svn export to a temporary directory and then rsync it over to the live server. You can make rsync use ssh.</p><br/><br/><p>I greatly prefer the Capistrano method, even if your project isn't in ruby/rails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WOULD LIKE SOME TIP FOR DEBUG WCF WEB SERVIC EXCEPT
    </pattern>
    <template>
<![CDATA[<p>I've found <a href="http://msdn.microsoft.com/en-us/library/ms732023.aspx" rel="nofollow">SvcTraceViewer.exe</a> to be the most valuable tool when it comes to diagnosing WCF errors.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MONO READI FOR PRIME TIME
    </pattern>
    <template>
<![CDATA[<p>There are a couple of scenarios to consider: (a) if you are porting an existing application and wondering if Mono is good enough for this task;   (b) you are starting to write some new code, and you want to know if Mono is mature enough.</p><br/><br/><p>For the first case, you can use the <a href="http://mono-project.com/MoMA" rel="nofollow">Mono Migration Analyzer tool</a> (Moma) to evaluate how far your application is from running on Mono.  If the evaluation comes back with flying colors, you should start on your testing and QA and get ready to ship.</p><br/><br/><p>If your evaluation comes back with a report highlighting features that are missing or differ significantly in their semantics in Mono you will have to evaluate whether the code can be adapted, rewritten or in the worst case whether your application can work with reduced functionality.      </p><br/><br/><p>According to our Moma statistics based on user submissions (this is from memory) about 50% of the applications work out of the box, about 25% require about a week worth of work (refactoring, adapting) another 15% require a serious commitment to redo chunks of your code, and the rest is just not worth bothering porting since they are so incredibly tied to Win32.   At that point, either you start from zero, or a business decision will drive the effort to make your code portable, but we are talking months worth of work (at least from the reports we have).</p><br/><br/><p>If you are starting from scratch, the situation is a lot simpler, because you will only be using the APIs that are present in Mono.   As long as you stay with the supported stack (which is pretty much .NET 2.0, plus all the core upgrades in 3.5 including LINQ and System.Core, plus any of the Mono cross-platform APIs) you will be fine.  </p><br/><br/><p>Every once in a while you might run into bugs in Mono or limitations, and you might have to work around them, but that is not different than any other system.</p><br/><br/><p>As for portability: ASP.NET applications are the easier ones to port, as those have little to no dependencies on Win32 and you can even use SQL server or other popular databases (there are plenty of bundled database providers with Mono).   </p><br/><br/><p>Windows.Forms porting is sometimes trickier because developers like to escape the .NET sandbox and P/Invoke their brains out to configure things as useful as the changing the cursor blinking rate expressed as two bezier points encoded in BCD form in a wParam.   Or some junk like that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARS VERS CONVERT
    </pattern>
    <template>
<![CDATA[<p>The <code>Convert.ToXXX()</code> methods are for objects that might be of the correct or similar type, while <code>.Parse()</code> and <code>.TryParse()</code> are specifically for strings:</p><br/><br/><pre><code>//o is actually a boxed int<br/>object o = 12345;<br/><br/>//unboxes it<br/>int castVal = (int) 12345;<br/><br/>//o is a boxed enum<br/>object o = MyEnum.ValueA;<br/><br/>//this will get the underlying int of ValueA<br/>int convVal = Convert.ToInt32( o );<br/><br/>//now we have a string<br/>string s = "12345";<br/><br/>//this will throw an exception if s can't be parsed<br/>int parseVal = int.Parse( s );<br/><br/>//alternatively:<br/>int tryVal;<br/>if( int.TryParse( s, out tryVal ) ) {<br/>    //do something with tryVal <br/>}<br/></code></pre><br/><br/><p>If you compile with optimisation flags TryParse is very quick - it's the best way to get a number from a string. However if you have an object that might be an int or might be a string Convert.ToInt32 is quicker.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOUS CLICK TO A BUTTON IN THE TASKBAR USE C #
    </pattern>
    <template>
<![CDATA[<p>Check out the section "How to steal focus on 2K/XP" at <a href="http://www.codeproject.com/KB/dialog/dlgboxtricks.aspx" rel="nofollow">http://www.codeproject.com/KB/dialog/dlgboxtricks.aspx</a>, as this is exactly what you need. I wouldn't go the taskbar route as the taskbar could be hidden or simply not there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT ELS DO YOU USE BESID DATASET
    </pattern>
    <template>
<![CDATA[<p>Since .NET 3.5 came out, I've exclusively used LINQ. It's really that good; I don't see any reason to use any of those old crutches any more. </p><br/><br/><p>As great as LINQ is, though, I think any ORM system would allow you to do away with that dreck.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      O PERMISS SET USE .NET INSTAL
    </pattern>
    <template>
<![CDATA[<p>Writing to the Program Files folder is a really bad idea, you should assume that this location is "read only" once installed. </p><br/><br/><p>Saving user settings in Program Files causes problems if more than two people use the computer at once (eg. Terminal Services) who's settings should be saved, do you want other users to know 'your' settings? What happens if your program writes settings to the file as user A, but user B can't edit the file? User B may have access to the directory, but not read/delete the preference file as this is owned by user A. </p><br/><br/><p>Legacy win9x programs often write to the program files folder, Windows Vista actually does some neat trickery to let these programs work. When your program writes a file, vista actually puts it someplace else that is only accessible to that user. The same is done for registry writes to HKLM (or so I discovered after hours of debugging...) and Server 2008 does the same thing.</p><br/><br/><p>If you're needing to save user settings the best alternative would be to save the settings to the Application Data folder (Environment Variable %APPDATA%)</p><br/><br/><p>If the settings are system wide, then the administrative user should set these after install or on first run and they should not be able to be overwritten by limited users.</p><br/><br/><p>So to answer your question - YES there is a way to do what you've asked. But it's a bad idea, it's insecure and will probably cause problems in the long run.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LUCEN TO SEARCH FOR EMAIL ADDRESS
    </pattern>
    <template>
<![CDATA[<p>No one gave a satisfactory answer, so we started poking around Lucene documentation and discovered we can accomplish this using custom Analyzers and Tokenizers.</p><br/><br/><p>The answer is this: create a WhitespaceAndAtSymbolTokenizer and a WhitespaceAndAtSymbolAnalyzer, then recreate your index using this analyzer. Once you do this, a search for "@gmail.com" will return all gmail addresses, because it's seen as a separate word thanks to the Tokenizer we just created.</p><br/><br/><p>Here's the source code, it's actually very simple:</p><br/><br/><pre><code>class WhitespaceAndAtSymbolTokenizer : CharTokenizer<br/>{<br/>    public WhitespaceAndAtSymbolTokenizer(TextReader input)<br/>        : base(input)<br/>    {<br/>    }<br/><br/>    protected override bool IsTokenChar(char c)<br/>    {<br/>        // Make whitespace characters and the @ symbol be indicators of new words.<br/>        return !(char.IsWhiteSpace(c) || c == '@');<br/>    }<br/>}<br/><br/><br/>internal class WhitespaceAndAtSymbolAnalyzer : Analyzer<br/>{<br/>    public override TokenStream TokenStream(string fieldName, TextReader reader)<br/>    {<br/>        return new WhitespaceAndAtSymbolTokenizer(reader);<br/>    }<br/>}<br/></code></pre><br/><br/><p>That's it! Now you just need to rebuild your index and do all searches using this new Analyzer. For example, to write documents to your index:</p><br/><br/><pre><code>IndexWriter index = new IndexWriter(indexDirectory, new WhitespaceAndAtSymbolAnalyzer());<br/>index.AddDocument(myDocument);<br/></code></pre><br/><br/><p>Performing searches should use the analyzer as well:</p><br/><br/><pre><code>IndexSearcher searcher = new IndexSearcher(indexDirectory);<br/>Query query = new QueryParser("TheFieldNameToSearch", new WhitespaceAndAtSymbolAnalyzer()).Parse("@gmail.com");<br/>Hits hits = query.Search(query);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT A SINGL INSTANC APPLIC
    </pattern>
    <template>
<![CDATA[<p>Here is a very good <a href="http://sanity-free.org/143/csharp_dotnet_single_instance_application.html" rel="nofollow">article</a> regarding the Mutex solution.  The approach described by the article is advantageous for two reasons.</p><br/><br/><p>First, it does not require a dependency on the Microsoft.VisualBasic assembly.  If my project already had a dependency on that assembly, I would probably advocate using the approach shown in the accepted answer.  But as it is, I do not use the Microsoft.VisualBasic assembly, and I'd rather not add an unnecessary dependency to my project.</p><br/><br/><p>Second, the article shows how to bring the existing instance of the application to the foreground when the user tries to start another instance.  That's a very nice touch that the other Mutex solutions described here do not address.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECK TO SEE IF THE USER IS CURRENT IDL
    </pattern>
    <template>
<![CDATA[<p>How about the Win32 <a href="http://www.codeproject.com/KB/cs/GetIdleTimeWithCS.aspx" rel="nofollow">LASTINPUTINFO</a> function?</p><br/><br/><pre><code>using System.Runtime.InteropServices;<br/><br/>[DllImport("User32.dll")] <br/>static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);<br/><br/>struct LASTINPUTINFO <br/>{ public uint cbSize;<br/>  public uint dwTime;<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SP.NET WEB SERVIC FROM ASP USE SOAPCLIENT
    </pattern>
    <template>
<![CDATA[<p>I solved this:</p><br/><br/><p>The SOAP client <em>request</em> node was picking up the default namespace from:</p><br/><br/><pre><code>&lt;ProcessMessage xmlns="http://internalservice.net/messageprocessing"&gt;<br/></code></pre><br/><br/><p>Adding an empty default namespace to the XML sent by the ASP client overrides this behaviour:</p><br/><br/><pre><code>xmlMessage = "&lt;request xmlns=''&gt;&lt;task&gt;....various xml&lt;/task&gt;&lt;/request&gt;"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUDIO SILENC IN WAV FILE USE C #
    </pattern>
    <template>
<![CDATA[<p>Audio analysis is a difficult thing requiring a lot of complex math (think Fourier Transforms). The question you have to ask is "what is silence". If the audio that you are trying to edit is captured from an analog source, the chances are that there isn't any silence... they will only be areas of soft noise (line hum, ambient background noise, etc).</p><br/><br/><p>All that said, an algorithm that should work would be to determine a minimum volume (amplitude) threshold and duration (say, &lt;10dbA for more than 2 seconds) and then simply do a volume analysis of the waveform looking for areas that meet this criteria (with perhaps some filters for millisecond spikes). I've never written this in C#, but this <a href="https://secure.codeproject.com/KB/audio-video/SoundViewer.aspx?fid=448560&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;select=2202971" rel="nofollow">CodeProject article</a> looks interesting; it describes C# code to draw a waveform... that is the same kind of code which could be used to do other amplitude analysis.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR SET FOR EACH DEVELOP
    </pattern>
    <template>
<![CDATA[<p>AppSettings can be overridden with a local file:</p><br/><br/><pre><code>&lt;appSettings file="localoveride.config"/&gt;<br/></code></pre><br/><br/><p>This allows for each developer to keep their own local settings.</p><br/><br/><p>As far as the connection string, in a perfect world all developers should connect to a test DB, not run SQL Server each.</p><br/><br/><p>However, I've found it best to keep a file named Web.Config.Prd in source control, and use that for build deployments. If someone modifies web.config, they must also add the change to the .PRD file...There is no good automation there :(</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSTEM.SERVICEMODEL CONFIGUR SECTION USE CONFIGURATIONMANAG
    </pattern>
    <template>
<![CDATA[<p>The &lt; system.serviceModel> element is for a configuration section <strong>group</strong>, not a section. You'll need to use System.ServiceModel.Configuration.ServiceModelSectionGroup.GetSectionGroup() to get the whole group;</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VISUAL C + + MEMORI MANAG BY THE DOT NET FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I'm not entirely sure what you're asking, but i'll give it a shot.</p><br/><br/><p>Visual C++ is a pure C/C++ compiler so has none of .NET's memory management, nor any of its runtime -- You have to manually call new and delete.</p><br/><br/><p>.NET also provides Managed C++, which is a slightly modified version of C++ that targets the .NET runtime, and is GC aware -- eg. its memory is managed by the .NET runtime.</p><br/><br/><p>Without more details about your bug I can't really make any suggestions, beyond suggesting that you make sure you use the appropriate GC guards, and the provide finalisers in any place they are needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TERLOCKED.EXCHANG BUT NOT FOR BOOLEAN
    </pattern>
    <template>
<![CDATA[<p>No; use integers instead of booleans.</p><br/><br/><p>In principle such a thing could be written (cmpxchg, the underlying processor instruction, can operate on 8, 16, 32, and 64-bit operands on x86, 8, 16, 32, 64, and 128-bit operands on x64), but in practice most APIs stick to pointer and double pointer (32 and 64-bit on x86, 64 and 128-bit on x64) operands, because they're all you really need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FILE IN C #
    </pattern>
    <template>
<![CDATA[<p>The File.Copy method:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/system.io.file.copy.aspx" rel="nofollow">MSDN Link</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR JAVA DEVELOP
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.25hoursaday.com/CsharpVsJava.html" rel="nofollow">http://www.25hoursaday.com/CsharpVsJava.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOST IMPORT THING TO LEARN ABOUT .NET AS A PROJECT MANAG
    </pattern>
    <template>
<![CDATA[<p>Start with the basics before you get to the higher level stuff like web services (though that is important too). The most important things you need to learn, as a project manager, are the things you're going to be questioning your underlings about later. For example, my PM (also a PHP guy) has absolutely no knowledge of garbage collection and its implications, which makes it incredibly difficult for me to explain to him why our .NET Windows service appears to be taking 80MB of RAM.</p><br/><br/><p>Remember, you are not the one who needs to know everything. You should be issuing overarching directives, and let the people with the expertise sort out the details. That said, study up on the technicals a bit so that they can communicate effectively with you.</p><br/><br/><p>Edit (8/24/08):You should know something about the underlying technicals; not necessarily all .NET stuff either (garbage collection, .config files, pipes and services if you're running services adjacent to your project's main focus, stuff like that). Higher-reaching concepts would probably include WPF (maybe Silverlight as well), LINQ (or your ORM of choice), as well as the Vista bridge and related bridging code if your project includes desktop apps at all. Those three things seem to be the focus for this round of .NET. Something else that's very important to have at least a passing knowledge of is the ways that .NET code can/must interoperate with native code: P/Invoke, Runtime Callable Wrapping and COM Callable Wrapping. There are still a lot of native things that don't have a .NET equivalent.</p><br/><br/><p>As for resources, I'd highly recommend MSDN Magazine. They tend to preview upcoming technologies and tools well before average developers will ever see them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA FROM A C # APPLIC
    </pattern>
    <template>
<![CDATA[<p>Here is one idea: use Xml Serialization.  Design your GameStats data structure and optionally use Xml attributes to influence the schema as you like.  I like to use this method for small data sets because its quick and easy and all I need to do is design and manipulate the data structure.</p><br/><br/><pre><code><br/>using (FileStream fs = new FileStream(....))<br/>{<br/>    // Read in stats<br/>    XmlSerializer xs = new XmlSerializer(typeof(GameStats));<br/>    GameStats stats = (GameStats)xs.Deserialize(fs);<br/><br/>    // Manipulate stats here ...<br/><br/>    // Write out game stats<br/>    XmlSerializer xs = new XmlSerializer(typeof(GameStats));<br/>    xs.Serialize(fs, stats);<br/><br/>    fs.Close();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT ORDIN IN C #
    </pattern>
    <template>
<![CDATA[<p>This page gives you a complete listing of all custom numerical formatting rules:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/0c899ak8.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/0c899ak8.aspx</a></p><br/><br/><p>As you can see, there is nothing in there about ordinals, so it can't be done using String.Format. However its not really that hard to write a function to do it.</p><br/><br/><pre><code>public string AddOrdinal(int num)<br/>{<br/>	switch(num % 100)<br/>	{<br/>		case 11:<br/>		case 12:<br/>		case 13:<br/>			return num.ToString() + "th";<br/>	}<br/><br/>	switch(num % 10)<br/>	{<br/>		case 1:<br/>			return num.ToString() + "st";<br/>		case 2:<br/>			return num.ToString() + "nd";<br/>		case 3:<br/>			return num.ToString() + "rd";<br/>		default:<br/>			return num.ToString() + "th";<br/>	}<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLIC DETECT AS A VIRU
    </pattern>
    <template>
<![CDATA[<p>Indeed, boot from a clean CD (use a known good machine to build <a href="http://nu2.nu/pebuilder/" rel="nofollow">BartPE</a> or something similar) and scan your machine thoroughly.  Another good thing to check, though, would be exactly which virus Avast! thinks your program is.  Once you know that, you should be able to look it up in one of the virus databases and insure that your software can't contain it.</p><br/><br/><p>The odds are that Avast! is just getting a false positive for some reason, and I don't know that there's much you can do about that other than contacting Avast! and hoping for a reply.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASP.NET YELLOW SCREEN OF DEATH DISPLAY CODE
    </pattern>
    <template>
<![CDATA[<p>A .Net assembly is compiled with metadata about the bytecode included that allows easy decompilation of the code - that's how tools like <a href="http://www.red-gate.com/products/reflector/" rel="nofollow">.Net Reflector</a> work.  The PDB files are debug symbols only - the difference in the Yellow Screen Of Death is that you'll get line numbers in the stack trace.</p><br/><br/><p>In other words, you'd get the code, even if the PDB files were missing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC TOKEN IN A LARG TEXT TEMPLAT
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.replace.aspx" rel="nofollow" title="MSDN">System.Text.RegularExpressions.Regex.Replace()</a> is what you seek - IF your tokens are odd enough that you need a regex to find them.</p><br/><br/><p><a href="http://blogs.msdn.com/debuggingtoolbox/archive/2008/04/02/comparing-regex-replace-string-replace-and-stringbuilder-replace-which-has-better-performance.aspx" rel="nofollow">Some kind soul did some performance testing</a>, and between Regex.Replace(), String.Replace(), and StringBuilder.Replace(), String.Replace() actually came out on top.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT ARE ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>Metadata. Data about your objects/methods/properties. </p><br/><br/><p>For example I might declare an Attribute called: DisplayOrder so I can easily control in what order properties should appear in the UI. I could then append it to a class and write some GUI components that extract the attributes and order the UI elements appropriately.</p><br/><br/><pre><code>public class DisplayWrapper<br/>{<br/>private UnderlyingClass underlyingObject;<br/><br/>public DisplayWrapper(UnderlyingClass u)<br/>{<br/>	underlyingObject = u;<br/>}<br/><br/>[DisplayOrder(1)]<br/>public int SomeInt<br/>{<br/>	get<br/>	{<br/>		return underlyingObject .SomeInt;<br/>	}<br/>}<br/><br/>[DisplayOrder(2)]<br/>public DateTime SomeDate<br/>{<br/>	get<br/>	{<br/>		return underlyingObject .SomeDate;<br/>	}<br/>}<br/></code></pre><br/><br/><p>}</p><br/><br/><p>Thereby ensuring that SomeInt is always displayed before SomeDate when working with my custom GUI components.</p><br/><br/><p>However, you'll see them most commonly used outside of the direct coding environment. For example the Windows Designer uses them extensively so it knows how to deal with custom made objects. Using the BrowsableAttribute like so:</p><br/><br/><pre><code>[Browsable(false)]<br/>public SomeCustomType DontShowThisInTheDesigner<br/>{<br/>    get{/*do something*/}<br/>}<br/></code></pre><br/><br/><p>Tells the designer not to list this in the available properties in the Properties window at design time for example.</p><br/><br/><p>You <em>could</em> also use them for code-generation, pre-compile operations (such as Post-Sharp)  or run-time operations such as Reflection.Emit.<br/>For example, you could write a bit of code for profiling that transparently wrapped every single call your code makes and times it. You could "opt-out" of the timing via an attribute that you place on particular methods.</p><br/><br/><pre><code>public void SomeProfilingMethod(MethodInfo targetMethod, object target, params object[] args)<br/>{<br/>    bool time = true;<br/>    foreach (Attribute a in target.GetCustomAttributes())<br/>    {<br/>    	if (a.GetType() is NoTimingAttribute)<br/>    	{<br/>    		time = false;<br/>    		break;<br/>    	}<br/>    }<br/>    if (time)<br/>    {<br/>    	StopWatch stopWatch = new StopWatch();<br/>    	stopWatch.Start();<br/>    	targetMethod.Invoke(target, args);<br/>    	stopWatch.Stop();<br/>    	HandleTimingOutput(targetMethod, stopWatch.Duration);<br/>    }<br/>    else<br/>    {<br/>    	targetMethod.Invoke(target, args);<br/>    }<br/>}<br/></code></pre><br/><br/><p>Delcaring them is easy. Just make a class that inherits from Attribute. </p><br/><br/><pre><code>	public class DisplayOrderAttribute : Attribute<br/>	{<br/>		private int order;<br/><br/>		public DisplayOrderAttribute(int order)<br/>		{<br/>			this.order = order;<br/>		}<br/><br/>		public int Order<br/>		{<br/>			get { return order; }<br/>		}<br/>	}<br/></code></pre><br/><br/><p>And remember that when you use the attribute you can omit the suffix "attribute" the compiler will add that for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN .NET
    </pattern>
    <template>
<![CDATA[<p>Block the finalizer thread. No other objects will be garbage collected until the finalizer thread is unblocked. Thus the amount of memory used will grow and grow.</p><br/><br/><p>Further reading: <a href="http://dotnetdebug.net/2005/06/22/blocked-finalizer-thread/" rel="nofollow">http://dotnetdebug.net/2005/06/22/blocked-finalizer-thread/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP RTF TEXT
    </pattern>
    <template>
<![CDATA[<p>I would use a hidden RichTextBox, set the Rtf member, then retrieve the Text member to sanitize the RTF in a well-supported way.  Then I would use manually inject the desired formatting afterwards.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEL LISTOBJECT AUTOS ON DATABIND
    </pattern>
    <template>
<![CDATA[<p>If anyone else is having this problem, I have found the cause of this exception.  ListObjects will automatically re-size on binding, as long as they do not affect any other objects on the sheet.  Keep in mind that ListObjects can only affect the Ranges which they wrap around.</p><br/><br/><p>In my case, the list object which was above the other one had fewer columns than the one below it.  Let's say the top ListObject had 2 columns, and the bottom ListObject had 3 columns.  When the top ListObject changed its number of rows, it had no ability to make any changes to the third column since it wasn't in it's underlying Range.  This means that it couldn't shift any cells in the third column, and so the second ListObject couldn't be properly moved, resulting in my exception above.</p><br/><br/><p>Changing the positions of the ListObjects to place the wider one above the smaller one works fine.  Following the logic above, this now means that the wider ListObject can shift all of the columns of the second ListObject, and since there is nothing below the smaller one it can also shift any cells necessary.  The reason I wasn't having any trouble on the initial binding is that both ListObjects were a single cell.</p><br/><br/><p>Since this is not optimal in my case, I will probably use empty columns or try to play around with invisible columns if that's possible, but at least the cause is now clear.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATH DISPLAY IN LABEL
    </pattern>
    <template>
<![CDATA[<p>Use <strong>TextRenderer.DrawText</strong> with <strong>TextFormatFlags.PathEllipsis</strong> flag</p><br/><br/><pre><code>void label_Paint(object sender, PaintEventArgs e)<br/>{<br/>  Label label = (Label)sender;<br/>  TextRenderer.DrawText(e.Graphics, label.Text, label.Font, label.ClientRectangle, label.ForeColor, TextFormatFlags.PathEllipsis);<br/>}<br/></code></pre><br/><br/><blockquote><br/>  <p>Your code is 95% there. The only<br/>  problem is that the trimmed text is<br/>  drawn on top of the text which is<br/>  already on the label.</p><br/></blockquote><br/><br/><p>Yes thanks, I was aware of that. My intention was only to demonstrate use of DrawText method. I didn't know whether you want to manually create event for each label or just  override OnPaint() method in inherited label. Thanks for sharing your final solution though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URISOURC AND DATA BIND
    </pattern>
    <template>
<![CDATA[<p>BitmapImage UriSource is a stream, i think, and there isn't a built in converter for it.</p><br/><br/><p>WPF has built in converters for certain common bindings.  If you bind the Image's Source to a string value, underneath the hood WPF will use a value converter to convert the string to a URI, and get the BitmapImage from that.</p><br/><br/><p>So if instead you did this:</p><br/><br/><pre><code>&lt;Image Source="{Binding ImageSource}" /&gt;<br/></code></pre><br/><br/><p>It would work (if the ImageSource property was a string representation of a valid uri to an image) </p><br/><br/><p>You can of course roll your own, and in Silverlight you need to because of issues the Image control has with Bindings:</p><br/><br/><pre class="lang-cs prettyprint-override"><code>public sealed class ImageConverter : IValueConverter<br/>{<br/>    public object Convert(object value, Type targetType,<br/>                          object parameter, CultureInfo culture)<br/>    {<br/>        try<br/>        {<br/>            return new BitmapImage(new Uri((string)value));<br/>        }<br/>        catch <br/>        {<br/>            return new BitmapImage();<br/>        }<br/>    }<br/><br/>    public object ConvertBack(object value, Type targetType,<br/>                              object parameter, CultureInfo culture)<br/>    {<br/>        throw new NotImplementedException();<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NODE FROM AN XMLDOCUMENT
    </pattern>
    <template>
<![CDATA[<p>Instead of </p><br/><br/><pre><code>configDoc.RemoveChild(projectNodes[i]);<br/></code></pre><br/><br/><p>try </p><br/><br/><pre><code>projectNodes[i].parentNode.RemoveChild(projectNodes[i]);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET CODE IN PARTIAL TRUST ENVIRON
    </pattern>
    <template>
<![CDATA[<p>This is an excellent question, especially from a TDD point of view and validating code under different trust scenarios. </p><br/><br/><p>I think the way I'd approach this would be something along the lines of - </p><br/><br/><ul><br/><li><p>Create an AppDomain in my TDD code using the AppDomain.CreateDomain() overload that allows you to pass in a PermissionSet. The PermissionSet would be constructed to match the different trust scenarios you'd want to test against.</p></li><br/><li><p>Load the assembly containing logic under test into the app domain</p></li><br/><li><p>Create instances of types/call methods etc in app domain, trap security exceptions</p></li><br/></ul><br/><br/><p>Something kinda like that. I've not had time to knock up a proof of concept yet.</p><br/><br/><p>Kev</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP A TEST CERT FOR AN SSL CONNECT IN .NET
    </pattern>
    <template>
<![CDATA[<p>I haven't found a <em>simple</em> way to do this yet, but I found <a href="http://www.herongyang.com/crypto/openssl_crt.html" rel="nofollow">this site</a> helpful a few months back.</p><br/><br/><p>O'Reilly also published a book called Network Security Hacks (available on Safari) that has a section starting at Hack #45 on creating your own certificate authority.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS FLEX
    </pattern>
    <template>
<![CDATA[<p>I think you should look at Silverlight as a long-term play, just as Microsoft seems to be doing. There's an obvious balance on when to use Silverlight vs. Flash when you're concerned about reach and install base, but here are some reasons Silverlight is a good direction to move in:</p><br/><br/><ol><br/><li><p>Second mover advantage - Just as Microsoft built a "better Java" with .NET, they're able to look at how you'd design a RIA plugin from scratch, today. They have the advantage of knowing how people use the web today, something the inventors of Flash could never have accurately guessed. Flash can add features, but they can't realistically chuck the platform and start over.</p></li><br/><li><p>Developer familiarity - While Silverlight is a new model, it's not entirely unfamiliar to developers. They'll "get" the way Silverlight works a lot more quickly than they'll understand firing up a new development environment with a new scripting language and new event paradigms.</p></li><br/><li><p>Being rid of the timeline model in Flash - Flash was originally built for keyframe based animations, and while there are ways to abstract this away, it's at the core of how Flash works. Silverlight ditches that for an application-centric model. </p></li><br/><li><p>ScottGu - ScottGu is fired up about Silverlight. Nuff said.</p></li><br/><li><p>Cool new features - While Silverlight still has some catching up to do with Flash on some obvious features (like webcam / mic integration, or 3d / graphics acceleration), there are some slick new technologies built in to Silverlight - Deep Zoom is one example. I'm seeing more "revolutionary" technologies on the Silverlight side, while Flash seems to be in maintenance mode at this point.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SYSTEM.CONFIGURATION.CONFIGUR INSTANC BASE ON ARBITRARI XML
    </pattern>
    <template>
<![CDATA[<p>There is actually a way I've discovered....</p><br/><br/><p>You need to define a new class inheriting from your original configuration section as follows:</p><br/><br/><pre><code>public class MyXmlCustomConfigSection : MyCustomConfigSection<br/>{<br/>    public MyXmlCustomConfigSection (string configXml)<br/>    {<br/>        XmlTextReader reader = new XmlTextReader(new StringReader(configXml));<br/>        DeserializeSection(reader);<br/>    }<br/>}<br/></code></pre><br/><br/><p><br/><br/>You can then instantiate your ConfigurationSection object as follows:</p><br/><br/><pre><code>string configXml = "&lt;?xml version=\"1.0\"?&gt;&lt;configuration&gt;...&lt;/configuration&gt;";<br/>MyCustomConfigSection config = new MyXmlCustomConfigSection(configXml);<br/></code></pre><br/><br/><p>Hope it helps someone :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOAD ASSEMBL
    </pattern>
    <template>
<![CDATA[<pre><code>using System;<br/>using System.Reflection;<br/>using System.Windows.Forms;<br/><br/>public class MyAppDomain<br/>{<br/>  public static void Main(string[] args)<br/>  {<br/>    AppDomain ad = AppDomain.CurrentDomain;<br/>    Assembly[] loadedAssemblies = ad.GetAssemblies();<br/><br/>    Console.WriteLine("Here are the assemblies loaded in this appdomain\n");<br/>    foreach(Assembly a in loadedAssemblies)<br/>    {<br/>      Console.WriteLine(a.FullName);<br/>    }<br/>  }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING CONCATEN METHOD USE C #
    </pattern>
    <template>
<![CDATA[<p>The StringBuilder.Append() method is much better than using the + operator.  But I've found that, when the concatenations are less than 1000, String.Join() is even more efficient than StringBuilder.</p><br/><br/><pre><code>StringBuilder sb = new StringBuilder();<br/>sb.Append(someString);<br/></code></pre><br/><br/><p>The only problem with String.Join is that you have to concatenate the strings with a common delimiter.  </p><br/><br/><pre><code>string key = String.Join("_", new String[] <br/>{ "Customers_Contacts", customerID, database, SessionID });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINQ FOR PAGE A GENER COLLECT
    </pattern>
    <template>
<![CDATA[<p>If you have your linq-query that contains all the rows you want to display, this code can be used:</p><br/><br/><pre><code>var pageNum = 3;<br/>var pageSize = 20;<br/>query = query.Skip((pageNum - 1) * pageSize).Take(pageSize);<br/></code></pre><br/><br/><p>You can also make an extension method on the object to be able to write</p><br/><br/><pre><code>query.Page(2,50)<br/></code></pre><br/><br/><p>to get the first 50 records of page 2. If that is want you want, the information is on the <a href="http://solidcoding.blogspot.com/2007/11/paging-with-linq.html" rel="nofollow">solid code blog.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET DEPEND INJECT FRAMEWORK ARE WORTH LOOK INTO
    </pattern>
    <template>
<![CDATA[<p>I suppose I might be being a bit picky here but it's important to note DI (Dependency Injection) is a programming pattern and is facilitated by (but does not require) an IoC (Inversion of Control) Framework. IoC Frameworks just make DI much easier, but it's not only DI that they do, they provide a host of other benefits over and above DI.</p><br/><br/><p>That being said, I'm sure that's what you were asking: about IoC Frameworks: I used to use <a href="http://www.springframework.net/" rel="nofollow">Spring.Net</a> and <a href="http://www.castleproject.org/container/index.html" rel="nofollow">CastleWindsor</a> a lot, but the real pain in the beehiind was all that pesky XML config you had to write! They're pretty much all moving this way now, but I started using <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> for the last year or so, and since it has moved to a fluent config using strongly typed generics and a registry, my pain barrier in using IoC has dropped below zero! I get an absolute kick out of knowing now that my IoC config is checked at compile-time (for the most part) and I have had nothing but joy with <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> and its speed. I won't say that the others were slow (runtime), but they were more difficult for me to setup and frustration often won the day.</p><br/><br/><p>I believe they're all moving towards a more strongly typed config now - or at least providing the option, but some people love putting all the config in XML - personally I can't bare it, so I have stuck to StructureMap now.</p><br/><br/><p>I can't comment much on <a href="http://ninject.org/" rel="nofollow">Ninject</a> except that I listened to Nate on one of the Herding Code podcasts and he's one <em>switched-on</em> guy, and the screencasts I've watched have really tempted me to try it out - maybe on the next project - who knows.</p><br/><br/><p><strong>Update:</strong> In a follow up to my comments here, I've been using <a href="http://ninject.org/" rel="nofollow">Ninject</a> (as promised) on my latest project and it has been an <em>absolute pleasure</em> to use. Words fail me a bit here, but (as we say in the UK) this framework is <em>the Dogs'</em>. I highly recommend it for any green fields projects where you want to be up and running quickly. I got all I needed from a <a href="http://www.dimecasts.net/Casts/ByAuthor/Justin%20Etheredge" rel="nofollow">fantastic set of Ninject screencasts</a> by Justin Etheredge. I also can't see that retro-fitting Ninject into existing (above average) code being a problem at all - but then the same could be said of <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> in my experience. It'll be a tough choice going forward between those two, but I'd rather have competition than stagnation and there's a decent amount of healthy competition out there.</p><br/><br/><p>Other IoC screencasts can also be found <a href="http://www.dimecasts.net/Casts/ByTag/IoC" rel="nofollow">here on Dimecasts</a>.</p><br/><br/><p>Hope that helps,</p><br/><br/><p>Rob G</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHARE A TRANSACT BETWEEN A .NET APPLIC AND A COM + OBJECT
    </pattern>
    <template>
<![CDATA[<p>Because VB and .NET will use different SQL connections (and there is no way to make ADO and ADO.NET share the same connection), your only possibility is to enlist the DTC (Distributed Transaction Coordinator). The DTC will coordinates the two independent transactions so they commit or are rolled-back together.</p><br/><br/><p><strong>From .NET</strong>, EnterpriseServices manages COM+ functionality, such as the DTC. In .NET 2.0 and forward, you can use the System.Transactions namespace, which makes things a little nicer. I think something like this should work (untested code):</p><br/><br/><pre><code>void SomeMethod()<br/>{<br/>    EnterpriseServicesInteropOption e = EnterpriseServicesInteropOption.Full;<br/>    using (TransactionScope s = new TransactionScope(e))<br/>    {<br/>        MyComPlusClass o = new MyComPlusClass();<br/><br/>        o.SomeTransactionalMethod();<br/>    }<br/>}<br/></code></pre><br/><br/><p>I am not familiar enough with this to give you more advice at this point.</p><br/><br/><p><strong>On the COM+ side</strong>, your object needs to be configured to use (most likely "require") a distributed transaction. You can do that from COM+ Explorer, by going to your object's <em>Properties</em>, selecting the <em>Transaction</em> tab, and clicking on "<em>Required</em>". I don't remember if you can do this from code as well; VB6 was created before COM+ was released, so it doesn't fully support everything COM+ does (its transactional support was meant for COM+'s predecessor, called MS Transaction Server).</p><br/><br/><p>If everything works correctly, your COM+ object should be enlisting in the existing Context created by your .NET code.</p><br/><br/><p>You can use the "Distributed Transaction Coordinator\Transaction List" node in "Component Services" to check and see the distributed transaction being created during the call.</p><br/><br/><p>Be aware that you cannot see the changes from the COM+ component reflected on data queries from the .NET side until the Transaction is committed! In fact, it is possible to deadlock! Remember that DTC will make sure that the two transactions are paired, but they are still separate database transactions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET PROTOCOL HOST AND PORT
    </pattern>
    <template>
<![CDATA[<p>The following (C#) code should do the trick</p><br/><br/><pre><code>Uri uri = new Uri("http://www.mywebsite.com:80/pages/page1.aspx");<br/>string requested = uri.Scheme + Uri.SchemeDelimiter + uri.Host + ":" + uri.Port;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUSINESSOBJECT OR BUSINESSOBJECTCOLLECT
    </pattern>
    <template>
<![CDATA[<p>I am generally in the camp of just using a  List directly, unless for some reason I need to encapsulate the data structure and provide a limited subset of its functionality. This is mainly because if I don't have a specific need for encapsulation then doing it is just a waste of time.</p><br/><br/><p>However, with the aggregate initializes feature in C# 3.0, there are some new situations where I would advocate using customized collection classes.</p><br/><br/><p>Basically, C# 3.0 allows any class that implements <code>IEnumerable</code> and has an Add method to use the new aggregate initializer syntax. For example, because Dictionary defines a method Add(K key, V value) it is possible to initialize a dictionary using this syntax:</p><br/><br/><pre><code>var d = new Dictionary&lt;string, int&gt;<br/>{<br/>    {"hello", 0},<br/>    {"the answer to life the universe and everything is:", 42}<br/>};<br/></code></pre><br/><br/><p>The great thing about the feature is that it works for add methods with any number of arguments. For example, given this collection:</p><br/><br/><pre><code>class c1 : IEnumerable<br/>{<br/>    void Add(int x1, int x2, int x3)<br/>    {<br/>        //...<br/>    }<br/><br/>    //...<br/>}<br/></code></pre><br/><br/><p>it would be possible to initialize it like so:</p><br/><br/><pre><code>var x = new c1<br/>{<br/>    {1,2,3},<br/>    {4,5,6}<br/>}<br/></code></pre><br/><br/><p>This can be really useful if you need to create static tables of complex objects. For example, if you were just using <code>List&lt;Customer&gt;</code> and you wanted to create a static list of customer objects you would have to create it like so:</p><br/><br/><pre><code>var x = new List&lt;Customer&gt;<br/>{<br/>    new Customer("Scott Wisniewski", "555-555-5555", "Seattle", "WA"),<br/>    new Customer("John Doe", "555-555-1234", "Los Angeles", "CA"),<br/>    new Customer("Michael Scott", "555-555-8769", "Scranton PA"),<br/>    new Customer("Ali G", "", "Staines", "UK")<br/>}<br/></code></pre><br/><br/><p>However, if you use a customized collection, like this one:</p><br/><br/><pre><code>class CustomerList  : List&lt;Customer&gt;<br/>{<br/>    public void Add(string name, string phoneNumber, string city, string stateOrCountry)<br/>    {<br/>        Add(new Customer(name, phoneNumber, city, stateOrCounter));<br/>    }<br/>}<br/></code></pre><br/><br/><p>You could then initialize the collection using this syntax:</p><br/><br/><pre><code>var customers = new CustomerList<br/>{<br/>    {"Scott Wisniewski", "555-555-5555", "Seattle", "WA"},<br/>    {"John Doe", "555-555-1234", "Los Angeles", "CA"},<br/>    {"Michael Scott", "555-555-8769", "Scranton PA"},<br/>    {"Ali G", "", "Staines", "UK"}<br/>}<br/></code></pre><br/><br/><p>This has the advantage of being both easier to type and easier to read because their is no need to retype the element type name for each element. The advantage can be particularly strong if the element type is long or complex. </p><br/><br/><p>That being said, this is only useful if you need static collections of data defined in your app. Some types of apps, like compilers, use them all the time. Others, like typical database apps don't because they load all their data from a database.</p><br/><br/><p>My advice would be that if you either need to define a static collection of objects, or need to encapsulate away the collection interface,  then create a custom collection class. Otherwise I would just use <code>List&lt;T&gt;</code> directly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RULE ENGIN WITH DECENT INTERFAC FOR WRITE RULE
    </pattern>
    <template>
<![CDATA[<p>NxBRE is one option. </p><br/><br/><p><a href="http://sourceforge.net/projects/nxbre/#item3rd-5" rel="nofollow">http://sourceforge.net/projects/nxbre/#item3rd-5</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCRYPT A CONFIG FIL IN .NET
    </pattern>
    <template>
<![CDATA[<p>To summarize the answers and what I've found so far, here are some good links to answer this question:</p><br/><br/><ul><br/><li><a href="http://aspnet.4guysfromrolla.com/articles/021506-1.aspx" rel="nofollow">Encrypting Configuration Information in ASP.NET 2.0 Applications - 4GuysFromRolla.com</a></li><br/><li><a href="http://davidhayden.com/blog/dave/archive/2005/11/17/2572.aspx" rel="nofollow">Encrypt Connection Strings AppSettings and Web.Config in ASP.NET 2.0 - Security Best Practices</a></li><br/><li><a href="http://blogs.techrepublic.com.com/programming-and-development/?p=448" rel="nofollow">Encrypting .NET configuration files through code</a> (VB.NET)</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/ms998280.aspx" rel="nofollow">How To: Encrypt Configuration Sections in ASP.NET 2.0 Using DPAPI - MSDN</a></li><br/></ul><br/><br/><p>Please feel free to complement with other links, maybe some to WinForms- or WPF-applications.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANTI ALIAS WORKAROUND
    </pattern>
    <template>
<![CDATA[<p>Have you tried putting a <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.integration.windowsformshost.aspx" rel="nofollow">WindowsFormsHost</a> control on a WPF window/control? That will allow WPF to render a WinForms control.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SSEMBL AND IT DEPEND
    </pattern>
    <template>
<![CDATA[<p>One nice approach I've used lately is to add an event handler for the AppDomain's AssemblyResolve event.</p><br/><br/><pre><code>AppDomain currentDomain = AppDomain.CurrentDomain;<br/>currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);<br/></code></pre><br/><br/><p>Then in the event handler method you can load the assembly that was attempted to be resolved using one of the Assembly.Load, Assembly.LoadFrom overrides and return it from the method.</p><br/><br/><p>EDIT:</p><br/><br/><p>Based on your additional information I think using the technique above, specifically resolving the references to an assembly yourself is the only real approach that is going to work without restructuring your app. What it gives you is that the location of each and every assembly that the CLR fails to resolve can be determined and loaded by your code at runtime... I've used this in similar situations for both pluggable architectures and for an assembly reference integrity scanning tool.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUT EMAIL AT A USER S LOCAL TIME
    </pattern>
    <template>
<![CDATA[<p>You have two options:</p><br/><br/><ul><br/><li>Store the adjusted time for the mail action into the database for each user. Then just compare server time with stored time. To avoid confusion and portability issues, I would store all times in UTC. So, send mail when SERVER<em>UTC</em>TIME() == storedUtcTime.</li><br/><li>Store the local time for each mail action into the database, then convert on-the-fly. Send mail when SERVER<em>UTC</em>TIME() == TO<em>UTC</em>TIME(storedLocalTime, userTimeZone).</li><br/></ul><br/><br/><p>You should decide what makes most sense for your application. For example if the mailing time is always the same for all users, it makes more sense to go with option (2). If the events times can change between users and even per user, it may make development and debugging easier if you choose option (1). Either way you will need to know the user's time zone.</p><br/><br/><p>*These function calls are obviously pseudo, since I don't know their invocations in T-SQL, but they should exist.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVER AUTO DISCOVERY. BROADCAST OR NOT
    </pattern>
    <template>
<![CDATA[<p>I've looked at both SSDP and UPnP for this type of functionality, but I'd recommend going with a custom UDP <a href="http://en.wikipedia.org/wiki/Multicast" rel="nofollow">multicast</a> solution. Basically, multicast is very similar to a broadcast, but only machines that have joined the multicast group (i.e. requested the broadcast) are contacted. </p><br/><br/><p>IMHO, SSDP and UPnP and bloated and overly complicated for resource discovery... but hey, it's a standard. ;)  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LATE BIND 32BIT 64 BIT LIB AT RUNTIM
    </pattern>
    <template>
<![CDATA[<p>I finally have an answer for this that appears to work.</p><br/><br/><p>Compile both 32 &amp; 64 bit versions - both managed &amp; unmanaged - into separate folders. Then have the .NET app choose at run time which directory to load the assemblies from.</p><br/><br/><p>The problem with using the ResolveEvent is that it only gets called if assemblies aren't found, so it is all to easy to accidentally end up with 32 bit versions. Instead use a second AppDomain object where we can change the ApplicationBase property to point at the right folder. So you end up with code like:</p><br/><br/><pre><code>static void Main(String[] argv)<br/>  {<br/>     // Create a new AppDomain, but with the base directory set to either the 32-bit or 64-bit<br/>     // sub-directories.<br/><br/>     AppDomainSetup objADS = new AppDomainSetup();<br/><br/>     System.String assemblyDir = System.IO.Path.GetDirectoryName(Application.ExecutablePath);<br/>     switch (System.IntPtr.Size)<br/>     {<br/>        case (4): assemblyDir += "\\win32\\";<br/>           break;<br/>        case (8): assemblyDir += "\\x64\\";<br/>           break;<br/>     }<br/><br/>     objADS.ApplicationBase = assemblyDir;<br/><br/>     // We set the PrivateBinPath to the application directory, so that we can still<br/>     // load the platform neutral assemblies from the app directory.<br/>     objADS.PrivateBinPath = System.IO.Path.GetDirectoryName(Application.ExecutablePath);<br/><br/>     AppDomain objAD = AppDomain.CreateDomain("", null, objADS);<br/>     if (argv.Length &gt; 0)<br/>        objAD.ExecuteAssembly(argv[0]);<br/>     else<br/>        objAD.ExecuteAssembly("MyApplication.exe");<br/><br/>     AppDomain.Unload(objAD);<br/><br/>  }<br/></code></pre><br/><br/><p>You end up with 2 exes - your normal app and a second switching app that chooses which bits to load.<br/>Note - I can't take credit for the details of this myself. One of my colleagues sussed that out given my initial pointer. If and when he signs up to StackOverflow I'll assign the answer to him</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUSH TO CLIENT THROUGH FIREWAL
    </pattern>
    <template>
<![CDATA[<p>I've found a couple of solutions:</p><br/><br/><p><a href="http://dotnetremoting.com/dow.aspx" rel="nofollow" title="DotNetRemoting">DotNetRemoting</a> Commercial, have used personally in two projects. Very easy to implement, powerful but not very actively developed anymore (if at all).</p><br/><br/><p><a href="http://www.zeroc.com/" rel="nofollow" title="ZeroC Ice">ZeroC Ice</a> GPL with a commercial option. Have only tested quickly. Looks more powerful than .NET Remoting and is very actively developed.</p><br/><br/><p><a href="http://www.remobjectssdk.com/" rel="nofollow" title="RemObjects">RemObjects</a> Commercial, active development, supports everything but does not seem to have all the more advanced features that GenuineChannels use.</p><br/><br/><p><a href="http://www.genuinechannels.com/" rel="nofollow" title="GenuineChannels">GenuineChannels</a>. It uses remoting with a lot of nice added features, the most important one being it works through NATs without the need to open the client firewall. Unfortunately seems to be very dead.</p><br/><br/><p>Another solution is to use streaming with IIS, according to this article: <a href="http://blogs.msdn.com/drnick/archive/2006/10/20/keeping-connections-open-in-iis.aspx" rel="nofollow" title="Keeping connections open in IIS">Keeping connections open in IIS</a></p><br/><br/><p>The client makes the first connection (http with IIS6, tcp with IIS7) to the server at port 80, the connection is then kept open with a streaming response that never ends.</p><br/><br/><p>I haven't had the time to experiment with this, and I haven't found a sample that says it specifically solves the firewall-problem, but here's an excellent sample that probably works: <a href="http://blogs.thinktecture.com/buddhike/archive/2007/05/23/414851.aspx" rel="nofollow">Streaming XML</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THROW EXCEPT BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>The way to preserve the stack trace is through the use of the throw; This is valid as well</p><br/><br/><pre><code>try {<br/>  // something that boms here<br/>} catch (Exception ex)<br/>{<br/>    throw;<br/>}<br/></code></pre><br/><br/><p>throw ex; is basically like throwing an exception from that point, so the stack trace would only go to where you are issuing the throw ex; statement</p><br/><br/><p><a href="http://stackoverflow.com/questions/22623/net-throwing-exceptions-best-practices#22649" rel="nofollow">@Mike</a> is also correct, assuming the exception allows you to pass an exception (which is recommended).</p><br/><br/><p><a href="http://codebetter.com/blogs/karlseguin/" rel="nofollow">Karl Seguin</a> has a <a href="http://codebetter.com/blogs/karlseguin/archive/2008/05/29/foundations-of-programming-pt-8-back-to-basics-exceptions.aspx" rel="nofollow">great write up on exception handling</a> in his <a href="http://codebetter.com/files/folders/codebetter_downloads/entry179694.aspx" rel="nofollow">foundations of programming e-book</a> as well, which is a great read.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GDI + ACTUAL STILL A USABL TECHNOLOG
    </pattern>
    <template>
<![CDATA[<p>It's still a technology worth using. There are lots of Windows Forms and unmanaged apps around that use GDI+ that either won't be upgraded, or that will be upgraded, but that don't need more advanced rendering capabilities. GDI+ is a good bolt-on solution for older applications, and for new applications written in Windows Forsm. That's the primary reason GDI+ wasn't axed in Vista in favour of a totally DirectX solution.</p><br/><br/><p>There's not specifically anything wrong with GDI/GDI+. True, it's not as advanced as Aero et al, but that doesn't always matter. Particularly in LOB applications (in companies that probably don't even have machines capable of running Vista - mine certainly doesn't), GDI+ is an extremely important technology.</p><br/><br/><p>The fact that it's not supported (for drawing, at least... you CAN still use it for image manipulation) in ASP.NET is a red herring, since other drawing technologies are not supported for web applications either (plugin-based "applications" notwithstanding).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SV ( OR SHEET IN XL ) TO SQL CREAT ( AND INSERT ) STATEMENT WITH .NET
    </pattern>
    <template>
<![CDATA[<p>In SQL server it is as easy as</p><br/><br/><pre><code>SELECT * INTO NewTablenNmeHere<br/>FROM OPENROWSET( 'Microsoft.Jet.OLEDB.4.0', <br/>'Excel 8.0;Database=C:\testing.xls','SELECT * FROM [Sheet1$]')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NYBODI KNOW OF EXIST CODE TO READ A MORK FILE ( THUNDERBIRD ADDRESS BOOK )
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://beagle-project.org" rel="nofollow">Beagle search engine</a> had code to parse Mork files.  It's not the most memory efficient solution, but it worked and could be a useful starting point.  Here's a link to the file:</p><br/><br/><p><a href="http://svn.gnome.org/viewvc/beagle/tags/BEAGLE_0_2_18/Util/Mork.cs?view=markup" rel="nofollow"><a href="http://svn.gnome.org/viewvc/beagle/tags/BEAGLE_0_2_18/Util/Mork.cs?view=markup" rel="nofollow">http://svn.gnome.org/viewvc/beagle/tags/BEAGLE_0_2_18/Util/Mork.cs?view=markup</a></a></p><br/><br/><p>(These days Beagle doesn't use this parser anymore; we took the easier (and supported) path of writing a Thunderbird extension which just sent the data to Beagle itself.  Has the disadvantage of not working while Thunderbird is closed, but has the advantage of not instilling the desire to bash your head in with the nearest blunt instrument.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUISECONTROL.NET BUILD PUBLISH ONLI PUBLISH COMPIL FILE
    </pattern>
    <template>
<![CDATA[<p>I set up a task to do this. I'm not aware of any way to make CruiseControl be that specific. I usually just chain a batch file to do the copy to the CC.net task.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAPISTRANO COMPAR FOR WINDOWS .NET
    </pattern>
    <template>
<![CDATA[<p>Scott Hanselman wrote about that <a href="http://www.hanselman.com/blog/CommentView.aspx?guid=2d0ed0ff-71cb-42d1-bc90-6c30de723f5e" rel="nofollow">here</a>.  It's called MS Deploy for now and there's a <a href="http://www.hanselman.com/blog/CommentView.aspx?guid=2d0ed0ff-71cb-42d1-bc90-6c30de723f5e" rel="nofollow">tech preview</a> available.  </p><br/><br/><p>I don't think it is enough like <a href="http://www.google.com/url?sa=U&amp;start=1&amp;q=http://www.capify.org/&amp;usg=AFQjCNGifKOASLbPFEKNt_1G3LUm04vKXQ" rel="nofollow">capistrano</a> for ruby or <a href="http://www.nongnu.org/fab/" rel="nofollow">fabric</a> for python.  Both of those apps allow you to create recipes and keep command line options to a minimum.  Keeping them in the recipe file allows you to keep that logic under source control and reduces the amount of typing when running tasks to give you a faster and easier experience. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LL USER FOLDER
    </pattern>
    <template>
<![CDATA[<p>[Major Edit]</p><br/><br/><p>You'll want to use the system.environment variables.  Most of the predefined ones are <a href="http://msdn.microsoft.com/en-us/library/system.environment.getenvironmentvariable.aspx" rel="nofollow">shown here</a>.  For the "All Users" you would use</p><br/><br/><p>System.Environment.GetEnvironmentVariable("ALLUSERSPROFILE")</p><br/><br/><p>I know I got a lot of upmods and a correct answer for my other stuff, but this actually works. where as the other <a href="http://msdn.microsoft.com/en-us/library/ms933062.aspx" rel="nofollow">environment variables</a> I linked to previously don't seem to work with that function call.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING.FORMAT STATIC
    </pattern>
    <template>
<![CDATA[<p>I don't actually know the answer but I suspect that it has something to do with the aspect of invoking methods on string literals directly.</p><br/><br/><p>If I recall correctly (I didn't actually verify this because I don't have an old IDE handy), early versions of the C# IDE had trouble detecting method calls against string literals in IntelliSense, and that has a big impact on the discoverability of the API.  If that was the case, typing the following wouldn't give you any help:</p><br/><br/><pre><code>"{0}".Format(12);<br/></code></pre><br/><br/><p>If you were forced to type </p><br/><br/><pre><code>new String("{0}").Format(12);<br/></code></pre><br/><br/><p>It would be clear that there was no advantage to making the Format method an instance method rather than a static method.  </p><br/><br/><p>The .NET libraries were designed by a lot of the same people that gave us MFC, and the String class in particular bears a strong resemblance to the CString class in MFC.  MFC does have an instance Format method (that uses printf style formatting codes rather than the curly-brace style of .NET) which is painful because there's no such thing as a CString literal.  So in a MFC codebase that I worked on I see a lot of this:</p><br/><br/><pre><code>CString csTemp = "";<br/>csTemp.Format("Some string: %s", szFoo);<br/></code></pre><br/><br/><p>which is painful.  (I'm not saying that the code above is a great way to do things even in MFC, but that does seem to be the way that most of the developers on the project learned how to use CString::Format).  Coming from that heritage, I can imagine that the API designers were trying to avoid that sort of situation again.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SKILL WHAT SHOULD I LEARN
    </pattern>
    <template>
<![CDATA[<p>If you want to be one of the best you need to specialise.  If you become very good in many skills then you may never become truly excellent in one.  I know because I have taken this route myself and have found it difficult to get employment at times.  After all, who wants someone who is capable at many languages when there is someone who excels at the specific thing they need.  If a company develops in C# then who would want someone who is OK at C# but also is good at C, Visual Basic, Perl and Cobol, when all they really want is the best possible C# developer for the money they can afford.</p><br/><br/><p>After all, you will only ever be employed for one, maybe two of your skills.  There are very few jobs for people who are good in 10 or 15 skills.</p><br/><br/><p>If you are looking to a new skill then maybe check out the job boards and find which skills are particularly in need, but be aware that what is the flavour of the month this year may not even be on the scene next year, which will make all of that effort to learn the skill futile and wasted.</p><br/><br/><p>What I would say is:</p><br/><br/><ol><br/><li>do one thing, and do it well.  This may include supporting skills (C#, ASP.Net, SQL, LINQ etc).  </li><br/><li>If you want to choose something else, then choose something complementary.</li><br/><li>Possibly most importantly, choose something you will enjoy.  Maybe Ruby on Rails is the current flavour of the month, but if you don't enjoy doing it, then don't do it.  Really, it's not worth it.  You will never wish, on your death bed, that you had worked more in something you didn't enjoy.</li><br/></ol><br/><br/><p>Another direction you could look at is maybe not for a particular development skill, but look for something else, maybe softskills like people management, beter business understanding or even look to something like literary skills to help improve your communications skills.  All of these will help to allow you to do what you want to do more, and cut down on the stuff you really don't enjoy, thus helping to make your job more enjoyable.</p><br/><br/><p>Apologies for the waffling here.  Hope you are still awake :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEHIND MD5CRYPT
    </pattern>
    <template>
<![CDATA[<p>A precise textual description of the crypt algorithm updated for use with sha256 and sha512 is at <a href="http://www.akkadia.org/drepper/SHA-crypt.txt" rel="nofollow">http://www.akkadia.org/drepper/SHA-crypt.txt</a></p><br/><br/><p>It includes contrasts with the MD5 algorithm, so it should give you what you're looking for.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECUR POLICI CHANG BY STANDARD USER
    </pattern>
    <template>
<![CDATA[<p>The latest version of .Net 3.5 SP1 now allows you to run managed executables over a network share without using CasPol.</p><br/><br/><p>See this <a href="http://blogs.msdn.com/brada/archive/2008/08/13/net-framework-3-5-sp1-allows-managed-code-to-be-launched-from-a-network-share.aspx" rel="nofollow">post</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE ANI TIP TO IMPROV RESHARP AND OR VISUAL STUDIO PERFORM
    </pattern>
    <template>
<![CDATA[<p><strong>Turn off the annoying RSS reader</strong></p><br/><br/><ul><br/><li>Tools, Options, Environment, Startup</li><br/></ul><br/><br/><p><strong>Turn off all the animations</strong></p><br/><br/><ul><br/><li>Tools, Options, Environment, Animate Environment Tools</li><br/></ul><br/><br/><p><strong>Install the <a href="http://msdn.microsoft.com/en-us/vstudio/products/cc533447.aspx" rel="nofollow">recent Service Pack</a></strong></p><br/><br/><p><strong>Clean out your WebCache</strong></p><br/><br/><ul><br/><li>AppData\Local\Microsoft\WebSiteCache</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPERI USE ASP.NET MVC FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I've just been recently turned on to MVC and Linq to Sql for Asp.Net.  I'm still learning both, and I'm really enjoying them both.  There are quite a few screen casts on <a href="http://www.asp.net/learn/" rel="nofollow">http://www.asp.net/learn/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARTIAL TRUST .NET ASSEMBL FROM A NETWORK SHARE
    </pattern>
    <template>
<![CDATA[<p>With .NET 3.5 SP1, .NET assemblies running from UNC shares have full permissions. </p><br/><br/><p>See Brad Abrams's <a href="http://blogs.msdn.com/brada/archive/2007/10/26/adhoc-poll-allowing-net-exes-to-run-off-a-network-share.aspx">Allow .exes to be run off a network shares</a> for workaround and discussions, and finally the follow up <a href="http://blogs.msdn.com/brada/archive/2008/08/13/net-framework-3-5-sp1-allows-managed-code-to-be-launched-from-a-network-share.aspx">.NET 3.5 SP1 allows managed code to be launched from a network share</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOOK MY PROGRAM WITH WINDOW EXPLOR S RENAM EVENT
    </pattern>
    <template>
<![CDATA[<p>You can probably solve this by using the <a href="http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx" rel="nofollow">FileSystemWatcher class</a> in .NET framework.</p><br/><br/><p>From the class remarks:</p><br/><br/><blockquote><br/>  <p>You can watch for renaming, deletion,<br/>  or creation of files or directories.<br/>  For example, to watch for renaming of<br/>  text files, set the Filter property to<br/>  "*.txt" and call the WaitForChanged<br/>  method with a Renamed specified for<br/>  its parameter.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOD NOT WORK ON STACKOVERFLOW FEED
    </pattern>
    <template>
<![CDATA[<p>Don't confuse the namespace names in the XML file with the namespace names for your namespace manager. They're both shortcuts, and they don't necessarily have to match.</p><br/><br/><p>So you can register "http://www.w3.org/2005/Atom" as "atom", and then do a SelectNodes for "atom:entry".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET MANAG MEMORI HANDL VALU TYPE INSID OBJECT
    </pattern>
    <template>
<![CDATA[<p>Value-type values for a class <em>have</em> to live together with the object instance in the managed heap. The thread's stack for a method only lives for the duration of a method; how can the value persist if it only exists within that stack?</p><br/><br/><p>A class' object size in the managed heap is the sum of its value-type fields, reference-type pointers, and additional CLR overhead variables like the Sync block index. When one assigns a value to an object's value-type field, the CLR copies the value to the space allocated within the object for that particluar field.</p><br/><br/><p>Take for example, a simple class with a single field.</p><br/><br/><pre><code>public class EmbeddedValues<br/>{<br/>  public int NumberField;<br/>}<br/></code></pre><br/><br/><p>And with it, a simple testing class.</p><br/><br/><pre><code>public class EmbeddedTest<br/>{<br/>  public void TestEmbeddedValues()<br/>  {<br/>    EmbeddedValues valueContainer = new EmbeddedValues();<br/><br/>    valueContainer.NumberField = 20;<br/>    int publicField = valueContainer.NumberField;<br/>  }<br/>}<br/></code></pre><br/><br/><p>If you use the MSIL Disassembler provided by the .NET Framework SDK to peek at the IL code for EmbeddedTest.TestEmbeddedValues()</p><br/><br/><pre><code>.method public hidebysig instance void  TestEmbeddedValues() cil managed<br/>{<br/>  // Code size       23 (0x17)<br/>  .maxstack  2<br/>  .locals init ([0] class soapextensions.EmbeddedValues valueContainer,<br/>           [1] int32 publicField)<br/>  IL_0000:  nop<br/>  IL_0001:  newobj     instance void soapextensions.EmbeddedValues::.ctor()<br/>  IL_0006:  stloc.0<br/>  IL_0007:  ldloc.0<br/>  IL_0008:  ldc.i4.s   20<br/>  IL_000a:  stfld      int32 soapextensions.EmbeddedValues::NumberField<br/>  IL_000f:  ldloc.0<br/>  IL_0010:  ldfld      int32 soapextensions.EmbeddedValues::NumberField<br/>  IL_0015:  stloc.1<br/>  IL_0016:  ret<br/>} // end of method EmbeddedTest::TestEmbeddedValues<br/></code></pre><br/><br/><p>Notice the CLR is being told to <strong>stfld</strong> the loaded value of "20" in the stack to the loaded EmbeddValues' NumberField field location, directly into the managed heap. Similarly, when retrieving the value, it uses <strong>ldfld</strong> instruction to directly copy the value out of that managed heap location into the thread stack. No box/unboxing happens with these types of operations.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST AND LAUNCH APPLIC ASSOCI WITH AN EXTENS
    </pattern>
    <template>
<![CDATA[<p>Sample code:</p><br/><br/><pre><code>using System;<br/>using Microsoft.Win32;<br/><br/>namespace GetAssociatedApp<br/>{<br/>    class Program<br/>    {<br/>        static void Main(string[] args)<br/>        {<br/>            const string extPathTemplate = @"HKEY_CLASSES_ROOT\{0}";<br/>            const string cmdPathTemplate = @"HKEY_CLASSES_ROOT\{0}\shell\open\command";<br/><br/>            // 1. Find out document type name for .jpeg files<br/>            const string ext = ".jpeg";<br/><br/>            var extPath = string.Format(extPathTemplate, ext);<br/><br/>            var docName = Registry.GetValue(extPath, string.Empty, string.Empty) as string;<br/>            if (!string.IsNullOrEmpty(docName))<br/>            {<br/>                // 2. Find out which command is associated with our extension<br/>                var associatedCmdPath = string.Format(cmdPathTemplate, docName);<br/>                var associatedCmd = <br/>                    Registry.GetValue(associatedCmdPath, string.Empty, string.Empty) as string;<br/><br/>                if (!string.IsNullOrEmpty(associatedCmd))<br/>                {<br/>                    Console.WriteLine("\"{0}\" command is associated with {1} extension", associatedCmd, ext);<br/>                }<br/>            }<br/>        }<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPERATIONEXCEPT WHILE CREAT WCF WEB SERVIC INSTANC
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Here is my app.config file of the class library:</p><br/></blockquote><br/><br/><p>You should put this configuration settings to main app's config file. .NET application (which is calling your class library) uses data from it's own config file not from your library config file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # .NET WINDOW APPLIC WITH MULTIPL VIEW
    </pattern>
    <template>
<![CDATA[<p>Creating a bunch of overlaid panels is a design-time nightmare.</p><br/><br/><p>I would suggest using a tab control with each "view" on a separate tab, and then picking the correct tab at runtime.  You can avoid showing the tab headers by putting something like this in your form's Load event:</p><br/><br/><pre><code>tabControl1.Top = tabControl1.Top - tabControl1.ItemSize.Height;<br/>tabControl1.Height = tabControl1.Height + tabControl1.ItemSize.Height;<br/>tabControl1.Region = new Region(new RectangleF(tabPage1.Left, tabPage1.Top, tabPage1.Width, tabPage1.Height + tabControl1.ItemSize.Height));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOM WINDOW FORM TEST
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://www.codeplex.com/white" rel="nofollow">http://www.codeplex.com/white</a> and <a href="http://nunitforms.sourceforge.net/" rel="nofollow">http://nunitforms.sourceforge.net/</a>. We've used the White project with success.</p><br/><br/><p><em>Same Answer to a previous question</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FASTEST WAY TO REMOV NEWLIN FROM A STRING IN C #
    </pattern>
    <template>
<![CDATA[<p>why not:</p><br/><br/><pre><br/><code><br/>string s = "foobar\ngork";<br/>string v = s.Replace(Environment.NewLine,",");<br/>System.Console.WriteLine(v);<br/></code><br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPRES A VERI LARG INTEG IN .NET
    </pattern>
    <template>
<![CDATA[<p>.NET has a BigInteger class, but it is internal, unfortunately. However, several places have their own. You can grab an implementation from IronPython, or the one from CodeProject, or from Visual J#. I have to say, I've not tried these myself, so I don't know which one is the best.</p><br/><br/><p><a href="http://www.codeplex.com/IronPython" rel="nofollow">http://www.codeplex.com/IronPython</a><br/><a href="http://www.codeproject.com/KB/cs/biginteger.aspx" rel="nofollow">http://www.codeproject.com/KB/cs/biginteger.aspx</a><br/><a href="http://msdn.microsoft.com/en-us/magazine/cc163696.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc163696.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COSTLI IS .NET REFLECT
    </pattern>
    <template>
<![CDATA[<p>It is. But that depends on what you're trying to do. </p><br/><br/><p>I use reflection to dynamically load assemblies (plugins) and its performance "penalty" is not a problem, since the operation is something I do during startup of the application.</p><br/><br/><p>However, if you're reflecting inside a series of nested loops with reflection calls on each, I'd say you should revisit your code :)</p><br/><br/><p>For "a couple of time" operations, reflection is perfectly acceptable and you won't notice any delay or problem with it. It's a very powerful mechanism and it is even used by .NET, so I don't see why you shouldn't give it a try. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NAVIGATIONSERVIC INITI
    </pattern>
    <template>
<![CDATA[<p>MSDN has a nice writeup about the navigation service and a lot of examples showing how to use it:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/ms750478.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms750478.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NAME OF THE EXECUT .EX
    </pattern>
    <template>
<![CDATA[<p>I am not sure whether it works from managed code (or even the compact framework), but in Win32 you can call GetModuleFileName to find the running exe file.</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/ms683197(VS.85).aspx" rel="nofollow">MSDN: GetModuleFileName</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEST WAY TO CONNECT TO A .NET REMOT SERVER OBJECT
    </pattern>
    <template>
<![CDATA[<p>The first two lines are in the server-side code, for marshaling out the server object, yes?</p><br/><br/><p>In that case, yes, the third line is the simplest you can get at client-side.</p><br/><br/><p>In addition, you can serve out additional server-side objects from the <strong>MyServerObject</strong> instance, if you include public accessors for them in <strong>IRemoteServer</strong> interface, so, accessing those objects become the simple matter of method calls or property accesses on your main server object, so you don't have to use activator for every single thing:</p><br/><br/><pre><code>//obtain another marshalbyref object of the type ISessionManager:<br/>ISessionManager = MyServerObject.GetSessionManager();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIGUR OUT HOW MUCH MEMORI A .NET APPDOMAIN IS CONSUM
    </pattern>
    <template>
<![CDATA[<p>Here's the documentation for querying a process's memory usage. Not the same as the AppDomain, but it might be a place to start.</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/s80a75e5(VS.80).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/s80a75e5(VS.80).aspx</a></p><br/><br/><p>You can ask the GC what it thinks is currently allocated also.</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/system.gc.gettotalmemory(VS.71).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.gc.gettotalmemory(VS.71).aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOAD RESOURC FROM RESOURC FILE
    </pattern>
    <template>
<![CDATA[<p>Question was asked before Server Fault, where it probably belongs.  Anyway, I never did figure out the error so assume it's closed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMB GECKO OR WEBKIT IN A WINDOW FORM JUST LIKE A WEBVIEW
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/p/geckofx/" rel="nofollow">http://code.google.com/p/geckofx/</a></p><br/><br/><p>This is a nice .NET-wrapped version of Gecko</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE USER SET FOR A .NET APPLIC
    </pattern>
    <template>
<![CDATA[<p>I love using the built-in <a href="http://msdn.microsoft.com/en-us/library/a65txexh.aspx" rel="nofollow">Application Settings</a>. Then you have built in support for using the settings designer if you want at design-time, or at runtime to use:  </p><br/><br/><pre><code>// read setting<br/>string setting1 = (string)Settings.Default["MySetting1"];<br/>// save setting<br/>Settings.Default["MySetting2"] = "My Setting Value";<br/></code></pre><br/><br/><p>It does store the settings in a similar folder structure as you describe (with the version in the path). However, with a simple call to:  </p><br/><br/><pre><code>Settings.Default.Upgrade();<br/></code></pre><br/><br/><p>The app will pull all previous versions settings in to save in. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTI DIMENSION ARRAY PRINT
    </pattern>
    <template>
<![CDATA[<p>Thanks for the answer, here is what I wrote while I waited:</p><br/><br/><pre><code>public static string Format(Array array)<br/>{<br/>    var builder = new StringBuilder();<br/>    builder.AppendLine("Count: " + array.Length);<br/>    var counter = 0;<br/><br/>    var dimensions = new List&lt;int&gt;();<br/>    for (int i = 0; i &lt; array.Rank; i++)<br/>    {<br/>    	dimensions.Add(array.GetUpperBound(i) + 1);<br/>    }<br/><br/>    foreach (var current in array)<br/>    {<br/>    	var index = "";<br/>    	var remainder = counter;<br/>    	foreach (var bound in dimensions)<br/>    	{<br/>    		index = remainder % bound + ", " + index;<br/>    		remainder = remainder / bound;<br/>    	}<br/>    	index = index.Substring(0, index.Length - 2);<br/><br/>    	builder.AppendLine("   [" + index + "] " + current);<br/>    	counter++;<br/>    }<br/>    return builder.ToString();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF ( ) EQUIVAL FOR REFER TYPE
    </pattern>
    <template>
<![CDATA[<p>If you don't mind it being a little less accurate than perfect, and for comparative purposes, you could serialize the object/s and measure that (in bytes for example)</p><br/><br/><p><em>EDIT (I kept thinking after posting)</em>: Because it's a little more complicated than sizeof for valuetypes, for example: reference types can have references to other objects and so on... there's not an exact and easy way to do it that I know of...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POP3 .NET LIBRARI
    </pattern>
    <template>
<![CDATA[<p>as I wrote in the <a href="http://stackoverflow.com/questions/44383/reading-email-using-pop3-in-c#102135">answer</a> to the similar question (<a href="http://stackoverflow.com/questions/44383/reading-email-using-pop3-in-c">Reading Email using Pop3 in C#</a>) the downloading message via the POP3 is the easy part of this task. The parsing of the message is much harder. Handling UNICODE, mangled emails/spams, internationalization issues, code for auto correction of errors which came from Outlook and Thunderbird  and testing on big pile of messages is quite time consuming and takes a few months of development time.</p><br/><br/><p>I would try the code from the codeproject and if it suits your needs stick with it. In case of too many parsing problem the commercial email component with decent support could be a wise move. I would recommend our <a href="http://www.rebex.net/mail.net/" rel="nofollow">Rebex Mail</a> ($149 single dev) but I'm biased. Feel free to browse for you own favorite ;-). At least it will be (in case of any problem) someone who is paid for solving your mail parsing problem.</p><br/><br/><p>Martin</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS AND METHOD IN .NET ASSEMBL
    </pattern>
    <template>
<![CDATA[<p>I know Xenocode can merge assemblies into one but I am not sure if it will internalize other non-primary assemblies.</p><br/><br/><p>I have found the /internalize switch in ILMerge that "internalize" all assemblies except the primary one. Pretty useful!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SURE SCROLLBAR DO N T OVERLAP CONTENT
    </pattern>
    <template>
<![CDATA[<p>You will need your controls to resize slightly to accommodate the width of the vertical scroll bar. One way to achieve this achieved through docking. Rather than just dropping controls on the form, you'll have to play a bit with panels, padding, min/max sizing and docking.</p><br/><br/><p>Here is example code you can place behind a blank new Form1. Resize the form, in designer or runtime and you'll see that the horizontal scrollbar is not shown and the fields are not overlapped. I've also given the fields a max width for good measure : </p><br/><br/><pre><code>#region Windows Form Designer generated code<br/><br/>	/// &lt;summary&gt;<br/>	/// Required method for Designer support - do not modify<br/>	/// the contents of this method with the code editor.<br/>	/// &lt;/summary&gt;<br/>	private void InitializeComponent() {<br/>		this.textBox1 = new System.Windows.Forms.TextBox();<br/>		this.label1 = new System.Windows.Forms.Label();<br/>		this.panel1 = new System.Windows.Forms.Panel();<br/>		this.panel2 = new System.Windows.Forms.Panel();<br/>		this.textBox2 = new System.Windows.Forms.TextBox();<br/>		this.label2 = new System.Windows.Forms.Label();<br/>		this.panel1.SuspendLayout();<br/>		this.panel2.SuspendLayout();<br/>		this.SuspendLayout();<br/>		// <br/>		// textBox1<br/>		// <br/>		this.textBox1.Dock = System.Windows.Forms.DockStyle.Top;<br/>		this.textBox1.Location = new System.Drawing.Point(32, 0);<br/>		this.textBox1.MaximumSize = new System.Drawing.Size(250, 0);<br/>		this.textBox1.Name = "textBox1";<br/>		this.textBox1.Size = new System.Drawing.Size(250, 20);<br/>		this.textBox1.TabIndex = 0;<br/>		// <br/>		// label1<br/>		// <br/>		this.label1.AutoSize = true;<br/>		this.label1.Dock = System.Windows.Forms.DockStyle.Left;<br/>		this.label1.Location = new System.Drawing.Point(0, 0);<br/>		this.label1.Name = "label1";<br/>		this.label1.Padding = new System.Windows.Forms.Padding(0, 3, 0, 0);<br/>		this.label1.Size = new System.Drawing.Size(32, 16);<br/>		this.label1.TabIndex = 0;<br/>		this.label1.Text = "Field:";<br/>		// <br/>		// panel1<br/>		// <br/>		this.panel1.Controls.Add(this.textBox1);<br/>		this.panel1.Controls.Add(this.label1);<br/>		this.panel1.Dock = System.Windows.Forms.DockStyle.Top;<br/>		this.panel1.Location = new System.Drawing.Point(0, 0);<br/>		this.panel1.Name = "panel1";<br/>		this.panel1.Size = new System.Drawing.Size(392, 37);<br/>		this.panel1.TabIndex = 2;<br/>		// <br/>		// panel2<br/>		// <br/>		this.panel2.Controls.Add(this.textBox2);<br/>		this.panel2.Controls.Add(this.label2);<br/>		this.panel2.Dock = System.Windows.Forms.DockStyle.Top;<br/>		this.panel2.Location = new System.Drawing.Point(0, 37);<br/>		this.panel2.Name = "panel2";<br/>		this.panel2.Size = new System.Drawing.Size(392, 37);<br/>		this.panel2.TabIndex = 3;<br/>		// <br/>		// textBox2<br/>		// <br/>		this.textBox2.Dock = System.Windows.Forms.DockStyle.Top;<br/>		this.textBox2.Location = new System.Drawing.Point(32, 0);<br/>		this.textBox2.MaximumSize = new System.Drawing.Size(250, 0);<br/>		this.textBox2.Name = "textBox2";<br/>		this.textBox2.Size = new System.Drawing.Size(250, 20);<br/>		this.textBox2.TabIndex = 0;<br/>		// <br/>		// label2<br/>		// <br/>		this.label2.AutoSize = true;<br/>		this.label2.Dock = System.Windows.Forms.DockStyle.Left;<br/>		this.label2.Location = new System.Drawing.Point(0, 0);<br/>		this.label2.Name = "label2";<br/>		this.label2.Padding = new System.Windows.Forms.Padding(0, 3, 0, 0);<br/>		this.label2.Size = new System.Drawing.Size(32, 16);<br/>		this.label2.TabIndex = 0;<br/>		this.label2.Text = "Field:";<br/>		// <br/>		// Form1<br/>		// <br/>		this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);<br/>		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;<br/>		this.AutoScroll = true;<br/>		this.ClientSize = new System.Drawing.Size(392, 116);<br/>		this.Controls.Add(this.panel2);<br/>		this.Controls.Add(this.panel1);<br/>		this.Name = "Form1";<br/>		this.Text = "Form1";<br/>		this.panel1.ResumeLayout(false);<br/>		this.panel1.PerformLayout();<br/>		this.panel2.ResumeLayout(false);<br/>		this.panel2.PerformLayout();<br/>		this.ResumeLayout(false);<br/><br/>	}<br/><br/>	#endregion<br/><br/>	private System.Windows.Forms.TextBox textBox1;<br/>	private System.Windows.Forms.Label label1;<br/>	private System.Windows.Forms.Panel panel1;<br/>	private System.Windows.Forms.Panel panel2;<br/>	private System.Windows.Forms.TextBox textBox2;<br/>	private System.Windows.Forms.Label label2;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XPATH AND SELECT A SINGL NODE
    </pattern>
    <template>
<![CDATA[<p><code>//</code> at the beginning of an XPath expression starts from the document root.  Try ".//stuffChild".  . is shorthand for self::node(), which will set the context for the search, and // is shorthand for the descendant axis.</p><br/><br/><p>So you have:</p><br/><br/><pre><code>XmlNode stuffChild = stuff.SelectSingleNode(".//stuffChild");<br/></code></pre><br/><br/><p>which translates to:</p><br/><br/><p><strike>xmlNode stuffChild = stuff.SelectSingleNode("self::node()/descendant::stuffChild");</strike></p><br/><br/><pre><code>xmlNode stuffChild = stuff.SelectSingleNode("self::node()/descendant-or-self::stuffChild");<br/></code></pre><br/><br/><p>In the case where the child node could have the same name as the parent, you would want to use the slightly more verbose syntax that follows, to ensure that you don't re-select the parent:</p><br/><br/><pre><code>xmlNode stuffChild = stuff.SelectSingleNode("self::node()/descendant::stuffChild");<br/></code></pre><br/><br/><p>Also note that if "stuffChild" is a direct descendant of "stuff", you can completely omit the prefixes, and just select "stuffChild".</p><br/><br/><pre><code>XmlNode stuffChild = stuff.SelectSingleNode("stuffChild");<br/></code></pre><br/><br/><p>The <a href="http://www.w3schools.com/XPath/xpath%5Fsyntax.asp" rel="nofollow">W3Schools</a> tutorial has helpful info in an easy to digest format.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEAL WITH DBNULL S
    </pattern>
    <template>
<![CDATA[<p>Nullable types are good, but only for types that are not nullable to begin with.</p><br/><br/><p>To make a type "nullable" append a question mark to the type, for example:    </p><br/><br/><pre><code>int? value = 5;<br/></code></pre><br/><br/><p>I would also recommend using the "<code>as</code>" keyword instead of casting. You can only use the "as" keyword on nullable types, so make sure you're casting things that are already nullable (like strings) or you use nullable types as mentioned above. The reasoning for this is </p><br/><br/><ol><br/><li>It's faster than casting</li><br/><li>If a type is nullable, the "<code>as</code>" keyword returns null.</li><br/></ol><br/><br/><p>I'd recommend doing something like this</p><br/><br/><pre><code>DataRow row = ds.Tables[0].Rows[0];<br/>string value = row as string;<br/></code></pre><br/><br/><p>Of course, this may make it harder to debug if you're receiving the wrong type in the first place, but at least DBNull will become just plain <code>null</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUIR A CONSTRUCTOR WITH NO PARAMET FOR TYPE IMPLEMENT AN INTERFAC
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/26903/how-can-you-require-a-constructor-with-no-parameters-for-types-implementing-an#27386" rel="nofollow">Juan Manuel said:</a></p><br/><br/><blockquote><br/>  <p>that's one of the reasons I don't understand why it cannot be a part of the contract in the interface</p><br/></blockquote><br/><br/><p>It's an indirect mechanism.  The generic allows you to "cheat" and send type information along with the interface.  The critical thing to remember here is that the constraint isn't on the interface that you are working with directly.  It's not a constraint on the interface itself, but on some other type that will "ride along" on the interface.  This is the best explanation I can offer, I'm afraid.</p><br/><br/><p>By way of illustration of this fact, I'll point out a hole that I have noticed in aku's code.  It's possible to write a class that would compile fine but fail at runtime when you try to instantiate it:</p><br/><br/><pre><code>public class Something : ITest&lt;String&gt;<br/>{<br/>  private Something() { }<br/>}<br/></code></pre><br/><br/><p>Something derives from ITest&lt;T&gt;, but implements no parameterless constructor.  It will compile fine, because String does implement a parameterless constructor.  Again, the constraint is on T, and therefore String, rather than ITest or Something.  Since the constraint on T is satisfied, this will compile.  But it will fail at runtime.</p><br/><br/><p>To prevent <strong>some</strong> instances of this problem, you need to add another constraint to T, as below:</p><br/><br/><pre><code>public interface ITest&lt;T&gt;<br/>  where T : ITest&lt;T&gt;, new()<br/>{<br/>}<br/></code></pre><br/><br/><p>Note the new constraint: T : ITest&lt;T&gt;. This constraint specifies that what you pass into the argument parameter of ITest&lt;T&gt; <strong>must</strong> also <strong>derive</strong> from ITest&lt;T&gt;.</p><br/><br/><p>Even so this will not prevent <strong>all</strong> cases of the hole.  The code below will compile fine, because A has a parameterless constructor.  But since B's parameterless constructor is private, instantiating B with your process will fail at runtime.</p><br/><br/><pre><code>public class A : ITest&lt;A&gt;<br/>{<br/>}<br/><br/>public class B : ITest&lt;A&gt;<br/>{<br/>  private B() { }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HART LIBRARI FOR JAVA AND .NET
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.advsofteng.com/" rel="nofollow">ChartDirector</a> is fantastic and supports more than just Java and .NET.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MONO SUPPORT SYSTEM.DRAW AND SYSTEM.DRAWING.PRINT
    </pattern>
    <template>
<![CDATA[<p>From the <a href="http://www.mono-project.com/FAQ:_General" rel="nofollow">Mono docs</a>, I think yes:</p><br/><br/><blockquote><br/>  <p>Managed.Windows.Forms (aka<br/>  System.Windows.Forms): A complete and<br/>  cross platform, System.Drawing based<br/>  Winforms implementation.</p><br/></blockquote><br/><br/><p>It also useful if you run the <a href="http://www.mono-project.com/Moma" rel="nofollow">Mono Migration Analyzer</a> first.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET FRAMEWORK 3.5 SP1 SETUP FAIL
    </pattern>
    <template>
<![CDATA[<p><a href="http://blogs.msdn.com/astebner/archive/2007/08/24/4548657.aspx" rel="nofollow">Here is an article describing what might be your problem.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOP DOWN LIST OF CONTROL IN WINDOWSFORM AND C #
    </pattern>
    <template>
<![CDATA[<p>If you don't want to use databinding (via the <code>DataRepeater</code> control, as mentioned above), you could use a regular <code>Panel</code> control and set its <code>AutoScroll</code> property to true (to enable scrollbars).</p><br/><br/><p>Then, you could manually add your custom controls, and set the <code>Dock</code> property of each one to <code>Top</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISCOV THE PATH OF AN EMBED RESOURC
    </pattern>
    <template>
<![CDATA[<p>This will get you a string array of all the resources:</p><br/><br/><pre><code>System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceNames();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IFI DEVELOP OF A DO NOT USE METHOD
    </pattern>
    <template>
<![CDATA[<p>If a class is serialisable (i.e. it can be copied around the place as needed) the param-less constructor is needed to deserialise.</p><br/><br/><p>I'm guessing that you want to force your code's access to pass defaults for your properties to a parameterised constructor.</p><br/><br/><p>Basically you're saying that it's OK for the <code>XmlSerializer</code> to make a copy and then set properties, but you don't want your own code to.</p><br/><br/><p>To some extent I think this is over-designing. </p><br/><br/><p>Just add XML comments that detail what properties need initialising (and what to). </p><br/><br/><p>Don't use <code>[Obsolete]</code>, because it isn't. Reserve that for genuinely deprecated methods.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATTRIBUT TO BREAK THE BUILD
    </pattern>
    <template>
<![CDATA[<p>If this is for XML serialization and NHibernate, where you want the parameterless constructor to be accessible (as is the case in the <a href="http://stackoverflow.com/questions/27758/notify-developer-of-a-do-not-use-method#27796" rel="nofollow">example</a> you referenced), then use a private or protected parameterless constructor for serialization, or a protected constructor for NHibernate.  With the protected version, you are opening yourself up to inherited classes being able to call that code.</p><br/><br/><p>If you don't want code calling a method, don't make it accessible.</p><br/><br/><p>EDIT: To perhaps answer the deeper question, AFAIK the compiler only knows about three attributes: <a href="http://msdn.microsoft.com/en-us/library/aa664620(VS.71).aspx" rel="nofollow">Obsolete, Conditional, and AttributeUsage</a>. To add special handling for other attributes would require modifying the compiler.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SP.NET WHAT ARE THE DIFFER WAY TO INLIN CODE IN THE .ASPX
    </pattern>
    <template>
<![CDATA[<p>Check out the <a href="http://quickstarts.asp.net/QuickStartv20/aspnet/doc/pages/syntax.aspx#expressions" rel="nofollow">Web Forms Syntax Reference</a> on MSDN.</p><br/><br/><p>For basics, </p><br/><br/><ul><br/><li><p>&lt;% %> is used for pure code blocks.  I generally only use this for if statements</p><br/><br/><blockquote><br/>  <p>&lt;% if (IsLoggedIn) { %><br/><br/>    &nbsp; &lt;div class="authenticated"><br/><br/>    &lt;% } else { %><br/><br/>    &nbsp; &lt;div class="unauthenticated"><br/><br/>    &lt;% } %></p><br/></blockquote></li><br/><li><p>&lt;%= Expression %> is used to add text into your markup; that is, it equates to &lt;% Response.Write(Expression) %></p><br/><br/><blockquote><br/>  <p>&lt;div class='&lt;%= IsLoggedIn ? "authenticated" : "unauthenticated" %>'></p><br/></blockquote></li><br/><li><p>&lt;%# Expression %> is very similar to the above, but it is evaluated in a DataBinding scenario.  One thing that this means is that you can use these expressions to set values of runat="server" controls, which you can't do with the &lt;%= %> syntax.  Typically this is used inside of a template for a databound control, but you can also use it in your page, and then call Page.DataBind() (or Control.DataBind()) to cause that code to evaluate.</p></li><br/></ul><br/><br/><p>The others mentioned in the linked article are less common, though certainly have their uses, too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PITFAL DEVELOP C # .NET CODE IN A VIRTUAL MACHIN RUN ON A MAC
    </pattern>
    <template>
<![CDATA[<p>I can't tell you any specific experiences since I don't have a Mac, but I did want to point out that there was an awesome episode of the DeepFriedBytes podcast that discussed this very topic. It made me want to give it a try. They discuss the pros and cons of going this route - well worth the listen IMO if this is something you're considering:  </p><br/><br/><p><a href="http://deepfriedbytes.com/podcast/episode-5-developing-net-software-on-mac/" rel="nofollow">Episode 5: Developing .NET Software on a Mac</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF ( ) AND IF ( )
    </pattern>
    <template>
<![CDATA[<p>Damn, I really thought you were talking about the operator all along. ;-) Anyway ...</p><br/><br/><blockquote><br/>  <p>Does this If function perform better than the IIf function?</p><br/></blockquote><br/><br/><p>Definitely. Remember, it's built into the language. Only one of the two conditional arguments has to be evaluated, potentially saving a costly operation.</p><br/><br/><blockquote><br/>  <p>Does the If statement trump the If and IIf functions?</p><br/></blockquote><br/><br/><p>I think you can't compare the two because they do different things. If your code semantically performs an assignment you should emphasize this, instead of the decision-making. Use the <code>If</code> operator here instead of the statement. This is especially true if you can use it in the initialization of a variable because otherwise the variable will be default initialized, resulting in slower code:</p><br/><br/><pre><code>Dim result = If(a &gt; 0, Math.Sqrt(a), -1.0)<br/><br/>' versus<br/><br/>Dim result As Double ' Redundant default initialization!<br/>If a &gt; 0 Then<br/>    result = Math.Sqrt(a)<br/>Else<br/>    result = -1<br/>End If<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIME.NOW THE BEST WAY TO MEASUR A FUNCTION S PERFORM
    </pattern>
    <template>
<![CDATA[<p>No, it's not. Use the <a href="http://msdn2.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx">Stopwatch</a> (in <code>System.Diagnostics</code>)</p><br/><br/><pre><code>Stopwatch sw = Stopwatch.StartNew();<br/>PerformWork();<br/>sw.Stop();<br/><br/>Console.WriteLine("Time taken: {0}ms", sw.Elapsed.TotalMilliseconds);<br/></code></pre><br/><br/><p>Stopwatch automatically checks for the existence of high-precision timers.</p><br/><br/><p>It is worth mentioning that <code>DateTime.Now</code> often is quite a bit slower than <code>DateTime.UtcNow</code> due to the work that has to be done with timezones, <a href="http://en.wikipedia.org/wiki/Daylight_saving_time">DST</a> and such.</p><br/><br/><p>DateTime.UtcNow typically has a resolution of 15&nbsp;ms. See <a href="http://jaychapman.blogspot.com/2007/12/datetimenow-precision-issues-enter.html">John Chapman's blog post</a> about <code>DateTime.Now</code> precision for a great summary.</p><br/><br/><p>Interesting trivia: The stopwatch falls back on <code>DateTime.UtcNow</code> if your hardware doesn't support a high frequency counter. You can check to see if Stopwatch uses hardware to achieve high precision by looking at the static field <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.ishighresolution.aspx">Stopwatch.IsHighResolution</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT TO DATABAS PRODUCT
    </pattern>
    <template>
<![CDATA[<p>I have used SubSonic and EntitySpaces.  Once you get the hang of them, I beleive they can save you time, but as complexity of your app and volume of data grow, you may outgrow these tools.  You start to lose time trying to figure out if something like a performance issue is related to the ORM or to your code.  So, to answer your question, I think it depends.  I tend to agree with Eric on this, high volume enterprise apps are not a good place for general purpose ORMs, but in standard fare smaller CRUD type apps, you might see some saved time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPIL DEBUG VS. RELEAS
    </pattern>
    <template>
<![CDATA[<p>The preferred method is to actually use the conditional attribute to wrap your debug calls, not use the compiler directives.  #ifs can get tricky and can lead to weird build problems.</p><br/><br/><p>An example of using a conditional attribute is as follows (in C#, but works in VB.NET too):</p><br/><br/><pre><code>[ Conditional("Debug") ]<br/>private void WriteDebug(string debugString)<br/>{<br/>  // do stuff<br/>}<br/></code></pre><br/><br/><p>When you compile without the DEBUG flag set, any call to WriteDebug will be removed as was assumed was happening with Debug.Write().</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARCHITECTUR FOR HANDL FILE SYSTEM CHANG
    </pattern>
    <template>
<![CDATA[<p>A couple of things that I have in my head:</p><br/><br/><ul><br/><li>If the guid is <em>not</em> unique, would it not overwrite the file with the same name, or is the check based on a lookup which does some external action (e.g. check the archive)? (i.e. is this a YAGNI moment?)</li><br/><li>I've used FileSystemWatcher before with pretty good success, can you give us some ideas as to <em>how</em> your actually doing things?</li><br/><li>When you say "no dice" when working with your custom list, what was the problem? And how were you checking for file system changes without FileSystemWatcher?!</li><br/></ul><br/><br/><p>Sorry no answer as yet, just would like to know more about the problem :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAN I EAGER LOAD ONLI ONE FIELD IN A JOIN TABL
    </pattern>
    <template>
<![CDATA[<p>I get the solution in this other question <a href="http://stackoverflow.com/questions/381049/which-net-orm-can-deal-with-this-scenario#381084">http://stackoverflow.com/questions/381049/which-net-orm-can-deal-with-this-scenario#381084</a>, that is related to the <strong>liammclennan</strong> answer but more clear (maybe the question was more clear too)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A GROUP AND MATCH IN .NET S REGEX
    </pattern>
    <template>
<![CDATA[<p>A <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match.aspx" rel="nofollow">Match</a> is an object that indicates a particular regular expression matched (a portion of) the target text. A <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.group.aspx" rel="nofollow">Group</a> indicates a portion of a match, if the original regular expression contained group markers (basically a pattern in parentheses). For example, with the following code:</p><br/><br/><pre><code>string text = "One car red car blue car";<br/>string pat = @"(\w+)\s+(car)";<br/>Match m = r.Match(text);<br/></code></pre><br/><br/><p><code>m</code> would be match object that contains two groups - group 1, from <code>(\w+)</code>, and that captured "One", and group 2 (from <code>(car)</code>) that matched, well, "car".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IBINDINGLISTVIEW IMPLEMENT
    </pattern>
    <template>
<![CDATA[<p>I used and built upon an implementation I found on and old MSDN forum post from a few years ago, but recently I searched around again and found a sourceforge project called <a href="http://blw.sourceforge.net/" rel="nofollow">BindingListView</a>.  It looks pretty nice, I just haven't pulled it in to replace my hacked version yet.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PICTUREBOX USE NEAREST NEIGHBOR RESAMPL
    </pattern>
    <template>
<![CDATA[<p>I suspect you're going to have to do the resizing manually thru the Image class and DrawImage function and respond to the resize events on the PictureBox.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DRAGDROP AND MOUSEUP
    </pattern>
    <template>
<![CDATA[<p>I was recently wanting to put Drag and Drop functionality in my project and I hadn't come across this issue, but I was intrigued and really wanted to see if I could come up with a better method than the one described in the page you linked to.  I hope I clearly understood everything you wanted to do and overall I think I succeeded in solving the problem in a much more elegant and simple fashion.</p><br/><br/><p>On a quick side note, for problems like this it would be great if you provide some code so we can see exactly what it is you are trying to do.  I say this only because I assumed a few things about your code in my solution...so hopefully it's pretty close.</p><br/><br/><p>Here's the code, which I will explain below:</p><br/><br/><pre><code>this.LabelDrag.QueryContinueDrag += new System.Windows.Forms.QueryContinueDragEventHandler(this.LabelDrag_QueryContinueDrag);<br/>this.LabelDrag.MouseDown += new System.Windows.Forms.MouseEventHandler(this.LabelDrag_MouseDown);<br/>this.LabelDrag.MouseUp += new System.Windows.Forms.MouseEventHandler(this.LabelDrag_MouseUp);<br/><br/>this.LabelDrop.DragDrop += new System.Windows.Forms.DragEventHandler(this.LabelDrop_DragDrop);<br/>this.LabelDrop.DragEnter += new System.Windows.Forms.DragEventHandler(this.LabelMain_DragEnter);<br/><br/>public partial class Form1 : Form<br/>{<br/>    public Form1()<br/>    {<br/>        InitializeComponent();<br/>    }<br/><br/>    private void LabelDrop_DragDrop(object sender, DragEventArgs e)<br/>    {<br/>        LabelDrop.Text = e.Data.GetData(DataFormats.Text).ToString();<br/>    }<br/><br/><br/>    private void LabelMain_DragEnter(object sender, DragEventArgs e)<br/>    {<br/>        if (e.Data.GetDataPresent(DataFormats.Text))<br/>            e.Effect = DragDropEffects.Copy;<br/>        else<br/>            e.Effect = DragDropEffects.None;<br/><br/>    }<br/><br/>    private void LabelDrag_MouseDown(object sender, MouseEventArgs e)<br/>    {<br/>        //EXTREMELY IMPORTANT - MUST CALL LabelDrag's DoDragDrop method!!<br/>        //Calling the Form's DoDragDrop WILL NOT allow QueryContinueDrag to fire!<br/>        ((Label)sender).DoDragDrop(TextMain.Text, DragDropEffects.Copy); <br/>    }<br/><br/>    private void LabelDrag_MouseUp(object sender, MouseEventArgs e)<br/>    {<br/>        LabelDrop.Text = "LabelDrag_MouseUp";<br/>    }<br/><br/>    private void LabelDrag_QueryContinueDrag(object sender, QueryContinueDragEventArgs e)<br/>    {<br/>        //Get rect of LabelDrop<br/>        Rectangle rect = new Rectangle(LabelDrop.Location, new Size(LabelDrop.Width, LabelDrop.Height));<br/><br/>        //If the left mouse button is up and the mouse is currently over LabelDrop<br/>        if (Control.MouseButtons != MouseButtons.Left &amp;&amp; !rect.Contains(PointToClient(Control.MousePosition)))<br/>        {<br/>            //Cancel the DragDrop Action<br/>            e.Action = DragAction.Cancel;<br/>            //Manually fire the MouseUp event<br/>            LabelDrag_MouseUp(sender, new MouseEventArgs(Control.MouseButtons, 0, Control.MousePosition.X, Control.MousePosition.Y, 0));<br/>        }<br/>    }<br/><br/>}<br/></code></pre><br/><br/><p>I have left out most of the designer code, but included the Event Handler link up code so you can be sure what is linked to what.  In my example, the drag/drop is occuring between the labels LabelDrag and LabelDrop.</p><br/><br/><p>The main piece of my solution is using the QueryContinueDrag event.  This event fires when the keyboard or mouse state changes after DoDragDrop has been called on that control.  You may already be doing this, but it is very important that you call the DoDragDrop method of the control that is your source and not the method associated with the form.  Otherwise QueryContinueDrag will NOT fire!</p><br/><br/><p>One thing to note is that QueryContinueDrag will actually fire when you release the mouse <em>on the drop control</em> so we need to make sure we allow for that.  This is handled by checking that the Mouse position (retrieved with the global Control.MousePosition property) is inside of the LabelDrop control rectangle.  You must also be sure to convert MousePosition to a point relative to the Client Window with PointToClient as Control.MousePosition returns a <em>screen relative</em> position.</p><br/><br/><p>So by checking that the mouse is <em>not</em> over the drop control and that the mouse button is now <em>up</em> we have effectively captured a MouseUp event for the LabelDrag control! :) Now, you could just do whatever processing you want to do here, but if you already have code you are using in the MouseUp event handler, this is not efficient.  So just call your MouseUp event from here, passing it the necessary parameters and the MouseUp handler won't ever know the difference.</p><br/><br/><p>Just a note though, as I call DoDragDrop from <em>within</em> the MouseDown event handler in my example, this code should <em>never</em> actually get a direct MouseUp event to fire.  I just put that code in there to show that it is possible to do it.</p><br/><br/><p>Hope that helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VISTA UNABL TO LOAD DLL X.DLL INVALID ACCESS TO MEMORI LOCATION. ( DLLNOTFOUNDEXCEPT )
    </pattern>
    <template>
<![CDATA[<p>@<a href="http://stackoverflow.com/questions/29284/windows-vista-unable-to-load-dll-xdll-invalid-access-to-memory-location-dllnotf#29400" rel="nofollow">Martín</a></p><br/><br/><p>The reason you were not getting the UAC prompt is because UAC can only change how a process is <strong>started</strong>, once the process is running it must stay at the same elevation level. The UAC will prompt will happen if:</p><br/><br/><ul><br/><li>Vista thinks it's an installer (<a href="http://msdn.microsoft.com/en-us/library/aa905330.aspx#wvduac_topic3" rel="nofollow">lots of rules here</a>, the simplest one is if it's called "setup.exe"), </li><br/><li>If it's flagged as "Run as Administrator" (you can edit this by changing the properties of the shortcut or the exe), or </li><br/><li>If the exe contains a manifest requesting admin privileges.</li><br/></ul><br/><br/><p>The first two options are workarounds for 'legacy' applications that were around before UAC, the correct way to do it for new applications is to <a href="http://msdn.microsoft.com/en-us/library/bb756929.aspx" rel="nofollow">embed a manifest resource</a> asking for the privileges that you need.</p><br/><br/><p>Some program, such as <a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" rel="nofollow">Process Explorer</a> appear to elevate a running process (when you choose "Show details for all process" in the file menu in this case) but what they really do is start a new instance, and it's that new instance that gets elevated - not the one that was originally running. This is the recommend way of doing it if only some parts of your application need elevation (e.g. a special 'admin options' dialog).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1159 INITI ERROR WITH DB2 .NET DATA PROVID REASON CODE 7 TOKEN 9.5.0.DEF.2 SOFTWAR IBM DB2 INSTALLEDCOPI
    </pattern>
    <template>
<![CDATA[<p>Are you required to have it run as x86? I had similar issues with web apps under Visual Studio's dev web server (which is x86), but switching over to IIS (x64) worked for me. Since I was deploying to IIS x64, I called it a day at that point.</p><br/><br/><p>I tried tracing with Filemon and Regmon, but didn't get any denied or missing keys errors. If I were to look again, I'd check HKLM\Software\WOW6432Node, guessing that the installer writes to the x64 HKLM\Software node, but not the x86 one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET CODEDOM TO DECLAR AND INITI A FIELD IN ONE STATEMENT
    </pattern>
    <template>
<![CDATA[<p>Once you create your CodeMemberField instance to represent the static field, you can assign the InitExpression property to the expression you want to use to populate the field.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVERVARI APPL MD PATH RETREIV THE METABAS PATH FOR THE APPLIC FOR THE ISAPI DLL MEAN
    </pattern>
    <template>
<![CDATA[<p>Are you running your application locally inside of IIS or inside of the development web server? If it's the latter, then that's probably why: Cassini (the development web server) doesn't do ISAPI, so this value will be empty.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABIND AND FOREIGN KEY RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>I think the problem you're having is that when you are binding to a grid, it is not enough to support INotifyPropertyChanged, but you have to fire the ListChanged events in your <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.ibindinglist.aspx" rel="nofollow">IBindingList</a> implementation and make sure that you override and return true for the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.ibindinglist.supportschangenotification.aspx" rel="nofollow">SupportsChangeNotification</a> property.  If you don't return true for this, the grid won't look for it to know if the data has changed.</p><br/><br/><p>In .NET 2.0+, you can create a generic collection using the <a href="http://msdn.microsoft.com/en-us/library/ms132679.aspx" rel="nofollow">BindingList</a> class, this will take care of most of the nastiness (just don't forget to override and return true for the SupportsChangeNotification property).</p><br/><br/><p>If the class you use for data binding has a property that is a collection (such as IBindingList or BindingList), then you can bind the foreign key grid to that property directly.  When you configure the bindings in the Forms designer, just select the collection property as the data source for the grid.  It should "just work".  The only sneaky part is making sure that you handle empty or null collections the right way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CATCH SQLSERVER TIMEOUT EXCEPT
    </pattern>
    <template>
<![CDATA[<p>To check for a timeout, I believe you check the value of ex.Number. If it is -2, then you have a timeout situation.</p><br/><br/><p>-2 is the error code for timeout, returned from DBNETLIB, the MDAC driver for SQL Server. This can be seen by downloading <a href="http://www.red-gate.com/products/reflector/" rel="nofollow">Reflector</a>, and looking under System.Data.SqlClient.TdsEnums for TIMEOUT_EXPIRED. </p><br/><br/><p>Your code would read:</p><br/><br/><pre><code>if (ex.Number == -2)<br/>{<br/>     //handle timeout<br/>}<br/></code></pre><br/><br/><p>Code to demonstrate failure:</p><br/><br/><pre><code>try<br/>{<br/>    SqlConnection sql = new SqlConnection(@"Network Library=DBMSSOCN;Data Source=YourServer,1433;Initial Catalog=YourDB;Integrated Security=SSPI;");<br/>    sql.Open();<br/><br/>    SqlCommand cmd = sql.CreateCommand();<br/>    cmd.CommandText = "DECLARE @i int WHILE EXISTS (SELECT 1 from sysobjects) BEGIN SELECT @i = 1 END";<br/>    cmd.ExecuteNonQuery(); // This line will timeout.<br/><br/>    cmd.Dispose();<br/>    sql.Close();<br/>}<br/>catch (SqlException ex)<br/>{<br/>    if (ex.Number == -2) {<br/>        Console.WriteLine ("Timeout occurred");<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE MANIFEST OF A .NET ASSEMBL PRIVAT
    </pattern>
    <template>
<![CDATA[<p>I think what you're talking about is "obfuscation".<br/>There are lots of articles about it on the net:</p><br/><br/><p><a href="http://en.wikipedia.org/wiki/Obfuscation" rel="nofollow">http://en.wikipedia.org/wiki/Obfuscation</a></p><br/><br/><p>The "standard" tool for obfuscation on .NET is by Preemptive Solutions:</p><br/><br/><p><a href="http://www.preemptive.com/obfuscator.html" rel="nofollow">http://www.preemptive.com/obfuscator.html</a></p><br/><br/><p>They have a community edition that ships with Visual Studio which you can use.</p><br/><br/><p>You mentioned ILDasm, have you looked at the .NET Reflector?</p><br/><br/><p><a href="http://aisto.com/roeder/dotnet/" rel="nofollow">http://aisto.com/roeder/dotnet/</a></p><br/><br/><p>It gives you an even better idea as to what people can see if you release a manifest!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT WAKE UP FROM THREAD.SLEEP ( )
    </pattern>
    <template>
<![CDATA[<p>Dig in and find out? Stick a debugger on that bastard!</p><br/><br/><p>I can see at least the following possibilities:</p><br/><br/><ol><br/><li>the logging system hangs;</li><br/><li>the thread exited just fine but the service is still running because some other part has a logic error.</li><br/></ol><br/><br/><p>And maybe, but almost certainly not, the following:</p><br/><br/><ul><br/><li>Sleep() hangs.</li><br/></ul><br/><br/><p>But in any case, attaching a debugger will show you whether the thread is still there and whether it really has hung.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM AD WEB.UI.ITEMPL CLASS
    </pattern>
    <template>
<![CDATA[<p>I have worked extensively with templated control and I have not found a better solution.</p><br/><br/><p>Why are you referencing the contentLable in the event handler?</p><br/><br/><p>The sender is the label you can cast it to the label and have the reference to the label.  Like below.</p><br/><br/><pre><code>        //add a custom data binding<br/>        contentLabel.DataBinding +=<br/>            (object sender, EventArgs e ) =&gt;<br/>            {<br/>                //do custom stuff at databind time<br/>                ((Label)sender).Text = //bound content<br/>            };<br/></code></pre><br/><br/><p>Then you should be able to dispose of the label reference in InstantiateIn.</p><br/><br/><p>Please note I have not tested this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL FROM A PROGRAM WITHOUT USE A PREEXIST ACCOUNT
    </pattern>
    <template>
<![CDATA[<p>As long as your account is on gmail.com, set up <strong>gmail-smtp-in.l.google.com</strong> as the outgoing SMTP-server in your program. You do not need to provide a password to send email to gmail-accounts when using that server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT TO ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<p>If you are quite happy with WebForms today, then maybe ASP.NET MVC isn't for you.</p><br/><br/><p>I have been frustrated with WebForms for a really long time.  I'm definitely not alone here.  The smart-client, stateful abstraction over the web breaks down severely in complex scenarios.  I happen to love HTML, Javascript, and CSS.  WebForms tries to hide that from me.  It also has some really complex solutions to problems that are really not that complex.  Webforms is also inherently difficult to test, and while you can use MVP, it's not a great solution for a web environment...(compared to MVC).</p><br/><br/><p>MVC will appeal to you if...<br/>- you want more control over your HTML<br/>- want a seamless ajax experience like every other platform has<br/>- want testability through-and-through<br/>- want meaningful URLs<br/>- HATE dealing with postback &amp; viewstate issues</p><br/><br/><p>And as for the framework being Preview 5, it is quite stable, the design is mostly there, and upgrading is not difficult.  I started an app on Preview 1 and have upgraded within a few hours of the newest preview being available.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE HOW TO KNOW WHEN A FILE IS COMPLET
    </pattern>
    <template>
<![CDATA[<p>Have you tried getting a write lock on the file?  If it's being written to, that should fail, and you know to leave it alone for a bit...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANUAL STEP TO UPGRAD VS.NET SOLUT AND TARGET .NET FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>All versions of the .Net Framework from 2.0 onwards (i.e. 3.0 and 3.5) use exactly the same core framework files (i.e. the CLR, you'll notice there are no directories relating to 3.0 or 3.5 in the C:\Windows\Microsoft.Net\Framework directory) therefore you shouldn't worry too much about any performance issues.</p><br/><br/><p>The Core parts are referred to in Microsoft Speak as the 'Red Bits' and the rest as the 'Green Bits'.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET DESERI MY PRIMIT ARRAY FROM A WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>Here's what I ended up with.  I have never found another solution out there for this, so if you have something better, by all means, contribute.</p><br/><br/><p>First, the long array definition in the wsdl:types area:</p><br/><br/><pre><code>  &lt;xsd:complexType name="ArrayOf_xsd_long"&gt;<br/>    &lt;xsd:complexContent mixed="false"&gt;<br/>      &lt;xsd:restriction base="soapenc:Array"&gt;<br/>        &lt;xsd:attribute wsdl:arrayType="soapenc:long[]" ref="soapenc:arrayType" /&gt;<br/>      &lt;/xsd:restriction&gt;<br/>    &lt;/xsd:complexContent&gt;<br/>  &lt;/xsd:complexType&gt;<br/></code></pre><br/><br/><p>Next, we create a SoapExtensionAttribute that will perform the fix.  It seems that the problem was that .NET wasn't following the multiref id to the element containing the double value.  So, we process the array item, go find the value, and then insert it the value into the element:</p><br/><br/><pre><code>[AttributeUsage(AttributeTargets.Method)]<br/>public class LongArrayHelperAttribute : SoapExtensionAttribute<br/>{<br/>    private int priority = 0;<br/><br/>    public override Type ExtensionType<br/>    {<br/>        get { return typeof (LongArrayHelper); }<br/>    }<br/><br/>    public override int Priority<br/>    {<br/>        get { return priority; }<br/>        set { priority = value; }<br/>    }<br/>}<br/><br/>public class LongArrayHelper : SoapExtension<br/>{<br/>    private static ILog log = LogManager.GetLogger(typeof (LongArrayHelper));<br/><br/>    public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)<br/>    {<br/>        return null;<br/>    }<br/><br/>    public override object GetInitializer(Type serviceType)<br/>    {<br/>        return null;<br/>    }<br/><br/>    public override void Initialize(object initializer)<br/>    {<br/>    }<br/><br/>    private Stream originalStream;<br/><br/>    private Stream newStream;<br/><br/>    public override void ProcessMessage(SoapMessage m)<br/>    {<br/>        switch (m.Stage)<br/>        {<br/>            case SoapMessageStage.AfterSerialize:<br/>                newStream.Position = 0; //need to reset stream <br/>                CopyStream(newStream, originalStream);<br/>                break;<br/><br/>            case SoapMessageStage.BeforeDeserialize:<br/>                XmlWriterSettings settings = new XmlWriterSettings();<br/>                settings.Indent = false;<br/>                settings.NewLineOnAttributes = false;<br/>                settings.NewLineHandling = NewLineHandling.None;<br/>                settings.NewLineChars = "";<br/>                XmlWriter writer = XmlWriter.Create(newStream, settings);<br/><br/>                XmlDocument xmlDocument = new XmlDocument();<br/>                xmlDocument.Load(originalStream);<br/><br/>                List&lt;XmlElement&gt; longArrayItems = new List&lt;XmlElement&gt;();<br/>                Dictionary&lt;string, XmlElement&gt; multiRefs = new Dictionary&lt;string, XmlElement&gt;();<br/>                FindImportantNodes(xmlDocument.DocumentElement, longArrayItems, multiRefs);<br/>                FixLongArrays(longArrayItems, multiRefs);<br/><br/>                xmlDocument.Save(writer);<br/>                newStream.Position = 0;<br/>                break;<br/>        }<br/>    }<br/><br/>    private static void FindImportantNodes(XmlElement element, List&lt;XmlElement&gt; longArrayItems,<br/>                                           Dictionary&lt;string, XmlElement&gt; multiRefs)<br/>    {<br/>        string val = element.GetAttribute("soapenc:arrayType");<br/>        if (val != null &amp;&amp; val.Contains(":long["))<br/>        {<br/>            longArrayItems.Add(element);<br/>        }<br/>        if (element.Name == "multiRef")<br/>        {<br/>            multiRefs[element.GetAttribute("id")] = element;<br/>        }<br/>        foreach (XmlNode node in element.ChildNodes)<br/>        {<br/>            XmlElement child = node as XmlElement;<br/>            if (child != null)<br/>            {<br/>                FindImportantNodes(child, longArrayItems, multiRefs);<br/>            }<br/>        }<br/>    }<br/><br/>    private static void FixLongArrays(List&lt;XmlElement&gt; longArrayItems, Dictionary&lt;string, XmlElement&gt; multiRefs)<br/>    {<br/>        foreach (XmlElement element in longArrayItems)<br/>        {<br/>            foreach (XmlNode node in element.ChildNodes)<br/>            {<br/>                XmlElement child = node as XmlElement;<br/>                if (child != null)<br/>                {<br/>                    string href = child.GetAttribute("href");<br/>                    if (href == null || href.Length == 0)<br/>                    {<br/>                        continue;<br/>                    }<br/>                    if (href.StartsWith("#"))<br/>                    {<br/>                        href = href.Remove(0, 1);<br/>                    }<br/>                    XmlElement multiRef = multiRefs[href];<br/>                    if (multiRef == null)<br/>                    {<br/>                        continue;<br/>                    }<br/>                    child.RemoveAttribute("href");<br/>                    child.InnerXml = multiRef.InnerXml;<br/>                    if (log.IsDebugEnabled)<br/>                    {<br/>                        log.Debug("Replaced multiRef id '" + href + "' with value: " + multiRef.InnerXml);<br/>                    }<br/>                }<br/>            }<br/>        }<br/>    }<br/><br/>    public override Stream ChainStream(Stream s)<br/>    {<br/>        originalStream = s;<br/>        newStream = new MemoryStream();<br/>        return newStream;<br/>    }<br/><br/>    private static void CopyStream(Stream from, Stream to)<br/>    {<br/>        TextReader reader = new StreamReader(from);<br/>        TextWriter writer = new StreamWriter(to);<br/>        writer.WriteLine(reader.ReadToEnd());<br/>        writer.Flush();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Finally, we tag all methods in the Reference.cs file that will be deserializing a long array with our attribute:</p><br/><br/><pre><code>    [SoapRpcMethod("", RequestNamespace="http://some.service.provider",<br/>        ResponseNamespace="http://some.service.provider")]<br/>    [return : SoapElement("getFooReturn")]<br/>    [LongArrayHelper]<br/>    public Foo getFoo()<br/>    {<br/>        object[] results = Invoke("getFoo", new object[0]);<br/>        return ((Foo) (results[0]));<br/>    }<br/></code></pre><br/><br/><p>This fix is long-specific, but it could probably be generalized to handle any primitive type having this problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLICK DRAG ANYWHER IN THE FORM TO MOVE IT AS IF CLICK IN THE FORM CAPTION
    </pattern>
    <template>
<![CDATA[<p><a href="http://support.microsoft.com/kb/320687" rel="nofollow" title="KB Article 320687">Microsoft KB Article 320687</a> has a detailed answer to this question.</p><br/><br/><p>Basically, you override the WndProc method to return HTCAPTION to the WM_NCHITTEST message when the point being tested is in the client area of the form -- which is, in effect, telling Windows to treat the click exactly the same as if it had occured on the caption of the form.</p><br/><br/><pre><br/>private const int WM_NCHITTEST = 0x84;<br/>private const int HTCLIENT = 0x1;<br/>private const int HTCAPTION = 0x2;<br/><br/>protected override void WndProc(ref Message m)<br/>{<br/>   switch(m.Msg)<br/>   {<br/>      case WM_NCHITTEST:<br/>         base.WndProc(ref m);<br/>     if ((int)m.Result == HTCLIENT)<br/>        m.Result = (IntPtr)HTCAPTION;<br/>        return;<br/>            break;<br/>   }<br/>   base.WndProc(ref m);<br/>} <br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM VISUAL STUDIO 2005 TO 2008 AND .NET 2.0
    </pattern>
    <template>
<![CDATA[<p>yes, vs2008 can "<a href="http://weblogs.asp.net/scottgu/archive/2007/06/20/vs-2008-multi-targeting-support.aspx" rel="nofollow">target</a>" a framework, but i think by default, if converting from vs2005 - vs2008 it just keeps it at framework 2.0</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSION IDENTIFI
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://msdn.microsoft.com/en-us/library/system.version.aspx" rel="nofollow">System.Version</a> class does not support versions with commas in it, so the solution presented by <a href="http://stackoverflow.com/questions/30494#30510" rel="nofollow">Darren Kopp</a> is not sufficient.</p><br/><br/><p>Here is a version that is as simple as possible (but no simpler).</p><br/><br/><p>It uses <a href="http://msdn.microsoft.com/en-us/library/system.version.aspx" rel="nofollow">System.Version</a> but achieves compatibility with version numbers like "1, 2, 3, 4" by doing a search-replace before comparing.</p><br/><br/><pre><code>    /// &lt;summary&gt;<br/>    /// Compare versions of form "1,2,3,4" or "1.2.3.4". Throws FormatException<br/>    /// in case of invalid version.<br/>    /// &lt;/summary&gt;<br/>    /// &lt;param name="strA"&gt;the first version&lt;/param&gt;<br/>    /// &lt;param name="strB"&gt;the second version&lt;/param&gt;<br/>    /// &lt;returns&gt;less than zero if strA is less than strB, equal to zero if<br/>    /// strA equals strB, and greater than zero if strA is greater than strB&lt;/returns&gt;<br/>    public static int CompareVersions(String strA, String strB)<br/>    {<br/>        Version vA = new Version(strA.Replace(",", "."));<br/>        Version vB = new Version(strB.Replace(",", "."));<br/><br/>        return vA.CompareTo(vB);<br/>    }<br/></code></pre><br/><br/><p>The code has been tested with:</p><br/><br/><pre><code>    static void Main(string[] args)<br/>    {<br/>        Test("1.0.0.0", "1.0.0.1", -1);<br/>        Test("1.0.0.1", "1.0.0.0", 1);<br/>        Test("1.0.0.0", "1.0.0.0", 0);<br/>        Test("1, 0.0.0", "1.0.0.0", 0);<br/>        Test("9, 5, 1, 44", "3.4.5.6", 1);<br/>        Test("1, 5, 1, 44", "3.4.5.6", -1);<br/>        Test("6,5,4,3", "6.5.4.3", 0);<br/><br/>        try<br/>        {<br/>            CompareVersions("2, 3, 4 - 4", "1,2,3,4");<br/>            Console.WriteLine("Exception should have been thrown");<br/>        }<br/>        catch (FormatException e)<br/>        {<br/>            Console.WriteLine("Got exception as expected.");<br/>        }<br/><br/>        Console.ReadLine();<br/>    }<br/><br/>    private static void Test(string lhs, string rhs, int expected)<br/>    {<br/>        int result = CompareVersions(lhs, rhs);<br/>        Console.WriteLine("Test(\"" + lhs + "\", \"" + rhs + "\", " + expected +<br/>            (result.Equals(expected) ? " succeeded." : " failed."));<br/>    }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSPAR IMAG USE C #
    </pattern>
    <template>
<![CDATA[<p>If there's no requirement on preserving file type after scaling I'd recommend the following approach.</p><br/><br/><pre><code>using (Image src = Image.FromFile("main.gif"))<br/>{<br/>    using (Bitmap dst = new Bitmap(100, 129))<br/>    {<br/>        using (Graphics g = Graphics.FromImage(dst))<br/>        {<br/>            g.SmoothingMode = SmoothingMode.AntiAlias;<br/>            g.InterpolationMode = InterpolationMode.HighQualityBicubic;<br/>            g.DrawImage(src, 0, 0, dst.Width, dst.Height);<br/>        }<br/><br/>        dst.Save("scale.png", ImageFormat.Png);<br/>    }<br/>}<br/></code></pre><br/><br/><p>The result will have really nice anti aliased edges</p><br/><br/><p><img src="http://img398.imageshack.us/img398/8110/scalezy6.png" alt="Hosted by imageshack" /></p><br/><br/><p>If you must export the image in gif you're in for a ride; GDI+ doesn't play well with gif. See <a href="http://www.ben-rush.net/blog/PermaLink.aspx?guid=103ed74d-c808-47ba-b82d-6e9367714b3e&amp;dotnet=consultant" rel="nofollow">this blog post</a> about it for more information</p><br/><br/><p><strong>Edit:</strong> I forgot to dispose of the bitmaps in the example; it's been corrected</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A REFERENC DLL
    </pattern>
    <template>
<![CDATA[<p>@<a href="#30921" rel="nofollow">Jas</a>, it's a special feature in Visual Studio. The procedure is outlined in <a href="http://blogs.msdn.com/shawnfa/archive/2006/04/24/582278.aspx" rel="nofollow">this blog entry, called "Sharing a Strong Name Key File Across Projects"</a>.  The example is for sharing strong name key files, but will work for any kind of file.</p><br/><br/><p>Briefly, you right-click on your project and select "Add Existing Item". Browse to the directory of the file(s) you want to link and highlight the file or files. Insted of just hitting "Add" or "Open" (depending on your version of Visual Studio), click on the little down arrow on the right-hand side of that button. You'll see options to "Open" or "Link File" if you're using Visual Studio 2003, or "Add" or "Add as Link" with 2005 (I'm not sure about 2008). In any case, choose the one that involves the word "Link". Then your project will essentially reference the file - it will be accessible both from the original project its was in and the project you "linked" it to. </p><br/><br/><p>This is a convenient way to create an assembly that contains all the functionality of wrapper.dll and api.dll, but you'll have to remember to repeat this procedure every time you add a new file to api.dll (but not wrapper.dll).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID URI
    </pattern>
    <template>
<![CDATA[<p>This site looks promising: <a href="http://snipplr.com/view/6889/regular-expressions-for-uri-validationparsing/" rel="nofollow">http://snipplr.com/view/6889/regular-expressions-for-uri-validationparsing/</a></p><br/><br/><p>They propose following regex: </p><br/><br/><pre><code>/^([a-z0-9+.-]+):(?://(?:((?:[a-z0-9-._~!$&amp;'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&amp;'()*+,;=]|%[0-9A-F]{2})*)(?::(\d*))?(/(?:[a-z0-9-._~!$&amp;'()*+,;=:@/]|%[0-9A-F]{2})*)?|(/?(?:[a-z0-9-._~!$&amp;'()*+,;=:@]|%[0-9A-F]{2})+(?:[a-z0-9-._~!$&amp;'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\?((?:[a-z0-9-._~!$&amp;'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&amp;'()*+,;=:/?@]|%[0-9A-F]{2})*))?$/i<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOMAIN USER WITH SYSTEM.DIRECTORYSERVIC
    </pattern>
    <template>
<![CDATA[<p>Would this be what you are looking for</p><br/><br/><p><a href="http://support.microsoft.com/default.aspx/kb/326340" rel="nofollow">http://support.microsoft.com/default.aspx/kb/326340</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALCUL PRIME IN C #
    </pattern>
    <template>
<![CDATA[<p>You might save some time by cross-referencing your bit array with a doubly-linked list, so you can more quickly advance to the next prime.</p><br/><br/><p>Also, in eliminating later composites once you hit a new prime p for the first time - the first composite multiple of p remaining will be p*p, since everything before that has already been eliminated.  In fact, you only need to multiply p by all the remaining potential primes that are left after it in the list, stopping as soon as your product is out of range (larger than Until).</p><br/><br/><p>There are also some good probabilistic algorithms out there, such as the Miller-Rabin test.  <a href="http://en.wikipedia.org/wiki/Primality_test" rel="nofollow">The wikipedia page</a> is a good introduction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHARE MASTERPAG ACROSS PROJECT
    </pattern>
    <template>
<![CDATA[<p>I have trying to accomplish the same thing.  I look into a couple of solutions but I think using a virtual directory is probably the best way to share master pages.  </p><br/><br/><p>Here are a couple sources that you can look at. </p><br/><br/><ul><br/><li><a href="http://blogs.msdn.com/shahpiyush/archive/2007/03/09/Sharing-Master-Pages-amongst-Applications-by-Embedding-it-in-a-Dll_2E00_.aspx" rel="nofollow">Sharing Master Pages amongst<br/>Applications by Embedding it in a<br/>Dll</a></li><br/><li><a href="http://msdn.microsoft.com/en-us/library/aa992039(VS.80).aspx" rel="nofollow">Sharing Master Pages in Visual Studio</a></li><br/><li><a href="http://www.odetocode.com/articles/450.aspx" rel="nofollow">ASP.Net 2.0 - Master Pages: Tips, Tricks, and Traps </a></li><br/></ul><br/><br/><p>The third bullets near the end the article tells you of possible ways you can share Masterpages also.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR AN OPENFILEDIALOG TO SELECT FOLDER
    </pattern>
    <template>
<![CDATA[<p>I have a dialog that I wrote called an OpenFileOrFolder dialog that allows you to open either a folder or a file.</p><br/><br/><p>If you set it's AcceptFiles value to false, then it operates in only accept folder mode.</p><br/><br/><p>You can download the source for it here:</p><br/><br/><p><a href="https://github.com/scottwis/OpenFileOrFolderDialog" rel="nofollow">https://github.com/scottwis/OpenFileOrFolderDialog</a></p><br/><br/><p>If you run into any issues, want more information about how it works, or want to contribute changes, send me an email message to:</p><br/><br/><p>scott@transactor.com</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTROL IS THI ( OPEN BUTTON WITH DROP DOWN )
    </pattern>
    <template>
<![CDATA[<p>I think what you are looking for is called a toolStripSplitButton. It is only available in a toolStrip. But you can add a toolStripContainer anywhere on your form and then put the toolStrip and toolStripSplitButton inside your container. </p><br/><br/><p>You won't want to show the grips so you'll want to set your gripMargin = 0. You can also set your autosize=true so that the toolstrip conforms to your button.  The button will just look like a normal button (except for the split part) on your form.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI SIZE DIFFER COUNTER
    </pattern>
    <template>
<![CDATA[<p>If you want to know how much the GC uses try:</p><br/><br/><pre><code>GC.GetTotalMemory(true)<br/></code></pre><br/><br/><p>If you want to know what your process uses from Windows (VM Size column in TaskManager) try:</p><br/><br/><pre><code>Process.GetCurrentProcess().PrivateMemorySize64<br/></code></pre><br/><br/><p>If you want to know what your process has in RAM (as opposed to in the pagefile) (Mem Usage column in TaskManager) try:</p><br/><br/><pre><code>Process.GetCurrentProcess().WorkingSet64<br/></code></pre><br/><br/><p>See <a href="http://shsc.info/WindowsMemoryManagement" rel="nofollow">here</a> for more explanation on the different sorts of memory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONSTRUCTOR WITH THE SAME ARGUMENT TYPE
    </pattern>
    <template>
<![CDATA[<p>You might consider using custom types.</p><br/><br/><p>For example, create LogonName and BadgeNumber classes.</p><br/><br/><p>Then your function declarations look like...</p><br/><br/><pre><code>public Person(LogonName ln)<br/>{<br/>    this.Load(ln.ToString());<br/>}<br/><br/>public Person(BadgeNumber bn)<br/>{<br/>    //load logic here...<br/>}<br/></code></pre><br/><br/><p>Such a solution might give you a good place to keep the business logic that governs the format and usage of these strings.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEED THE .NET 1.0 FRAMEWORK TO TARGET THE .NET 1.0 FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Visual Studio 2008 was the first to support targeting older versions of .NET. Unfortunately, it supports only .NET 2 and up.</p><br/><br/><p>In other words, you'll need .NET framework SDK 1 or 1.1 to do this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STABL IS WPF
    </pattern>
    <template>
<![CDATA[<p>MS do have a history of "fire and movement" with regards to introducing new technology into their development stack, but they also have a strong history of maintaining support for the older stuff, and backwards-compatibility. WPF seems to be getting stuff added to it with each new release of the framework but the things you learn aren't being superceded or invalidated.</p><br/><br/><p>The only breaking change I've seen in my own WPF applications with a new release of the framework was one recently in 3.5 SP1, and that was because we were unknowingly relying on a bug to get a certain behaviour from our code. We adjusted the XAML to be more correct and it started working fine.</p><br/><br/><p>So yeah, I think WPF is pretty "stable" as a client-side development technology.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAST OBJECT CREAT THROUGH REFLECT
    </pattern>
    <template>
<![CDATA[<p>I'm just guessing here because from your code it's not obvious where do you have definition of IPlugin interface but if you can't cast in your host application then you are probably having IPlugin interface in your host assembly and then at the same time in your plugin assembly. This won't work.</p><br/><br/><p>The easiest thing is to make this work is to have IPlugin interface marked as public in your host assembly and then have your Plugin assembly <strong>reference host application assembly</strong>, so both assemblies have access to <strong>the very same interface</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROADCAST LIKE UDP WITH THE RELIABL OF TCP
    </pattern>
    <template>
<![CDATA[<p>Almost all games have a need for the fast-reacting properties (and to a lesser extent, the connectionless properties) of UDP and the reliability of TCP. What they do is they build their own reliable protocol on top of UDP. This gives them the ability to just burst packets to whereever and optionally make them reliable, as well.</p><br/><br/><p>The reliable packet system is usually a simple retry-until-acknowledged system simpler than TCP but there are protocols which go way beyond what TCP can offer.</p><br/><br/><p>Your situation sounds very simple. You'll probably be able to make the cleanest solution yourself - just make every client send back an "I heard you" response and have the server keep trying until it gets it (or gives up).</p><br/><br/><p>If you want something more, most custom protocol libraries are in C++, so I am not sure how much use they'll be to you. However, my knowledge here is a few years old - perhaps some protocols have been ported over by now. Hmm... RakNet and enet are two C/C++ libraries that come to mind.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCALABL IS SYSTEM.THREADING.TIM
    </pattern>
    <template>
<![CDATA[<p>I say this in response to a lot of questions:  Don't forget that the (managed) source code to the framework is available.  You can use this tool to get it all: <a href="http://www.codeplex.com/NetMassDownloader" rel="nofollow">http://www.codeplex.com/NetMassDownloader</a></p><br/><br/><p>Unfortunately, in this specific case, a lot of the implementation is in native code, so you don't get to look at it...</p><br/><br/><p>They definitely use pool threads rather than a thread-per-timer, though.</p><br/><br/><p>The standard way to implement a big collection of timers (which is how the kernel does it internally, and I would suspect is indirectly how your big collection of Timers ends up) is to maintain the list sorted by time-until-expiry - so the system only ever has to worry about checking the next timer which is going to expire, not the whole list.</p><br/><br/><p>Roughly, this gives O(log n) for starting a timer and O(1) for processing running timers.</p><br/><br/><p>Edit: Just been looking in Jeff Richter's book.  He says (of Threading.Timer) that it uses a single thread for all Timer objects, this thread knows when the next timer (i.e. as above) is due and calls ThreadPool.QueueUserWorkItem for the callbacks as appropriate.  This has the effect that if you don't finish servicing one callback on a timer before the next is due, that your callback will reenter on another pool thread.  So in summary I doubt you'll see a big problem with having lots of timers, but you might suffer thread pool exhaustion if large numbers of them are firing at the same timer and/or their callbacks are slow-running.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS APPLIC SET USE CONFIGURATIONMANAG
    </pattern>
    <template>
<![CDATA[<p>You have to reference the System.configuration assembly (note the lowercase)</p><br/><br/><p>I don't know why this assembly is not added by default to new projects on Visual Studio, but I find myself having the same problem every time I start a new project. I always forget to add the reference.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHI ) SHOULD I USE OBFUSC
    </pattern>
    <template>
<![CDATA[<p>I posted a question which might help you as it discusses some of the issues:<br/><a href="http://stackoverflow.com/questions/12075/should-i-be-worried-about-obfuscating-my-net-code">should-i-be-worried-about-obfuscating-my-net-code</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NANT AND DUAL PLATFORM BUILD BEST WAY TO BUILD ON WINDOW AND MONO LINUX
    </pattern>
    <template>
<![CDATA[<p>This shouldn't be a particularly difficult excercise. We do some fairly similar stuff on one of my projects since half of it runs on Java using Ant to run relevant targets, and the other half is .Net (C#) for the UI. The projects get run on windows machines for development, but the servers (Java) run linux, but in the UAT environment (linux) we need to run the nunits (integration tests). The real trick (not really a difficult trick) behind this is having a NAnt build file that can run in both environments which seems to be the same thing you're trying to do here.</p><br/><br/><p>Of course you realise you'll need to install NAnt on Mono first:</p><br/><br/><pre><code>$ export MONO_NO_UNLOAD=1<br/>$ make clean<br/>$ make<br/>$ mono bin/NAnt.exe clean build<br/></code></pre><br/><br/><p>And then your build file needs to be written in such a way that it seperates concerns. Some parts of the build file written for windows will not work in linux for example. So you really just need to divide it up ito specific targets in the build file. After that, there are a number of ways you can run a specific targets from the command line. An example might look like this:</p><br/><br/><pre><code>&lt;project name="DualBuild"&gt;<br/>  &lt;property name="windowsDotNetPath" value="C:\WINDOWS\Microsoft.NET\Framework\v3.5" /&gt;<br/>  &lt;property name="windowsSolutionPath" value="D:\WorkingDirectory\branches\1234\source" /&gt;<br/>  &lt;property name="windowsNUnitPath" value="C:\Program Files\NUnit-Net-2.0 2.2.8\bin" /&gt;<br/>  &lt;property name="monoPath" value="You get the idea..." /&gt;<br/><br/>  &lt;target name="BuildAndTestOnWindows" depends="WinUpdateRevision, WinBuild, WinTest" /&gt;<br/>  &lt;target name="BuildAndTestOnLinux" depends="MonoUpdateRevision, MonoBuild, MonoTest" /&gt;<br/><br/>  &lt;target name="WinUpdateRevision"&gt;<br/>    &lt;delete file="${windowsSolutionPath}\Properties\AssemblyInfo.cs" /&gt;<br/>    &lt;exec program="subwcrev.exe" basedir="C:\Program Files\TortoiseSVN\bin\"<br/>          workingdir="${windowsSolutionPath}\Properties"<br/>          commandline="${windowsSolutionPath} .\AssemblyInfoTemplate.cs<br/>                       .\AssemblyInfo.cs" /&gt;<br/>    &lt;delete file="${windowsSolutionPath}\Properties\AssemblyInfo.cs" /&gt;<br/>    &lt;exec program="subwcrev.exe" basedir="C:\Program Files\TortoiseSVN\bin\"<br/>          workingdir="${windowsSolutionPath}\Properties"<br/>          commandline="${windowsSolutionPath} .\AssemblyInfoTemplate.cs <br/>                       .\AssemblyInfo.cs" /&gt;<br/>  &lt;/target&gt;<br/><br/>  &lt;target name="WinBuild"&gt;<br/>    &lt;exec program="msbuild.exe"<br/>          basedir="${windowsDotNetPath}"<br/>          workingdir="${windowsSolutionPath}"<br/>          commandline="MySolution.sln /logger:ThoughtWorks.CruiseControl.MsBuild.XmlLogger,<br/>                       ThoughtWorks.CruiseControl.MsBuild.dll;msbuild-output.xml <br/>                       /nologo /verbosity:normal /noconsolelogger <br/>                       /p:Configuration=Debug /target:Rebuild" /&gt;<br/>  &lt;/target&gt;<br/><br/>  &lt;target name="WinTest"&gt;<br/>    &lt;exec program="NCover.Console.exe"<br/>          basedir="C:\Program Files\NCover"<br/>          workingdir="${windowsSolutionPath}"&gt;<br/>      &lt;arg value="//x &amp;quot;ClientCoverage.xml&amp;quot;" /&gt;<br/>      &lt;arg value="&amp;quot;C:\Program Files\NUnit-Net-2.0 2.2.8\bin<br/>                       \nunit-console.exe&amp;quot; <br/>                       MySolution.nunit /xml=nunit-output.xml /nologo" /&gt;<br/>    &lt;/exec&gt;<br/>  &lt;/target&gt;<br/><br/>  &lt;target name="MonoUpdateRevision"&gt;<br/>    You get the idea...<br/>  &lt;/target&gt;<br/><br/><br/>  &lt;target name="MonoBuild"&gt;<br/>    You get the idea...<br/>  &lt;/target&gt;<br/><br/>  &lt;target name="MonoTest"&gt;<br/>    You get the idea...<br/>  &lt;/target&gt;<br/><br/>&lt;/project&gt;<br/></code></pre><br/><br/><p>For brevity, I've left both sides out. The neat thing is you can use NUnit as well as NAnt on both environments and that makes things really easy from a dependency point of view. And for each executable you can swap out for others that work in that environment, for example (xBuild for MSBuild, and svn for tortoise etc)</p><br/><br/><p>For more help on Nunit etc on Mono, check out <a href="http://blog.coryfoy.com/2006/02/nunitnant-and-mono-on-linux/" rel="nofollow">this fantastic post</a>.</p><br/><br/><p>Hope that helps,</p><br/><br/><p>Cheers,</p><br/><br/><p>Rob G</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRACT THE INNER EXCEPT FROM A SOAP EXCEPT IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Unfortunately I don't think this is possible.</p><br/><br/><p>The exception you are raising in your web service code is being encoded into a Soap Fault, which then being passed as a string back to your client code.</p><br/><br/><p>What you are seeing in the SoapException message is simply the text from the Soap fault, which is not being converted back to an exception, but merely stored as text.</p><br/><br/><p>If you want to return useful information in error conditions then I recommend returning a custom class from your web service which can have an "Error" property which contains your information.</p><br/><br/><pre><code>[WebMethod]<br/>public ResponseClass HelloWorld()<br/>{<br/>  ResponseClass c = new ResponseClass();<br/>  try <br/>  {<br/>    throw new Exception("Exception Text");<br/>    // The following would be returned on a success<br/>    c.WasError = false;<br/>    c.ReturnValue = "Hello World";<br/>  }<br/>  catch(Exception e)<br/>  {<br/>    c.WasError = true;<br/>    c.ErrorMessage = e.Message;<br/>    return c;<br/>  }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMAT INVOK A LISTVIEW LABEL EDIT
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.listviewitem.beginedit.aspx" rel="nofollow">found it!</a></p><br/><br/><pre><code>ListViewItem::BeginEdit();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A .NET SERVIC USE INSTALLUTIL
    </pattern>
    <template>
<![CDATA[<p>I think I may have found it.  In the service itself, the automatically created ServiceProcessInstaller component has a property "Account" which can be set to "LocalService", "LocalSystem", "NetworkService" or "User".  It was defaulting to "User" which must have displayed the prompt.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN .NET THROUGH GMAIL
    </pattern>
    <template>
<![CDATA[<p>Be sure to use <code>System.Net.Mail</code>, not the deprecated <code>System.Web.Mail</code>. Doing SSL with <code>System.Web.Mail</code> is a gross mess of hacky extensions.</p><br/><br/><pre><code>using System.Net;<br/>using System.Net.Mail;<br/><br/>var fromAddress = new MailAddress("from@gmail.com", "From Name");<br/>var toAddress = new MailAddress("to@example.com", "To Name");<br/>const string fromPassword = "fromPassword";<br/>const string subject = "Subject";<br/>const string body = "Body";<br/><br/>var smtp = new SmtpClient<br/>           {<br/>               Host = "smtp.gmail.com",<br/>               Port = 587,<br/>               EnableSsl = true,<br/>               DeliveryMethod = SmtpDeliveryMethod.Network,<br/>               UseDefaultCredentials = false,<br/>               Credentials = new NetworkCredential(fromAddress.Address, fromPassword)<br/>           };<br/>using (var message = new MailMessage(fromAddress, toAddress)<br/>                     {<br/>                         Subject = subject,<br/>                         Body = body<br/>                     })<br/>{<br/>    smtp.Send(message);<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPAWN THREAD ON DIFFER CPU CORE
    </pattern>
    <template>
<![CDATA[<p>Don't bother doing that.</p><br/><br/><p>Instead use the <a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.aspx" rel="nofollow">Thread Pool</a>. The thread pool is a mechanism (actually a class) of the framework that you can query for a new thread.</p><br/><br/><p>When you ask for a new thread it will either give you a new one or enqueue the work until a thread get freed. In that way the framework is in charge on deciding wether it should create more threads or not depending on the number of present CPUs.</p><br/><br/><p>Edit: In addition, as it has been already mentioned, the OS is in charge of distributing the threads among the different CPUs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC FIELD IN XAML
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://msdn.microsoft.com/en-us/library/ms742135.aspx" rel="nofollow">x:Static</a> markup extension</p><br/><br/><pre><code>&lt;ResoureDictionary ...<br/>  xmlns:local="clr-namespace:Namespace.Where.Your.BaseThingy.Class.Is.Defined"<br/>&gt;<br/>  &lt;Style BasedOn="{x:Static local:BaseThingy.BaseStyle}" TargetType="BaseThingy" /&gt;<br/>&lt;/ResourceDictionary&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAG SESSION IN NHIBERN
    </pattern>
    <template>
<![CDATA[<p>Session management:</p><br/><br/><p><a href="http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/HybridSessionBuilder.cs" rel="nofollow">http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/HybridSessionBuilder.cs</a></p><br/><br/><p>Session per request:</p><br/><br/><p><a href="http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/NHibernateSessionModule.cs" rel="nofollow">http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/NHibernateSessionModule.cs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEWS AND PODCAST CM
    </pattern>
    <template>
<![CDATA[<p>WordPress coupled with <a href="http://www.mightyseek.com/podpress/" rel="nofollow">PodPress</a> should do fine. When it comes to a CMS, I would start with something simple in concept (like a blogging engine) that can grow via plugins.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIME ZONE REMOT IN C #
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/ms724944.aspx" rel="nofollow">SetTimeZoneInformation</a> should do what you need. You'll need to use <a href="http://pinvoke.net/default.aspx/kernel32/SetTimeZoneInformation.html" rel="nofollow">P/Invoke</a> to get at it.</p><br/><br/><p>Note also that you'll need to possess and enable the SE_TIME_ZONE_NAME privilege.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOUBLE CLICK EVENT IN TABCONTROL
    </pattern>
    <template>
<![CDATA[<p>The MouseDoubleClick event of the TabControl seems to respond just fine to double-clicking.  The only additional step I would do is set a short timer after the TabIndexChanged event to track that a new tab has been selected and ignore any double-clicks that happen outside the timer.  This will prevent double-clicking on the selected tab.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAKE A BYTE ARRAY OF A TIFF IMAG AND TURN IT INTO A SYSTEM.DRAWING.IMAG OBJECT
    </pattern>
    <template>
<![CDATA[<p><strong>Edit:</strong> The assumption below is not correct, I had a chance to fire up my IDE later and tested with and without Write and both populated the MemoryStream correctly.</p><br/><br/><p>I think you need to write to your MemeoryStream first.</p><br/><br/><p>As if my memory (no pun intended) serves me correctly this:</p><br/><br/><pre><code>MemoryStream ms = new MemoryStream(byteArrayIn);<br/></code></pre><br/><br/><p>Creates a memory stream of that size.</p><br/><br/><p>You then need to write your byte array contents to the memory stream:</p><br/><br/><pre><code>ms.Write(byteArrayIn, 0, byteArrayIn.Length);<br/></code></pre><br/><br/><p>See if that fixes it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DVD BURN COMPON FOR WINDOW OR .NET
    </pattern>
    <template>
<![CDATA[<p>I've used the code from the codeproject <a href="http://www.codeproject.com/KB/miscctrl/imapi2.aspx" rel="nofollow">article</a> and it works pretty well. It's a nice wrapper around the IMAPI2, so as longs as IMAPI2 supports what you need to do, the .NET wrapper will do it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FALS OPER IN C # GOOD FOR
    </pattern>
    <template>
<![CDATA[<p>You can use it to override the &amp;&amp; and || operators.</p><br/><br/><p>The &amp;&amp; and || operators can't be overridden, but if you override |, &amp;, true and false in exactly the right way the compiler will call | and &amp; when you write || and &amp;&amp;</p><br/><br/><p>for example, look at this code (from <a href="http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx" rel="nofollow">http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a> - where I found out about this trick):</p><br/><br/><p><strong>EDIT</strong>: The URL was broken. Here is a link to the archive of that URL: <a href="http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx" rel="nofollow">http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a></p><br/><br/><pre><code>public static AbstractCriterion operator &amp;(AbstractCriterion lhs, AbstractCriterion rhs)<br/>{<br/>       return new AndExpression(lhs, rhs);<br/>}<br/><br/>public static AbstractCriterion operator |(AbstractCriterion lhs, AbstractCriterion rhs)<br/>{<br/>       return new OrExpression(lhs, rhs);<br/>}<br/><br/>public static bool operator false(AbstractCriterion criteria)<br/>{<br/>       return false;<br/>}<br/>public static bool operator true(AbstractCriterion criteria)<br/>{<br/>       return false;<br/>}<br/></code></pre><br/><br/><p>This is obviously a side effect and not the way it's intended to be used, but it is useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND WHAT DEBUG SWITCH ARE AVAIL OR GIVEN A SWITCH FIND OUT WHAT IS BE DISABL
    </pattern>
    <template>
<![CDATA[<p>As you suspected, Remote.Disable stops the app from attaching debug info to remote requests.  It's defined inside the .NET framework methods that make the SOAP request.</p><br/><br/><p>The basic situation is that these switches can be defined anywhere in code, you just need to create a new System.Diagnostics.BooleanSwitch with the name given and the config file can control them.</p><br/><br/><p>This particular one is defined in System.ComponentModel.CompModSwitches.DisableRemoteDebugging:</p><br/><br/><pre><code>public static BooleanSwitch DisableRemoteDebugging<br/>{<br/>    get<br/>    {<br/>        if (disableRemoteDebugging == null)<br/>        {<br/>            disableRemoteDebugging = new BooleanSwitch("Remote.Disable", "Disable remote debugging for web methods.");<br/>        }<br/>        return disableRemoteDebugging;<br/>    }<br/>}<br/></code></pre><br/><br/><p>In your case it's probably being called from <em>System.Web.Services.Protocols.RemoteDebugger.IsClientCallOutEnabled()</em>, which is being called by <em>System.Web.Services.Protocols.WebClientProtocol.NotifyClientCallOut</em> which is in turn being called by the Invoke method of <em>System.Web.Services.Protocols.SoapHttpClientProtocol</em></p><br/><br/><p>Unfortunately, to my knowledge, short of decompiling the framework &amp; seaching for </p><br/><br/><pre><code>new BooleanSwitch<br/></code></pre><br/><br/><p>or any of the other inheritors of the <em>System.Diagnostics.Switch</em> class,<br/>there's no easy way to know what switches are defined.  It seems to be a case of searching msdn/google/stack overflow for the specific case</p><br/><br/><p>In this case I just used Reflector &amp; searched for the Remote.Disable string</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE A .NET WINDOW FORM PROJECT LOOK FRESH
    </pattern>
    <template>
<![CDATA[<p>I was actually just sprucing up a dialog today.  A lot of it depends on what kind of application you have, and what OS they are running on.  A couple of these tips will certainly go a long way to jazzing things up.</p><br/><br/><ol><br/><li><p>Ensure adequate spacing between controls - don't cram them all together.  Space is appealing.  You might also trying flowing the controls a little differently when you have more space.</p></li><br/><li><p><img src="http://www.glyfx.com/grfx/products/thumb_free_vista.gif" alt="GlyFX" />Put in some new 3D and glossing images.  You can put a big yellow exclamation mark on a custom warning dialog.  Replace old toolbar buttons with new ones.  Two libraries I have used and like are <a href="http://www.glyfx.com/" rel="nofollow">GlyFX</a> and <a href="http://www.iconexperience.com/" rel="nofollow">IconExperience</a>.  You can find free ones too.  Ideally get a graphic artist to make some custom ones for the specific actions your application does to fill in between the common ones you use (make sure they all go together).  That will go a long way to making it look fancy.</p></li><br/><li><p>Try a different font.  Tahoma is a good one.  Often times the default font is MS Sans Seirf.  You can do better.  Avoid Times Roman and Comic Sanserif though.  Also avoid large blocks of bold - use it sparingly.  Generally you want all your fonts the same, and only use different fonts sparingly to set certain bits of text apart.  </p></li><br/><li><p>Add subdued colors to certain controls.  This is a tricky one.  You always want to use subdued colors, nothing bright or stark usually, but the colors should indicate something, or if you have a grid you can use it to show logical grouping.  This is a slippery slop. Be aware that users might change their system colors, which will change how your colors look.  Ideally give them a few color themes, or the ability to change colors.</p></li><br/><li><p>Instead of thinking eye-candy, think usability.  Make the most common course of action obvious.  Mark Miller of DevExpress has a great talk on the Science of User Interface.  I actually have a video of it and might be able to post it online with a little clean-up.</p></li><br/><li><p>Invest in a few good quality 3rd party controls.  Replacing all your controls could be a pain, but if you are using the default grids for example, you would really jazz it up with a good grid from <a href="http://www.devexpress.com/" rel="nofollow">DevExpress</a> or some other component vendor.  Be aware that different vendors have different philosophies for how their components are used, so swapping them out can be a bit of a pain.  Start small to test the waters, and then try something really complicated before you commit to replacing all of them.  The only thing worse then ugly grids is ugly grids mixed with pretty grids.  Consistency is golden!  </p></li><br/><li><p>You also might look at replacing your old tool bars and menus with a Ribbon Control like Microsoft did in Office 2007.  Then everyone will think you are really uptown!  Again only replacing key components and UI elements without thinking you need to revamp the whole UI.</p></li><br/><li><p>Of course pay attention to the basics like tab order, etc.  Consistency, consistency, consistency.</p></li><br/></ol><br/><br/><p>Some apps lend themselves to full blown skinning, while others don't.  Generally you don't want anything flashy that gets used a lot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB.CONFIG FROM .NET 2.0 TO 3.5
    </pattern>
    <template>
<![CDATA[<p>There is a good description of the 3.5 web.config available here:<br/><a href="http://www.4guysfromrolla.com/articles/121207-1.aspx">http://www.4guysfromrolla.com/articles/121207-1.aspx</a></p><br/><br/><p>The assemblies and config sections are important because they tell the runtime to use the new 3.5 dlls instead of the 2.0 dlls</p><br/><br/><p>The codedom section tells the compiler to use 3.5</p><br/><br/><p>If your not using ASP.Net ajax you can probably skip the rest.  I've never tested that though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE SNIPPET EDITOR DO YOU USE
    </pattern>
    <template>
<![CDATA[<p>I've never used one, but I've heard about <a href="http://msdn.microsoft.com/en-us/vbasic/ms789085.aspx" rel="nofollow">Code Snippet Editor</a> from Microsoft.  This version is for VS 2005.  However, there's also a <a href="http://msdn.microsoft.com/en-us/vbasic/bb973770.aspx" rel="nofollow">VS 2008 edition</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT FILE USE .NET
    </pattern>
    <template>
<![CDATA[<p>Answering my own question:</p><br/><br/><p>I ended up using the Microsoft.VisualBasic.FileIO.TextFieldParser object, see:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/f68t4563.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/f68t4563.aspx</a></p><br/><br/><p>and example of implementation at:</p><br/><br/><p><a href="http://www.siccolo.com/Articles/CodeProject/Open_DataSet_From_TextFile/open_dataset_from_text_csv_file.html" rel="nofollow">http://www.siccolo.com/Articles/CodeProject/Open_DataSet_From_TextFile/open_dataset_from_text_csv_file.html</a></p><br/><br/><p>This allows me to handle csv files without worrying about how to cope with whether fields are enclosed in quotes, contain commas, escaped quotes etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHI IS MY PROCESS.START ( ) HANG
    </pattern>
    <template>
<![CDATA[<p>I believe I've found the answer. It seems that Microsoft, in all their infinite wisdom, has blocked batch files from being executed by IIS in Windows Server 2003. Brenden Tompkins has a work-around here:</p><br/><br/><p><a href="http://codebetter.com/blogs/brendan.tompkins/archive/2004/05/13/13484.aspx">http://codebetter.com/blogs/brendan.tompkins/archive/2004/05/13/13484.aspx</a></p><br/><br/><p>That won't work for me, because my batch file uses IF and GOTO, but it would definitely work for simple batch files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON IIS6
    </pattern>
    <template>
<![CDATA[<p>It took me a bit, but I figured out how to make the extensions work with IIS 6.  First, you need to rework the base routing to include .aspx so that they will be routed through the ASP.NET ISAPI filter.</p><br/><br/><pre><code>routes.MapRoute(<br/>    "Default",                                              // Route name<br/>    "{controller}.aspx/{action}/{id}",                      // URL with parameters<br/>    new { controller = "Home", action = "Index", id = "" }  // Parameter defaults<br/>);<br/></code></pre><br/><br/><p>If you navigate to Home.aspx, for example, your site should be working fine.  But Default.aspx and the default page address of http://[website]/ stop working correctly.  So how is that fixed?</p><br/><br/><p>Well, you need to define a second route.  Unfortunately, using Default.aspx as the route does not work properly:</p><br/><br/><pre><code>routes.MapRoute(<br/>    "Default2",                                             // Route name<br/>    "Default.aspx",                                         // URL with parameters<br/>    new { controller = "Home", action = "Index", id = "" }  // Parameter defaults<br/>);<br/></code></pre><br/><br/><p>So how do you get this to work?  Well, this is where you need the original routing code:</p><br/><br/><pre><code>routes.MapRoute(<br/>    "Default2",                                             // Route name<br/>    "{controller}/{action}/{id}",                           // URL with parameters<br/>    new { controller = "Home", action = "Index", id = "" }  // Parameter defaults<br/>);<br/></code></pre><br/><br/><p>When you do this, Default.aspx and http://[website]/ both start working again, I think because they become successfully mapped back to the Home controller.  So the complete solution is:</p><br/><br/><pre><code>public class MvcApplication : System.Web.HttpApplication<br/>{<br/>    public static void RegisterRoutes(RouteCollection routes)<br/>    {<br/>        routes.IgnoreRoute("{resource}.axd/{*pathInfo}");<br/><br/>        routes.MapRoute(<br/>            "Default",                                              // Route name<br/>            "{controller}.aspx/{action}/{id}",                      // URL with parameters<br/>            new { controller = "Home", action = "Index", id = "" }  // Parameter defaults<br/>        );<br/><br/>        routes.MapRoute(<br/>            "Default2",                                              // Route name<br/>            "{controller}/{action}/{id}",                            // URL with parameters<br/>            new { controller = "Home", action = "Index", id = "" }  // Parameter defaults<br/>        );<br/>    }<br/><br/>    protected void Application_Start()<br/>    {<br/>        RegisterRoutes(RouteTable.Routes);<br/>    }<br/>}<br/></code></pre><br/><br/><p>And your site should start working just fine under IIS 6.  (At least it does on my PC.)</p><br/><br/><p>And as a bonus, if you are using Html.ActionLink() in your pages, you should not have to change any other line of code throughout the entire site.  This method takes care of properly tagging on the .aspx extension to the controller.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET MADE RAW COM AND DCOM PROGRAM REDUND
    </pattern>
    <template>
<![CDATA[<p>Not yet, because the OS is still unmanaged.</p><br/><br/><p>If MS finally do what their labs have been talking about for years and produce a fully managed OS then it will.</p><br/><br/><p>That OS won't be backwards compatible though. They would have to produce managed versions of Office, IE, etc first. They will have to produce a virtual machine to run unmanaged apps.</p><br/><br/><p>The pain would be something similar to the move from Mac OS9 to OSX.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRUNCAT A STRING WHILE CONVERT TO BYTE IN C #
    </pattern>
    <template>
<![CDATA[<p>In order to truncate a string to a UTF8 byte array without splitting in the middle of a character I use this:</p><br/><br/><pre><code>static string Truncate(string s, int maxLength) {<br/>    if (Encoding.UTF8.GetByteCount(s) &lt;= maxLength)<br/>    	return s;<br/>    var cs = s.ToCharArray();<br/>    int length = 0;<br/>    int i = 0;<br/>    while (i &lt; cs.Length){<br/>    	int charSize = 1;<br/>    	if (i &lt; (cs.Length - 1) &amp;&amp; char.IsSurrogate(cs[i]))<br/>    		charSize = 2;<br/>    	int byteSize = Encoding.UTF8.GetByteCount(cs, i, charSize);<br/>    	if ((byteSize + length) &lt;= maxLength){<br/>    		i = i + charSize;<br/>    		length += byteSize;<br/>    	}<br/>    	else<br/>    		break;<br/>    }<br/>    return s.Substring(0, i);<br/>}<br/></code></pre><br/><br/><p>The returned string can then be safely transferred to a byte array of length maxLength.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM ELMAH
    </pattern>
    <template>
<![CDATA[<p>You need the ErrorMail httpModule.</p><br/><br/><p>add this line inside the &lt;httpModules&gt; section</p><br/><br/><pre><code>&lt;add name="ErrorMail" type="Elmah.ErrorMailModule, Elmah" /&gt;<br/></code></pre><br/><br/><p>If your using a remote SMTP server (which it looks like you are) you don't need SMTP on the server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT.GETHASHCOD ( ) UNIQU TO A REFER OR A VALU
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Rules 1 &amp; 3 are contradictory to me.</p><br/></blockquote><br/><br/><p>To a certain extent, they are. The reason is simple: if an object is stored in a hash table and, by changing its value, you change its hash then the hash table has lost the value and you can't find it again by querying the hash table. It is important that while objects are stored in a hash table, they retain their hash value.</p><br/><br/><p>To realize this it is often simplest to make hashable objects immutable, thus evading the whole problem. It is however sufficient to make only those fields immutable that determine the hash value.</p><br/><br/><p>Consider the following example:</p><br/><br/><pre><code>struct Person {<br/>    public readonly string FirstName;<br/>    public readonly string Name;<br/>    public readonly DateTime Birthday;<br/><br/>    public int ShoeSize;<br/>}<br/></code></pre><br/><br/><p>People rarely change their birthday and most people never change their name (except when marrying). However, their shoe size may grow arbitrarily, or even shrink. It is therefore reasonable to identify people using their birthday and name but not their shoe size. The hash value should reflect this:</p><br/><br/><pre><code>public int GetHashCode() {<br/>    return FirstName.GetHashCode() ^ Name.GetHashCode() ^ Birthday.GetHashCode();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REUS CODE WHEN USE VISUAL STUDIO
    </pattern>
    <template>
<![CDATA[<p>In short, what you are doing is right, you want to move the common code into a class library (DLL) and then reference that in any projects that require its logic.</p><br/><br/><p>Where you are going wrong is that you are not <em>maintaining</em> it. If you need to make little "tweaks" <em>subclass</em> your existing code and extend it, dont change it.. If there are major changes needed, then re-think the design.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TELL IF AN OBJECT IS MODIFI
    </pattern>
    <template>
<![CDATA[<p>At the end of the object's constructor you could serialize the object to a base 64 string just like the cookie stores it, and store this in a member variable. </p><br/><br/><p>When you want to check if the cookie needs recreating, re - serialize the object and compare this new base 64 string against the one stored in a member variable. If it has changed, reset the cookie with the new value.</p><br/><br/><p>Watch out for the gotcha - don't include the member variable storing the base 64 serialization in the serialization itself. I presume your language uses something like a sleep() function (is how PHP does it) to serialize itself, so just make sure the member is not included in that function.</p><br/><br/><p>This will always work because you are comparing the exact value you'd be saving in the cookie, and wouldn't need to override GetHashCode() which sounds like it could have nasty consequences.</p><br/><br/><p>All that said I'd probably just drop the test and always reset the cookie, can't be that much overhead in it when compared to doing the change check, and far less likelyhood of bugs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION.FLUSH ( ) SEND UPDAT QUERI WHEN NO UPDAT HA OCCUR
    </pattern>
    <template>
<![CDATA[<p>I have seen this once before when one of my models was not mapped correctly (wasn't using nullable types correctly).  May you please paste your model and mapping?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND MEMORI CORRUPT IN MANAG C + + CODE
    </pattern>
    <template>
<![CDATA[<p>In native code, if the corruption always occurs in the same place in memory, you can use a <a href="http://msdn.microsoft.com/en-us/library/350dyxd0.aspx" rel="nofollow">data breakpoint</a> to break the debugger when that memory is changed. Unfortunately, you cannot set a data breakpoint in the managed C++ environment, presumably because the GC could move the object in memory.</p><br/><br/><p>Not sure if this helps, but hopefully it leads you off in the right direction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # HAVE A WAY OF GIVE ME AN IMMUT DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>No, but a wrapper is rather trivial:</p><br/><br/><pre><code>public class ReadOnlyDictionary&lt;TKey, TValue&gt; : IDictionary&lt;TKey, TValue&gt;<br/>{<br/>    IDictionary&lt;TKey, TValue&gt; _dict;<br/><br/>    public ReadOnlyDictionary(IDictionary&lt;TKey, TValue&gt; backingDict)<br/>    {<br/>        _dict = backingDict;<br/>    }<br/><br/>    public void Add(TKey key, TValue value)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool ContainsKey(TKey key)<br/>    {<br/>        return _dict.ContainsKey(key);<br/>    }<br/><br/>    public ICollection&lt;TKey&gt; Keys<br/>    {<br/>        get { return _dict.Keys; }<br/>    }<br/><br/>    public bool Remove(TKey key)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool TryGetValue(TKey key, out TValue value)<br/>    {<br/>        return _dict.TryGetValue(key, out value);<br/>    }<br/><br/>    public ICollection&lt;TValue&gt; Values<br/>    {<br/>        get { return _dict.Values; }<br/>    }<br/><br/>    public TValue this[TKey key]<br/>    {<br/>        get { return _dict[key]; }<br/>        set { throw new InvalidOperationException(); }<br/>    }<br/><br/>    public void Add(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public void Clear()<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool Contains(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        return _dict.Contains(item);<br/>    }<br/><br/>    public void CopyTo(KeyValuePair&lt;TKey, TValue&gt;[] array, int arrayIndex)<br/>    {<br/>        _dict.CopyTo(array, arrayIndex);<br/>    }<br/><br/>    public int Count<br/>    {<br/>        get { return _dict.Count; }<br/>    }<br/><br/>    public bool IsReadOnly<br/>    {<br/>        get { return true; }<br/>    }<br/><br/>    public bool Remove(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator()<br/>    {<br/>        return _dict.GetEnumerator();<br/>    }<br/><br/>    System.Collections.IEnumerator <br/>           System.Collections.IEnumerable.GetEnumerator()<br/>    {<br/>        return ((System.Collections.IEnumerable)_dict).GetEnumerator();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Obviously, you can change the this[] setter above if you want to allow modifying values. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPOS A COLLECT PROPERTI
    </pattern>
    <template>
<![CDATA[<p>How you expose a collection depends entirely on how users are intended to interact with it.</p><br/><br/><p><strong>1)</strong> If users will be adding and removing items from an object's collection, then a simple get-only collection property is best (option #1 from the original question):</p><br/><br/><pre><code>private readonly Collection&lt;T&gt; myCollection_ = new ...;<br/>public Collection&lt;T&gt; MyCollection {<br/>  get { return this.myCollection_; }<br/>}<br/></code></pre><br/><br/><p>This strategy is used for the <code>Items</code> collections on the WindowsForms and WPF <code>ItemsControl</code> controls, where users add and remove items they want the control to display. These controls publish the actual collection and use callbacks or event listeners to keep track of items.</p><br/><br/><p>WPF also exposes some settable collections to allow users to display a collection of items they control, such as the <code>ItemsSource</code> property on <code>ItemsControl</code> (option #3 from the original question). However, this is not a common use case.</p><br/><br/><p><br/><br/><strong>2)</strong> If users will only be reading data maintained by the object, then you can use a readonly collection, as <a href="http://stackoverflow.com/questions/35007/how-to-expose-a-collection-property#35065">Quibblesome</a> suggested:</p><br/><br/><pre><code>private readonly List&lt;T&gt; myPrivateCollection_ = new ...;<br/>private ReadOnlyCollection&lt;T&gt; myPrivateCollectionView_;<br/>public ReadOnlyCollection&lt;T&gt; MyCollection {<br/>  get {<br/>    if( this.myPrivateCollectionView_ == null ) { /* lazily initialize view */ }<br/>    return this.myPrivateCollectionView_;<br/>  }<br/>}<br/></code></pre><br/><br/><p>Note that <code>ReadOnlyCollection&lt;T&gt;</code> provides a live view of the underlying collection, so you only need to create the view once.</p><br/><br/><p>If the internal collection does not implement <code>IList&lt;T&gt;</code>, or if you want to restrict access to more advanced users, you can instead wrap access to the collection through an enumerator:</p><br/><br/><pre><code>public IEnumerable&lt;T&gt; MyCollection {<br/>  get {<br/>    foreach( T item in this.myPrivateCollection_ )<br/>      yield return item;<br/>  }<br/>}<br/></code></pre><br/><br/><p>This approach is simple to implement and also provides access to all the members without exposing the internal collection. However, it does require that the collection remain unmodfied, as the BCL collection classes will throw an exception if you try to enumerate a collection after it has been modified. If the underlying collection is likely to change, you can either create a light wrapper that will enumerate the collection safely, or return a copy of the collection.</p><br/><br/><p><br/><br/><strong>3)</strong> Finally, if you need to expose arrays rather than higher-level collections, then you should return a copy of the array to prevent users from modifying it (option #2 from the orginal question):</p><br/><br/><pre><code>private T[] myArray_;<br/>public T[] GetMyArray( ) {<br/>  T[] copy = new T[this.myArray_.Length];<br/>  this.myArray_.CopyTo( copy, 0 );<br/>  return copy;<br/>  // Note: if you are using LINQ, calling the 'ToArray( )' <br/>  //  extension method will create a copy for you.<br/>}<br/></code></pre><br/><br/><p>You should not expose the underlying array through a property, as you will not be able to tell when users modify it. To allow modifying the array, you can either add a corresponding <code>SetMyArray( T[] array )</code> method, or use a custom indexer:</p><br/><br/><pre><code>public T this[int index] {<br/>  get { return this.myArray_[index]; }<br/>  set {<br/>    // TODO: validate new value; raise change event; etc.<br/>    this.myArray_[index] = value;<br/>  }<br/>}<br/></code></pre><br/><br/><p>(of course, by implementing a custom indexer, you will be duplicating the work of the BCL classes :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIST MULTIPL ASSEMBL TO THE GAC IN VISTA
    </pattern>
    <template>
<![CDATA[<p>GACUTIL doesn't register DLLs -- not in the "COM" sense. Unlike in COM, GACUTIL copies the file to an opaque directory under %SYSTEMROOT%\assembly and that's where they run from. It wouldn't make sense to ask GACUTIL "register a folder" (not that you can do that with RegSvr32 either).</p><br/><br/><p>You can use a batch FOR command such as:</p><br/><br/><pre><code>FOR %a IN (C:\MyFolderWithAssemblies\*.dll) DO GACUTIL /i %a<br/></code></pre><br/><br/><p>If you place that in a batch file, you must replace %a with %%a</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE INFORM IN MY EXECUT IN .NET
    </pattern>
    <template>
<![CDATA[<p>A better solution is to store the MD5 in the configuration file.  But instead of the MD5 being just of the configuration file, also include some secret "key" value, like a fixed guid, in the MD5.</p><br/><br/><pre><code>write(MD5(SecretKey + ConfigFileText));<br/></code></pre><br/><br/><p>Then you simply remove that MD5 and rehash the file (including your secret key).  If the MD5's are the same, then no-one modified it.  This prevents someone from modifying it and re-applying the MD5 since they don't know your secret key.</p><br/><br/><p>Keep in mind this is a fairly weak solution (as is the one you are suggesting) as they could easily track into your program to find the key or where the MD5 is stored.  </p><br/><br/><p>A better solution would be to use a public key system and sign the configuration file.  Again that is weak since that would require the private key to be stored on their local machine.  Pretty much anything that is contained on their local PC can be bypassed with enough effort.</p><br/><br/><p>If you REALLY want to store the information in your executable (which I would discourage) then you can just try appending it at the end of the EXE.  That is usually safe.  Modifying executable programs is <em>virus like</em> behavior and most operating system security will try to stop you too.  If your program is in the Program Files directory, and your configuration file is in the Application Data directory, and the user is logged in as a non-administrator (in XP or Vista), then you will be unable to update the EXE.</p><br/><br/><p><strong>Update:</strong> I don't care if you are using Asymmetric encryption, RSA or Quantum cryptography, if you are storing your keys on the user's computer (which you <em>must</em> do unless you route it all through a web service) then the user can find your keys, even if it means inspecting the registers on the CPU at run time!  You are only buying yourself a moderate level of security, so stick with something that is simple.  To prevent modification the solution I suggested is the best.  To prevent reading then encrypt it, and if you are storing your key locally then use AES Rijndael.</p><br/><br/><p><strong>Update:</strong>  The FixedGUID / SecretKey could alternatively be generated at install time and stored somewhere "secret" in the registry.  Or you could generate it every time you use it from hardware configuration.  Then you are getting more complicated.  How you want to do this to allow for moderate levels of hardware changes would be to take 6 different signatures, and hash your configuration file 6 times - once with each.  Combine each one with a 2nd secret value, like the GUID mentioned above (either global or generated at install).  Then when you check you verify each hash separately.  As long as they have 3 out of 6 (or whatever your tolerance is) then you accept it.  Next time you write it you hash it with the new hardware configuration.  This allows them to slowly swap out hardware over time and get a whole new system. . . Maybe that is a weakness.  It all comes down to your tolerance.  There are variations based on tighter tolerances.</p><br/><br/><p><strong>UPDATE:</strong>  For a Credit Card system you might want to consider some real security.  You should retain the services of a <em>security and cryptography consultant</em>.  More information needs to be exchanged.  They need to analyze your specific needs and risks.  </p><br/><br/><p>Also, if you want security with .NET you need to first start with a really good .NET obfuscator (<a href="http://www.google.com/search?hl=en&amp;q=.NET%20obfuscator&amp;aq=f&amp;oq=" rel="nofollow">just Google it</a>).  A .NET assembly is way to easy to disassemble and get at the source code and read all your secrets.  Not to sound a like a broken record, but anything that depends on the security of your user's system is fundamentally flawed from the beginning.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IZING CUSTOM SHAREPOINT SEARCH CRAWL
    </pattern>
    <template>
<![CDATA[<p>The limitation of MOSS crawling sites with different forms authentication should have been addressed in MOSS SP1. :</p><br/><br/><p><a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=ad59175c-ad6a-4027-8c2f-db25322f791b&amp;displaylang=en" rel="nofollow">http://www.microsoft.com/downloads/details.aspx?FamilyID=ad59175c-ad6a-4027-8c2f-db25322f791b&amp;displaylang=en</a></p><br/><br/><p>Here's a link to a post which describes how to get the hotfix for pre-SP1 MOSS to enable the crawling of sites with forms authentication:</p><br/><br/><p><a href="http://blogs.microsoft.co.il/blogs/adir_ron/archive/2007/10/11/moss-search-for-sso-form-based-authentication-sites.aspx" rel="nofollow">http://blogs.microsoft.co.il/blogs/adir_ron/archive/2007/10/11/moss-search-for-sso-form-based-authentication-sites.aspx</a></p><br/><br/><p>Hope that helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGN .NET ASSEMBL
    </pattern>
    <template>
<![CDATA[<p>If your only objective is to stop FxCop from yelling at you, then you have found the best practice.</p><br/><br/><p>The best practice for signing your assemblies is something that is completely dependent on your objectives and needs.  We would need more information like your intended deployment:</p><br/><br/><ul><br/><li>For personal use</li><br/><li>For use on corporate network PC's as a client application</li><br/><li>Running on a web server</li><br/><li>Running in SQL Server</li><br/><li>Downloaded over the internet</li><br/><li>Sold on a CD in shrink wrap</li><br/><li>Uploaded straight into a cybernetic brain</li><br/><li>Etc.</li><br/></ul><br/><br/><p>Generally you use code signing to verify that the Assemblies came from a specific trusted source and have not been modified.  <strong><em>So each with the same key is fine.</em></strong>  Now how that trust and identity is determined is another story.</p><br/><br/><p><strong>UPDATE:</strong>  How this benefits your end users when you are deploying over the web is if you have obtained a <a href="http://www.thawte.com/code-signing/index.html?click=main-nav-products-codesigning" rel="nofollow">software signing certificate from a certificate authority</a>.  Then when they download your assemblies they can verify they came from <em>Domenic's Software Emporium</em>, and they haven't been modified or corrupted along the way.  You will also want to sign the installer when it is downloaded.  This prevents the warning that some browsers display that it has been obtained from an unknown source.</p><br/><br/><p>Note, you will pay for a software signing certificate.  What you get is the certificate authority become the trusted 3rd party who verifies you are who you say you are.  This works because of a web of trust that traces its way back to a root certificate that is installed in their operating system.  There are a few certificate authorities to choose from, but you will want to make sure they are supported by the root certificates on the target operating system.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER SPECIF DATA IN .NET WINDOW SETUP APP AT SETUP DOWNLOAD TIME
    </pattern>
    <template>
<![CDATA[<p>The way the FogBugz screenshot setup tool does this is that it appends a 256 byte block at the end of the setup program at the moment it is downloaded.  In other words, the download script spits out all the bytes from setup.exe and then an extra 256 with the url for the FogBugz server, plus any padding.</p><br/><br/><p>Windows ignores these extra bytes when the .exe is run (provided you turned off the CRC check for your setup installer - we're using <a href="http://www.innosetup.com" rel="nofollow">InnoSetup</a>).</p><br/><br/><p>After installation, we run the Screenshot program with a command line switch that tells it where the setup installer is.  It looks at the end of the setup.exe and finds it's info, and then writes that to the registry so the user doesn't have to know it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG IS GOOD LOG FOR YOUR APP
    </pattern>
    <template>
<![CDATA[<p>The key thing for logging is good planning. I would suggest that you look into the enterprise library exception and logging application block (<a href="http://msdn.microsoft.com/en-us/library/cc467894.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/cc467894.aspx</a>). There is a wee bit of a learning curve but it does work quite well. The approach I favour at the moment is to define 4 priority levels. 4=Unhandled exception (error in event log), 3=Handled exception (warning in event log), 2=Access an external resource such as a webservice, db or mainframe system (information in event log), 1=Verbose/anything else of interest (information in event log).</p><br/><br/><p>Using the application block it's then quite easy to tweak what level of priority you want to log. So in development you'd log everything but as you get a stable system in production, you'd probably only be interested in unhandled exceptions and possibly handled exceptions.</p><br/><br/><p><strong>Update</strong>: For clarity, I would suggest you have logging in both your winform/wpf app and your webservices. In a web scenario, I've had problems in the past where it can be difficult to tie an error on the client back through to the app servers. Mainly because any error through webservices gets wrapped up as a SOAP exception. I can't remember off the top of my head, but I think if you use a custom exception handler (that is part of the enterprise library) you can add data onto exceptions such as the handlinginstance id of the exception from the app server. This makes it easier to tie up exceptions on a client back to your app box by using LogParser (<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=890cd06b-abf8-4c25-91b2-f8d975cf8c07&amp;displaylang=en" rel="nofollow">http://www.microsoft.com/downloads/details.aspx?FamilyID=890cd06b-abf8-4c25-91b2-f8d975cf8c07&amp;displaylang=en</a>). </p><br/><br/><p><strong>Second Update</strong>: I also like to give each different event a seperate event id and to track that in a text file or spreadsheet under source control. Yes, its a pain but if you're lucky enough to have an IT team looking after your systems in production, I find they tend to expect different events to have different event ids.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      P INVOK IN MONO
    </pattern>
    <template>
<![CDATA[<p>Working, usable and stable. It's well tested since quite a lot of mono's own low-level functionality has to be marshaled through it to the underlying operating system.</p><br/><br/><p>There are some <a href="http://www.mono-project.com/Interop_with_Native_Libraries" rel="nofollow">P/Invoke extensions</a> when compared to Microsoft .Net implementation (after all they deal with a single OS family and three architectures at most). Most notable of those would be that library mappings transform the library name to OS-specific variants (e.g. <code>mylib.dll</code> searches for <code>mylib.so</code> on Linux, <code>mylib.dylib</code> on OS X and so on) and take into account various other system specific conventions. There is also a <a href="http://www.mono-project.com/Config_DllMap" rel="nofollow">DLLMap</a> configuration extension which can be used if the default name translations are not enough. Usually it's convenient to have the same API of the binary lib exposed on different OSes, so that migrating between platforms only requires changes in the C code, not the .Net part.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAY COMPRESS SOUND FILE IN C # IN A PORTABL WAY
    </pattern>
    <template>
<![CDATA[<p>I finally revisited this topic, and, using help from <a href="http://stackoverflow.com/a/7152153/3205">BrokenGlass on writing WAVE header</a>, updated csvorbis. I've added an <a href="https://github.com/mono/csvorbis/blob/master/OggDecoder/OggDecodeStream.cs" rel="nofollow">OggDecodeStream</a> that can be passed to <code>System.Media.SoundPlayer</code> to simply play any (compatible) Ogg Vorbis stream. Example usage:</p><br/><br/><pre><code>using (var file = new FileStream(oggFilename, FileMode.Open, FileAccess.Read))<br/>{<br/>  var player = new SoundPlayer(new OggDecodeStream(file));<br/>  player.PlaySync();<br/>}<br/></code></pre><br/><br/><p>'Compatible' in this case means 'it worked when I tried it out'. The decoder is fully managed, works fine on Microsoft .Net - at the moment, there seems to be a regression in Mono's <code>SoundPlayer</code> that causes distortion.</p><br/><br/><p>Outdated:</p><br/><br/><p><s> <code>System.Diagnostics.Process.Start("fullPath.mp3");</code></p><br/><br/><p>I am surprised but the <a href="http://stackoverflow.com/questions/35896/how-can-i-play-compressed-sound-files-in-c-in-a-portable-way#35987">method Dinah mentioned</a> actually works. However, I was thinking about playing short "jingle" sounds on various events occurring in the program, I don't want to launch user's media player each time I need to do a 'ping!' sound.</p><br/><br/><p>As for the code project link - this is unfortunately only a P/Invoke wrapper.</s></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET HOW DO I LAUNCH A FILE WITH COMMAND LINE ARGUMENT ( WITHOUT KNOW THE LOCAT OF THE EXE )
    </pattern>
    <template>
<![CDATA[<p>Using my code from <a href="http://stackoverflow.com/questions/24954/windows-list-and-launch-applications-associated-with-an-extension#24974" rel="nofollow">this</a> answer you can get command associated with xls extension. Then you can pass this command to Process.Start method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET EXCEPT NOT CAUGHT BY TRY CATCH BLOCK
    </pattern>
    <template>
<![CDATA[<p>I believe I understand the problem. The exception is being caught, the issue is confusion over the debugger's behavior and differences in the debugger settings among each person trying to repro it.</p><br/><br/><p>In the 3rd case from your repro I believe you are getting the following message: "NoViableAltException was unhandled by user code" and a callstack that looks like this:</p><br/><br/><pre><br/>         [External Code]	<br/>    >   TestAntlr-3.1.exe!TimeDefLexer.mTokens() Line 852 + 0xe bytes	C#<br/>        [External Code]	<br/>        TestAntlr-3.1.exe!TimeDefParser.prog() Line 141 + 0x14 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.ParseTest(string Text = "foobar;") Line 49 + 0x9 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.Main(string[] args = {string[0x00000000]}) Line 30 + 0xb bytes	C#<br/>        [External Code]	<br/></pre><br/><br/><p>If you right click in the callstack window and run turn on show external code you see this:</p><br/><br/><pre><br/>        Antlr3.Runtime.dll!Antlr.Runtime.DFA.NoViableAlt(int s = 0x00000000, Antlr.Runtime.IIntStream input = {Antlr.Runtime.ANTLRStringStream}) + 0x80 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.DFA.Predict(Antlr.Runtime.IIntStream input = {Antlr.Runtime.ANTLRStringStream}) + 0x21e bytes	<br/>    >   TestAntlr-3.1.exe!TimeDefLexer.mTokens() Line 852 + 0xe bytes	C#<br/>        Antlr3.Runtime.dll!Antlr.Runtime.Lexer.NextToken() + 0xc4 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.CommonTokenStream.FillBuffer() + 0x147 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.CommonTokenStream.LT(int k = 0x00000001) + 0x2d bytes	<br/>        TestAntlr-3.1.exe!TimeDefParser.prog() Line 141 + 0x14 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.ParseTest(string Text = "foobar;") Line 49 + 0x9 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.Main(string[] args = {string[0x00000000]}) Line 30 + 0xb bytes	C#<br/>        [Native to Managed Transition]	<br/>        [Managed to Native Transition]	<br/>        mscorlib.dll!System.AppDomain.ExecuteAssembly(string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args) + 0x39 bytes	<br/>        Microsoft.VisualStudio.HostingProcess.Utilities.dll!Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly() + 0x2b bytes	<br/>        mscorlib.dll!System.Threading.ThreadHelper.ThreadStart_Context(object state) + 0x3b bytes	<br/>        mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) + 0x81 bytes	<br/>        mscorlib.dll!System.Threading.ThreadHelper.ThreadStart() + 0x40 bytes<br/></pre><br/><br/><p>The debugger's message is telling you that an exception originating outside your code (from NoViableAlt) is going through code you own in TestAntlr-3.1.exe!TimeDefLexer.mTokens() without being handled.  </p><br/><br/><p>The wording is confusing, but it does not mean the exception is uncaught. The debugger is letting you know that code you own mTokens()" needs to be robust against this exception being thrown through it.</p><br/><br/><p>Things to play with to see how this looks for those who didn't repro the problem:</p><br/><br/><ul><br/><li>Go to Tools/Options/Debugging and<br/>turn off "Enable Just My code<br/>(Managed only)". or option.</li><br/><li>Go to Debugger/Exceptions and turn off "User-unhandled" for<br/>Common-Language Runtime Exceptions.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHOULD ONE DATASET REPRES
    </pattern>
    <template>
<![CDATA[<p>This is why I don't use datasets. If you use strongly-typed datasets you benefit from the strong typing but you pay for it in terms of the time it takes to create one even if you're just using part of it and its extensibility in terms of the code base. If you want to modify an existing one and you modify a row definition then this will create "shotgun" breaks in the code base as each definition for adding a new row will have to be modified as it wont compile anymore.</p><br/><br/><p>To avoid the above scenario the most sensible approach is to generally give up on sensible re-use. Define a dataset per purpose and per use. However the main issue with this is API use, you end up with dataset that is simliar to another dataset but because it is a different dataset type you have to transform it to use the common API which is both painful and inelegant.</p><br/><br/><p>This, plus the fact that strongly typed datasets make your code look horrid (the length of the type declarations) are pretty much the reasons i've given up on datasets and switched to business objects instead. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTPUTIL FOR .NET 3.5 SP1 CLIENT FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I'd strongly not recommend rolling your own encoding. I'd use the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=EFB9C819-53FF-4F82-BFAF-E11625130C25&amp;displaylang=en" rel="nofollow">Microsoft Anti-Cross Site Scripting Library</a> which is very small (v1.5 is ~30kb) if HttpUtility.HtmlEncode isn't available.</p><br/><br/><p>As for decoding, maybe you could use the decoding routine from <a href="http://www.koders.com/csharp/fid1A50096D8FA38302680B0EEDAC5B1CE1AEA855D0.aspx?s=%22Lawrence+Pit%22" rel="nofollow">Mono</a>? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE USER TWEAK CONFIGUR IN APP.CONFIG
    </pattern>
    <template>
<![CDATA[<p>If you use the Settings for the project, you can mark each setting as either application or user.</p><br/><br/><p>If they're set as user, they will be stored per-user and when you call the Save method it will be updated in the config for that user.</p><br/><br/><p>Code project has a really detailed article on saving all types of settings: <a href="http://www.codeproject.com/KB/dotnet/user_settings.aspx" rel="nofollow">http://www.codeproject.com/KB/dotnet/user_settings.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET WPF DEPENDENCYPROPERTI HAVE TO BE STATIC MEMBER OF THE CLASS
    </pattern>
    <template>
<![CDATA[<p>I see 2 reasons behind that requirement:</p><br/><br/><ol><br/><li>You can't register same DP twice. To comply with this constraint you should use static variable, it will be initialized only one time thus you will register DP one time only.</li><br/><li>DP should be registered before any class (which uses that DB) instance created</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER A PNG IMAG ( AS A MEMORI STREAM ) ONTO A .NET REPORTVIEW REPORT SURFAC
    </pattern>
    <template>
<![CDATA[<p>I am doing something similar in order to have a changing logo on reports however I utilise report parameters to pass the value.  I don't see any reason why this general method wouldn't work if the images were part of the data.</p><br/><br/><p>Essentially the images are passed over two fields.  The first field is the MIME Type value and the second field is a Base64 encoded string containing the image content.</p><br/><br/><p><b>Step 1: Convert your image to Base64 encoding.  (Our code always passes <code>ImageFormat.Png</code> to this method to make the MIME Type easy)</b></p><br/><br/><pre><code>private static string ConvertImageToBase64(Image image, ImageFormat format)<br/>{<br/>    byte[] imageArray;<br/><br/>    using (System.IO.MemoryStream imageStream = new System.IO.MemoryStream())<br/>    {<br/>        image.Save(imageStream, format);<br/>        imageArray = new byte[imageStream.Length];<br/>        imageStream.Seek(0, System.IO.SeekOrigin.Begin);<br/>        imageStream.Read(imageArray, 0, imageStream.Length);<br/>    }<br/><br/>    return Convert.ToBase64String(imageArray);<br/>}<br/></code></pre><br/><br/><p><b>Step 2: Pass the image and MIME Type to the report.</b></p><br/><br/><pre><code>reportParams[0] = new ReportParameter("ReportLogo", base64Logo);<br/>reportParams[1] = new ReportParameter("ReportLogoMimeType", "image/png");<br/><br/>_reportViewer.LocalReport.SetParameters(reportParams);<br/></code></pre><br/><br/><p><b>Step 3: In the report set the following properties on the image (without the quotes):</b></p><br/><br/><ul><br/><li>MIMEType: &quot;=Parameters!ReportLogoMimeType.Value&quot;</li><br/><li>Value: &quot;=System.Convert.FromBase64String(Parameters!ReportLogo.Value)&quot;</li><br/></ul><br/><br/><p><b>Trap for young players:</b><br/>Often the images will look horrible and like they've been scaled even though you're passing in an image which seems to be the "right size".  This is because the reports are rendered for print (300 dpi) and not the screen (usually 72 or 92 dpi).  The fix is to send in an image about 3 times too big, set it's correct size in the report and change the "<code>Sizing</code>" property on the image to "<code>FitProportional</code>".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YACC BISON TYPE LALR PARSER GENER FOR .NET
    </pattern>
    <template>
<![CDATA[<p><a href="http://antlr.org/" rel="nofollow">Antlr</a> supports C# code generation, though it is LL(k) not technically LALR.  Its tree rewriting rules are an interesting feature though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUAL FUNCTION IN CONSTRUCTOR WHI DO LANGUAG DIFFER
    </pattern>
    <template>
<![CDATA[<p>There's a fundamental difference in how the languages define an object's life time. In Java and .Net the object members are zero/null initialized before any constructor is run and is at this point that the object life time begins. So when you enter the constructor you've already got an initialized object.</p><br/><br/><p>In C++ the object life time only begins when the constructor finishes (although member variables and base classes are fully constructed before it starts). This explains the behaviour when virtual functions are called and also why the destructor isn't run if there's an exception in the constructor's body.</p><br/><br/><p>The problem with the Java/.Net definition of object lifetime is that it's harder to make sure the object always meets its invariant without having to put in special cases for when the object is initialized but the constructor hasn't run. The problem with the C++ definition is that you have this odd period where the object is in limbo and not fully constructed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO RETURN VALU FROM CUSTOM DIALOG IN WINDOW FORM
    </pattern>
    <template>
<![CDATA[<p>I would say exposing properties on your custom dialog is the idiomatic way to go because that is how standard dialogs (like the Select/OpenFileDialog) do it. Someone could argue it is more explicit and intention revealing to have a ShowBirthdayDialog() method that returns the result you're looking for, but following the framework's pattern is probably the wise way to go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPEND CONTROL POSIT
    </pattern>
    <template>
<![CDATA[<p>It's strange to need to layout one control within another.  You might be solving an upstream problem wrong.  Are you able to split the label into two labels with the updown between and maybe rely on a Windows Forms TableLayout panel? </p><br/><br/><p>If it's essential to try to position based on font sizes, you could use <a href="http://msdn.microsoft.com/en-us/library/6xe5hazb.aspx" rel="nofollow">Graphics.MeasureString</a>("String before updown", myLabel.Font)</p><br/><br/><p>If what you're after is font-dependent control positioning, you should probably retitle the question.</p><br/><br/><p><hr><br/>[edit] You can handle the click event of the "second half" part of the label and change the checkbox state on that event.  The whole thing seems like a hack though.  What is the problem being solved by this weird control layout?  Why do you need an up-down in the middle of a label?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN THE FOCU TO THE LAST USE CONTROL AFTER CLICK A BUTTON IN A WINFORM APP
    </pattern>
    <template>
<![CDATA[<p>For a bit of 'simplicity' maybe try.</p><br/><br/><pre><code>public Form1()<br/>    {<br/>        InitializeComponent();<br/><br/>        foreach (Control ctrl in Controls)<br/>        {<br/>            if (ctrl is TextBox)<br/>            {<br/>                ctrl.Enter += delegate(object sender, EventArgs e)<br/>                              {<br/>                                  _lastEnteredControl = (Control)sender;<br/>                              };<br/>            }<br/>        }<br/>    }<br/></code></pre><br/><br/><p>then you don't have to worry about decorating each textbox manually (or forgetting about one too).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNTAX FOR AN INNER JOIN IN LINQ TO SQL
    </pattern>
    <template>
<![CDATA[<p>It goes something like:</p><br/><br/><pre><code>from t1 in db.Table1<br/>join t2 in db.Table2 on t1.field equals t2.field<br/>select new { t1.field2, t2.field3}<br/></code></pre><br/><br/><p>It would be nice to have sensible names and fields for your tables for a better example. :)</p><br/><br/><p><strong>Update</strong></p><br/><br/><p>I think for your query this might be more appropriate:</p><br/><br/><pre><code>var dealercontacts = from contact in DealerContact<br/>                     join dealer in Dealer on contact.DealerId equals dealer.ID<br/>                     select contact;<br/></code></pre><br/><br/><p>Since you are looking for the contacts, not the dealers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # MOCK FRAMEWORK TO USE
    </pattern>
    <template>
<![CDATA[<p>I've not used most of the ones you've listed, so I can't be objective about it, but I use <a href="http://code.google.com/p/moq/" rel="nofollow">Moq</a> and it has been awesome. The fluent interface makes it a joy to work with. For example:</p><br/><br/><pre><code>mockService.Expect(s =&gt; s.GetCustomers()).Returns(new List&lt;Customer&gt;());<br/></code></pre><br/><br/><p>@Ngu Soon Hui, I wasn't aware that the other frameworks don't have compile-time checking. Moq certainly does. In my example above, if the service class that mockService is mocking doesn't have a GetCustomers() method, I would get a compile-time error. I'd also get one if the GetCustomers() method didn't return a List&lt;Customer&gt; or an interface like IList&lt;Customer&gt;.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT CACH IN LINQ TO SQL
    </pattern>
    <template>
<![CDATA[<p>A quick answer: Use the Repository pattern (see Domain Driven Design by Evans) to fetch your entities. Each repository will cache the things it will hold, ideally by letting each instance of the repository access a singleton cache (each thread/request will instantiate a new repository but there can be only one cache).</p><br/><br/><p>The above answer works on one machine only. To be able to use this on many machines, use <a href="http://memcached.org/" rel="nofollow">memcached</a> as your caching solution. Good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTERPRET PERFMON ANALYSI INTO APPLIC SPECIF OBSERVATIONS DATA
    </pattern>
    <template>
<![CDATA[<p>I use the Performance Analysis of Logs (PAL) tool: <a href="http://www.codeplex.com/PAL" rel="nofollow">http://www.codeplex.com/PAL</a></p><br/><br/><p>It's not an "official" Microsoft tool, but I believe the author works for Microsoft. The project seems to be fairly active.</p><br/><br/><p>In addition to the canned threshold files provided (which are pretty good), you can write your own thresholds to analyze what your app needs. The generation of the HTML report with charts is also very nice.</p><br/><br/><p>Uses the MS LogParser took and MS Office Web Components. .NET 2.0 is required for the (optional) GUI.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE INSTAL ASP.NET VERSION OF HOST FROM A WEB PAGE
    </pattern>
    <template>
<![CDATA[<p>Thanks!</p><br/><br/><p>I just dropped &lt;%=Environment.Version%> on a page and got 2.0.50727.3053</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUEUE ALTERN TO MSMQ ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>I can't begin to say enough good things about Tibco EMS - an implementation of the Java JMS messaging spec. Tibco EMS has superb support for .NET clients - including Compact Framework .NET on WinCE. (They also have C client libraries too.)</p><br/><br/><p>So if you're building a heterogeneous distributed application involving messaging code running on Windows, Unix (AIX/Solaris), Linux, or Mac OS X, then Tibco EMS is the ticket.</p><br/><br/><p>Check out my article here:</p><br/><br/><p><a href="http://www.javalobby.org/articles/distributed-jms/" rel="nofollow">Using JMS For Distributed Software Development</a></p><br/><br/><p>I used to work at Microsoft and did some implementation with MSMQ while there. But you know, Microsoft just concerns itself with Windows. They depended on 3rd parties to provide MSMQ clients to other platforms. My encounter with Tibco EMS was a much better experience. It was very evident that Tibco understood messaging much more so than Microsoft. And Tibco put the effort into supporting diverse client bindings themselves. That is why they eventually changed the product name from Tibco JMS to Tibco EMS (Enterprise Messaging Service).</p><br/><br/><p>And I did build heterogeneous software systems around Tibco EMS. Rolled C# .NET Winform clients interacting with Java/JBoss middle-tier via Tibco EMS messaging. (And also have WinCE industrial embedded computers that use the Compact Framework .NET Tibco client.)</p><br/><br/><p><a href="http://vossnet.org/jms-links.html" rel="nofollow">Links To My JMS Writings</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TREENODECOLLECT NOT IMPLEN IENUMER TREENOD
    </pattern>
    <template>
<![CDATA[<p>Yes, there are many .NET Framework collection, that does not implement generic IEnumerable. </p><br/><br/><p>I think that's because after 2.0 there was no (at least not so match) development of the core part of FW.</p><br/><br/><p>Meanwhile I suggest you to make use of following workaround:</p><br/><br/><pre><code>using System.Link; <br/>... <br/>var nodes = GetTreeNodeCollection().OfType&lt;TreeNode&gt;();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREVENT THE II DEFAULT SITE WEB.CONFIG FILE BE INHERIT BY VIRTUAL DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>I've found the answer.  Wrap the HttpModule section in location tags and set the inheritInChildApplications attribute to false.</p><br/><br/><pre><code>&lt;location path="." inheritInChildApplications="false"&gt;<br/>  &lt;system.web&gt;<br/>    &lt;httpModules&gt;<br/>      &lt;add type="MDL.BexWebControls.Charts.ChartStreamHandler,Charts" name="ChartStreamHandler"/&gt;<br/>    &lt;/httpModules&gt;<br/>  &lt;/system.web&gt;<br/>&lt;/location&gt;<br/></code></pre><br/><br/><p>Now any virtual directories will not inherit the settings in this location section.</p><br/><br/><p>@GateKiller This isn't another website, its a virtual directory so inheritance does occur.</p><br/><br/><p>@petrich I've had hit and miss results using <code>&lt;remove /&gt;</code>.  I have to remember to add it to every virtual directory which is a pain.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINQ LIST ON PROPERTI VALU
    </pattern>
    <template>
<![CDATA[<pre><code>var result = from o in objList where intList.Contains(o.ID) select o<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROAM SET WITH LOCALFILESETTINGSPROVID
    </pattern>
    <template>
<![CDATA[<p>You pretty much have to implement your own.  <a href="http://www.codeproject.com/KB/vb/CustomSettingsProvider.aspx" rel="nofollow">This is a good starting point, however.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING CONCATEN AND STRING INTERN
    </pattern>
    <template>
<![CDATA[<p>If you create new strings, they will not automatically be put into the intern pool, unless you concatenate constants compile-time, in which case the compiler will create one string result and intern that as part of the JIT process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAME TABL NAME IN DIFFER SCHEMA
    </pattern>
    <template>
<![CDATA[<p>This looks like an issue with name resolution, try creating a public synonym on the table:</p><br/><br/><p>CREATE PUBLIC SYNONYM <em>MyTempTable</em> for <em>MyTempTable</em>;</p><br/><br/><p>Also, what exactly do you mean by <strong>wrong result</strong>, incorrect data, error message?</p><br/><br/><p><hr /></p><br/><br/><p>Edit: What is the name of the schema that the required table belongs to? It sounds like the table that you are trying to select from is in a different schema to the one that belongs to the user you are connecting as.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPROV MY SUPPORT OF NOVEL NETWORK WHEN I DO N T HAVE A NOVEL NETWORK
    </pattern>
    <template>
<![CDATA[<p>There is a <a href="https://secure-www.novell.com/center/regadmin/jsps/eval_app.jsp?buildid=GsODlkBPM2g~" rel="nofollow">60 day evaluation trial of Open Enterprise Server 2</a> available (requires free registration). If you install it in a VM, there's nothing stopping you from reinstalling it after 60 days (well except licence).</p><br/><br/><p>But you will need someone good with Linux to handle this (and preferably good with this precise technology). In a MS shop this might be a problem.</p><br/><br/><p>The easiest solution would be to outsource this - have some external techs test your software for compatibility. If you find out you are paying too much - hire someone who knows this software stack.</p><br/><br/><p>You can't support something if you don't test against it. And you can't test against something you don't know.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DISK DIRECTLI WITH .NET
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/aa363858.aspx" rel="nofollow">CreateFile</a> has support for direct disk access. Read the notes under "Physical Disks and Volumes". You should be able to P/Invoke the call.</p><br/><br/><p>Note that Vista and Server 2008 have <a href="http://support.microsoft.com/kb/942448" rel="nofollow">severely restricted</a> this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RONRUBI PERFORM
    </pattern>
    <template>
<![CDATA[<p>According to this article <a href="http://www.iunknown.com/2008/05/ironruby-and-rails.html" rel="nofollow">http://www.iunknown.com/2008/05/ironruby-and-rails.html</a>. In may performance was nowhere near where they expected it to be. I heard in <a href="http://altnetpodcast.com/episodes/9-state-of-ironruby" rel="nofollow">http://altnetpodcast.com/episodes/9-state-of-ironruby</a> (3 days ago) that they're still working on performance. I guess they put compatability first and are now trying to get the performance up to par with other ruby implementations out there.</p><br/><br/><p>As far as I understand they're not nearly as performant as Iron Python that is developed by the same team. I don't know if this is because Iron Ruby is using the DLR a lot more and that still needs to be optimized or if they need to optimize the Iron Ruby implementation itself more. But I guess it is good news because they can get it a lot faster. So if you're already happy with performance you'll get a lot happier.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ICC COLOR PROFIL TO AN IMAG IN C # ( DOTNET )
    </pattern>
    <template>
<![CDATA[<p>There are a number of solutions.  </p><br/><br/><p>1) For GDI+, <a href="http://support.microsoft.com/kb/317825/en-us" rel="nofollow">check out this article at MSDN.<br /><br/>2) For WPF (.NET 3.0), see the System.Windows.Media</a> namespace. There are a number of different classes, such as the <a href="http://msdn.microsoft.com/en-us/library/system.windows.media.imaging.bitmapencoder.aspx" rel="nofollow">BitmapEncoder</a>, that have the concept of a <a href="http://msdn.microsoft.com/en-us/library/system.windows.media.colorcontext.aspx" rel="nofollow">ColorContext</a>, which "Represents the International Color Consortium (ICC) or Image Color Management (ICM) color profile that is associated with a bitmap image."   </p><br/><br/><p>Both of these seem pretty complex, so there's always the option of buying somebody else's code.  Atalasoft's <a href="http://www.atalasoft.com/products/dotimage/photopro/default.aspx" rel="nofollow">DotImage Photo Pro</a> has ICC profile setting capabilities built in.  The code is expensive; a dev license is almost 2k.  But based on their participation in the dotnet community, I'd give them a whirl.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOMMEND AN ALTERN FOR NCOVER
    </pattern>
    <template>
<![CDATA[<p>You can use <a href="http://sourceforge.net/project/showfiles.php?group_id=175733" rel="nofollow">PartCover</a> (free) </p><br/><br/><blockquote><br/>  <p>This is analog for NCover application,<br/>  but have some advantages. It specifies<br/>  which assemblies and classes you want<br/>  to report and can work not only<br/>  assemblies that have debug symbols.</p><br/></blockquote><br/><br/><p>UPDATE: <a href="https://github.com/sawilde/partcover.net4" rel="nofollow">PartCover</a> is now only supported on it's GitHub fork</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM JAVA TO C #
    </pattern>
    <template>
<![CDATA[<p>Check these:</p><br/><br/><ul><br/><li>Dare Obasanjo's article "<a href="http://www.25hoursaday.com/weblog/2007/04/30/CFromAJavaDevelopersPerspectiveV20.aspx" rel="nofollow">C# from a Java Developer's Perspective</a>". It's very detailed and I'm sure it will help you a lot.</li><br/><li>Charles Petzold's <a href="http://www.charlespetzold.com/dotnet/" rel="nofollow">.NET Book Zero</a> (What the C or C++ Programmer Needs to<br/>Know About C# and the .NET Framework)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLIENT.DOWNLOADFILEASYNC FAIL TO RAIS EXCEPT
    </pattern>
    <template>
<![CDATA[<p>This issue was resolved after reviewing MSDN and the source code involved. Previously the application was only implementing the <a href="http://msdn.microsoft.com/en-us/library/system.net.downloadprogresschangedeventhandler.aspx" rel="nofollow">DownloadProgressChangedEventHandler</a> to track how much of a download remained. This turned out to be the root cause of the issue as <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.asynccompletedeventhandler.aspx" rel="nofollow">AsyncCompletedEventHandler</a> is what is invoked when an exception occurs and not implementing this event handler leaves you with no notification of errors.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF A FILE EXIST IN C # .NET
    </pattern>
    <template>
<![CDATA[<p>Use:</p><br/><br/><pre><code>File.Exists(path)<br/></code></pre><br/><br/><p>MSDN: <a href="http://msdn.microsoft.com/en-us/library/system.io.file.exists.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.io.file.exists.aspx</a></p><br/><br/><p>Edit: In System.IO</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STOP .NET EAT ID
    </pattern>
    <template>
<![CDATA[<p>The short answer is no, with webforms the id can always be rewritten depending on the nesting of the element.  You can get access to the id through the ClientID property, so you could set the ids into variables in a script at the end of the page/control then put them into jQuery.  </p><br/><br/><p>something like this:</p><br/><br/><pre><code>&lt;asp:button id="ImAButton" runat="server"&gt;Click Me&lt;/asp:button&gt;<br/><br/>&lt;script type="text/javascript"&gt;<br/>var buttonId = "&lt;%=ImAButton.ClientId%&gt;";<br/>$("#"+buttonId).bind('click', function() { alert('hi); });<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>It's a hack I know, but it will work.<br/>(I should note for the un-initiated, I'm using the Prototype $ get by id method there)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUNIT HOW TO TEST ALL CLASS THAT IMPLEMENT A PARTICULAR INTERFAC
    </pattern>
    <template>
<![CDATA[<p>If you have classes implement any one interface then they all need to implement the methods in that interface. In order to test these classes you need to create a unit test class for each of the classes.</p><br/><br/><p>Lets go with a smarter route instead; if your goal is to <strong>avoid code and test code duplication</strong> you might want to create an abstract class instead that handles the recurring code. </p><br/><br/><p>E.g. you have the following interface:</p><br/><br/><pre><code>public interface IFoo {<br/><br/>    public void CommonCode();<br/><br/>    public void SpecificCode();<br/><br/>}<br/></code></pre><br/><br/><p>You might want to create an abstract class:</p><br/><br/><pre><code>public abstract class AbstractFoo : IFoo {<br/><br/>    public void CommonCode() {<br/>          SpecificCode();<br/>    }<br/><br/>    public abstract void SpecificCode();<br/><br/>}<br/></code></pre><br/><br/><p>Testing that is easy; implement the abstract class in the test class either as an inner class:</p><br/><br/><pre><code>[TextFixture]<br/>public void TestClass {<br/><br/>    private class TestFoo : AbstractFoo {<br/>        boolean hasCalledSpecificCode = false;<br/>        public void SpecificCode() {<br/>            hasCalledSpecificCode = true;<br/>        }<br/>    }<br/><br/>    [Test]<br/>    public void testCommonCallsSpecificCode() {<br/>        TestFoo fooFighter = new TestFoo();<br/>        fooFighter.CommonCode();<br/>        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());<br/>    }<br/>}<br/></code></pre><br/><br/><p>...or let the test class extend the abstract class itself if that fits your fancy.</p><br/><br/><pre><code>[TestFixture]<br/>public void TestClass : AbstractFoo {<br/><br/>    boolean hasCalledSpecificCode;<br/>    public void specificCode() {<br/>        hasCalledSpecificCode = true;<br/>    }<br/><br/>    [Test]<br/>    public void testCommonCallsSpecificCode() {<br/>        AbstractFoo fooFighter = this;<br/>        hasCalledSpecificCode = false;<br/>        fooFighter.CommonCode();<br/>        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());<br/>    }        <br/><br/>}<br/></code></pre><br/><br/><p>Having an abstract class take care of common code that an interface implies gives a much cleaner code design. </p><br/><br/><p>I hope this makes sense to you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCK CACH IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Here's the basic pattern:</p><br/><br/><ul><br/><li>Check the cache for the value, return if its available</li><br/><li>If the value is not in the cache, then implement a lock</li><br/><li>Inside the lock, check the cache again, you might have been blocked</li><br/><li>Perform the value look up and cache it</li><br/><li>Release the lock</li><br/></ul><br/><br/><p>In code, it looks like this:</p><br/><br/><pre><code>private static object ThisLock = new object();<br/><br/>public string GetFoo()<br/>{<br/><br/>  // try to pull from cache here<br/><br/>  lock (ThisLock)<br/>  {<br/>    // cache was empty before we got the lock, check again inside the lock<br/><br/>    // cache is still empty, so retreive the value here<br/><br/>    // store the value in the cache here<br/>  }<br/><br/>  // return the cached value here<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTROL CHECKBOX IN A .NET FORMS.TREEVIEW
    </pattern>
    <template>
<![CDATA[<p>The default behavior of TreeView is that when the <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.treeview.checkboxes%28VS.80%29.aspx" rel="nofollow">Checkboxes</a> property is set to true, that checkboxes will be shown for all TreeNodes.</p><br/><br/><p>The behavior that you are looking for - to disable or hide some checkboxes - is a custom modification of the normal behavior. You can create a custom implementation of TreeView or TreeNode that overrides the default behavior. One other thing to try would be to use the TreeView.<a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.treeview.stateimagelist%28VS.80%29.aspx" rel="nofollow">StateImageList</a> property. Some sites to check out for more info:</p><br/><br/><ul><br/><li>See <a href="http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=3727125&amp;SiteID=1" rel="nofollow">this post</a> to the MSDN forums that goes through an implementation similar to what you are attempting. </li><br/><li>CodeProject: <a href="http://www.codeproject.com/KB/tree/TriStateTreeViewSubmissio.aspx" rel="nofollow">Tri-State TreeView</a></li><br/><li>CodeProject: <a href="http://www.codeproject.com/KB/tree/customstatetreeview.aspx?msg=1519062" rel="nofollow">How to handle custom node state images in a TreeView (e.g. tristate checkboxes)</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OTHER IDE OTHER THAN VISUAL STUDIO FOR CODE IN .NET
    </pattern>
    <template>
<![CDATA[<p>Yes - you can try using SharpDevelop:</p><br/><br/><p><a href="http://www.icsharpcode.net/OpenSource/SD/" rel="nofollow">http://www.icsharpcode.net/OpenSource/SD/</a></p><br/><br/><p>Or you can just use notepad, or notepad++</p><br/><br/><p><a href="http://notepad-plus.sourceforge.net/" rel="nofollow">http://notepad-plus.sourceforge.net/</a></p><br/><br/><p>Then compile on the command line.</p><br/><br/><p><strong>Edit</strong>: If you're looking for a free solution - try Visual Studio C# Express Edition:</p><br/><br/><p><a href="http://www.microsoft.com/express/vcsharp/" rel="nofollow">http://www.microsoft.com/express/vcsharp/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCAN API
    </pattern>
    <template>
<![CDATA[<p>In my company we use <a href="http://www.pegasusimaging.com" rel="nofollow">Pegasus</a>. It's great.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENTITI FRAMEWORK CLASS
    </pattern>
    <template>
<![CDATA[<p>Actualy they are already partials. See <a href="http://msdn.microsoft.com/en-us/library/bb738612.aspx" rel="nofollow">MSDN</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      F # ACTUAL SAVE TIME AND MONEY
    </pattern>
    <template>
<![CDATA[<p>The most well know uses of F# are in finance right now. But it will prove its worth in any application where you need to be able to express complicated math or algorithms easilly. 3d rendering or simulation would be suitable too. You can express concepts like sets or tuples very elegantly in F#.</p><br/><br/><p>The argument that anything that can be done in F# can be done in C# is of course true but completely useless. Anything that you can do in C# can be done in machine language. But there are more compelling reasons for higher level languages than the posibilities of the language alone.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEST .NET EQUIVAL OF A VB6 CONTROL ARRAY
    </pattern>
    <template>
<![CDATA[<p>Make a generic list of textboxes:</p><br/><br/><pre><code>List&lt;TextBox&gt; textBoxes = new List&lt;TextBox&gt;();<br/>// Create 10 textboxes in the collection<br/>for (int i = 0; i &lt; 10; i++)<br/>{<br/>    TextBox textBox = new TextBox();<br/>    textBox.Text = "Textbox " + i;<br/>    textBoxes.Add(textBox);<br/>}<br/>// Loop through and set new values on textboxes i collection<br/>for (int i = 0; i &lt; textBoxes.Count; i++)<br/>{<br/>    textBoxes[i].Text = "New value " + i;<br/>    // or like this<br/>    TextBox textBox = textBoxes[i];<br/>    textBox.Text = "New val " + i;<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BASE PAGE IN WPF
    </pattern>
    <template>
<![CDATA[<p>Here's how I've done this in my current project.</p><br/><br/><p>First I've defined a class (as @Daren Thomas said - just a plain old C# class, no associated XAML file), like this (and yes, this is a real class - best not to ask):</p><br/><br/><pre><code>public class PigFinderPage : Page<br/>{<br/>    /* add custom events and properties here */<br/>}<br/></code></pre><br/><br/><p>Then I create a new Page and change its XAML declaration to this:</p><br/><br/><pre><code>&lt;my:PigFinderPage x:Class="Qaf.PigFM.WindowsClient.PenSearchPage"<br/>    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"<br/>    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"<br/>    xmlns:my="clr-namespace:Qaf.PigFM.WindowsClient"<br/>    /&gt;<br/></code></pre><br/><br/><p>So I declare it as a PigFinderPage in the "my" namespace. Any page-wide resources you need have to be declared using a similar syntax:</p><br/><br/><pre><code>&lt;my:PigFinderPage.Resources&gt;<br/>    &lt;!-- your resources go here --&gt;<br/>&lt;/my:PigFinderPage.Resources&gt;<br/></code></pre><br/><br/><p>Lastly, switch to the code-behind for this new page, and change its class declaration so that it derives from your custom class rather than directly from Page, like this:</p><br/><br/><pre><code>public partial class EarmarkSearchPage : PigFinderPage<br/></code></pre><br/><br/><p>Remember to keep it as a partial class.</p><br/><br/><p>That's working a treat for me - I can define a bunch of custom properties and events back in "PigFinderPage" and use them in all the descendants.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT LINQ TO SQL CLASS AFTER DATABAS SCHEMA CHANG
    </pattern>
    <template>
<![CDATA[<p>You can use SQLMetal.exe to generate your dbml and or cs/vb file. Use a pre-build script to start it and target the directory where your datacontext project belongs.  </p><br/><br/><pre><code>C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin\x64\sqlmetal.exe <br/>  /server:&lt;SERVER&gt; <br/>  /database:&lt;database&gt; <br/>  /code:"path\Solution\DataContextProject\dbContext.cs" <br/>  /language:csharp <br/>  /namespace:&lt;your namespace&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS PROGRAMAT IN SQL SERVER
    </pattern>
    <template>
<![CDATA[<p><a href="http://support.microsoft.com/kb/307283" rel="nofollow">KB307283</a> explains how to create a database using ADO.NET.</p><br/><br/><p>From the article:</p><br/><br/><pre><code>String str;<br/>SqlConnection myConn = new SqlConnection ("Server=localhost;Integrated security=SSPI;database=master");<br/><br/>str = "CREATE DATABASE MyDatabase ON PRIMARY " +<br/>    "(NAME = MyDatabase_Data, " +<br/>    "FILENAME = 'C:\\MyDatabaseData.mdf', " +<br/>    "SIZE = 2MB, MAXSIZE = 10MB, FILEGROWTH = 10%) " +<br/>    "LOG ON (NAME = MyDatabase_Log, " +<br/>    "FILENAME = 'C:\\MyDatabaseLog.ldf', " +<br/>    "SIZE = 1MB, " +<br/>    "MAXSIZE = 5MB, " +<br/>    "FILEGROWTH = 10%)";<br/><br/>SqlCommand myCommand = new SqlCommand(str, myConn);<br/>try <br/>{<br/>    myConn.Open();<br/>    myCommand.ExecuteNonQuery();<br/>    MessageBox.Show("DataBase is Created Successfully", "MyProgram", MessageBoxButtons.OK, MessageBoxIcon.Information);<br/>}<br/>catch (System.Exception ex)<br/>{<br/>    MessageBox.Show(ex.ToString(), "MyProgram", MessageBoxButtons.OK, MessageBoxIcon.Information);<br/>}<br/>finally<br/>{<br/>    if (myConn.State == ConnectionState.Open)<br/>    {<br/>        myConn.Close();<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>WCF uses SoapFaults as its native way of transmitting exceptions from either the service to the client, or the client to the service.</p><br/><br/><p>You can declare a custom SOAP fault using the FaultContract attribute in your contract interface:</p><br/><br/><p>For example:</p><br/><br/><pre><code>[ServiceContract(Namespace="foobar")]<br/>interface IContract<br/>{<br/>    [OperationContract]<br/>    [FaultContract(typeof(CustomFault))]<br/>    void DoSomething();<br/>}<br/><br/><br/>[DataContract(Namespace="Foobar")]<br/>class CustomFault<br/>{<br/>    [DataMember]<br/>    public string error;<br/><br/>    public CustomFault(string err)<br/>    {<br/>        error = err;<br/>    }<br/>}<br/><br/>class myService : IContract<br/>{<br/>    public void DoSomething()<br/>    {<br/>    	throw new FaultException&lt;CustomFault&gt;( new CustomFault("Custom Exception!"));<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF API FOR WINDOW
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.fullphat.net/">Snarl</a> is a Growl look-alike, and Growl has an <a href="http://www.tripthevortex.com/growl/">alpha version for Windows</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLAG IN C #
    </pattern>
    <template>
<![CDATA[<pre><code>if ((testItem &amp; FlagTest.Flag1) == FlagTest.Flag1)<br/>{<br/>     // Do something<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT FROM DATABAS ROW
    </pattern>
    <template>
<![CDATA[<p>I highly encourage you to use an ORM tool. Even simple projects can make use of ORM quickly and quietly... in particular, look at <a href="http://www.castleproject.org/index.html" rel="nofollow">Castle</a>'s <a href="http://www.castleproject.org/activerecord/index.html" rel="nofollow">ActiveRecord</a> tool (which sits on top of NHibernate to simplify model declaration).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFER BETWEEN RUNTIMETYPEHANDL AND TYPE
    </pattern>
    <template>
<![CDATA[<p>According to <a href="http://blogs.msdn.com/vancem/archive/2006/10/01/779503.aspx" rel="nofollow">this blog post by Vance Morrison</a>, RuntimeTypeHandle is a value type (struct) that wraps an unmanaged pointer, so Type.GetTypeHandle(obj).Equals(anotherHandle) is faster to use for strict "is exactly the same type" comparisons than obj.GetType().Equals(anotherType) -- the latter creates System.Type instances which are, apparently, heavier. </p><br/><br/><p>However, it's also less obvious, and definitely falls under the category "micro-optimization" so if you're wondering when you need one over the other, you should probably just use System.Type.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ARRAY OF DISTINCT PROPERTI VALU FROM IN MEMORI LIST
    </pattern>
    <template>
<![CDATA[<p>I'd go lambdas... wayyy nicer</p><br/><br/><pre><code>var bars = Foos.Select(f =&gt; f.Bar).Distinct().ToArray();<br/></code></pre><br/><br/><p>works the same as what @lassevk posted.</p><br/><br/><p>I'd also add that you might want to keep from converting to an array until the last minute. </p><br/><br/><p>LINQ does some optimizations behind the scenes, queries stay in its query form until explicitly needed. So you might want to build everything you need into the query first so any possible optimization is applied altogether.</p><br/><br/><p>By evaluation I means asking for something that explicitly requires evalution like "Count()" or "ToArray()" etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAST IN VB.NET
    </pattern>
    <template>
<![CDATA[<p>Those are all slightly different, and generally have an acceptable usage.</p><br/><br/><ul><br/><li><code>var.</code><a href="http://msdn.microsoft.com/en-us/library/system.object.tostring.aspx" rel="nofollow"><code>ToString</code></a><code>()</code> is going to give you the string representation of an object, regardless of what type it is.  Use this if <code>var</code> is not a string already.</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/0zk841e9.aspx" rel="nofollow"><code>CStr</code></a><code>(var)</code> is the VB string cast operator.  I'm not a VB guy, so I would suggest avoiding it, but it's not really going to hurt anything.  I think it is basically the same as <code>CType</code>.</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/4x2877xb.aspx" rel="nofollow"><code>CType</code></a><code>(var, String)</code> will convert the given type into a string, using any provided conversion operators.</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/7k6y2h6x.aspx" rel="nofollow"><code>DirectCast</code></a><code>(var, String)</code> is used to up-cast an object into a string.  If you know that an object variable is, in fact, a string, use this.  This is the same as <code>(string)var</code> in C#.</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/zyy863x8.aspx" rel="nofollow"><code>TryCast</code></a> (as mentioned by @<a href="http://stackoverflow.com/questions/40764/how-should-i-cast-in-vbnet#40771" rel="nofollow">NotMyself</a>) is like <code>DirectCast</code>, but it will return <code>Nothing</code> if the variable can't be converted into a string, rather than throwing an exception.  This is the same as <code>var as string</code> in C#.  The <code>TryCast</code> page on MSDN has a good comparison, too.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      F # UNIT OF MEASUR WORK
    </pattern>
    <template>
<![CDATA[<p>According to a <a href="http://blogs.msdn.com/andrewkennedy/archive/2008/08/22/units-of-measure-in-f-part-two-unit-conversions.aspx#8920660" rel="nofollow">response</a> on the next related blog post, they are a purely static mechanism in the F# compiler. So there is no CLR representation of the units data.</p><br/><br/><p>Its not entirely clear whether it currently works with non-float types, but from the perspective of the type system it is theoretically possible. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STREAMREAD INTO AN XMLREADER OBJECT IN .NET 2.0 C #
    </pattern>
    <template>
<![CDATA[<p>I'm not sure but it seems that you didn't reset position in stream before passing it to XmlReader. Try to seek at the beginning of your stream before trying to read from it. Also it may be necessary to close\flush stream after you wrote some data to it.</p><br/><br/><p><strong>EDIT</strong>:</p><br/><br/><p>Just tried following code and it worked perfectly:</p><br/><br/><pre><code>    BufferedStream stream = new BufferedStream(new MemoryStream());<br/>    stream.Write(Encoding.ASCII.GetBytes("&lt;xml&gt;foo&lt;/xml&gt;"), 0, "&lt;xml&gt;foo&lt;/xml&gt;".Length);<br/>    stream.Seek(0, SeekOrigin.Begin);<br/>    StreamReader sr = new StreamReader(stream);<br/>    XmlReader reader = XmlReader.Create(sr);<br/>    while (reader.Read())<br/>    {<br/>         Console.WriteLine(reader.Value);<br/>    }<br/>    stream.Close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVIC RETURN METHOD NOT ALLOW
    </pattern>
    <template>
<![CDATA[<p>You are trying to invoke the method in a RESTful way. Make sure you have the WebGet attribute on the operation in the contract:</p><br/><br/><pre><code>[ServiceContract]<br/>public interface IService1<br/>{<br/>    [WebGet()]<br/>    [OperationContract]<br/>    string GetSomeData();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEST .NET ALGORITHM FOR CREDIT CARD ENCRYPT
    </pattern>
    <template>
<![CDATA[<p>No offense, but the question is a little "misguided". There is no "silver bullet" solution. I would recommend to read up on cryptography in general and then do some threat modeling. Some questions (by no means a comprehensive list) you should ask yourself:</p><br/><br/><ul><br/><li>Is the module doing the encryption the one which needs to decrypt it (in this case use symmetric crypto) or will it send data to an other module (on an other machine) which will use it (in which case you should consider public-key crypto)</li><br/><li>What do you want to protect against? Someone accessing the database but not having the sourcecode (in which case you can hardcode the encryption key directly into the source)? Someone sniffing your local network (you should consider transparent solutions like IPSec)? Someone stealing your server (it can happen even in data centers - in which case full disk encryption should be considered)?</li><br/><li>Do you really need to keep the data? Can't you directly pass it to the credit card processor and erase it after you get the confirmation? Can't you store it locally at the client in a cookie or Flash LSO? If you store it at the client, make sure that you encrypt it at the server side before putting it in a cookie. Also, if you are using cookies, make sure that you make them http only.</li><br/><li>Is it enough to compare the equality of the data (ie the data that the client has given me is the same data that I have)? If so, consider storing a hash of it. Because credit card numbers are relatively short and use a reduced set of symbols, a unique salt should be generated for each before hashing.</li><br/></ul><br/><br/><p><em>Later edit</em>: note that standard encryption algorithms from the same category (for example 3DES and AES - both being symmetric block cyphers) are of comparable strength. Most (commercial) systems are not broken because somebody bruteforced their encryption, but because their thread modelling was not detailed enough (or flat out they didn't have any). For example you can encrypt all the data, but if you happen to have a public facing web interface which is vulnerable to SQL injection, it won't help you much.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AD TYPE IN .NET FRAMEWORK 2.0 SERVIC PACK 1
    </pattern>
    <template>
<![CDATA[<p>Here's what you're looking for:</p><br/><br/><p><img src="http://i34.tinypic.com/2dwf0xk.jpg" alt="alt text" /></p><br/><br/><p>Full Article: <a href="http://www.hanselman.com/blog/CatchingRedBitsDifferencesInNET20AndNET20SP1.aspx" rel="nofollow">http://www.hanselman.com/blog/CatchingRedBitsDifferencesInNET20AndNET20SP1.aspx</a></p><br/><br/><p>This may also be helpful:</p><br/><br/><p><img src="http://i33.tinypic.com/oqhv1g.gif" alt="alt text" /></p><br/><br/><p>Full Article: <a href="http://www.hanselman.com/blog/ChangesInTheNETBCLBetween20And35.aspx" rel="nofollow">http://www.hanselman.com/blog/ChangesInTheNETBCLBetween20And35.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITEM IN WPF COMBOBOX
    </pattern>
    <template>
<![CDATA[<p>Can you use ItemContainerGenerator?</p><br/><br/><p>ItemContainerGenerator contains a ContainerFromItem method that takes an object parameter.  If you have a reference to the full object that your comboBox contains (or a way to reconstruct it), you can use the following:</p><br/><br/><pre><code>ComboBoxItem item = <br/>    (ComboBoxItem)myComboBox.ItemContainerGenerator.ContainerFromItem(myObject);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST IS EMPTI WITH LINQ
    </pattern>
    <template>
<![CDATA[<p>You could do this:</p><br/><br/><pre><code>public static Boolean IsEmpty&lt;T&gt;(this IEnumerable&lt;T&gt; source)<br/>{<br/>    if (source == null)<br/>        return true; // or throw an exception<br/>    return !source.Any();<br/>}<br/></code></pre><br/><br/><p><strong>Edit</strong>: Note that simply using the .Count method will be fast if the underlying source actually has a fast Count property. A valid optimization above would be to detect a few base types and simply use the .Count property of those, instead of the .Any() approach, but then fall back to .Any() if no guarantee can be made.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ESB S OUT THERE
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.lostechies.com/blogs/chris_patterson/archive/2008/09/03/masstransit-0-3-released.aspx" rel="nofollow">MassTransit</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAM WITH WCF
    </pattern>
    <template>
<![CDATA[<p>This is one of the weirder aspects of WCF.  You can dynamically create a channelfactory, but only with a known type.</p><br/><br/><p>I came up with a solution that is not perfect, but does work:</p><br/><br/><p>Create an interface, "IFoo" which contains a single method, say <code>Execute()</code>.  In your ESB, dynamically create a <code>ChannelFactory&lt;IFoo&gt;</code> for the endpoint that you want to connect to.  Set the connection properties (URI, etc.).</p><br/><br/><p>Now, you can attach services dynamically to your ESB, provided that they always implement the "IFoo" interface.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STANC CONSTRUCTOR SET A STATIC MEMBER IS IT THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>@ajmastrean</p><br/><br/><p>I am not saying you should use the singleton pattern itself, but adopt its method of encapsulating the instantiation process.</p><br/><br/><p>i.e.</p><br/><br/><ul><br/><li>Make the constructor private.</li><br/><li>Create a static instance method that returns the type.</li><br/><li>In the static instance method, use the lock keyword before instantiating.</li><br/><li>Instantiate a new instance of the type.</li><br/><li>Increment the count.</li><br/><li>Unlock and return the new instance.</li><br/></ul><br/><br/><h3>EDIT</h3><br/><br/><p>One problem that has occurred to me, if how would you know when the count has gone down? ;)</p><br/><br/><h3>EDIT AGAIN</h3><br/><br/><p>Thinking about it, you could add code to the destructor that calls another static method to decrement the counter :D</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE CORRECT VERSION FOR A COM DLL REFERENC IN A .NET PROJECT
    </pattern>
    <template>
<![CDATA[<p>The Guid refers to the Guid for the TypeLib not the DLL directly.  The version numbers refer to the TypeLib's version not the DLLs.  </p><br/><br/><p>The version number will come from your idl file, and I believe it only supports a major and minor version and not a build version. Is this version changing when you modify the typelib?</p><br/><br/><p>The version numbers will appear in the registry under:<br/>HKEY_CLASSES_ROOT\Typelib{typelib uuid}\Major.Minor</p><br/><br/><p>If the minor version is set to 0 then I believe it will import the 'latest' version that matches the major version, but the major version must be set to something.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YAML LIBRARI
    </pattern>
    <template>
<![CDATA[<p>If your core requirement is "a data-interchange format lighter than XML", then you might want to consider using <a href="http://www.json.org/" rel="nofollow">JSON</a> instead of YAML. YAML is a superset of JSON, but you may not need the extra YAML features.</p><br/><br/><p>Both <a href="http://yaml-net-parser.sourceforge.net/default.html" rel="nofollow">http://yaml-net-parser.sourceforge.net/default.html</a> and <a href="http://www.codeplex.com/yaml" rel="nofollow">YAML for .NET</a> are pretty immature projects, but there is a fairly wide selection of JSON libraries for .NET available, including several with full source code - see the links on the JSON site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET XML LIBRARI
    </pattern>
    <template>
<![CDATA[<p>isn't the system.xml namespace suficient?</p><br/><br/><p>once i had to use it for the simple scenarios that you described and thought that it was a simple and efficient solutions.</p><br/><br/><p>take a look at this examples</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/443c16cf(VS.71).aspx" rel="nofollow">Reading Node Trees with XmlNodeReader</a><br/>and the <a href="http://msdn.microsoft.com/en-us/library/hf9hbf87(VS.80).aspx" rel="nofollow">XML Document Object Model (DOM) Reference</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST A WINDOW SERVIC
    </pattern>
    <template>
<![CDATA[<p>I'd probably recommend designing your app so the "OnStart" and "OnStop" overrides in the Windows Service just call methods on a class library assembly.  That way you can automate unit tests against the class library methods, and the design also abstracts your business logic from the implementation of a Windows Service.</p><br/><br/><p>In this scenario, testing the "OnStart" and "OnStop" methods themselves in a Windows Service context would then be an integration test, not something you would automate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THER MANAG EXTENS FRAMEWORK FOR .NET
    </pattern>
    <template>
<![CDATA[<p>We are not aiming for MEF to be an all-purpose IoC. The best way to think about the IoC aspects of MEF is an implementation detail. We use IoC as a pattern because it is a great way to address the problems we are looking to solve. </p><br/><br/><p>MEF is focused on extensibility. When you think of MEF look at it as an investment in taking our platform forward. Our future products and the platform will leverage MEF as a standard mechanism for adding extensibility. Third-party products and frameworks will also be able to leverage this same mechanism. The average "user" of MEF will author components that MEF will consume and will not be directly consuming MEF within their applications.</p><br/><br/><p>Imagine when you want to extend our platform in the future, you drop a dll in the bin folder and you are done. The MEF enabled app lights up with the new extension. That's the vision for MEF.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      READ THE CONTENT OF A TEXT FILE TO A STRING IN .NET
    </pattern>
    <template>
<![CDATA[<p>First of all, the title asks for "how to write the contents of strnig to a text file"<br/>but your code example is for "how to read the contents of a text file to a string.</p><br/><br/><p>Answer to both questions:</p><br/><br/><pre><code>using System.IO;<br/>...<br/>string filename = "C:/example.txt";<br/>string content = File.ReadAllText(filename);<br/>File.WriteAllText(filename, content);<br/></code></pre><br/><br/><p>See also ReadAllLines/WriteAllLines and ReadAllBytes/WriteAllBytes if instead of a string you want a string array or byte array.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME .NET TRAIN
    </pattern>
    <template>
<![CDATA[<p>I'd recommend starting with the <a href="http://www.asp.net/" rel="nofollow">official ASP.NET website</a> and the resources there.  Since it is in Microsoft's best interest to get as many developers up-to-speed on .NET, they pour a ton of money into training and tutorials.  They have <a href="http://www.asp.net/learn/" rel="nofollow">a gob of videos, tutorials, downloadable presentations, books, podcasts, and webcasts</a>.  The only problem may be the quantity of material can be overwhelming.</p><br/><br/><p>I would steer clear of the official Microsoft training that's available at <a href="http://learning.microsoft.com/Manager/Catalog.aspx" rel="nofollow">learning.microsoft.com</a>. This training includes self-paced labs and classroom training.  It is not that helpful and tends to focus more on what-to-do rather than why-to-do or how-to-do.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REUS A VARIABL IN VB6 A GOOD IDEA
    </pattern>
    <template>
<![CDATA[<p>Just to extend what Longhorn213 said, here's the code for it:</p><br/><br/><pre><code>Using mysql as SqlCommand = new SqlCommand(sSql, cnInput)<br/>  ' do stuff'<br/>End Using<br/><br/>Using mysql as SqlCommand = new SqlCommand(otherSql, cnInput)<br/>  ' do other stuff'<br/>End Using<br/></code></pre><br/><br/><p>(edit) Just as an FYI, using automatically wraps the block of code around a try/finally that calls the Dispose method on the variable it is created with. Thus, it's an easy way to ensure your resource is released. <a href="http://msdn.microsoft.com/en-us/library/htd05whh" rel="nofollow">http://msdn.microsoft.com/en-us/library/htd05whh</a>(VS.80).aspx</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N INTPTR TO A STREAM
    </pattern>
    <template>
<![CDATA[<p>You can avoid the copy if you use an <a href="http://msdn.microsoft.com/en-us/library/system.io.unmanagedmemorystream.aspx">UnmanagedMemoryStream()</a> instead (class exists in .NET FCL 2.0 and later). Like MemoryStream, it is a subclass of IO.Stream, and has all the usual stream operations.</p><br/><br/><p>Microsoft's description of the class is:</p><br/><br/><blockquote><br/>  <p>Provides access to unmanaged blocks of memory from managed code.</p><br/></blockquote><br/><br/><p>...which pretty much tells you what you need to know. Note that UnmanagedMemoryStream() is not CLS-compliant.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TITLEBARS CHROM IN A WINFORM APP
    </pattern>
    <template>
<![CDATA[<p>Here's an article with full code sample on how to use your own custom "chrome" for an application:</p><br/><br/><p><a href="http://geekswithblogs.net/kobush/articles/CustomBorderForms3.aspx" rel="nofollow">http://geekswithblogs.net/kobush/articles/CustomBorderForms3.aspx</a></p><br/><br/><p>This looks like some really good stuff. There are a total of 3 articles in it's series, and it runs great, and on Vista too!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEASUR BYTE IN OUT OF AN IP PORT USE FOR .NET REMOT
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.wireshark.org/" rel="nofollow">Wireshark</a> is one of the best tools for capturing and analyzing IP traffic.</p><br/><br/><p>[Edit] Sort of lame that you answered first and didn't get the check mark.  I didn't mean to snake you.  +1 as a consolation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAF USE OF A SINGLETON S MEMBER
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Is access through 'Instance' to the 'Toggle()' class threadsafe? If yes, by what assumptions, rules, etc. If no, why and how can I fix it?</p><br/></blockquote><br/><br/><p>No, it's not threadsafe.</p><br/><br/><p>Basically, both threads can run the <code>Toggle</code> function at the same time, so this could happen</p><br/><br/><pre><code>    // thread 1 is running this code<br/>    if(value == 0) <br/>    {<br/>        value = 1; <br/>        // RIGHT NOW, thread 2 steps in.<br/>        // It sees value as 1, so runs the other branch, and changes it to 0<br/>        // This causes your method to return 0 even though you actually want 1<br/>    }<br/>    else if(value == 1) <br/>    { <br/>        value = 0; <br/>    }<br/>    return value;<br/></code></pre><br/><br/><p>You need to operate with the following assumption.</p><br/><br/><p>If 2 threads are running, they can and will interleave and interact with eachother randomly at any point. You can be half way through writing or reading a 64 bit integer or float (on a 32 bit CPU) and another thread can jump in and change it out from underneath you.</p><br/><br/><p>If the 2 threads never access anything in common, it doesn't matter, but as soon as they do, you need to prevent them from stepping on each others toes. The way to do this in .NET is with locks.</p><br/><br/><p>You can decide what and where to lock by thinking about things like this:</p><br/><br/><p>For a given block of code, if the value of <code>something</code> got changed out from underneath me, would it matter? If it would, you need to lock that <code>something</code> for the duration of the code where it would matter.</p><br/><br/><p>Looking at your example again</p><br/><br/><pre><code>    // we read value here<br/>    if(value == 0) <br/>    {<br/>        value = 1; <br/>    }<br/>    else if(value == 1) <br/>    { <br/>        value = 0; <br/>    }<br/>    // and we return it here<br/>    return value;<br/></code></pre><br/><br/><p>In order for this to return what we expect it to, we assume that <code>value</code> won't get changed between the read and the <code>return</code>. In order for this assumption to actually be correct, you need to lock <code>value</code> for the duration of that code block.</p><br/><br/><p>So you'd do this:</p><br/><br/><pre><code>lock( value )<br/>{<br/>     if(value == 0) <br/>     ... // all your code here<br/>     return value;<br/>}<br/></code></pre><br/><br/><p><strong>HOWEVER</strong></p><br/><br/><p>In .NET you can only lock Reference Types. Int32 is a Value Type, so we can't lock it.<br><br/>We solve this by introducing a 'dummy' object, and locking <em>that</em> wherever we'd want to lock 'value'.</p><br/><br/><p>This is what <a href="http://stackoverflow.com/questions/42505/thread-safe-use-of-a-singletons-members/42517#42517">Ben Scheirman</a> is referring to.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WCF IN SIMPL TERM
    </pattern>
    <template>
<![CDATA[<p>WCF - <a href="http://msdn.microsoft.com/en-us/library/ms731082.aspx" rel="nofollow">Windows Communication Framework</a> - is Microsoft's framework to make inter-process communication easier. It let's you do this communication through various means, plain old asmx web services, Remoting, MS Message Queuing, and a couple more.</p><br/><br/><p>It let's you talk with other .NET apps, or non-Microsoft technologies (like J2EE). It's extensible enough to allow for newer stuff, like REST too (I don't think REST is built-in).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADD A WEB REFER THROUGH A PROXY FIREWAL
    </pattern>
    <template>
<![CDATA[<p>Edit, I forgot to write this part in the answer: You may need to add the web reference url to the safe list for your proxy.  I am not sure what proxy you are using or if you have control of it, but this should solve your problem.  If you don't have access to change the proxy, then I put a quick work around right below.</p><br/><br/><p>Here's a quick work around, just use the browser to navigate to the WSDL.  Grab the xml and save it as a .wsdl file on your computer you would like to generate the client on.  Then use the <a href="http://shrinkster.com/11sv" rel="nofollow">wsdl.exe</a> to generate the client pointing it to the path you saved the wsdl file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IPC WITHOUT HAVE A SERVIC MEDIAT
    </pattern>
    <template>
<![CDATA[<p>Using shared memory is tougher because you'll have to manage the size of the shared memory buffer (or just pre-allocate enough).  You'll also have to manually manage the data structures that you put in there.  Once you have it tested and working though, it will be easier to use and test because of its simplicity.</p><br/><br/><p>If you go the remoting route, you can use the IpcChannel instead of the TCP or HTTP channels for a single system communication using Named Pipes. <a href="http://msdn.microsoft.com/en-us/library/4b3scst2.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/4b3scst2.aspx</a>.  The problem with this solution is that you'll need to come up with a registry type solution (either in shared memory or some other persistent store) that processes can register their endpoints with.  That way, when you're looking for them, you can find a way to query for all the endpoints that are running on the system and you can find what you're looking for.  The benefits of going with Remoting are that the serialization and method calling are all pretty straightforward.  Also, if you decide to move to multiple machines on a network, you could just flip the switch to use the networking channels instead.  The cons are that Remoting can get frustrating unless you clearly separate what are "Remote" calls from what are "Local" calls.</p><br/><br/><p>I don't know much about WCF, but that also might be worth looking into.  Spider sense says that it probably has a more elegant solution to this problem... maybe.</p><br/><br/><p>Alternatively, you can create a "server" process that is separate from all the other processes and that gets launched (use a system Mutex to make sure more than one isn't launched) to act as a go-between and registration hub for all the other processes.</p><br/><br/><p>One more thing to look into the Publish-Subscribe model for events (Pub/Sub).  This technique helps when you have a listener that is launched before the event source is available, but you don't want to wait to register for the event.  The "server" process will handle the event registry to link up the publishers and subscribers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST.CAST TYPEOF ( T ) ( ) RETURN ERROR SYNTAX LOOK OK
    </pattern>
    <template>
<![CDATA[<p><code>T</code> is not a type nor a <code>System.Type</code>.  <code>T</code> is a type parameter.  <code>typeof(T)</code> returns the type of <code>T</code>.  The <code>typeof</code> operator does not act on an object, it returns the <code>Type</code> object of a type. <a href="http://msdn.microsoft.com/en-us/library/58918ffs.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/58918ffs.aspx</a></p><br/><br/><p>@John is correct in answering your direct question.  But the NHibernate code there is a little off. You shouldn't be configuring the <code>ISessionFactory</code> <em>after</em> getting the <code>ISession</code>, for example.</p><br/><br/><pre><code>public static T[] LoadObjectListAll()<br/>{<br/>    var session = GetNewSession();<br/>    var criteria = session.CreateCriteria(typeof(T));<br/>    var results = criteria.List&lt;T&gt;();<br/>    return results.ToArray();        <br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BYTE ARRAY IN .NET
    </pattern>
    <template>
<![CDATA[<p>ebil gil suggested unsafe code which spawned this solution:</p><br/><br/><pre><code>static unsafe bool UnsafeCompare(byte[] a1, byte[] a2) {<br/>  if(a1==null || a2==null || a1.Length!=a2.Length)<br/>    return false;<br/>  fixed (byte* p1=a1, p2=a2) {<br/>    byte* x1=p1, x2=p2;<br/>    int l = a1.Length;<br/>    for (int i=0; i &lt; l/8; i++, x1+=8, x2+=8)<br/>      if (*((long*)x1) != *((long*)x2)) return false;<br/>    if ((l &amp; 4)!=0) { if (*((int*)x1)!=*((int*)x2)) return false; x1+=4; x2+=4; }<br/>    if ((l &amp; 2)!=0) { if (*((short*)x1)!=*((short*)x2)) return false; x1+=2; x2+=2; }<br/>    if ((l &amp; 1)!=0) if (*((byte*)x1) != *((byte*)x2)) return false;<br/>    return true;<br/>  }<br/>}<br/></code></pre><br/><br/><p>which does 64-bit based comparison for as much of the array as possible. This kinda counts on the fact that the arrays start qword aligned.<br/><p>It performs about 7x faster. Using the J# library performed equivalently to the original for loop. Using .SequenceEqual runs around 7x slower, I think just because it is using IEnumerator.MoveNext.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ISESS FLUSH WHERE AND WHEN TO USE IT AND WHI
    </pattern>
    <template>
<![CDATA[<p>Briefly:</p><br/><br/><ol><br/><li>Always use transactions</li><br/><li>Don't use <code>Close()</code>, instead wrap your calls on an <code>ISession</code> inside a <code>using</code> statement or <strong>manage the lifecycle of your ISession somewhere else</strong>.</li><br/></ol><br/><br/><p>From <a href="http://nhforge.org/doc/nh/en/index.html#manipulatingdata-flushing" rel="nofollow">the documentation</a>:</p><br/><br/><blockquote><br/>  <p>From time to time the <code>ISession</code> will execute the SQL statements needed to synchronize the ADO.NET connection's state with the state of objects held in memory. This process, flush, occurs by default at the following points</p><br/>  <br/>  <ul><br/>  <li>from some invocations of <code>Find()</code> or <code>Enumerable()</code></li><br/>  <li>from <code>NHibernate.ITransaction.Commit()</code></li><br/>  <li>from <code>ISession.Flush()</code> </li><br/>  </ul><br/>  <br/>  <p>The SQL statements are issued in the following order</p><br/>  <br/>  <ol><br/>  <li>all entity insertions, in the same order the corresponding objects were saved using <code>ISession.Save()</code></li><br/>  <li>all entity updates</li><br/>  <li>all collection deletions</li><br/>  <li>all collection element deletions, updates and insertions</li><br/>  <li>all collection insertions</li><br/>  <li>all entity deletions, in the same order the corresponding objects were deleted using <code>ISession.Delete()</code></li><br/>  </ol><br/>  <br/>  <p>(An exception is that objects using native ID generation are inserted when they are saved.)</p><br/>  <br/>  <p><strong>Except when you explicity <code>Flush()</code>, there are absolutely no guarantees about when the Session executes the ADO.NET calls, only the order in which they are executed</strong>. However, NHibernate does guarantee that the <code>ISession.Find(..)</code> methods will never return stale data; nor will they return the wrong data.</p><br/>  <br/>  <p>It is possible to change the default behavior so that flush occurs less frequently. The <code>FlushMode</code> class defines three different modes: only flush at commit time (and only when the NHibernate <code>ITransaction</code> API is used), flush automatically using the explained routine, or never flush unless <code>Flush()</code> is called explicitly. The last mode is useful for long running units of work, where an <code>ISession</code> is kept open and disconnected for a long time.</p><br/></blockquote><br/><br/><p>...</p><br/><br/><p>Also refer to <a href="http://nhforge.org/doc/nh/en/index.html#manipulatingdata-endingsession" rel="nofollow">this section</a>:</p><br/><br/><blockquote><br/>  <p>Ending a session involves four distinct phases:</p><br/>  <br/>  <ul><br/>  <li>flush the session</li><br/>  <li>commit the transaction</li><br/>  <li>close the session</li><br/>  <li>handle exceptions </li><br/>  </ul><br/>  <br/>  <h2>Flushing the Session</h2><br/>  <br/>  <p>If you happen to be using the <code>ITransaction</code> API, you don't need to worry about this step. It will be performed implicitly when the transaction is committed. Otherwise you should call <code>ISession.Flush()</code> to ensure that all changes are synchronized with the database.</p><br/>  <br/>  <h2>Committing the database transaction</h2><br/>  <br/>  <p>If you are using the NHibernate ITransaction API, this looks like:</p><br/><br/><pre><code>tx.Commit(); // flush the session and commit the transaction<br/></code></pre><br/>  <br/>  <p>If you are managing ADO.NET transactions yourself you should manually <code>Commit()</code> the ADO.NET transaction.</p><br/><br/><pre><code>sess.Flush();<br/>currentTransaction.Commit();<br/></code></pre><br/>  <br/>  <p>If you decide not to commit your changes:</p><br/><br/><pre><code>tx.Rollback();  // rollback the transaction<br/></code></pre><br/>  <br/>  <p>or:</p><br/><br/><pre><code>currentTransaction.Rollback();<br/></code></pre><br/>  <br/>  <p>If you rollback the transaction you should immediately close and discard the current session to ensure that NHibernate's internal state is consistent.</p><br/>  <br/>  <h2>Closing the ISession</h2><br/>  <br/>  <p>A call to <code>ISession.Close()</code> marks the end of a session. The main implication of Close() is that the ADO.NET connection will be relinquished by the session.</p><br/><br/><pre><code>tx.Commit();<br/>sess.Close();<br/><br/>sess.Flush();<br/>currentTransaction.Commit();<br/>sess.Close();<br/></code></pre><br/>  <br/>  <p>If you provided your own connection, <code>Close()</code> returns a reference to it, so you can manually close it or return it to the pool. Otherwise <code>Close()</code> returns it to the pool. </p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAIN DIFFER BETWEEN NEW ASP.NET MVC FRAMEWORK AND TYPIC JAVA STRUT PROJECT
    </pattern>
    <template>
<![CDATA[<p>I think you're mostly right. While my MVC experience is largely with RoR, I read up on Struts before the opportunity to work with it evaporated.</p><br/><br/><p>IIRC, Struts and RoR are both fairly clean implementations of MVC as I see it defined on <a href="http://en.wikipedia.org/wiki/Model-view-controller" rel="nofollow">Wikipedia</a>, to pick an obvious reference.</p><br/><br/><p>What's more interesting is that ASP.NET's MVC framework appears also to be a fairly close match. I was listening to a <a href="http://slickthought.net/spaghetticode/podcast/spaghetticode-ruby.mp3" rel="nofollow">podcast</a> that, amongst other things, seemed to confirm this. Why interesting? Because Microsoft didn't crazy trying to outdo what was already out there, just make the same thing available within their environment. How much simpler would web page design and styling be if they'd taken that approach when developing IE?</p><br/><br/><p>Of course, it's not always that simple: how much poorer would the web experience be if MS hadn't "extended" the standards and given us, or example, XmlHttpRequest() ? We'd probably still be waiting for it to be approved by the standards body so someone could invent AJAX...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUILT IN METHOD TO COMPAR COLLECT IN C #
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/bb342073.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/bb342073.aspx</a> </p><br/><br/><p><code>Enumerable.SequenceEqual</code></p><br/><br/><blockquote><br/>  <p>Determines whether two sequences are equal by comparing their elements by using a specified IEqualityComparer(T).</p><br/></blockquote><br/><br/><p>You can't directly compare the list &amp; the dictionary, but you could compare the list of values from the Dictionary with the list</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO THE .NET FRAMEWORK CONFIGUR TOOL
    </pattern>
    <template>
<![CDATA[<p>The .NET Framework versions 3.0 and 3.5 have been built incrementally on the .NET Framework version 2.0. This version can be used to manage code access security policy for the .NET Framework 3.0, 3.5, and later versions as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM FORM CONTROL
    </pattern>
    <template>
<![CDATA[<p>You can use panels with automatic layout such as <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.flowlayoutpanel.asp" rel="nofollow">FlowLayoutPanel</a> and <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.tablelayoutpanel.aspx" rel="nofollow">TableLayoutPanel</a>.  </p><br/><br/><p>Unfortunately there are only 2 panels with automatic layout out of box but you can create custom layout panel.</p><br/><br/><p>I would recommend you to read following articles:  </p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/d4d31tbk.aspx" rel="nofollow">How to: Create a Resizable Windows Form for Data Entry</a>  </p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/991eahec.aspx" rel="nofollow">Walkthrough: Creating a Resizable Windows Form for Data Entry</a></p><br/><br/><p>Another option would be using of WPF (Windows Presentation Presentation).<br /><br/>WPF is a perfect match for your task.<br /><br/>WPF controls can be hosted in WinForms apps so you don't have to switch to it completely.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEBCLIENTPROTOCOL.TIMEOUT VIA WEB.CONFIG
    </pattern>
    <template>
<![CDATA[<p>I cant think of a way to have just the Timeout property changed automatically via the webconfig.</p><br/><br/><p>Manually configure the value or use DI to read the value in for you. </p><br/><br/><p>It maybe possible also to change the value globally on the machine config.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU FOR SYSTEM.DRAWING.SYSTEMCOLOR
    </pattern>
    <template>
<![CDATA[<p>This may help: <a href="http://support.microsoft.com/kb/311339" rel="nofollow">http://support.microsoft.com/kb/311339</a> -- a KB article entitled<br/>"MSDN documentation for the DefaultValueAttribute class may be confusing"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL VERSION OF .NET FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Im not sure if this is correct, but i'd try to compile it for the lowest version, the higher versions should be able to run the lower versions exe's.</p><br/>]]>    </template>
  </category>
</aiml>
