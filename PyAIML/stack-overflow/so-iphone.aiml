<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      IN LANDSCAP MODE
    </pattern>
    <template>
<![CDATA[<p>Exciting news! As discovered by Andrew below,</p><br/><br/><h1>This problem has been fixed by Apple in 4.0+.</h1><br/><br/><p>Here is a FULL TEST PROJECT you can download, that shows it working correctly in a "Landscape only" iPad app.</p><br/><br/><p><a href="http://www.fileswap.com/dl/nmAyzRbc/LandscapeOnlyProblemTest.zip.html" rel="nofollow">http://www.fileswap.com/dl/nmAyzRbc/LandscapeOnlyProblemTest.zip.html</a></p><br/><br/><p>It would appear it is NO longer necessary to force the size of the view on every view, and the specific bad problem of landscape "only working the first time" has been resolved.</p><br/><br/><p>As you can see in the demo project, you can swap out, leave only the raw app window, and insert another landscape view with no problem.</p><br/><br/><p>As of April 2011, there is no reason to support anything below 4.0, so the question is now only a historic curiosity.  It's incredible how much trouble that caused so many developers for so long!</p><br/><br/><p>Purely for historical reasons, here is the original discussion and solution (to repeat, this is totally irrelevant now) --></p><br/><br/><hr><br/><br/><p>It is EXTREMELY DIFFICULT to make this work fully properly -- there are at least three problems/bugs at play.</p><br/><br/><p>try this .. <a href="http://www.iphonedevsdk.com/forum/iphone-sdk-development/7366-interface-builder-landscape-design.html#post186977" rel="nofollow">http://www.iphonedevsdk.com/forum/iphone-sdk-development/7366-interface-builder-landscape-design.html#post186977</a></p><br/><br/><p>Note in particular that where it says <em>"and you need to use shouldAutorotateToInterfaceOrientation properly everywhere"</em> it means everywhere, all your fullscreen views.</p><br/><br/><p>Hope it helps in this nightmare!</p><br/><br/><p>An important reminder of the ADDITIONAL well-known problem at hand here: if you are trying to swap between <strong><em>MORE THAN ONE</em></strong> view (all landscape), <strong><em>IT SIMPLY DOES NOT WORK</em></strong>.  It is essential to remember this or you will waste days on the problem. It is literally NOT POSSIBLE. It is the biggest open, known, bug on the iOS platform. There is literally no way to make the hardware make the second view you load, be landscape. The annoying but simple workaround, and what you must do, is have a trivial master UIViewController that does nothing but sit there and let you swap between your views.</p><br/><br/><p>In other words, in iOS because of a major know bug:</p><br/><br/><pre><code>[window addSubview:happyThing.view];<br/>[window makeKeyAndVisible];<br/></code></pre><br/><br/><p><em><strong>you can do that only once</em></strong>. Later, if you try to remove happyThing.view, and instead put in there newThing.view, IT DOES NOT WORK - AND THAT'S THAT. The machine will never rotate the view to landscape. There is no trick fix, even Apple cannot make it work. The workaround you must adopt is having an overall UIViewController that simply sits there and just holds your various views (happyThing, newThing, etc). Hope it helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIVE MY WEB SITE AN ICON FOR IPHON
    </pattern>
    <template>
<![CDATA[<p>See the <strong><a href="http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html#//apple_ref/doc/uid/TP40002051-CH3-SW4" rel="nofollow">Specifying a Webpage Icon for Web Clip</a></strong> section of the <em>Configuring Web Applications</em> page of the <em>Safari Web Content Guide</em> in the <em>Safari Reference Library</em>...</p><br/><br/><blockquote><br/>  <h2>Specifying a Webpage Icon for Web Clip</h2><br/>  <br/>  <blockquote><br/>    <p><strong>iPhone OS Note:</strong> The Web Clip feature<br/>    is available in iPhone OS 1.1.3 and<br/>    later. The<br/>    <code>apple-touch-icon-precomposed.png</code><br/>    filename is available in iPhone OS 2.0<br/>    and later.</p><br/>  </blockquote><br/>  <br/>  <p>You may want users to be able to add<br/>  your web application or webpage link<br/>  to the Home screen. These links,<br/>  represented by an icon, are called Web<br/>  Clips. Follow these simple steps to<br/>  specify an icon to represent your web<br/>  application or webpage on iPhone OS.</p><br/>  <br/>  <ul><br/>  <li><p>To specify an icon for the entire<br/>  website (every page on the website),<br/>  place an icon file in PNG format in<br/>  the root document folder called<br/>  <code>apple-touch-icon.png</code> or<br/>  <code>apple-touch-icon-precomposed.png</code>. If<br/>  you use<br/>  <code>apple-touch-icon-precomposed.png</code> as<br/>  the filename, Safari on iPhone OS<br/>  won't add any effects to the icon.</p></li><br/>  <li><p>To specify an icon for a single<br/>  webpage or replace the website icon<br/>  with a webpage-specific icon, add a<br/>  link element to the webpage, as in:<br><br/>  <code>&lt;link rel="apple-touch-icon" href="/custom_icon.png"/&gt;</code><br><br/>  In the above example, replace<br/>  <code>custom_icon.png</code> with your icon<br/>  filename. If you don't want Safari on<br/>  iPhone OS to add any effects to the<br/>  icon, replace <code>apple-touch-icon</code> with<br/>  <code>apple-touch-icon-precomposed</code>.</p></li><br/>  </ul><br/>  <br/>  <p>See <a href="http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/iPhoneWebAppHIG/MetricsLayout/MetricsLayout.html#//apple_ref/doc/uid/TP40007900-CH6-SW31" rel="nofollow">"Create an Icon for Your Web Application or Webpage"</a> in <a href="http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/iPhoneWebAppHIG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007900" rel="nofollow">iPhone Human Interface Guidelines for Web Applications</a> for webpage icon metrics.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CORRECT PIXEL DIMENS FOR AN APPLE TOUCH ICON
    </pattern>
    <template>
<![CDATA[<p>it seems that Apple guidelines as of August 3, 2010 now include the "High resolution" images (for iPhone 4) in their "required" icon sizes.<br/>Looks like we need to provide both a 57x57 and a 114x114 image now, as well as a 640x960 title image.</p><br/><br/><p><a href="http://developer.apple.com/iphone/library/documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW2" rel="nofollow">http://developer.apple.com/iphone/library/documentation/userexperience/conceptual/mobilehig/IconsImages/IconsImages.html#//apple_ref/doc/uid/TP40006556-CH14-SW2</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARTICL FOR IPHON DEVELOP AND OBJECTIVE C
    </pattern>
    <template>
<![CDATA[<p>I collected <strong>some links</strong> I used to start with iPhone development:</p><br/><br/><ul><br/><li><a href="http://www.appsamuck.com/">Apps Amuck</a>: Welcome to 31 Days of iPhone Apps. Good tutorials - <em>"The key here is simple: "Taking baby steps is better than taking no steps at all"</em> - <strong>may need some editing to run apps on iOS 4 or later</strong></li><br/><li><a href="http://www.idev101.com/learn/">iPhone Development 101</a></li><br/><li><a href="http://writings.withoutfriction.com/the-complete-guide-for-starting-iphone-and-io">The Complete Guide for Starting iPhone and iOS Development</a></li><br/><li><a href="http://freeborn.wordpress.com/2008/03/10/iphone-developmenet-where-to-start/">Blog Post about "Where to start"</a> </li><br/><li><a href="http://www.icodeblog.com/category/tutorials/">iPhone programming category tutorials on iCodeBlog</a></li><br/><li><a href="http://www.otierney.net/objective-c.html">Objective-C Beginner's Guide</a></li><br/><li><a href="http://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjectiveC/index.html">The Objective-C 2.0 Programming Language: Introduction to The Objective-C 2.0 Programming Language</a> (Apple)</li><br/><li>Blog Post: <a href="http://replay.waybackmachine.org/20090318104435/http://talentgrouplabs.com/blog/archive/2008/08/24/how-to-jump-start-iphone-development.aspx">How to jump start iphone development</a></li><br/><li>Stanford University has a <a href="http://itunes.stanford.edu/">free online course</a> (<em>"iPhone Application Programming"</em></li><br/><li><a href="http://mycodeteacher.com/lpackage.php?key=objc_iphone">Video tutorials</a> (commercial, but some are free).</li><br/></ul><br/><br/><p>And don't forget all the <a href="http://developer.apple.com/iphone/library/navigation/GettingStarted.html">"Geting Started" articles on Apple's Developer Connection</a>. Here is the "<a href="http://developer.apple.com/iphone/library/referencelibrary/GettingStarted/GS_iPhoneGeneral/index.html">Getting Started with iPhone OS</a>" tutorial. </p><br/><br/><p><strong>Update 2011</strong></p><br/><br/><ul><br/><li><a href="http://www.raywenderlich.com/tutorials">iPhone Tutorials</a>: a lot of good tutorials for beginners, intermediate programmers and game developers</li><br/><li><a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewCourse?id=497193807&amp;s=143441&amp;ls=1">Advanced iOS Development</a>: By Brad Larson, creator of 'Pi Cubed'. It's more advanced than Stanford's classes. Course notes in <a href="http://www.sunsetlakesoftware.com/sites/default/files/Spring2010CourseNotes/index.html">HTML</a> and <a href="http://www.sunsetlakesoftware.com/sites/default/files/AdvancediPhoneApps.zip">VoodooPad</a> format.</li><br/><li><a href="http://ideveloper.tv/">iDeveloper.tv</a>: Great video tutorials (not free)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REFER COUNT WITH COCOA AND OBJECTIVE C
    </pattern>
    <template>
<![CDATA[<p>Let's start with <code>retain</code> and <code>release</code>; <code>autorelease</code> is really just a special case once you understand the basic concepts.  </p><br/><br/><p>In Cocoa, each object keeps track of how many times it is being referenced (specifically, the <code>NSObject</code> base class implements this).  By calling <code>retain</code> on an object, you are telling it that you want to up its reference count by one.  By calling <code>release</code>, you tell the object you are letting go of it, and its reference count is decremented.  If, after calling <code>release</code>, the reference count is now zero, then that object's memory is freed by the system.</p><br/><br/><p>The basic way this differs from <code>malloc</code> and <code>free</code> is that any given object doesn't need to worry about other parts of the system crashing because you've freed memory they were using.  Assuming everyone is playing along and retaining/releasing according to the rules, when one piece of code retains and then releases the object, any other piece of code also referencing the object will be unaffected.</p><br/><br/><p>What can sometimes be confusing is knowing the circumstances under which you should call <code>retain</code> and <code>release</code>.  My general rule of thumb is that if I want to hang on to an object for some length of time (if it's a member variable in a class, for instance), then I need to make sure the object's reference count knows about me.  As described above, an object's reference count is incremented by calling <code>retain</code>.  By convention, it is also incremented (set to 1, really) when the object is created with an "init" method.  In either of these cases, it is my responsibility to call <code>release</code> on the object when I'm done with it.  If I don't, there will be a memory leak.</p><br/><br/><p>Example of object creation:</p><br/><br/><pre><code>NSString* s = [[NSString alloc] init];  // Ref count is 1<br/>[s retain];                             // Ref count is 2 - silly<br/>                                        //   to do this after init<br/>[s release];                            // Ref count is back to 1<br/>[s release];                            // Ref count is 0, object is freed<br/></code></pre><br/><br/><p>Now for <code>autorelease</code>.  Autorelease is used as a convenient (and sometimes necessary) way to tell the system to free this object up after a little while.  From a plumbing perspective, when <code>autorelease</code> is called, the current thread's <code>NSAutoreleasePool</code> is alerted of the call.  The <code>NSAutoreleasePool</code> now knows that once it gets an opportunity (after the current iteration of the event loop), it can call <code>release</code> on the object.  From our perspective as programmers, it takes care of calling <code>release</code> for us, so we don't have to (and in fact, we shouldn't).</p><br/><br/><p>What's important to note is that (again, by convention) all object creation <em>class</em> methods return an autoreleased object.  For example, in the following example, the variable "s" has a reference count of 1, but after the event loop completes, it will be destroyed.</p><br/><br/><pre><code>NSString* s = [NSString stringWithString:@"Hello World"];<br/></code></pre><br/><br/><p>If you want to hang onto that string, you'd need to call <code>retain</code> explicitly, and then explicitly <code>release</code> it when you're done.</p><br/><br/><p>Consider the following (very contrived) bit of code, and you'll see a situation where <code>autorelease</code> is required:</p><br/><br/><pre><code>- (NSString*)createHelloWorldString<br/>{<br/>    NSString* s = [[NSString alloc] initWithString:@"Hello World"];<br/><br/>    // Now what?  We want to return s, but we've upped its reference count.<br/>    // The caller shouldn't be responsible for releasing it, since we're the<br/>    // ones that created it.  If we call release, however, the reference <br/>    // count will hit zero and bad memory will be returned to the caller.  <br/>    // The answer is to call autorelease before returning the string.  By <br/>    // explicitly calling autorelease, we pass the responsibility for<br/>    // releasing the string on to the thread's NSAutoreleasePool, which will<br/>    // happen at some later time.  The consequence is that the returned string <br/>    // will still be valid for the caller of this function.<br/>    return [s autorelease];<br/>}<br/></code></pre><br/><br/><p>I realize all of this is a bit confusing - at some point, though, it will click.  Here are a few references to get you going:</p><br/><br/><ul><br/><li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html" title="Apple's introduction to Cocoa's memory management">Apple's introduction</a> to memory management.</li><br/><li><a href="http://rads.stackoverflow.com/amzn/click/0321503619">Cocoa Programming for Mac OS X (3rd Edition)</a>, by Aaron Hillegas - a very well written book with lots of great examples.  It reads like a tutorial.</li><br/><li>If you're truly diving in, you could head to <a href="http://www.bignerdranch.com/" title="Big Nerd Ranch">Big Nerd Ranch</a>.  This is a training facility run by Aaron Hillegas - the author of the book mentioned above.  I attended the Intro to Cocoa course there several years ago, and it was a great way to learn.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB APPLIC TEMPLAT FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I found <a href="http://code.google.com/p/iphone-universal/" rel="nofollow" title="http://www.scribd.com/doc/2547864/msnetformattingstrings">iphone-universal</a> on Google Code the other day. Haven't had a chance to try it out but it looks promising.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCHANG CALENDAR IN PUBLIC FOLDER
    </pattern>
    <template>
<![CDATA[<p>There is no way to do this in the current iPhone OS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WIKI FOR MOBIL USER
    </pattern>
    <template>
<![CDATA[<p>W2 by Steven Frank (of Panic, makers of Transmit) is awesome. It's totally stripped down for iPhone--just the essentials. It supports markdown and basic Wiki-style formatting. <a href="http://code.google.com/p/w2wiki/" rel="nofollow">http://code.google.com/p/w2wiki/</a> That page has a link to a demo site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IPHON DEVELOP RESOURC
    </pattern>
    <template>
<![CDATA[<p><a href="http://icodeblog.com/category/iphone-programming-tutorials/page/2/" rel="nofollow">This site</a> covers some of the basics with little regard for the NDA. Start at the bottom and work up.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP FOR IPHON USE A WINDOW DEVELOP MACHIN
    </pattern>
    <template>
<![CDATA[<p>You'll have to get a Mac to build a real iPhone app, but you can get started with Objective C on a Windows using the gcc compiler.</p><br/><br/><p>You can download <a href="http://www.gnustep.org/experience/Windows.html">GNUStep for Windows</a> - the wiki there has <a href="http://www.gnustep.org/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html">a tutorial</a> for getting started with Objective C and <a href="http://cocoadevcentral.com/d/learn_objectivec/">this is another nice introduction</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MACHIN FOR IPHON DEVELOP
    </pattern>
    <template>
<![CDATA[<p>Any modern Mac will be fine. I work on a two year old MacBook (2GHz) with 2Gb of memory and its perfectly usable. The biggest constraint I find it screen real-estate. I am <em>way</em> more productive on my 22" external screen. Go big if you get an iMac or consider adding an external monitor to the base model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUAL MAC
    </pattern>
    <template>
<![CDATA[<p>It is <a href="http://blogs.vmware.com/vmtn/2008/01/virtual-leopa-1.html" rel="nofollow">legal</a> to run Mac OS X <strong>Server</strong> in a virtual machine <em>on Apple hardware</em>.  All other forms of Mac OS X virtualization are currently forbidden.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THAT ACCESS THE CORE LOCAT FRAMEWORK OVER WEB
    </pattern>
    <template>
<![CDATA[<p>Why not simply use W3C GeoLocation API available in mobile Safari? This will work on ipod touch as well (suburb precision).</p><br/><br/><p><a href="http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/GettingGeographicalLocations/GettingGeographicalLocations.html" rel="nofollow">http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/GettingGeographicalLocations/GettingGeographicalLocations.html</a></p><br/><br/><p>It's literally 10 lines of code and the javascript will work without change on Firefox 3.5. Far easier than scrape some third party website.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR A SUCCESS APPSTOR SUBMISS
    </pattern>
    <template>
<![CDATA[<p>First, don't worry about the missing author/title information (and icon) in iTunes. That's meta data which arrives when you distribute using the App Store.</p><br/><br/><p>Your bundle identifier, as sascha says, should be unique and is usually your domain backwards. This needs to match the App Id you created in the Developer Portal.</p><br/><br/><p>The Display Name (CFBundleDisplayName) is how it appears on the home screen. One important thing I found about this is that it can be localised, so if your app was called "Beer" in English, it could display as "Birra" in Italian and "Bier" in German.</p><br/><br/><p>The mechanical stuff, as long as you follow the instructions, is actually fairly straight forward. I found the key is being prepared. You basically get no notice before your App goes live, and the review process can take any where from a few hours to a few weeks. Make sure you have a website up and running and the ability to accept (and provide) feedback. I just used Blogger.</p><br/><br/><p>Unless your app is trivial the real world <em>will</em> find problems that you didn't anticipate and your unhappy users will always be the most vocal, so you need the ability to reply!</p><br/><br/><p>My app is <a href="http://www.yummyapp.com/">Yummy</a>, by the way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LAUNCH THE GOOGL MAP IPHON APPLIC FROM WITHIN MY OWN NATIV APPLIC
    </pattern>
    <template>
<![CDATA[<p>I believe UIApplication has an openURL method, that will perform the normal iPhone magical URL reinterpretation. so</p><br/><br/><pre><code>[someUIApplication openURL:[NSURL URLWithString:@"http://maps.google.com/maps?q=London"]]<br/></code></pre><br/><br/><p>should invoke the Google maps app.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPLATFORM FRAMEWORK FOR DEVELOP IPHON ANDROID APPLIC
    </pattern>
    <template>
<![CDATA[<p>Both Android and the iPhone have very strongly defined user interfaces. Even if you found a framework that bridged the huge differences on the most lower aspect levels (Android is programmed in Java on top of a custom VM, iPhone is native code programmed in Objective-C) and in the higher levels (iPhone apps are a completely sandboxed and isolated, the Android object model is distributed and classes are freely invoked between apps and libraries) your final app would feel alien and out of place in either of them. Think about the lack of multitouch in Android, or the lack of dedicated hardware buttons in the iPhone.</p><br/><br/><p>Your best bet would be to develop a platform specific user interface and have the model and core logic of your application in some kind of scripting language. Then find an interpreter in plain C (for the iPhone) and one in Java (for Android.) Scheme, Lisp and Javascript could fit the bill. Just make sure the interpreter is not exposed to end users or you would be violating the iPhone NDA...</p><br/><br/><p>If your app is data-heavy you could follow the model of many iPhone apps and develop native user interfaces for iPhone and Android, and have all the application logic in a remote server. Your UI becomes the only installed part of the application and everything else is hosted away on the net. This has the added advantage of having the possibility to offer roaming profiles between different devices and a web interface.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MESSAG FROM EXCHANG IMAP MAILBOX ON IPHON
    </pattern>
    <template>
<![CDATA[<p>I can wholeheartedly recommend writing such a process with a simple Perl client using the Mail::IMAPClient module.</p><br/><br/><pre><code>#!/usr/bin/perl -w<br/>use strict;<br/>use Mail::IMAPClient;<br/><br/># returns an unconnected Mail::IMAPClient object:<br/>my $imap = Mail::IMAPClient-&gt;new(  <br/>                    Server =&gt; $host,<br/>                    User    =&gt; $id,<br/>                    Password=&gt; $pass,<br/>)       or die "Cannot connect to $host as $id: $@";<br/>$imap-&gt;expunge();<br/></code></pre><br/><br/><p>This can then be run from crontab or some other scheduler.</p><br/><br/><p>Regards</p><br/><br/><p>Arjen</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MINU APP STORE
    </pattern>
    <template>
<![CDATA[<h1>Official Developer Program</h1><br/><br/><p>For a standard iPhone you'll need to pay the US$99/yr to be a member of the developer program. You can then use the adhoc system to install your application onto up to 100 devices. The developer program has the details but it involves adding UUIDs for each of the devices to your application package. UUIDs can be easiest retrieved using <a href="http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=285691333&amp;mt=8" rel="nofollow">Ad Hoc Helper</a> available from the App Store. For further details on this method, see Craig Hockenberry's <a href="http://furbo.org/2008/08/06/beta-testing-on-iphone-20/" rel="nofollow">Beta testing on iPhone 2.0</a> article</p><br/><br/><h1>Jailbroken iPhone</h1><br/><br/><p>For jailbroken iPhones, you can use the following method which I have personally tested using the <a href="http://developer.apple.com/iphone/library/samplecode/AccelerometerGraph/index.html" rel="nofollow">AccelerometerGraph</a> sample app on iPhone OS 3.0.</p><br/><br/><h2>Create Self-Signed Certificate</h2><br/><br/><p>First you'll need to create a self signed certificate and patch your iPhone SDK to allow the use of this certificate:</p><br/><br/><ol><br/><li><p>Launch Keychain Access.app. With no items selected, from the Keychain menu select Certificate Assistant, then Create a Certificate.</p><br/><br/><p>Name: iPhone Developer<br><br/>Certificate Type: Code Signing<br><br/>Let me override defaults: Yes  </p></li><br/><li><p>Click Continue</p><br/><br/><p>Validity: 3650 days</p></li><br/><li><p>Click Continue</p></li><br/><li><p>Blank out the Email address field.</p></li><br/><li><p>Click Continue until complete.</p><br/><br/><p>You should see "This root certificate is not trusted". This is expected.</p></li><br/><li><p>Set the iPhone SDK to allow the self-signed certificate to be used:</p><br/><br/><blockquote><br/>  <p>sudo /usr/bin/sed -i .bak 's/XCiPhoneOSCodeSignContext/XCCodeSignContext/' /Developer/Platforms/iPhoneOS.platform/Info.plist</p><br/></blockquote><br/><br/><p>If you have Xcode open, restart it for this change to take effect.</p></li><br/></ol><br/><br/><h2>Manual Deployment over WiFi</h2><br/><br/><p>The following steps require <code>openssh</code>, and <code>uikittools</code> to be installed first. Replace <code>jasoniphone.local</code> with the hostname of the target device.  Be sure to set your own password on both the <code>mobile</code> and <code>root</code> users after installing SSH.</p><br/><br/><p>To manually compile and install your application on the phone as a system app (bypassing Apple's installation system):</p><br/><br/><ol><br/><li><p>Project, Set Active SDK, Device and Set Active Build Configuration, Release.</p></li><br/><li><p>Compile your project normally (using Build, not Build &amp; Go).</p></li><br/><li><p>In the <code>build/Release-iphoneos</code> directory you will have an app bundle. Use your preferred method to transfer this to /Applications on the device.</p><br/><br/><blockquote><br/>  <p><code>scp -r AccelerometerGraph.app root@jasoniphone:/Applications/</code></p><br/></blockquote></li><br/><li><p>Let SpringBoard know the new application has been installed:</p><br/><br/><blockquote><br/>  <p><code>ssh mobile@jasoniphone.local uicache</code></p><br/></blockquote><br/><br/><p>This only has to be done when you add or remove applications. Updated applications just need to be relaunched.</p></li><br/></ol><br/><br/><p>To make life easier for yourself during development, you can setup SSH key authentication and add these extra steps as a custom build step in your project.</p><br/><br/><p>Note that if you wish to remove the application later you cannot do so via the standard SpringBoard interface and you'll need to use SSH and update the SpringBoard:</p><br/><br/><pre><code>ssh root@jasoniphone.local rm -r /Applications/AccelerometerGraph.app &amp;&amp;<br/>ssh mobile@jasoniphone.local uicache<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JUST THE IPHON SIMUL THAT IS RESTRICT TO INTEL ONLI MAC S
    </pattern>
    <template>
<![CDATA[<p>Don't Have An Intel Machine But Want To Code For The iPhone Anyway? Follow These Steps: <a href="http://3by9.com/85/" rel="nofollow">http://3by9.com/85/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BETA TEST AN IPHON APP
    </pattern>
    <template>
<![CDATA[<h1>Creating ad-hoc distribution profiles</h1><br/><br/><p>The instructions that Apple provides are not very concise or clear. This is how I created a general provisioning profile that will work with multiple apps, and added a beta tester.</p><br/><br/><p>My setup:</p><br/><br/><ul><br/><li>Xcode 3.2.1</li><br/><li>iPhone SDK 3.1.3</li><br/></ul><br/><br/><p>Before you get started, make sure that..</p><br/><br/><ul><br/><li>You can run the app on your own iPhone through Xcode.</li><br/></ul><br/><br/><h2>Step A: Add devices to the Provisioning Portal</h2><br/><br/><ol><br/><li><p>Send an email to each beta tester with the following message:</p><br/><br/><blockquote><br/>  <p>To get my app on onto your iPhone I need some information about your phone. Guess what, there is an app for that!</p><br/>  <br/>  <p>Click on the below link and install and then run the app.</p><br/>  <br/>  <p><a href="http://itunes.apple.com/app/ad-hoc-helper/id285691333?mt=8">http://itunes.apple.com/app/ad-hoc-helper/id285691333?mt=8</a></p><br/>  <br/>  <p>This app will create an email. Please send it to me.</p><br/></blockquote></li><br/><li><p>Collect all the UDIDs from your testers.</p></li><br/><li><p>Go to the <a href="http://developer.apple.com/iphone/manage/overview/index.action">Provisioning Portal</a>.</p></li><br/><li><p>Go to the section <strong>Devices</strong>.</p></li><br/><li><p>Click on the button <strong>Add Devices</strong> and add the devices previously collected.</p></li><br/></ol><br/><br/><h2>Step B: Create a new provisioning profile</h2><br/><br/><ol><br/><li><p>Start the Mac OS utility program <strong>Keychain Access</strong>.</p></li><br/><li><p>In its main menu, select <strong>Keychain Access  / Certificate Assistant / Request a Certificate From a Certificate Authority...</strong></p></li><br/><li><p>The dialog that pops up should aready have your email and name it it.</p></li><br/><li><p>Select the radio button <strong>Saved to disk</strong> and Continue.</p></li><br/><li><p>Save the file to disk.</p></li><br/><li><p>Go back to the <a href="http://developer.apple.com/iphone/manage/overview/index.action">Provisioning Portal</a>.</p></li><br/><li><p>Go to the section <strong>Certificates</strong>.</p></li><br/><li><p>Go to the tab <strong>Distribution</strong>.</p></li><br/><li><p>Click the button <strong>Request Certificate</strong>.</p></li><br/><li><p>Upload the file you created with Keychain Access: <strong>CertificateSigningRequest.certSigningRequest</strong>.</p></li><br/><li><p>Click the button <strong>Aprove</strong>.</p></li><br/><li><p>Refresh your browser until the status reads <strong>Issued</strong>.</p></li><br/><li><p>Click the <strong>Download button</strong> and save the file <strong>distribution_identify.cer</strong>.</p></li><br/><li><p>Doubleclick the file to add it to the Keychain.</p></li><br/><li><p>Backup the certificate by selecting its <em>private key</em> and the <strong>File / Export Items...</strong>.</p></li><br/><li><p>Go back to the <a href="http://developer.apple.com/iphone/manage/overview/index.action">Provisioning Portal</a> again.</p></li><br/><li><p>Go to the section <strong>Provisioning</strong>.</p></li><br/><li><p>Go to the tab <strong>Distribution</strong>.</p></li><br/><li><p>Click the button <strong>New Profile</strong>.</p></li><br/><li><p>Select the radio button <strong>Ad hoc</strong>.</p></li><br/><li><p>Enter a profile name, I named mine <em>Evertsson Common Ad Hoc</em>.</p></li><br/><li><p>Select the app id. I have a common app id to use for multiple apps: <em>Evertsson Common</em>.</p></li><br/><li><p>Select the devices, in my case my own and my tester's.</p></li><br/><li><p>Submit.</p></li><br/><li><p>Refresh the browser until the status field reads <strong>Active</strong>.</p></li><br/><li><p>Click the button <strong>Download</strong> and save the file to disk.</p></li><br/><li><p>Doubleclick the file to add it to Xcode.</p></li><br/></ol><br/><br/><h2>Step C: Build the app for distribution</h2><br/><br/><ol><br/><li><p>Open your project in Xcode.</p></li><br/><li><p>Open the <em>Project Info</em> pane: In <strong>Groups &amp; Files</strong> select the topmost item and press <strong>Cmd+I</strong>.</p></li><br/><li><p>Go to the tab <strong>Configuration</strong>.</p></li><br/><li><p>Select the configuration <strong>Release</strong>.</p></li><br/><li><p>Click the button <strong>Duplicate</strong> and name it <strong>Distribution</strong>.</p></li><br/><li><p>Close the Project Info pane.</p></li><br/><li><p>Open the <em>Target Info</em> pane: In <em>Groups &amp; Files</em> expand <em>Targets</em>, select your target and press <strong>Cmd+I</strong>.</p></li><br/><li><p>Go to the tab <strong>Build</strong>.</p></li><br/><li><p>Select the <em>Configuration</em> named <strong>Distribution</strong>.</p></li><br/><li><p>Find the section <strong>Code Signing</strong>.</p></li><br/><li><p>Set the value of <strong>Code Signing Identity / Any iPhone OS Device</strong> to <strong>iPhone Distribution</strong>.</p></li><br/><li><p>Close the Target Info pane.</p></li><br/><li><p>In the main window select the <em>Active Configuration</em> to <strong>Distribution</strong>.</p></li><br/><li><p>Create a new file from the file template <em>Code Signing / Entitlements</em>.</p></li><br/><li><p>Name it <strong>Entitlements.plist</strong>.</p></li><br/><li><p>In this file, uncheck the checkbox <strong>get-task-allow</strong>.</p></li><br/><li><p>Bring up the <em>Target Info</em> pane, and find the section <strong>Code Signing</strong> again.</p></li><br/><li><p>After <strong>Code Signing Entitlements</strong> enter the file name <strong>Entitlements.plist</strong>.</p></li><br/><li><p>Save, clean, and build the project.</p></li><br/><li><p>In <em>Groups &amp; Files</em> find the folder <strong>MyApp / Products</strong> and expand it.</p></li><br/><li><p>Right click the app and select <strong>Reveal in Finder</strong>.</p></li><br/><li><p>Zip the .app file and the .mobileprovision file and send the archive to your tester.</p><br/><br/><blockquote><br/>  <p>Here is my app. To install it onto your phone:</p><br/>  <br/>  <ol><br/>  <li><p>Unzip the archive file.</p></li><br/>  <li><p>Open iTunes.</p></li><br/>  <li><p>Drag both files into iTunes and drop them on the Library group.</p></li><br/>  <li><p>Sync your phone to install the app.</p></li><br/>  </ol><br/></blockquote></li><br/></ol><br/><br/><p>Done! Phew. This worked for me. So far I've only added one tester.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IPHON 1 2 HAVE A COMPASS INSID
    </pattern>
    <template>
<![CDATA[<p>The original iPhone and the iPhone 3G use GPS to calculate the heading, however the iPhone 3GS now has a 3-dimensional magnetometer compass in it.</p><br/><br/><p>This can only be done taking two GPS coordinates (while moving) and determining the direction from point A to B.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE NATIV IPHON APP USE PYTHON
    </pattern>
    <template>
<![CDATA[<p>Not currently, currently the only languages available to access the iPhone SDK are C/C++ and Objective C.</p><br/><br/><p>There is no technical reason why this could not change in the future but I wouldn't hold your breath for this happening in the short term.</p><br/><br/><p>That said, Objective C really isn't that scary...</p><br/>]]>    </template>
  </category>
</aiml>
