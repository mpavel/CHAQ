<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      CALCUL SOMEON S AGE IN C #
    </pattern>
    <template>
<![CDATA[<p>For some reason Jeff's code didn't seem simple enough. To me this seems simpler and easier to understand:</p><br/><br/><pre><code>DateTime now = DateTime.Today;<br/>int age = now.Year - bday.Year;<br/>if (bday &gt; now.AddYears(-age)) age--;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALCUL REL TIME
    </pattern>
    <template>
<![CDATA[<p>Jeff, <a href="http://stackoverflow.com/questions/11/how-do-i-calculate-relative-time/12#12">your code</a> is nice but could be clearer with constants (as suggested in Code Complete).</p><br/><br/><pre><code>const int SECOND = 1;<br/>const int MINUTE = 60 * SECOND;<br/>const int HOUR = 60 * MINUTE;<br/>const int DAY = 24 * HOUR;<br/>const int MONTH = 30 * DAY;<br/><br/>if (delta &lt; 0)<br/>{<br/>  return "not yet";<br/>}<br/>if (delta &lt; 1 * MINUTE)<br/>{<br/>  return ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";<br/>}<br/>if (delta &lt; 2 * MINUTE)<br/>{<br/>  return "a minute ago";<br/>}<br/>if (delta &lt; 45 * MINUTE)<br/>{<br/>  return ts.Minutes + " minutes ago";<br/>}<br/>if (delta &lt; 90 * MINUTE)<br/>{<br/>  return "an hour ago";<br/>}<br/>if (delta &lt; 24 * HOUR)<br/>{<br/>  return ts.Hours + " hours ago";<br/>}<br/>if (delta &lt; 48 * HOUR)<br/>{<br/>  return "yesterday";<br/>}<br/>if (delta &lt; 30 * DAY)<br/>{<br/>  return ts.Days + " days ago";<br/>}<br/>if (delta &lt; 12 * MONTH)<br/>{<br/>  int months = Convert.ToInt32(Math.Floor((double)ts.Days / 30));<br/>  return months &lt;= 1 ? "one month ago" : months + " months ago";<br/>}<br/>else<br/>{<br/>  int years = Convert.ToInt32(Math.Floor((double)ts.Days / 365));<br/>  return years &lt;= 1 ? "one year ago" : years + " years ago";<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIABL TIMER IN A CONSOL APPLIC
    </pattern>
    <template>
<![CDATA[<p>You can use something like Console.ReadLine() to block the main thread, so other background threads (like timer threads) will still work. You may also use an <a href="http://msdn.microsoft.com/en-us/library/system.threading.autoresetevent.aspx" rel="nofollow">AutoResetEvent</a> to block the execution, then (when you need to) you can call Set() method on that AutoResetEvent object to release the main thread. Also ensure that your reference to Timer object doesn't go out of scope and garbage collected.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATOMI OF A MEMORI LEAK
    </pattern>
    <template>
<![CDATA[<p>The best explanation I've seen is in Chapter 7 of the free <a href="http://codebetter.com/files/folders/codebetter_downloads/entry179694.aspx" rel="nofollow">Foundations of Programming ebook</a>.</p><br/><br/><p>Basically, in .NET a memory leak occurs when referenced objects are rooted and thus cannot be garbage collected. This occurs accidentally when you hold on to references beyond the intended scope.</p><br/><br/><p>You'll know that you have leaks when you start getting outofmemoryexceptions or your memory usage goes up beyond what you'd expect (perfmon has nice memory counters). </p><br/><br/><p>Understanding .NET's memory model is your best way of avoiding it. Specifically, understanding how the garbage collector works and how references work (again, I refer you to chapter 7 of the ebook). Also, be mindful of common pitfalls, probably the most common being events. If object A registered to an event on object B, then object A will stick around until object B disappears because B holds a reference to A. The solution is to unregister your events when you're done. </p><br/><br/><p>Of course, a good memory profile will let you see your object graphs and explore the nesting/referencing of your objects to see where references are coming from and what root object is responsible (<a href="http://www.red-gate.com/products/ants_memory_profiler/index.htm" rel="nofollow">red-gate ants profile</a>, JetBrains dotTrace, <a href="http://memprofiler.com/" rel="nofollow">memprofiler</a> are really good choices, or you can use the text-only windbg and sos, but I'd strongly recommend a commercial/visual product unless you're a real guru).</p><br/><br/><p>I believe unmanaged code is subject to typical memory leaks of unamanged code, except that references shared between the two are managed by the garbage collector. Could be wrong about this last point.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      T SQL CAST IN C # VB.NET
    </pattern>
    <template>
<![CDATA[<p>Hazzah!!!!</p><br/><br/><p>I went back to Michael's post, did some more poking and realized that I did needed to do a double conversion, and eventually worked out this little nugget:</p><br/><br/><pre><code>Convert.ToString(Convert.ToChar(Int32.Parse(EncodedString.Substring(intParseIndex, 2), System.Globalization.NumberStyles.HexNumber)));<br/></code></pre><br/><br/><p>From there I simply made a loop to go through all the characters 2 by 2 and get them "hexified" and then translated to a string.</p><br/><br/><p>To Nick, and anybody else interested, I went ahead and <a href="http://www.codeplex.com/urldecoder" rel="nofollow">posted my little app</a> over in CodePlex, feel free to use/modify as you need.</p><br/><br/><p>Thanks again all!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POINT NUMBER PARS IS THERE A CATCH ALL ALGORITHM
    </pattern>
    <template>
<![CDATA[<p>I think the best you can do in this case is to take their input and then show them what you think they meant. If they disagree, show them the format you're expecting and get them to enter it again.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SCRIPT FUNCTION TO .NET APPLIC
    </pattern>
    <template>
<![CDATA[<p>Oleg Shilo's C# Script solution (at <a href="http://en.wikipedia.org/wiki/The_Code_Project" rel="nofollow">The Code Project</a>) really is a great introduction to providing script abilities in your application.</p><br/><br/><p>A different approach would be to consider a language that is specifically built for scripting, such as <a href="http://en.wikipedia.org/wiki/IronRuby" rel="nofollow">IronRuby</a>, <a href="http://en.wikipedia.org/wiki/IronPython" rel="nofollow">IronPython</a>, or <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29" rel="nofollow">Lua</a>.</p><br/><br/><p>IronPython and IronRuby are both available today.</p><br/><br/><p>For a guide to embedding IronPython read<br/><a href="http://blogs.msdn.com/b/jmstall/archive/2005/09/01/howto-embed-ironpython.aspx" rel="nofollow" title="How to embed IronPython script support in your existing app in 10 easy steps">How to embed IronPython script support in your existing app in 10 easy steps</a>.</p><br/><br/><p>Lua is a scripting language commonly used in games. There is a Lua compiler for .NET, available from CodePlex -- <a href="http://www.codeplex.com/Nua" rel="nofollow" title="Nua is Lua for .net">http://www.codeplex.com/Nua</a></p><br/><br/><p>That codebase is a great read if you want to learn about building a compiler in .NET.</p><br/><br/><p>A different angle altogether is to try <a href="http://en.wikipedia.org/wiki/Windows_PowerShell" rel="nofollow">PowerShell</a>. There are numerous examples of embedding PowerShell into an application -- here's a thorough project on the topic: <br/><a href="http://code.msdn.microsoft.com/PowerShellTunnel/Wiki/View.aspx?title=PowerShellTunnel%20Reference" rel="nofollow" title="PowerShell Tunnel">Powershell Tunnel</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN INT AND AN INTEG IN JAVA C #
    </pattern>
    <template>
<![CDATA[<p>In object oriented languages such as Java and C#, the 'int' type is a primitive , whereas the 'Integer' type is an object.</p><br/><br/><p>The differences between objects and primitives are somewhat beyond the scope of this question, but to summarize: </p><br/><br/><p><strong>Objects</strong> provide facilities for polymorphism, are passed by reference, and are allocated from the <a href="http://en.wikipedia.org/wiki/Dynamic_memory_allocation" rel="nofollow">heap</a>. Conversely, <strong>primitives</strong> are passed by value and are allocated from the <a href="http://en.wikipedia.org/wiki/Stack-based_memory_allocation" rel="nofollow">stack</a>.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT VERSION NUMBER
    </pattern>
    <template>
<![CDATA[<p>With the "Built in" stuff, you can't, as using 1.0.* or 1.0.0.* will replace the revision and build numbers with a coded date/timestamp, which is usually also a good way. For more info, see the <a href="http://msdn2.microsoft.com/en-us/library/c405shex%28vs.80%29.aspx" rel="nofollow">Assembly Linker</a> Documentation in the /v tag.</p><br/><br/><p>As for automatically incrementing numbers, use the AssemblyInfo Task:</p><br/><br/><p><a href="http://code.msdn.microsoft.com/AssemblyInfoTaskvers" rel="nofollow">http://code.msdn.microsoft.com/AssemblyInfoTaskvers</a></p><br/><br/><p>This can be configured to automatically increment the build number.</p><br/><br/><p>There are 2 Gotchas:</p><br/><br/><ol><br/><li>Each of the 4 numbers in the Version string is limited to 65535. This is a Windows Limitation and unlikely to get fixed.<br/><ul><br/><li><a href="http://blogs.msdn.com/msbuild/archive/2007/01/03/why-are-build-numbers-limited-to-65535.aspx" rel="nofollow">http://blogs.msdn.com/msbuild/archive/2007/01/03/why-are-build-numbers-limited-to-65535.aspx</a></li><br/></ul></li><br/><li>Using with with Subversion requires a small change:<br/><ul><br/><li><a href="http://www.andrewconnell.com/blog/archive/2006/08/29/4078.aspx" rel="nofollow">http://www.andrewconnell.com/blog/archive/2006/08/29/4078.aspx</a></li><br/></ul></li><br/></ol><br/><br/><p>Retreiving the Version number is then quite easy:</p><br/><br/><pre><code>Version v = Assembly.GetExecutingAssembly().GetName().Version;<br/>string About = string.Format(CultureInfo.InvariantCulture, @"YourApp Version {0}.{1}.{2} (r{3})", v.Major, v.Minor, v.Build, v.Revision);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST FRAMEWORK ADVIC
    </pattern>
    <template>
<![CDATA[<p>I think NUnit <strong>is</strong> your best bet. With TestDriven.NET, you get great integration within VS.NET. (Resharper also has a unit test runner if you're using it).  NUnit it simple to use and follows an established paradigm. You'll also find plenty of projects/tutorials/guides using it which always helps.</p><br/><br/><p>Your other main choice is probably MBUnit, which is more and more position itself as the BDD framework of choice (in conjunction with Gallio <a href="http://www.gallio.org" rel="nofollow">http://www.gallio.org</a>).</p>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW OBJECT INSTANC FROM A TYPE IN C #
    </pattern>
    <template>
<![CDATA[<p>The Activator class within the root System namespace is pretty powerful.</p><br/><br/><p>There are a lot of overloads for passing parameters to the constructor and such. Check out the documentation at: <a href="http://msdn.microsoft.com/en-us/library/system.activator.createinstance.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.activator.createinstance.aspx</a></p><br/><br/><p>Here are some simple examples:</p><br/><br/><pre><code>ObjectType instance = (ObjectType)Activator.CreateInstance(objectType);<br/><br/>ObjectType instance = (ObjectType)Activator.CreateInstance("MyNamespace.ObjectType, MyAssembly");<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNHANDL EXCEPT HANDLER IN .NET 1.1
    </pattern>
    <template>
<![CDATA[<p>Oh, in WinForms you definitely should be able to get it to work. The only thing you have to watch out for is things happening on different threads.</p><br/><br/><p>I have an old CodeProject article here which should help:</p><br/><br/><p><a href="http://www.codeproject.com/KB/exception/ExceptionHandling.aspx" rel="nofollow">http://www.codeproject.com/KB/exception/ExceptionHandling.aspx</a></p>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU OF BUILT ENCOD VIEWSTAT
    </pattern>
    <template>
<![CDATA[<p>Rex, I suspect a good place to start looking is solutions that <strong>compress the ViewState</strong> -- they're grabbing ViewState on the server before it's sent down to the client and gzipping it. That's exactly where you want to be.</p><br/><br/><ul><br/><li><a href="http://www.hanselman.com/blog/CommentView,guid,febce059-7e7c-439e-af3d-c53d250b3e9c.aspx" rel="nofollow">Scott Hanselman on ViewState Compression</a> (2005)</li><br/><li><a href="http://www.bloggingdeveloper.com/post/How-To-Compress-ViewState-in-ASPNET-20-ViewState-Compression-with-SystemIOCompression.aspx" rel="nofollow">ViewState Compression with System.IO.Compression</a> (2007)</li><br/></ul>]]>    </template>
  </category>
  <category>
    <pattern>
      STAT INVALID WHEN USE SAFARI
    </pattern>
    <template>
<![CDATA[<p>I've been doing a little research into this and whilst I'm not entirely sure its the cause I believe it is because Safari is not returning the full result set (hence cropping it).</p><br/><br/><p>I have been in dicussion with another developer and found the following post on Channel 9 as well which recommends making use of the SQL State service to store the viewstate avoiding the postback issue and also page size.</p><br/><br/><p><a href="http://channel9.msdn.com/forums/TechOff/250549-ASPNET-ViewState-flawed-architecture/?CommentID=270477#263702" rel="nofollow">http://channel9.msdn.com/forums/TechOff/250549-ASPNET-ViewState-flawed-architecture/?CommentID=270477#263702</a></p><br/><br/><p>Does this seem like the best solution?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE LOCK IN C #
    </pattern>
    <template>
<![CDATA[<p>No, unfortunately, and if you think about it, that information would be worthless anyway since the file could become locked the very next second (read: short timespan).</p><br/><br/><p>Why specifically do you need to know if the file is locked anyway? Knowing that might give us some other way of giving you good advice.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST PACKAG
    </pattern>
    <template>
<![CDATA[<p>There are so many it's crazy.  Crazy good, I guess.</p><br/><br/><ul><br/><li>For the conservative types (me), <a href="http://www.nunit.org/" rel="nofollow"><strong>NUnit</strong></a> is still available and still more than capable.</li><br/><li>For the Microsoft-types, <a href="http://msdn.microsoft.com/en-us/vstudio/default.aspx" rel="nofollow"><strong>MSTest</strong></a> is adequate, but slow and clunky compared to Nunit.  It also lacks code coverage without paying the big bucks for the pricey versions of Visual Studio.</li><br/><li>There's also <a href="http://www.mbunit.com/About.aspx" rel="nofollow"><strong>MbUnit</strong></a>.  It's like NUnit, but has nifty features like RowTest (run the same test with different parameters) and Rollback (put the database back like you found it after a test) </li><br/><li>And finally, <a href="http://www.codeplex.com/xunit" rel="nofollow"><strong>xUnit.net</strong></a> is the trendy option with some attitude.</li><br/><li>Oh, and <a href="http://testdriven.net/" rel="nofollow"><strong>TestDriven.NET</strong></a> will give you IDE integration for both Nunit and MBunit.</li><br/></ul><br/><br/><p>I'm sure they're all just fine.  I'd steer away from MSTest though, unless you just enjoy the convenience of having everything in one IDE out of the box.</p><br/><br/><p><a href="http://www.hanselminutes.com/default.aspx?showID=130" rel="nofollow">Scott Hanselman</a> has a podcast on this very topic.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOACT IN ASP.NET MVC WITHOUT LOSE REQUEST DATA
    </pattern>
    <template>
<![CDATA[<p>The solution is to use the TempData property to store the desired Request components.</p><br/><br/><p>For instance:</p><br/><br/><pre><code>public ActionResult Send()<br>{<br>    TempData["form"] = Request.Form;<br>    return this.RedirectToAction(a =&gt; a.Form());<br>}<br></code></pre><br/><br/><p>Then in your "Form" action you can go:</p><br/><br/><pre><code>public ActionResult Form()<br>{<br>    /* Declare viewData etc. */<br><br>    if (TempData["form"] != null)<br>    {<br>        /* Cast TempData["form"] to <br>        System.Collections.Specialized.NameValueCollection <br>        and use it */<br>     }<br>     return View("Form", viewData);<br> }<br></code></pre>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST OBJECT TYPE
    </pattern>
    <template>
<![CDATA[<P>would use double.TryParse , has performance benefits.</P>]]>    </template>
  </category>
  <category>
    <pattern>
      BACKGROUND OF A MASTERPAG FROM THE CODE BEHIND OF A CONTENT PAGE
    </pattern>
    <template>
<![CDATA[<p>What I would do for the particular case is:</p><br/><br/><p>i. Define the body as a server side control</p><br/><br/><pre><code>&lt;body runat="server" id="masterpageBody"&gt;<br></code></pre><br/><br/><p>ii. In your content aspx page, register the MasterPage with the register:</p><br/><br/><pre><code>&lt;% MasterPageFile="..." %&gt;<br></code></pre><br/><br/><p>iii. In the Content Page, you can now simply use </p><br/><br/><pre><code>Master.FindControl("masterpageBody")<br></code></pre><br/><br/><p>and have access to the control. Now, you can change whatever properties/style that you like!</p>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT BDD TDD IN .NET 2.0
    </pattern>
    <template>
<![CDATA[<p>We use <a href="http://www.mbunit.com/" rel="nofollow">MbUnit</a> and <a href="http://www.ayende.com/Blog/archive/2007/03/28/Rhino-Mocks-3.0-Released.aspx" rel="nofollow">Rihno Mocks</a> and they prove to work very well together. When doing TDD you will almost certainly need to do some form of dependency injection, while this can be done manually, its worth looking at an IoC container such as <a href="http://www.castleproject.org/container/index.html" rel="nofollow">Castle Windor</a>.</p><br/><br/><p>It well worth looking at John Paul Bodhood's screen casts to get you started. <a href="http://blog.jpboodhoo.com/ScreencastAppliedTestDrivenDevelopmentForWebApplicationsPart3.aspx" rel="nofollow">JPB's Blog</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( NEWTYP ) VS. OBJECT AS NEWTYP
    </pattern>
    <template>
<![CDATA[<p>The former will throw an exception if the source type can't be cast to the target type. The latter will result in sc2 being a null reference, but no exception.</p><br/><br/><p>[Edit]</p><br/><br/><p>My original answer is certainly the most pronounced difference, but as Eric Lippert <a href="http://blogs.msdn.com/ericlippert/archive/2009/10/08/what-s-the-difference-between-as-and-cast-operators.aspx" rel="nofollow">points out</a>, it's not the only one. Other differences include:</p><br/><br/><ul><br/><li>You can't use the 'as' operator to cast to a type that doesn't accept 'null' as a value</li><br/><li>You can't use 'as' to <em>convert</em> things, like numbers to a different representation (float to int, for example).</li><br/></ul><br/><br/><p>And finally, using 'as' vs. the cast operator, you're also saying "I'm not sure if this will succeed." </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT TO NULL NOTH AFTER USE IN .NET
    </pattern>
    <template>
<![CDATA[<P>Karl is absolutely correct, there is no need to set objects to null after use. If an object implements IDisposable, just make sure you call IDisposable.Dispose() when you're done with that object (wrapped in a try..finally, or, a using() block). But even if you don't remember to call Dispose, the finaliser method on the object should be calling Dispose() for you.</P><br/><P>I thought this was a good treatment:</P><br/><P><A href="http://msdn.microsoft.com/en-us/magazine/cc163392.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/magazine/cc163392.aspx</A></P><br/><P>and this</P><br/><P><A href="http://www.marcclifton.com/tabid/79/Default.aspx" rel="nofollow">http://www.marcclifton.com/tabid/79/Default.aspx</A></P><br/><P>There isn't any point in trying to second guess the GC and its management strategies because it's self tuning and opaque. There was a good discussion about the inner workings with Jeffrey Richter on Dot Net Rocks here: <A href="http://www.dotnetrocks.com/default.aspx?showNum=361" rel="nofollow">http://www.dotnetrocks.com/default.aspx?showNum=361</A> and Richters book <A href="http://www.compman.co.uk/scripts/browse.asp?ref=747022" rel="nofollow">CLR via C#</A> chapter 20 has a great treatment: </P>]]>    </template>
  </category>
  <category>
    <pattern>
      C C + + DATA STRUCTUR IN C # FROM A BYTE ARRAY
    </pattern>
    <template>
<![CDATA[<p>From what I can see in that context, you don't need to copy SomeByteArray into a buffer. You simply need to get the handle from SomeByteArray, pin it, copy the IntPtr data using PtrToStructure and then release. No need for a copy.</p><br/><br/><p>That would be:</p><br/><br/><pre><code>NewStuff ByteArrayToNewStuff(byte[] bytes)<br/>{<br/>    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);<br/>    NewStuff stuff = (NewStuff)Marshal.PtrToStructure(<br/>        handle.AddrOfPinnedObject(), typeof(NewStuff));<br/>    handle.Free();<br/>    return stuff;<br/>}<br/></code></pre><br/><br/><p>Generic version:</p><br/><br/><pre><code>T ByteArrayToStructure&lt;T&gt;(byte[] bytes) where T: struct <br/>{<br/>    GCHandle handle = GCHandle.Alloc(bytes, GCHandleType.Pinned);<br/>    T stuff = (T)Marshal.PtrToStructure(handle.AddrOfPinnedObject(),<br/>        typeof(T));<br/>    handle.Free();<br/>    return stuff;<br/>}<br/></code></pre><br/><br/><p>...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPIN OFF SEVER GUI THREAD ( NOT HALT THE SYSTEM AT APPLICATION.RUN )
    </pattern>
    <template>
<![CDATA[<p><strong>Application.Run</strong> method displays one (or more) forms and initiates the standard message loop which runs until all the forms are closed. You cannot force a return from that method except by closing all your forms or forcing an application shutdown.</p><br/><br/><p>You can, however, pass an <strong>ApplicationContext</strong> (instad of a new Form()) to Application.Run method and ApplicationContext can be used to launch several forms at once. Your application will only end when all of those are closed. See here: <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.application.run.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.windows.forms.application.run.aspx</a></p><br/><br/><p>Also, any forms that you Show non-modally will continue to run alongside your main form, which will enable you to have more than one windows that do not block each other. I believe this is actually what you are trying to accomplish.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE ABSTRACT STATIC METHOD IN C #
    </pattern>
    <template>
<![CDATA[<p>Static methods are not <em>instantiated</em> as such, they're just available without an object reference.</p><br/><br/><p>A call to a static method is done through the class name, not through an object reference, and the IL code to call it will call the abstract method through the name of the class that defined it, not necessarily the name of the class you used.</p><br/><br/><p>Let me show an example.</p><br/><br/><p>With the following code:</p><br/><br/><pre><code>public class A<br>{<br>    public static void Test()<br>    {<br>    }<br>}<br><br>public class B : A<br>{<br>}<br></code></pre><br/><br/><p>If you call B.Test, like this:</p><br/><br/><pre><code>class Program<br>{<br>    static void Main(string[] args)<br>    {<br>        B.Test();<br>    }<br>}<br></code></pre><br/><br/><p>Then the actual code inside the Main method is as follows:</p><br/><br/><pre><code>.entrypoint<br>.maxstack 8<br>L0000: nop <br>L0001: call void ConsoleApplication1.A::Test()<br>L0006: nop <br>L0007: ret <br></code></pre><br/><br/><p>As you can see, the call is made to A.Test, because it was the A class that defined it, and not to B.Test, even though you can write the code that way.</p><br/><br/><p>If you had <em>class types</em>, like in Delphi, where you can make a variable referring to a type and not an object, you would have more use for virtual and thus abstract static methods (and also constructors), but they aren't available and thus static calls are non-virtual in .NET.</p><br/><br/><p>I realize that the IL designers could allow the code to be compiled to call B.Test, and resolve the call at runtime, but it still wouldn't be virtual, as you would still have to write some kind of class name there.</p><br/><br/><p>Virtual methods, and thus abstract ones, are only useful when you're using a variable which, at runtime, can contain many different types of objects, and you thus want to call the right method for the current object you have in the variable. With static methods you need to go through a class name anyway, so the exact method to call is known at compile time because it can't and won't change.</p><br/><br/><p>Thus, virtual/abstract static methods are not available in .NET.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SP.NET FUNCTION FROM JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Well, if you don't want to do it using AJAX or any other way and just want a normal ASP.NET postback to happen, here is how you do it (without using any other libraries):</p><br/><br/><p><em>It is a little tricky though... :)</em></p><br/><br/><p>i. In your code file (assuming you are using C# and .NET 2.0 or later) add the following Interface to your Page Class to make it look like</p><br/><br/><pre><code>public partial class Default : System.Web.UI.Page, IPostBackEventHandler{}<br/></code></pre><br/><br/><p>ii. This should add (using Tab-Tab) this function to your code file:</p><br/><br/><pre><code>public void RaisePostBackEvent(string eventArgument) { }<br/></code></pre><br/><br/><p>iii. In your onclick event in Javascript write the following code:</p><br/><br/><pre><code>var pageId = '&lt;%=  Page.ClientID %&gt;';<br/>__doPostBack(pageId, argumentString);<br/></code></pre><br/><br/><p>This will call the 'RaisePostBackEvent' method in your code file with the 'eventArgument' as the 'argumentString' you passed from the Javascript. Now, you can call any other event you like.</p><br/><br/><p>P.S: That is 'underscore-underscore-doPostBack' ... And, there should be no space in that sequence... Somehow the WMD does not allow me to write to underscores followed by a character!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET PROFIL
    </pattern>
    <template>
<![CDATA[<p>I have used <a href="http://www.jetbrains.com/profiler/">JetBrains dotTrace</a> and <a href="http://www.red-gate.com/products/ants_performance_profiler/">Redgate ANTS</a> extensively. They are fairly similar in features and price. They both offer useful performance profiling and quite basic memory profiling.</p><br/><br/><p>dotTrace integrates with Resharper, which is really convenient, as you can profile the performance of a unit test with one click from the IDE. However, dotTrace often seems to give spurious results (e.g. saying that a method took several years to run)</p><br/><br/><p>I prefer the way that ANTS presents the profiling results. It shows you the source code and to the left of each line tells you how long it took to run. dotTrace just has a tree view.</p><br/><br/><p><a href="http://www.eqatec.com/Profiler/">EQATEC profiler</a> is quite basic and requires you to compile special instrumented versions of your assemblies which can then be run in the EQATEC profiler. It is, however, free.</p><br/><br/><p>Overall I prefer ANTS for performance profiling, although if you use Resharper then the integration of dotTrace is a killer feature and means it beats ANTS in usability.</p><br/><br/><p>The free Microsoft CLR Profiler (<a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=13382">.Net framework 2.0</a> / <a href="http://www.microsoft.com/download/en/details.aspx?id=16273">.Net Framework 4.0</a>) is all you need for .NET memory profiling.</p><br/><br/><p><strong>2011 Update:</strong></p><br/><br/><p>The <a href="http://memprofiler.com/">Scitech memory profiler</a> has quite a basic UI but lots of useful information, including some information on unmanaged memory which dotTrace and ANTS lack - you might find it useful if you are doing COM interop, but I have yet to find any profiler that makes COM memory issues easy to diagnose - you usually have to break out <code>windbg.exe</code>.</p><br/><br/><p>The ANTS profiler has come on in leaps and bounds in the last few years, and its memory profiler has some truly useful features which now pushed it ahead of dotTrace as a package in my estimation. I'm lucky enough to have licenses for both, but if you are going to buy one .Net profiler for both performance and memory, make it ANTS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET
    </pattern>
    <template>
<![CDATA[<BLOCKQUOTE><br/><P>I can see a downside being that you <STRONG>have</STRONG> to run it on Windows</P></BLOCKQUOTE><br/><P>That's actually untrue. The <A href="http://www.mono-project.com/Main_Page" rel="nofollow">Mono Project</A> has made great progress on making .NET applications cross-platform. A client that my company has worked with recently was actually using Mono on Linux servers to run C#.NET Web Services. The system worked out very well and is very stable.</P><br/><P><STRONG>Edit</STRONG>:</P><br/><BLOCKQUOTE><br/><P><A href="http://stackoverflow.com/questions/3999/why-net#4016" rel="nofollow">kevin d wrote</A>: $$$$$$$$$</P></BLOCKQUOTE><br/><P>This is another really good point. Go have a look at the sheer number of .NET job opportunities there are available and how much they usually pay.</P>]]>    </template>
  </category>
  <category>
    <pattern>
      ATIONMANAGER.APPSET PERFORM CONCERN
    </pattern>
    <template>
<![CDATA[<p>since you're using a winforms app, if it's in .net 2.0 there's actually a user settings system (called Properties) that is designed for this purpose. <a href="http://msdn.microsoft.com/en-us/library/aa730869(VS.80).aspx" rel="nofollow">This article on MSDN</a> has a pretty good introduction into this</p><br/><br/><p>If you're still worried about performance then take a look at <a href="http://www.microsoft.com/sql/editions/compact/default.mspx" rel="nofollow">SQL Compact Edition</a> which is similar to SQLite but is the Microsoft offering which I've found plays very nicely with winforms and there's even the ability to <a href="http://geekswithblogs.net/steveclements/archive/2007/11/13/LINQ-to-SQL.compact.aspx" rel="nofollow">make it work with Linq</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS A DICTIONARY.KEY KEY THROUGH A NUMER INDEX
    </pattern>
    <template>
<![CDATA[<p>You can use an <a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.ordereddictionary.aspx" rel="nofollow">OrderedDictionary</a>.</p><br/><br/><blockquote><br/>  <p>Represents a collection of key/value<br/>  pairs that are accessible by the key<br/>  or index.</p><br/></blockquote>]]>    </template>
  </category>
  <category>
    <pattern>
      HIGH AVAIL
    </pattern>
    <template>
<![CDATA[<p>You need to use a layer 4 load balancer in front of the two endpoints. Prob best to stick with a dedicated piece of hardware.</p><br/><br/><p><a href="http://en.wikipedia.org/wiki/Load_balancing_" rel="nofollow">http://en.wikipedia.org/wiki/Load_balancing_</a>(computing)#Relationship<em>with</em>failover</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DO UNIT TEST FOR ASP.NET 2.0 WEB PAGE
    </pattern>
    <template>
<![CDATA[<p>Boy, that's a pretty general question.  I'll do my best, but be prepared to see me miss by a mile.</p><br/><br/><p>Assumptions</p><br/><br/><ol><br/><li>You are using ASP.NET, not plain ASP</li><br/><li>You don't really want to test your web pages, but the <strong>logic</strong> behind them. Unit testing the actual .ASPX pages is rather painful, but there are frameworks out there to do it.  <a href="http://nunitasp.sourceforge.net/" rel="nofollow">NUnitAsp</a> is one.</li><br/></ol><br/><br/><p>The first thing to do is to organize (or plan) your code so that it can be tested.  The two most popular design patterns for this at the time seem to be MVP and MVC.  Both separate the <strong>logic</strong> of the application away from the <strong>view</strong> so that you can test the logic without the view (web pages) getting in your way.</p><br/><br/><p>Either MVP or MVC will be effective.  MVC has the advantage of having a Microsoft framework <a href="http://www.asp.net/mvc/" rel="nofollow">almost ready to go</a>.  </p><br/><br/><p>Once you've selected a framework pattern that encourages testability, you need to use a unit testing tool.  <a href="http://www.nunit.org/" rel="nofollow">NUnit</a> is a good starting point.  Visual Studio Professional has a <a href="http://msdn.microsoft.com/en-us/library/bb385902.aspx" rel="nofollow">testing suite built it</a>, but NUnit + <a href="http://www.testdriven.net/" rel="nofollow">TestDrive.NET</a> also works in the IDE.</p><br/><br/><p>That's sort of a shotgun blast of information.  I hope some if it hits.  The Pragmatic Bookshelf has a <a href="http://rads.stackoverflow.com/amzn/click/0974514020" rel="nofollow">good book covering the topic</a>.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      PROTOTYP METHOD
    </pattern>
    <template>
<![CDATA[<p>You can't dynamically add methods to existing objects or classes in .NET, except by changing the source for that class.</p><br/><br/><p>You can, however, in C# 3.0, use extension methods, which <em>look</em> like new methods, but are compile-time magic.</p><br/><br/><p>To do this for your code:</p><br/><br/><pre><code>public static class StringExtensions<br>{<br>    public static String trim(this String s)<br>    {<br>        return s.Trim();<br>    }<br>}<br></code></pre><br/><br/><p>To use it:</p><br/><br/><pre><code>String s = "  Test  ";<br>s = s.trim();<br></code></pre><br/><br/><p>This looks like a new method, but will compile the exact same way as this code:</p><br/><br/><pre><code>String s = "  Test  ";<br>s = StringExtensions.trim(s);<br></code></pre><br/><br/><p>What exactly are you trying to accomplish? Perhaps there are better ways of doing what you want?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FOLDER IN A SOLUT MATCH THE NAMESPAC
    </pattern>
    <template>
<![CDATA[<p>Also, note that if you use the built-in templates to add classes to a folder, it will by default be put in a namespace that reflects the folder hierarchy.</p><br/><br/><p>The classes will be easier to find and that alone should be reasons good enough.</p><br/><br/><p>The rules we follow are:</p><br/><br/><ul><br/><li>Project/assembly name is the same as the root namespace, except for the .dll ending</li><br/><li>Only exception to the above rule is a project with a .Core ending, the .Core is stripped off</li><br/><li>Folders equals namespaces</li><br/><li>One type per file (class, struct, enum, delegate, etc.) makes it easy to find the right file</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESOLV A DOMAIN NAME TO AN IP ADDRESS WITH .NET C #
    </pattern>
    <template>
<![CDATA[<pre><code>using System.Net;<br><br>foreach (IPAddress address in Dns.GetHostAddresses("www.google.com"))<br>{<br>   Console.WriteLine(address.ToString());<br>}<br></code></pre>]]>    </template>
  </category>
  <category>
    <pattern>
      BUTTON APPEAR AS IF IT IS PRESS
    </pattern>
    <template>
<![CDATA[<p>One method you can used to obtain this option is by placing a "CheckBox" object and changing its "Appearance" from "Normal" to "Button" this will give you the same functionality that I believe you are looking for.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      TO MULTIPL VERSION ASSEMBL
    </pattern>
    <template>
<![CDATA[<P>Is this what you need?</P><br/><P><A href="http://www.infosysblogs.com/microsoft/2007/04/loading_multiple_versions_of_s.html" rel="nofollow">http://www.infosysblogs.com/microsoft/2007/04/loading_multiple_versions_of_s.html</A></P>]]>    </template>
  </category>
  <category>
    <pattern>
      POST AND THEN REDIRECT TO AN EXTERN URL FROM ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Here's I solved this problem today.  I started from <a href="http://www.c-sharpcorner.com/UploadFile/desaijm/ASP.NetPostURL11282005005516AM/ASP.NetPostURL.aspx" rel="nofollow">this article</a> on C# Corner, but found the example - while technically sound - a little incomplete.  Everything he said was right, but I needed to hit a few external sites to piece this together to work exactly as I wanted.</p><br/><br/><p>It didn't help that the user was not technically submitting a form at all; they were clicking a link to go to our support center, but to log them in an http post had to be made to the support center's site.</p><br/><br/><p>This solution involves using HttpContext.Current.Response.Write() to write the data for the form, then using a bit of Javascript on the </p><br/><br/><pre><code>&lt;body onload=""&gt; <br></code></pre><br/><br/><p>method to submit the form to the proper URL.</p><br/><br/><p>When the user clicks on the Support Center link, the following method is called to write the response and redirect the user:</p><br/><br/><pre><code>public static void PassthroughAuthentication()<br>{<br><br>    System.Web.HttpContext.Current.Response.Write("&lt;body <br>    onload=document.forms[0].submit();window.location=\"Home.aspx\";&gt;");<br><br>    System.Web.HttpContext.Current.Response.Write("&lt;form name=\"Form\" <br>    target=_blank method=post <br>    action=\"https://external-url.com/security.asp\"&gt;");<br><br>    System.Web.HttpContext.Current.Response.Write(string.Format("&lt;input <br>       type=hidden name=\"cFName\" value=\"{0}\"&gt;", "Username"));<br><br>    System.Web.HttpContext.Current.Response.Write("&lt;/form&gt;");<br>    System.Web.HttpContext.Current.Response.Write("&lt;/body&gt;");<br>}<br></code></pre><br/><br/><p>The key to this method is in that onload bit of Javascript, which , when the body of the page loads, submits the form and then redirects the user back to my own Home page.  The reason for that bit of hoodoo is that I'm launching the external site in a new window, but don't want the user to resubmit the hidden form if they refresh the page.  Plus that hidden form pushed the page down a few pixels which got on my nerves.</p><br/><br/><p>I'd be very interested in any cleaner ideas anyone has on this one.</p><br/><br/><p>Eric Sipple</p>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST.PARAM AND REQUEST.FORM DIFFER
    </pattern>
    <template>
<![CDATA[<p>Request.Form only includes variables posted through a form, while Request.Params includes both posted form variables and get variables specified as URL parameters.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVIC BACKWARD COMPAT ISSU
    </pattern>
    <template>
<![CDATA[<p>OK, we needed to resolve this issue in the short term, and so we came up with the idea of a "interop", or compatibility layer.</p><br/><br/><p>Baiscally, all we did was added a traditional ASMX web service to the project, and called the WCF service from that using native WCF calls.  We were then able to return the appropriate types back to the client applications without a significant amount of re-factoring work.  I know it was a hacky solution, but it was the best option we had with such a large legacy code-base.  And the added bonus is that it actually works surprisingly well. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVENT CALLBACK INTO MY WIN FORM THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>To simplify Simon's code a bit, you could use the built in generic Action delegate.  It saves peppering your code with a bunch of delegate types you don't really need.  Also, in .NET 3.5 they added a params parameter to the Invoke method so you don't have to define a temporary array.</p><br/><br/><pre><code>void SomethingHappened(object sender, EventArgs ea)<br/>{<br/>   if (InvokeRequired)<br/>   {<br/>      Invoke(new Action&lt;object, EventArgs&gt;(SomethingHappened), sender, ea);<br/>      return;<br/>   }<br/><br/>   textBox1.Text = "Something happened";<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARRAY.LENGTH AN INT AND NOT AN UINT
    </pattern>
    <template>
<![CDATA[<P>Unsigned int isn't CLS compliant and would therefore restrict usage of the property to those languages that do implement a UInt. </P><br/><P>Update: See here:</P><br/><P>Framework 1.1</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.71).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.71).aspx</A></P><br/><P>Framework 2.0</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.80).aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/hfa3fa08(VS.80).aspx</A></P>]]>    </template>
  </category>
  <category>
    <pattern>
      UNSIGN INT S NOT CL COMPLIANT
    </pattern>
    <template>
<![CDATA[<P>Not all languages have the concept of unsigned ints. For example VB 6 had no concept of unsigned ints which I suspect drove the decision of the designers of VB7/7.1 not to implement as well (it's implemented now in VB8).</P><br/><P>To quote -</P><br/><P><A href="http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/12a7a7h3.aspx</A></P><br/><P><EM>"The CLS was designed to be large enough to include the language constructs that are commonly needed by developers, yet small enough that most languages are able to support it. In addition, any language construct that makes it impossible to rapidly verify the type safety of code was excluded from the CLS so that all CLS-compliant languages can produce verifiable code if they choose to do so."</EM></P><br/><P>Update: I did wonder about this some years back, and whilst I can't see why a UInt wouldn't be type safety verifiable, I guess the CLS guys had to have a cut off point somewhere as to what would be the baseline minimum number of value types supported. Also when you think about the longer term where more and more languages are being ported to the CLR why force them to implement unsigned ints to gain CLS compliance if there is absolutely no concept, ever?</P>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET ELEMENT ON MASTER PAGE FROM A CONTENT PAGE
    </pattern>
    <template>
<![CDATA[<p>I believe you <em>could</em> do this by using this.Master.FindControl or something similar, but you probably shouldn't - it requires the content page to know too much about the structure of the master page.</p><br/><br/><p>I would suggest another method, such as firing an event in the content area that the master could listen for and re-bind when fired.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      # WHI CA N T A LIST STRING OBJECT BE STORE IN A LIST OBJECT VARIABL
    </pattern>
    <template>
<![CDATA[<p>Think of it this way, if you were to do such a cast, and then add an object of type Foo to the list, the list of strings is no longer consistent.  If you were to iterate the first reference, you would get a class cast exception because once you hit the Foo instance, the Foo could not be converted to string!</p><br/><br/><p>As a side note, I think it would be more significant whether or not you can do the reverse cast:</p><br/><br/><pre><code>List&lt;object&gt; ol = new List&lt;object&gt;();<br>List&lt;string&gt; sl;<br>sl = (List&lt;string&gt;)ol;<br></code></pre><br/><br/><p>I haven't used C# in a while, so I don't know if that is legal, but that sort of cast is actually (potentially) useful.  In this case, you are going from a more general class (object) to a more specific class (string) that extends from the general one.  In this way, if you add to the list of strings, you are not violating the list of objects.</p><br/><br/><p>Does anybody know or can test if such a cast is legal in C#?</p>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVIC RESULT PROXI CLASS AND TYPE CONVERS
    </pattern>
    <template>
<![CDATA[<p>You are on the right track.  To get the data from the proxy object back into one of your own objects, you have to do left-hand-right-hand code.  i.e. copy property values.  I'll bet you that there is already a generic method out there that uses reflection.</p><br/><br/><p>Some people will use something other than a web service (.net remoting) if they just want to get a business object across the wire.  Or they'll use binary serialization.  I'm guessing you are using the web service for a reason, so you'll have to do property copying.</p>]]>    </template>
  </category>
  <category>
    <pattern>
      KNOW A GOOD WORKAROUND FOR THE LACK OF AN ENUM GENER CONSTRAINT
    </pattern>
    <template>
<![CDATA[<p><strong>EDIT: This is now live in version 0.0.0.2 of UnconstrainedMelody.</strong></p><br/><br/><p>(As requested on my <a href="http://msmvps.com/blogs/jon%5Fskeet/archive/2009/09/11/1722426.aspx" rel="nofollow">blog post about enum constraints</a>. I've included the basic facts below for the sake of a standalone answer.)</p><br/><br/><p>The best solution is to wait for me to include it in <a href="http://code.google.com/p/unconstrained-melody/" rel="nofollow">UnconstrainedMelody</a><sup>1</sup>. This is a library which takes C# code with "fake" constraints such as</p><br/><br/><pre><code>where T : struct, IEnumConstraint<br/></code></pre><br/><br/><p>and turns it into</p><br/><br/><pre><code>where T : struct, System.Enum<br/></code></pre><br/><br/><p>via a postbuild step.</p><br/><br/><p>It shouldn't be too hard to write <code>IsSet</code>... although catering for both <code>Int64</code>-based and <code>UInt64</code>-based flags could be the tricky part. (I smell some helper methods coming on, basically allowing me to treat any flags enum as if it had a base type of <code>UInt64</code>.)</p><br/><br/><p>What would you want the behaviour to be if you called</p><br/><br/><pre><code>tester.IsSet(MyFlags.A | MyFlags.C)<br/></code></pre><br/><br/><p>? Should it check that <em>all</em> the specified flags are set? That would be my expectation.</p><br/><br/><p>I'll try to do this on the way home tonight... I'm hoping to have a quick blitz on useful enum methods to get the library up to a usable standard quickly, then relax a bit.</p><br/><br/><p>EDIT: I'm not sure about <code>IsSet</code> as a name, by the way. Options:</p><br/><br/><ul><br/><li>Includes</li><br/><li>Contains</li><br/><li>HasFlag (or HasFlags)</li><br/><li>IsSet (it's certainly an option)</li><br/></ul><br/><br/><p>Thoughts welcome. I'm sure it'll be a while before anything's set in stone anyway...</p><br/><br/><p><hr /></p><br/><br/><p><sup>1</sup> or submit it as a patch, of course...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW DEFAULT PROPERTI VALU FOR INHERIT CONTROL
    </pattern>
    <template>
<![CDATA[<p>In your derived class you need to either override (or shadow using <em>new</em>) the property in question and then re-apply the default value attribute.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER WPF CONTROL THROUGH CODE
    </pattern>
    <template>
<![CDATA[<p>WPF makes use of a funky thing called <a href="http://msdn.microsoft.com/en-us/library/ms749011.aspx" rel="nofollow" title="Jonathan Livingston Seagull">attached properties</a>. So in your XAML you might write this:</p><br/><br/><pre><code>&lt;TextBlock Grid.Row="0" Grid.Column="0" /&gt;<br/></code></pre><br/><br/><p>And this will effectively move the TextBlock into cell (0,0) of your grid.</p><br/><br/><p>In code this looks a little strange. I believe it'd be something like:</p><br/><br/><pre><code>g.Children.Add(tb);<br/>Grid.SetRow(tb, 0);<br/>Grid.SetColumn(tb, 0);<br/></code></pre><br/><br/><p>Have a look at that link above - attached properties make things really easy to do in XAML perhaps at the expense of intuitive-looking code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOUSEDOWN EVENT FOR .NET TEXTBOX
    </pattern>
    <template>
<![CDATA[<p>Looks like you're right. Bummer. No MouseOver event.</p><br/><br/><p>One of the fallbacks that always works with .NET, though, is P/Invoke. Someone already took the time to do this for the .NET CF TextBox. I found this on CodeProject:</p><br/><br/><p><a href="http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx" rel="nofollow" title="Presentation Zen"><a href="http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx" rel="nofollow">http://www.codeproject.com/KB/cs/TextBox_subclassing.aspx</a></a></p><br/><br/><p>Hope this helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM A .NET SERVIC
    </pattern>
    <template>
<![CDATA[<p>Trust me, you will spend more money trying to search/develop a solution for this as compared to buying a third party component. Do not reinvent the wheel and go for the paid solution.</p><br/><br/><p>Printing is a complex problem and I would love to see the day when better framework support is added for this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POOL IN .NET SQL SERVER
    </pattern>
    <template>
<![CDATA[<p>The connection pooling built-in to ADO.Net is robust and mature.  I would recommend against attempting to write your own version.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNHANDL EXCEPT INSTEAD OF CONTAIN ( )
    </pattern>
    <template>
<![CDATA[<p>I would have to say that this is pretty bad practice. Whilst some people might be happy to say that looping through the collection is less efficient to throwing an exception, there is an overhead to throwing an exception. I would also question why you are using a collection to access an item by key when you would be better suited to using a dictionary or hashtable.</p><br/><br/><p>My main problem with this code however, is that regardless of the type of exception thrown, you are always going to be left with the same result.</p><br/><br/><p>For example, an exception could be thrown because the object doesn't exist in the collection, or because the collection itself is null or because you can't cast myCollect[myObject] to aObject.</p><br/><br/><p>All of these exceptions will get handled in the same way, which may not be your intention.</p><br/><br/><p>These are a couple of nice articles on when and where it is usally considered acceptable to throw exceptions:</p><br/><br/><ul><br/><li><a href="http://codebetter.com/blogs/karlseguin/archive/2008/05/29/foundations-of-programming-pt-8-back-to-basics-exceptions.aspx" rel="nofollow">Foundations of Programming</a></li><br/><li><a href="http://www.blackwasp.co.uk/CSharpThrowingExceptions.aspx" rel="nofollow">Throwing exceptions in c#</a></li><br/></ul><br/><br/><p>I particularly like this quote from the second article:</p><br/><br/><blockquote><br/>  <p>It is important that exceptions are<br/>  thrown only when an unexpected or<br/>  invalid activity occurs that prevents<br/>  a method from completing its normal<br/>  function. Exception handling<br/>  introduces a small overhead and lowers<br/>  performance so should not be used for<br/>  normal program flow instead of<br/>  conditional processing. It can also be<br/>  difficult to maintain code that<br/>  misuses exception handling in this<br/>  way.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAY MIDI SOUND USE C #
    </pattern>
    <template>
<![CDATA[<p>I think you'll need to p/invoke out to the windows api to be able to play midi files from .net.</p><br/><br/><p>I thought this codeproject article did quite a good job on explaining how to do this:<br/><a href="http://www.codeproject.com/KB/audio-video/vbnetSoundClass.aspx" rel="nofollow" title="http://www.scribd.com/doc/2547864/msnetformattingstrings">vb.net article to play midi files</a></p><br/><br/><p>To rewrite this is c# you'd need the following import statement for mciSendString:</p><br/><br/><pre><code>[DllImport("winmm.dll")] <br/>static extern Int32 mciSendString(String command, StringBuilder buffer, <br/>                                  Int32 bufferSize, IntPtr hwndCallback);<br/></code></pre><br/><br/><p>Hope this is of some help - good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # WIA VERSION 2.0 ON VISTA TO SCAN
    </pattern>
    <template>
<![CDATA[<p>To access WIA, you'll need to add a reference to the COM library, "Microsoft Windows Image Acquisition Library v2.0" (wiaaut.dll).<br/>add a "using WIA;"</p><br/><br/><pre><code>const string wiaFormatJPEG = "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}";<br/>CommonDialogClass wiaDiag = new CommonDialogClass();<br/>WIA.ImageFile wiaImage = null;<br/><br/>wiaImage = wiaDiag.ShowAcquireImage(<br/>        WiaDeviceType.UnspecifiedDeviceType, <br/>        WiaImageIntent.GrayscaleIntent, <br/>        WiaImageBias.MaximizeQuality, <br/>        wiaFormatJPEG, true, true, false);<br/><br/>WIA.Vector vector = wiaImage.FileData;<br/></code></pre><br/><br/><p>(System.Drawing)</p><br/><br/><pre><code>Image i = Image.FromStream(new MemoryStream((byte[])vector.get_BinaryData()));<br/>i.Save(filename)<br/></code></pre><br/><br/><p>Thats a basic way, works with my flatbed/doc feeder. If you need more than one document/page at a time though, there is probably a better way to do it (from what I could see, this only handles one image at a time, although I'm not entirely sure). While it is a WIA v1 doc, Scott Hanselman's <a href="http://blogs.msdn.com/coding4fun/archive/2006/10/31/912546.aspx" rel="nofollow">Coding4Fun article on WIA</a> does contain some more info on how to do it for multiple pages, I think (I'm yet to go further than that myself)</p><br/><br/><p>If its for a paperless office system, you might want also check out MODI (Office Document Imaging) to do all the OCR for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABLE VALU SQL FUNCTION FROM .NET
    </pattern>
    <template>
<![CDATA[<p>No because you need to select them.  However you can create a stored proc wrapper.  Which may defeat the point of having a table function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINGER ASSEMBL DEPEND IN C # .NET
    </pattern>
    <template>
<![CDATA[<p>It's likely a transitive reference, where some type method call returns an instance of SuperException boxed ("downcast") as e.g. Exception, but from inspecting the code in the transitively included code, i.e. code from your external method calls, the compiler knows that you need to be able to have information about that type at some point. </p><br/><br/><p>Resharper would tell you where it's the case that you need to add a reference, and you could use Lütz Roeder's aka RedGate's Reflector to scan compiled IL for a reference to this type in two ways: 1) use the search-facility, 2) open each public type you're using and for that one which requires the "ghost" assembly, it will ask you to specify its location.</p><br/><br/><p>This most often happends to me when I reference Castle.Windsor but not Castle.MicroKernel. :p</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETRIEV SELECT TEXT USE REGEX IN C #
    </pattern>
    <template>
<![CDATA[<pre><code>int indexVal = 0;<br/>Regex re = new Regex(@"Index: (\d*)")<br/>Match m = re.Match(s)<br/>if(m.Success)<br/>  indexVal = int.TryParse(m.Groups[1].toString());<br/></code></pre><br/><br/><p>I might  have the group number wrong, but you should be able to figure it out from here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3.0 AUTO PROPERTI USE OR NOT
    </pattern>
    <template>
<![CDATA[<p>We use them all the time in Stack Overflow.</p><br/><br/><p>You may also be interested in a discussion of <a href="http://www.codinghorror.com/blog/archives/000654.html" rel="nofollow">Properties vs. Public Variables</a>. IMHO that's really what this is a reaction to, and for that purpose, it's great.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND TYPE ERROR LOAD A FORM IN THE DESIGN
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>when you added the listview, did you add it to the toolbox and then add it to the form?</p><br/></blockquote><br/><br/><p>No, I just edited <code>Main.Designer.cs</code> and changed it from <code>System.Windows.Forms.ListView</code> to <code>MyApp.Controls.SortableListView&lt;Image&gt;</code></p><br/><br/><p>Suspecting it might have been due to the generics led me to actually finding a solution.</p><br/><br/><p>For each class that I need to make a SortableListView for, I defined a 'stub class' like this</p><br/><br/><pre><code>class ImagesListView : SortableListView&lt;Image&gt; { }<br/></code></pre><br/><br/><p>Then made the <code>Main.Designer.cs</code> file refer to these stub classes instead of the <code>SortableListView</code>.</p><br/><br/><p>It now works, hooray!</p><br/><br/><p>Thankfully I am able to do this because all my types are known at compile-time, and I'm only using the <code>SortableListView</code> as a method of reducing duplicate code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LMERG BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>I use ILMerge for almost all of my different applications.  I have it integrated right into the release build process so what I end up with is one exe per application with no extra dll's.  </p><br/><br/><p>You can't ILMerge any C++ assemblies that have native code.<br/>You also can't ILMerge any assemblies that contain XAML for WPF (at least I haven't had any success with that).  It complains at runtime that the resources cannot be located.</p><br/><br/><p>I did write a wrapper executable for ILMerge where I pass in the startup exe name for the project I want to merge, and an output exe name, and then it reflects the dependent assemblies and calls ILMerge with the appropriate command line parameters.  It is much easier now when I add new assemblies to the project, I don't have to remember to update the build script.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ADDIT WINDOW.ONLOAD EVENT IN JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Most of the "solutions" suggested are Microsoft-specific, or require bloated libraries. Here's one good way. This works with W3C-compliant browsers and with Microsoft IE.</p><br/><br/><pre><code>if (window.addEventListener) // W3C standard<br/>{<br/>  window.addEventListener('load', myFunction, false); // NB **not** 'onload'<br/>} <br/>else if (window.attachEvent) // Microsoft<br/>{<br/>  window.attachEvent('onload', myFunction);<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACKWARD COMPAT ISSU
    </pattern>
    <template>
<![CDATA[<p>One of those instances that you need to edit the WSDL.  For a start a useful tool</p><br/><br/><p><a href="http://codeplex.com/storm" rel="nofollow" title="Unison Home Page"><a href="http://codeplex.com/storm" rel="nofollow">http://codeplex.com/storm</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2.0 CODE CONSUM ASSEMBL COMPIL WITH C # 3.0
    </pattern>
    <template>
<![CDATA[<p>C#3 and .Net 3.5 adds new assemblies, but the IL is unchanged.</p><br/><br/><p>This means that with .Net 2 assemblies you can compile and use C#3, as long as you don't use Linq or anything else that references System.Linq or System.Core</p><br/><br/><p><code>yield</code>, <code>var</code>, lambda syntax, anon types and initialisers are all compiler cleverness. The IL they produce is cross-compatible.</p><br/><br/><p>If you can reference the new assemblies for 3.5 it should all just work.</p><br/><br/><p>There is no new version of ASP.Net - it should still be 2.0.50727 - but you should still compile for 3.5</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CASE INSENSIT STRING
    </pattern>
    <template>
<![CDATA[<p><strong><code>string</code></strong> is a language keyword while <code>System.String</code> is the type it aliases.</p><br/><br/><p>Both compile to exactly the same thing, similarly:</p><br/><br/><ul><br/><li><strong><code>int</code></strong> is <code>System.Int32</code></li><br/><li><strong><code>long</code></strong> is <code>System.Int64</code></li><br/><li><strong><code>float</code></strong> is <code>System.Single</code></li><br/><li><strong><code>double</code></strong> is <code>System.Double</code></li><br/><li><strong><code>char</code></strong> is <code>System.Char</code></li><br/><li><strong><code>byte</code></strong> is <code>System.Byte</code></li><br/><li><strong><code>short</code></strong> is <code>System.Int16</code></li><br/><li><strong><code>ushort</code></strong> is <code>System.UInt16</code></li><br/><li><strong><code>uint</code></strong> is <code>System.UInt32</code></li><br/><li><strong><code>ulong</code></strong> is <code>System.UInt64</code></li><br/></ul><br/><br/><p>I think in most cases this is about code legibility - all the basic system value types have aliases, I think the lower case <code>string</code> might just be for consistency.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIM WEEK INTO ROW
    </pattern>
    <template>
<![CDATA[<p>Here is the method that does it:</p><br/><br/><pre><code>public int GetWeekRows(int year, int month)<br/>{<br/>    DateTime firstDayOfMonth = new DateTime(year, month, 1);<br/>    DateTime lastDayOfMonth = new DateTime(year, month, 1).AddMonths(1).AddDays(-1);<br/>    System.Globalization.Calendar calendar = System.Threading.Thread.CurrentThread.CurrentCulture.Calendar;<br/>    int lastWeek = calendar.GetWeekOfYear(lastDayOfMonth, System.Globalization.CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);<br/>    int firstWeek = calendar.GetWeekOfYear(firstDayOfMonth, System.Globalization.CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);<br/>    return lastWeek - firstWeek + 1;<br/>}<br/></code></pre><br/><br/><p>You can customize the calendar week rule by modifying the System.Globalization.CalendarWeekRule.FirstFourDayWeek part. I hope the code is self explanatory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOCK FRAMEWORK THAT CAN DO BOTH WEBFORM AND MVC
    </pattern>
    <template>
<![CDATA[<p>Rhino's latest release includes much of the sweet sweet 3.5 love that MoQ has.  I'm a fan of MoQ, so that's what I'm using.  But I also have Rhino, in case it does something that MoQ doesn't do.</p><br/><br/><p>TL;DR:  MoQ it baby.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORD DOCUMENT BE CREAT IN C #
    </pattern>
    <template>
<![CDATA[<p>The answer is going to depend slightly upon if the application is running on a server or if it is running on the client machine. If you are running on a server then you are going to want to use one of the XML based office generation formats as there are know issues when <a href="http://support.microsoft.com/kb/257757" rel="nofollow">using Office Automation on a server</a>.</p><br/><br/><p>However, if you are working on the client machine then you have a choice of either <a href="http://msdn.microsoft.com/en-us/office/default.aspx" rel="nofollow">using Office Automation</a> or using the Office Open XML format (see links below), which is supported by Microsoft Office 2000 and up either natively or through service packs. One draw back to this though is that you might not be able to embed some kinds of graphs or images that you wish to show. </p><br/><br/><p>The best way to go about things will all depend sightly upon how much time you have to invest in development. If you go the route of Office Automation there are quite a few good tutorials out there that can be found via Google and is fairly simple to learn. However, the Open Office XML format is fairly new so you might find the learning curve to be a bit higher.</p><br/><br/><p>Office Open XML Iinformation</p><br/><br/><ul><br/><li>Office Open XML - <a href="http://en.wikipedia.org/wiki/Office%5FOpen%5FXML" rel="nofollow">http://en.wikipedia.org/wiki/Office%5FOpen%5FXML</a></li><br/><li>OpenXML Developer - <a href="http://openxmldeveloper.org/default.aspx" rel="nofollow">http://openxmldeveloper.org/default.aspx</a></li><br/><li>Introducing the Office (2007) Open XML File Formats - <a href="http://msdn.microsoft.com/en-us/library/aa338205.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa338205.aspx</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISABL WEBBROWS CLICK SOUND IN YOUR APP ONLI
    </pattern>
    <template>
<![CDATA[<p>I've noticed that if you use WebBrowser.Document.Write rather than WebBrowser.DocumentText then the click sound doesn't happen.</p><br/><br/><p>So instead of this:</p><br/><br/><pre><code>webBrowser1.DocumentText = "&lt;h1&gt;Hello, world!&lt;/h1&gt;";<br/></code></pre><br/><br/><p>try this:</p><br/><br/><pre><code>webBrowser1.Document.OpenNew(true);<br/>webBrowser1.Document.Write("&lt;h1&gt;Hello, world!&lt;/h1&gt;");<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECENT C # PROFIL OUT THERE
    </pattern>
    <template>
<![CDATA[<p>You can try the following:</p><br/><br/><ul><br/><li><a href="http://nprof.sourceforge.net/Site/Description.html" rel="nofollow">nprof</a> (free but kinda old)</li><br/><li><a href="http://www.softprodigy.com/index.php?option=com_content&amp;view=article&amp;id=9&amp;Itemid=8" rel="nofollow">ProfileSharp</a> (open source)</li><br/><li><a href="http://memprofiler.com/" rel="nofollow">.Net Memory Profiler</a> (really good for memory leaks, there's a trial version)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUTPUTCACHEFILT IN THE MICROSOFT MVC PREVIEW 4 ACTUAL SAVE ON ACTION INVOC
    </pattern>
    <template>
<![CDATA[<p>Internally, the OutputCacheAttribute (aka output cache filter) uses the same internal mechanism as <a href="http://msdn.microsoft.com/en-us/library/hdxfb6cy.aspx" rel="nofollow" title="excanvas">page output caching</a> (aka the @OutputCache directive).</p><br/><br/><p>Therefore, it's not any faster than page output caching. However, with MVC, you really can't use page output caching via the @OutputCache directive in MVC because we render the view (aka page) <strong>after</strong> the action runs. So you would gain very little benefit.</p><br/><br/><p>With the output cache filter, it does the correct thing and does not execute the action code if the result is in the output cache. Hope that helps. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI ON A DATAT
    </pattern>
    <template>
<![CDATA[<p>You can't query against the <code>DataTable</code>'s <em>Rows</em> collection, since <code>DataRowCollection</code> doesn't implement <code>IEnumerable&lt;T&gt;</code>. You need to use the <code>AsEnumerable()</code> extension for <code>DataTable</code>. Like so:</p><br/><br/><pre><code>var results = from myRow in myDataTable.AsEnumerable()<br/>where myRow.Field&lt;int&gt;("RowNo") == 1<br/>select myRow;<br/></code></pre><br/><br/><p>And as Keith says, you'll need to add a reference to <a href="http://msdn.microsoft.com/en-us/library/system.data.datarowextensions.aspx">System.Data.DataSetExtensions</a></p><br/><br/><p><code>AsEnumerable()</code> returns <code>IEnumerable&lt;DataRow&gt;</code>. If you need to convert <code>IEnumerable&lt;DataRow&gt;</code> to a <code>DataTable</code>, use the <code>CopyToDataTable()</code> extension.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER FORM IN C #
    </pattern>
    <template>
<![CDATA[<p>Yes you can! Here's a blog post I made a while ago with the trick:</p><br/><br/><p><a href="http://www.madprops.org/blog/designing-generic-forms/" rel="nofollow" title="Bristol University Language Engineering Course">Designing Generic Forms</a></p><br/><br/><p>Edit: Looks like you're already doing it this way. This method works fine so I wouldn't consider it too hacky.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USERCONTROL S AND DEFAULTEV
    </pattern>
    <template>
<![CDATA[<p>Here is a <em>possible</em> answer, without testing (like martin did). </p><br/><br/><p>In reflector, you will see that the DefaultEventAttribute allows itself to be inherited.<br/>In reflector, you see that the UserControl class has it's default event set to the Load event.</p><br/><br/><p>So the possible reason is that even though you are decorating your user control with the default event of OKClick, VS might still be thinking that the default event is load, as it's being inherited from UserControl whose default event is Load.</p><br/><br/><p>Just a high level guess at what might be happening.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SORT A COMPOSIT COLLECT
    </pattern>
    <template>
<![CDATA[<p>Update: I found a much more elegant solution:</p><br/><br/><pre><code>class MyCompositeObject<br/>{<br/>    DateTime    CreatedDate;<br/>    string      SomeAttribute;<br/>    Object      Obj1;<br/>{<br/>class MyCompositeObjects : List&lt;MyCompositeObject&gt; { }<br/></code></pre><br/><br/><p>I found that due to reflection, the specific type stored in Obj1 is resolved at runtime and the type specific DataTemplate is applied as expected!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGE CACH IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>I've found the answer I was looking for:</p><br/><br/><pre><code>HttpResponse.RemoveOutputCacheItem("/caching/CacheForever.aspx");<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRYPTOGRAPHICEXCEPT PAD IS INVALID AND CAN NOT BE REMOV
    </pattern>
    <template>
<![CDATA[<p>Although this have been already answered I think it would be a good idea to explain <strong>why</strong> it is to be expected.</p><br/><br/><p>A padding scheme is usually applied because most cryptographic filters are not semantically secure and to prevent some forms of cryptoatacks. For example, usually in RSA the <a href="http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding" rel="nofollow">OAEP</a> padding scheme is used which prevents some sorts of attacks (such as a chosen plaintext attack or <a href="http://en.wikipedia.org/wiki/Blinding_(cryptography)" rel="nofollow">blinding</a>).</p><br/><br/><p>A padding scheme appends some (usually) random garbage to the message m before the message is sent. In the OAEP method, for example, two Oracles are used (this is a simplistic explanation):</p><br/><br/><ol><br/><li>Given the size of the modulus you padd k1 bits with 0 and k0 bits with a random number.</li><br/><li>Then by applying some transformation to the message you obtain the padded message wich is encrypted and sent.</li><br/></ol><br/><br/><p>That provides you with a randomization for the messages and with a way to test if the message is garbage or not. As the padding scheme is reversible, when you decrypt the message whereas you can't say anything about the integrity of the message itself you can, in fact, make some assertion about the padding and thus you can know if the message has been correctly decrypted or you're doing something wrong (i.e someone has tampered with the message or you're using the wrong key)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROWS FOR A DIRECTORI IN C #
    </pattern>
    <template>
<![CDATA[<p>FolderBrowserDialog class?</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.folderbrowserdialog.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.windows.forms.folderbrowserdialog.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LARG RESULT VIA A WEBSERVIC
    </pattern>
    <template>
<![CDATA[<p>I have seen all three approaches, paged, store and retrieve, and massive push.</p><br/><br/><p>I think the solution to your problem depends to some extent on why your result set is so large and how it is generated.  Do your results grow over time, are they calculated all at once and then pushed, do you want to stream them back as soon as you have them?</p><br/><br/><p>In my experience, using a paging approach is appropriate when the client needs quick access to reasonably sized chunks of the result set similar to pages in search results.  Considerations here are overall chattiness of your protocol, caching of the entire result set between client page requests, and/or the processing time it takes to generate a page of results.</p><br/><br/><p>Store and retrieve is useful when the results are not random access and the result set grows in size as the query is processed.  Issues to consider here are complexity for clients and if you can provide the user with partial results or if you need to calculate all results before returning anything to the client (think sorting of results from distributed search engines).</p><br/><br/><p>The massive push approach is almost certainly flawed.  Even if the client needs all of the information and it needs to be pushed in a monolithic result set, I would recommend taking the approach of WS-ReliableMessaging (either directly or through your own simplified version) and chunking your results.  By doing this you 1) ensure that the pieces reach the client, 2) you can discard the chunk as soon as you get a receipt from the client, and 3) you can reduce the possible issues with memory consumption from having to retain 5MB of XML, DOM, or whatever in memory (assuming that you aren't processing the results in a streaming manner) on the server and client sides.</p><br/><br/><p>Like others have said though, don't do anything until you know your result set size, how it is generated, and overall performance to be actual issues.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPERSON AN ACTIV DIRECTORI USER IN POWERSHEL
    </pattern>
    <template>
<![CDATA[<p>Exchange 2007 doesn't allow you to impersonate a user for security reasons. This means that it is impossible (at the moment) to create mailboxes by impersonating a user. In order to get around this problem, I created a web service which runs under AD user which has permissions to create email acounts, etc. You can then access this webservice to get access to powershell. Please remember to add the necessary security because this could potentially be a huge security hole.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A TIMER BASE APPLIC
    </pattern>
    <template>
<![CDATA[<p>What I have done is to mock the timer, and also the current system time, that my events could be triggered immediately, but as far as the code under test was concerned time elapsed was seconds.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTFOUNDEXCEPT FOR MSCORLIB.XMLSERIALIZERS.DL WHICH DOE N T EXIST
    </pattern>
    <template>
<![CDATA[<p>I'm guessing now. but:</p><br/><br/><ol><br/><li>The system might be generating a serializer for the whole of mscorlib, which could be very slow.</li><br/><li>You could probably avoid this by wrapping the system type in your own type and serialising that instead - then you'd get a serializer for your own assembly.</li><br/><li>You might be able to build the serializer for mscorlib with sgen.exe, which was the old way of building serializer dlls before it got integrated into VS.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA FROM AN ASPX PAGE TO AN ASCX MODAL POPUP
    </pattern>
    <template>
<![CDATA[<p>All a usercontrol(.ascx) file is is a set of controls that you have grouped together to provide some reusable functionality.  The controls defined in it are still added to the page's control collection (.aspx) durring the page lifecylce.  The ModalPopupExtender uses javascript and dhtml to show and hide the controls in the usercontrol client-side.  What you are seeing is that the click event is being handled client-side by the ModalPoupExtender and it is canceling the post-back to the server.  This is the default behavior by design.  You certainly can access the page's control collection from the code-behind of your usercontrol though because it is all part of the same control tree.  Just use the FindControl(xxx) method of any control to search for the child of it you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REF VAL AND OUT MEAN ON METHOD PARAMET
    </pattern>
    <template>
<![CDATA[<p>By default (in C#), passing an object to a function actually passes a copy of the reference to that object. Changing the parameter itself only changes the value in the parameter, and not the variable that was specified.</p><br/><br/><pre><code>void Test1(string param)<br/>{<br/>    param = "new value";<br/>}<br/><br/>string s1 = "initial value";<br/>Test1(s1);<br/>// s1 == "initial value"<br/></code></pre><br/><br/><p>Using <code>out</code> or <code>ref</code> passes a reference to the variable specified in the call to the function. Any changes to the value of an <code>out</code> or <code>ref</code> parameter will be passed back to the caller.</p><br/><br/><p>Both <code>out</code> and <code>ref</code> behave identically except for one slight difference: <code>ref</code> parameters are required to be initialised before calling, while <code>out</code> parameters can be uninitialised. By extension, <code>ref</code> parameters are guaranteed to be initialised at the start of the method, while <code>out</code> parameters are treated as uninitialised.</p><br/><br/><pre><code>void Test2(ref string param)<br/>{<br/>    param = "new value";<br/>}<br/><br/>void Test3(out string param)<br/>{<br/>    // Use of param here will not compile<br/>    param = "another value";<br/>}<br/><br/>string s2 = "initial value";<br/>string s3;<br/>Test2(ref s2);<br/>// s2 == "new value"<br/>// Test2(ref s3); // Passing ref s3 will not compile<br/>Test3(out s2);<br/>// s2 == "another value"<br/>Test3(out s3);<br/>// s3 == "another value"<br/></code></pre><br/><br/><p><strong>Edit</strong>: As <a href="http://stackoverflow.com/questions/13060/what-do-ref-val-and-out-mean-on-method-parameters#13105" rel="nofollow" title="dp">dp</a> points out, the difference between <code>out</code> and <code>ref</code> is only enforced by the C# compiler, not by the CLR. As far as I know, VB has no equivalent for <code>out</code> and implements <code>ref</code> (as <code>ByRef</code>) only, matching the support of the CLR.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THREADSTATEEXCEPT OCCUR WHEN TRI TO RESTART A THREAD
    </pattern>
    <template>
<![CDATA[<p>The problem is that you have code that first checks if it should create a new thread object, and another piece of code that determines wether to start the thread object. Due to race conditions and similar things, your code might end up trying to call .Start on an existing thread object. Considering you don't post the details behind the <em>check</em> variable, it's impossible to know what might trigger this behavior.</p><br/><br/><p>You should reorganize your code so that .Start is guaranteed to only be called on new objects. In short, you should put the Start method into the same if-statement as the one that creates a new thread object.</p><br/><br/><p>Personally, I would try to reorganize the entire code so that I didn't need to create another thread, but wrap the code inside the thread object inside a loop so that the thread just keeps on going.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAB BEHAVIOR IN WINFORM
    </pattern>
    <template>
<![CDATA[<p>As a general rule, I would say overriding the standard behavior of the TAB key would be a bad idea.  Maybe you can do something like disabling the 3rd text box until a valid entry is made in the 2nd text box.</p><br/><br/><p><em>Now, having said this, I've also broken this rule at the request of the customer.  We made the enter key function like the tab key, where the enter key would save the value in a text field, and advance the cursor to the next field.</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVERT C # CLASS TO PHP
    </pattern>
    <template>
<![CDATA[<p>It is entirely possible to write a PHP application almost entirely in an object-oriented methodology. You will have to write some procedural code to create and launch your first object but beyond that there are plenty of MVC frameworks for PHP that are all object-oriented. One that I would look at as an example is <a href="http://codeigniter.com" rel="nofollow">Code Igniter</a> because it is a little lighter weight in my opinion.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A LISTVIEW IN C # BUT STILL SHOW THE CURRENT SELECT
    </pattern>
    <template>
<![CDATA[<p>You could also make the ListView ownerdraw. You then have complete control over how the items look whether they are selected or not or whether the ListView itself is enabled or not. The DrawListViewItemEventArgs provides a way to ask the ListView to draw individual parts of the item so you only have to draw the bits you're interested in. For example, you can draw the background of the item but leave it up to the ListView to draw the text.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM PLUGIN LOAD WITH AUTHOR
    </pattern>
    <template>
<![CDATA[<p>Basically, if you're putting your code on someone else's machine, there's no absolute guarantee of security.</p><br/><br/><p>You can look at all kinds of security tricks, but in the end, the code is on their machine so it's out of your control.</p><br/><br/><p>How much do you stand to lose if the end user loads an unauthorised plugin? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LPHA BLEND COLOR IN .NET COMPACT FRAMEWORK 2.0
    </pattern>
    <template>
<![CDATA[<p>Apparently, it's not quite that simple, but <a href="http://blogs.msdn.com/chrislorton/archive/2006/04/07/570649.aspx" rel="nofollow">still possible</a>, if you have Windows Mobile 5.0 or newer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCOD THROUGH A CONSOL APPLIC
    </pattern>
    <template>
<![CDATA[<p>I'm not a .NET guy, but, can't you use:</p><br/><br/><pre><code>HttpUtility.UrlEncode Method (String)<br/></code></pre><br/><br/><p>Which is described here:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/4fkewx0t.aspx" rel="nofollow">HttpUtility.UrlEncode Method (String) on MSDN</a></p><br/><br/><p>Andrew</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALT + F4 CLOSE FORM
    </pattern>
    <template>
<![CDATA[<p>This does the job:</p><br/><br/><pre><code>private void Form1_FormClosing(object sender, FormClosingEventArgs e)<br/>{<br/>    e.Cancel = true;<br/>}<br/></code></pre><br/><br/><p>Edit: In response to pix0rs concern - yes you are correct that you will not be able to programatically close the app.  However, you can simply remove the event handler for the form_closing event before closing the form:</p><br/><br/><pre><code>this.FormClosing -= new System.Windows.Forms.FormClosingEventHandler(this.Form1_FormClosing);<br/>this.Close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YCL BUTTON BACKGROUND IMAG IN C #
    </pattern>
    <template>
<![CDATA[<p>Why don't you just put the images in an array?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITER THROUGH A STRONGLY TYP GENER LIST T
    </pattern>
    <template>
<![CDATA[<p>For C#:</p><br/><br/><pre><code>foreach(ObjectType objectItem in objectTypeList)<br/>{<br/>    // ...do some stuff<br/>}<br/></code></pre><br/><br/><p>Answer for VB.NET from <strong>Purple Ant</strong>:</p><br/><br/><pre><code>For Each objectItem as ObjectType in objectTypeList<br/>    'Do some stuff '<br/>Next<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ULTRAWEBGRID HOW TO USE A DROP DOWN LIST IN A COLUMN
    </pattern>
    <template>
<![CDATA[<p>I've found what was wrong.</p><br/><br/><p>The column must allow updates.</p><br/><br/><pre><code>uwgMyGrid.Columns.FromKey("colTest").AllowUpdate = AllowUpdate.Yes;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOM REPETIT TASK POST BUILD
    </pattern>
    <template>
<![CDATA[<p>Here's an example of a Web Deployment Project scripting this sort of task in the .wdproj file:</p><br/><br/><pre><code>  &lt;Target Name="AfterBuild"&gt;<br/>    &lt;!-- ============================ Script Compression============================ --&gt;<br/>    &lt;MakeDir Directories="$(OutputPath)\compressed" /&gt;<br/>    &lt;Exec Command="java -jar c:\yuicompressor-2.2.5\build\yuicompressor-2.2.5.jar --charset UTF-8 styles.css -o compressed/styles.css" WorkingDirectory="$(OutputPath)" /&gt;<br/>    &lt;Exec Command="move /Y .\compressed\* .\" WorkingDirectory="$(OutputPath)" /&gt;<br/>    &lt;RemoveDir Directories="$(OutputPath)\sql" /&gt;<br/>    &lt;Exec Command="c:\7zip-4.4.2\7za.exe a $(ZipName).zip $(OutputPath)\*" /&gt;<br/>  &lt;/Target&gt;<br/></code></pre><br/><br/><p>This would allow you to delete a folder.</p><br/><br/><p>(I suspect that if you wanted to not have the folder copy over <em>at all</em>, the solution file would be the place to specify that, though I haven't had to use that.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEL FILE FROM C #
    </pattern>
    <template>
<![CDATA[<p>If it is just simple data contained in the Excel file you can read the data via ADO.NET. See the connection strings listed here:</p><br/><br/><p><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow"><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow">http://www.connectionstrings.com/?carrier=excel2007</a></a><br/>or <br/><a href="http://www.connectionstrings.com/?carrier=excel2007" rel="nofollow"><a href="http://www.connectionstrings.com/?carrier=excel" rel="nofollow">http://www.connectionstrings.com/?carrier=excel</a></a></p><br/><br/><p>-Ryan</p><br/><br/><p>Update: then you can just read the worksheet via something like <code>select * from [Sheet1$]</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP DASHBOARD TYPE GUI INTERFAC
    </pattern>
    <template>
<![CDATA[<p>I have been looking at this kind of functionality myself recently and have decided on using jQuery with the help of <a href="http://ui.jquery.com/" rel="nofollow">jQuery UI</a>. I came across a large amount of information that also suggested <a href="http://developer.yahoo.com/yui/" rel="nofollow">Yahoo UI</a> (YUI), I had already started learning <a href="http://jQuery.com" rel="nofollow">jQuery</a> due to the AJAX support that it offers, so I stuck with it.</p><br/><br/><p><a href="http://ui.jquery.com/" rel="nofollow">jQuery UI Site</a><br/><br/><a href="http://docs.jquery.com/UI" rel="nofollow">jQuery UI Documentation</a><br/><br/><a href="http://ui.jquery.com/repository/real-world/layout/" rel="nofollow">Example of a drag and drop screen layout with jQuery UI</a><br/><br/><a href="http://www.learningjquery.com/2008/07/introduction-to-jquery-ui#" rel="nofollow">Introduction to jQuery UI</a></p><br/><br/><p>If you decide to use the YUI javascript library, here is a link to a vast amount of videos to help get you started.</p><br/><br/><p><a href="http://developer.yahoo.com/yui/theater/" rel="nofollow"><a href="http://developer.yahoo.com/yui/theater/" rel="nofollow">http://developer.yahoo.com/yui/theater/</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS.NET APPLIC DIAGRAM
    </pattern>
    <template>
<![CDATA[<p>I used to use it a lot.  This designer worked good for stubbing out prototype projects, but ultimately I found myself wasting a lot of time moving the mouse around when I could be typing.  It seemed like an awesome idea to be able to print out the class diagrams to show APIs to other developers while I was prototyping, but it proved quite limiting and it looks awful on a non-color printer.</p><br/><br/><p>Now I just use the text editor and some <a href="http://www.autohotkey.com" rel="nofollow">AutoHotkey</a> macros to get everything done.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT FIELD VALID USE ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<p>Take a look at the <a href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/" rel="nofollow">JQuery Validation plugin</a> this plugin is amazing,it's clean to implement and has all the features you could ever need, including remote validation via AJAX.</p><br/><br/><p>Also a sample MVC controller method can be found <a href="http://httpcode.com/blogs/PermaLink,guid,f8970f20-90d1-4af6-b2da-0285f1963b14.aspx" rel="nofollow">here</a> which basically uses the JsonResult action type like:</p><br/><br/><pre><code>public JsonResult CheckUserName(string username)<br/>{<br/>    return Json(CheckValidUsername(username));<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTMLSPECIALCHARACT EQUIVAL IN .NET
    </pattern>
    <template>
<![CDATA[<p>Try this.</p><br/><br/><pre><code>var encodedHtml = HttpContext.Current.Server.HtmlEncode(...);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOWNLOAD AND EXTRACT A GZIP FILE WITH C #
    </pattern>
    <template>
<![CDATA[<p>Here is a post I wrote last year that shows how to decompress a gzip file using C# and the built-in GZipStream class.<br/><a href="http://blogs.msdn.com/miah/archive/2007/09/05/zipping-files.aspx" rel="nofollow">http://blogs.msdn.com/miah/archive/2007/09/05/zipping-files.aspx</a></p><br/><br/><p>As for downloading it, you can use the standard <a href="http://msdn.microsoft.com/en-us/library/system.net.webrequest.aspx" rel="nofollow">WebRequest</a> or <a href="http://msdn.microsoft.com/en-us/library/system.net.webclient.aspx" rel="nofollow">WebClient</a> classes in .NET. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REAL LIFE APPLIC OF YIELD
    </pattern>
    <template>
<![CDATA[<p>I realise this is an old question (pre Jon Skeet?) but I have been considering this question myself just lately. Unfortunately the current answers here (in my opinion) don't mention the most obvious advantage of the yield statement.</p><br/><br/><p>The biggest benefit of the yield statement is that it allows you to iterate over very large lists with much more efficient memory usage then using say a standard list.</p><br/><br/><p>For example, let's say you have a database query that returns 1 million rows.  You could retrieve all rows using a DataReader and store them in a List, therefore requiring list_size * row_size bytes of memory.</p><br/><br/><p>Or you could use the yield statement to create an Iterator and only ever store one row in memory at a time.  In effect this gives you the ability to provide a "streaming" capability over large sets of data. </p><br/><br/><p>Moreover, in the code that uses the Iterator, you use a simple foreach loop and can decide to break out from the loop as required.  If you do break early, you have not forced the retrieval of the entire set of data when you only needed the first 5 rows (for example).</p><br/><br/><p>Regarding:</p><br/><br/><pre><code>Ideally some problem that cannot be solved some other way<br/></code></pre><br/><br/><p>The yield statement does not give you anything you could not do using your own custom iterator implementation, but it saves you needing to write the often complex code needed.  There are very few problems (if any) that can't solved more than one way.</p><br/><br/><p>Here are a couple of more recent questions and answers that provide more detail:</p><br/><br/><p><a href="http://stackoverflow.com/questions/384392/yield-keyword-value-added">http://stackoverflow.com/questions/384392/yield-keyword-value-added</a></p><br/><br/><p><a href="http://stackoverflow.com/questions/317619/is-yield-useful-outside-of-linq">http://stackoverflow.com/questions/317619/is-yield-useful-outside-of-linq</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ILIST AND WHEN TO USE LIST
    </pattern>
    <template>
<![CDATA[<p>There are two rules I follow:</p><br/><br/><ul><br/><li>Accept the most basic type that will work</li><br/><li>Return the richest type your user will need</li><br/></ul><br/><br/><p>So when writing a function or method that takes a collection, write it not to take a List, but an IList&lt;T&gt;, an ICollection&lt;T&gt;, or IEnumerable&lt;T&gt;.  The generic interfaces will still work even for heterogenous lists because System.Object can be a T too.  Doing this will save you headache if you decide to use a Stack or some other data structure further down the road.  If all you need to do in the function is foreach through it, IEnumerable&lt;T&gt; is really all you should be asking for.</p><br/><br/><p>On the other hand, when returning an object out of a function, you want to give the user the richest possible set of operations without them having to cast around.  So in that case, if it's a List&lt;T&gt; internally, return a copy as a List&lt;T&gt;.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIVAT A BLOGENGINE.NET INSTAL
    </pattern>
    <template>
<![CDATA[<p>I use this extension. Just save the file as RequireLogin.cs in your App_Code\Extensions folder and make sure the extension is activated.</p><br/><br/><pre><code>using System;<br/><br/>using System.Data;<br/><br/>using System.Configuration;<br/><br/>using System.Web;<br/><br/>using System.Web.Security;<br/><br/>using System.Web.UI;<br/><br/>using System.Web.UI.HtmlControls;<br/><br/>using System.Web.UI.WebControls;<br/><br/>using System.Web.UI.WebControls.WebParts;<br/><br/>using BlogEngine.Core;<br/><br/>using BlogEngine.Core.Web.Controls;<br/><br/>using System.Collections.Generic;<br/><br/><br/><br/>/// &lt;summary&gt;<br/><br/>/// Summary description for PostSecurity<br/><br/>/// &lt;/summary&gt;<br/><br/>[Extension("Checks to see if a user can see this blog post.",<br/><br/>            "1.0", "&lt;a href=\"http://www.lavablast.com\"&gt;LavaBlast.com&lt;/a&gt;")]<br/><br/>public class RequireLogin<br/>{<br/><br/>    static protected ExtensionSettings settings = null;<br/><br/><br/><br/>    public RequireLogin()<br/>    {<br/><br/>        Post.Serving += new EventHandler&lt;ServingEventArgs&gt;(Post_Serving);<br/><br/><br/><br/>        ExtensionSettings s = new ExtensionSettings("RequireLogin");<br/><br/>        // describe specific rules for entering parameters<br/><br/>        s.Help = "Checks to see if the user has any of those roles before displaying the post. ";<br/><br/>        s.Help += "You can associate a role with a specific category. ";<br/><br/>        s.Help += "All posts having this category will require that the user have the role. ";<br/><br/>        s.Help += "A parameter with only a role without a category will enable to filter all posts to this role. ";<br/><br/>        ExtensionManager.ImportSettings(s);<br/><br/>        settings = ExtensionManager.GetSettings("PostSecurity");<br/><br/>    }<br/><br/><br/><br/>    protected void Post_Serving(object sender, ServingEventArgs e)<br/>    {<br/>        MembershipUser user = Membership.GetUser();<br/>        if(HttpContext.Current.Request.RawUrl.Contains("syndication.axd"))<br/>        {<br/>            return;<br/>        }<br/><br/>        if (user == null)<br/>        {<br/>            HttpContext.Current.Response.Redirect("~/Login.aspx");<br/>        }<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USTOM CONTROL COMPOSIT
    </pattern>
    <template>
<![CDATA[<p>I say go ahead with the custom rendered control. I find that in most cases the composite can be easier done and used in a UserControl, but anything beyond that and you'd need to have a finer degree of control (pun unintended) to merit your own rendering strategy.</p><br/><br/><p>There maybe controls that are simple enough to merit a composite (e.g., a textbox combined with a javascript/dhtml based datepicker, for example) but beyond that one example, it looks like custom rendered controls are the way to go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WINDOW VISTA UAC ELEV IF PATH IS PROTECT
    </pattern>
    <template>
<![CDATA[<p>The best way to detect if they are unable to perform an action is to attempt it and catch the <code>UnauthorizedAccessException</code>.</p><br/><br/><p>However as @<a href="http://stackoverflow.com/users/941/dannysmurf">DannySmurf</a> <a href="http://stackoverflow.com/questions/17533/request-vista-uac-elevation-if-path-is-protected#17544">correctly points out</a> you can only elevate a COM object or separate process.</p><br/><br/><p>There is a demonstration application within the Windows SDK Cross Technology Samples called <a href="http://msdn.microsoft.com/en-us/library/aa970890.aspx" rel="nofollow" title="MSDN - UAC Sample">UAC Demo</a>.  This demonstration application shows a method of executing actions with an elevated process.  It also demonstrates how to find out if a user is currently an administrator.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLACE A FILE IN RECYCL BIN INSTEAD OF DELET
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.daveamenta.com/2008-05/c-delete-a-file-to-the-recycle-bin/" rel="nofollow">http://www.daveamenta.com/2008-05/c-delete-a-file-to-the-recycle-bin/</a></p><br/><br/><p>From above:</p><br/><br/><pre><code>using Microsoft.VisualBasic;<br/><br/>string path = @"c:\myfile.txt";<br/>FileIO.FileSystem.DeleteDirectory(path, <br/>    FileIO.UIOption.OnlyErrorDialogs, <br/>    RecycleOption.SendToRecycleBin);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPLEX OBJECT AS A WEB SERVIC RESULT
    </pattern>
    <template>
<![CDATA[<p>The .Net XML (de)serialisation is pretty nicely implemented. At first thought, I don't think this is a bad idea at all.</p><br/><br/><p>If the two applications import the same C# class(es) definition(s), then this is a relatively nice way of getting copy-constructor behaviour for free. If the class structure changes, then everything will work when both sides get the new class definition, without needing to make any additional changes on the web-service consumption/construction side.</p><br/><br/><p>There's a slight overhead in marshalling and demarshalling the XML, but that is probably dwarved by the overhead of the remote web service call. .Net XML serialisation is well understood by most programmers and should produce an easy to maintain solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KNOW A QUICK WAY TO GET TO CUSTOM ATTRIBUT ON AN ENUM VALU
    </pattern>
    <template>
<![CDATA[<p>This is probably the easiest way.</p><br/><br/><p>A quicker way would be to Statically Emit the IL code using Dynamic Method and ILGenerator. Although I've only used this to GetPropertyInfo, but can't see why you couldn't emit CustomAttributeInfo as well. </p><br/><br/><p>For example code to emit a getter from a property</p><br/><br/><pre><code>   public delegate object FastPropertyGetHandler(object target);    <br/><br/>    private static void EmitBoxIfNeeded(ILGenerator ilGenerator, System.Type type)<br/>    {<br/>        if (type.IsValueType)<br/>        {<br/>            ilGenerator.Emit(OpCodes.Box, type);<br/>        }<br/>    }<br/><br/>    public static FastPropertyGetHandler GetPropertyGetter(PropertyInfo propInfo)<br/>        {<br/>            // generates a dynamic method to generate a FastPropertyGetHandler delegate<br/>            DynamicMethod dynamicMethod =<br/>                new DynamicMethod(string.Empty, typeof (object), new Type[] {typeof (object)},<br/>                                  propInfo.DeclaringType.Module);<br/><br/>            ILGenerator ilGenerator = dynamicMethod.GetILGenerator();<br/>            // loads the object into the stack<br/>            ilGenerator.Emit(OpCodes.Ldarg_0);<br/>            // calls the getter<br/>            ilGenerator.EmitCall(OpCodes.Callvirt, propInfo.GetGetMethod(), null);<br/>            // creates code for handling the return value<br/>            EmitBoxIfNeeded(ilGenerator, propInfo.PropertyType);<br/>            // returns the value to the caller<br/>            ilGenerator.Emit(OpCodes.Ret);<br/>            // converts the DynamicMethod to a FastPropertyGetHandler delegate to get the property<br/>            FastPropertyGetHandler getter =<br/>                (FastPropertyGetHandler) dynamicMethod.CreateDelegate(typeof (FastPropertyGetHandler));<br/><br/><br/>            return getter;<br/>        }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROUND UP THE RESULT OF INTEG DIVIS
    </pattern>
    <template>
<![CDATA[<p>Found an elegant solution:</p><br/><br/><pre><code>int pageCount = (records + recordsPerPage - 1) / recordsPerPage;<br/></code></pre><br/><br/><p>Source: <a href="http://www.cs.nott.ac.uk/~rcb/G51MPC/slides/NumberLogic.pdf" rel="nofollow">Number Conversion, Roland Backhouse, 2001</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STUDI COMPAR JEE VS. .NET
    </pattern>
    <template>
<![CDATA[<p>People have successfully built applications with both technology stacks.  People have also experienced colossal failures with both.  In the end, compatibility with existing platforms and skill sets is probably what matters most when selecting one over the other.  If you intend to deploy on non-Windows servers, for instance, then Java is obviously a better fit.</p><br/><br/><p>EDIT: The best way to get access to those kinds of studies is to get them from someone interested in selling you the technology.  Otherwise, companies like the Gartner Group charge large sums of money for papers like that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOUS CLICK TO A BUTTON IN THE TASKBAR USE C #
    </pattern>
    <template>
<![CDATA[<p>Check out the section "How to steal focus on 2K/XP" at <a href="http://www.codeproject.com/KB/dialog/dlgboxtricks.aspx" rel="nofollow">http://www.codeproject.com/KB/dialog/dlgboxtricks.aspx</a>, as this is exactly what you need. I wouldn't go the taskbar route as the taskbar could be hidden or simply not there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT ELS DO YOU USE BESID DATASET
    </pattern>
    <template>
<![CDATA[<p>Since .NET 3.5 came out, I've exclusively used LINQ. It's really that good; I don't see any reason to use any of those old crutches any more. </p><br/><br/><p>As great as LINQ is, though, I think any ORM system would allow you to do away with that dreck.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT A SINGL INSTANC APPLIC
    </pattern>
    <template>
<![CDATA[<p>Here is a very good <a href="http://sanity-free.org/143/csharp_dotnet_single_instance_application.html" rel="nofollow">article</a> regarding the Mutex solution.  The approach described by the article is advantageous for two reasons.</p><br/><br/><p>First, it does not require a dependency on the Microsoft.VisualBasic assembly.  If my project already had a dependency on that assembly, I would probably advocate using the approach shown in the accepted answer.  But as it is, I do not use the Microsoft.VisualBasic assembly, and I'd rather not add an unnecessary dependency to my project.</p><br/><br/><p>Second, the article shows how to bring the existing instance of the application to the foreground when the user tries to start another instance.  That's a very nice touch that the other Mutex solutions described here do not address.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GO FROM JAVA C # TO C + +
    </pattern>
    <template>
<![CDATA[<p>Yeah, I got bit by the same bug.  The university tended to lean on Java, and then allowed you to choose the language you wanted to work with during projects.</p><br/><br/><p>The best way is to just jump in. Start small, take baby steps, and just Google things that confuse you when you get there. Also find projects that have released their source code. See how they structure their programs. Basically, just tinker with concepts.  There is plenty of information around the web.</p><br/><br/><p>Make it fun and grab a <a href="http://rads.stackoverflow.com/amzn/click/1598633600" rel="nofollow">C++ game development book</a> so it doesn't become mind numbing too quickly. </p><br/><br/><p>Here's some places that I found useful while learning</p><br/><br/><p><a href="http://www.cprogramming.com/" rel="nofollow"><a href="http://www.cprogramming.com/" rel="nofollow">http://www.cprogramming.com/</a></a></p><br/><br/><p><a href="http://www.wikipedia.com" rel="nofollow"><a href="http://www.wikipedia.com" rel="nofollow">http://www.wikipedia.com</a></a></p><br/><br/><p><a href="http://www.cplusplus.com/" rel="nofollow"><a href="http://www.cplusplus.com/" rel="nofollow">http://www.cplusplus.com/</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUDIO SILENC IN WAV FILE USE C #
    </pattern>
    <template>
<![CDATA[<p>Audio analysis is a difficult thing requiring a lot of complex math (think Fourier Transforms). The question you have to ask is "what is silence". If the audio that you are trying to edit is captured from an analog source, the chances are that there isn't any silence... they will only be areas of soft noise (line hum, ambient background noise, etc).</p><br/><br/><p>All that said, an algorithm that should work would be to determine a minimum volume (amplitude) threshold and duration (say, &lt;10dbA for more than 2 seconds) and then simply do a volume analysis of the waveform looking for areas that meet this criteria (with perhaps some filters for millisecond spikes). I've never written this in C#, but this <a href="https://secure.codeproject.com/KB/audio-video/SoundViewer.aspx?fid=448560&amp;df=90&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;select=2202971" rel="nofollow">CodeProject article</a> looks interesting; it describes C# code to draw a waveform... that is the same kind of code which could be used to do other amplitude analysis.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSTEM.SERVICEMODEL CONFIGUR SECTION USE CONFIGURATIONMANAG
    </pattern>
    <template>
<![CDATA[<p>The &lt; system.serviceModel> element is for a configuration section <strong>group</strong>, not a section. You'll need to use System.ServiceModel.Configuration.ServiceModelSectionGroup.GetSectionGroup() to get the whole group;</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN SEPAR ASSEMBL IN ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<p>Essentially this is the same issue as people had with WebForms and trying to compile their UserControl ASCX files into a DLL. I found this <a href="http://www.codeproject.com/KB/aspnet/ASP2UserControlLibrary.aspx" rel="nofollow">http://www.codeproject.com/KB/aspnet/ASP2UserControlLibrary.aspx</a> that might work for you too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FILE IN C #
    </pattern>
    <template>
<![CDATA[<p>The File.Copy method:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/system.io.file.copy.aspx" rel="nofollow">MSDN Link</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR JAVA DEVELOP
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.25hoursaday.com/CsharpVsJava.html" rel="nofollow">http://www.25hoursaday.com/CsharpVsJava.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA FROM A C # APPLIC
    </pattern>
    <template>
<![CDATA[<p>Here is one idea: use Xml Serialization.  Design your GameStats data structure and optionally use Xml attributes to influence the schema as you like.  I like to use this method for small data sets because its quick and easy and all I need to do is design and manipulate the data structure.</p><br/><br/><pre><code><br/>using (FileStream fs = new FileStream(....))<br/>{<br/>    // Read in stats<br/>    XmlSerializer xs = new XmlSerializer(typeof(GameStats));<br/>    GameStats stats = (GameStats)xs.Deserialize(fs);<br/><br/>    // Manipulate stats here ...<br/><br/>    // Write out game stats<br/>    XmlSerializer xs = new XmlSerializer(typeof(GameStats));<br/>    xs.Serialize(fs, stats);<br/><br/>    fs.Close();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPORARI FILE ( FOR WRITE TO ) IN C #
    </pattern>
    <template>
<![CDATA[<p>That was covered here: <a href="http://stackoverflow.com/questions/16656/creating-tempory-folders" rel="nofollow"><a href="http://stackoverflow.com/questions/16656/creating-tempory-folders" rel="nofollow">http://stackoverflow.com/questions/16656/creating-tempory-folders</a></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT ORDIN IN C #
    </pattern>
    <template>
<![CDATA[<p>This page gives you a complete listing of all custom numerical formatting rules:</p><br/><br/><p><a href="http://msdn.microsoft.com/en-us/library/0c899ak8.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/0c899ak8.aspx</a></p><br/><br/><p>As you can see, there is nothing in there about ordinals, so it can't be done using String.Format. However its not really that hard to write a function to do it.</p><br/><br/><pre><code>public string AddOrdinal(int num)<br/>{<br/>	switch(num % 100)<br/>	{<br/>		case 11:<br/>		case 12:<br/>		case 13:<br/>			return num.ToString() + "th";<br/>	}<br/><br/>	switch(num % 10)<br/>	{<br/>		case 1:<br/>			return num.ToString() + "st";<br/>		case 2:<br/>			return num.ToString() + "nd";<br/>		case 3:<br/>			return num.ToString() + "rd";<br/>		default:<br/>			return num.ToString() + "th";<br/>	}<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLIC DETECT AS A VIRU
    </pattern>
    <template>
<![CDATA[<p>Indeed, boot from a clean CD (use a known good machine to build <a href="http://nu2.nu/pebuilder/" rel="nofollow">BartPE</a> or something similar) and scan your machine thoroughly.  Another good thing to check, though, would be exactly which virus Avast! thinks your program is.  Once you know that, you should be able to look it up in one of the virus databases and insure that your software can't contain it.</p><br/><br/><p>The odds are that Avast! is just getting a false positive for some reason, and I don't know that there's much you can do about that other than contacting Avast! and hoping for a reply.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LMERG AND WEB RESOURC
    </pattern>
    <template>
<![CDATA[<p>OK - I got this working.  It looks like the primary assembly was the only one whose assembly attributes were being copied.  With copyattrs set, the last one in would win, not a merge (as far as I can tell).  I created a dummy project to reference the other DLL's and included all the web resources from those projects in the dummy assembly info - now multiple resources from multiple projects are all loading correctly.</p><br/><br/><p>Final post-build command line for dummy project:<br/>"C:\Program Files\Microsoft\ILMerge\ILMerge.exe" /keyfile:../../Company.snk /wildcards:True /out:Company.dll Company.Merge.dll Company.*.dll </p><br/><br/><p>Thanks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC TOKEN IN A LARG TEXT TEMPLAT
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.replace.aspx" rel="nofollow" title="MSDN">System.Text.RegularExpressions.Regex.Replace()</a> is what you seek - IF your tokens are odd enough that you need a regex to find them.</p><br/><br/><p><a href="http://blogs.msdn.com/debuggingtoolbox/archive/2008/04/02/comparing-regex-replace-string-replace-and-stringbuilder-replace-which-has-better-performance.aspx" rel="nofollow">Some kind soul did some performance testing</a>, and between Regex.Replace(), String.Replace(), and StringBuilder.Replace(), String.Replace() actually came out on top.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT ARE ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>Metadata. Data about your objects/methods/properties. </p><br/><br/><p>For example I might declare an Attribute called: DisplayOrder so I can easily control in what order properties should appear in the UI. I could then append it to a class and write some GUI components that extract the attributes and order the UI elements appropriately.</p><br/><br/><pre><code>public class DisplayWrapper<br/>{<br/>private UnderlyingClass underlyingObject;<br/><br/>public DisplayWrapper(UnderlyingClass u)<br/>{<br/>	underlyingObject = u;<br/>}<br/><br/>[DisplayOrder(1)]<br/>public int SomeInt<br/>{<br/>	get<br/>	{<br/>		return underlyingObject .SomeInt;<br/>	}<br/>}<br/><br/>[DisplayOrder(2)]<br/>public DateTime SomeDate<br/>{<br/>	get<br/>	{<br/>		return underlyingObject .SomeDate;<br/>	}<br/>}<br/></code></pre><br/><br/><p>}</p><br/><br/><p>Thereby ensuring that SomeInt is always displayed before SomeDate when working with my custom GUI components.</p><br/><br/><p>However, you'll see them most commonly used outside of the direct coding environment. For example the Windows Designer uses them extensively so it knows how to deal with custom made objects. Using the BrowsableAttribute like so:</p><br/><br/><pre><code>[Browsable(false)]<br/>public SomeCustomType DontShowThisInTheDesigner<br/>{<br/>    get{/*do something*/}<br/>}<br/></code></pre><br/><br/><p>Tells the designer not to list this in the available properties in the Properties window at design time for example.</p><br/><br/><p>You <em>could</em> also use them for code-generation, pre-compile operations (such as Post-Sharp)  or run-time operations such as Reflection.Emit.<br/>For example, you could write a bit of code for profiling that transparently wrapped every single call your code makes and times it. You could "opt-out" of the timing via an attribute that you place on particular methods.</p><br/><br/><pre><code>public void SomeProfilingMethod(MethodInfo targetMethod, object target, params object[] args)<br/>{<br/>    bool time = true;<br/>    foreach (Attribute a in target.GetCustomAttributes())<br/>    {<br/>    	if (a.GetType() is NoTimingAttribute)<br/>    	{<br/>    		time = false;<br/>    		break;<br/>    	}<br/>    }<br/>    if (time)<br/>    {<br/>    	StopWatch stopWatch = new StopWatch();<br/>    	stopWatch.Start();<br/>    	targetMethod.Invoke(target, args);<br/>    	stopWatch.Stop();<br/>    	HandleTimingOutput(targetMethod, stopWatch.Duration);<br/>    }<br/>    else<br/>    {<br/>    	targetMethod.Invoke(target, args);<br/>    }<br/>}<br/></code></pre><br/><br/><p>Delcaring them is easy. Just make a class that inherits from Attribute. </p><br/><br/><pre><code>	public class DisplayOrderAttribute : Attribute<br/>	{<br/>		private int order;<br/><br/>		public DisplayOrderAttribute(int order)<br/>		{<br/>			this.order = order;<br/>		}<br/><br/>		public int Order<br/>		{<br/>			get { return order; }<br/>		}<br/>	}<br/></code></pre><br/><br/><p>And remember that when you use the attribute you can omit the suffix "attribute" the compiler will add that for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEL LISTOBJECT AUTOS ON DATABIND
    </pattern>
    <template>
<![CDATA[<p>If anyone else is having this problem, I have found the cause of this exception.  ListObjects will automatically re-size on binding, as long as they do not affect any other objects on the sheet.  Keep in mind that ListObjects can only affect the Ranges which they wrap around.</p><br/><br/><p>In my case, the list object which was above the other one had fewer columns than the one below it.  Let's say the top ListObject had 2 columns, and the bottom ListObject had 3 columns.  When the top ListObject changed its number of rows, it had no ability to make any changes to the third column since it wasn't in it's underlying Range.  This means that it couldn't shift any cells in the third column, and so the second ListObject couldn't be properly moved, resulting in my exception above.</p><br/><br/><p>Changing the positions of the ListObjects to place the wider one above the smaller one works fine.  Following the logic above, this now means that the wider ListObject can shift all of the columns of the second ListObject, and since there is nothing below the smaller one it can also shift any cells necessary.  The reason I wasn't having any trouble on the initial binding is that both ListObjects were a single cell.</p><br/><br/><p>Since this is not optimal in my case, I will probably use empty columns or try to play around with invisible columns if that's possible, but at least the cause is now clear.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATH DISPLAY IN LABEL
    </pattern>
    <template>
<![CDATA[<p>Use <strong>TextRenderer.DrawText</strong> with <strong>TextFormatFlags.PathEllipsis</strong> flag</p><br/><br/><pre><code>void label_Paint(object sender, PaintEventArgs e)<br/>{<br/>  Label label = (Label)sender;<br/>  TextRenderer.DrawText(e.Graphics, label.Text, label.Font, label.ClientRectangle, label.ForeColor, TextFormatFlags.PathEllipsis);<br/>}<br/></code></pre><br/><br/><blockquote><br/>  <p>Your code is 95% there. The only<br/>  problem is that the trimmed text is<br/>  drawn on top of the text which is<br/>  already on the label.</p><br/></blockquote><br/><br/><p>Yes thanks, I was aware of that. My intention was only to demonstrate use of DrawText method. I didn't know whether you want to manually create event for each label or just  override OnPaint() method in inherited label. Thanks for sharing your final solution though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NODE FROM AN XMLDOCUMENT
    </pattern>
    <template>
<![CDATA[<p>Instead of </p><br/><br/><pre><code>configDoc.RemoveChild(projectNodes[i]);<br/></code></pre><br/><br/><p>try </p><br/><br/><pre><code>projectNodes[i].parentNode.RemoveChild(projectNodes[i]);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SYSTEM.CONFIGURATION.CONFIGUR INSTANC BASE ON ARBITRARI XML
    </pattern>
    <template>
<![CDATA[<p>There is actually a way I've discovered....</p><br/><br/><p>You need to define a new class inheriting from your original configuration section as follows:</p><br/><br/><pre><code>public class MyXmlCustomConfigSection : MyCustomConfigSection<br/>{<br/>    public MyXmlCustomConfigSection (string configXml)<br/>    {<br/>        XmlTextReader reader = new XmlTextReader(new StringReader(configXml));<br/>        DeserializeSection(reader);<br/>    }<br/>}<br/></code></pre><br/><br/><p><br/><br/>You can then instantiate your ConfigurationSection object as follows:</p><br/><br/><pre><code>string configXml = "&lt;?xml version=\"1.0\"?&gt;&lt;configuration&gt;...&lt;/configuration&gt;";<br/>MyCustomConfigSection config = new MyXmlCustomConfigSection(configXml);<br/></code></pre><br/><br/><p>Hope it helps someone :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING CONCATEN METHOD USE C #
    </pattern>
    <template>
<![CDATA[<p>The StringBuilder.Append() method is much better than using the + operator.  But I've found that, when the concatenations are less than 1000, String.Join() is even more efficient than StringBuilder.</p><br/><br/><pre><code>StringBuilder sb = new StringBuilder();<br/>sb.Append(someString);<br/></code></pre><br/><br/><p>The only problem with String.Join is that you have to concatenate the strings with a common delimiter.  </p><br/><br/><pre><code>string key = String.Join("_", new String[] <br/>{ "Customers_Contacts", customerID, database, SessionID });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MISS SOMETH ABOUT LINQ
    </pattern>
    <template>
<![CDATA[<p>LINQ is not about SQL. LINQ is about being apply functional programming paradigmns on objects.</p><br/><br/><p>LINQ to SQL is an ORM built ontop of the LINQ foundation, but LINQ is much more. I don't use LINQ to SQL, yet I use LINQ all the time.</p><br/><br/><p>Take the task of finding the intersection of two lists:</p><br/><br/><p>Before LINQ, this tasks requires writing a nested foreach that iterates the small list once for every item in the big list O(N*M), and takes about 10 lines of code.</p><br/><br/><pre><code>foreach (int number in list1)<br/>{<br/>    foreach (int number2 in list2)<br/>    {<br/>        if (number2 == number)<br/>        {<br/>            returnList.add(number2);<br/>        }<br/>    }<br/>}<br/></code></pre><br/><br/><p>Using LINQ, it does the same thing in one line of code:</p><br/><br/><pre><code>var results = list1.Intersect(list2);<br/></code></pre><br/><br/><p>You'll notice that doesn't look like LINQ, yet it is. You don't need to use the expression syntax if you don't want to.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET DEPEND INJECT FRAMEWORK ARE WORTH LOOK INTO
    </pattern>
    <template>
<![CDATA[<p>I suppose I might be being a bit picky here but it's important to note DI (Dependency Injection) is a programming pattern and is facilitated by (but does not require) an IoC (Inversion of Control) Framework. IoC Frameworks just make DI much easier, but it's not only DI that they do, they provide a host of other benefits over and above DI.</p><br/><br/><p>That being said, I'm sure that's what you were asking: about IoC Frameworks: I used to use <a href="http://www.springframework.net/" rel="nofollow">Spring.Net</a> and <a href="http://www.castleproject.org/container/index.html" rel="nofollow">CastleWindsor</a> a lot, but the real pain in the beehiind was all that pesky XML config you had to write! They're pretty much all moving this way now, but I started using <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> for the last year or so, and since it has moved to a fluent config using strongly typed generics and a registry, my pain barrier in using IoC has dropped below zero! I get an absolute kick out of knowing now that my IoC config is checked at compile-time (for the most part) and I have had nothing but joy with <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> and its speed. I won't say that the others were slow (runtime), but they were more difficult for me to setup and frustration often won the day.</p><br/><br/><p>I believe they're all moving towards a more strongly typed config now - or at least providing the option, but some people love putting all the config in XML - personally I can't bare it, so I have stuck to StructureMap now.</p><br/><br/><p>I can't comment much on <a href="http://ninject.org/" rel="nofollow">Ninject</a> except that I listened to Nate on one of the Herding Code podcasts and he's one <em>switched-on</em> guy, and the screencasts I've watched have really tempted me to try it out - maybe on the next project - who knows.</p><br/><br/><p><strong>Update:</strong> In a follow up to my comments here, I've been using <a href="http://ninject.org/" rel="nofollow">Ninject</a> (as promised) on my latest project and it has been an <em>absolute pleasure</em> to use. Words fail me a bit here, but (as we say in the UK) this framework is <em>the Dogs'</em>. I highly recommend it for any green fields projects where you want to be up and running quickly. I got all I needed from a <a href="http://www.dimecasts.net/Casts/ByAuthor/Justin%20Etheredge" rel="nofollow">fantastic set of Ninject screencasts</a> by Justin Etheredge. I also can't see that retro-fitting Ninject into existing (above average) code being a problem at all - but then the same could be said of <a href="http://structuremap.sourceforge.net/Default.htm" rel="nofollow">StructureMap</a> in my experience. It'll be a tough choice going forward between those two, but I'd rather have competition than stagnation and there's a decent amount of healthy competition out there.</p><br/><br/><p>Other IoC screencasts can also be found <a href="http://www.dimecasts.net/Casts/ByTag/IoC" rel="nofollow">here on Dimecasts</a>.</p><br/><br/><p>Hope that helps,</p><br/><br/><p>Rob G</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE EXCEPT FOR SPECIF ISSU OR GENER EXCEPT
    </pattern>
    <template>
<![CDATA[<p>I usually start with a general exception and subclass it as needed. I always can catch the general exception (and with it all subclassed exceptions) if needed, but also the specific.</p><br/><br/><p>An example from the Java-API is IOException, that has subclasses like FileNotFoundException or EOFException (and much more).</p><br/><br/><p>This way you get the advantages of both, you don't have throw-clauses like:</p><br/><br/><pre><code>throws SpecificException1, SpecificException2, SpecificException3 ...<br/></code></pre><br/><br/><p>a general</p><br/><br/><pre><code>throws GeneralException<br/></code></pre><br/><br/><p>is enough. But if you want to have a special reaction to special circumstances you can always catch the specific exception.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMUN SERVIC LAYER MESSAGES ERROR TO HIGHER LAYER USE MVP
    </pattern>
    <template>
<![CDATA[<p>That sounds just right to me. Exceptions are preferable as they can be thrown up to the top of the service layer from anywhere inside the service layer, no matter how deeply nested inside the service method implementation it is. This keeps the service code clean as you know the calling presenter will always get notification of the problem.</p><br/><br/><p><strong>Don't catch Exception</strong></p><br/><br/><p>However, <a href="http://stackoverflow.com/questions/21938/is-it-really-that-bad-to-catch-a-general-exception" rel="nofollow">don't catch Exception</a> in the presenter, I know its tempting because it keeps the code shorter, but you need to catch specific exceptions to avoid catching the system-level exceptions. </p><br/><br/><p><strong>Plan a Simple Exception Hierarchy</strong></p><br/><br/><p>If you are going to use exceptions in this way, you should design an exception hierarchy for your own exception classes. <br/>At a minumum create a ServiceLayerException class and throw one of these in your service methods when a problem occurs. Then if you need to throw an exception that should/could be handled differently by the presenter, you can throw a specific subclass of ServiceLayerException: say, AccountAlreadyExistsException.</p><br/><br/><p>Your presenter then has the option of doing</p><br/><br/><pre><code>try {<br/>  // call service etc.<br/>  // handle success to view<br/>} <br/>catch (AccountAlreadyExistsException) {<br/>  // set the message and some other unique data in the view<br/>}<br/>catch (ServiceLayerException) {<br/>  // set the message in the view<br/>}<br/>// system exceptions, and unrecoverable exceptions are allowed to bubble <br/>// up the call stack so a general error can be shown to the user, rather <br/>// than showing the form again.<br/></code></pre><br/><br/><p>Using inheritance in your own exception classes means you are not required to catch multipile exceptions in your presenter -- you can if there's a need to -- and you don't end up accidentally catching exceptions you can't handle. If your presenter is already at the top of the call stack, add a catch( Exception ) block to handle the system errors with a different view.</p><br/><br/><p>I always try and think of my service layer as a seperate distributable library, and throw as specific an exception as makes sense. It is then up to the presenter/controller/remote-service implementation to decide if it needs to worry about the specific details or just to treat problems as a generic error.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUSINESSOBJECT OR BUSINESSOBJECTCOLLECT
    </pattern>
    <template>
<![CDATA[<p>I am generally in the camp of just using a  List directly, unless for some reason I need to encapsulate the data structure and provide a limited subset of its functionality. This is mainly because if I don't have a specific need for encapsulation then doing it is just a waste of time.</p><br/><br/><p>However, with the aggregate initializes feature in C# 3.0, there are some new situations where I would advocate using customized collection classes.</p><br/><br/><p>Basically, C# 3.0 allows any class that implements <code>IEnumerable</code> and has an Add method to use the new aggregate initializer syntax. For example, because Dictionary defines a method Add(K key, V value) it is possible to initialize a dictionary using this syntax:</p><br/><br/><pre><code>var d = new Dictionary&lt;string, int&gt;<br/>{<br/>    {"hello", 0},<br/>    {"the answer to life the universe and everything is:", 42}<br/>};<br/></code></pre><br/><br/><p>The great thing about the feature is that it works for add methods with any number of arguments. For example, given this collection:</p><br/><br/><pre><code>class c1 : IEnumerable<br/>{<br/>    void Add(int x1, int x2, int x3)<br/>    {<br/>        //...<br/>    }<br/><br/>    //...<br/>}<br/></code></pre><br/><br/><p>it would be possible to initialize it like so:</p><br/><br/><pre><code>var x = new c1<br/>{<br/>    {1,2,3},<br/>    {4,5,6}<br/>}<br/></code></pre><br/><br/><p>This can be really useful if you need to create static tables of complex objects. For example, if you were just using <code>List&lt;Customer&gt;</code> and you wanted to create a static list of customer objects you would have to create it like so:</p><br/><br/><pre><code>var x = new List&lt;Customer&gt;<br/>{<br/>    new Customer("Scott Wisniewski", "555-555-5555", "Seattle", "WA"),<br/>    new Customer("John Doe", "555-555-1234", "Los Angeles", "CA"),<br/>    new Customer("Michael Scott", "555-555-8769", "Scranton PA"),<br/>    new Customer("Ali G", "", "Staines", "UK")<br/>}<br/></code></pre><br/><br/><p>However, if you use a customized collection, like this one:</p><br/><br/><pre><code>class CustomerList  : List&lt;Customer&gt;<br/>{<br/>    public void Add(string name, string phoneNumber, string city, string stateOrCountry)<br/>    {<br/>        Add(new Customer(name, phoneNumber, city, stateOrCounter));<br/>    }<br/>}<br/></code></pre><br/><br/><p>You could then initialize the collection using this syntax:</p><br/><br/><pre><code>var customers = new CustomerList<br/>{<br/>    {"Scott Wisniewski", "555-555-5555", "Seattle", "WA"},<br/>    {"John Doe", "555-555-1234", "Los Angeles", "CA"},<br/>    {"Michael Scott", "555-555-8769", "Scranton PA"},<br/>    {"Ali G", "", "Staines", "UK"}<br/>}<br/></code></pre><br/><br/><p>This has the advantage of being both easier to type and easier to read because their is no need to retype the element type name for each element. The advantage can be particularly strong if the element type is long or complex. </p><br/><br/><p>That being said, this is only useful if you need static collections of data defined in your app. Some types of apps, like compilers, use them all the time. Others, like typical database apps don't because they load all their data from a database.</p><br/><br/><p>My advice would be that if you either need to define a static collection of objects, or need to encapsulate away the collection interface,  then create a custom collection class. Otherwise I would just use <code>List&lt;T&gt;</code> directly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCRYPT A CONFIG FIL IN .NET
    </pattern>
    <template>
<![CDATA[<p>To summarize the answers and what I've found so far, here are some good links to answer this question:</p><br/><br/><ul><br/><li><a href="http://aspnet.4guysfromrolla.com/articles/021506-1.aspx" rel="nofollow">Encrypting Configuration Information in ASP.NET 2.0 Applications - 4GuysFromRolla.com</a></li><br/><li><a href="http://davidhayden.com/blog/dave/archive/2005/11/17/2572.aspx" rel="nofollow">Encrypt Connection Strings AppSettings and Web.Config in ASP.NET 2.0 - Security Best Practices</a></li><br/><li><a href="http://blogs.techrepublic.com.com/programming-and-development/?p=448" rel="nofollow">Encrypting .NET configuration files through code</a> (VB.NET)</li><br/><li><a href="http://msdn.microsoft.com/en-us/library/ms998280.aspx" rel="nofollow">How To: Encrypt Configuration Sections in ASP.NET 2.0 Using DPAPI - MSDN</a></li><br/></ul><br/><br/><p>Please feel free to complement with other links, maybe some to WinForms- or WPF-applications.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SSEMBL AND IT DEPEND
    </pattern>
    <template>
<![CDATA[<p>One nice approach I've used lately is to add an event handler for the AppDomain's AssemblyResolve event.</p><br/><br/><pre><code>AppDomain currentDomain = AppDomain.CurrentDomain;<br/>currentDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);<br/></code></pre><br/><br/><p>Then in the event handler method you can load the assembly that was attempted to be resolved using one of the Assembly.Load, Assembly.LoadFrom overrides and return it from the method.</p><br/><br/><p>EDIT:</p><br/><br/><p>Based on your additional information I think using the technique above, specifically resolving the references to an assembly yourself is the only real approach that is going to work without restructuring your app. What it gives you is that the location of each and every assembly that the CLR fails to resolve can be determined and loaded by your code at runtime... I've used this in similar situations for both pluggable architectures and for an assembly reference integrity scanning tool.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LATE BIND 32BIT 64 BIT LIB AT RUNTIM
    </pattern>
    <template>
<![CDATA[<p>I finally have an answer for this that appears to work.</p><br/><br/><p>Compile both 32 &amp; 64 bit versions - both managed &amp; unmanaged - into separate folders. Then have the .NET app choose at run time which directory to load the assemblies from.</p><br/><br/><p>The problem with using the ResolveEvent is that it only gets called if assemblies aren't found, so it is all to easy to accidentally end up with 32 bit versions. Instead use a second AppDomain object where we can change the ApplicationBase property to point at the right folder. So you end up with code like:</p><br/><br/><pre><code>static void Main(String[] argv)<br/>  {<br/>     // Create a new AppDomain, but with the base directory set to either the 32-bit or 64-bit<br/>     // sub-directories.<br/><br/>     AppDomainSetup objADS = new AppDomainSetup();<br/><br/>     System.String assemblyDir = System.IO.Path.GetDirectoryName(Application.ExecutablePath);<br/>     switch (System.IntPtr.Size)<br/>     {<br/>        case (4): assemblyDir += "\\win32\\";<br/>           break;<br/>        case (8): assemblyDir += "\\x64\\";<br/>           break;<br/>     }<br/><br/>     objADS.ApplicationBase = assemblyDir;<br/><br/>     // We set the PrivateBinPath to the application directory, so that we can still<br/>     // load the platform neutral assemblies from the app directory.<br/>     objADS.PrivateBinPath = System.IO.Path.GetDirectoryName(Application.ExecutablePath);<br/><br/>     AppDomain objAD = AppDomain.CreateDomain("", null, objADS);<br/>     if (argv.Length &gt; 0)<br/>        objAD.ExecuteAssembly(argv[0]);<br/>     else<br/>        objAD.ExecuteAssembly("MyApplication.exe");<br/><br/>     AppDomain.Unload(objAD);<br/><br/>  }<br/></code></pre><br/><br/><p>You end up with 2 exes - your normal app and a second switching app that chooses which bits to load.<br/>Note - I can't take credit for the details of this myself. One of my colleagues sussed that out given my initial pointer. If and when he signs up to StackOverflow I'll assign the answer to him</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THROW EXCEPT BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>The way to preserve the stack trace is through the use of the throw; This is valid as well</p><br/><br/><pre><code>try {<br/>  // something that boms here<br/>} catch (Exception ex)<br/>{<br/>    throw;<br/>}<br/></code></pre><br/><br/><p>throw ex; is basically like throwing an exception from that point, so the stack trace would only go to where you are issuing the throw ex; statement</p><br/><br/><p><a href="http://stackoverflow.com/questions/22623/net-throwing-exceptions-best-practices#22649" rel="nofollow">@Mike</a> is also correct, assuming the exception allows you to pass an exception (which is recommended).</p><br/><br/><p><a href="http://codebetter.com/blogs/karlseguin/" rel="nofollow">Karl Seguin</a> has a <a href="http://codebetter.com/blogs/karlseguin/archive/2008/05/29/foundations-of-programming-pt-8-back-to-basics-exceptions.aspx" rel="nofollow">great write up on exception handling</a> in his <a href="http://codebetter.com/files/folders/codebetter_downloads/entry179694.aspx" rel="nofollow">foundations of programming e-book</a> as well, which is a great read.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREVENT LEAD ZERO FROM BE STRIP WHEN IMPORT AN EXCEL DOC USE C #
    </pattern>
    <template>
<![CDATA[<p>I believe you have to set the option in your connect string to force textual import rather than auto-detecting it.</p><br/><br/><pre><code>Provider=Microsoft.ACE.OLEDB.12.0;<br/>    Data Source=c:\path\to\myfile.xlsx;<br/>    Extended Properties=\"Excel 12.0 Xml;IMEX=1\";<br/></code></pre><br/><br/><p>Your milage may vary depending on the version you have installed.  The IMEX=1 extended property tells Excel to treat intermixed data as text.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST DOE N T CONTAIN TEXTBOX DATA ASP.NET C #
    </pattern>
    <template>
<![CDATA[<p>Are you initially loading the data only when !Page.IsPostBack? Also, is view state enabled for the text box?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SKILL WHAT SHOULD I LEARN
    </pattern>
    <template>
<![CDATA[<p>If you want to be one of the best you need to specialise.  If you become very good in many skills then you may never become truly excellent in one.  I know because I have taken this route myself and have found it difficult to get employment at times.  After all, who wants someone who is capable at many languages when there is someone who excels at the specific thing they need.  If a company develops in C# then who would want someone who is OK at C# but also is good at C, Visual Basic, Perl and Cobol, when all they really want is the best possible C# developer for the money they can afford.</p><br/><br/><p>After all, you will only ever be employed for one, maybe two of your skills.  There are very few jobs for people who are good in 10 or 15 skills.</p><br/><br/><p>If you are looking to a new skill then maybe check out the job boards and find which skills are particularly in need, but be aware that what is the flavour of the month this year may not even be on the scene next year, which will make all of that effort to learn the skill futile and wasted.</p><br/><br/><p>What I would say is:</p><br/><br/><ol><br/><li>do one thing, and do it well.  This may include supporting skills (C#, ASP.Net, SQL, LINQ etc).  </li><br/><li>If you want to choose something else, then choose something complementary.</li><br/><li>Possibly most importantly, choose something you will enjoy.  Maybe Ruby on Rails is the current flavour of the month, but if you don't enjoy doing it, then don't do it.  Really, it's not worth it.  You will never wish, on your death bed, that you had worked more in something you didn't enjoy.</li><br/></ol><br/><br/><p>Another direction you could look at is maybe not for a particular development skill, but look for something else, maybe softskills like people management, beter business understanding or even look to something like literary skills to help improve your communications skills.  All of these will help to allow you to do what you want to do more, and cut down on the stuff you really don't enjoy, thus helping to make your job more enjoyable.</p><br/><br/><p>Apologies for the waffling here.  Hope you are still awake :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITI CLASS FIELD IN CONSTRUCTOR OR AT DECLAR
    </pattern>
    <template>
<![CDATA[<p>My rules:<br><br/>1. Don't initialize with the default values in declaration (null, false, 0, 0.0...).<br><br/>2. Prefer initialization in declaration if you don't have a constructor parameter that changes the value of the field.<br><br/>3. If the value of the field changes because of a constructor parameter put the initialization in the constructors.<br><br/>4. Be consistent in your practice. (the most important rule)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOOK MY PROGRAM WITH WINDOW EXPLOR S RENAM EVENT
    </pattern>
    <template>
<![CDATA[<p>You can probably solve this by using the <a href="http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx" rel="nofollow">FileSystemWatcher class</a> in .NET framework.</p><br/><br/><p>From the class remarks:</p><br/><br/><blockquote><br/>  <p>You can watch for renaming, deletion,<br/>  or creation of files or directories.<br/>  For example, to watch for renaming of<br/>  text files, set the Filter property to<br/>  "*.txt" and call the WaitForChanged<br/>  method with a Renamed specified for<br/>  its parameter.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOD NOT WORK ON STACKOVERFLOW FEED
    </pattern>
    <template>
<![CDATA[<p>Don't confuse the namespace names in the XML file with the namespace names for your namespace manager. They're both shortcuts, and they don't necessarily have to match.</p><br/><br/><p>So you can register "http://www.w3.org/2005/Atom" as "atom", and then do a SelectNodes for "atom:entry".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # .NET WINDOW APPLIC WITH MULTIPL VIEW
    </pattern>
    <template>
<![CDATA[<p>Creating a bunch of overlaid panels is a design-time nightmare.</p><br/><br/><p>I would suggest using a tab control with each "view" on a separate tab, and then picking the correct tab at runtime.  You can avoid showing the tab headers by putting something like this in your form's Load event:</p><br/><br/><pre><code>tabControl1.Top = tabControl1.Top - tabControl1.ItemSize.Height;<br/>tabControl1.Height = tabControl1.Height + tabControl1.ItemSize.Height;<br/>tabControl1.Region = new Region(new RectangleF(tabPage1.Left, tabPage1.Top, tabPage1.Width, tabPage1.Height + tabControl1.ItemSize.Height));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRACTIC WHEN USE SWIG WITH C #
    </pattern>
    <template>
<![CDATA[<p>I think the mistake the earlier posters did was read the docs and not look at the examples. </p><br/><br/><p>A few hours ago I needed to interface some C++ classes to C#. I looked in my Swig dir (I already had it for other work), found the directory <code>Examples/csharp/class</code>, browsed the code, loaded the solution, grokked it, copied it, put in my code, it worked, my job was done. </p><br/><br/><p>With that said, generated P/Invoke code isn't a solution for all needs. Depending on your project, it may be just as simple to write some simple API wrappers yourself or write managed C++ (Look up SlimDX for a superb example of this). </p><br/><br/><p>For my needs, it was simple and easy - I had <code>mystuff.dll</code>, and now in addition I can ship  <code>mystuffnet.dll</code>. I'll agree that the doc is difficult to get into.</p><br/><br/><p>Edit: I noticed the OP only mentioned C. For that, you don't really need Swig, just use the <a href="http://msdn.microsoft.com/en-us/library/aa288468%28VS.71%29.aspx#pinvoke%5Fcallingdllexport" rel="nofollow">usual C#/C DLLImport interop syntax</a>. Swig becomes useful when you want to let <strong>C++ classes</strong> be invoked from C#.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOM WINDOW FORM TEST
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://www.codeplex.com/white" rel="nofollow">http://www.codeplex.com/white</a> and <a href="http://nunitforms.sourceforge.net/" rel="nofollow">http://nunitforms.sourceforge.net/</a>. We've used the White project with success.</p><br/><br/><p><em>Same Answer to a previous question</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FASTEST WAY TO REMOV NEWLIN FROM A STRING IN C #
    </pattern>
    <template>
<![CDATA[<p>why not:</p><br/><br/><pre><br/><code><br/>string s = "foobar\ngork";<br/>string v = s.Replace(Environment.NewLine,",");<br/>System.Console.WriteLine(v);<br/></code><br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COSTLI IS .NET REFLECT
    </pattern>
    <template>
<![CDATA[<p>It is. But that depends on what you're trying to do. </p><br/><br/><p>I use reflection to dynamically load assemblies (plugins) and its performance "penalty" is not a problem, since the operation is something I do during startup of the application.</p><br/><br/><p>However, if you're reflecting inside a series of nested loops with reflection calls on each, I'd say you should revisit your code :)</p><br/><br/><p>For "a couple of time" operations, reflection is perfectly acceptable and you won't notice any delay or problem with it. It's a very powerful mechanism and it is even used by .NET, so I don't see why you shouldn't give it a try. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEST WAY TO CONNECT TO A .NET REMOT SERVER OBJECT
    </pattern>
    <template>
<![CDATA[<p>The first two lines are in the server-side code, for marshaling out the server object, yes?</p><br/><br/><p>In that case, yes, the third line is the simplest you can get at client-side.</p><br/><br/><p>In addition, you can serve out additional server-side objects from the <strong>MyServerObject</strong> instance, if you include public accessors for them in <strong>IRemoteServer</strong> interface, so, accessing those objects become the simple matter of method calls or property accesses on your main server object, so you don't have to use activator for every single thing:</p><br/><br/><pre><code>//obtain another marshalbyref object of the type ISessionManager:<br/>ISessionManager = MyServerObject.GetSessionManager();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMB GECKO OR WEBKIT IN A WINDOW FORM JUST LIKE A WEBVIEW
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/p/geckofx/" rel="nofollow">http://code.google.com/p/geckofx/</a></p><br/><br/><p>This is a nice .NET-wrapped version of Gecko</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE USER SET FOR A .NET APPLIC
    </pattern>
    <template>
<![CDATA[<p>I love using the built-in <a href="http://msdn.microsoft.com/en-us/library/a65txexh.aspx" rel="nofollow">Application Settings</a>. Then you have built in support for using the settings designer if you want at design-time, or at runtime to use:  </p><br/><br/><pre><code>// read setting<br/>string setting1 = (string)Settings.Default["MySetting1"];<br/>// save setting<br/>Settings.Default["MySetting2"] = "My Setting Value";<br/></code></pre><br/><br/><p>It does store the settings in a similar folder structure as you describe (with the version in the path). However, with a simple call to:  </p><br/><br/><pre><code>Settings.Default.Upgrade();<br/></code></pre><br/><br/><p>The app will pull all previous versions settings in to save in. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTI DIMENSION ARRAY PRINT
    </pattern>
    <template>
<![CDATA[<p>Thanks for the answer, here is what I wrote while I waited:</p><br/><br/><pre><code>public static string Format(Array array)<br/>{<br/>    var builder = new StringBuilder();<br/>    builder.AppendLine("Count: " + array.Length);<br/>    var counter = 0;<br/><br/>    var dimensions = new List&lt;int&gt;();<br/>    for (int i = 0; i &lt; array.Rank; i++)<br/>    {<br/>    	dimensions.Add(array.GetUpperBound(i) + 1);<br/>    }<br/><br/>    foreach (var current in array)<br/>    {<br/>    	var index = "";<br/>    	var remainder = counter;<br/>    	foreach (var bound in dimensions)<br/>    	{<br/>    		index = remainder % bound + ", " + index;<br/>    		remainder = remainder / bound;<br/>    	}<br/>    	index = index.Substring(0, index.Length - 2);<br/><br/>    	builder.AppendLine("   [" + index + "] " + current);<br/>    	counter++;<br/>    }<br/>    return builder.ToString();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF ( ) EQUIVAL FOR REFER TYPE
    </pattern>
    <template>
<![CDATA[<p>If you don't mind it being a little less accurate than perfect, and for comparative purposes, you could serialize the object/s and measure that (in bytes for example)</p><br/><br/><p><em>EDIT (I kept thinking after posting)</em>: Because it's a little more complicated than sizeof for valuetypes, for example: reference types can have references to other objects and so on... there's not an exact and easy way to do it that I know of...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS AND METHOD IN .NET ASSEMBL
    </pattern>
    <template>
<![CDATA[<p>I know Xenocode can merge assemblies into one but I am not sure if it will internalize other non-primary assemblies.</p><br/><br/><p>I have found the /internalize switch in ILMerge that "internalize" all assemblies except the primary one. Pretty useful!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE SYSTEM.WEB.UI.CONTROL.RESOLVEURL ( ) IN A SHARED STAT FUNCTION
    </pattern>
    <template>
<![CDATA[<p>I use <a href="http://msdn.microsoft.com/en-us/library/system.web.virtualpathutility.aspx" rel="nofollow">System.Web.VirtualPathUtility.ToAbsolute</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEAL WITH DBNULL S
    </pattern>
    <template>
<![CDATA[<p>Nullable types are good, but only for types that are not nullable to begin with.</p><br/><br/><p>To make a type "nullable" append a question mark to the type, for example:    </p><br/><br/><pre><code>int? value = 5;<br/></code></pre><br/><br/><p>I would also recommend using the "<code>as</code>" keyword instead of casting. You can only use the "as" keyword on nullable types, so make sure you're casting things that are already nullable (like strings) or you use nullable types as mentioned above. The reasoning for this is </p><br/><br/><ol><br/><li>It's faster than casting</li><br/><li>If a type is nullable, the "<code>as</code>" keyword returns null.</li><br/></ol><br/><br/><p>I'd recommend doing something like this</p><br/><br/><pre><code>DataRow row = ds.Tables[0].Rows[0];<br/>string value = row as string;<br/></code></pre><br/><br/><p>Of course, this may make it harder to debug if you're receiving the wrong type in the first place, but at least DBNull will become just plain <code>null</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMMAT FILL IN A FORM AND POST A WEB PAGE
    </pattern>
    <template>
<![CDATA[<p>You can see a sample of that here: <a href="http://en.csharp-online.net/HTTP_Post" rel="nofollow">http://en.csharp-online.net/HTTP_Post</a>  </p><br/><br/><p>Basically, the code will look something like this:  </p><br/><br/><pre><code>WebRequest req = WebRequest.Create("http://mysite/myform.aspx");<br/>string postData = "item1=11111&amp;item2=22222&amp;Item3=33333";<br/><br/>byte[] send = Encoding.Default.GetBytes(postData);<br/>req.Method = "POST";<br/>req.ContentType = "application/x-www-form-urlencoded";<br/>req.ContentLength = send.Length;<br/><br/>Stream sout = req.GetRequestStream();<br/>sout.Write(send, 0, send.Length);<br/>sout.Flush();<br/>sout.Close();<br/><br/>WebResponse res = req.GetResponse();<br/>StreamReader sr = new StreamReader(res.GetResponseStream());<br/>string returnvalue = sr.ReadToEnd();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUIR A CONSTRUCTOR WITH NO PARAMET FOR TYPE IMPLEMENT AN INTERFAC
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/26903/how-can-you-require-a-constructor-with-no-parameters-for-types-implementing-an#27386" rel="nofollow">Juan Manuel said:</a></p><br/><br/><blockquote><br/>  <p>that's one of the reasons I don't understand why it cannot be a part of the contract in the interface</p><br/></blockquote><br/><br/><p>It's an indirect mechanism.  The generic allows you to "cheat" and send type information along with the interface.  The critical thing to remember here is that the constraint isn't on the interface that you are working with directly.  It's not a constraint on the interface itself, but on some other type that will "ride along" on the interface.  This is the best explanation I can offer, I'm afraid.</p><br/><br/><p>By way of illustration of this fact, I'll point out a hole that I have noticed in aku's code.  It's possible to write a class that would compile fine but fail at runtime when you try to instantiate it:</p><br/><br/><pre><code>public class Something : ITest&lt;String&gt;<br/>{<br/>  private Something() { }<br/>}<br/></code></pre><br/><br/><p>Something derives from ITest&lt;T&gt;, but implements no parameterless constructor.  It will compile fine, because String does implement a parameterless constructor.  Again, the constraint is on T, and therefore String, rather than ITest or Something.  Since the constraint on T is satisfied, this will compile.  But it will fail at runtime.</p><br/><br/><p>To prevent <strong>some</strong> instances of this problem, you need to add another constraint to T, as below:</p><br/><br/><pre><code>public interface ITest&lt;T&gt;<br/>  where T : ITest&lt;T&gt;, new()<br/>{<br/>}<br/></code></pre><br/><br/><p>Note the new constraint: T : ITest&lt;T&gt;. This constraint specifies that what you pass into the argument parameter of ITest&lt;T&gt; <strong>must</strong> also <strong>derive</strong> from ITest&lt;T&gt;.</p><br/><br/><p>Even so this will not prevent <strong>all</strong> cases of the hole.  The code below will compile fine, because A has a parameterless constructor.  But since B's parameterless constructor is private, instantiating B with your process will fail at runtime.</p><br/><br/><pre><code>public class A : ITest&lt;A&gt;<br/>{<br/>}<br/><br/>public class B : ITest&lt;A&gt;<br/>{<br/>  private B() { }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MONO SUPPORT SYSTEM.DRAW AND SYSTEM.DRAWING.PRINT
    </pattern>
    <template>
<![CDATA[<p>From the <a href="http://www.mono-project.com/FAQ:_General" rel="nofollow">Mono docs</a>, I think yes:</p><br/><br/><blockquote><br/>  <p>Managed.Windows.Forms (aka<br/>  System.Windows.Forms): A complete and<br/>  cross platform, System.Drawing based<br/>  Winforms implementation.</p><br/></blockquote><br/><br/><p>It also useful if you run the <a href="http://www.mono-project.com/Moma" rel="nofollow">Mono Migration Analyzer</a> first.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOP DOWN LIST OF CONTROL IN WINDOWSFORM AND C #
    </pattern>
    <template>
<![CDATA[<p>If you don't want to use databinding (via the <code>DataRepeater</code> control, as mentioned above), you could use a regular <code>Panel</code> control and set its <code>AutoScroll</code> property to true (to enable scrollbars).</p><br/><br/><p>Then, you could manually add your custom controls, and set the <code>Dock</code> property of each one to <code>Top</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISCOV THE PATH OF AN EMBED RESOURC
    </pattern>
    <template>
<![CDATA[<p>This will get you a string array of all the resources:</p><br/><br/><pre><code>System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceNames();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIME.NOW THE BEST WAY TO MEASUR A FUNCTION S PERFORM
    </pattern>
    <template>
<![CDATA[<p>No, it's not. Use the <a href="http://msdn2.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx">Stopwatch</a> (in <code>System.Diagnostics</code>)</p><br/><br/><pre><code>Stopwatch sw = Stopwatch.StartNew();<br/>PerformWork();<br/>sw.Stop();<br/><br/>Console.WriteLine("Time taken: {0}ms", sw.Elapsed.TotalMilliseconds);<br/></code></pre><br/><br/><p>Stopwatch automatically checks for the existence of high-precision timers.</p><br/><br/><p>It is worth mentioning that <code>DateTime.Now</code> often is quite a bit slower than <code>DateTime.UtcNow</code> due to the work that has to be done with timezones, <a href="http://en.wikipedia.org/wiki/Daylight_saving_time">DST</a> and such.</p><br/><br/><p>DateTime.UtcNow typically has a resolution of 15&nbsp;ms. See <a href="http://jaychapman.blogspot.com/2007/12/datetimenow-precision-issues-enter.html">John Chapman's blog post</a> about <code>DateTime.Now</code> precision for a great summary.</p><br/><br/><p>Interesting trivia: The stopwatch falls back on <code>DateTime.UtcNow</code> if your hardware doesn't support a high frequency counter. You can check to see if Stopwatch uses hardware to achieve high precision by looking at the static field <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.ishighresolution.aspx">Stopwatch.IsHighResolution</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTROL THAT USE A CERTAIN INTERFAC IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Longhorn213 almost has the right answer, but as as Sean Chambers and bdukes say, you should use  </p><br/><br/><pre><code>ctrl is IInterfaceToFind<br/></code></pre><br/><br/><p>instead of  </p><br/><br/><pre><code>ctrl.GetType() == aTypeVariable<br/></code></pre><br/><br/><p>The reason why is that if you use .GetType(), you will get the true type of an object, not necessarily what it can also be cast to in its inheritance/Interface implementation chain. Also, .GetType() will never return an abstract type/interface since you can't new up an abstract type or interface. GetType() returns concrete types only.</p><br/><br/><p>The reason this doesn't work</p><br/><br/><pre><code>if(ctrl is typeToFind)<br/></code></pre><br/><br/><p>Is because the type of the variable typeToFind is actually System.RuntimeType, not the type you've set its value to. Example, if you set a string's value to "foo", its type is still string not "foo". I hope that makes sense. It's very easy to get confused when working with types. I'm chronically confused when working with them.</p><br/><br/><p>The most import thing to note about longhorn213's answer is that <strong>you have to use recursion</strong> or you may miss some of the controls on the page. </p><br/><br/><p>Although we have a working solution here, I too would love to see if there is a more succinct way to do this with LINQ. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT TO DATABAS PRODUCT
    </pattern>
    <template>
<![CDATA[<p>I have used SubSonic and EntitySpaces.  Once you get the hang of them, I beleive they can save you time, but as complexity of your app and volume of data grow, you may outgrow these tools.  You start to lose time trying to figure out if something like a performance issue is related to the ORM or to your code.  So, to answer your question, I think it depends.  I tend to agree with Eric on this, high volume enterprise apps are not a good place for general purpose ORMs, but in standard fare smaller CRUD type apps, you might see some saved time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PICTUREBOX USE NEAREST NEIGHBOR RESAMPL
    </pattern>
    <template>
<![CDATA[<p>I suspect you're going to have to do the resizing manually thru the Image class and DrawImage function and respond to the resize events on the PictureBox.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VISTA UNABL TO LOAD DLL X.DLL INVALID ACCESS TO MEMORI LOCATION. ( DLLNOTFOUNDEXCEPT )
    </pattern>
    <template>
<![CDATA[<p>@<a href="http://stackoverflow.com/questions/29284/windows-vista-unable-to-load-dll-xdll-invalid-access-to-memory-location-dllnotf#29400" rel="nofollow">Martín</a></p><br/><br/><p>The reason you were not getting the UAC prompt is because UAC can only change how a process is <strong>started</strong>, once the process is running it must stay at the same elevation level. The UAC will prompt will happen if:</p><br/><br/><ul><br/><li>Vista thinks it's an installer (<a href="http://msdn.microsoft.com/en-us/library/aa905330.aspx#wvduac_topic3" rel="nofollow">lots of rules here</a>, the simplest one is if it's called "setup.exe"), </li><br/><li>If it's flagged as "Run as Administrator" (you can edit this by changing the properties of the shortcut or the exe), or </li><br/><li>If the exe contains a manifest requesting admin privileges.</li><br/></ul><br/><br/><p>The first two options are workarounds for 'legacy' applications that were around before UAC, the correct way to do it for new applications is to <a href="http://msdn.microsoft.com/en-us/library/bb756929.aspx" rel="nofollow">embed a manifest resource</a> asking for the privileges that you need.</p><br/><br/><p>Some program, such as <a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx" rel="nofollow">Process Explorer</a> appear to elevate a running process (when you choose "Show details for all process" in the file menu in this case) but what they really do is start a new instance, and it's that new instance that gets elevated - not the one that was originally running. This is the recommend way of doing it if only some parts of your application need elevation (e.g. a special 'admin options' dialog).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABIND AND FOREIGN KEY RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>I think the problem you're having is that when you are binding to a grid, it is not enough to support INotifyPropertyChanged, but you have to fire the ListChanged events in your <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.ibindinglist.aspx" rel="nofollow">IBindingList</a> implementation and make sure that you override and return true for the <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.ibindinglist.supportschangenotification.aspx" rel="nofollow">SupportsChangeNotification</a> property.  If you don't return true for this, the grid won't look for it to know if the data has changed.</p><br/><br/><p>In .NET 2.0+, you can create a generic collection using the <a href="http://msdn.microsoft.com/en-us/library/ms132679.aspx" rel="nofollow">BindingList</a> class, this will take care of most of the nastiness (just don't forget to override and return true for the SupportsChangeNotification property).</p><br/><br/><p>If the class you use for data binding has a property that is a collection (such as IBindingList or BindingList), then you can bind the foreign key grid to that property directly.  When you configure the bindings in the Forms designer, just select the collection property as the data source for the grid.  It should "just work".  The only sneaky part is making sure that you handle empty or null collections the right way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CATCH SQLSERVER TIMEOUT EXCEPT
    </pattern>
    <template>
<![CDATA[<p>To check for a timeout, I believe you check the value of ex.Number. If it is -2, then you have a timeout situation.</p><br/><br/><p>-2 is the error code for timeout, returned from DBNETLIB, the MDAC driver for SQL Server. This can be seen by downloading <a href="http://www.red-gate.com/products/reflector/" rel="nofollow">Reflector</a>, and looking under System.Data.SqlClient.TdsEnums for TIMEOUT_EXPIRED. </p><br/><br/><p>Your code would read:</p><br/><br/><pre><code>if (ex.Number == -2)<br/>{<br/>     //handle timeout<br/>}<br/></code></pre><br/><br/><p>Code to demonstrate failure:</p><br/><br/><pre><code>try<br/>{<br/>    SqlConnection sql = new SqlConnection(@"Network Library=DBMSSOCN;Data Source=YourServer,1433;Initial Catalog=YourDB;Integrated Security=SSPI;");<br/>    sql.Open();<br/><br/>    SqlCommand cmd = sql.CreateCommand();<br/>    cmd.CommandText = "DECLARE @i int WHILE EXISTS (SELECT 1 from sysobjects) BEGIN SELECT @i = 1 END";<br/>    cmd.ExecuteNonQuery(); // This line will timeout.<br/><br/>    cmd.Dispose();<br/>    sql.Close();<br/>}<br/>catch (SqlException ex)<br/>{<br/>    if (ex.Number == -2) {<br/>        Console.WriteLine ("Timeout occurred");<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SP.NET EXECUTIONTIMEOUT IN CODE REFRESH REQUEST
    </pattern>
    <template>
<![CDATA[<p>If you want to increase the execution timeout for this one request you can set</p><br/><br/><pre><code>HttpContext.Current.Server.ScriptTimeout</code></pre><br/><br/><p>But you still may have the problem of the client timing out which you can't reliably solve directly from the server.  To get around that you could implement a "processing" page (like Rob suggests) that posts back until the response is ready.  Or you might want to look into AJAX to do something similar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMAT A JAVASCRIPT DATE TO BE SERIAL BY JQUERI
    </pattern>
    <template>
<![CDATA[<p>This <a href="http://msdn.microsoft.com/en-us/library/ey1cdcx8.aspx" rel="nofollow">MSDN article</a> has some example Date strings that are parse-able is that what you're looking for?</p><br/><br/><pre><code>string dateString = "5/1/2008 8:30:52 AM";<br/>DateTime date1 = DateTime.Parse(dateString, CultureInfo.InvariantCulture);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM VISUAL STUDIO 2005 TO 2008 AND .NET 2.0
    </pattern>
    <template>
<![CDATA[<p>yes, vs2008 can "<a href="http://weblogs.asp.net/scottgu/archive/2007/06/20/vs-2008-multi-targeting-support.aspx" rel="nofollow">target</a>" a framework, but i think by default, if converting from vs2005 - vs2008 it just keeps it at framework 2.0</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSION IDENTIFI
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://msdn.microsoft.com/en-us/library/system.version.aspx" rel="nofollow">System.Version</a> class does not support versions with commas in it, so the solution presented by <a href="http://stackoverflow.com/questions/30494#30510" rel="nofollow">Darren Kopp</a> is not sufficient.</p><br/><br/><p>Here is a version that is as simple as possible (but no simpler).</p><br/><br/><p>It uses <a href="http://msdn.microsoft.com/en-us/library/system.version.aspx" rel="nofollow">System.Version</a> but achieves compatibility with version numbers like "1, 2, 3, 4" by doing a search-replace before comparing.</p><br/><br/><pre><code>    /// &lt;summary&gt;<br/>    /// Compare versions of form "1,2,3,4" or "1.2.3.4". Throws FormatException<br/>    /// in case of invalid version.<br/>    /// &lt;/summary&gt;<br/>    /// &lt;param name="strA"&gt;the first version&lt;/param&gt;<br/>    /// &lt;param name="strB"&gt;the second version&lt;/param&gt;<br/>    /// &lt;returns&gt;less than zero if strA is less than strB, equal to zero if<br/>    /// strA equals strB, and greater than zero if strA is greater than strB&lt;/returns&gt;<br/>    public static int CompareVersions(String strA, String strB)<br/>    {<br/>        Version vA = new Version(strA.Replace(",", "."));<br/>        Version vB = new Version(strB.Replace(",", "."));<br/><br/>        return vA.CompareTo(vB);<br/>    }<br/></code></pre><br/><br/><p>The code has been tested with:</p><br/><br/><pre><code>    static void Main(string[] args)<br/>    {<br/>        Test("1.0.0.0", "1.0.0.1", -1);<br/>        Test("1.0.0.1", "1.0.0.0", 1);<br/>        Test("1.0.0.0", "1.0.0.0", 0);<br/>        Test("1, 0.0.0", "1.0.0.0", 0);<br/>        Test("9, 5, 1, 44", "3.4.5.6", 1);<br/>        Test("1, 5, 1, 44", "3.4.5.6", -1);<br/>        Test("6,5,4,3", "6.5.4.3", 0);<br/><br/>        try<br/>        {<br/>            CompareVersions("2, 3, 4 - 4", "1,2,3,4");<br/>            Console.WriteLine("Exception should have been thrown");<br/>        }<br/>        catch (FormatException e)<br/>        {<br/>            Console.WriteLine("Got exception as expected.");<br/>        }<br/><br/>        Console.ReadLine();<br/>    }<br/><br/>    private static void Test(string lhs, string rhs, int expected)<br/>    {<br/>        int result = CompareVersions(lhs, rhs);<br/>        Console.WriteLine("Test(\"" + lhs + "\", \"" + rhs + "\", " + expected +<br/>            (result.Equals(expected) ? " succeeded." : " failed."));<br/>    }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSPAR IMAG USE C #
    </pattern>
    <template>
<![CDATA[<p>If there's no requirement on preserving file type after scaling I'd recommend the following approach.</p><br/><br/><pre><code>using (Image src = Image.FromFile("main.gif"))<br/>{<br/>    using (Bitmap dst = new Bitmap(100, 129))<br/>    {<br/>        using (Graphics g = Graphics.FromImage(dst))<br/>        {<br/>            g.SmoothingMode = SmoothingMode.AntiAlias;<br/>            g.InterpolationMode = InterpolationMode.HighQualityBicubic;<br/>            g.DrawImage(src, 0, 0, dst.Width, dst.Height);<br/>        }<br/><br/>        dst.Save("scale.png", ImageFormat.Png);<br/>    }<br/>}<br/></code></pre><br/><br/><p>The result will have really nice anti aliased edges</p><br/><br/><p><img src="http://img398.imageshack.us/img398/8110/scalezy6.png" alt="Hosted by imageshack" /></p><br/><br/><p>If you must export the image in gif you're in for a ride; GDI+ doesn't play well with gif. See <a href="http://www.ben-rush.net/blog/PermaLink.aspx?guid=103ed74d-c808-47ba-b82d-6e9367714b3e&amp;dotnet=consultant" rel="nofollow">this blog post</a> about it for more information</p><br/><br/><p><strong>Edit:</strong> I forgot to dispose of the bitmaps in the example; it's been corrected</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALCUL PRIME IN C #
    </pattern>
    <template>
<![CDATA[<p>You might save some time by cross-referencing your bit array with a doubly-linked list, so you can more quickly advance to the next prime.</p><br/><br/><p>Also, in eliminating later composites once you hit a new prime p for the first time - the first composite multiple of p remaining will be p*p, since everything before that has already been eliminated.  In fact, you only need to multiply p by all the remaining potential primes that are left after it in the list, stopping as soon as your product is out of range (larger than Until).</p><br/><br/><p>There are also some good probabilistic algorithms out there, such as the Miller-Rabin test.  <a href="http://en.wikipedia.org/wiki/Primality_test" rel="nofollow">The wikipedia page</a> is a good introduction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONSTRUCTOR WITH THE SAME ARGUMENT TYPE
    </pattern>
    <template>
<![CDATA[<p>You might consider using custom types.</p><br/><br/><p>For example, create LogonName and BadgeNumber classes.</p><br/><br/><p>Then your function declarations look like...</p><br/><br/><pre><code>public Person(LogonName ln)<br/>{<br/>    this.Load(ln.ToString());<br/>}<br/><br/>public Person(BadgeNumber bn)<br/>{<br/>    //load logic here...<br/>}<br/></code></pre><br/><br/><p>Such a solution might give you a good place to keep the business logic that governs the format and usage of these strings.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPONSE.REDIRECT USE PATH
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I think you need to drop the "~/" and replace it with just "/", I believe / is the root</p><br/></blockquote><br/><br/><p><strong>STOP RIGHT THERE!</strong> :-) unless you want to hardcode your web app so that it can only be installed at the root of a web site. </p><br/><br/><p>"~/" <strong><em>is</em></strong> the correct thing to use, but the reason that your original code didn't work as expected is that <code>ResolveUrl</code> (which is used internally by <code>Redirect</code>) tries to first work out if the path you are passing it is an absolute URL (e.g. "*<em>http://server/</em>*foo/bar.htm" as opposed to "foo/bar.htm") - but unfortunately it does this by simply looking for a colon character ':' in the URL you give it. But in this case it finds a colon in the URL you give in the <code>ReturnPath</code> query string value, which fools it - therefore your '~/' doesn't get resolved.</p><br/><br/><p>The fix is that you should be URL-encoding the <code>ReturnPath</code> value which escapes the problematic ':' along with any other special characters.</p><br/><br/><pre><code>Response.Redirect("~/Login.aspx?ReturnPath=" + Server.UrlEncode(Request.Url.ToString()));<br/></code></pre><br/><br/><p>Additionally, I recommend that you (or anyone) never use <code>Uri.ToString</code> - because it gives a human-readable, more "friendly" version of the URL - not a necessarily correct one (it unescapes things). Instead use Uri.AbsoluteUri - like so:</p><br/><br/><pre><code>Response.Redirect("~/Login.aspx?ReturnPath=" + Server.UrlEncode(Request.Url.AbsoluteUri));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD ASP.NET MVC SAMPL
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/p/codecampserver/" rel="nofollow">CodeCampServer</a> - Built with ASP.NET MVC, pretty light and small project.  No cruft at all.</p><br/><br/><p>@lomaxx - Just FYI, most of what Troy Goode wrote is now part of <a href="http://weblogs.asp.net/scottgu/archive/2008/07/14/asp-net-mvc-preview-4-release-part-1.aspx" rel="nofollow">ASP.NET MVC as of Preview 4</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAST OBJECT CREAT THROUGH REFLECT
    </pattern>
    <template>
<![CDATA[<p>I'm just guessing here because from your code it's not obvious where do you have definition of IPlugin interface but if you can't cast in your host application then you are probably having IPlugin interface in your host assembly and then at the same time in your plugin assembly. This won't work.</p><br/><br/><p>The easiest thing is to make this work is to have IPlugin interface marked as public in your host assembly and then have your Plugin assembly <strong>reference host application assembly</strong>, so both assemblies have access to <strong>the very same interface</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCALABL IS SYSTEM.THREADING.TIM
    </pattern>
    <template>
<![CDATA[<p>I say this in response to a lot of questions:  Don't forget that the (managed) source code to the framework is available.  You can use this tool to get it all: <a href="http://www.codeplex.com/NetMassDownloader" rel="nofollow">http://www.codeplex.com/NetMassDownloader</a></p><br/><br/><p>Unfortunately, in this specific case, a lot of the implementation is in native code, so you don't get to look at it...</p><br/><br/><p>They definitely use pool threads rather than a thread-per-timer, though.</p><br/><br/><p>The standard way to implement a big collection of timers (which is how the kernel does it internally, and I would suspect is indirectly how your big collection of Timers ends up) is to maintain the list sorted by time-until-expiry - so the system only ever has to worry about checking the next timer which is going to expire, not the whole list.</p><br/><br/><p>Roughly, this gives O(log n) for starting a timer and O(1) for processing running timers.</p><br/><br/><p>Edit: Just been looking in Jeff Richter's book.  He says (of Threading.Timer) that it uses a single thread for all Timer objects, this thread knows when the next timer (i.e. as above) is due and calls ThreadPool.QueueUserWorkItem for the callbacks as appropriate.  This has the effect that if you don't finish servicing one callback on a timer before the next is due, that your callback will reenter on another pool thread.  So in summary I doubt you'll see a big problem with having lots of timers, but you might suffer thread pool exhaustion if large numbers of them are firing at the same timer and/or their callbacks are slow-running.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER IN C # AND JAVA... AND TEMPLAT IN C + +
    </pattern>
    <template>
<![CDATA[<p>I'll add my voice to the noise and take a stab at making things clear:</p><br/><br/><h2>C# Generics allow you to declare something like this.</h2><br/><br/><pre><code>List&lt;Person&gt; foo = new List&lt;Person&gt;();<br/></code></pre><br/><br/><p>and then the compiler will prevent you from putting things that aren't <code>Person</code> into the list.<br><br/>Behind the scenes the C# compiler is just putting <code>List&lt;Person&gt;</code> into the .NET dll file, but at runtime the JIT compiler  goes and builds a new set of code, as if you had written a special list class just for containing people - something like <code>ListOfPerson</code>.</p><br/><br/><p>The benefit of this is that it makes it really fast. There's no casting or any other stuff, and because the dll contains the information that this is a List of <code>Person</code>, other code that looks at it later on using reflection can tell that it contains <code>Person</code> objects (so you get intellisense and so on).</p><br/><br/><p>The downside of this is that old C# 1.0 and 1.1 code (before they added generics) doesn't understand these new <code>List&lt;something&gt;</code>, so you have to manually convert things back to plain old <code>List</code> to interoperate with them. This is not that big of a problem, because C# 2.0 binary code is not backwards compatible. The only time this will ever happen is if you're upgrading some old C# 1.0/1.1 code to C# 2.0</p><br/><br/><h2>Java Generics allow you to declare something like this.</h2><br/><br/><pre><code>ArrayList&lt;Person&gt; foo = new ArrayList&lt;Person&gt;();<br/></code></pre><br/><br/><p>On the surface it looks the same, and it sort-of is. The compiler will also prevent you from putting things that aren't <code>Person</code> into the list.</p><br/><br/><p>The difference is what happens behind the scenes. Unlike C#, Java does not go and build a special <code>ListOfPerson</code> - it just uses the plain old <code>ArrayList</code> which has always been in Java. When you get things out of the array, the usual <code>Person p = (Person)foo.get(1);</code> casting-dance still has to be done. The compiler is saving you the key-presses, but the speed hit/casting is still incurred just like it always was.<br><br/>When people mention "Type Erasure" this is what they're talking about. The compiler inserts the casts for you, and then 'erases' the fact that it's meant to be a list of <code>Person</code> not just <code>Object</code></p><br/><br/><p>The benefit of this approach is that old code which doesn't understand generics doesn't have to care. It's still dealing with the same old <code>ArrayList</code> as it always has. This is more important in the java world because they wanted to support compiling code using Java 5 with generics, and having it run on old 1.4 or previous JVM's, which microsoft deliberately decided not to bother with.</p><br/><br/><p>The downside is the speed hit I mentioned previously, and also because there is no <code>ListOfPerson</code> pseudo-class or anything like that going into the .class files, code that looks at it later on (with reflection, or if you pull it out of another collection where it's been converted into <code>Object</code> or so on) can't tell in any way that it's meant to be a list containing only <code>Person</code> and not just any other array list.</p><br/><br/><h2>C++ Templates allow you to declare something like this</h2><br/><br/><pre><code>std::list&lt;Person&gt;* foo = new std::list&lt;Person&gt;();<br/></code></pre><br/><br/><p>It looks like C# and Java generics, and it will do what you think it should do, but behind the scenes different things are happening.</p><br/><br/><p>It has the most in common with C# generics in that it builds special <code>pseudo-classes</code> rather than just throwing the type information away like java does, but it's a whole different kettle of fish.</p><br/><br/><p>Both C# and Java produce output which is designed for virtual machines. If you write some code which has a <code>Person</code> class in it, in both cases some information about a <code>Person</code> class will go into the .dll or .class file, and the JVM/CLR will do stuff with this.</p><br/><br/><p>C++ produces raw x86 binary code. Everything is <em>not</em> an object, and there's no underlying virtual machine which needs to know about a <code>Person</code> class. There's no boxing or unboxing, and functions don't have to belong to classes, or indeed anything. </p><br/><br/><p>Because of this, the C++ compiler places no restrictions on what you can do with templates - basically any code you could write manually, you can get templates to write for you.<br><br/>The most obvious example is adding things:</p><br/><br/><p>In C# and Java, the generics system needs to know what methods are available for a class, and it needs to pass this down to the virtual machine. The only way to tell it this is by either hard-coding the actual class in, or using interfaces. For example:</p><br/><br/><pre><code>int addNames&lt;T&gt;( T first, T second ) { return first.Name() + second.Name(); }<br/></code></pre><br/><br/><p>That code won't compile in C# or Java, because it doesn't know that the type <code>T</code> actually provides a method called Name(). You have to tell it - in C# like this:</p><br/><br/><pre><code>interface IHasName{ string Name(); };<br/>int addNames&lt;T&gt;( T first, T second ) where T : IHasName { .... }<br/></code></pre><br/><br/><p>And then you have to make sure the things you pass to addNames implement the IHasName interface and so on. The java syntax is different (<code>&lt;T extends IHasName&gt;</code>), but it suffers from the same problems.</p><br/><br/><p>The 'classic' case for this problem is trying to write a function which does this</p><br/><br/><pre><code>int addNames&lt;T&gt;( T first, T second ) { return first + second; }<br/></code></pre><br/><br/><p>You can't actually write this code because there are no ways to declare an interface with the <code>+</code> method in it. You fail.</p><br/><br/><p>C++ suffers from none of these problems. The compiler doesn't care about passing types down to any VM's - if both your objects have a .Name() function, it will compile. If they don't, it won't. Simple.</p><br/><br/><p>So, there you have it :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS APPLIC SET USE CONFIGURATIONMANAG
    </pattern>
    <template>
<![CDATA[<p>You have to reference the System.configuration assembly (note the lowercase)</p><br/><br/><p>I don't know why this assembly is not added by default to new projects on Visual Studio, but I find myself having the same problem every time I start a new project. I always forget to add the reference.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VISUAL STUDIO SERVER EXPLOR SUPPORT CUSTOM DATABAS PROVID
    </pattern>
    <template>
<![CDATA[<p>Here is instructions on how to connect to your MySQL database from Visual Studio:</p><br/><br/><blockquote><br/>  <p>To make the connection in server<br/>  explorer you need to do the following:</p><br/>  <br/>  <ul><br/>  <li><p>first of all you need to install the MyODBC connector 3.51 (or latest) on<br/>  the development machine (NB. you can<br/>  find this at<br/>  <a href="http://www.mysql.com/products/connector/odbc/" rel="nofollow">http://www.mysql.com/products/connector/odbc/</a><br/>  )</p></li><br/>  <li><p>Create a datasource in Control Panel/Administrative Tools with a<br/>  connection to your database. This data<br/>  source is going to be used purely for<br/>  Server Manager and you dont need to<br/>  worry about creating the same data<br/>  source on your clients PC when you<br/>  have made your VS.NET application<br/>  (Unless you want to) - I dont want to<br/>  cover this in this answer, too long.<br/>  For the purpose of this explanation I<br/>  will pretend that you created a MyODBC<br/>  data source called 'AADSN' to database<br/>  'noddy' on mysqlserver 'SERVER01' and<br/>  have a root password of 'fred'. The<br/>  server can be either the Computer Name<br/>  (found in Control<br/>  Panel/System/Computer Name), or<br/>  alternatively it can be the IP<br/>  Address. NB. Make sure that you test<br/>  this connection before continuing with<br/>  this explanation.</p></li><br/>  <li><p>open your VS.NET project</p></li><br/>  <li><p>go to server explorer</p></li><br/>  <li><p>right-click on 'Data Connections'</p></li><br/>  <li><p>select 'Add Connection'</p></li><br/>  <li><p>In DataLink Properties, go to the provider tab and select "Microsoft OLE<br/>  DB Provider For ODBC drivers"</p></li><br/>  <li><p>Click Next</p></li><br/>  <li><p>If you previously created an ODBC data source then you could just select<br/>  that. The disadvantage of this is that<br/>  when you install your project<br/>  application on the client machine, the<br/>  same data source needs to be there. I<br/>  prefer to use a connection string.<br/>  This should look something like:</p></li><br/>  </ul><br/>  <br/>  <p>DSN=AADSN;DESC=MySQL ODBC 3.51 Driver<br/>  DSN;DATABASE=noddy;SERVER=SERVER01;UID=root;PASSWORD=fred;PORT=3306;SOCKET=;OPTION=11;STMT=;</p><br/>  <br/>  <p>If you omit the password from the<br/>  connection string then you must make<br/>  sure that the datasource you created<br/>  (AADSN) contains a password. I am not<br/>  going to describe what these mean, you<br/>  can look in the documentation for<br/>  myodbc for that, just ensure that you<br/>  get a "Connection Succeeded" message<br/>  when you test the datasource.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLCLIENT SIMPLEST INSERT
    </pattern>
    <template>
<![CDATA[<pre><code>using (var conn = new SqlConnection(yourConnectionString))<br/>{<br/>    var cmd = new SqlCommand("insert into Foo values (@bar)", conn);<br/>    cmd.Parameters.AddWithValue("@bar", 17);<br/>    conn.Open();<br/>    cmd.ExecuteNonQuery();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMAT INVOK A LISTVIEW LABEL EDIT
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.listviewitem.beginedit.aspx" rel="nofollow">found it!</a></p><br/><br/><pre><code>ListViewItem::BeginEdit();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASP.NET RADIOBUTTON WITH JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>I found 2 ways to get this to work, the below code correctly distinguishes between the RadioButton and Checkbox controls.</p><br/><br/><pre><code>    private static void DisableControl(WebControl control)<br/>    {<br/>        Type controlType = control.GetType();<br/><br/>        if (controlType == typeof(CheckBox))<br/>        {<br/>            ((CheckBox)control).InputAttributes.Add("disabled", "disabled");<br/><br/>        }<br/>        else if (controlType == typeof(RadioButton))<br/>        {<br/>            ((RadioButton)control).InputAttributes.Add("disabled", "true");<br/>        }<br/>        else if (controlType == typeof(ImageButton))<br/>        {<br/>            ((ImageButton)control).Enabled = false;<br/>        }<br/>        else<br/>        {<br/>            control.Attributes.Add("readonly", "readonly");<br/>        }<br/>    }<br/></code></pre><br/><br/><p>And the solution I used is to set SubmitDisabledControls="True" in the form element which is not ideal as it allows a user to fiddle with the values but is fine in my scenario. The second solution is to mimic the Disabled behavior and details can be found here: http://aspnet.4guysfromrolla.com/articles/012506-1.aspx'>http://aspnet.4guysfromrolla.com/articles/012506-1.aspx.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN .NET THROUGH GMAIL
    </pattern>
    <template>
<![CDATA[<p>Be sure to use <code>System.Net.Mail</code>, not the deprecated <code>System.Web.Mail</code>. Doing SSL with <code>System.Web.Mail</code> is a gross mess of hacky extensions.</p><br/><br/><pre><code>using System.Net;<br/>using System.Net.Mail;<br/><br/>var fromAddress = new MailAddress("from@gmail.com", "From Name");<br/>var toAddress = new MailAddress("to@example.com", "To Name");<br/>const string fromPassword = "fromPassword";<br/>const string subject = "Subject";<br/>const string body = "Body";<br/><br/>var smtp = new SmtpClient<br/>           {<br/>               Host = "smtp.gmail.com",<br/>               Port = 587,<br/>               EnableSsl = true,<br/>               DeliveryMethod = SmtpDeliveryMethod.Network,<br/>               UseDefaultCredentials = false,<br/>               Credentials = new NetworkCredential(fromAddress.Address, fromPassword)<br/>           };<br/>using (var message = new MailMessage(fromAddress, toAddress)<br/>                     {<br/>                         Subject = subject,<br/>                         Body = body<br/>                     })<br/>{<br/>    smtp.Send(message);<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPAWN THREAD ON DIFFER CPU CORE
    </pattern>
    <template>
<![CDATA[<p>Don't bother doing that.</p><br/><br/><p>Instead use the <a href="http://msdn.microsoft.com/en-us/library/system.threading.threadpool.aspx" rel="nofollow">Thread Pool</a>. The thread pool is a mechanism (actually a class) of the framework that you can query for a new thread.</p><br/><br/><p>When you ask for a new thread it will either give you a new one or enqueue the work until a thread get freed. In that way the framework is in charge on deciding wether it should create more threads or not depending on the number of present CPUs.</p><br/><br/><p>Edit: In addition, as it has been already mentioned, the OS is in charge of distributing the threads among the different CPUs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC FIELD IN XAML
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://msdn.microsoft.com/en-us/library/ms742135.aspx" rel="nofollow">x:Static</a> markup extension</p><br/><br/><pre><code>&lt;ResoureDictionary ...<br/>  xmlns:local="clr-namespace:Namespace.Where.Your.BaseThingy.Class.Is.Defined"<br/>&gt;<br/>  &lt;Style BasedOn="{x:Static local:BaseThingy.BaseStyle}" TargetType="BaseThingy" /&gt;<br/>&lt;/ResourceDictionary&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAG SESSION IN NHIBERN
    </pattern>
    <template>
<![CDATA[<p>Session management:</p><br/><br/><p><a href="http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/HybridSessionBuilder.cs" rel="nofollow">http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/HybridSessionBuilder.cs</a></p><br/><br/><p>Session per request:</p><br/><br/><p><a href="http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/NHibernateSessionModule.cs" rel="nofollow">http://code.google.com/p/dot-net-reference-app/source/browse/trunk/src/Infrastructure/Impl/NHibernateSessionModule.cs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIME ZONE REMOT IN C #
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/ms724944.aspx" rel="nofollow">SetTimeZoneInformation</a> should do what you need. You'll need to use <a href="http://pinvoke.net/default.aspx/kernel32/SetTimeZoneInformation.html" rel="nofollow">P/Invoke</a> to get at it.</p><br/><br/><p>Note also that you'll need to possess and enable the SE_TIME_ZONE_NAME privilege.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOUBLE CLICK EVENT IN TABCONTROL
    </pattern>
    <template>
<![CDATA[<p>The MouseDoubleClick event of the TabControl seems to respond just fine to double-clicking.  The only additional step I would do is set a short timer after the TabIndexChanged event to track that a new tab has been selected and ignore any double-clicks that happen outside the timer.  This will prevent double-clicking on the selected tab.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAKE A BYTE ARRAY OF A TIFF IMAG AND TURN IT INTO A SYSTEM.DRAWING.IMAG OBJECT
    </pattern>
    <template>
<![CDATA[<p><strong>Edit:</strong> The assumption below is not correct, I had a chance to fire up my IDE later and tested with and without Write and both populated the MemoryStream correctly.</p><br/><br/><p>I think you need to write to your MemeoryStream first.</p><br/><br/><p>As if my memory (no pun intended) serves me correctly this:</p><br/><br/><pre><code>MemoryStream ms = new MemoryStream(byteArrayIn);<br/></code></pre><br/><br/><p>Creates a memory stream of that size.</p><br/><br/><p>You then need to write your byte array contents to the memory stream:</p><br/><br/><pre><code>ms.Write(byteArrayIn, 0, byteArrayIn.Length);<br/></code></pre><br/><br/><p>See if that fixes it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTPCACHEABILITY.PRIV SUPPRESS ETAG
    </pattern>
    <template>
<![CDATA[<p>I think you need to use HttpCacheability.ServerAndPrivate</p><br/><br/><p>That should give you cache-control: private in the headers and let you set an ETag.</p><br/><br/><p>The documentation on that needs to be a bit better.</p><br/><br/><p><strong>Edit:</strong> Markus found that you also have call cache.SetOmitVaryStar(true) otherwise the cache will add the Vary: * header to the output and you don't want that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD NAME TO CUSTOM SERVER CONTROL IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>If you want to be able to pass a method in the ASPX markup you need to use the Browsable attribute in your code on the event.</p><br/><br/><p>VB.NET</p><br/><br/><pre><code>&lt;Browsable(True)&gt; Public Event InitializeStuffCallback<br/></code></pre><br/><br/><p>C#</p><br/><br/><pre><code>[Browsable(true)]<br/>public event EventHandler InitializeStuffCallback;<br/></code></pre><br/><br/><p>Reference:<br/><a href="http://msdn.microsoft.com/en-us/library/tk67c2t8.aspx" rel="nofollow">Design-Time Attributes for Components</a> and <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.browsableattribute.aspx" rel="nofollow">BrowsableAttribute Class</a></p><br/><br/><p>All the events, properties, or whatever need to be in the code-behind of the control with the browsable attribute to make it so you can change it in the tag code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACTIV DIRECTORI DATA
    </pattern>
    <template>
<![CDATA[<p>In order to take control over the properties that you want to be cached you can call 'RefreshCache()' passing the properties that you want to hang around:</p><br/><br/><pre class="lang-c# prettyprint-override"><code>System.DirectoryServices.DirectoryEntry entry = new System.DirectoryServices.DirectoryEntry();               <br/><br/>// Push the property values from AD back to cache.<br/><br/>entry.RefreshCache(new string[] {"cn", "www" });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FALS OPER IN C # GOOD FOR
    </pattern>
    <template>
<![CDATA[<p>You can use it to override the &amp;&amp; and || operators.</p><br/><br/><p>The &amp;&amp; and || operators can't be overridden, but if you override |, &amp;, true and false in exactly the right way the compiler will call | and &amp; when you write || and &amp;&amp;</p><br/><br/><p>for example, look at this code (from <a href="http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx" rel="nofollow">http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a> - where I found out about this trick):</p><br/><br/><p><strong>EDIT</strong>: The URL was broken. Here is a link to the archive of that URL: <a href="http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx" rel="nofollow">http://web.archive.org/web/20080613013350/http://www.ayende.com/Blog/archive/2006/08/04/7381.aspx</a></p><br/><br/><pre><code>public static AbstractCriterion operator &amp;(AbstractCriterion lhs, AbstractCriterion rhs)<br/>{<br/>       return new AndExpression(lhs, rhs);<br/>}<br/><br/>public static AbstractCriterion operator |(AbstractCriterion lhs, AbstractCriterion rhs)<br/>{<br/>       return new OrExpression(lhs, rhs);<br/>}<br/><br/>public static bool operator false(AbstractCriterion criteria)<br/>{<br/>       return false;<br/>}<br/>public static bool operator true(AbstractCriterion criteria)<br/>{<br/>       return false;<br/>}<br/></code></pre><br/><br/><p>This is obviously a side effect and not the way it's intended to be used, but it is useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOV FROM AN UNCHECK EXCEPT
    </pattern>
    <template>
<![CDATA[<p>IMO, wrapping exceptions (checked or otherwise) has several benefits that are worth the cost:</p><br/><br/><p>1) It encourages you to think about the failure modes for the code you write. Basically, you have to consider the exceptions that the code you call may throw, and in turn you'll consider the exceptions you'll throw for the code that calls yours.</p><br/><br/><p>2) It gives you the opportunity to add additional debugging information into the exception chain. For instance, if you have a method that throws an exception on a duplicate username, you might wrap that exception with one that includes additional information about the circumstances of the failure (for example, the IP of the request that provided the dupe username) that wasn't available to the lower-level code. The cookie trail of exceptions may help you debug a complex problem (it certainly has for me).</p><br/><br/><p>3) It lets you become implementation-independent from the lower level code. If you're wrapping exceptions and need to swap out Hibernate for some other ORM, you only have to change your Hibernate-handling code. All the other layers of code will still be successfully using the wrapped exceptions and will interpret them in the same way, even though the underlying circumstances have changed. Note that this applies even if Hibernate changes in some way (ex: they switch exceptions in a new version); it's not just for wholesale technology replacement.</p><br/><br/><p>4) It encourages you use different classes of exceptions to represent different situations. For example, you may have a DuplicateUsernameException when the user tries to reuse a username, and a DatabaseFailureException when you can't check for dupe usernames due to a broken DB connection. This, in turn, lets you answer your question ("how do I recover?") in flexible and powerful ways. If you get a DuplicateUsernameException, you may decide to suggest a different username to the user. If you get a DatabaseFailureException, you may let it bubble up to the point where it displays a "down for maintenance" page to the user and send off a notification email to you. Once you have custom exceptions, you have customizeable responses -- and that's a good thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHI IS MY PROCESS.START ( ) HANG
    </pattern>
    <template>
<![CDATA[<p>I believe I've found the answer. It seems that Microsoft, in all their infinite wisdom, has blocked batch files from being executed by IIS in Windows Server 2003. Brenden Tompkins has a work-around here:</p><br/><br/><p><a href="http://codebetter.com/blogs/brendan.tompkins/archive/2004/05/13/13484.aspx">http://codebetter.com/blogs/brendan.tompkins/archive/2004/05/13/13484.aspx</a></p><br/><br/><p>That won't work for me, because my batch file uses IF and GOTO, but it would definitely work for simple batch files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRUNCAT A STRING WHILE CONVERT TO BYTE IN C #
    </pattern>
    <template>
<![CDATA[<p>In order to truncate a string to a UTF8 byte array without splitting in the middle of a character I use this:</p><br/><br/><pre><code>static string Truncate(string s, int maxLength) {<br/>    if (Encoding.UTF8.GetByteCount(s) &lt;= maxLength)<br/>    	return s;<br/>    var cs = s.ToCharArray();<br/>    int length = 0;<br/>    int i = 0;<br/>    while (i &lt; cs.Length){<br/>    	int charSize = 1;<br/>    	if (i &lt; (cs.Length - 1) &amp;&amp; char.IsSurrogate(cs[i]))<br/>    		charSize = 2;<br/>    	int byteSize = Encoding.UTF8.GetByteCount(cs, i, charSize);<br/>    	if ((byteSize + length) &lt;= maxLength){<br/>    		i = i + charSize;<br/>    		length += byteSize;<br/>    	}<br/>    	else<br/>    		break;<br/>    }<br/>    return s.Substring(0, i);<br/>}<br/></code></pre><br/><br/><p>The returned string can then be safely transferred to a byte array of length maxLength.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT.GETHASHCOD ( ) UNIQU TO A REFER OR A VALU
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Rules 1 &amp; 3 are contradictory to me.</p><br/></blockquote><br/><br/><p>To a certain extent, they are. The reason is simple: if an object is stored in a hash table and, by changing its value, you change its hash then the hash table has lost the value and you can't find it again by querying the hash table. It is important that while objects are stored in a hash table, they retain their hash value.</p><br/><br/><p>To realize this it is often simplest to make hashable objects immutable, thus evading the whole problem. It is however sufficient to make only those fields immutable that determine the hash value.</p><br/><br/><p>Consider the following example:</p><br/><br/><pre><code>struct Person {<br/>    public readonly string FirstName;<br/>    public readonly string Name;<br/>    public readonly DateTime Birthday;<br/><br/>    public int ShoeSize;<br/>}<br/></code></pre><br/><br/><p>People rarely change their birthday and most people never change their name (except when marrying). However, their shoe size may grow arbitrarily, or even shrink. It is therefore reasonable to identify people using their birthday and name but not their shoe size. The hash value should reflect this:</p><br/><br/><pre><code>public int GetHashCode() {<br/>    return FirstName.GetHashCode() ^ Name.GetHashCode() ^ Birthday.GetHashCode();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TELL IF AN OBJECT IS MODIFI
    </pattern>
    <template>
<![CDATA[<p>At the end of the object's constructor you could serialize the object to a base 64 string just like the cookie stores it, and store this in a member variable. </p><br/><br/><p>When you want to check if the cookie needs recreating, re - serialize the object and compare this new base 64 string against the one stored in a member variable. If it has changed, reset the cookie with the new value.</p><br/><br/><p>Watch out for the gotcha - don't include the member variable storing the base 64 serialization in the serialization itself. I presume your language uses something like a sleep() function (is how PHP does it) to serialize itself, so just make sure the member is not included in that function.</p><br/><br/><p>This will always work because you are comparing the exact value you'd be saving in the cookie, and wouldn't need to override GetHashCode() which sounds like it could have nasty consequences.</p><br/><br/><p>All that said I'd probably just drop the test and always reset the cookie, can't be that much overhead in it when compared to doing the change check, and far less likelyhood of bugs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION.FLUSH ( ) SEND UPDAT QUERI WHEN NO UPDAT HA OCCUR
    </pattern>
    <template>
<![CDATA[<p>I have seen this once before when one of my models was not mapped correctly (wasn't using nullable types correctly).  May you please paste your model and mapping?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSFORM A WEBSERVIC CALL THAT IS USE BEHAVIOUR
    </pattern>
    <template>
<![CDATA[<p>You should be able to generate a proxy class using wsdl.exe. Then just use the web service as you normally would.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # HAVE A WAY OF GIVE ME AN IMMUT DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>No, but a wrapper is rather trivial:</p><br/><br/><pre><code>public class ReadOnlyDictionary&lt;TKey, TValue&gt; : IDictionary&lt;TKey, TValue&gt;<br/>{<br/>    IDictionary&lt;TKey, TValue&gt; _dict;<br/><br/>    public ReadOnlyDictionary(IDictionary&lt;TKey, TValue&gt; backingDict)<br/>    {<br/>        _dict = backingDict;<br/>    }<br/><br/>    public void Add(TKey key, TValue value)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool ContainsKey(TKey key)<br/>    {<br/>        return _dict.ContainsKey(key);<br/>    }<br/><br/>    public ICollection&lt;TKey&gt; Keys<br/>    {<br/>        get { return _dict.Keys; }<br/>    }<br/><br/>    public bool Remove(TKey key)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool TryGetValue(TKey key, out TValue value)<br/>    {<br/>        return _dict.TryGetValue(key, out value);<br/>    }<br/><br/>    public ICollection&lt;TValue&gt; Values<br/>    {<br/>        get { return _dict.Values; }<br/>    }<br/><br/>    public TValue this[TKey key]<br/>    {<br/>        get { return _dict[key]; }<br/>        set { throw new InvalidOperationException(); }<br/>    }<br/><br/>    public void Add(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public void Clear()<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public bool Contains(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        return _dict.Contains(item);<br/>    }<br/><br/>    public void CopyTo(KeyValuePair&lt;TKey, TValue&gt;[] array, int arrayIndex)<br/>    {<br/>        _dict.CopyTo(array, arrayIndex);<br/>    }<br/><br/>    public int Count<br/>    {<br/>        get { return _dict.Count; }<br/>    }<br/><br/>    public bool IsReadOnly<br/>    {<br/>        get { return true; }<br/>    }<br/><br/>    public bool Remove(KeyValuePair&lt;TKey, TValue&gt; item)<br/>    {<br/>        throw new InvalidOperationException();<br/>    }<br/><br/>    public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator()<br/>    {<br/>        return _dict.GetEnumerator();<br/>    }<br/><br/>    System.Collections.IEnumerator <br/>           System.Collections.IEnumerable.GetEnumerator()<br/>    {<br/>        return ((System.Collections.IEnumerable)_dict).GetEnumerator();<br/>    }<br/>}<br/></code></pre><br/><br/><p>Obviously, you can change the this[] setter above if you want to allow modifying values. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPOS A COLLECT PROPERTI
    </pattern>
    <template>
<![CDATA[<p>How you expose a collection depends entirely on how users are intended to interact with it.</p><br/><br/><p><strong>1)</strong> If users will be adding and removing items from an object's collection, then a simple get-only collection property is best (option #1 from the original question):</p><br/><br/><pre><code>private readonly Collection&lt;T&gt; myCollection_ = new ...;<br/>public Collection&lt;T&gt; MyCollection {<br/>  get { return this.myCollection_; }<br/>}<br/></code></pre><br/><br/><p>This strategy is used for the <code>Items</code> collections on the WindowsForms and WPF <code>ItemsControl</code> controls, where users add and remove items they want the control to display. These controls publish the actual collection and use callbacks or event listeners to keep track of items.</p><br/><br/><p>WPF also exposes some settable collections to allow users to display a collection of items they control, such as the <code>ItemsSource</code> property on <code>ItemsControl</code> (option #3 from the original question). However, this is not a common use case.</p><br/><br/><p><br/><br/><strong>2)</strong> If users will only be reading data maintained by the object, then you can use a readonly collection, as <a href="http://stackoverflow.com/questions/35007/how-to-expose-a-collection-property#35065">Quibblesome</a> suggested:</p><br/><br/><pre><code>private readonly List&lt;T&gt; myPrivateCollection_ = new ...;<br/>private ReadOnlyCollection&lt;T&gt; myPrivateCollectionView_;<br/>public ReadOnlyCollection&lt;T&gt; MyCollection {<br/>  get {<br/>    if( this.myPrivateCollectionView_ == null ) { /* lazily initialize view */ }<br/>    return this.myPrivateCollectionView_;<br/>  }<br/>}<br/></code></pre><br/><br/><p>Note that <code>ReadOnlyCollection&lt;T&gt;</code> provides a live view of the underlying collection, so you only need to create the view once.</p><br/><br/><p>If the internal collection does not implement <code>IList&lt;T&gt;</code>, or if you want to restrict access to more advanced users, you can instead wrap access to the collection through an enumerator:</p><br/><br/><pre><code>public IEnumerable&lt;T&gt; MyCollection {<br/>  get {<br/>    foreach( T item in this.myPrivateCollection_ )<br/>      yield return item;<br/>  }<br/>}<br/></code></pre><br/><br/><p>This approach is simple to implement and also provides access to all the members without exposing the internal collection. However, it does require that the collection remain unmodfied, as the BCL collection classes will throw an exception if you try to enumerate a collection after it has been modified. If the underlying collection is likely to change, you can either create a light wrapper that will enumerate the collection safely, or return a copy of the collection.</p><br/><br/><p><br/><br/><strong>3)</strong> Finally, if you need to expose arrays rather than higher-level collections, then you should return a copy of the array to prevent users from modifying it (option #2 from the orginal question):</p><br/><br/><pre><code>private T[] myArray_;<br/>public T[] GetMyArray( ) {<br/>  T[] copy = new T[this.myArray_.Length];<br/>  this.myArray_.CopyTo( copy, 0 );<br/>  return copy;<br/>  // Note: if you are using LINQ, calling the 'ToArray( )' <br/>  //  extension method will create a copy for you.<br/>}<br/></code></pre><br/><br/><p>You should not expose the underlying array through a property, as you will not be able to tell when users modify it. To allow modifying the array, you can either add a corresponding <code>SetMyArray( T[] array )</code> method, or use a custom indexer:</p><br/><br/><pre><code>public T this[int index] {<br/>  get { return this.myArray_[index]; }<br/>  set {<br/>    // TODO: validate new value; raise change event; etc.<br/>    this.myArray_[index] = value;<br/>  }<br/>}<br/></code></pre><br/><br/><p>(of course, by implementing a custom indexer, you will be duplicating the work of the BCL classes :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE INFORM IN MY EXECUT IN .NET
    </pattern>
    <template>
<![CDATA[<p>A better solution is to store the MD5 in the configuration file.  But instead of the MD5 being just of the configuration file, also include some secret "key" value, like a fixed guid, in the MD5.</p><br/><br/><pre><code>write(MD5(SecretKey + ConfigFileText));<br/></code></pre><br/><br/><p>Then you simply remove that MD5 and rehash the file (including your secret key).  If the MD5's are the same, then no-one modified it.  This prevents someone from modifying it and re-applying the MD5 since they don't know your secret key.</p><br/><br/><p>Keep in mind this is a fairly weak solution (as is the one you are suggesting) as they could easily track into your program to find the key or where the MD5 is stored.  </p><br/><br/><p>A better solution would be to use a public key system and sign the configuration file.  Again that is weak since that would require the private key to be stored on their local machine.  Pretty much anything that is contained on their local PC can be bypassed with enough effort.</p><br/><br/><p>If you REALLY want to store the information in your executable (which I would discourage) then you can just try appending it at the end of the EXE.  That is usually safe.  Modifying executable programs is <em>virus like</em> behavior and most operating system security will try to stop you too.  If your program is in the Program Files directory, and your configuration file is in the Application Data directory, and the user is logged in as a non-administrator (in XP or Vista), then you will be unable to update the EXE.</p><br/><br/><p><strong>Update:</strong> I don't care if you are using Asymmetric encryption, RSA or Quantum cryptography, if you are storing your keys on the user's computer (which you <em>must</em> do unless you route it all through a web service) then the user can find your keys, even if it means inspecting the registers on the CPU at run time!  You are only buying yourself a moderate level of security, so stick with something that is simple.  To prevent modification the solution I suggested is the best.  To prevent reading then encrypt it, and if you are storing your key locally then use AES Rijndael.</p><br/><br/><p><strong>Update:</strong>  The FixedGUID / SecretKey could alternatively be generated at install time and stored somewhere "secret" in the registry.  Or you could generate it every time you use it from hardware configuration.  Then you are getting more complicated.  How you want to do this to allow for moderate levels of hardware changes would be to take 6 different signatures, and hash your configuration file 6 times - once with each.  Combine each one with a 2nd secret value, like the GUID mentioned above (either global or generated at install).  Then when you check you verify each hash separately.  As long as they have 3 out of 6 (or whatever your tolerance is) then you accept it.  Next time you write it you hash it with the new hardware configuration.  This allows them to slowly swap out hardware over time and get a whole new system. . . Maybe that is a weakness.  It all comes down to your tolerance.  There are variations based on tighter tolerances.</p><br/><br/><p><strong>UPDATE:</strong>  For a Credit Card system you might want to consider some real security.  You should retain the services of a <em>security and cryptography consultant</em>.  More information needs to be exchanged.  They need to analyze your specific needs and risks.  </p><br/><br/><p>Also, if you want security with .NET you need to first start with a really good .NET obfuscator (<a href="http://www.google.com/search?hl=en&amp;q=.NET%20obfuscator&amp;aq=f&amp;oq=" rel="nofollow">just Google it</a>).  A .NET assembly is way to easy to disassemble and get at the source code and read all your secrets.  Not to sound a like a broken record, but anything that depends on the security of your user's system is fundamentally flawed from the beginning.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IZING CUSTOM SHAREPOINT SEARCH CRAWL
    </pattern>
    <template>
<![CDATA[<p>The limitation of MOSS crawling sites with different forms authentication should have been addressed in MOSS SP1. :</p><br/><br/><p><a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=ad59175c-ad6a-4027-8c2f-db25322f791b&amp;displaylang=en" rel="nofollow">http://www.microsoft.com/downloads/details.aspx?FamilyID=ad59175c-ad6a-4027-8c2f-db25322f791b&amp;displaylang=en</a></p><br/><br/><p>Here's a link to a post which describes how to get the hotfix for pre-SP1 MOSS to enable the crawling of sites with forms authentication:</p><br/><br/><p><a href="http://blogs.microsoft.co.il/blogs/adir_ron/archive/2007/10/11/moss-search-for-sso-form-based-authentication-sites.aspx" rel="nofollow">http://blogs.microsoft.co.il/blogs/adir_ron/archive/2007/10/11/moss-search-for-sso-form-based-authentication-sites.aspx</a></p><br/><br/><p>Hope that helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFFER BETWEEN THE AND OR OPER
    </pattern>
    <template>
<![CDATA[<p>Just like the &amp; and &amp;&amp; operator, the double Operator is a "short-circuit" operator.</p><br/><br/><p>For example:</p><br/><br/><pre><code>if(condition1 || condition2 || condition3)<br/></code></pre><br/><br/><p>If condition1 is true, condition 2 and 3 will NOT be checked.</p><br/><br/><pre><code>if(condition1 | condition2 | condition3)<br/></code></pre><br/><br/><p>This will check conditions 2 and 3, even if 1 is already true. As your conditions can be quite expensive functions, you can get a good performance boost by using them.</p><br/><br/><p>There is one big caveat, NullReferences or similar problems. For example:</p><br/><br/><pre><code>if(class != null &amp;&amp; class.someVar &lt; 20)<br/></code></pre><br/><br/><p>If class is null, the if-statement will stop after "class != null" is false. If you only use &amp;, it will try to check class.someVar and you get a nice NullReferenceException. With the Or-Operator that may not be that much of a trap as it's unlikely that you trigger something bad, but it's something to keep in mind.</p><br/><br/><p>No one ever uses the single &amp; or | operators though, unless you have a design where each condition is a function that HAS the be executed. Sounds like a design smell, but sometimes (rarely) it's a clean way to do stuff. The &amp; operator does "run these 3 functions, and if one of them returns false, execute the else block", while the | does "only run the else block if none return false" - can be useful, but as said, often it's a design smell.</p><br/><br/><p>There is a Second use of the | and &amp; operator though: <a href="http://www.c-sharpcorner.com/UploadFile/chandrahundigam/BitWiserOpsInCS11082005050940AM/BitWiserOpsInCS.aspx" rel="nofollow">Bitwise Operations</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN WEB SERVIC LOCK DLL AND PREVENT PUBLISHING. WORKAROUND
    </pattern>
    <template>
<![CDATA[<p>Using the IISReset command line tool will only restart IIS on the local machine, not on a remote server to which you are publishing.</p><br/><br/><p>Assuming that you are publishing to a Windows 2003 server, I'd suggest trying the slightly less drastic step of stopping and restarting the IIS AppPool in the web site or virtual folder in which the web service runs.  (That way you are not taking all sites that run on the target server offline.)  This too assumes that the web service runs in its own app pool.  Ideally it should, so you keep it isolated.</p><br/><br/><p>I'd recommend getting away from using the Publishing process and to look into using a Web Deployment Project.  Here is a post on ScottGu's blog detailing <a href="http://weblogs.asp.net/scottgu/archive/2005/11/06/429723.aspx" rel="nofollow" title="VS 2005 Web Deployment Projects">VS 2005 Web Deployment Projects</a>.</p><br/><br/><p>The advantage to the Web Deployment Project approach is that it provides you with all the power and capability of MSbuild, as it is really just a convenience wrapper around MSBuild.  Here's a post from the MSBuild team about <a href="http://blogs.msdn.com/msbuild/archive/2005/10/12/480212.aspx" rel="nofollow">pre-build and post-build capabilities</a></p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAY COMPRESS SOUND FILE IN C # IN A PORTABL WAY
    </pattern>
    <template>
<![CDATA[<p>I finally revisited this topic, and, using help from <a href="http://stackoverflow.com/a/7152153/3205">BrokenGlass on writing WAVE header</a>, updated csvorbis. I've added an <a href="https://github.com/mono/csvorbis/blob/master/OggDecoder/OggDecodeStream.cs" rel="nofollow">OggDecodeStream</a> that can be passed to <code>System.Media.SoundPlayer</code> to simply play any (compatible) Ogg Vorbis stream. Example usage:</p><br/><br/><pre><code>using (var file = new FileStream(oggFilename, FileMode.Open, FileAccess.Read))<br/>{<br/>  var player = new SoundPlayer(new OggDecodeStream(file));<br/>  player.PlaySync();<br/>}<br/></code></pre><br/><br/><p>'Compatible' in this case means 'it worked when I tried it out'. The decoder is fully managed, works fine on Microsoft .Net - at the moment, there seems to be a regression in Mono's <code>SoundPlayer</code> that causes distortion.</p><br/><br/><p>Outdated:</p><br/><br/><p><s> <code>System.Diagnostics.Process.Start("fullPath.mp3");</code></p><br/><br/><p>I am surprised but the <a href="http://stackoverflow.com/questions/35896/how-can-i-play-compressed-sound-files-in-c-in-a-portable-way#35987">method Dinah mentioned</a> actually works. However, I was thinking about playing short "jingle" sounds on various events occurring in the program, I don't want to launch user's media player each time I need to do a 'ping!' sound.</p><br/><br/><p>As for the code project link - this is unfortunately only a P/Invoke wrapper.</s></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET HOW DO I LAUNCH A FILE WITH COMMAND LINE ARGUMENT ( WITHOUT KNOW THE LOCAT OF THE EXE )
    </pattern>
    <template>
<![CDATA[<p>Using my code from <a href="http://stackoverflow.com/questions/24954/windows-list-and-launch-applications-associated-with-an-extension#24974" rel="nofollow">this</a> answer you can get command associated with xls extension. Then you can pass this command to Process.Start method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .NET EXCEPT NOT CAUGHT BY TRY CATCH BLOCK
    </pattern>
    <template>
<![CDATA[<p>I believe I understand the problem. The exception is being caught, the issue is confusion over the debugger's behavior and differences in the debugger settings among each person trying to repro it.</p><br/><br/><p>In the 3rd case from your repro I believe you are getting the following message: "NoViableAltException was unhandled by user code" and a callstack that looks like this:</p><br/><br/><pre><br/>         [External Code]	<br/>    >   TestAntlr-3.1.exe!TimeDefLexer.mTokens() Line 852 + 0xe bytes	C#<br/>        [External Code]	<br/>        TestAntlr-3.1.exe!TimeDefParser.prog() Line 141 + 0x14 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.ParseTest(string Text = "foobar;") Line 49 + 0x9 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.Main(string[] args = {string[0x00000000]}) Line 30 + 0xb bytes	C#<br/>        [External Code]	<br/></pre><br/><br/><p>If you right click in the callstack window and run turn on show external code you see this:</p><br/><br/><pre><br/>        Antlr3.Runtime.dll!Antlr.Runtime.DFA.NoViableAlt(int s = 0x00000000, Antlr.Runtime.IIntStream input = {Antlr.Runtime.ANTLRStringStream}) + 0x80 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.DFA.Predict(Antlr.Runtime.IIntStream input = {Antlr.Runtime.ANTLRStringStream}) + 0x21e bytes	<br/>    >   TestAntlr-3.1.exe!TimeDefLexer.mTokens() Line 852 + 0xe bytes	C#<br/>        Antlr3.Runtime.dll!Antlr.Runtime.Lexer.NextToken() + 0xc4 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.CommonTokenStream.FillBuffer() + 0x147 bytes	<br/>        Antlr3.Runtime.dll!Antlr.Runtime.CommonTokenStream.LT(int k = 0x00000001) + 0x2d bytes	<br/>        TestAntlr-3.1.exe!TimeDefParser.prog() Line 141 + 0x14 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.ParseTest(string Text = "foobar;") Line 49 + 0x9 bytes	C#<br/>        TestAntlr-3.1.exe!TestAntlr_3._1.Program.Main(string[] args = {string[0x00000000]}) Line 30 + 0xb bytes	C#<br/>        [Native to Managed Transition]	<br/>        [Managed to Native Transition]	<br/>        mscorlib.dll!System.AppDomain.ExecuteAssembly(string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args) + 0x39 bytes	<br/>        Microsoft.VisualStudio.HostingProcess.Utilities.dll!Microsoft.VisualStudio.HostingProcess.HostProc.RunUsersAssembly() + 0x2b bytes	<br/>        mscorlib.dll!System.Threading.ThreadHelper.ThreadStart_Context(object state) + 0x3b bytes	<br/>        mscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) + 0x81 bytes	<br/>        mscorlib.dll!System.Threading.ThreadHelper.ThreadStart() + 0x40 bytes<br/></pre><br/><br/><p>The debugger's message is telling you that an exception originating outside your code (from NoViableAlt) is going through code you own in TestAntlr-3.1.exe!TimeDefLexer.mTokens() without being handled.  </p><br/><br/><p>The wording is confusing, but it does not mean the exception is uncaught. The debugger is letting you know that code you own mTokens()" needs to be robust against this exception being thrown through it.</p><br/><br/><p>Things to play with to see how this looks for those who didn't repro the problem:</p><br/><br/><ul><br/><li>Go to Tools/Options/Debugging and<br/>turn off "Enable Just My code<br/>(Managed only)". or option.</li><br/><li>Go to Debugger/Exceptions and turn off "User-unhandled" for<br/>Common-Language Runtime Exceptions.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE USER TWEAK CONFIGUR IN APP.CONFIG
    </pattern>
    <template>
<![CDATA[<p>If you use the Settings for the project, you can mark each setting as either application or user.</p><br/><br/><p>If they're set as user, they will be stored per-user and when you call the Save method it will be updated in the config for that user.</p><br/><br/><p>Code project has a really detailed article on saving all types of settings: <a href="http://www.codeproject.com/KB/dotnet/user_settings.aspx" rel="nofollow">http://www.codeproject.com/KB/dotnet/user_settings.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N APPLIC USE MULTIPL CORE OR CPU IN .NET OR JAVA
    </pattern>
    <template>
<![CDATA[<p>If you're using multiple threads, the operating system will automatically take care of using multiple cores.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN THE FOCU TO THE LAST USE CONTROL AFTER CLICK A BUTTON IN A WINFORM APP
    </pattern>
    <template>
<![CDATA[<p>For a bit of 'simplicity' maybe try.</p><br/><br/><pre><code>public Form1()<br/>    {<br/>        InitializeComponent();<br/><br/>        foreach (Control ctrl in Controls)<br/>        {<br/>            if (ctrl is TextBox)<br/>            {<br/>                ctrl.Enter += delegate(object sender, EventArgs e)<br/>                              {<br/>                                  _lastEnteredControl = (Control)sender;<br/>                              };<br/>            }<br/>        }<br/>    }<br/></code></pre><br/><br/><p>then you don't have to worry about decorating each textbox manually (or forgetting about one too).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNTAX FOR AN INNER JOIN IN LINQ TO SQL
    </pattern>
    <template>
<![CDATA[<p>It goes something like:</p><br/><br/><pre><code>from t1 in db.Table1<br/>join t2 in db.Table2 on t1.field equals t2.field<br/>select new { t1.field2, t2.field3}<br/></code></pre><br/><br/><p>It would be nice to have sensible names and fields for your tables for a better example. :)</p><br/><br/><p><strong>Update</strong></p><br/><br/><p>I think for your query this might be more appropriate:</p><br/><br/><pre><code>var dealercontacts = from contact in DealerContact<br/>                     join dealer in Dealer on contact.DealerId equals dealer.ID<br/>                     select contact;<br/></code></pre><br/><br/><p>Since you are looking for the contacts, not the dealers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      C # MOCK FRAMEWORK TO USE
    </pattern>
    <template>
<![CDATA[<p>I've not used most of the ones you've listed, so I can't be objective about it, but I use <a href="http://code.google.com/p/moq/" rel="nofollow">Moq</a> and it has been awesome. The fluent interface makes it a joy to work with. For example:</p><br/><br/><pre><code>mockService.Expect(s =&gt; s.GetCustomers()).Returns(new List&lt;Customer&gt;());<br/></code></pre><br/><br/><p>@Ngu Soon Hui, I wasn't aware that the other frameworks don't have compile-time checking. Moq certainly does. In my example above, if the service class that mockService is mocking doesn't have a GetCustomers() method, I would get a compile-time error. I'd also get one if the GetCustomers() method didn't return a List&lt;Customer&gt; or an interface like IList&lt;Customer&gt;.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING CONCATEN AND STRING INTERN
    </pattern>
    <template>
<![CDATA[<p>If you create new strings, they will not automatically be put into the intern pool, unless you concatenate constants compile-time, in which case the compiler will create one string result and intern that as part of the JIT process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ICC COLOR PROFIL TO AN IMAG IN C # ( DOTNET )
    </pattern>
    <template>
<![CDATA[<p>There are a number of solutions.  </p><br/><br/><p>1) For GDI+, <a href="http://support.microsoft.com/kb/317825/en-us" rel="nofollow">check out this article at MSDN.<br /><br/>2) For WPF (.NET 3.0), see the System.Windows.Media</a> namespace. There are a number of different classes, such as the <a href="http://msdn.microsoft.com/en-us/library/system.windows.media.imaging.bitmapencoder.aspx" rel="nofollow">BitmapEncoder</a>, that have the concept of a <a href="http://msdn.microsoft.com/en-us/library/system.windows.media.colorcontext.aspx" rel="nofollow">ColorContext</a>, which "Represents the International Color Consortium (ICC) or Image Color Management (ICM) color profile that is associated with a bitmap image."   </p><br/><br/><p>Both of these seem pretty complex, so there's always the option of buying somebody else's code.  Atalasoft's <a href="http://www.atalasoft.com/products/dotimage/photopro/default.aspx" rel="nofollow">DotImage Photo Pro</a> has ICC profile setting capabilities built in.  The code is expensive; a dev license is almost 2k.  But based on their participation in the dotnet community, I'd give them a whirl.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONTROL CAN NOT BE REFERENC IN CODE BEHIND IN VISUAL STUDIO 2008
    </pattern>
    <template>
<![CDATA[<p>try clearing your local VS cache. find your project and delete the folder. the folder is created by VS for what reason I honestly don't understand. but I've had several occasions where clearing it and doing a re-build fixes things... hope this is all that you need as well.</p><br/><br/><p>here</p><br/><br/><pre><code>%Temp%\VWDWebCache<br/></code></pre><br/><br/><p>and possibly here</p><br/><br/><pre><code>%LocalAppData%\Microsoft\WebsiteCache<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM JAVA TO C #
    </pattern>
    <template>
<![CDATA[<p>Check these:</p><br/><br/><ul><br/><li>Dare Obasanjo's article "<a href="http://www.25hoursaday.com/weblog/2007/04/30/CFromAJavaDevelopersPerspectiveV20.aspx" rel="nofollow">C# from a Java Developer's Perspective</a>". It's very detailed and I'm sure it will help you a lot.</li><br/><li>Charles Petzold's <a href="http://www.charlespetzold.com/dotnet/" rel="nofollow">.NET Book Zero</a> (What the C or C++ Programmer Needs to<br/>Know About C# and the .NET Framework)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRACT DATA FROM A MS PROJECT .MPP FILE
    </pattern>
    <template>
<![CDATA[<p>I would recommend using MPXJ (<a href="http://mpxj.sf.net" rel="nofollow">mpxj.sf.net</a>) to extract data from Microsoft Project files. Don't be put off by the fact that it was originally a Java library - the current release of MPXJ includes native .net dlls as well as the original Java JAR file, thanks to the magic of IKVM.</p><br/><br/><p>Disclaimer: I maintain MPXJ.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF A FILE EXIST IN C # .NET
    </pattern>
    <template>
<![CDATA[<p>Use:</p><br/><br/><pre><code>File.Exists(path)<br/></code></pre><br/><br/><p>MSDN: <a href="http://msdn.microsoft.com/en-us/library/system.io.file.exists.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/system.io.file.exists.aspx</a></p><br/><br/><p>Edit: In System.IO</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STOP .NET EAT ID
    </pattern>
    <template>
<![CDATA[<p>The short answer is no, with webforms the id can always be rewritten depending on the nesting of the element.  You can get access to the id through the ClientID property, so you could set the ids into variables in a script at the end of the page/control then put them into jQuery.  </p><br/><br/><p>something like this:</p><br/><br/><pre><code>&lt;asp:button id="ImAButton" runat="server"&gt;Click Me&lt;/asp:button&gt;<br/><br/>&lt;script type="text/javascript"&gt;<br/>var buttonId = "&lt;%=ImAButton.ClientId%&gt;";<br/>$("#"+buttonId).bind('click', function() { alert('hi); });<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>It's a hack I know, but it will work.<br/>(I should note for the un-initiated, I'm using the Prototype $ get by id method there)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUNIT HOW TO TEST ALL CLASS THAT IMPLEMENT A PARTICULAR INTERFAC
    </pattern>
    <template>
<![CDATA[<p>If you have classes implement any one interface then they all need to implement the methods in that interface. In order to test these classes you need to create a unit test class for each of the classes.</p><br/><br/><p>Lets go with a smarter route instead; if your goal is to <strong>avoid code and test code duplication</strong> you might want to create an abstract class instead that handles the recurring code. </p><br/><br/><p>E.g. you have the following interface:</p><br/><br/><pre><code>public interface IFoo {<br/><br/>    public void CommonCode();<br/><br/>    public void SpecificCode();<br/><br/>}<br/></code></pre><br/><br/><p>You might want to create an abstract class:</p><br/><br/><pre><code>public abstract class AbstractFoo : IFoo {<br/><br/>    public void CommonCode() {<br/>          SpecificCode();<br/>    }<br/><br/>    public abstract void SpecificCode();<br/><br/>}<br/></code></pre><br/><br/><p>Testing that is easy; implement the abstract class in the test class either as an inner class:</p><br/><br/><pre><code>[TextFixture]<br/>public void TestClass {<br/><br/>    private class TestFoo : AbstractFoo {<br/>        boolean hasCalledSpecificCode = false;<br/>        public void SpecificCode() {<br/>            hasCalledSpecificCode = true;<br/>        }<br/>    }<br/><br/>    [Test]<br/>    public void testCommonCallsSpecificCode() {<br/>        TestFoo fooFighter = new TestFoo();<br/>        fooFighter.CommonCode();<br/>        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());<br/>    }<br/>}<br/></code></pre><br/><br/><p>...or let the test class extend the abstract class itself if that fits your fancy.</p><br/><br/><pre><code>[TestFixture]<br/>public void TestClass : AbstractFoo {<br/><br/>    boolean hasCalledSpecificCode;<br/>    public void specificCode() {<br/>        hasCalledSpecificCode = true;<br/>    }<br/><br/>    [Test]<br/>    public void testCommonCallsSpecificCode() {<br/>        AbstractFoo fooFighter = this;<br/>        hasCalledSpecificCode = false;<br/>        fooFighter.CommonCode();<br/>        Assert.That(fooFighter.hasCalledSpecificCode, Is.True());<br/>    }        <br/><br/>}<br/></code></pre><br/><br/><p>Having an abstract class take care of common code that an interface implies gives a much cleaner code design. </p><br/><br/><p>I hope this makes sense to you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCK CACH IN ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Here's the basic pattern:</p><br/><br/><ul><br/><li>Check the cache for the value, return if its available</li><br/><li>If the value is not in the cache, then implement a lock</li><br/><li>Inside the lock, check the cache again, you might have been blocked</li><br/><li>Perform the value look up and cache it</li><br/><li>Release the lock</li><br/></ul><br/><br/><p>In code, it looks like this:</p><br/><br/><pre><code>private static object ThisLock = new object();<br/><br/>public string GetFoo()<br/>{<br/><br/>  // try to pull from cache here<br/><br/>  lock (ThisLock)<br/>  {<br/>    // cache was empty before we got the lock, check again inside the lock<br/><br/>    // cache is still empty, so retreive the value here<br/><br/>    // store the value in the cache here<br/>  }<br/><br/>  // return the cached value here<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCAN API
    </pattern>
    <template>
<![CDATA[<p>In my company we use <a href="http://www.pegasusimaging.com" rel="nofollow">Pegasus</a>. It's great.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOU GOT A CASCADINGDROPDOWN WORK WITH ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<p>jQuery, action, return JSON.</p><br/><br/><p><a href="http://devlicio.us/blogs/mike_nichols/archive/2008/05/25/jquery-cascade-cascading-values-from-forms.aspx" rel="nofollow">http://devlicio.us/blogs/mike_nichols/archive/2008/05/25/jquery-cascade-cascading-values-from-forms.aspx</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT LINQ TO SQL CLASS AFTER DATABAS SCHEMA CHANG
    </pattern>
    <template>
<![CDATA[<p>You can use SQLMetal.exe to generate your dbml and or cs/vb file. Use a pre-build script to start it and target the directory where your datacontext project belongs.  </p><br/><br/><pre><code>C:\Program Files\Microsoft SDKs\Windows\v6.0A\Bin\x64\sqlmetal.exe <br/>  /server:&lt;SERVER&gt; <br/>  /database:&lt;database&gt; <br/>  /code:"path\Solution\DataContextProject\dbContext.cs" <br/>  /language:csharp <br/>  /namespace:&lt;your namespace&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLAG IN C #
    </pattern>
    <template>
<![CDATA[<pre><code>if ((testItem &amp; FlagTest.Flag1) == FlagTest.Flag1)<br/>{<br/>     // Do something<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFER BETWEEN RUNTIMETYPEHANDL AND TYPE
    </pattern>
    <template>
<![CDATA[<p>According to <a href="http://blogs.msdn.com/vancem/archive/2006/10/01/779503.aspx" rel="nofollow">this blog post by Vance Morrison</a>, RuntimeTypeHandle is a value type (struct) that wraps an unmanaged pointer, so Type.GetTypeHandle(obj).Equals(anotherHandle) is faster to use for strict "is exactly the same type" comparisons than obj.GetType().Equals(anotherType) -- the latter creates System.Type instances which are, apparently, heavier. </p><br/><br/><p>However, it's also less obvious, and definitely falls under the category "micro-optimization" so if you're wondering when you need one over the other, you should probably just use System.Type.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FULL URL OF THE PAGE I AM ON IN C #
    </pattern>
    <template>
<![CDATA[<p>I usually use <code>Request.Url.ToString()</code> to get the full url (including querystring), no concatenation required.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STREAMREAD INTO AN XMLREADER OBJECT IN .NET 2.0 C #
    </pattern>
    <template>
<![CDATA[<p>I'm not sure but it seems that you didn't reset position in stream before passing it to XmlReader. Try to seek at the beginning of your stream before trying to read from it. Also it may be necessary to close\flush stream after you wrote some data to it.</p><br/><br/><p><strong>EDIT</strong>:</p><br/><br/><p>Just tried following code and it worked perfectly:</p><br/><br/><pre><code>    BufferedStream stream = new BufferedStream(new MemoryStream());<br/>    stream.Write(Encoding.ASCII.GetBytes("&lt;xml&gt;foo&lt;/xml&gt;"), 0, "&lt;xml&gt;foo&lt;/xml&gt;".Length);<br/>    stream.Seek(0, SeekOrigin.Begin);<br/>    StreamReader sr = new StreamReader(stream);<br/>    XmlReader reader = XmlReader.Create(sr);<br/>    while (reader.Read())<br/>    {<br/>         Console.WriteLine(reader.Value);<br/>    }<br/>    stream.Close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST IS EMPTI WITH LINQ
    </pattern>
    <template>
<![CDATA[<p>You could do this:</p><br/><br/><pre><code>public static Boolean IsEmpty&lt;T&gt;(this IEnumerable&lt;T&gt; source)<br/>{<br/>    if (source == null)<br/>        return true; // or throw an exception<br/>    return !source.Any();<br/>}<br/></code></pre><br/><br/><p><strong>Edit</strong>: Note that simply using the .Count method will be fast if the underlying source actually has a fast Count property. A valid optimization above would be to detect a few base types and simply use the .Count property of those, instead of the .Any() approach, but then fall back to .Any() if no guarantee can be made.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STANC CONSTRUCTOR SET A STATIC MEMBER IS IT THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>@ajmastrean</p><br/><br/><p>I am not saying you should use the singleton pattern itself, but adopt its method of encapsulating the instantiation process.</p><br/><br/><p>i.e.</p><br/><br/><ul><br/><li>Make the constructor private.</li><br/><li>Create a static instance method that returns the type.</li><br/><li>In the static instance method, use the lock keyword before instantiating.</li><br/><li>Instantiate a new instance of the type.</li><br/><li>Increment the count.</li><br/><li>Unlock and return the new instance.</li><br/></ul><br/><br/><h3>EDIT</h3><br/><br/><p>One problem that has occurred to me, if how would you know when the count has gone down? ;)</p><br/><br/><h3>EDIT AGAIN</h3><br/><br/><p>Thinking about it, you could add code to the destructor that calls another static method to decrement the counter :D</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VISUAL STUDIO
    </pattern>
    <template>
<![CDATA[<p><strong><a href="http://www.jetbrains.com/resharper/" rel="nofollow">Resharper</a></strong> is definitely a great tool.  It has a moderate learning curve but is easy to pick up for some simple things and add mastery later.  It is a good price for students and kinda expensive for the rest of us.  Resharper is similar to CodeRush, but seems to have a larger following.</p><br/><br/><p><strong><a href="http://www.visualstudiogallery.com/ExtensionDetails.aspx?ExtensionID=df3f0c30-3d37-4e06-9ef8-3bff3508be31" rel="nofollow">PowerCommands</a></strong> is a great set of add-ons that comes free from Microsoft.  Things like "Open in Windows Explorer", "Command Prompt Here", and Copy/Paste references.  </p><br/><br/><p>A discussion regarding <strong>add-ins</strong> is <a href="http://stackoverflow.com/questions/2767/do-you-have-any-recommended-add-onsplugins-for-microsoft-visual-studio" rel="nofollow">floating around here somewhere</a>.</p><br/><br/><p>For straight-up customization, <strong>changing colors</strong> is fun, easy, and gives you a big bang for your buck.  I prefer a slightly personalized version of <a href="http://blog.wekeroad.com/2007/10/17/textmate-theme-for-visual-studio-take-2/" rel="nofollow">Rob Conery's TextMate theme for Visual Studio.</a>  Once you get colors you like, you can just <a href="http://msdn.microsoft.com/en-us/library/zbhkx167(VS.80).aspx" rel="nofollow">export the settings</a> and carry them with you wherever you go.</p><br/><br/><p>Related to colors and themes, the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=22e69ae4-7e40-4807-8a86-b3d36fab68d3&amp;displaylang=en" rel="nofollow"><strong>Consolas</strong> font pack</a> is pretty nifty and easy on the eye.</p><br/><br/><p>And like John recommends, a <a href="http://stackoverflow.com/questions/20507/give-me-awesome-visual-studio-keyboard-short-cuts" rel="nofollow">mastery of <strong>keyboard shortcuts</strong></a> will pay big dividends.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YAML LIBRARI
    </pattern>
    <template>
<![CDATA[<p>If your core requirement is "a data-interchange format lighter than XML", then you might want to consider using <a href="http://www.json.org/" rel="nofollow">JSON</a> instead of YAML. YAML is a superset of JSON, but you may not need the extra YAML features.</p><br/><br/><p>Both <a href="http://yaml-net-parser.sourceforge.net/default.html" rel="nofollow">http://yaml-net-parser.sourceforge.net/default.html</a> and <a href="http://www.codeplex.com/yaml" rel="nofollow">YAML for .NET</a> are pretty immature projects, but there is a fairly wide selection of JSON libraries for .NET available, including several with full source code - see the links on the JSON site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST A WINDOW SERVIC
    </pattern>
    <template>
<![CDATA[<p>I'd probably recommend designing your app so the "OnStart" and "OnStop" overrides in the Windows Service just call methods on a class library assembly.  That way you can automate unit tests against the class library methods, and the design also abstracts your business logic from the implementation of a Windows Service.</p><br/><br/><p>In this scenario, testing the "OnStart" and "OnStop" methods themselves in a Windows Service context would then be an integration test, not something you would automate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINQ WITH A MYSQL DATABAS ON MONO
    </pattern>
    <template>
<![CDATA[<p>The only (free) linq provider for MySql is <a href="http://code2code.net/DB%5FLinq/" rel="nofollow">DbLinq</a>, and I believe it is a long way from production-ready.</p><br/><br/><p>There is also <a href="http://www.devart.com/mysqlnet/" rel="nofollow">MyDirect.Net</a> which is commercial, but I have heard mixed reviews of it's capability.</p><br/><br/><p>I've read that MySql will be implementing the Linq to Entities API for the 5.3 version of the .net connector, but I don't know if there's even a timeline for that. In fact, MySql has been totally silent about Entity Framework support for months.</p><br/><br/><p><hr /></p><br/><br/><p>Addendum: The latest release of the MySql Connector/Net 6.0 has support for the EF according to the release notes. I have no idea how stable/useful this is, so I'd love to hear from anybody who have tried it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME .NET TRAIN
    </pattern>
    <template>
<![CDATA[<p>I'd recommend starting with the <a href="http://www.asp.net/" rel="nofollow">official ASP.NET website</a> and the resources there.  Since it is in Microsoft's best interest to get as many developers up-to-speed on .NET, they pour a ton of money into training and tutorials.  They have <a href="http://www.asp.net/learn/" rel="nofollow">a gob of videos, tutorials, downloadable presentations, books, podcasts, and webcasts</a>.  The only problem may be the quantity of material can be overwhelming.</p><br/><br/><p>I would steer clear of the official Microsoft training that's available at <a href="http://learning.microsoft.com/Manager/Catalog.aspx" rel="nofollow">learning.microsoft.com</a>. This training includes self-paced labs and classroom training.  It is not that helpful and tends to focus more on what-to-do rather than why-to-do or how-to-do.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAF USE OF A SINGLETON S MEMBER
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Is access through 'Instance' to the 'Toggle()' class threadsafe? If yes, by what assumptions, rules, etc. If no, why and how can I fix it?</p><br/></blockquote><br/><br/><p>No, it's not threadsafe.</p><br/><br/><p>Basically, both threads can run the <code>Toggle</code> function at the same time, so this could happen</p><br/><br/><pre><code>    // thread 1 is running this code<br/>    if(value == 0) <br/>    {<br/>        value = 1; <br/>        // RIGHT NOW, thread 2 steps in.<br/>        // It sees value as 1, so runs the other branch, and changes it to 0<br/>        // This causes your method to return 0 even though you actually want 1<br/>    }<br/>    else if(value == 1) <br/>    { <br/>        value = 0; <br/>    }<br/>    return value;<br/></code></pre><br/><br/><p>You need to operate with the following assumption.</p><br/><br/><p>If 2 threads are running, they can and will interleave and interact with eachother randomly at any point. You can be half way through writing or reading a 64 bit integer or float (on a 32 bit CPU) and another thread can jump in and change it out from underneath you.</p><br/><br/><p>If the 2 threads never access anything in common, it doesn't matter, but as soon as they do, you need to prevent them from stepping on each others toes. The way to do this in .NET is with locks.</p><br/><br/><p>You can decide what and where to lock by thinking about things like this:</p><br/><br/><p>For a given block of code, if the value of <code>something</code> got changed out from underneath me, would it matter? If it would, you need to lock that <code>something</code> for the duration of the code where it would matter.</p><br/><br/><p>Looking at your example again</p><br/><br/><pre><code>    // we read value here<br/>    if(value == 0) <br/>    {<br/>        value = 1; <br/>    }<br/>    else if(value == 1) <br/>    { <br/>        value = 0; <br/>    }<br/>    // and we return it here<br/>    return value;<br/></code></pre><br/><br/><p>In order for this to return what we expect it to, we assume that <code>value</code> won't get changed between the read and the <code>return</code>. In order for this assumption to actually be correct, you need to lock <code>value</code> for the duration of that code block.</p><br/><br/><p>So you'd do this:</p><br/><br/><pre><code>lock( value )<br/>{<br/>     if(value == 0) <br/>     ... // all your code here<br/>     return value;<br/>}<br/></code></pre><br/><br/><p><strong>HOWEVER</strong></p><br/><br/><p>In .NET you can only lock Reference Types. Int32 is a Value Type, so we can't lock it.<br><br/>We solve this by introducing a 'dummy' object, and locking <em>that</em> wherever we'd want to lock 'value'.</p><br/><br/><p>This is what <a href="http://stackoverflow.com/questions/42505/thread-safe-use-of-a-singletons-members/42517#42517">Ben Scheirman</a> is referring to.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IPC WITHOUT HAVE A SERVIC MEDIAT
    </pattern>
    <template>
<![CDATA[<p>Using shared memory is tougher because you'll have to manage the size of the shared memory buffer (or just pre-allocate enough).  You'll also have to manually manage the data structures that you put in there.  Once you have it tested and working though, it will be easier to use and test because of its simplicity.</p><br/><br/><p>If you go the remoting route, you can use the IpcChannel instead of the TCP or HTTP channels for a single system communication using Named Pipes. <a href="http://msdn.microsoft.com/en-us/library/4b3scst2.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/4b3scst2.aspx</a>.  The problem with this solution is that you'll need to come up with a registry type solution (either in shared memory or some other persistent store) that processes can register their endpoints with.  That way, when you're looking for them, you can find a way to query for all the endpoints that are running on the system and you can find what you're looking for.  The benefits of going with Remoting are that the serialization and method calling are all pretty straightforward.  Also, if you decide to move to multiple machines on a network, you could just flip the switch to use the networking channels instead.  The cons are that Remoting can get frustrating unless you clearly separate what are "Remote" calls from what are "Local" calls.</p><br/><br/><p>I don't know much about WCF, but that also might be worth looking into.  Spider sense says that it probably has a more elegant solution to this problem... maybe.</p><br/><br/><p>Alternatively, you can create a "server" process that is separate from all the other processes and that gets launched (use a system Mutex to make sure more than one isn't launched) to act as a go-between and registration hub for all the other processes.</p><br/><br/><p>One more thing to look into the Publish-Subscribe model for events (Pub/Sub).  This technique helps when you have a listener that is launched before the event source is available, but you don't want to wait to register for the event.  The "server" process will handle the event registry to link up the publishers and subscribers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATCH AGAINST SOMETH THAT IS NOT A SPECIF SUBSTR
    </pattern>
    <template>
<![CDATA[<p>I think in this case you want <strong>negative lookbehind</strong>, like so:</p><br/><br/><pre><code>foo.*(?&lt;!bar)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST.CAST TYPEOF ( T ) ( ) RETURN ERROR SYNTAX LOOK OK
    </pattern>
    <template>
<![CDATA[<p><code>T</code> is not a type nor a <code>System.Type</code>.  <code>T</code> is a type parameter.  <code>typeof(T)</code> returns the type of <code>T</code>.  The <code>typeof</code> operator does not act on an object, it returns the <code>Type</code> object of a type. <a href="http://msdn.microsoft.com/en-us/library/58918ffs.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/58918ffs.aspx</a></p><br/><br/><p>@John is correct in answering your direct question.  But the NHibernate code there is a little off. You shouldn't be configuring the <code>ISessionFactory</code> <em>after</em> getting the <code>ISession</code>, for example.</p><br/><br/><pre><code>public static T[] LoadObjectListAll()<br/>{<br/>    var session = GetNewSession();<br/>    var criteria = session.CreateCriteria(typeof(T));<br/>    var results = criteria.List&lt;T&gt;();<br/>    return results.ToArray();        <br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BYTE ARRAY IN .NET
    </pattern>
    <template>
<![CDATA[<p>ebil gil suggested unsafe code which spawned this solution:</p><br/><br/><pre><code>static unsafe bool UnsafeCompare(byte[] a1, byte[] a2) {<br/>  if(a1==null || a2==null || a1.Length!=a2.Length)<br/>    return false;<br/>  fixed (byte* p1=a1, p2=a2) {<br/>    byte* x1=p1, x2=p2;<br/>    int l = a1.Length;<br/>    for (int i=0; i &lt; l/8; i++, x1+=8, x2+=8)<br/>      if (*((long*)x1) != *((long*)x2)) return false;<br/>    if ((l &amp; 4)!=0) { if (*((int*)x1)!=*((int*)x2)) return false; x1+=4; x2+=4; }<br/>    if ((l &amp; 2)!=0) { if (*((short*)x1)!=*((short*)x2)) return false; x1+=2; x2+=2; }<br/>    if ((l &amp; 1)!=0) if (*((byte*)x1) != *((byte*)x2)) return false;<br/>    return true;<br/>  }<br/>}<br/></code></pre><br/><br/><p>which does 64-bit based comparison for as much of the array as possible. This kinda counts on the fact that the arrays start qword aligned.<br/><p>It performs about 7x faster. Using the J# library performed equivalently to the original for loop. Using .SequenceEqual runs around 7x slower, I think just because it is using IEnumerator.MoveNext.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUT AN ASP.NET SESSION ID IN A HIDDEN FORM FIELD
    </pattern>
    <template>
<![CDATA[<p><a href="http://swfupload.org/forum/generaldiscussion/98" rel="nofollow">Here</a> is a post from the maintainer of <a href="http://swfupload.org" rel="nofollow">SWFUpload</a> which explains how to load the session from an ID stored in Request.Form. I imagine the same thing would work for the Yahoo component.</p><br/><br/><p>Note the security disclaimers at the bottom of the post.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUILT IN METHOD TO COMPAR COLLECT IN C #
    </pattern>
    <template>
<![CDATA[<p><a href="http://msdn.microsoft.com/en-us/library/bb342073.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/bb342073.aspx</a> </p><br/><br/><p><code>Enumerable.SequenceEqual</code></p><br/><br/><blockquote><br/>  <p>Determines whether two sequences are equal by comparing their elements by using a specified IEqualityComparer(T).</p><br/></blockquote><br/><br/><p>You can't directly compare the list &amp; the dictionary, but you could compare the list of values from the Dictionary with the list</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU FOR SYSTEM.DRAWING.SYSTEMCOLOR
    </pattern>
    <template>
<![CDATA[<p>This may help: <a href="http://support.microsoft.com/kb/311339" rel="nofollow">http://support.microsoft.com/kb/311339</a> -- a KB article entitled<br/>"MSDN documentation for the DefaultValueAttribute class may be confusing"</p><br/>]]>    </template>
  </category>
</aiml>
