<?xml version="1.0" ?>
<aiml version="1.0">
  <meta content="SimpleAIMLGenerator" name="author"/>
  <meta content="en" name="language"/>
  <category>
    <pattern>
      OR DJANGO ( OR SOMETH ELS )
    </pattern>
    <template>
<![CDATA[<p>From my experiences, rails seemed to be more of a black box than django. You issue some command and some stuff happened and you got a basic CRUD application. You run this particular function and something happened and you got something else as an output, not knowing what the middle bits were. While this is fine for easy things, the lack of online documentation (in my experience) was a huge hindrance. </p><br/><br/><p>Django, on the other hand, seems to be more logical and transparent about what's going on behind the scenes. There's no "magic". Django is also one of the best documented open source projects out there.</p><br/><br/><p>Just came back and saw your additions:</p><br/><br/><p>If you want something with an extensible admin, pick Django. This is a test in which Django shines. Its clean looking and is extensible. In my experience, the Rails scaffolding is typically thrown away as you add more functionality. Its meant to get you up and going, but not necessarily something you'll see in production. That being said, lists for grandma aren't exactly production :) Reordering field and such is fairly easy, especially given the many community contributions to the admin.</p><br/><br/><p>When people talk about "magic" in Rails (or any other framework for that matter), they're really talking about things happening without it being immediately obvious why or how. A key example of this is Rails' find_by_* function. Its autocompleted function that you don't explicitly define, but its just "magically" there. You can find a lot more information at <a href="http://www.stephenbartholomew.co.uk/2007/6/4/is-rails-magic" rel="nofollow">http://www.stephenbartholomew.co.uk/2007/6/4/is-rails-magic</a>  Purely antecdotal, but I've found that Python (and Django) itself is much more explicit where as Ruby (and Rails) rely a lot more on convention ("That's just the way its done.")</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SCALE
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p><strong>"What are the largest sites built on Django today?"</strong></p><br/><br/><p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href="http://www.djangoproject.com/" rel="nofollow">the main Django project page</a> and then a list of Django built sites at <a href="http://www.djangosites.org/" rel="nofollow">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p><br/><br/><ul><br/><li><p><strong><a href="http://curse.com/" rel="nofollow">curse.com</a></strong>: <a href="http://www.quantcast.com/curse.com" rel="nofollow">600k daily visits</a>, also see David Cramer's blog post <a href="http://www.davidcramer.net/other/43/rapid-development-serving-500000-pageshour.html" rel="nofollow">Rapid development serving 500,000 pages/hour</a>.</p></li><br/><li><p><strong><a href="http://tabblo.com/" rel="nofollow">tabblo.com</a></strong>: <a href="http://www.quantcast.com/tabblo.com" rel="nofollow">44k daily visits</a>, see Ned Batchelder's posts <a href="http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html" rel="nofollow">Infrastructure for modern web sites</a>.</p></li><br/><li><p><strong><a href="http://chesspark.com/" rel="nofollow">chesspark.com</a></strong>: <a href="http://www.alexa.com/siteinfo/chesspark.com" rel="nofollow">Alexa</a> rank about 179k.</p></li><br/><li><p><strong><a href="http://pownce.com/" rel="nofollow">pownce.com</a></strong> (no longer active): <a href="http://www.alexa.com/siteinfo/pownce.com" rel="nofollow">alexa</a> rank about 65k.<br/>Mike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href="http://immike.net/files/scaling_django.pdf" rel="nofollow">Scaling Django Web Apps</a></strong> says "hundreds of hits per second".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li><br/></ul></li><br/><li><p><strong>"Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?"</strong></p><br/><br/><p>Yes, see above.</p></li><br/><li><p><strong>"Could a site like Stack Overflow run on Django?"</strong></p><br/><br/><p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li><br/></ol><br/><br/><p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p><br/><br/><h2><strong>Dec 2009 UPDATE:</strong></h2><br/><br/><p>Blog post about <a href="http://blog.concentricsky.com/2009/10/michaelmoore/" rel="nofollow">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href="http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com" rel="nofollow">top 10,000 website</a>.  <a href="http://www.quantcast.com/michaelmoore.com" rel="nofollow">Quantcast stats</a> and <a href="http://siteanalytics.compete.com/michaelmoore.com/" rel="nofollow">compete.com stats</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S CON OF DJANGO VS PYLON
    </pattern>
    <template>
<![CDATA[<p><em>Disclaimer: I created Pylons.</em></p><br/><br/><p>It really depends on the type of application you're building. Both frameworks were originally made to solve different problems. Despite how far they've both come since their creation its still very useful to keep in mind the problems they were created to solve because many of those choices have guided further development.</p><br/><br/><p>Django was made for newspaper sites, not just a single newspaper (publishing) site, but for making entire sites quickly. They generally had a staff that needed to start pushing content into the system ASAP, even before the public version of the site might be done. This is still clearly reflected in Django as it has a very complete user-friendly admin interface for the staff to begin entering content.</p><br/><br/><p>At the time Django was made, SQLAlchemy wasn't around, and SQLObject was kind of... lacking, so Django has its own ORM. It's still lacking in many ways compared to SQLAlchemy, but it'll work just great for alot of people's needs.</p><br/><br/><p>Django also has the concept of 'apps', which are just directories inside a Django project that do a specific function for the site. This reflects the original creators needs to quickly share components of a site with other sites they made. For example, quickly adding comments, or reviews, to another Django site.</p><br/><br/><p>While you can use SQLAlchemy, or other template languages such as Mako, in Django, many of Django's strengths (the existing 'apps' you can re-use, the admin interface, parts of the form library) go up in smoke as soon as you use SQLAlchemy <strong>instead</strong> of Django's ORM.</p><br/><br/><p>Just like the Django authors made Django to scratch their particular itch, I made Pylons to scratch mine. </p><br/><br/><p>In my experience, creating sites is a very small portion of their life-span. I actually spend significantly more time maintaining a web application, or adding features to an existing one. So the first thing I wanted in the framework was common places to put the 'basics' of a web application, so that it'd be easier to maintain, and that if other people knew Pylons they'd have an easier time jumping in to help maintain a Pylons app.</p><br/><br/><p>For all the sites I've built, they generally involve very different database schemas and data back-ends, with little in common. So sharing 'apps' like Django does just isn't a priority, nor is it feasible given how different each app will actually be (you can't share parts requiring a specific concept of how users are handled if different apps <strong>need</strong> to handle them differently).</p><br/><br/><p>I also needed something small, that wasn't trying to run the show for me. I want to be able to go in and determine how something is going to respond without hoping the framework 'lets' me do it. For this reason, a Pylons app is a bit different from most frameworks, in that the project itself <strong>builds</strong> the application object, making it easy to get in and tweak and change any core bit as needed.</p><br/><br/><p>So the question someone trying to choose should be asking themselves, is what are they trying to build? Because that's really the best way to determine the appropriate framework to use for the task.</p><br/><br/><p>Also, at the moment, the Pylons Book is 100% up to date with Pylons, while Django's book has been updated for version 1.1 of Django. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOLUT FOR OPENID WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>The one that has proven to work best for me, and which seems most up-to-date is the one over at launchpad.</p><br/><br/><p>It integrated seamlessly with my application that already utilizes the django.auth module.</p><br/><br/><p><a href="https://launchpad.net/django-openid-auth" rel="nofollow">https://launchpad.net/django-openid-auth</a></p><br/><br/><p>To get a copy:</p><br/><br/><pre><code>bzr branch lp:django-openid-auth<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP IDE
    </pattern>
    <template>
<![CDATA[<p>I use Eclipse and a plain vanilla PyDev <a href="http://pydev.org/" rel="nofollow">http://pydev.org/</a>.  There isn't any specific Django functionality.  The best I came up with was setting up a run profile to run the development web server.  If you add the web tools project (WTP), you'll get syntax highlighting in your templates but nothing that relates to the specific template language.  Pydev is a decent plugin and if you are already familiar with Eclipse and use it for other projects it is a good way to go.  I recall Netbeans starting to get Python support but I have no idea where that is right now.  Lots of people rave about Netbeans 6 but in the Java world Eclipse still reigns as the king of the OSS IDEs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FEEDBACK ON USE GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>I have tried app engine for my small quake watch application<br/><a href="http://quakewatch.appspot.com/" rel="nofollow">http://quakewatch.appspot.com/</a></p><br/><br/><p>My purpose was to see the capabilities of app engine, so here are the main points:</p><br/><br/><ol><br/><li>it doesn't come by default with django, it has its own web framework which is pythonic has URL dispatcher like django and it uses django templates<br/>So if you have django exp. you will find it easy to use<br/><ul><br/><li>But you can use any pure python framework and django can be easily added see<br/><a href="http://code.google.com/appengine/articles/django.html" rel="nofollow">http://code.google.com/appengine/articles/django.html</a><br/>google-app-engine-django (http://code.google.com/p/google-app-engine-django/) project is excellent and works almost like working on a django project</li><br/></ul></li><br/><li>You can not execute any long running process on server, what you do is reply to request and which should be quick otherwise appengine will kill it<br/>So if your app needs lots of backend processing appengine is not the best way<br/>otherwise you will have to do processing on a server of your own</li><br/><li>My quakewatch app has a subscription feature, it means I had to email latest quakes as they happend, but I can not run a background process in app engine to monitor new quakes<br/>solution here is to use a third part service like pingablity.com which can connect to one of your page and which executes the subscription emailer<br/>but here also you will have to take care that you don't spend much time here<br/>or break task into several pieces</li><br/><li>It provides Django like modeling capabilities but backend is totally different but for a new project it should not matter.</li><br/></ol><br/><br/><p>But overall I think it is excellent for creating apps which do not need lot of background processing.</p><br/><br/><p>Edit:<br/>Now <a href="http://code.google.com/appengine/docs/python/taskqueue/" rel="nofollow">task queues</a> can be used for running batch processing or scheduled tasks</p><br/><br/><p>Edit:<br/>after working/creating a real application on GAE for a year, now my opnion is that unless you are making a application which needs to scale to million and million of users, don't use GAE. Maintaining and doing trivial tasks in GAE is a headache due to distributed nature, to avoid deadline exceeded errors, count entities or do complex queries requires complex code, so small complex application should stick to LAMP.</p><br/><br/><p>Edit:<br/>Models should be specially designed considering all the transactions you wish to have in future, because entities only in same entity group can be used in a transaction and it makes the process of updating two different groups a nightmare e.g. transfer money from user1 to user2 in transaction is impossible unless they are in same entity group, but making them same entity group may not be best for frequent update purposes....<br/>read this <a href="http://blog.notdot.net/2009/9/Distributed-Transactions-on-App-Engine" rel="nofollow">http://blog.notdot.net/2009/9/Distributed-Transactions-on-App-Engine</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MEMORI USAGE. LOW HANG FRUIT
    </pattern>
    <template>
<![CDATA[<p>Make sure you are not keeping global references to data. That prevents the python garbage collector from releasing the memory.</p><br/><br/><p>Don't use <code>mod_python</code>. It loads an interpreter inside apache. If you need to use apache, use <a href="http://code.google.com/p/modwsgi/" rel="nofollow"><code>mod_wsgi</code></a> instead. It is not tricky to switch. It is very easy. <code>mod_wsgi</code> is way easier to <a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango" rel="nofollow">configure for django</a> than brain-dead <code>mod_python</code>.</p><br/><br/><p>If you can remove apache from your requirements, that would be even better to your memory. <a href="http://pypi.python.org/pypi/Spawning/0.7" rel="nofollow"><code>spawning</code></a> seems to be the new fast scalable way to run python web applications.</p><br/><br/><p><strong>EDIT</strong>: I don't see how switching to mod_wsgi could be "<em>tricky</em>". It should be a very easy task. Please elaborate on the problem you are having with the switch.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TIME D WIDGET IN CUSTOM FORM
    </pattern>
    <template>
<![CDATA[<p>What you have to do to make this work:</p><br/><br/><ol><br/><li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p><br/><br/><pre><code>from django import forms<br/>from my_app.models import Product<br/>from django.contrib.admin import widgets                                       <br/><br/><br/>class ProductForm(forms.ModelForm):<br/>    class Meta:<br/>        model = Product<br/>    def __init__(self, *args, **kwargs):<br/>        super(ProductForm, self).__init__(*args, **kwargs)<br/>        self.fields['mydate'].widget = widgets.AdminDateWidget()<br/>        self.fields['mytime'].widget = widgets.AdminTimeWidget()<br/>        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()<br/></code></pre></li><br/><li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean "from my_app.forms import ProductForm" instead of "from my_app.models import Product", of course).</p></li><br/><li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li><br/><li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p><br/><br/><pre><code>&lt;script type="text/javascript" src="/my_admin/jsi18n/"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/media/admin/js/core.js"&gt;&lt;/script&gt;<br/></code></pre><br/><br/><p>You may also wish to use the following admin CSS (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583">Alex</a> for mentioning this):</p><br/><br/><pre><code>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/&gt;<br/>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/&gt;<br/></code></pre></li><br/></ol><br/><br/><p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p><br/><br/><p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p><br/><br/><pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),<br/></code></pre><br/><br/><p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p><br/><br/><pre><code>{% load adminmedia %} /* At the top of the template. */<br/><br/>/* In the head section of the template. */<br/>&lt;script type="text/javascript"&gt;<br/>window.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}";<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>Thanks <a href="http://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128">lupefiasco</a> for this addition.</p><br/><br/><p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SEARCH APP
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://haystacksearch.org/" rel="nofollow">Haystack Search</a> - a new model based search abstraction layer that currently supports <a href="http://xapian.org/" rel="nofollow">Xapian</a>, <a href="http://lucene.apache.org/solr/" rel="nofollow">Solr</a> and <a href="https://bitbucket.org/mchaput/whoosh/wiki/Home" rel="nofollow">Whoosh</a>. Looks like it's well supported and documented.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET UP A SCHEDUL JOB
    </pattern>
    <template>
<![CDATA[<p>One solution that I have employed is to do this:</p><br/><br/><p>1) Create a <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands">custom management command</a>, e.g. </p><br/><br/><pre><code>python manage.py my_cool_command<br/></code></pre><br/><br/><p>2) Use cron to run my command at the required times.</p><br/><br/><p>This is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AD A FORM TO A DJANGO FORMSET WITH AJAX
    </pattern>
    <template>
<![CDATA[<p>This is how I do it, using <a href="http://www.jquery.com" rel="nofollow">jQuery</a>:</p><br/><br/><p>My template:</p><br/><br/><pre><code>&lt;h3&gt;My Services&lt;/h3&gt;<br/>{{ serviceFormset.management_form }}<br/>{% for form in serviceFormset.forms %}<br/>    &lt;div class='table'&gt;<br/>    &lt;table class='no_error'&gt;<br/>        {{ form.as_table }}<br/>    &lt;/table&gt;<br/>    &lt;/div&gt;<br/>{% endfor %}<br/>&lt;input type="button" value="Add More" id="add_more"&gt;<br/>&lt;script&gt;<br/>    $('#add_more').click(function() {<br/>        cloneMore('div.table:last', 'service');<br/>    });<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>In a javascript file:</p><br/><br/><pre><code>function cloneMore(selector, type) {<br/>    var newElement = $(selector).clone(true);<br/>    var total = $('#id_' + type + '-TOTAL_FORMS').val();<br/>    newElement.find(':input').each(function() {<br/>        var name = $(this).attr('name').replace('-' + (total-1) + '-','-' + total + '-');<br/>        var id = 'id_' + name;<br/>        $(this).attr({'name': name, 'id': id}).val('').removeAttr('checked');<br/>    });<br/>    newElement.find('label').each(function() {<br/>        var newFor = $(this).attr('for').replace('-' + (total-1) + '-','-' + total + '-');<br/>        $(this).attr('for', newFor);<br/>    });<br/>    total++;<br/>    $('#id_' + type + '-TOTAL_FORMS').val(total);<br/>    $(selector).after(newElement);<br/>}<br/></code></pre><br/><br/><p>What it does:</p><br/><br/><p><code>cloneMore</code> accepts <code>selector</code> as the first argument, and the <code>type</code> of formset as the 2nd one. What the <code>selector</code> should do is pass it what it should duplicate. In this case, I pass it <code>div.table:last</code> so that jQuery looks for the last table with a class of <code>table</code>. The <code>:last</code> part of it is important because the <code>selector</code> is also used to determine what the new form will be inserted after. More than likely you'd want it at the end of the rest of the forms. The <code>type</code> argument is so that we can update the <code>management_form</code> field, notably <code>TOTAL_FORMS</code>, as well as the actual form fields. If you have a formset full of, say, <code>Client</code> models, the management fields will have IDs of <code>id_clients-TOTAL_FORMS</code> and <code>id_clients-INITIAL_FORMS</code>, while the form fields will be in a format of <code>id_clients-N-fieldname</code> with <code>N</code> being the form number, starting with <code>0</code>. So with the <code>type</code> argument the <code>cloneMore</code> function looks at how many forms there currently are, and goes through every input and label inside the new form replacing all the field names/ids from something like <code>id_clients-(N)-name</code> to <code>id_clients-(N+1)-name</code> and so on. After it is finished, it updates the <code>TOTAL_FORMS</code> field to reflect the new form and adds it to the end of the set.</p><br/><br/><p>This function is particularly helpful to me because the way it is setup it allows me to use it throughout the app when I want to provide more forms in a formset, and doesn't make me need to have a hidden "template" form to duplicate as long as I pass it the formset name and the format in which the forms are laid out. Hope it helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO THE GOOD WAY
    </pattern>
    <template>
<![CDATA[<p>There are a bunch of ways to do it, but the most straightforward is to simply <br/>use the <a href="http://docs.python.org/lib/module-pdb.html" rel="nofollow">Python debugger</a>. Just add following line in to a Django view function:</p><br/><br/><pre><code>import pdb; pdb.set_trace()<br/></code></pre><br/><br/><p>If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.</p><br/><br/><p>However there are other options suggested by others (I won't recommend them):</p><br/><br/><pre><code>* return HttpResponse({variable to inspect})<br/><br/>* print {variable to inspect}<br/><br/>* raise Exception({variable to inspect})<br/></code></pre><br/><br/><p>But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at ipdb that uses ipython for debugging. Happy Coding.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOST SERVIC IS BEST FOR DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>I'm a huge fan of <a href="http://www.webfaction.com/" rel="nofollow">webfaction</a> as well. They are not the cheapest hosts at $9.50 a month (if you are not prepaying for a year) but they have supported django for as long as it has been around, they support the stable and 1.0 alpha releases and they have a control panel app that allows you to setup in about two minutes.  Have you checked out <a href="http://djangofriendly.com/hosts/" rel="nofollow">djangofriendly?</a>  There are quite a few reviews and recommendations for django hosts there. </p>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON HOST
    </pattern>
    <template>
<![CDATA[<p>Suggested by Django's wiki: <a href="http://code.djangoproject.com/wiki/DjangoFriendlyWebHosts" rel="nofollow">http://code.djangoproject.com/wiki/DjangoFriendlyWebHosts</a></p><br/><br/><p>Only free (for 10 MB) one listed there: <a href="http://www.alwaysdata.com" rel="nofollow">http://www.alwaysdata.com</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALTERN TO USERVOIC OR GET SATISFACT
    </pattern>
    <template>
<![CDATA[<p>SO clones, seem to be your best bet: <a href="http://code.google.com/p/cnprog/" rel="nofollow">http://code.google.com/p/cnprog/</a> <a href="http://code.google.com/p/soclone/" rel="nofollow">http://code.google.com/p/soclone/</a></p><br/><br/><p>FWIW, SO user discussion itself moved to a self hosted meta SO site, from UserVoice; And it didn't seem to be too hard/bad.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG SERVER ERROR ON DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>Well, when <code>DEBUG = False</code>, Django will automatically mail a full traceback of any error to each person listed in the <code>ADMINS</code> setting, which gets you notifications pretty much for free. If you'd like more fine-grained control, you can write and add to your settings a middleware class which defines a method named <code>process_exception()</code>, which will have access to the exception that was raised:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception</a></p><br/><br/><p>Your <code>process_exception()</code> method can then perform whatever type of logging you'd like: writing to console, writing to a file, etc., etc.</p><br/><br/><p>Edit: though it's a bit less useful, you can also listen for the <code>got_request_exception</code> signal, which will be sent whenever an exception is encountered during request processing:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception</a></p><br/><br/><p>This does <em>not</em> give you access to the exception object, however, so the middleware method is much easier to work with.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you're using the development server follow this: <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/static-files/</a> to setup your URL's, then reference you media files in the template...say an image inside an image folder from: "/site_media/images/foo.gif"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTO DATETIM
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://docs.python.org/library/time.html#time.strptime" rel="nofollow">strptime</a> in the <a href="http://docs.python.org/library/time.html" rel="nofollow">time</a> module.  It is the inverse of <a href="http://docs.python.org/library/time.html#time.strftime" rel="nofollow">strftime</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER FOREIGNKEY CHOIC IN A DJANGO MODELFORM
    </pattern>
    <template>
<![CDATA[<p>ForeignKey is represented by django.forms.ModelChoiceField, which is a ChoiceField whose choices are a model QuerySet.  See the reference for <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield" rel="nofollow">ModelChoiceField</a>.</p><br/><br/><p>So, provide a QuerySet to the field's <code>queryset</code> attribute.  Depends on how your form is built.  If you build an explicit form, you'll have fields named directly. </p><br/><br/><pre><code>form.rate.queryset = Rate.objects.filter(company_id=the_company.id)<br/></code></pre><br/><br/><p>If you take the default ModelForm object, <code>form.fields["rate"].queryset = ...</code></p><br/><br/><p>This is done explicitly in the view.  No hacking around.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + DJANGO PAGE REDIRECT
    </pattern>
    <template>
<![CDATA[<p>It's simple:</p><br/><br/><pre><code>from django.http import HttpResponseRedirect<br/><br/>def myview(request):<br/>    ...<br/>    return HttpResponseRedirect("/path/")<br/></code></pre><br/><br/><p>More info in the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpResponseRedirect" rel="nofollow">official Django docs</a></p><br/><br/><p><strong>Update</strong></p><br/><br/><p>There is apparently a better way of doing this in Django now using <code>generic views</code>.</p><br/><br/><p>Example -</p><br/><br/><pre><code>from django.views.generic.simple import redirect_to<br/><br/>urlpatterns = patterns('',   <br/>    (r'^one/$', redirect_to, {'url': '/another/'}),<br/><br/>    #etc...<br/>)<br/></code></pre><br/><br/><p>There is more in the <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-redirect-to" rel="nofollow">generic views documentation</a>.<br/>Credit - <a href="http://stackoverflow.com/users/166761/carles-barrobes">Carles Barrobés</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS CONSTANT IN SETTINGS.PI FROM TEMPLAT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django provides access to certain, frequently-used settings constants to the template such as <code>settings.MEDIA_URL</code> and some of the language settings if you use django's built in generic views or pass in a context instance keyword argument in the <code>render_to_response</code> shortcut function.  Here's an example of each case:</p><br/><br/><pre><code>from django.shortcuts import render_to_response<br/>from django.template import RequestContext<br/>from django.views.generic.simple import direct_to_template<br/><br/>def my_generic_view(request, template='my_template.html'):<br/>    return direct_to_template(request, template)<br/><br/>def more_custom_view(request, template='my_template.html'):<br/>    return render_to_response(template, {}, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>These views will both have several frequently used settings like <code>settings.MEDIA_URL</code> available to the template as <code>{{ MEDIA_URL }}</code>, etc.</p><br/><br/><p>If you're looking for access to other constants in the settings, then simply unpack the constants you want and add them to the context dictionary you're using in your view function, like so:</p><br/><br/><pre><code>from django.conf import settings<br/>from django.shortcuts import render_to_response<br/><br/>def my_view_function(request, template='my_template.html'):<br/>    context = {'favorite_color': settings.FAVORITE_COLOR}<br/>    return render_to_response(template, context)<br/></code></pre><br/><br/><p>Now you can access <code>settings.FAVORITE_COLOR</code> on your template as <code>{{ favorite_color }}</code>.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX LIBRARI FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>I highly recommend <a href="http://www.jquery.com/" rel="nofollow">JQuery</a>.  There are several tutorials on how to implement it.</p><br/><br/><p><a href="http://lethain.com/entry/2007/dec/11/two-faced-django-part-5-jquery-ajax/" rel="nofollow">http://lethain.com/entry/2007/dec/11/two-faced-django-part-5-jquery-ajax/</a></p><br/><br/><p><a href="http://lethain.com/entry/2007/dec/01/using-jquery-django-autocomplete-fields/" rel="nofollow">http://lethain.com/entry/2007/dec/01/using-jquery-django-autocomplete-fields/</a></p><br/><br/><p><a href="http://vincentxu.net/minimal-ajax-in-django-with-jquery-post" rel="nofollow">http://vincentxu.net/minimal-ajax-in-django-with-jquery-post</a></p><br/><br/><p><strong>NOTE:</strong> Microsoft also announced a while ago that JQuery would be the official client-side framework for ASP.NET MVC, so its good to know regardless of what server side framework you're using.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIFT FRAMEWORK AS EASI AS RUBI ON RAIL OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>I'm currently working on a series of projects in lift, so I'll give my personal experiences.</p><br/><br/><p>Its a very capable framework - and I find it makes lighter work of application development than the equivalent in rails or django. However, you will need a reasonable understanding of scala in order to get started on sophisticated app development as documentation is existent but limited, and not centralised.</p><br/><br/><p>Lift itself has cherry-picked a lot of features from existent frameworks - rails and django included - to form, imho, a best of breed framework. It also uses some novel techniques of its own that truly mean you can take a frontend and build an application around it relatively quickly.</p><br/><br/><p>Following the tutorials, you can create the classic "todo" application demonstrated by many frameworks with little to no experience within 2-3 minutes. But I would say that you need to have a reasonable knowledge of Java, and an understanding of scala in order to get the most out of lift.</p><br/><br/><p>Setting up a comfortable development environment isn't exactly painless, due to spotty scala support in the mainstream IDEs.</p><br/><br/><p>If you have a weekend you can dedicate to <a href="http://liftweb.net/getting_started" rel="nofollow">getting started</a> and <a href="http://groups.google.com/group/the-lift-book" rel="nofollow">reading the book</a> I would highly recommend taking the plunge.</p><br/><br/><p>As a more direct answer to your question, in terms of "ease", I would say that if you are unfamiliar with Java, scala, ruby and python, then of the three, your best bet would be rails - as ruby is a beautiful language, nigh on self-explanatory, well documented, introduces the majority of OO concepts, and is very easy to learn.  Additionally, I know of many people that have actually learned ruby solely through developing in rails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL FOR COUNT AND GROUP BY
    </pattern>
    <template>
<![CDATA[<p>(<strong>Update</strong>: Full ORM aggregation support is now included in <a href="http://docs.djangoproject.com/en/dev/releases/1.1/#aggregate-support" rel="nofollow">Django 1.1</a>. True to the below warning about using private APIs, the method documented here no longer works in post-1.1 versions of Django.  I haven't dug in to figure out why; if you're on 1.1 or later you should use the real <a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">aggregation API</a> anyway.)</p><br/><br/><p>The core aggregation support was already there in 1.0; it's just undocumented, unsupported, and doesn't have a friendly API on top of it yet.  But here's how you can use it anyway until 1.1 arrives (at your own risk, and in full knowledge that the query.group_by attribute is not part of a public API and could change):</p><br/><br/><pre><code>query_set = Item.objects.extra(select={'count': 'count(1)'}, <br/>                               order_by=['-count']).values('count', 'category')<br/>query_set.query.group_by = ['category_id']<br/></code></pre><br/><br/><p>If you then iterate over query_set, each returned value will be a dictionary with a "category" key and a "count" key.</p><br/><br/><p>You don't have to order by -count here, that's just included to demonstrate how it's done (it has to be done in the .extra() call, not elsewhere in the queryset construction chain).  Also, you could just as well say count(id) instead of count(1), but the latter may be more efficient.</p><br/><br/><p>Note also that when setting .query.group_by, the values must be actual DB column names ('category_id') not Django field names ('category').  This is because you're tweaking the query internals at a level where everything's in DB terms, not Django terms.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR LOAD MYSQLDB MODUL NO MODUL NAME MYSQLDB HAVE TRI PREVIOUS POST SOLUT
    </pattern>
    <template>
<![CDATA[<p>This issue was the result of an incomplete / incorrect installation of the MySQL for Python adapter. Specifically, I had to edit the path to the mysql_config file to point to /usr/local/mysql/bin/mysql_config - discussed in greater detail in this article: <a href="http://dakrauth.com/blog/entry/python-and-django-setup-mac-os-x-leopard/" rel="nofollow">http://dakrauth.com/blog/entry/python-and-django-setup-mac-os-x-leopard/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT WITHOUT THE REST OF DJANGO
    </pattern>
    <template>
<![CDATA[<p>The solution is simple.  It's actually well documented, but not too easy to find.  (I had to dig around--it didn't come up when I tried a few different Google searches.)  See <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode</a>.</p><br/><br/><p>The following code works:</p><br/><br/><pre><code>&gt;&gt;&gt; from django.template import Template, Context<br/>&gt;&gt;&gt; from django.conf import settings<br/>&gt;&gt;&gt; settings.configure()<br/>&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')<br/>&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})<br/>&gt;&gt;&gt; t.render(c)<br/>u'My name is Daryl Spitzer.'<br/></code></pre><br/><br/><p>See the <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#configuring-the-template-system-in-standalone-mode" rel="nofollow">Django documentation</a> for a description of some of the settings you may want to define (as keyword arguments to configure).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM HTML DECODING ENCOD USE PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>The Cheetah function should work, but is missing the single-quote.  Use this tuple instead:</p><br/><br/><pre><code>htmlCodes = (<br/>    ('&amp;', '&amp;amp;'),<br/>    ('&lt;', '&amp;lt;'),<br/>    ('&gt;', '&amp;gt;'),<br/>    ('"', '&amp;quot;'),<br/>    ("'", '&amp;#39;'),<br/>)<br/></code></pre><br/><br/><p>Here's Django's django.utils.html.escape function for reference:</p><br/><br/><pre><code>def escape(html):<br/>    """Returns the given HTML with ampersands, quotes and carets encoded."""<br/>    return mark_safe(force_unicode(html).replace('&amp;', '&amp;amp;').replace('&lt;', '&amp;l<br/>t;').replace('&gt;', '&amp;gt;').replace('"', '&amp;quot;').replace("'", '&amp;#39;'))<br/></code></pre><br/><br/><p>I also think it would make more sense to store the HTML unescaped in your database.  It'd be worth looking into getting unescaped results back from BeautifulSoup if possible.</p><br/><br/><p>In addition, escaping only occurs in Django during template rendering.  So to prevent escaping you just tell the templating engine not to escape your string:  Use either <code>{{ context_var|safe }}</code> or <code>{% autoescape off %}{{ context_var }}{% endautoescape %}</code> in your templates.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON IRONPYTHON
    </pattern>
    <template>
<![CDATA[<p>Besides the Jeff Hardy blog post on <a href="http://jdhardy.blogspot.com/2008/12/django-ironpython.html" rel="nofollow">Django + IronPython</a> mentioned by Tony Meyer, it might be useful to also read Jeff's two other posts in the same series on his struggles with IronPython, easy_install and zlib. The first is <a href="http://jdhardy.blogspot.com/2008/12/solving-zlib-problem-ironpythonzlib.html" rel="nofollow">Solving the zlib problem</a> which discusses the absence of zlib for IronPython; hence, no easyinstall. Jeff reimplemented zlib based on ComponentAce's zlib.net. And finally, in <a href="http://jdhardy.blogspot.com/2008/12/easyinstall-on-ironpython-part-deux.html" rel="nofollow">easy_install on IronPython, Part Deux</a> Jeff discusses some final tweaks that are needed before easy_install can be used with IronPython.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SWITCH FROM PHP TO PYTHON WORTH THE TROUBL
    </pattern>
    <template>
<![CDATA[<p>I've done the switch a few years back. And I don't regret the switch in the least. At the time, I wasn't a big fan of frameworks. So I won't comment on this part. I'll keep it to the language itself.</p><br/><br/><h2>Python's advantages</h2><br/><br/><p>The code you write tends to be very clean and readable (it's very consistent). Code readability is - IMHO - strongly tied to maintainability as well. So that's a big plus. Obviously, you can also write mediocre code in python. But it's much harder than in PHP.</p><br/><br/><p>Another <em>huge</em> advantage over PHP is its handling of multibyte strings (f. ex. unicode). This is handled magnificently in Python, whereas it can easily give you major headaches in PHP (try <code>substr</code> on a multibyte string in PHP while splitting at the position of the mb-character).</p><br/><br/><p>In Python <em>everything</em> is an object. This gives you awesome flexibility. Want to subclass an <code>int</code>? No problem!</p><br/><br/><p>Next to that, the data structures you get in python (lists, tuples, dictionaries, sets, ...) are really useful as well. Get to know them early, it will simplify your code! Also, the standard library is really nice. It's got a lot of useful stuff in there.</p><br/><br/><p>Blocks are defined by indentation..... once you get used to it, it's awesome! TIP: It might be an indication that you need refactoring if you start having trouble following the level of indentation (your method might have become too large or the nesting depth is too deep).</p><br/><br/><p>Python can also be used for tasks other than web-pages (GUIs, SOAs, Console apps). Yes, you could also write GTK apps in PHP, or console applications. But that was never the main purpose of PHP. So its support in that regard is flaky. This means, when learning python you have a truly universal tool at hand.</p><br/><br/><h2>Python's disadvantages</h2><br/><br/><p>Python is not as widely used as PHP. So it's not as easy to find hosting solutions. Also, the community is much smaller. At the same time, from a corporate perspective, it's harder to find Python developers. <strong>However:</strong> The bulk of Python can be learned in an afternoon. So it's easy and cheap to train new developers! Getting to know the frameworks and the standard library may take some while though.</p><br/><br/><p>For the same reason, there is less (developed) support in development tools for Python than there is for PHP. So you may see Python addons for popular IDEs, but they are less polished than they are for other languages. Do not take my word on this however, as I tend not to use IDEs anyway. Tried many of them, always fell back to my trusty vim.</p><br/><br/><h2>Things you should be aware of</h2><br/><br/><p>There are no Interfaces in (pure) Python. Only classes. Multiple inheritance instead? I don't like it too much. It's risky if not used properly. There are two ways to call the parent implementation of a constructor for example. Personally, I still have not yet figured out which one I should use in which situation. If not careful, you risk running into the <a href="http://en.wikipedia.org/wiki/Diamond_problem" rel="nofollow">Diamond Problem</a>.</p><br/><br/><p>Having said that, <code>zope.interface</code> provides this support (as mentioned by Kevin Horn).</p><br/><br/><p>And as UK-AL mentioned, python uses <code>duck typing</code> instead of interfaces. It is something you should know about when learning python.</p><br/><br/><h2>Some interesting links for python web development</h2><br/><br/><p>In order of personal preference ;)</p><br/><br/><ol><br/><li><a href="http://flask.pocoo.org/" rel="nofollow">Flask</a></li><br/><li><a href="http://bottlepy.org/" rel="nofollow">Bottle</a></li><br/><li><a href="http://www.djangoproject.com/" rel="nofollow">Django</a></li><br/><li><a href="http://pylonshq.com/" rel="nofollow">Pylons</a></li><br/><li><a href="http://twistedmatrix.com/trac/" rel="nofollow">Twisted</a></li><br/><li><a href="http://www.turbogears.org" rel="nofollow">TurboGears</a></li><br/><li><a href="http://www.cherrypy.org" rel="nofollow">CherryPy</a></li><br/></ol><br/><br/><p>These are the ones I used and have some experience with. There are of course many others. Hop on over to <a href="http://wiki.python.org/moin/WebFrameworks" rel="nofollow">http://wiki.python.org/moin/WebFrameworks</a> to get a more comprehensive list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS OTHER PYTHON WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>I suggest taking another look at TG2.  I think people have failed to notice some of the strides that have been made since the last version. Aside from the growing WSGI stack of utilities available there are quite a few TG2-specific items to consider.  Here are a couple of highlights:</p><br/><br/><p><a href="http://turbogears.org/2.0/docs/main/Extensions/index.html" rel="nofollow">TurboGears Administration System</a> - This CRUD interface to your database is fully customizable using a declarative config class.  It is also integrated with Dojo to give you infinitely scrollable tables.  Server side validation is also automated.  The admin interface uses RESTful urls and HTTP verbs which means it would be easy to connect to programatically using industry standards.</p><br/><br/><p><a href="http://turbogears.org/2.0/docs/main/Extensions/Crud/index.html" rel="nofollow">CrudRestController</a>/<a href="http://turbogears.org/2.0/docs/modules/tgcontroller.html?highlight=restcontroller#tg.controllers.RestController" rel="nofollow">RestController</a> - TurboGears provides a structured way to handle services in your controller.  Providing you the ability to use standardized HTTP verbs simply by extending our RestController.  Combine <a href="http://www.sprox.org" rel="nofollow">Sprox</a> with CrudRestController, and you can put crud anywhere in your application with fully-customizable autogenerated forms.<br/>TurboGears now supports mime-types as file extensions in the url, so you can have your controller render .json and .xml with the same interface it uses to render html (returning a dictionary from a controller)</p><br/><br/><p>If you click the links you will see that we have a new set of documentation built with sphinx which is more extensive than the docs of the past.</p><br/><br/><p>With the best <a href="http://pylonshq.com" rel="nofollow">web server</a>, <a href="http://www.sqlalchemy.org" rel="nofollow">ORM</a>, and <a href="http://genshi.edgewall.org/" rel="nofollow">template system</a>(s) (pick your own) under the hood, it's easy to see why TG makes sense for people who want to get going quickly, and still have scalability as their site grows.</p><br/><br/><p>TurboGears is often seen as trying to hit a moving target, but we are consistent about releases, which means you won't have to worry about working out of the trunk to get the latest features you need.  Coming to the future: more TurboGears extensions that will allow your application to grow functionality with the ease of paster commands.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUBI ON RAIL AFFECT HOW A WEB PAGE LOOK
    </pattern>
    <template>
<![CDATA[<p>Ruby on Rails is a server side technology, so it doesn't lend any specific quality to the user visible design.  That said, it is a "trendy" technology so people who are likely to write their back-end code with RoR are likely to choose a particular "Web 2.0" style for their views.</p><br/><br/><p>It's kind of like saying "I notice that douches tend to wear backwards baseball caps and wear really baggy jeans.  Does wearing a backwards baseball cap affect the tightness of one's jeans?"  And the answer would be, no, however, a douche is likely to choose both of these clothing items.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON LOGGER
    </pattern>
    <template>
<![CDATA[<p>I typically don't use or find a need for class-level loggers, but I keep my modules at a few classes at most. A simple:</p><br/><br/><pre><code>import logging<br/>LOG = logging.getLogger(__name__)<br/></code></pre><br/><br/><p>At the top of the module and subsequent:</p><br/><br/><pre><code>LOG.info('Spam and eggs are tasty!')<br/></code></pre><br/><br/><p>from anywhere in the file typically gets me to where I want to be. This avoids the need for <code>self.log</code> all over the place, which tends to bother me from both a put-it-in-every-class perspective and makes me 5 characters closer to 79 character lines that fit.</p><br/><br/><p>You could always use a pseudo-class-decorator:</p><br/><br/><pre><code>&gt;&gt;&gt; import logging<br/>&gt;&gt;&gt; class Foo(object):<br/>...     def __init__(self):<br/>...             self.log.info('Meh')<br/>... <br/>&gt;&gt;&gt; def logged_class(cls):<br/>...     cls.log = logging.getLogger('{0}.{1}'.format(__name__, cls.__name__))<br/>... <br/>&gt;&gt;&gt; logged_class(Foo)<br/>&gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG)<br/>&gt;&gt;&gt; f = Foo()<br/>INFO:__main__.Foo:Meh<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASS CUSTOM FORM PARAMET TO FORMSET
    </pattern>
    <template>
<![CDATA[<p>I would use the <a href="http://code.djangoproject.com/browser/django/trunk/django/utils/functional.py#L53" rel="nofollow">curry function from django.utils.functional</a>:</p><br/><br/><pre><code>from django.utils.functional import curry<br/><br/>formset = formset_factory(curry(ServiceForm, affiliate=request.affiliate), extra=3)<br/></code></pre><br/><br/><p>I think this is the cleanest approach, and doesn't affect ServiceForm in any way (i.e. by making it difficult to subclass).  You'll get some strange naming (i.e. the formset will be called '_curriedFormSet' instead of 'ServiceFormFormSet'; if that bothers you, you can try this slightly longer version:</p><br/><br/><pre><code>from django.utils.functional import curry, wraps<br/><br/>formset = formset_factory(wraps(ServiceForm)(curry(ServiceForm, affiliate=request.affiliate)), extra=3)<br/></code></pre><br/><br/><p><strong>EDIT</strong>: The above doesn't actually work, for somewhat obscure reasons (explained below).  The following workaround does work:</p><br/><br/><pre><code>formset = formset_factory(ServiceForm, extra=3)<br/>formset.form = staticmethod(curry(ServiceForm, affiliate=request.affiliate))<br/></code></pre><br/><br/><p>Requires two lines of code instead of one, but still arguably cleaner than the other available options.</p><br/><br/><p>Why doesn't the simple version work?  The form passed into formset_factory is set as the "form" class attribute on the newly-created formset class, and is later called ("self.form()") to create instances of the form.  But the return value of curry() is a function, and when a function object is assigned as a class attribute and then called, Python magically adds "self" as the first parameter of the call; so each form instance is incorrectly passed the formset object as its first parameter.  But the form class is expecting a data dictionary as its first parameter, and when it tried to access the formset object as a dictionary, you get the confusing error "ServiceFormFormSet has no attribute 'get'".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP AGAINST OPENID LOCAL
    </pattern>
    <template>
<![CDATA[<p>The libraries at <a href="http://openidenabled.com/" rel="nofollow">OpenID Enabled</a> ship with examples that are sufficient to run a local test provider.  Look in the examples/djopenid/ directory of the python-openid source distribution.  Running that will give you an instance of <a href="http://openidenabled.com/python-openid/trunk/examples/server/" rel="nofollow">this test provider</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO KNOW THE ORDER TO RENDER FORM FIELD
    </pattern>
    <template>
<![CDATA[<p>I went ahead and answered my own question.  Here's the answer for future reference:</p><br/><br/><p>In Django <code>form.py</code> does some dark magic using the <code>__new__</code> method to load your class variables ultimately into <code>self.fields</code> in the order defined in the class.  <code>self.fields</code> is a Django <code>SortedDict</code> instance (defined in <code>datastructures.py</code>).</p><br/><br/><p>So to override this, say in my example you wanted sender to come first but needed to add it in an <strong>init</strong> method, you would do:</p><br/><br/><pre><code>class ContactForm(forms.Form):<br/>    subject = forms.CharField(max_length=100)<br/>    message = forms.CharField()<br/>    def __init__(self,*args,**kwargs):<br/>        forms.Form.__init__(self,*args,**kwargs)<br/>        #first argument, index is the position of the field you want it to come before<br/>        self.fields.insert(0,'sender',forms.EmailField(initial=str(time.time())))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON PYTHON DJANGO AND MESSAG QUEUE
    </pattern>
    <template>
<![CDATA[<p>So far I have found no "nice" solution for this. I have some more strict soft realtime requirements (taking a picture from a cardboard box being labeled) so probably one of the approaches is fast enough for you. I assume emails can wait for a few minutes.</p><br/><br/><ul><br/><li>A "todo list" in the database processed by a cron job.</li><br/><li>A "todo list" in the database processed permanently beeing polled by a daemon.</li><br/><li>Using a custom daemon which gets notified by the webserver via an UDP packet (in Production today). Basically my own Queing system with the IP stack for handling the queue.</li><br/><li><a href="http://blogs.23.nu/c0re/2007/08/antville-15655/" rel="nofollow">Using ActiveMQ as a message broker</a> - this didn't  work out because of stability issues. Also to me Java Daemons are generally somewhat plump</li><br/><li>Using Update Triggers in CouchDB. Nice but Update Triggers are not meant to do heavy image processing, so no good fit for my problem.</li><br/></ul><br/><br/><p>So far I haven't tried RabbitMQ and XMPP/ejabebrd for handling the problem but they are on my list of next things to try. RabbitMQ got decent Python connectivity during 2008 and there are tons of XMPP libraries.</p><br/><br/><p>But perhaps all you need is a correctly configured mailserver on the local machine. This probably would allow you to dump mails synchronously into the local mailserver and thus make your whole software stack much more simple.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REDIRECT TO PREVIOU PAGE AFTER LOGIN
    </pattern>
    <template>
<![CDATA[<p>You do not need to make an extra view for this, the functionality is already built in.</p><br/><br/><p>First each page with a login link needs to know the current path, and the easiest way is to add the request context preprosessor to settings.py (the 4 first are default), then the request object will be available in each request:</p><br/><br/><p><strong>settings.py:</strong></p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    "django.core.context_processors.auth",<br/>    "django.core.context_processors.debug",<br/>    "django.core.context_processors.i18n",<br/>    "django.core.context_processors.media",<br/>    "django.core.context_processors.request",<br/>)<br/></code></pre><br/><br/><p>Then add in the template you want the Login link:</p><br/><br/><p><strong>base.html:</strong></p><br/><br/><pre><code>&lt;a href="{% url django.contrib.auth.views.login %}?next={{request.path}}"&gt;Login&lt;/a&gt;<br/></code></pre><br/><br/><p>This will add a GET argument to the login page that points back to the current page.</p><br/><br/><p>The login template can then be as simple as this:</p><br/><br/><p><strong>registration/login.html:</strong></p><br/><br/><pre><code>{% block content %}<br/>&lt;form method="post" action=""&gt;<br/>  {{form.as_p}}<br/>&lt;input type="submit" value="Login"&gt;<br/>&lt;/form&gt;<br/>{% endblock %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON AND DJANGO AUTOCOMPLET ( PYSMEL )
    </pattern>
    <template>
<![CDATA[<p>First off, thank you for asking this question, as it forced me to figure this out myself and it's great!</p><br/><br/><p>Here is the page I used as a reference: <a href="http://github.com/orestis/pysmell/tree/v0.6" rel="nofollow">PySmell v0.6 released : orestis.gr</a></p><br/><br/><ol><br/><li>Install PySmell using the <code>setup.py install</code> command.</li><br/><li>Generate the <code>PYSMELLTAGS</code> file for django by going to your <code>site-packages/django</code> directory and running: <code>pysmell . -o ~/PYSMELLTAGS.django</code></li><br/><li>Copy that file to your project directory, and then ran <code>pysmell .</code> to generate the project PYSMELLTAGS file</li><br/><li>Make sure pysmell is in your <code>PYTHONPATH</code> (<code>export PYTHONPATH=${PYTHONPATH}:/path/to/pysmell/</code>)</li><br/><li>Run vim (<code>vim .</code>)</li><br/><li>Source <code>pysmell.vim</code> (<code>:source /path/to/pysmell/pysmell.vim</code>)</li><br/><li>Set the autocomplete command (<code>:set omnifunc=pysmell#Complete</code>)</li><br/><li>Type ^x^o to autocomplete and it should work</li><br/></ol><br/><br/><p>I realize this is not a sustainable solution, but you should be able to use this as a start to getting it setup to always work (e.g., add the export to your .bashrc, add the :source to your .vimrc, setup <code>autocmd FileType python set omnifunc=pysmell#Complete</code>, etc.)</p><br/><br/><p>Let me know if this is enough to get you started. It worked for me!</p><br/><br/><p><strong>Edit</strong><br/>I simply added this to my .vimrc and as long as the <code>PYSMELLTAGS</code> &amp; <code>PYSMELLTAGS.django</code> files are in my project root, it works fine without any other work:</p><br/><br/><pre><code>python &lt;&lt; EOF<br/>import os<br/>import sys<br/>import vim<br/>sys.path.append("/usr/local/python/lib/python2.5/site-packages")<br/>EOF<br/>exe ":source ~/src/pysmell/pysmell.vim"<br/>autocmd FileType python set omnifunc=pysmell#Complete<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT BASE ON USER AG
    </pattern>
    <template>
<![CDATA[<p>Rather than changing the template directories dynamically you could modify the request and add a value that lets your view know if the user is on an iphone or not. Then wrap render_to_response (or whatever you are using for creating HttpResponse objects) to grab the iphone version of the template instead of the standard html version if they are using an iphone. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REST TO DJANGO POLL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I'm thinking of falling back to simply<br/>  writing view functions in Django that<br/>  return JSON results.</p><br/></blockquote><br/><br/><ul><br/><li>Explicit</li><br/><li>Portable to other frameworks</li><br/><li>Doesn't require patching Django</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A LIST OF OBJECT IN PYTHON BASE ON AN ATTRIBUT OF THE OBJECT
    </pattern>
    <template>
<![CDATA[<pre><code># To sort the list in place...<br/>ut.sort(key=lambda x: x.count, reverse=True)<br/><br/># To return a new list, use the sorted() built-in function...<br/>newlist = sorted(ut, key=lambda x: x.count, reverse=True)<br/></code></pre><br/><br/><p>More on <a href="http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys" rel="nofollow">sorting by keys &raquo;</a> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS WEB2PI FOR A BEGINN DEVELOP
    </pattern>
    <template>
<![CDATA[<p>(disclaimer: I am the project leader for web2py)</p><br/><br/><p>Django has been around 5 years longer than web2py therefore it has more users and more applications to show off. Django has what they call "admin" which is not the same as web2py's "admin" but more like web2py's "appadmin". Django's "admin" is better and more customizable than web2py's "appadmin". Django does not have the equivalent of web2py's "admin". (sorry for the name confusion).</p><br/><br/><p>web2py is more compact and has more functionality out of the box (more supported databases, web based IDE, ticketing system, runs on GAE without patches, multiple login methods, role based access control, web based translation interface, support for multiple database connections, distributed transactions, and more).</p><br/><br/><p>For me the most important functionality of web2py is automatic migrations. Django does not provide them out of the box.</p><br/><br/><p>For web2py long term backward compatibility is a primary goal, together with security. Django is comparable to web2py in terms of security (except that web2py had CSRF prevention and default escaping in templates before they did) but Django broke backward compatibility when 1.0 was released. web2py never did since Oct 2007.</p><br/><br/><p>To me the web2py syntax is more natural:</p><br/><br/><pre><code> db(db.tablename.fieldname &lt;= value).select() # web2py<br/> Tablename.objects.filter(fieldname__lt=value) # Django<br/></code></pre><br/><br/><p>I am not aware of any functionality of web2py that is not present in Django. I have asked that question many times because, if there is, we want to add it to web2py, but I have not yet received a satisfactory answer.</p><br/><br/><p>Of course there are things that we both do but differently. Django follows "explicit is better than implicit". web2py does not and instead follows "everything should have a default behavior". I believe this makes web2py code and configuration more compact.</p><br/><br/><p>Anyway, whatever you choose, they are too good solid web frameworks and the similarities are less than the differences. The Django developers are very smart people.</p><br/><br/><p>The web2py community is very friendly. You should try ask a question on the web2py google group and on the Django group. Just as an experiment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STACK OVERFLOW STYL MARKDOWN ( WMD ) JAVASCRIPT EDITOR SHOULD I USE
    </pattern>
    <template>
<![CDATA[<p>In the end, after looking around a bit more for a ready-made editor, I settled on the OpenLibrary WMD port, located at <a href="http://github.com/openlibrary/wmd" rel="nofollow">http://github.com/openlibrary/wmd</a>.</p><br/><br/><h2>The reasons I chose this editor</h2><br/><br/><ol><br/><li>Meets <em>most</em> of my requirements.</li><br/><li>Looks like Stack Overflow's editor. There are a few behavioral differences (see below).</li><br/><li>Is built on top of jQuery (and doesn't require <a href="http://en.wikipedia.org/wiki/MooTools" rel="nofollow">MooTools</a>, which is a plus over the other serious contender, <a href="http://moowmd.awardspace.info/" rel="nofollow">mooWMD</a>).</li><br/></ol><br/><br/><p>I ended up implementing the functionality which shows/hides the editbox myself, which proved pretty easy for the most part. I <strong>haven't</strong> extended the editor with any buttons, which I'm sure will require some messing around in its source, but I don't think it will be too big a deal.</p><br/><br/><h2>Differences from the Stack Overflow version</h2><br/><br/><p>There are a few differences from the Stack Overflow editor:</p><br/><br/><ol><br/><li>Single enters at the end of lines cause a <code>&lt;br/&gt;</code>, instead of being considered one paragraph. I happen to prefer it this way, so I'm fine with this change.</li><br/><li>Numbered lists are auto-numbered, ala Microsoft Word. That is, hitting <kbd>Enter</kbd> after writing "1. first item" will automatically get you a line that starts with "2. ". This is also a change I really like.</li><br/></ol><br/><br/><p>Well, I hope this helps anyone looking for a similar editor. If I end up customizing the editor, I'll create my own branch (it's licensed under the MIT license), but right now I'm getting away without tinkering with the source code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO YOU SERV MEDIA STYLESHEET AND LINK TO THEM WITHIN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I just had to figure this out myself.</p><br/><br/><p>settings.py:</p><br/><br/><pre><code>MEDIA_ROOT = 'C:/Server/Projects/project_name/static/'<br/>MEDIA_URL = '/static/'<br/>ADMIN_MEDIA_PREFIX = '/media/'<br/></code></pre><br/><br/><p>urls.py:</p><br/><br/><pre><code>from django.conf import settings<br/>...<br/>if settings.DEBUG:<br/>    urlpatterns += patterns('',<br/>        (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),<br/>    )<br/></code></pre><br/><br/><p>template file:</p><br/><br/><pre><code>&lt;link rel="stylesheet" type="text/css" href="/static/css/style.css" /&gt;<br/></code></pre><br/><br/><p>With the file located here:</p><br/><br/><pre><code>"C:/Server/Projects/project_name/static/css/style.css"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIVE A DJANGO APP A VERBOS NAME FOR USE THROUGHOUT THE ADMIN
    </pattern>
    <template>
<![CDATA[<p>You can give your application a custom name by defining app_label in your model definition. But as django builds the admin page it will hash models by their app_label, so if you want them to appear in one application, you have to define this name in all models of your application.</p><br/><br/><pre><code>class MyModel(models.Model):<br/>        pass<br/>    class Meta:<br/>        app_label = 'My APP name'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>We use django on our appengine instances mostly when we have to serve actual websites to the user. It has a great template engine, url routing and all the request/response/error handling built in. So even while we can't use the magic orm/admin stuff it has a lot going for it.</p><br/><br/><p>For api services we built something very simple on top of webob. It's far more lightweight because it doesn't need everything that django offers, and therefore a little quicker in some situations.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESIGN FS LAYOUT FOR LARG DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>The major guidelines are similar to any other large code project.  Apps should address a single, clearly-defined responsibility.  The name "application" is a misnomer; Django apps should be thought of more as reusable components which can be plugged together to create a real application.  Tests for each app should be contained within that app.  Apps should be decoupled from each other as much as possible, but clearly there will be dependencies, so the goal should be to keep the dependency graph as simple and sane as possible.</p><br/><br/><p>I prefer to keep all the templates for a project under a single project-wide templates directory, with a subdirectory for each app (using a template subdirectory for each app is a very strong convention in Django, as it avoids template name collisions between apps).  The reason for a single project-wide templates directory is that templates, template inheritance trees, and block names can be quite project-specific, so it's hard to provide "default" app templates that can plug in to any project.  There have been some attempts to settle on standard naming conventions for base site-wide templates and the blocks they define, but I haven't seen a standard emerge yet (the way they do things over at <a href="http://pinaxproject.com" rel="nofollow">Pinax</a> is probably the closest we have to a standard).</p><br/><br/><p>Re "string externalization", if you mean i18n and l10n, Django has strong support for that and standard places where it puts the .po files - check the <a href="http://docs.djangoproject.com/en/dev/topics/i18n/#topics-i18n" rel="nofollow">docs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE SQL DJANGO IS RUN
    </pattern>
    <template>
<![CDATA[<p>Try the docs FAQ: <a href="http://docs.djangoproject.com/en/dev/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running" rel="nofollow">How can I see the raw SQL queries Django is running?</a></p><br/><br/><p><code>django.db.connection.queries</code> contains a list of the SQL queries.</p><br/><br/><pre><code>from django.db import connection<br/>print connection.queries<br/></code></pre><br/><br/><p>Querysets also have a <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet" rel="nofollow"><code>query</code> attribute</a> containing the query to be executed</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SERV DOWNLOAD FILE
    </pattern>
    <template>
<![CDATA[<p>For the "best of both worlds" you could combine S.Lott's solution with the <a href="http://www.google.com.ng/search?q=mod%5Fxsendfile&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a" rel="nofollow">xsendfile module</a>: django generates the path to the file (or the file itself), but the actual file serving is handled by Apache/Lighttpd. Once you've set up mod_xsendfile, integrating with your view takes a few lines of code:</p><br/><br/><pre><code>response = HttpResponse(mimetype='application/force-download')<br/>response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)<br/>response['X-Sendfile'] = smart_str(path_to_file)<br/># It's usually a good idea to set the 'Content-Length' header too.<br/># You can also set any other required headers: Cache-Control, etc.<br/>return response<br/></code></pre><br/><br/><p>Of course, this will only work if you have control over your server, or your hosting company has mod_xsendfile already set up.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EARLI IMPRESS OF PYCHARM FOR PYTHON DJANGO AND WEB DEVELOP
    </pattern>
    <template>
<![CDATA[<p>I <em>lurvvv</em> PyCharm. I started using it about 3 months ago and I haven't looked back, and I've tried Eclipse/PyDev, Vim and textmate. The JetBrains Ruby IDE also happens to be my favorite Ruby IDE, and same for their Java intelliJ IDE .... they're all great products.</p><br/><br/><ul><br/><li>It inspects imports/modules, and lets you quickly jump to definitions and usages.</li><br/><li>Works well with virtualenv (point the project's python interpreter to the one in your virtualenv folder)</li><br/><li>Works well with django templates</li><br/><li>Very customizable</li><br/><li>Good source control integration</li><br/><li>KICK ASS diff tool</li><br/><li>Also great for Javascript development.</li><br/></ul><br/><br/><p>My setup:</p><br/><br/><p><a href="http://i.imgur.com/wIvAt.png" rel="nofollow"><img src="http://i.imgur.com/wIvAt.png" alt="alt text"></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Allow me to answer my own question.  The underlying problem here is that settings.py gets imported twice, or maybe even more (See <a href="http://www.mail-archive.com/django-users@googlegroups.com/msg39059.html" rel="nofollow">here</a>).  (I still don't understand why this is.  Maybe some Django expert could explain that to me.)  This seems to be true of some other modules as well.  At this point I don't think it's wise to make assumptions about how many times settings.py will be imported.  For that matter, such assumptions aren't safe in general.  I've had this code in places other than settings.py, and the results are similar.</p><br/><br/><p>You have to code around this.  That is, you have to check your logger for existing handlers before adding additional handlers to it.  This is a bit ugly because it's perfectly reasonable to have multiple handlers -- even of the same type -- attached to one logger.  There are a few solutions to dealing with this.  One is check the handlers property of your logger object.  If you only want one handler and your length > 0, then don't add it.  Personally I don't love this solution, because it gets messy with more handlers.</p><br/><br/><p>I prefer something like this (thanks to Thomas Guettler):</p><br/><br/><pre><code># file logconfig.py<br/>if not hasattr(logging, "set_up_done"):<br/>    logging.set_up_done=False<br/><br/>def set_up(myhome):<br/>    if logging.set_up_done:<br/>        return<br/>    # set up your logging here<br/>    # ...<br/>    logging.set_up_done=True<br/></code></pre><br/><br/><p>I must say, I wish the fact that Django imports settings.py multiple times were better documented.  And I would imagine that my configuration is somehow cause this multiple import, but I'm having trouble finding out what is causing the problem and why.  Maybe I just couldn't find that in their documents, but I would think that's the sort of thing you need to warn your users about.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS CLASS IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>Answered my own question. <em>Sigh</em></p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs</a></p><br/><br/><p>I didn't realize it was passed into the widget constructor.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PULL A RANDOM RECORD USE DJANGO S ORM
    </pattern>
    <template>
<![CDATA[<p>Simply use:</p><br/><br/><pre><code>MyModel.objects.order_by('?')[0]<br/></code></pre><br/><br/><p>It is documented in <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by-fields" rel="nofollow">QuerySet API</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK AND TUTORI RECOMMED FOR DJANGO 1.0
    </pattern>
    <template>
<![CDATA[<p>The obvious place to start is the <a href="http://www.djangobook.com/" rel="nofollow">The Django Book</a>.  It's available free online and a print copy came out last year.</p><br/><br/><p>If you are new to Django I'd definitely recommend working through it.  I didn't take me too long and I came out the other end with what felt like - and still feels like - a good understanding of Django.</p><br/><br/><p>There are two versions available.  The print version - <a href="http://www.djangobook.com/en/1.0/" rel="nofollow">which is also available online</a> - says:</p><br/><br/><blockquote><br/>  <p>To the extent possible, this book covers Django 0.96 and higher. We've tried to write things in a forward-compatible way.</p><br/></blockquote><br/><br/><p>So there may be some 1.0 gotchas. However, the online version allows readers to leave comments so hopefully they will point out the more egregious incompatibilities.</p><br/><br/><p>Alternatively, you can use the <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">new edition of the book</a>, which is written for 1.0 but is not yet finished.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCDB AND AN UPDAT MODEL
    </pattern>
    <template>
<![CDATA[<p>Django doesn't support migrations out of the box. There is a pluggable app for Django that does exactly that though, and it works great. It's called <a href="http://south.aeracode.org" rel="nofollow">South</a>.</p><br/><br/><p>If you have difficulty setting it up edit your question and I'll gladly help you out (you might want to post a comment on my answer so I get notified).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETUP DEFAULT LOG
    </pattern>
    <template>
<![CDATA[<p>Figured it out...</p><br/><br/><p>You set the 'catch all' logger by referencing it with the empty string: <code>''</code>.</p><br/><br/><p>As an example, in the following setup I have the all log events getting saved to <code>logs/mylog.log</code>, with the exception of <code>django.request</code> log events which will be saved to <code>logs/django_request.log</code>. Because <code>'propagate'</code> is set to <code>False</code> for my <code>django.request</code> logger, the log event will never reach the the 'catch all' logger.</p><br/><br/><pre><code>LOGGING = {<br/>    'version': 1,<br/>    'disable_existing_loggers': True,<br/>    'formatters': {<br/>        'standard': {<br/>            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'<br/>        },<br/>    },<br/>    'handlers': {<br/>        'default': {<br/>            'level':'DEBUG',<br/>            'class':'logging.handlers.RotatingFileHandler',<br/>            'filename': 'logs/mylog.log',<br/>            'maxBytes': 1024*1024*5, # 5 MB<br/>            'backupCount': 5,<br/>            'formatter':'standard',<br/>        },  <br/>        'request_handler': {<br/>                'level':'DEBUG',<br/>                'class':'logging.handlers.RotatingFileHandler',<br/>                'filename': 'logs/django_request.log',<br/>                'maxBytes': 1024*1024*5, # 5 MB<br/>                'backupCount': 5,<br/>                'formatter':'standard',<br/>        },<br/>    },<br/>    'loggers': {<br/><br/>        '': {<br/>            'handlers': ['default'],<br/>            'level': 'DEBUG',<br/>            'propagate': True<br/>        },<br/>        'django.request': { # Stop SQL debug from logging to main logger<br/>            'handlers': ['request_handler'],<br/>            'level': 'DEBUG',<br/>            'propagate': False<br/>        },<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p><em><strong>As of today, there are four available approaches, two of them requiring a certain storage backend:</em></strong></p><br/><br/><ol><br/><li><p><strong><a href="https://github.com/mvpdev/django-eav">Django-eav</a></strong> <em>(<a href="http://stackoverflow.com/questions/7933596/django-dynamic-per-site-model-fields#answer-8174248">proposed by GDorn in his answer</a>)</em> </p><br/><br/><p>This solution is based on <a href="https://en.wikipedia.org/wiki/Entity-attribute-value_model">Entity Attribute Value</a> data model, essentially, it uses several tables to store dynamic attributes of objects. Great parts about this solution is that it:</p><br/><br/><ul><br/><li>uses several pure and simple Django models to represent dynamic fields, which makes it simple to understand and database-agnostic; </li><br/><li><p>allows you to effectively attach/detach dynamic attribute storage to Django model with simple commands like:</p><br/><br/><pre><code>eav.unregister(Encounter)<br/>eav.register(Patient)<br/></code></pre></li><br/><li><p><strong><a href="https://github.com/mvpdev/django-eav/blob/master/eav/admin.py">Nicely integrates with Django admin</a></strong>;</p></li><br/><li><p>At the same time being really powerful.</p></li><br/></ul><br/><br/><p>Downsides:</p><br/><br/><ul><br/><li>Not very efficient.  This is more of a criticism of the EAV pattern itself, which requires manually merging the data from a column format to a set of key-value pairs in the model.</li><br/><li>Harder to maintain.  Maintaining data integrity requires a multi-column unique key constraint, which may be inefficient on some databases.</li><br/><li>Still in development.</li><br/></ul><br/><br/><p>The usage is pretty straightforward:</p><br/><br/><pre><code>import eav<br/>from app.models import Patient, Encounter<br/><br/>eav.register(Encounter)<br/>eav.register(Patient)<br/>Attribute.objects.create(name='age', datatype=Attribute.TYPE_INT)<br/>Attribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)<br/>Attribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)<br/>Attribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)<br/>Attribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)<br/><br/>self.yes = EnumValue.objects.create(value='yes')<br/>self.no = EnumValue.objects.create(value='no')<br/>self.unkown = EnumValue.objects.create(value='unkown')<br/>ynu = EnumGroup.objects.create(name='Yes / No / Unknown')<br/>ynu.enums.add(self.yes)<br/>ynu.enums.add(self.no)<br/>ynu.enums.add(self.unkown)<br/><br/>Attribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\<br/>                                       enum_group=ynu)<br/><br/># When you register a model within EAV,<br/># you can access all of EAV attributes:<br/><br/>Patient.objects.create(name='Bob', eav__age=12,<br/>                           eav__fever=no, eav__city='New York',<br/>                           eav__country='USA')<br/># You can filter queries based on their EAV fields:<br/><br/>query1 = Patient.objects.filter(Q(eav__city__contains='Y'))<br/>query2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)<br/></code></pre></li><br/><li><p><strong><a href="https://github.com/jordanm/django-hstore">Django-hstore</a></strong> </p><br/><br/><p>This is a <a href="http://www.postgresql.org/">PostgreSQL</a> backend which makes use of <a href="http://www.postgresql.org/docs/9.0/static/hstore.html">hstore</a> module. <br/>With it you can have a DictionaryField which stores editable and indexable dictionary.</p><br/><br/><p>This approach is good in a sense that it lets you have the best of both worlds: dynamic fields and relational database. However, hstore is <a href="http://archives.postgresql.org/pgsql-performance/2011-05/msg00263.php">not ideal performance-wise</a>, especially if you are going to end up storing thousands of items in one field.</p><br/><br/><pre><code>#app/models.py<br/>class Something(models.Model):<br/>    name = models.CharField(max_length=32)<br/>    data = hstore.DictionaryField(db_index=True)<br/></code></pre><br/><br/><p>In Django-shell you can use it like this:       </p><br/><br/><pre><code>&gt;&gt;&gt; instance = Something.objects.create(<br/>                 name='something',<br/>                 data={'a': '1', 'b': '2'}<br/>           )<br/>&gt;&gt;&gt; instance.data['a']<br/>'1'        <br/>&gt;&gt;&gt; empty = Something.objects.create(name='empty')<br/>&gt;&gt;&gt; empty.data<br/>{}<br/>&gt;&gt;&gt; empty.data['a'] = '1'<br/>&gt;&gt;&gt; empty.save()<br/>&gt;&gt;&gt; Something.objects.get(name='something').data['a']<br/>'1'<br/></code></pre><br/><br/><p>You can issue indexed queries against hstore fields:</p><br/><br/><pre><code># equivalence<br/>Something.objects.filter(data={'a': '1', 'b': '2'})<br/><br/># subset by key/value mapping<br/>Something.objects.filter(data__contains={'a': '1'})<br/><br/># subset by list of keys<br/>Something.objects.filter(data__contains=['a', 'b'])<br/><br/># subset by single key<br/>Something.objects.filter(data__contains='a')    <br/></code></pre></li><br/><li><p><strong><a href="http://django-mongodb.org/">Django MongoDB</a></strong></p><br/><br/><p>Or other NoSQL Django adaptations -- with them you can have fully dynamic models.</p><br/><br/><p>NoSQL Django libraries are great, but keep in mind that they are not 100% the Django-compatible, for example, to migrate to <a href="http://www.allbuttonspressed.com/projects/django-nonrel">Django-nonrel</a> from standard Django you will need to replace ManyToMany with <a href="http://stackoverflow.com/questions/3877246/django-nonrel-on-google-app-engine-implications-of-using-listfield-for-manytom">ListField</a> among other things.     </p><br/><br/><p>Checkout this Django MongoDB example:</p><br/><br/><pre><code>from djangotoolbox.fields import DictField<br/><br/>class Image(models.Model):<br/>    exif = DictField()<br/>...<br/><br/>&gt;&gt;&gt; image = Image.objects.create(exif=get_exif_data(...))<br/>&gt;&gt;&gt; image.exif<br/>{u'camera_model' : 'Spamcams 4242', 'exposure_time' : 0.3, ...}<br/></code></pre><br/><br/><p>You can even create <a href="http://django-mongodb.org/topics/embedded-models.html">embedded lists</a> of any Django models:</p><br/><br/><pre><code>class Container(models.Model):<br/>    stuff = ListField(EmbeddedModelField())<br/><br/>class FooModel(models.Model):<br/>    foo = models.IntegerField()<br/><br/>class BarModel(models.Model):<br/>    bar = models.CharField()<br/>...<br/><br/>&gt;&gt;&gt; Container.objects.create(<br/>    stuff=[FooModel(foo=42), BarModel(bar='spam')]<br/>)<br/></code></pre></li><br/><li><p><strong><a href="http://dynamic-models.readthedocs.org/en/latest/index.html">Dynamic models based on syncdb and South-hooks</a></strong></p><br/><br/><p>Incredible but somewhat hackish <a href="http://dynamic-models.readthedocs.org/en/latest/index.html">Will Hardy's approach</a> which is based on Django South hooks, which, according to <a href="http://2011.djangocon.eu/talks/22/#talkvideo">his talk at DjangoCon 2011</a> <strong>(watch it!)</strong> is nevertheless robust and tested in production (<a href="http://2011.djangocon.eu/media/slides/RuntimeDynamicModels.pdf">according DjangoCon paper</a>).</p><br/><br/><p><strong>There is an even more advanced dynamic model project currently in the works called <a href="https://github.com/charettes/django-mutant">django-mutant</a> which implements fully dynamic Foreign Key and m2m fields, and will soon have a proper lock in order to maintain data integrity during simultaneous model altering requests.</strong> This library is inspired by Will Hardy and Michael Hall's approaches.</p><br/><br/><p>You might also be interested in an <a href="https://bitbucket.org/mhall119/dynamo/overview">older implementation</a> by <a href="http://mhall119.com/2011/02/fun-with-django-meta-classes-and-dynamic-models/">Michael Hall</a>.</p><br/><br/><p>Yes, this is magic, with these approaches you can achieve <strong>fully dynamic Django apps, models and fields</strong> with any relational database backend. But at what cost? Will stability of application suffer upon heavy use? These are the questions to be considered. You will need to implement a <a href="http://stackoverflow.com/questions/1123200/how-to-lock-a-critical-section-in-django">lock</a> in order to allow simultaneous database altering requests.</p><br/><br/><p>If you are using Michael Halls lib, your code will look like this:</p><br/><br/><pre><code>from dynamo import models<br/><br/>test_app, created = models.DynamicApp.objects.get_or_create(<br/>                      name='dynamo'<br/>                    )<br/>test, created = models.DynamicModel.objects.get_or_create(<br/>                  name='Test',<br/>                  verbose_name='Test Model',<br/>                  app=test_app<br/>               )<br/>foo, created = models.DynamicModelField.objects.get_or_create(<br/>                  name = 'foo',<br/>                  verbose_name = 'Foo Field',<br/>                  model = test,<br/>                  field_type = 'dynamiccharfield',<br/>                  null = True,<br/>                  blank = True,<br/>                  unique = False,<br/>                  help_text = 'Test field for Foo',<br/>               )<br/>bar, created = models.DynamicModelField.objects.get_or_create(<br/>                  name = 'bar',<br/>                  verbose_name = 'Bar Field',<br/>                  model = test,<br/>                  field_type = 'dynamicintegerfield',<br/>                  null = True,<br/>                  blank = True,<br/>                  unique = False,<br/>                  help_text = 'Test field for Bar',<br/>               )<br/></code></pre></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT AND VARIABL ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>I found a "nicer"/"better" solution for getting variables inside<br/>Its not the nicest way, but it works.</p><br/><br/><p>You install a custom filter into django which gets the key of your dict as a parameter</p><br/><br/><p>To make it work in google app-engine you need to add a file to your main directory,<br/>I called mine *django_hack.py* which contains this little piece of code</p><br/><br/><pre><code>from google.appengine.ext import webapp<br/><br/>register = webapp.template.create_template_register()<br/><br/>def hash(h,key):<br/>    if key in h:<br/>        return h[key]<br/>    else:<br/>        return None<br/><br/>register.filter(hash)<br/></code></pre><br/><br/><p>Now that we have this file, all we need to do is tell the app-engine to use it...<br/>we do that by adding this little line to your main file</p><br/><br/><pre><code>webapp.template.register_template_library('django_hack')<br/></code></pre><br/><br/><p>and in your template view add this template instead of the usual code</p><br/><br/><pre><code>{{ user|hash:item }}<br/></code></pre><br/><br/><p>And its should work perfectly =)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT TO USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Because <a href="http://www.youtube.com/watch?v=i6Fr65PFqfk" rel="nofollow">Cal Henderson told me not to</a>.</p><br/><br/><p>My answer was somewhat tongue in cheek, but <a href="http://www.iamcal.com/" rel="nofollow">Cal Henderson</a> gave an hour-long, funny, insightful talk about Django and where it may fall short.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTHENT AND AJAX URL THAT REQUIR LOGIN
    </pattern>
    <template>
<![CDATA[<p>I am facing the same issue, and, like you, I would like a simple decorator to wrap around a Django ajax view in order to handle authentication in the same way that I have other views.  One approach that seems promising to me is to use such a decorator in conjunction with JavaScript that looks for a certain value in the response.</p><br/><br/><p>Here is first draft of the decorator:</p><br/><br/><pre><code>def ajax_login_required(view_func):<br/>    def wrap(request, *args, **kwargs):<br/>        if request.user.is_authenticated():<br/>            return view_func(request, *args, **kwargs)<br/>        json = simplejson.dumps({ 'not_authenticated': True })<br/>        return HttpResponse(json, mimetype='application/json')<br/>    wrap.__doc__ = view_func.__doc__<br/>    wrap.__dict__ = view_func.__dict__<br/>    return wrap<br/></code></pre><br/><br/><p>Here is the view:</p><br/><br/><pre><code>@ajax_login_required<br/>def ajax_update_module(request, module_slug, action):<br/>    # Etc ...<br/>    return HttpResponse(json, mimetype='application/json')<br/></code></pre><br/><br/><p>And here is the JavaScript (jQuery):</p><br/><br/><pre><code>$.post('/restricted-url/', data, function(json) {<br/>    if (json.not_authenticated) {<br/>        alert('Not authorized.');  // Or something in a message DIV<br/>        return;<br/>    }<br/>    // Etc ...<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p><strong>Is a function to test each model within the ModelTests class a good way of writing tests?</strong></p><br/><br/><p>No.</p><br/><br/><p><strong>What exactly should I be testing for?</strong></p><br/><br/><ul><br/><li><p>That creating a model with all of the fields completed works? </p></li><br/><li><p>That a half complete model fails? </p></li><br/><li><p>That any special cases are tested (like a null and is_required=False)? </p></li><br/><li><p>I've trust in the ORM, which as far as I'm aware is heavily tested, so I shouldn't need to test all of the methods should I?</p></li><br/></ul><br/><br/><p>Not much of that.</p><br/><br/><p>You might test validation rules, but that isn't meaningful until you've defined some Form objects.  Then you have something to test -- does the form enforce all the rules.  You'll need at least one TestCase class for each form.  A function will be a scenario -- different combinations of inputs that are allowed or not allowed.</p><br/><br/><p>For each Model class, you'll need at least one TestCase class definition.  TestCases are cheap, define lots of them.  </p><br/><br/><p>Your model embodies your "business entity" definitions.  Your models will have methods that implement business rules.  Your methods will do things like summarize, filter, calculate, aggregate, reduce, all kinds of things.  You'll have functions for each of these features of a model class.</p><br/><br/><p>You're not testing Django.  You're testing how your business rules actually work in Django.</p><br/><br/><p>Later, when you have more stuff in your application (forms, views, urls, etc.) you'll want to use the Django unittest client to exercise each method for each url.  Again, one TestCase per </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE CHILD CLASS OF AN OBJECT IN DJANGO WITHOUT KNOW THE NAME OF THE CHILD CLASS
    </pattern>
    <template>
<![CDATA[<p>(<strong>Update</strong>: The technique described below is available as an <a href="https://github.com/carljm/django-model-utils/blob/master/model_utils/models.py#L14" rel="nofollow">abstract base model class</a> in the <a href="https://github.com/carljm/django-model-utils/" rel="nofollow">django-model-utils</a> project. For Django 1.2 and newer, which can follow select_related queries across reverse OneToOneField relations (and thus down inheritance hierarchies), there's an alternative, <a href="https://github.com/carljm/django-model-utils/blob/master/model_utils/managers.py#L36" rel="nofollow">more efficient technique</a> available which doesn't require the added real_type field on the parent model. The <a href="https://github.com/carljm/django-model-utils/blob/master/README.rst" rel="nofollow">README</a> discusses the advantages and limitations of each approach.)</p><br/><br/><p>The usual way to do this is to add a ForeignKey to ContentType on the Parent model which stores the content type of the proper "leaf" class.  Without this, you may have to do quite a number of queries on child tables to find the instance, depending how large your inheritance tree is.  Here's how I did it in one project:</p><br/><br/><pre><code>from django.contrib.contenttypes.models import ContentType<br/><br/>class InheritanceCastModel(models.Model):<br/>    """<br/>    An abstract base class that provides a ''real_type'' FK to ContentType.<br/><br/>    For use in trees of inherited models, to be able to downcast<br/>    parent instances to their child types.<br/><br/>    """<br/>    real_type = models.ForeignKey(ContentType, editable=False, null=True)<br/><br/>    def save(self, *args, **kwargs):<br/>        if not self.id:<br/>            self.real_type = self._get_real_type()<br/>        super(InheritanceCastModel, self).save(*args, **kwargs)<br/><br/>    def _get_real_type(self):<br/>        return ContentType.objects.get_for_model(type(self))<br/><br/>    def cast(self):<br/>        return self.real_type.get_object_for_this_type(pk=self.pk)<br/><br/>    class Meta:<br/>        abstract = True<br/></code></pre><br/><br/><p>This is implemented as an abstract base class to make it reusable; you could also put these methods and the FK directly onto the parent class in your particular inheritance hierarchy.</p><br/><br/><p>This solution won't work if you aren't able to modify the parent model.  In that case you're pretty much stuck checking all the subclasses manually.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPENID OAUTH LIBRARI TO CONNECT A DJANGO PROJECT TO GOOGL APP ACCOUNT
    </pattern>
    <template>
<![CDATA[<p>I finally got this working, so I'll answer my own question since the previous answers here were helpful but don't tell the whole story.</p><br/><br/><p><a href="https://launchpad.net/django-openid-auth" rel="nofollow">django-openid-auth</a> is actually quite easy to set up and use.  The README file is very clear.  If you just want to use standard google accounts (i.e. @gmail.com addresses) then you configure it in settings.py with:</p><br/><br/><pre><code>OPENID_SSO_SERVER_URL = 'https://www.google.com/accounts/o8/id'<br/></code></pre><br/><br/><p>But if you want to use a "google apps" account, i.e. hosted gmail at your own company's domain, then it's more complicated.  I got my details from <a href="http://stackoverflow.com/questions/2313573/google-apps-login-in-django">this question</a>.  To use your google apps accounts, configure your settings.py to:</p><br/><br/><pre><code>OPENID_SSO_SERVER_URL = 'https://www.google.com/accounts/o8/site-xrds?hd=example.com'<br/># replace example.com with your hosted google apps domain<br/></code></pre><br/><br/><p>In the future this might just work, but today it probably won't.  The problem is in python-openid which django-openid-auth relies on.  The standard build of python-openid doesn't understand some protocol extensions google is using.  (Why does google need to extend the protocol? Dig through <a href="http://groups.google.com/group/google-federated-login-api/web/openid-discovery-for-hosted-domains" rel="nofollow">http://groups.google.com/group/google-federated-login-api/web/openid-discovery-for-hosted-domains</a> and report back. Good luck.)  So you need to instead use adieu's patch to python-openid, which is available here:<br/><a href="http://github.com/adieu/python-openid" rel="nofollow">http://github.com/adieu/python-openid</a></p><br/><br/><p>Install this over your existing python-openid.  Now it should work.  </p><br/><br/><p>Be careful with the <code>OPENID_USE_AS_ADMIN_LOGIN</code> setting since it <em>requires</em> you to have an openid user account which is 'staff' or 'superuser' to use admin which won't happen by default.  So you'll need to do a 2-step process of enabling openid, logging in with your openid to create an account in django, then using your old admin account to mark your own openid account as superuser, and then disabling non-openid admin access.</p><br/><br/><p>One more thing: your domain admin might need to enable openid login for your domain before this will work.  The control is at <a href="http://www.google.com/a/cpanel/example.com/SetupIdp" rel="nofollow">http://www.google.com/a/cpanel/example.com/SetupIdp</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHANG THE DEFAULT WIDGET FOR ALL DJANGO DATE FIELD IN A MODELFORM
    </pattern>
    <template>
<![CDATA[<p>You can declare an attribute on your <code>ModelForm</code> class, called <code>formfield_callback</code>. This should be a function which takes a Django model <code>Field</code> instance as an argument, and returns a form <code>Field</code> instance to represent it in the form.</p><br/><br/><p>Then all you have to do is look to see if the model field passed in is an instance of <code>DateField</code> and, if so, return your custom field/widget. If not, the model field will have a method named <code>formfield</code> that you can call to return its default form field.</p><br/><br/><p>So, something like:</p><br/><br/><pre><code>def make_custom_datefield(f):<br/>    if isinstance(f, models.DateField):<br/>        # return form field with your custom widget here...<br/>    else:<br/>        return f.formfield()<br/><br/>class SomeForm(forms.ModelForm)<br/>    formfield_callback = make_custom_datefield<br/><br/>    class Meta:<br/>        # normal modelform stuff here...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOUR FAVORIT SOLUT FOR MANAG DATABAS MIGRAT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've been using <a href="http://south.aeracode.org/" rel="nofollow">South</a>, but <a href="http://bitbucket.org/DeadWisdom/migratory/" rel="nofollow">Migratory</a> looks promising as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S.PI GET HUGE WHAT IS THE BEST WAY TO BREAK IT UP
    </pattern>
    <template>
<![CDATA[<p>Django is designed to let you build many small applications instead of one big application.</p><br/><br/><p>Inside every large application are many small applications struggling to be free.</p><br/><br/><p>If your <code>models.py</code> feels big, you're doing too much.  Stop.  Relax.  Decompose.</p><br/><br/><p>Find smaller, potentially reusable small application components, or pieces.  You don't have to <em>actually</em> reuse them.  Just think about them as potentially reusable.</p><br/><br/><p>Consider your upgrade paths and decompose applications that you might want to replace some day.  You don't have to <em>actually</em> replace them, but you can consider them as a stand-alone "module" of programming that might get replaced with something cooler in the future.</p><br/><br/><p>We have about a dozen applications, each <code>model.py</code> is no more than about 400 lines of code.  They're all pretty focused on less than about half-dozen discrete class definitions. (These aren't hard limits, they're observations about our code.)</p><br/><br/><p>We decompose early and often.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND VIRTUALENV DEVELOPMENT DEPLOY BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>I just set something like this up at work using pip, Fabric and git.  The flow is basically like this, and borrows heavily from <a href="http://morethanseven.net/2009/07/27/fabric-django-git-apache-mod_wsgi-virtualenv-and-p/" rel="nofollow">this script</a>:</p><br/><br/><ol><br/><li>In our source tree, we maintain a requirements.txt file.  We'll maintain this manually.</li><br/><li>When we do a new release, the Fabric script creates an archive based on whatever treeish we pass it.</li><br/><li>Fabric will find the SHA for what we're deploying with <code>git log -1 --format=format:%h TREEISH</code>.  That gives us <code>SHA_OF_THE_RELEASE</code></li><br/><li>Fabric will get the last SHA for our requirements file with <code>git log -1 --format=format:%h SHA_OF_THE_RELEASE requirements.txt</code>.  This spits out the short version of the hash, like <code>1d02afc</code> which is the SHA for that file for this particular release.</li><br/><li>The Fabric script will then look into a directory where our virtualenvs are stored on the remote host(s).<br/><ol><br/><li>If there is not a directory named <code>1d02afc</code>, a new virtualenv is created and setup with <code>pip install -E /path/to/venv/1d02afc -r /path/to/requirements.txt</code></li><br/><li>If there <em>is</em> an existing <code>path/to/venv/1d02afc</code>, nothing is done</li><br/></ol></li><br/></ol><br/><br/><p>The little magic part of this is passing whatever tree-ish you want to git, and having it do the packaging (from Fabric).  By using <code>git archive my-branch</code>, <code>git archive 1d02afc</code> or whatever else, I'm guaranteed to get the right packages installed on my remote machines.</p><br/><br/><p>I went this route since I really didn't want to have extra virtuenvs floating around if the packages hadn't changed between release.  I also don't like the idea of having the actual packages I depend on in my own source tree.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL FIELD VALID
    </pattern>
    <template>
<![CDATA[<p>Django has a <a href="https://docs.djangoproject.com/en/dev/ref/models/instances/#validating-objects" rel="nofollow">model validation</a> system in place since version 1.2.</p><br/><br/><p>In comments sebpiq says "Ok, now there is a place to put model validation ... except that it is run only when using a ModelForm! So the question remains, when it is necessary to ensure that validation is respected at the db-level, what should you do? Where to call full_clean?"</p><br/><br/><p>It's not possible via Python-level validation to ensure that validation is respected on the db level. The closest is probably to call <code>full_clean</code> in an overridden <code>save</code> method. This isn't done by default, because it means everybody who calls that save method had now better be prepared to catch and handle <code>ValidationError</code>. </p><br/><br/><p>But even if you do this, someone can still update model instances in bulk using <code>queryset.update()</code>, which will bypass this validation. There is no way Django could implement a reasonably-efficient <code>queryset.update()</code> that could still perform Python-level validation on every updated object.</p><br/><br/><p>The only way to really guarantee db-level integrity is through db-level constraints; any validation you do through the ORM requires the writer of app code to be aware of when validation is enforced (and handle validation failures).</p><br/><br/><p>This is why model validation is by default only enforced in <code>ModelForm</code> - because in a ModelForm there is already an obvious way to handle a <code>ValidationError</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE DJANGO S LOGIN REQUIR THE DEFAULT
    </pattern>
    <template>
<![CDATA[<p>Middleware may be your best bet.  I've used this piece of code in the past, modified from a snippet found elsewhere:</p><br/><br/><pre><code>import re<br/><br/>from django.conf import settings<br/>from django.contrib.auth.decorators import login_required<br/><br/>class RequireLoginMiddleware(object):<br/>    """<br/>    Middleware component that wraps the login_required decorator around <br/>    matching URL patterns. To use, add the class to MIDDLEWARE_CLASSES and <br/>    define LOGIN_REQUIRED_URLS and LOGIN_REQUIRED_URLS_EXCEPTIONS in your <br/>    settings.py. For example:<br/>    ------<br/>    LOGIN_REQUIRED_URLS = (<br/>        r'/topsecret/(.*)$',<br/>    )<br/>    LOGIN_REQUIRED_URLS_EXCEPTIONS = (<br/>        r'/topsecret/login(.*)$', <br/>        r'/topsecret/logout(.*)$',<br/>    )<br/>    ------                 <br/>    LOGIN_REQUIRED_URLS is where you define URL patterns; each pattern must <br/>    be a valid regex.     <br/><br/>    LOGIN_REQUIRED_URLS_EXCEPTIONS is, conversely, where you explicitly <br/>    define any exceptions (like login and logout URLs).<br/>    """<br/>    def __init__(self):<br/>        self.required = tuple([re.compile(url) for url in settings.LOGIN_REQUIRED_URLS])<br/>        self.exceptions = tuple([re.compile(url) for url in settings.LOGIN_REQUIRED_URLS_EXCEPTIONS])<br/><br/>    def process_view(self,request,view_func,view_args,view_kwargs):<br/>        # No need to process URLs if user already logged in<br/>        if request.user.is_authenticated(): return None<br/>        # An exception match should immediately return None<br/>        for url in self.exceptions:<br/>            if url.match(request.path): return None<br/>        # Requests matching a restricted URL pattern are returned <br/>        # wrapped with the login_required decorator<br/>        for url in self.required:<br/>            if url.match(request.path): return login_required(view_func)(request,*view_args,**view_kwargs)<br/>        # Explicitly return None for all non-matching requests<br/>        return None<br/></code></pre><br/><br/><p>Then in settings.py, list the base URLs you want to protect:</p><br/><br/><pre><code>LOGIN_REQUIRED_URLS = (<br/>    r'/private_stuff/(.*)$',<br/>    r'/login_required/(.*)$',<br/>)<br/></code></pre><br/><br/><p>As long as your site follows URL conventions for the pages requiring authentication, this model will work.  If this isn't a one-to-one fit, you may choose to modify the middleware to suit your circumstances more closely.</p><br/><br/><p>What I like about this approach - besides removing the necessity of littering the codebase with <code>@login_required</code> decorators - is that if the authentication scheme changes, you have one place to go to make global changes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORKFLOW WHEN MODIFI MODEL FREQUENT
    </pattern>
    <template>
<![CDATA[<p>Steps 2 &amp; 3 can be done in one step:</p><br/><br/><pre><code>manage.py reset appname<br/></code></pre><br/><br/><p>Step 4 is most easily managed, from my understanding, by using <a href="http://www.djangoproject.com/documentation/models/fixtures/" rel="nofollow">fixtures</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL DJANGO MODEL WITH SIMPLEJSON
    </pattern>
    <template>
<![CDATA[<p>I would go with extending <strong>simplejson</strong>. Basically, you want to plug in django's serialization when the JSON encoder encounters a QuerySet. You could use something like:</p><br/><br/><pre><code>from django.core.serializers import serialize<br/>from django.utils.simplejson import dumps, loads, JSONEncoder<br/>from django.db.models.query import QuerySet<br/>from django.utils.functional import curry<br/><br/>class DjangoJSONEncoder(JSONEncoder):<br/>    def default(self, obj):<br/>        if isinstance(obj, QuerySet):<br/>            # 'default' must return a python serializable<br/>            # structure, the easiest way is to load the JSON<br/>            # string produced by 'serialize' and return it<br/>            return loads(serialize('json', obj))<br/>        return JSONEncoder.default(self,obj)<br/><br/># partial function, we can now use dumps(my_dict) instead<br/># of dumps(my_dict, cls=DjangoJSONEncoder)<br/>dumps = curry(dumps, cls=DjangoJSONEncoder)<br/></code></pre><br/><br/><p>For more info on <code>default</code> method, have a look at <a href="http://svn.red-bean.com/bob/simplejson/tags/simplejson-1.3/docs/index.html" rel="nofollow">simplejson documentation</a>. Put that in a python module, then import <code>dumps</code> and you're good to go. But note that this function will only help you serializing <code>QuerySet</code> instances, not <code>Model</code> instances directly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITER OVER MODEL INSTANC FIELD NAME AND VALU IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I've come up with the following method, which works for me because in every case the model will have a ModelForm associated with it.</p><br/><br/><pre><code>def GetModelData(form, fields):<br/>    """<br/>    Extract data from the bound form model instance and return a<br/>    dictionary that is easily usable in templates with the actual<br/>    field verbose name as the label, e.g.<br/><br/>    model_data{"Address line 1": "32 Memory lane",<br/>               "Address line 2": "Brainville",<br/>               "Phone": "0212378492"}<br/><br/>    This way, the template has an ordered list that can be easily<br/>    presented in tabular form.<br/>    """<br/>    model_data = {}<br/>    for field in fields:<br/>        model_data[form[field].label] = eval("form.data.%s" % form[field].name)<br/>    return model_data<br/><br/>@login_required<br/>def clients_view(request, client_id):<br/>    client = Client.objects.get(id=client_id)<br/>    form = AddClientForm(client)<br/><br/>    fields = ("address1", "address2", "address3", "address4",<br/>              "phone", "fax", "mobile", "email")<br/>    model_data = GetModelData(form, fields)<br/><br/>    template_vars = RequestContext(request,<br/>        {<br/>            "client": client,<br/>            "model_data": model_data<br/>        }<br/>    )<br/>    return render_to_response("clients-view.html", template_vars)<br/></code></pre><br/><br/><p>Here is an extract from the template I am using for this particular view:</p><br/><br/><pre><code>&lt;table class="client-view"&gt;<br/>    &lt;tbody&gt;<br/>    {% for field, value in model_data.items %}<br/>        &lt;tr&gt;<br/>            &lt;td class="field-name"&gt;{{ field }}&lt;/td&gt;&lt;td&gt;{{ value }}&lt;/td&gt;<br/>        &lt;/tr&gt;<br/>    {% endfor %}<br/>    &lt;/tbody&gt;<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>The nice thing about this method is that I can choose on a template-by-template basis the order in which I would like to display the field labels, using the tuple passed in to GetModelData and specifying the field names.  This also allows me to exclude certain fields (e.g. a User foreign key) as only the field names passed in via the tuple are built into the final dictionary.</p><br/><br/><p>I'm not going to accept this as the answer because I'm sure someone can come up with something more "Djangonic" :-)</p><br/><br/><p><strong>Update:</strong> I'm choosing this as the final answer because it is the simplest out of those given that does what I need.  Thanks to everyone who contributed answers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S TEST DATABAS ONLI IN MEMORI
    </pattern>
    <template>
<![CDATA[<p>If you set your database engine to sqlite3 when you run your tests, <a href="http://docs.djangoproject.com/en/dev/ref/settings/#test-name">Django will use a in-memory database</a>.</p><br/><br/><p>I'm using code like this to set the engine to sqlite when running my tests:</p><br/><br/><pre><code>if 'test' in sys.argv:<br/>    DATABASE_ENGINE = 'sqlite3'<br/></code></pre><br/><br/><p>Or in Django >= 1.2:</p><br/><br/><pre><code>if 'test' in sys.argv:<br/>    DATABASES['default'] = {'ENGINE': 'sqlite3'}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EST FASTEST SERVER SETUP FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Since i was looking for some more in-depth answers, i decided to research the issue myself in some more depth. Please let me know if i've misunderstood something.</p><br/><br/><p>General recommendation is to use a separate webserver for handling media. Separate means a webserver which is not running django. This server can be for instance:</p><br/><br/><ul><br/><li>Lighttpd (Lighty)</li><br/><li>Nginx (EngineX</li><br/><li>Or some other light-weight server</li><br/></ul><br/><br/><p>Then, for django, you can go down different paths. You can either:</p><br/><br/><ul><br/><li><p>Serve Django via <strong>Apache</strong> and:</p><br/><br/><ul><br/><li><p><strong>mod_python</strong></p><br/><br/><p>This is the stable and recommended/well documented way. Cons: uses a lot of memory.</p></li><br/><li><p><strong>mod_wsgi</strong></p><br/><br/><p>From what i understand, mod_wsgi is a newer alternative. It appears to be faster and easier on resources.</p></li><br/><li><p><strong>mod_fastcgi</strong></p><br/><br/><p>When using FastCGI you are delegating the serving of Django to another process. Since mod_python includes a python interpreter in every request it uses a lot of memory. This is a way to bypass that problem. Also there is some security concerns.</p><br/><br/><p>What you do is that you start your django fastcgi server in a separate process and then configures apache via rewrites to call this process when needed.</p></li><br/></ul></li><br/></ul><br/><br/><p>Or you can:</p><br/><br/><ul><br/><li><p>Serve django <strong>without using Apache</strong> but with another server that supports FastCGI natively:</p><br/><br/><p>(The documentation mentions that you can do this if you don't have any Apache specific needs. I guess the reason must be to save memory.)</p><br/><br/><ul><br/><li><strong>Lighttpd</strong></li><br/></ul><br/><br/><p>This is the server that runs Youtube. It seems fast and easy to use, however i've seen reports on memoryleaks.</p><br/><br/><ul><br/><li><strong>nginx</strong></li><br/></ul><br/><br/><p><p>I've seen benchmarks claiming that this server is even faster than lighttpd. It's mostly documented in russian though.</p></li><br/></ul><br/>Another thing, du to limitations in Python your server should be running in forked mode, note threaded.</p><br/><br/><p>So this is my current research, But i want more opinions and experiences.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNION AND INTERSECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could use Q objects for #1:</p><br/><br/><pre><code># Blogs who have either hockey or django tags.<br/>from django.db.models import Q<br/>Blog.objects.filter(<br/>    Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django')<br/>)<br/></code></pre><br/><br/><p>Unions and intersections, I believe, are a bit outside the scope of the Django ORM, but its possible to to these.  The following examples are from a Django application called called <a href="http://code.google.com/p/django-tagging/" rel="nofollow">django-tagging</a> that provides the functionality. <a href="http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#346" rel="nofollow">Line 346 of models.py</a>: </p><br/><br/><p>For part two, you're looking for a union of two queries, basically</p><br/><br/><pre><code>def get_union_by_model(self, queryset_or_model, tags):<br/>    """<br/>    Create a ''QuerySet'' containing instances of the specified<br/>    model associated with *any* of the given list of tags.<br/>    """<br/>    tags = get_tag_list(tags)<br/>    tag_count = len(tags)<br/>    queryset, model = get_queryset_and_model(queryset_or_model)<br/><br/>    if not tag_count:<br/>        return model._default_manager.none()<br/><br/>    model_table = qn(model._meta.db_table)<br/>    # This query selects the ids of all objects which have any of<br/>    # the given tags.<br/>    query = """<br/>    SELECT %(model_pk)s<br/>    FROM %(model)s, %(tagged_item)s<br/>    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s<br/>      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)<br/>      AND %(model_pk)s = %(tagged_item)s.object_id<br/>    GROUP BY %(model_pk)s""" % {<br/>        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),<br/>        'model': model_table,<br/>        'tagged_item': qn(self.model._meta.db_table),<br/>        'content_type_id': ContentType.objects.get_for_model(model).pk,<br/>        'tag_id_placeholders': ','.join(['%s'] * tag_count),<br/>    }<br/><br/>    cursor = connection.cursor()<br/>    cursor.execute(query, [tag.pk for tag in tags])<br/>    object_ids = [row[0] for row in cursor.fetchall()]<br/>    if len(object_ids) &gt; 0:<br/>        return queryset.filter(pk__in=object_ids)<br/>    else:<br/>        return model._default_manager.none()<br/></code></pre><br/><br/><p>For part #3 I believe you're looking for an intersection. See <a href="http://code.google.com/p/django-tagging/source/browse/trunk/tagging/models.py#307" rel="nofollow">line 307 of models.py</a> </p><br/><br/><pre><code>def get_intersection_by_model(self, queryset_or_model, tags):<br/>    """<br/>    Create a ''QuerySet'' containing instances of the specified<br/>    model associated with *all* of the given list of tags.<br/>    """<br/>    tags = get_tag_list(tags)<br/>    tag_count = len(tags)<br/>    queryset, model = get_queryset_and_model(queryset_or_model)<br/><br/>    if not tag_count:<br/>        return model._default_manager.none()<br/><br/>    model_table = qn(model._meta.db_table)<br/>    # This query selects the ids of all objects which have all the<br/>    # given tags.<br/>    query = """<br/>    SELECT %(model_pk)s<br/>    FROM %(model)s, %(tagged_item)s<br/>    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s<br/>      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)<br/>      AND %(model_pk)s = %(tagged_item)s.object_id<br/>    GROUP BY %(model_pk)s<br/>    HAVING COUNT(%(model_pk)s) = %(tag_count)s""" % {<br/>        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),<br/>        'model': model_table,<br/>        'tagged_item': qn(self.model._meta.db_table),<br/>        'content_type_id': ContentType.objects.get_for_model(model).pk,<br/>        'tag_id_placeholders': ','.join(['%s'] * tag_count),<br/>        'tag_count': tag_count,<br/>    }<br/><br/>    cursor = connection.cursor()<br/>    cursor.execute(query, [tag.pk for tag in tags])<br/>    object_ids = [row[0] for row in cursor.fetchall()]<br/>    if len(object_ids) &gt; 0:<br/>        return queryset.filter(pk__in=object_ids)<br/>    else:<br/>        return model._default_manager.none()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO IS THERE A WAY TO DISPLAY CHOIC AS CHECKBOX
    </pattern>
    <template>
<![CDATA[<p>In terms of the forms library, you would use the <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#multiplechoicefield" rel="nofollow">MultipleChoiceField</a> field with a <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.CheckboxSelectMultiple" rel="nofollow">CheckboxSelectMultiple</a> widget to do that. You could validate the number of choices which were made by writing a validation method for the field:</p><br/><br/><pre><code>class MyForm(forms.Form):<br/>    my_field = forms.MultipleChoiceField(choices=SOME_CHOICES, widget=forms.CheckboxSelectMultiple())<br/><br/>    def clean_my_field(self):<br/>        if len(self.cleaned_data['my_field']) &gt; 3:<br/>            raise forms.ValidationError('Select no more than 3.')<br/>        return self.cleaned_data['my_field']<br/></code></pre><br/><br/><p>To get this in the admin application, you'd need to customise a ModelForm and <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#adding-custom-validation-to-the-admin" rel="nofollow">override the form used in the appropriate ModelAdmin</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DOE ONE FILTER A QUERYSET WITH DYNAM FIELD LOOKUP
    </pattern>
    <template>
<![CDATA[<p>You can use Python's argument expansion to achieve what you're looking for:</p><br/><br/><pre><code>kwargs = {<br/>    '%s__%s' % ('name', 'startswith'): 'A',<br/>    '%s__%s' % ('name', 'endswith'): 'Z'<br/>}<br/><br/>Person.objects.filter(**kwargs)<br/></code></pre><br/><br/><p>This is a common pattern used with Python, and a very useful one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CART OR SATCHMO
    </pattern>
    <template>
<![CDATA[<p>Well if you want to use django-cart you should view it as a starting point for developing your own.  The last commit (r4) for the project was November 2006.</p><br/><br/><p>By comparison, the last commit (r1922) to Satchmo was a couple of hours ago.</p><br/><br/><p>With Satchmo you get code that is under active development and actually used by real e-commerce sites.</p><br/><br/><p>If you develop your own you're running the risk of alienating customers and losing money.  If you use Satchmo you can spend more time developing/improving other areas of your site.</p><br/><br/><p>I bet you can already guess my recommendation :)</p><br/><br/><p>As for the apps and other stuff in Satchmo I can tell you, from personal experience, that you don't need to include them all in your INSTALLED_APPS setting.  I don't remember exactly what I pared it down to, but there were only around 6-7 Satchmo apps in my INSTALLED_APPS and they were all ones I needed.  I think they've done even more modularization since then.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSIST DATABAS CONNECT
    </pattern>
    <template>
<![CDATA[<p>I made some small custom psycopg2 backend that implements persistent connection using global variable.<br/>With this I was able to improve the amout of requests per second from 350 to 1600 (on very simple page with few selects)<br/>Just save it in the file  called <code>base.py</code> in any directory (e.g. postgresql_psycopg2_persistent) and set in settings</p><br/><br/><p>DATABASE_ENGINE to projectname.postgresql_psycopg2_persistent</p><br/><br/><p><strong>NOTE!!! the code is not threadsafe - you can't use it with python threads because of unexpectable results, in case of mod_wsgi please use prefork daemon mode with threads=1</strong></p><br/><br/><hr><br/><br/><pre><code># Custom DB backend postgresql_psycopg2 based<br/># implements persistent database connection using global variable<br/><br/>from django.db.backends.postgresql_psycopg2.base import DatabaseError, DatabaseWrapper as BaseDatabaseWrapper, \<br/>    IntegrityError<br/>from psycopg2 import OperationalError<br/><br/>connection = None<br/><br/>class DatabaseWrapper(BaseDatabaseWrapper):<br/>    def _cursor(self, *args, **kwargs):<br/>        global connection<br/>        if connection is not None and self.connection is None:<br/>            try: # Check if connection is alive<br/>                connection.cursor().execute('SELECT 1')<br/>            except OperationalError: # The connection is not working, need reconnect<br/>                connection = None<br/>            else:<br/>                self.connection = connection<br/>        cursor = super(DatabaseWrapper, self)._cursor(*args, **kwargs)<br/>        if connection is None and self.connection is not None:<br/>            connection = self.connection<br/>        return cursor<br/><br/>    def close(self):<br/>        if self.connection is not None:<br/>            self.connection.commit()<br/>            self.connection = None<br/></code></pre><br/><br/><hr><br/><br/><p>Or here is a thread safe one, but python threads don't use multiple cores, so you won't get such performance boost as with previous one. You can use this one with multi process one too.</p><br/><br/><pre><code># Custom DB backend postgresql_psycopg2 based<br/># implements persistent database connection using thread local storage<br/>from threading import local<br/><br/>from django.db.backends.postgresql_psycopg2.base import DatabaseError, \<br/>    DatabaseWrapper as BaseDatabaseWrapper, IntegrityError<br/>from psycopg2 import OperationalError<br/><br/>threadlocal = local()<br/><br/>class DatabaseWrapper(BaseDatabaseWrapper):<br/>    def _cursor(self, *args, **kwargs):<br/>        if hasattr(threadlocal, 'connection') and threadlocal.connection is \<br/>            not None and self.connection is None:<br/>            try: # Check if connection is alive<br/>                threadlocal.connection.cursor().execute('SELECT 1')<br/>            except OperationalError: # The connection is not working, need reconnect<br/>                threadlocal.connection = None<br/>            else:<br/>                self.connection = threadlocal.connection<br/>        cursor = super(DatabaseWrapper, self)._cursor(*args, **kwargs)<br/>        if (not hasattr(threadlocal, 'connection') or threadlocal.connection \<br/>             is None) and self.connection is not None:<br/>            threadlocal.connection = self.connection<br/>        return cursor<br/><br/>    def close(self):<br/>        if self.connection is not None:<br/>            self.connection.commit()<br/>            self.connection = None<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON API SHOULD BE USE WITH MONGO DB AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>As Mike says, you can't avoid PyMongo - all the other interfaces build on top of it. These other interfaces are arguably unnecessary. ORMs such as that used in Django are useful when dealing with SQL because they mitigate the complexity of creating SQL queries and schemas, and parsing result sets into objects.</p><br/><br/><p>PyMongo however already has that covered - queries go through a convenient and simple API and results coming from MongoDB already are objects (well, dicts in Python - same difference) by definition. If you feel that you really need to decorate your Mongo documents with Python objects, it's easy to add a SON manipulator to PyMongo. The nice thing about this approach is that you can write code directly on PyMongo, and slide in additional functionality later on without having to insert a new API between your code and PyMongo.</p><br/><br/><p>What's left? Schema creation and migration are somewhat useful, but are almost as simply done ad-hoc - chances are if you're considering using MongoDB you want to break out of the traditional SQL-style model anyway. Also, if there were a fully Django-compatible MongoDB ORM you might get some mileage out of it. Anything less than that and you will probably be creating work for yourself.</p><br/><br/><p>You won't regret using PyMongo directly.</p><br/><br/><p>One last option worth watching if you are interested in top efficiency is the asynchronous version of PyMongo, here: <a href="http://github.com/fiorix/mongo-async-python-driver" rel="nofollow">http://github.com/fiorix/mongo-async-python-driver</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUT DJANGO STARTUP CODE
    </pattern>
    <template>
<![CDATA[<p>Write middleware that does this in <code>__init__</code> and afterwards raise <code>django.core.exceptions.MiddlewareNotUsed</code> from the <code>__init__</code>, django will remove it for all requests :). <code>__init__</code> is called at startup by the way, not at the first request, so it won't block your first user.</p><br/><br/><p>There is talk about adding a startup signal, but that won't be available soon (a major problem for example is when this signal should be sent)</p><br/><br/><p>Related Ticket: <a href="https://code.djangoproject.com/ticket/13024">https://code.djangoproject.com/ticket/13024</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV DYNAM GENER ZIP ARCHIV IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The solution is as follows.</p><br/><br/><p>Use Python module <a href="http://docs.python.org/lib/module-zipfile.html" rel="nofollow">zipfile</a> to create zip archive, but as the file specify <a href="http://docs.python.org/lib/module-StringIO.html" rel="nofollow">StringIO</a> object (ZipFile constructor requires file-like object). Add files you want to compress. Then in your Django application return the content of StringIO object in <code>HttpResponse</code> with mimetype set to <code>application/x-zip-compressed</code> (or at least <code>application/octet-stream</code>). If you want, you can set <code>content-disposition</code> header, but this should not be really required.</p><br/><br/><p>But beware, creating zip archives on each request is bad idea and this may kill your server (not counting timeouts if the archives are large). Performance-wise approach is to cache generated output somewhere in filesystem and regenerate it only if source files have changed. Even better idea is to prepare archives in advance (eg. by cron job) and have your web server serving them as usual statics.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAGIC
    </pattern>
    <template>
<![CDATA[<p>Well, consider a couple bits of Rails "magic": when you write a controller class, its methods have access to certain variables and certain other classes. But these variables and classes were neither defined nor imported by anything in the file of Ruby code you're looking at; Rails has done a lot of work behind the scenes to ensure they'll just be there automatically. And when you return something from a controller method, Rails makes sure the result is passed along to the appropriate template; you don't have to write any code to tell it which template to use, where to find it, etc., etc.</p><br/><br/><p>In other words, it's as if these things happen by "magic"; you don't have to lift a finger, they just happen for you.</p><br/><br/><p>By contrast, when you write a Django view, you have to import or define anything you plan to use, and you have to tell it, explicitly, which template to use and what values the template should be able to access.</p><br/><br/><p>Rails' developers are of the opinion that this sort of "magic" is a good thing because it makes it easier to quickly get something working, and doesn't bore you with lots of details unless you want to reach in and start overriding things.</p><br/><br/><p>Django's developers are of the opinion that this sort of "magic" is a bad thing because doesn't really save all that much time (a few <code>import</code> statements isn't a big deal in the grand scheme of things), and has the effect of hiding what's really going on, making it harder to work out how to override stuff, or harder to debug if something goes wrong.</p><br/><br/><p>Both of these are, of course, valid stances to take, and generally it seems that people just naturally gravitate to one or the other; those who like the "magic" congregate around Rails or frameworks which try to emulate it, those who don't congregate around Django or frameworks which try to emulate it (and, in a broader sense, these stances are somewhat stereotypical of Ruby and Python developers; Ruby developers tend to like doing things one way, Python developers tend to like doing things another way).</p><br/><br/><p>In the long run, it probably doesn't make a huge difference for the factor you say you're concerned with -- billable hours -- so let your developer choose whatever he or she is most comfortable with, since that's more likely to get useful results for <em>you</em>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .GETJSON DOE N T TRIGGER CALLBACK
    </pattern>
    <template>
<![CDATA[<p>It is likely that the json is not properly formed.  Sometimes this happens to me when my code, that should be producing json is generating an error.  Two options:</p><br/><br/><ul><br/><li><p>Use firebug to view the JSON response</p></li><br/><li><p>Setup error handling in your jquery code using the jQuery.ajaxSetup options such as:</p><br/><br/><pre><code>  $.ajaxSetup({"error":function(XMLHttpRequest,textStatus, errorThrown) {   <br/>      alert(textStatus);<br/>      alert(errorThrown);<br/>      alert(XMLHttpRequest.responseText);<br/>  }});<br/></code></pre></li><br/></ul><br/><br/><p>Using the error handling for debugging is great, since you will know immediately when there is a problem with your response. You can check out the <a href="http://docs.jquery.com/Ajax/jQuery.ajax" rel="nofollow">jQuery documentation for jQuery.ajax</a> which has all of the available options for jQuery.ajaxSetup.</p><br/><br/><p>EDIT: A third option would be to just open the URL that should be generating the JSON and run the output through <a href="http://www.jsonlint.com/" rel="nofollow">JSON Lint</a> to validate it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS POSTGRESQL WHICH SHOULD I CHOOS FOR MY DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>As someone who recently switched a project from MySQL to Postgresql I don't regret the switch.</p><br/><br/><p>The main difference, from a Django point of view, is more rigorous constraint checking in Postgresql, which is a good thing, and also it's a bit more tedious to do manual schema changes (aka migrations).</p><br/><br/><p>There are probably 6 or so Django database migration applications out there and at least one doesn't support Postgresql.  I don't consider this a disadvantage though because you can use one of the others or do them manually (which is what I prefer atm).</p><br/><br/><p>Full text search <em>might</em> be better supported for MySQL.  MySQL has built-in full text search supported from within Django but it's pretty useless (no word stemming, phrase searching, etc.).  I've used <a href="http://code.google.com/p/django-sphinx/" rel="nofollow">django-sphinx</a> as a better option for full text searching in MySQL.</p><br/><br/><p>Full text searching is built-in with Postgresql 8.3 (earlier versions need TSearch module). Here's a good instructional blog post: <a href="http://www.rossp.org/blog/2009/jan/28/django-postgresql-fulltext/" rel="nofollow">Full-text searching in Django with PostgreSQL and tsearch2</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO A GOOD CHOIC FOR A SECUR CRITIC APPLIC
    </pattern>
    <template>
<![CDATA[<p>Actually, the security in Java and Python is the same.  Digest-only password handling, cookies that timeout rapidly, careful deletion of sessions, multi-factor authentication.  None of this is unique to a Java framework or a Python framework like Django.</p><br/><br/><p>Django, indeed, has a security backend architecture that allows you to add your own LDAP (or AD) connection, possibly changing the digest technique used.  </p><br/><br/><p>Django has a Profile model where you can keep additional authentication factors.</p><br/><br/><p>Django offers a few standard decorators for view function authorization checking.  Since Python is so flexible, you can trivially write your own decorator functions to layer in different or additional authentication checking.</p><br/><br/><p>Security is a number of first-class features in Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR RUBY ON RAIL
    </pattern>
    <template>
<![CDATA[<p>My best answer is for you to learn both.</p><br/><br/><p>Consider this your end goal, and instead consider your question as, "Which one should I learn first?"</p><br/><br/><p>I recommend that you start with Django, especially if you have Python experience. Django's approach, like that of Python itself, is more condusive to learning. Once you've gotten your feet wet, learn Ruby on Rails, because that's the framework that will net you easier cash when you get out into the modern Web 2.0 workforce.</p><br/><br/><p>Once you're thoroughly familiar with Ruby on Rails and have been working for a bit, continue learning Django. Refamiliarize yourself with the basics, then start to learn some of the more advanced stuff. Django's inner guts are supposedly easier to dissect than that of Rails. If you ever find yourself faced with a job opening with a surprisingly novel and challenging web platform to implement, you'll find your Django knowledge quite handy.</p><br/><br/><p>Here's a bulletized rundown:</p><br/><br/><h2>Django</h2><br/><br/><ul><br/><li>Great documentation</li><br/><li>Thorough tutorial to ease you in</li><br/><li>Fewer files to understand at first (vs. scaffolding in Rails)</li><br/><li>Built on Python, which you might as well know anyway</li><br/><li>More similar to enterprise stuff like Java Servlets/JSP</li><br/><li>Easier to dig into its innards</li><br/></ul><br/><br/><h2>Ruby on Rails</h2><br/><br/><ul><br/><li>It's what's hot</li><br/><li>Hot means more jobs</li><br/><li>You want money, don't you?</li><br/><li>When you want to make a "traditional" web 2.0 site, its generated code lets you get done really fast</li><br/><li>Integration with JavaScript libraries</li><br/><li>Built on Ruby, which you might as well know anyway</li><br/></ul><br/><br/><p><strong>Verdict</strong>: Django first (do the tutorial), then Rails, then Django again</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OF PHP S FORM VALU ARRAY ASSOCI ARRAY
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/ref/request-response/#querydict-objects" rel="nofollow">Check out the QueryDict documentation</a>, particularly the usage of <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" rel="nofollow"><code>QueryDict.getlist(key)</code></a>.</p><br/><br/><p>Since request.POST and request.GET in the view are instances of QueryDict, you could do this:</p><br/><br/><pre><code>&lt;form action='/my/path/' method='POST'&gt;<br/>&lt;input type='text' name='hi' value='heya1'&gt;<br/>&lt;input type='text' name='hi' value='heya2'&gt;<br/>&lt;input type='submit' value='Go'&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Then something like this:</p><br/><br/><pre><code>def mypath(request):<br/>    if request.method == 'POST':<br/>        greetings = request.POST.getlist('hi') # will be ['heya1','heya2']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI ELEMENT IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>To echo / extend upon Jeff's comment, what I think you should aim for is simply a property in your Choice class that calculates the number of votes associated with that object: </p><br/><br/><pre><code>    class Choice(models.Model):<br/>        text = models.CharField(max_length=200)	<br/><br/>    def calculateVotes(self):<br/>            return Vote.objects.filter(choice = self).count()<br/><br/>    votes = property(calculateVotes)<br/></code></pre><br/><br/><p>And then in your template, you can do:</p><br/><br/><pre><code>    {% for choice in choices %}<br/>            {{choice.choice}} - {{choice.votes}} &lt;br /&gt;<br/>    {% endfor %}<br/></code></pre><br/><br/><p>The template tag, is IMHO a bit overkill for this solution, but it's not a terrible solution either. The goal of templates in Django is to insulate you from code in your templates and vice-versa. </p><br/><br/><p>I'd try the above method and see what SQL the ORM generates as I'm not sure off the top of my head if it will pre-cache the properties and just create a subselect for the property or if it will iteratively / on-demand run the query to calculate vote count. But if it generates atrocious queries, you could always populate the property in your view with data you've collected yourself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETUP OF PYTHON LOG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The best way I've found so far is to initialize logging setup in settings.py - nowhere else. You can either use a configuration file or do it programmatically step-by-step - it just depends on your requirements. The key thing is that I usually add the handlers I want to the root logger, using levels and sometimes logging.Filters to get the events I want to the appropriate files, console, syslogs etc. You can of course add handlers to any other loggers too, but there isn't commonly a need for this in my experience.</p><br/><br/><p>In each module, I define a logger using</p><br/><br/><pre><code>logger = logging.getLogger(__name__)<br/></code></pre><br/><br/><p>and use that for logging events in the module (and, if I want to differentiate further) use a logger which is a child of the logger created above.</p><br/><br/><p>If my app is going to be potentially used in a site which doesn't configure logging in settings.py, I define a NullHandler somewhere as follows:</p><br/><br/><pre><code>#someutils.py<br/><br/>class NullHandler(logging.Handler):<br/>    def emit(self, record):<br/>        pass<br/><br/>null_handler = NullHandler()<br/></code></pre><br/><br/><p>and ensure that an instance of it is added to all loggers created in the modules in my apps which use logging. (Note: NullHandler is already in the logging package for Python 3.1, and will be in Python 2.7.) So:</p><br/><br/><pre><code>logger = logging.getLogger(__name__)<br/>logger.addHandler(someutils.null_handler)<br/></code></pre><br/><br/><p>This is done to ensure that your modules play nicely in a site which doesn't configure logging in settings.py, and that you don't get any annoying "No handlers could be found for logger X.Y.Z" messages (which are warnings about potentially misconfigured logging).</p><br/><br/><p>Doing it this way meets your stated requirements:</p><br/><br/><ul><br/><li>You can set up different log handlers for different events, as you currently do.</li><br/><li>Easy access to loggers in your modules - use <code>getLogger(__name__)</code>.</li><br/><li>Easily applicable to command-line modules - they also import <code>settings.py</code>.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MRO ( ) DO IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Follow along...:</p><br/><br/><pre><code>&gt;&gt;&gt; class A(object): pass<br/>... <br/>&gt;&gt;&gt; A.__mro__<br/>(&lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)<br/>&gt;&gt;&gt; class B(A): pass<br/>... <br/>&gt;&gt;&gt; B.__mro__<br/>(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)<br/>&gt;&gt;&gt; class C(A): pass<br/>... <br/>&gt;&gt;&gt; C.__mro__<br/>(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)<br/>&gt;&gt;&gt; <br/></code></pre><br/><br/><p>As long as we have single inheritance, <code>__mro__</code> is just the tuple of: the class, its base, its base's base, and so on up to <code>object</code> (only works for new-style classes of course).</p><br/><br/><p>Now, with <em>multiple</em> inheritance...:</p><br/><br/><pre><code>&gt;&gt;&gt; class D(B, C): pass<br/>... <br/>&gt;&gt;&gt; D.__mro__<br/>(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)<br/></code></pre><br/><br/><p>...you also get the assurance that, in <code>__mro__</code>, no class is duplicated, and no class comes after its ancestors, save that classes that first enter at the same level of multiple inheritance (like B and C in this example) are in the <code>__mro__</code> left to right.</p><br/><br/><p>Every attribute you get on a class's instance, not just methods, is conceptually looked up along the <code>__mro__</code>, so, if more than one class among the ancestors defines that name, this tells you where the attribute will be found -- in the first class in the <code>__mro__</code> that defines that name.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL FROM A DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>You print the queryset's <code>query</code> attribute.</p><br/><br/><pre><code>&gt;&gt;&gt; queryset = MyModel.objects.all()<br/>&gt;&gt;&gt; print queryset.query<br/>SELECT "myapp_mymodel"."id", ... FROM "myapp_mymodel"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST DJANGO MESSAG
    </pattern>
    <template>
<![CDATA[<p>I did an experiment to test this. I changed the <code>MESSAGE_STORAGE</code> setting in one of my projects to <code>'django.contrib.messages.storage.cookie.CookieStorage'</code> and executed a test that I had written to check for messages. It worked. </p><br/><br/><p>The key difference from what you were doing is the way I retrieved messages. See below:</p><br/><br/><pre><code>def test_message_sending(self):<br/>    data = dict(...)<br/>    response = self.client.post(reverse('my_view'), data)<br/>    messages = self.user.get_and_delete_messages()<br/><br/>    self.assertTrue(messages)<br/>    self.assertEqual('Hey there!', messages[0])<br/></code></pre><br/><br/><p>This <em>may</em> be worth a try.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PACKAG AND SELL A DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Don't try and obfuscate or encrypt the code - it will never work.</p><br/><br/><p>I would suggest selling the Django application "as a service" - either host it for them, or sell them the code <em>and support</em>. Write up a contract that forbids them from redistributing it.</p><br/><br/><p>That said, if you were determined to obfuscate the code in some way - you can distribute python applications entirely as .pyc (Python compiled byte-code).. It's how Py2App works.</p><br/><br/><p>It will still be re-distributable, <em>but</em> it will be very difficult to edit the files - so you could add some basic licensing stuff, and not have it foiled by a few <code>#</code>s..</p><br/><br/><p>As I said, I don't think you'll succeed in anti-piracy via encryption or obfuscation etc.. Depending on your clients, a simple contract, and maybe some really basic checks will go a long much further than some complicated decryption system (And make the experience of using your application <em>better</em>, instead of <em>hopefully not any worse</em>)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO CREAT A MODEL DYNAM JUST FOR TEST
    </pattern>
    <template>
<![CDATA[<p>(<strong>NOTE</strong>: The method described here only works in Django 1.1+ if your test case subclasses TransactionTestCase. Since this will slow your tests considerably, I don't recommend it. Instead, place your models in tests/models.py as described below, and provide a test-running script (<a href="http://github.com/carljm/django-model-utils/blob/master/model_utils/tests/runtests.py" rel="nofollow">example</a>) that just includes that tests/ "app" in INSTALLED_APPS from the beginning. Yes, this doesn't work when running app tests from a project, but I rarely find that useful for reusable apps anyway.)</p><br/><br/><p>You can put your tests in a tests/ subdirectory of the app (rather than a tests.py file), and include a tests/models.py with the test-only models.  At the beginning of your tests (i.e. in a setUp method, or at the beginning of a set of doctests), you'll need to dynamically add "myapp.tests" to the INSTALLED_APPS setting, and then do this:</p><br/><br/><pre><code>from django.core.management import call_command<br/>from django.db.models import loading<br/>loading.cache.loaded = False<br/>call_command('syncdb', verbosity=0)<br/></code></pre><br/><br/><p>Then at the end of your tests, you should clean up by restoring the old version of INSTALLED_APPS and clearing the app cache again.</p><br/><br/><p><a href="http://www.djangosnippets.org/snippets/1011/" rel="nofollow">This class</a> encapsulates the pattern so it doesn't clutter up your test code quite as much.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUID IN ORGAN LARG DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Each "application" should be small -- a single reusable entity plus a few associated tables.  We have about 5 plus/minus 2 tables per application model.  Most of our half-dozen applications are smaller than 5 tables.  One has zero tables in the model.  </p><br/><br/><p>Each application should be designed to be one reusable concept.  In our case, each application is a piece of the overall site; the applications could be removed and replaced separately.</p><br/><br/><p>Indeed, that's our strategy.  As our requirements expand and mature, we can remove and replace applications independently from each other.</p><br/><br/><p>It's okay to have applications depend on each other.  However, the dependency has to be limited to the obvious things like "models" and "forms".  Also, applications can depend on the names in each other's URL's.  Consequently, your named URL's must have a form like "application-view" so the <code>reverse</code> function or the <code>{% url %}</code> tag can find them properly.</p><br/><br/><p>Each application should contain it's own batch commands (usually via a formal Command that can be found by the <code>django-admin</code> script.</p><br/><br/><p>Finally, anything that's more complex than a simple model or form that's shared probably doesn't belong to either application, but needs to be a separate shared library.  For example, we use <a href="http://www.lexicon.net/sjmachin/xlrd.htm" rel="nofollow">XLRD</a>, but wrap parts of it in our own class so it's more like the built-in <code>csv</code> module.  This wrapper for XLRD isn't a proper part of any one application, to it's a separate module, outside the Django applications.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU FOR FIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Set <code>editable</code> to <code>False</code> and <code>default</code> to your default value.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#editable" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/fields/#editable</a></p><br/><br/><pre><code>b = models.CharField(max_length=7, default='0000000', editable=False)<br/></code></pre><br/><br/><p>Also, your <code>id</code> field is unnecessary.  Django will add it automatically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RELOAD A DJANGO MODEL MODUL USE THE INTERACT INTERPRET VIA MANAGE.PI SHELL
    </pattern>
    <template>
<![CDATA[<p>Well, I think I have to answer to this. The problem is that Django caches its models in a singleton (singleton like structure) called AppCache. Basically, to reload Django models you need to first reload and re-import all the model modules stored in the AppCache. Then you need to wipe out the AppCache. Here's the code for it:</p><br/><br/><pre><code>from django.db.models.loading import AppCache<br/>cache = AppCache()<br/><br/>for app in cache.get_apps():<br/>    __import__(app.__name__)<br/>    reload(app)<br/><br/>from django.utils.datastructures import SortedDict<br/>cache.app_store = SortedDict()<br/>cache.app_models = SortedDict()<br/>cache.app_errors = {}<br/>cache.handled = {}<br/>cache.loaded = False<br/></code></pre><br/><br/><p>I've put all of this in a separate file called reloadmodels.py in the root directory of my Django site. Using IPython I can reload everything by running:</p><br/><br/><pre><code>%run ~/mysite/reloadmodels.py<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've created and used my own generic view classes, defining <strong><code>__call__</code></strong> so an instance of the class is callable.  I really like it; while Django's generic views allow some customization through keyword arguments, OO generic views (if their behavior is split into a number of separate methods) can have much more fine-grained customization via subclassing, which lets me repeat myself a lot less.  (I get tired of rewriting the same create/update view logic anytime I need to tweak something Django's generic views don't quite allow).</p><br/><br/><p>I've posted some code at <a href="http://www.djangosnippets.org/snippets/1009/" rel="nofollow">djangosnippets.org</a>.</p><br/><br/><p>The only real downside I see is the proliferation of internal method calls, which may impact performance somewhat. I don't think this is much of a concern; it's rare that Python code execution would be your performance bottleneck in a web app.</p><br/><br/><p><strong>UPDATE</strong>: Django's own <a href="http://docs.djangoproject.com/en/dev/topics/class-based-views/" rel="nofollow">generic views</a> are now class-based.</p><br/><br/><p><strong>UPDATE</strong>: FWIW, I've changed my opinion on class-based views since this answer was written. After having used them extensively on a couple of projects, I feel they tend to lead to code that is satisfyingly DRY to write, but very hard to read and maintain later, because functionality is spread across so many different places, and subclasses are so dependent on every implementation detail of the superclasses and mixins. I now feel that <a href="https://docs.djangoproject.com/en/dev/ref/template-response/" rel="nofollow">TemplateResponse</a> and view decorators is a better answer for decomposing view code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO REST INTERFAC
    </pattern>
    <template>
<![CDATA[<p>I would look into using django-piston <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">http://bitbucket.org/jespern/django-piston/wiki/Home</a> application if security is your main concern. </p><br/><br/><p>I have used django-rest-interface in the past, its reliable and though simple can be quite powerful, however django-piston seems more flexible going forward.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON OBJECT USE A DJANGO TEMPLAT AFTER AN AJAX CALL
    </pattern>
    <template>
<![CDATA[<p>Hey thanks vikingosegundo! </p><br/><br/><p>I like using decorators too :-).<br/>But in the meanwhile I've been following the approach suggested by the snippet I was mentioning above. Only thing, use instead <a href="http://www.djangosnippets.org/snippets/942/" rel="nofollow">the snippet n. 942</a> cause it's an improved version of the original one. Here's how it works:</p><br/><br/><p>Imagine you have a template (e.g., 'subtemplate.html') of whatever size that contains a useful block you can reuse:</p><br/><br/><pre><code>     ........<br/>	&lt;div id="results"&gt;			<br/>		{% block results %}<br/>			{% for el in items %}<br/>		           &lt;li&gt;{{el|capfirst}}&lt;/li&gt;<br/>			{% endfor %}<br/>		{% endblock %}		<br/>	&lt;/div&gt;&lt;br /&gt;<br/>     ........<br/></code></pre><br/><br/><p>By importing in your view file the snippet above you can easily reference to any block in your templates. A cool feature is that the inheritance relations among templates are taken into consideration, so if you reference to a block that includes another block and so on, everything should work just fine. So, the ajax-view looks like this: </p><br/><br/><pre><code>from django.template import loader<br/># downloaded from djangosnippets.com[942]<br/>from my_project.snippets.template import render_block_to_string<br/><br/>def ajax_view(request):<br/>    # some random context<br/>    context = Context({'items': range(100)})<br/>    # passing the template_name + block_name + context<br/>    return_str = render_block_to_string('standard/subtemplate.html', 'results', context)<br/>    return HttpResponse(return_str)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL WITH FOREIGNKEY WHICH DOE NOT CASCAD DELET TO IT CHILDREN
    </pattern>
    <template>
<![CDATA[<p>Harold's answer pointed me in the right direction. This is a sketch on the way I implemented it (on a french legacy database, hence the slightly odd naming convention):</p><br/><br/><pre><code>class Factures(models.Model):<br/>    idFacture = models.IntegerField(primary_key=True)<br/>    idLettrage = models.ForeignKey('Lettrage', db_column='idLettrage', null=True, blank=True)<br/><br/>class Paiements(models.Model):<br/>    idPaiement = models.IntegerField(primary_key=True)<br/>    idLettrage = models.ForeignKey('Lettrage', db_column='idLettrage', null=True, blank=True)<br/><br/>class Lettrage(models.Model):<br/>    idLettrage = models.IntegerField(primary_key=True)<br/><br/>    def delete(self):<br/>        """Dettaches factures and paiements from current lettre before deleting"""<br/>        self.factures_set.clear()<br/>        self.paiements_set.clear()<br/>        super(Lettrage, self).delete()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVINC MY BOSS TO USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Why do you <em>have</em> to convince your boss to use Django?</p><br/><br/><p>Your boss should understand that it's in his best interest to work in what the people he'll be employing know best. </p><br/><br/><p>But, how can you tell that Django is really the best suit all things considered? </p><br/><br/><p>For example:</p><br/><br/><ul><br/><li>Are the servers in-house? do the sysadmins know how to maintain servers for Django? </li><br/><li>Are the servers in a webhost, do you know how much does it cost to have a Django webhost versus a PHP one?</li><br/><li>Are the rest of the team familiarized with Django/Python? If you are a one man team, what if your boss wants to make the team bigger, will he be able to? At what cost? PHP devs abound.</li><br/><li>Given the PHP framework of choice, can you honestly give some criteria that will translate to dollars (or whatever your currency is) giving Django the advantage? Say, time to market, or some features that will be used and come for free in Django but not in the other alternative? Don't forget that if you are a good programmer you can create good programs in any language.</li><br/></ul><br/><br/><p>This are just some things you have to consider before presenting with your boss with a "PHP sucks, let's use Python instead" speech. I understand the feeling but it really might not make sense in the long run in certain cases. If, after all these things are answered (and some more), you can still present a good case for Django, then you should do so. Just don't do what sounds to a business man like fanboy speech.</p><br/><br/><p>UPDATE: If the only thing stopping you from doing in Django is your boss' fear <strong>and you both know that you can make it work at a comparable cost in infrastructure</strong>, then the only way to alleviate that fear is to jump in and do something like it. You might get authorization for a prototype, for example. No amount of talking will relieve him from his fear, he'll need to see something. You should also tutor him (if possible) on how Python works while you go at it, so he can appreciate the beauty of the beast.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CA IMPLEMENT TO USE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've been using an older version of django-cas for a long time now, and it works as expected. I've never used django-cas-consumer, but I've looked into it.</p><br/><br/><p>Comparing the code between the two projects, it looks like django-cas-consumer is a stripped-down version of django-cas.</p><br/><br/><p>The two most glaring differences are:</p><br/><br/><ul><br/><li>django-cas-consumer only supports CAS version 1</li><br/><li>django-cas has middleware that captures any requests to the django.contrib.auth.views.login and logout and redirects them to the CAS login and logout views</li><br/></ul><br/><br/><p>Also, if you are using Apache, you can consider using <a href="https://wiki.jasig.org/display/CASC/mod_auth_cas" rel="nofollow">mod_auth_cas</a>, which is an official CAS client. Then you can simply use django's <a href="https://docs.djangoproject.com/en/1.3/howto/auth-remote-user/" rel="nofollow">remote user authentication</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DRI URL IN DJANGO JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>The most reasonable solution seems to be passing a list of URLs in a JavaScript file, and having a JavaScript equivalent of reverse() available on the client. The only objection might be that the entire URL structure is exposed. </p><br/><br/><p>Here is such a <a href="https://github.com/mlouro/django-js-utils" rel="nofollow">function</a> (from this <a href="http://stackoverflow.com/questions/1795701/django-reverse-for-javascript">question</a>).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OAUTH FOR GOOGL API EXAMPL USE PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>I have OAuth working in a python App Engine app:</p><br/><br/><p><a href="http://github.com/sje397/Chess" rel="nofollow">http://github.com/sje397/Chess</a></p><br/><br/><p>The app is running at:</p><br/><br/><p><a href="http://your-move.appspot.com" rel="nofollow">http://your-move.appspot.com</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STREAM AN HTTPRESPONS WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can disable the ETAG middleware using the <a href="http://docs.djangoproject.com/en/1.2/topics/conditional-view-processing/" rel="nofollow">condition decorator</a>.  That will get your response to stream back over HTTP.  You can confirm this with a command-line tool like <code>curl</code>.  But it probably won't be enough to get your browser to show the response as it streams.  To encourage the browser to show the response as it streams, you can push a bunch of whitespace down the pipe to force its buffers to fill.  Example follows:</p><br/><br/><pre><code>from django.views.decorators.http import condition<br/><br/>@condition(etag_func=None)<br/>def stream_response(request):<br/>    resp = HttpResponse( stream_response_generator(), mimetype='text/html')<br/>    return resp<br/><br/>def stream_response_generator():<br/>    yield "&lt;html&gt;&lt;body&gt;\n"<br/>    for x in range(1,11):<br/>        yield "&lt;div&gt;%s&lt;/div&gt;\n" % x<br/>        yield " " * 1024  # Encourage browser to render incrementally<br/>        time.sleep(1)<br/>    yield "&lt;/body&gt;&lt;/html&gt;\n"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAML WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong>Question 1</strong>: static HTML files should work finely (unless you plan to use HAML's ruby evaluation feature to dynamically content). I use a similar way on a php website with SASS stylesheets. Just make sure you start HAML in directory watch mode before starting to hack ;)</p><br/><br/><p><strong>Question 2</strong>: while forking a ruby process to create HTML code is possible, but I don't recommend it you, because initializing a ruby interpreter, and loading required files takes a lot of cpu times, so you better stick with static files. If you need the ruby evaluation feature to include runtime created data into the document, you'd better have a look at eventmachine, and make it a server (so your Django application can connect to it, and request HTML generation, without forking a new interpreter each time).</p><br/><br/><p><strong>Question 3</strong>: maybe this is the hardest. There's GHRML which is abandoned; SHPAML which only implements a small subset of HAML, <a href="https://github.com/dasacc22/dmsl" rel="nofollow">DMSL</a>  which is currently very experimental, but already supports most of HAML and also calling python code, but lacks Markdown or Textile support.  But apparently there's no alternative (yet) to Ruby HAML that supports all the required features.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOM OPER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is a bit of a hack. The raw SQL will make your code less portable, but it'll get rid of the race condition on the counter increment. In theory, this should increment the counter any time you do a query. I haven't tested this, so you should make sure the list gets interpolated in the query properly.</p><br/><br/><pre><code>class VisitorDayTypeCounterManager(models.Manager):<br/>    def get_query_set(self):<br/>        qs = super(VisitorDayTypeCounterManager, self).get_query_set()<br/><br/>        from django.db import connection<br/>        cursor = connection.cursor()<br/><br/>        pk_list = qs.values_list('id', flat=True)<br/>        cursor.execute('UPDATE table_name SET counter = counter + 1 WHERE id IN %s', [pk_list])<br/><br/>        return qs<br/><br/>class VisitorDayTypeCounter(models.Model):<br/>    ...<br/><br/>    objects = VisitorDayTypeCounterManager()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMBER IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Django's contributed <a href="http://docs.djangoproject.com/en/dev/ref/contrib/humanize/#ref-contrib-humanize">humanize</a> application does this:</p><br/><br/><pre><code>{% load humanize %}<br/>{{ my_num|intcomma }}<br/></code></pre><br/><br/><p>Be sure to add 'django.contrib.humanize' to your INSTALLED_APPS list in settings.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRIP HTML JAVASCRIPT FROM TEXT INPUT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you want to strip tags in the python, you can use:</p><br/><br/><pre><code>from django.utils.html import strip_tags<br/><br/>strip_tags(string_value)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET OR CR ( ) HAVE TO SAVE RIGHT AWAY ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>You can just do:</p><br/><br/><pre><code>try:<br/>    obj = Model.objects.get(**kwargs)<br/>except Model.DoesNotExist:<br/>    obj = Model(**dict((k,v) for (k,v) in kwargs.items() if '__' not in k))<br/></code></pre><br/><br/><p>which is pretty much what <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/query.py?rev=10929#L318" rel="nofollow"><code>get_or_create</code></a> does, sans commit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCORRECT STRING VALU ERROR WHEN SAVE UNICOD STRING IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I just figured out one method to avoid above errors.</p><br/><br/><p><strong>Save to database</strong></p><br/><br/><pre><code>user.first_name = u'Rytis'.encode('unicode_escape')<br/>user.last_name = u'Slatkevičius'.encode('unicode_escape')<br/>user.save()<br/>&gt;&gt;&gt; SUCCEED<br/><br/>print user.last_name<br/>&gt;&gt;&gt; Slatkevi\u010dius<br/>print user.last_name.decode('unicode_escape')<br/>&gt;&gt;&gt; Slatkevičius<br/></code></pre><br/><br/><p>Is this the only method to save strings like that into a MySQL table and decode it before rendering to templates for display?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT AND THE LOCAL TRICK
    </pattern>
    <template>
<![CDATA[<p>I don't like repetition -- I think "DRY", "Don't Repeat Yourself", is a key programming principle.  As a consequence, I have indeed used <code>locals()</code> in similar situations. Django template rendering is far from the only situation of this kind: the general case is "a function or operator which accepts a dict, but doesn't mind if the dict contains extra entries". (For example, ordinary string formatting in Python is another such case).</p><br/><br/><p>However, there's a countervailing principle: programs should be understandable in as localized a way as feasible -- that helps maintenance and refactoring (as it obviates the need to study other files to check what refactorings are acceptable). This suggests, for the <code>locals()</code> case, that it's OK if the template (or string format, etc) is a local literal (a rare case where only few variables are probably being used and thus <code>locals()</code> is not a huge win!-), but problematic in the normal case where the template lives in a different file.</p><br/><br/><p>So, using <code>locals()</code>, in most cases, seriously hampers refactoring. In almost every situation in Python, local variables and their names can freely be changed as part of a local refactoring, since they have no "externally visible" effect... but using <code>locals()</code> breaks that -- suddenly you can't safely rename a variable to a different name offering better clarity, refactor code flow in a manner that removes the need for a variable, etc, etc, without each and every time studying a separate template file to check if the old name might not be needed (and possibly editing the template file, which can be non-trivial, for example if it's maintained in several different natural languages for i18n/L10n purposes).</p><br/><br/><p>As a consequence, in addition to the secondary issue of performance, there is strong pressure <em>against</em> using <code>locals()</code> in "serious", "production" code -- code that does need long term maintenance and therefore easy refactoring and locality. So, when I'm "programming as best I know how", rather than "cutting corners", I'm aware I had better avoid <code>locals()</code>.</p><br/><br/><p>The values that you want to have in the context in which the template is rendered are not necessarily "naturally" available as local bare-names, after all; maybe some or many of them are results of computations, items from lists or dictionaries, and the like. In this case, the temptation to "cut corners" with <code>locals()</code> is easier to avoid if you just accumulate those values into a suitable dictionary rather than assigning them local bare-names.</p><br/><br/><p>It's not the easiest tradeoff, because two good principles (avoiding repetition, and having good locality) are inevitably clashing -- therefore, good question!  And not one entirely susceptible to sharp black or white answers, which is why I've tried to expand on both sides. In the end, I think it's one of those "style" aspects where a programming team might be well advised to adopt a team-uniform style guideline and stick to it -- at least it removes the need to make a decision over and over every time the issue arises, and produces a more homogeneous (and thereby maintainable) code base. [[I have to confess that this specific point has never been explicitly addressed in the style guidelines of teams I've been in, though, although many others have!-)]]</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW SHOULD I STORE A MONEY VALU
    </pattern>
    <template>
<![CDATA[<p>It's a bit late, but for anyone that stumbles across this, you might want to use the <code>.quantize()</code> method. Below is a custom field that automatically produces the correct value. Note that this is only when it is retrieved from the database, and wont help you when you set it yourself (until you save it to the db and retrieve it again!).</p><br/><br/><pre><code>from django.db import models<br/>from decimal import Decimal<br/>class CurrencyField(models.DecimalField):<br/>    __metaclass__ = models.SubfieldBase<br/><br/>    def to_python(self, value):<br/>        try:<br/>           return super(CurrencyField, self).to_python(value).quantize(Decimal("0.01"))<br/>        except AttributeError:<br/>           return None<br/></code></pre><br/><br/><p>(NB: this is untested, off the top of my head, but should work!)</p><br/><br/><p>[edit]</p><br/><br/><p>added <code>__metaclass__</code>, see <a href="http://stackoverflow.com/questions/2083591/django-why-does-this-custom-model-field-not-behave-as-expected">http://stackoverflow.com/questions/2083591/django-why-does-this-custom-model-field-not-behave-as-expected</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIBRARI TO PREVENT DUPLIC FORM SUBMISS EXIST FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>One easy solution to this problem is to add a unique hash to each form. Then you can have a rolling table of current forms. When a form is submitted, or the hash gets too old, you can expire it out of your table, and reject any form which does not have a matching hash in your table.</p><br/><br/><p>The HTTPRedirect is the correct way to do it, as previously mentioned.</p><br/><br/><p>Unfortunately, even Django's own built in admin is prone to problems related to this issue. In some cases, the cross-site scripting framework can assist to prevent some of this, but I'm afraid the current production versions just don't have this built in.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD TEST FOR DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>I am not perfect in testing but a few thoughts:</p><br/><br/><blockquote><br/>  <p>Basically you should test every function, method, class, whatever, that you have written by yourself.</p><br/></blockquote><br/><br/><p>This implies that you don't have to test functions, classes, etc. which the framework provides. </p><br/><br/><p>That said, a quick check of your test functions:</p><br/><br/><ul><br/><li><p><code>test_detail_status_code</code> and <code>test_list_status_code</code>:<br><br/>Ok to check whether you have configured the routing properly or not. Even more important when you provide your own implementation of <code>get_absolute_url()</code>.</p></li><br/><li><p><code>test_list_numer_of_items</code>:<br><br/>Ok if a certain number of items should be returned by the view. Not necessary if the number  is not important (i.e. arbitrary).</p></li><br/><li><p><code>test_detail_template</code> and <code>test_list_template</code>:<br><br/>Ok to check whether template variables are correctly set.</p></li><br/><li><p>All the other functions: Not necessary.<br><br/>What your are basically testing here is whether the ORM worked properly, whether lists work as expected and whether object properties can be accessed (or not). As long as you <strong>don't change</strong> e.g. the <code>save()</code> method of a model and/or <strong>provide your custom logic</strong>, I would not test this. You should trust the framework developers that this works properly.</p></li><br/></ul><br/><br/><p><strong>You only should have to test what you have (over)written.</strong></p><br/><br/><p>The model classes are maybe a special case. You basically have to test them, as I said, if you provide custom logic. But you should also test them <strong>against your requirements</strong>. E.g. it could be that a field is not allowed to be <code>null</code> (or that it has to be a certain datatype, like integer). So you should test that storing an object fails, if it has a <code>null</code> value in this field.<br><br/>This does <strong>not</strong> test the ORM for correctly following your specification but test that the specification still fulfills your requirements. It might be that you change the model and change some settings (by chance or because you forgot about the requirements).<br><br/>But you don't have to test e.g. methods like <code>save()</code> or wether you can access a property.</p><br/><br/><p>Of course when you use buggy third party code... well things can be different. But as Django uses the test framework itself to verify that everything is working, I would assume it is working.</p><br/><br/><p><strong>To sum up:</strong><br><br/>Test against your requirements, test your own code.</p><br/><br/><p>This is only my point of view. Maybe others have better proposals.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAN NOT ADD OR UPDAT A CHILD ROW A FOREIGN KEY CONSTRAINT FAIL
    </pattern>
    <template>
<![CDATA[<p>Some of my tables were in InnoDB and some were in MyISAM... I changed everything to MyISAM and the problem was solved.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH FASTCGI OR WITH MOD PYTHON
    </pattern>
    <template>
<![CDATA[<p>I've done both, and Apache/mod_python tended to be easier to work with and more stable. But these days I've jumped over to Apache/mod_wsgi, which is everything I've ever wanted and more:</p><br/><br/><ul><br/><li>Easy management of daemon processes.</li><br/><li>As a result, <strong>much</strong> better process isolation (running multiple sites in the same Apache config with mod_python almost always ends in trouble -- environment variables and C extensions leak across sites when you do that).</li><br/><li>Easy code reloads (set it up right and you can just touch the <code>.wsgi</code> file to reload instead of restarting Apache).</li><br/><li>More predictable resource usage. With mod_python, a given Apache child process' memory use can jump around a lot. With mod_wsgi it's pretty stable: once everything's loaded, you know that's how much memory it'll use.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ADMIN FORM IN DJANGO WHILE ALSO USE AUTODISCOV
    </pattern>
    <template>
<![CDATA[<p>None of the above.  Just use admin.site.unregister().  Here's how I recently added filtering Users on is_active in the admin (<strong>n.b.</strong> is_active filtering is now on the User model by default in Django core; still works here as an example), all DRY as can be:</p><br/><br/><pre><code>from django.contrib import admin<br/>from django.contrib.auth.admin import UserAdmin<br/>from django.contrib.auth.models import User<br/><br/>class MyUserAdmin(UserAdmin):<br/>    list_filter = UserAdmin.list_filter + ('is_active',)<br/><br/>admin.site.unregister(User)<br/>admin.site.register(User, MyUserAdmin)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER.DOESNOTEXIST DOE NOT EXIST
    </pattern>
    <template>
<![CDATA[<p>The problem is really with PyDev, not your code. What you have done is absolutely correct, but IDEs will always have difficulty resolving attributes in a dynamic language like Python. In the case of the DoesNotExist exception, it is added via a <code>__metaclass__</code> rather than through normal object inheritance, so PyDev is unlikely to be able to find it. However, it should definitely work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE MAXIMUM VALU OF A NUMER FIELD IN A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>You could also create a custom model field type - see <a href="http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/custom-model-fields/#howto-custom-model-fields</a></p><br/><br/><p>In this case, you could 'inherit' from the built-in IntegerField and override its validation logic.</p><br/><br/><p>The more I think about this, I realize how useful this would be for many Django apps. Perhaps a IntegerRangeField type could be submitted as a patch for the Django devs to consider adding to trunk.</p><br/><br/><p>This is working for me:</p><br/><br/><pre><code>from django.db import models<br/><br/>class IntegerRangeField(models.IntegerField):<br/>    def __init__(self, verbose_name=None, name=None, min_value=None, max_value=None, **kwargs):<br/>        self.min_value, self.max_value = min_value, max_value<br/>        models.IntegerField.__init__(self, verbose_name, name, **kwargs)<br/>    def formfield(self, **kwargs):<br/>        defaults = {'min_value': self.min_value, 'max_value':self.max_value}<br/>        defaults.update(kwargs)<br/>        return super(IntegerRangeField, self).formfield(**defaults)<br/></code></pre><br/><br/><p>Then in your model class, you would use it like this (field being the module where you put the above code):</p><br/><br/><pre><code>size = fields.IntegerRangeField(min_value=1, max_value=50)<br/></code></pre><br/><br/><p>OR for a range of negative and positive (like an oscillator range):</p><br/><br/><pre><code>size = fields.IntegerRangeField(min_value=-100, max_value=100)<br/></code></pre><br/><br/><p>What would be really cool is if it could be called with the range operator like this:</p><br/><br/><pre><code>size = fields.IntegerRangeField(range(1:50))<br/></code></pre><br/><br/><p>But, that would require a lot more code since since you can specify a 'skip' parameter - range(1:50:2) - Interesting idea though...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I ACCESS THE REQUEST OBJECT OR ANI OTHER VARIABL IN A FORM S CLEAN ( ) METHOD
    </pattern>
    <template>
<![CDATA[<p>The answer by Ber - storing it in threadlocals - is a very bad idea. There's absolutely no reason to do it this way.</p><br/><br/><p>A much better way is to override the form's <code>__init__</code> method to take an extra keyword argument, <code>request</code>. This stores the request in the <em>form</em>, where it's required, and from where you can access it in your clean method.</p><br/><br/><pre><code>class MyForm(forms.Form):<br/><br/>    def __init__(self, *args, **kwargs):<br/>        self.request = kwargs.pop('request', None)<br/>        super(MyForm, self).__init__(*args, **kwargs)<br/><br/><br/>    def clean(self):<br/>        ... access the request object via self.request ...<br/></code></pre><br/><br/><p>and in your view:</p><br/><br/><pre><code>myform = MyForm(request.POST, request=request)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVERT AN ENTIR SET OF A MODEL S OBJECT INTO A SINGL DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>Does this need to create an actual dict? could you get by with only something that looked like a dict?</p><br/><br/><pre><code>class DictModelAdaptor():<br/>    def __init__(self, model):<br/>        self.model = model<br/><br/>    def __getitem__(self, key):<br/>        return self.model.objects.get(key=key)<br/><br/>    def __setitem__(self, key, item):<br/>        pair = self.model()<br/>        pair.key = key<br/>        pair.value = item<br/>        pair.save()<br/><br/>    def __contains__(self, key):<br/>        ...<br/></code></pre><br/><br/><p>You could then wrap a model in this way:</p><br/><br/><pre><code>modelDict = DictModelAdaptor(DictModel)<br/>modelDict["name"] = "Bob Jones"<br/></code></pre><br/><br/><p>etc...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET AN OBJECT FORM THE DB OR NONE IF NOTH MATCH
    </pattern>
    <template>
<![CDATA[<p>I'd do</p><br/><br/><pre><code>try:<br/>    foo = Foo.objects.get(bar=baz)<br/>except Foo.DoesNotExist:<br/>    foo = None<br/></code></pre><br/><br/><p>Which is clearer but longer</p><br/><br/><p>Easy enough to wrap into a function</p><br/><br/><pre><code>def get_or_none(model, **kwargs):<br/>    try:<br/>        return model.objects.get(**kwargs)<br/>    except model.DoesNotExist:<br/>        return None<br/></code></pre><br/><br/><p>Call it like this</p><br/><br/><pre><code>foo = get_or_none(Foo, baz=bar)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPERI WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I built <a href="http://www.theknoxstudent.com/" rel="nofollow">a newspaper CMS</a> to bring my student paper online in college. Django was the perfect fit (I found RoR unintuitive and frustrating). I was able to develop rapidly in a language I loved, supported by an excellent community and with a wealth of documentation. It abstracted-out just enough to speed development and gave me enough power to design a system that did exactly what I needed. I didn't feel locked in, but I understand that some do. This is a compromise you implicitly make, it's part of the buy-in with any framework. The only "framework" that fits everyone's needs for the life of their project is no framework at all.</p><br/><br/><p>The important question is not whether or not you are trapped in a box, but whether or not you are able to step outside the box when the time comes. To this end I'll argue that no framework is very good at this at the moment, but I believe Django deserves some credit here because <strong>the Django guys &amp; gals definitely know this.</strong> To quote Jacob Kaplan-Moss, one of Django's co-creators:</p><br/><br/><blockquote><br/>  <p>It's important to realize that the most important kind of inter-operability is with the user's code, and frankly web frameworks often suck here. A basic truth of software is that as it grows and matures it becomes more and more domain-specific, and less and less generic. I'll talk more about this below; the important part for now is to realize that general frameworks should be able to cede control to domain-specific replacements as the stack grows. For the most part, frameworks don't.</p><br/></blockquote><br/><br/><ul><br/><li><a href="http://jacobian.org/writing/snakes-on-the-web/" rel="nofollow">Snakes On The Web</a> (an excellent article)</li><br/></ul><br/><br/><p>We can only hope that we'll see Django reach a place where you can "outgrow it" comfortably, and in fact I'm confident it will. Any framework will speed development, but if you opt for Django you'll be in very good hands.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FIRST PAGE LOAD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The default for Apache/mod_wsgi is to only load application code on first request to a process which requires that applications. So, first step is to configure mod_wsgi to preload your code when the process starts and not only the first request. This can be done in mod_wsgi 2.X using the WSGIImportScript directive.</p><br/><br/><p>Presuming daemon mode, which is better option anyway, this means you would have something like:</p><br/><br/><pre><code># Define process group.<br/><br/>WSGIDaemonProcess django display-name=%{GROUP}<br/><br/># Mount application.<br/><br/>WSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi<br/><br/># Ensure application preloaded on process start. Must specify the<br/># process group and application group (Python interpreter) to use.<br/><br/>WSGIImportScript /usr/local/django/mysite/apache/django.wsgi \<br/>  process-group=django application-group=%{GLOBAL}<br/><br/>&lt;Directory /usr/local/django/mysite/apache&gt;<br/><br/>    # Ensure application runs in same process group and application<br/>    # group as was preloaded into on process start.<br/><br/>    WSGIProcessGroup django<br/>    WSGIApplicationGroup %{GLOBAL}<br/><br/>    Order deny,allow<br/>    Allow from all<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>When you have made a code change, instead of touch the WSGI script file, which is only checked on the next request, send a SIGINT signal to the processes in the daemon process group instead.</p><br/><br/><p>With the 'display-name' option to WSGIDaemonProcess you can identify which processes by using BSD style 'ps' program. With 'display-name' set to '%{GROUP}', the 'ps' output should show '(wsgi:django)' as process name. Identify the process ID and do:</p><br/><br/><pre><code>kill -SIGINT pid<br/></code></pre><br/><br/><p>Swap 'pid' with actual process ID. If more than one process in daemon process group, send signal to all of them.</p><br/><br/><p>Not sure if 'killall' can be used to do this in one step. I had problem with doing it on MacOS X.</p><br/><br/><p>In mod_wsgi 3.X the configuration can be simpler and can use instead:</p><br/><br/><pre><code># Define process group.<br/><br/>WSGIDaemonProcess django display-name=%{GROUP}<br/><br/># Mount application and designate which process group and<br/># application group (Python interpreter) to run it in. As<br/># process group and application group named, this will have<br/># side effect of preloading application on process start.<br/><br/>WSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi \<br/>  process-group=django application-group=%{GLOBAL}<br/><br/>&lt;Directory /usr/local/django/mysite/apache&gt;<br/>    Order deny,allow<br/>    Allow from all<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>That is, no need to use separate WSGIImportScript directive as can specific process group and application group as arguments to WSGIScriptAlias instead with side effect that it will preload application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>Play! is a breath of fresh air into Java and bypasses all the Enterprise cruft that has evolved over the years. Even the namespace is just play not com.playframework.  It is supposed to be an answer to Rails, Django etc and is MVC based.  It is needed for Java to stay relevant in all but deep entrenched enterprise shops.</p><br/><br/><p>Play! reduces the overabstraction and painful configuration of old Java.  It is a complete stack it does not rely or play to the old Servlet/EJB methodology like Restlet tried to do (making REST easier in Servlets).  Play! is a great REST based Java framework that is a valid contender to other platforms MVC frameworks.</p><br/><br/><p>It is very RESTful and it is easy to bind a parameter to a java method. They have also made JPA much easier to use through their play namespace.</p><br/><br/><p>play.db.jpa.Model</p><br/><br/><pre><code>public void messages(int page) {<br/>    User connectedUser = User.find("byEmail", connected());<br/>    List&lt;Message&gt; messages = Message.find(<br/>        "user = ? and read = false order by date desc",<br/>        connectedUser<br/>    ).from(page * 10).fetch(10);<br/>    render(connectedUser, messages);<br/>}<br/></code></pre><br/><br/><p>Python is used for scripting instead of builds with Maven which might save a few lives.</p><br/><br/><p>I haven't been this excited about a Java framework since Red5 or Restlet.  A bonus is they have easy ways to get your app up on Google AppEngine as well using the Java version of GAE.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSRF CHECK FAIL WITH AN AJAX POST REQUEST
    </pattern>
    <template>
<![CDATA[<p><strong>Real solution</strong></p><br/><br/><p>Ok, I managed to trace the problem down. It lies in the Javascript (as I suggested below) code.</p><br/><br/><p>What you need is this:</p><br/><br/><pre><code>$.ajaxSetup({ <br/>     beforeSend: function(xhr, settings) {<br/>         function getCookie(name) {<br/>             var cookieValue = null;<br/>             if (document.cookie &amp;&amp; document.cookie != '') {<br/>                 var cookies = document.cookie.split(';');<br/>                 for (var i = 0; i &lt; cookies.length; i++) {<br/>                     var cookie = jQuery.trim(cookies[i]);<br/>                     // Does this cookie string begin with the name we want?<br/>                 if (cookie.substring(0, name.length + 1) == (name + '=')) {<br/>                     cookieValue = decodeURIComponent(cookie.substring(name.length + 1));<br/>                     break;<br/>                 }<br/>             }<br/>         }<br/>         return cookieValue;<br/>         }<br/>         if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {<br/>             // Only send the token to relative URLs i.e. locally.<br/>             xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));<br/>         }<br/>     } <br/>});<br/></code></pre><br/><br/><p>instead of the code posted in the official docs:<br/><a href="http://docs.djangoproject.com/en/1.2/ref/contrib/csrf/#ajax" rel="nofollow">http://docs.djangoproject.com/en/1.2/ref/contrib/csrf/#ajax</a></p><br/><br/><p>The working code, comes from this Django entry: <a href="http://www.djangoproject.com/weblog/2011/feb/08/security/" rel="nofollow">http://www.djangoproject.com/weblog/2011/feb/08/security/</a></p><br/><br/><p>So the general solution is: "use ajaxSetup handler instead of ajaxSend handler". I don't know why it works. But it works for me :)</p><br/><br/><p><strong>Previous post (without answer)</strong></p><br/><br/><p>I'm experiencing the same problem actually.</p><br/><br/><p>It occurs after updating to Django 1.2.5 - there were no errors with AJAX POST requests in Django 1.2.4 (AJAX wasn't protected in any way, but it worked just fine).</p><br/><br/><p>Just like OP, I have tried the JavaScript snippet posted in Django documentation. I'm using jQuery 1.5. I'm also using the "django.middleware.csrf.CsrfViewMiddleware" middleware.</p><br/><br/><p>I tried to follow the the middleware code and I know that it fails on this:</p><br/><br/><pre><code>request_csrf_token = request.META.get('HTTP_X_CSRFTOKEN', '')<br/></code></pre><br/><br/><p>and then</p><br/><br/><pre><code>if request_csrf_token != csrf_token:<br/>    return self._reject(request, REASON_BAD_TOKEN)<br/></code></pre><br/><br/><p>this "if" is true, because "request_csrf_token" is empty.</p><br/><br/><p>Basically it means that the header is NOT set. So is there anything wrong with this JS line:</p><br/><br/><pre><code>xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));<br/></code></pre><br/><br/><p>?</p><br/><br/><p>I hope that provided details will help us in resolving the issue :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HAVE HTML HELPER
    </pattern>
    <template>
<![CDATA[<p>No it doesn't.</p><br/><br/><p><a href="http://www.b-list.org/" rel="nofollow">James Bennett</a> answered a <a href="http://www.b-list.org/weblog/2006/jul/02/django-and-ajax/" rel="nofollow">similar question</a> a while back, regarding Rails' built-in JavaScript helpers.</p><br/><br/><p>It's <em>really</em> unlikely that Django will ever have 'helper' functionality built-in.  The reason, if I understand correctly, has to do with Django's core philosophy of keeping things <a href="http://docs.djangoproject.com/en/dev/misc/design-philosophies/#id1" rel="nofollow">loosely coupled</a>.  Having that kind of helper functionality built-in leads to coupling Django with a specific JavaScript library or (in your case) html document type.  </p><br/><br/><p>EG. What happens if/when HTML 5 is finally implemented and Django is generating HTML 4 or XHTML markup?</p><br/><br/><p>Having said that, Django's template framework is really flexible, and it wouldn't be terribly difficult to <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/" rel="nofollow">write your own tags/filters</a> that did what you wanted.  I'm mostly a designer myself, and I've been able to put together a couple custom tags that worked like a charm.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WIDTH OF FORM ELEMENT CREAT WITH MODELFORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong>The easiest way for your use case is to use CSS</strong>. It's a language meant for defining presentation. Look at the code generted by form, take note of ids for fields that interest you, and change appearance of these fields through CSS.</p><br/><br/><p>Example for <code>long_desc</code> field in your ProductForm (when your form does not have a custom prefix):</p><br/><br/><pre><code>#id_long_desc {<br/>    width: 300px;<br/>    height: 200px;<br/>}<br/></code></pre><br/><br/><p><strong>Second approach</strong> is to pass <code>attrs</code> keyword to your widget constructor.</p><br/><br/><pre><code>class ProductForm(ModelForm):<br/>    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20})<br/>    short_desc = forms.CharField(widget=forms.Textarea)<br/>    class Meta:<br/>        model = Product<br/></code></pre><br/><br/><p>It's <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs" rel="nofollow">described in Django documentation</a>.</p><br/><br/><p><strong>Third approach</strong> is to leave the nice declarative interface of newforms for a while and set your widget attributes in custom constructor.</p><br/><br/><pre><code>class ProductForm(ModelForm):<br/>    long_desc = forms.CharField(widget=forms.Textarea)<br/>    short_desc = forms.CharField(widget=forms.Textarea)<br/>    class Meta:<br/>        model = Product<br/><br/>    # Edit by bryan<br/>    def __init__(self, *args, **kwargs):<br/>        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor<br/>        self.fields['long_desc'].widget.attrs['cols'] = 10<br/>        self.fields['long_desc'].widget.attrs['rows'] = 20<br/></code></pre><br/><br/><p>This approach has the following advantages:</p><br/><br/><ul><br/><li>You can define widget attributes for fields that are generated automatically from your model without redefining whole fields.</li><br/><li>It doesn't depend on the prefix of your form.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRES ORDER IN A RELAT DATABAS
    </pattern>
    <template>
<![CDATA[<p>Since I've mostly run into this with Django, I've found <a href="http://www.djangosnippets.org/snippets/1053/" rel="nofollow">this solution</a> to be the most workable.  It seems that there isn't any "right way" to do this in a relational database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL TO JSON
    </pattern>
    <template>
<![CDATA[<p>I now use django-piston. This does the trick.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEBUG WITH EMAC
    </pattern>
    <template>
<![CDATA[<p>Start pdb like this:</p><br/><br/><pre><code>M-x pdb<br/>python manage.py runserver --noreload<br/></code></pre><br/><br/><p>Once you have the (Pdb) prompt, you need to do this:</p><br/><br/><pre><code>import sys<br/>sys.path.append('/path/to/directory/containing/views.py')<br/></code></pre><br/><br/><p>Once you've done this, you should be able to set breakpoints normally. Just navigate to the line number you want, and </p><br/><br/><pre><code>M-x space<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I USE THE BUILT IN PASSWORD RESET CHANG VIEW WITH MY OWN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>If you take a look at the sources for <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/views.py" rel="nofollow">django.contrib.views.password_reset</a> you'll see that it uses <a href="http://code.djangoproject.com/browser/django/trunk/django/template/__init__.py" rel="nofollow">RequestContext</a>. The upshot is, you can use Context Processors to modify the context which may allow you to inject the information that you need.</p><br/><br/><p>The b-list has a good <a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/" rel="nofollow">introduction to context processors</a>.</p><br/><br/><p>Edit (I seem to have been confused about what the actual question was):</p><br/><br/><p>You'll notice that password_reset takes a named parameter called "template_name":</p><br/><br/><pre><code>def password_reset(request, is_admin_site=False, <br/>            template_name='registration/password_reset_form.html',<br/>            email_template_name='registration/password_reset_email.html',<br/>            password_reset_form=PasswordResetForm, <br/>            token_generator=default_token_generator,<br/>            post_reset_redirect=None):<br/></code></pre><br/><br/><p>... thus, with a urls.py like:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from django.contrib.auth.views import password_reset<br/><br/>urlpatterns = patterns('',<br/>     (r'^/accounts/password/reset/$', password_reset, {'template_name': 'my_templates/password_reset.html'}),<br/>     ...<br/>)<br/></code></pre><br/><br/><p>django.contrib.auth.views.password_reset will be called for URLs matching '/accounts/password/reset' with the keyword argument 'template_name' = 'my_templates/password_reset.html'.</p><br/><br/><p>Otherwise, you don't need to provide any context as the password_reset view takes care of itself. If you want to see what context you have available, you can trigger a TemplateSyntax error and look through the stack trace find the frame with a local variable named 'context'. If you want to modify the context then what I said above about context processors is probably the way to go.</p><br/><br/><p>In summary: What do you need to do to use your own template? Provide a 'template_name' keyword argument to the view when it is called. You can supply keyword arguments to views by including a dictionary as the third member of a URL pattern tuple.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      P TEMPLAT INHERIT
    </pattern>
    <template>
<![CDATA[<p>You'll probably want to look into <a href="http://tiles.apache.org/index.html" rel="nofollow">Tiles</a>.</p><br/><br/><p>EDIT: On a related note to tiles, you might want to look into <a href="http://struts.apache.org/" rel="nofollow">Struts</a>.  It's not what you're looking for (that's tiles), but it is useful for someone coming from Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANOTH SCRIPT IN PYTHON WITHOUT WAIT FOR IT TO FINISH
    </pattern>
    <template>
<![CDATA[<pre><code>p = subprocess.Popen([sys.executable, '/path/to/script.py'], <br/>                                    stdout=subprocess.PIPE, <br/>                                    stderr=subprocess.STDOUT)<br/></code></pre><br/><br/><p>That will start the subprocess in background. Your script will keep running normally.</p><br/><br/><p>Read the documentation <a href="http://docs.python.org/library/subprocess.html" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFIC WAY TO INSERT THOUSAND OF RECORD INTO A TABL ( SQLITE PYTHON DJANGO )
    </pattern>
    <template>
<![CDATA[<p>You want to check out "django.db.transaction.commit_manually".</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/#django-db-transaction-commit-manually" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/transactions/#django-db-transaction-commit-manually</a></p><br/><br/><p>So it would be something like:</p><br/><br/><pre><code>from django.db import transaction<br/><br/>@transaction.commit_manually<br/>def viewfunc(request):<br/>    ...<br/>    for item in items:<br/>        entry = Entry(a1=item.a1, a2=item.a2)<br/>        entry.save()<br/>    transaction.commit()<br/></code></pre><br/><br/><p>Which will only commit once, instead at each save().</p><br/><br/><p>In django 1.3 context managers were introduced.<br/>So now you can use <strong><a href="https://docs.djangoproject.com/en/1.3/topics/db/transactions/#controlling-transaction-management-in-views" rel="nofollow">transaction.commit_on_success()</a></strong> in a similar way:</p><br/><br/><pre><code>from django.db import transaction<br/><br/>def viewfunc(request):<br/>    ...<br/>    with transaction.commit_on_success():<br/>        for item in items:<br/>            entry = Entry(a1=item.a1, a2=item.a2)<br/>            entry.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CCEPT EMAIL ADDRESS AS USERNAM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Check this out:</p><br/><br/><p><a href="http://www.davidcramer.net/code/224/logging-in-with-email-addresses-in-django.html" rel="nofollow">http://www.davidcramer.net/code/224/logging-in-with-email-addresses-in-django.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INIT FUNCTION TO BE USE IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Relying on Django's built-in functionality and passing named parameters would be the simplest way to go.</p><br/><br/><pre><code>p = User(name="Fred", email="fred@example.com")<br/></code></pre><br/><br/><p>But if you're set on saving some keystrokes, I'd suggest adding a static convenience method to the class instead of messing with the initializer.</p><br/><br/><pre><code># In User class declaration<br/>def create(name, email):<br/>  return User(name=name, email=email)<br/>create = staticmethod(create)<br/><br/># Use it<br/>p = User.create("Fred", "fred@example.com")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THEME SKIN REPOSITORI
    </pattern>
    <template>
<![CDATA[<p>If your question refers to django-admin app, you could try <a href="http://code.google.com/p/django-grappelli/" rel="nofollow">Grappeli</a>.<br/>If not, you may like to get familiar with CSS Frameworks. Useful resources can be found <a href="http://stackoverflow.com/questions/203069/what-is-the-best-css-framework-and-are-they-worth-the-effort">here</a> or <a href="http://stackoverflow.com/questions/647853/how-do-you-choose-a-css-framework">here</a>. I would personally recommend <a href="http://960.gs/" rel="nofollow">960.gs</a>, but it's a matter of taste.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL SERVER WITH DJANGO IN PRODUCT
    </pattern>
    <template>
<![CDATA[<p>As has been stated, django-pyodbc is a good way to go.  PyODBC is probably the most mature SQL Server library for Python there is.  </p><br/><br/><p>The only thing you may have problems with is that pyodbc doesn't support stored procedures very well (you can call them, but you have no way to get results from them).  You <em>can</em> call them using pymssql, but I would avoid it if at all possible as it doesn't support the standard DB-API interface and may be subject to changes.  If you need to do this, your best bet is to use <a href="http://adodbapi.sourceforge.net/" rel="nofollow">adodbapi</a> directly (it's included with the python win32 package, which you'll probably end up installing anyway).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEL XLWT
    </pattern>
    <template>
<![CDATA[<p>neat package! i didn't know about this</p><br/><br/><p>According to the doc, the <code>save(filename_or_stream)</code> method takes either a filename to save on, or a file-like stream to write on.</p><br/><br/><p>And a Django response object happens to be a file-like stream!  so just do <code>xls.save(response)</code>.  Look the Django docs about <a href="http://docs.djangoproject.com/en/dev/howto/outputting-pdf/#complex-pdfs" rel="nofollow">generating PDFs</a> with ReportLab to see a similar situation.</p><br/><br/><p><strong>edit:</strong> (adapted from ShawnMilo's comment):</p><br/><br/><pre><code>def xls_to_response(xls, fname):<br/>    response = HttpResponse(mimetype="application/ms-excel")<br/>    response['Content-Disposition'] = 'attachment; filename=%s' % fname<br/>    xls.save(response)<br/>    return response<br/></code></pre><br/><br/><p>then, from your view function, just create the <code>xls</code> object and finish with </p><br/><br/><pre><code>return xls_to_response(xls,'foo.xls')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CELERI OR CARROT FOR A DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>If you need to send/receive messages to/from AMQP message queues, use <code>carrot</code>.</p><br/><br/><p>If you want to run scheduled tasks on a number of machines, use <code>celery</code>.</p><br/><br/><p>If you're making soup, use both ;-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND DJANGO IS IT PRODUCT READI
    </pattern>
    <template>
<![CDATA[<p>What I would do,</p><br/><br/><ol><br/><li><p>Define the schema in Django orm, let it write the db via syncdb. You get the admin interface.</p></li><br/><li><p>In view1 you need a complex join</p></li><br/></ol><br/><br/><pre><br/><code><br/>    def view1(request):<br/>       import sqlalchemy<br/>       data = sqlalchemy.complex_join_magic(...)<br/>       ...<br/>       payload = {'data': data, ...}<br/>       return render_to_response('template', payload, ...)<br/></code><br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCOD UTF8 FILENAM FOR HTTP HEADER ( PYTHON DJANGO )
    </pattern>
    <template>
<![CDATA[<p>This is a FAQ.</p><br/><br/><p>There is no interoperable way to do this. Some browsers implement proprietary extensions (IE, Chrome), other implement RFC 2231 (Firefox, Opera).</p><br/><br/><p>See test cases at <a href="http://greenbytes.de/tech/tc2231/" rel="nofollow">http://greenbytes.de/tech/tc2231/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SO BAD WITH THREADLOC
    </pattern>
    <template>
<![CDATA[<p>I don't think there is anything wrong with threadlocals - yes, it is a global variable, but besides that it's a normal tool. We use it just for this purpose (storing subdomain model in the context global to the current request from middleware) and it works perfectly.</p><br/><br/><p>So I say, use the right tool for the job, in this case threadlocals make your app much more elegant than passing subdomain model around in all the model methods (not mentioning the fact that it is even not always possible - when you are overriding django manager methods to limit queries by subdomain, you have no way to pass anything extra to get_query_set, for example - so threadlocals is the natural and only answer).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOBIL BROWSER ( NOT JUST IPHON ) IN PYTHON VIEW
    </pattern>
    <template>
<![CDATA[<p>Update:</p><br/><br/><p>I just found: <a href="http://code.google.com/p/minidetector/" rel="nofollow">http://code.google.com/p/minidetector/</a></p><br/><br/><p>Which seems to do exactly what I want, I'm going to test now. Feel free to tell me i'm wrong!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG IN THE DJANGO DEBUG TOOLBAR
    </pattern>
    <template>
<![CDATA[<p>You just use the <a href="http://docs.python.org/library/logging.html" rel="nofollow">logging module</a> methods and DjDT will intercept and display them in the Logging Panel.</p><br/><br/><pre><code>import logging<br/><br/>logging.debug('Debug Message')<br/><br/>if some_error:<br/>   logging.error('Error Message')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY SOUTH MIGRAT DOE N T WORK FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>South allows you to create migrations when you first start out with a new app and the tables haven't been added to the database yet, as well as creating migrations for legacy apps that already have tables in the database. The key is to know when to do what. </p><br/><br/><p>Your first mistake was when you deleted your migrations, as soon as you did that, and then ran syncdb, Django didn't know that you wanted south to manage that app anymore, so it created the tables for you. When you created your initial migrations and then ran migrate, south was trying to create tables that django already created, and thus your error.</p><br/><br/><p>At this point you have two options.</p><br/><br/><ol><br/><li><p>Delete the tables for the wall app from your database and then run <code>$ py manage.py migrate wall</code> This will run the migration and create your tables.</p></li><br/><li><p>Fake out the initial migration run<br/><code>$ py manage.py migrate wall 0001 --fake</code> This will tell south that you already have the tables on the database so just fake it, which will add a row to the south_migrationhistory table, so that the next time you run a migrate it will know that the first migration has already been run.</p></li><br/></ol><br/><br/><h2>Setting up a brand new project and no database</h2><br/><br/><ol><br/><li>create your database</li><br/><li>add south to installed apps</li><br/><li>run syncdb, this will add the django and south tables to the database</li><br/><li>add your apps</li><br/><li>for each app run <code>python manage.py schemamigration app_name --initial</code> this will create the initial migration files for your app</li><br/><li>then run south migrate <code>python manage.py migrate app_name</code> this will add the tables to the database.</li><br/></ol><br/><br/><h2>Setting up a legacy project and database</h2><br/><br/><ol><br/><li>add south to installed apps</li><br/><li>run syncdb, this will add the south tables to the database</li><br/><li>for each of your apps run <code>python manage.py schemamigration app_name --initial</code> This will create your initial migrations</li><br/><li>for each of your apps run <code>python manage.py migrate app_name 0001 --fake</code> , this will fake out south, it won't do anything to the database for those models, it will just add records to the south_migrationhistory table so that the next time you want to create a migration, you are all set. </li><br/></ol><br/><br/><h2>Setting up a legacy project and no database</h2><br/><br/><ol><br/><li>create database</li><br/><li>add south to installed apps</li><br/><li>for each of your apps run <code>python manage.py schemamigration app_name --initial</code> This will create your initial migrations</li><br/><li>run syncdb, this will add any apps that don't have migrations to the database.</li><br/><li>then run south migrate <code>python manage.py migrate</code> this will run all migrations for your apps.</li><br/></ol><br/><br/><p>Now that you are setup with south, you can start using south to manage model changes to those apps. The most common command to run is <code>python manage.py schemamigration app_name migration_name --auto</code> that will look at the last migration you ran and it will find the changes and build out a migration file for you. Then you just need to run <code>python manage.py migrate</code> and it alter your database for you.</p><br/><br/><p>Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT VS APP
    </pattern>
    <template>
<![CDATA[<p>What is to stop you using <code>myproduct.myproduct</code>? What you need to achieve that roughly consists of doing this:</p><br/><br/><pre><code>django-admin.py startproject myproduct<br/>cd myproduct<br/>mkdir myproduct<br/>touch myproduct/__init__.py<br/>touch myproduct/models.py<br/>touch myproduct/views.py<br/></code></pre><br/><br/><p>and so on. Would it help if I said <code>views.py</code> doesn't have to be called <code>views.py</code>? Provided you can name, on the python path, a function (usually package.package.views.function_name) it will get handled. Simple as that. All this "project"/"app" stuff is just python packages.</p><br/><br/><p>Now, how are you supposed to do it? Or rather, how might I do it? Well, if you create a significant piece of reusable functionality, like say a markup editor, that's when you create a "top level app" which might contain <code>widgets.py</code>, <code>fields.py</code>, <code>context_processors.py</code> etc - all things you might want to import.</p><br/><br/><p>Similarly, if you can create something like a blog in a format that is pretty generic across installs, you can wrap it up in an app, with its own template, static content folder etc, and configure an instance of a django project to use that app's content.</p><br/><br/><p>There are no hard and fast rules saying you must do this, but it is one of the goals of the framework. The fact that everything, templates included, allows you to include from some common base means your blog should fit snugly into any other setup, simply by looking after its own part.</p><br/><br/><p>However, to address your actual concern, yes, nothing says you can't work with the top level project folder. <em>That's what apps do</em> and you can do it if you really want to. I tend not to, however, for several reasons:</p><br/><br/><ul><br/><li>Django's default setup doesn't do it.</li><br/><li>Often, I want to create a main app, so I create one, usually called <code>website</code>. However, at a later date I might want to develop original functionality just for this site. With a view to making it removable (whether or not I ever do) I tend to then create a separate directory. This also means I can drop said functionality just by unlinking that package from the config and removing the folder, rather than a complex delete the right urls from a global urls.py folder.</li><br/><li>Very often, even when I want to make something independent, it needs somewhere to live whilst I look after it / make it independent. Basically the above case, but for stuff I do intend to make generic.</li><br/><li>My top level folder often contains a few other things, including but not limited to wsgi scripts, sql scripts etc.</li><br/><li>django's <a href="http://docs.djangoproject.com/en/1.2/howto/custom-management-commands/" rel="nofollow">management extensions</a> rely on subdirectories. So it makes sense to name packages appropriately.</li><br/></ul><br/><br/><p>In short, the reason there is a convention is the same as any other convention - it helps when it comes to others working with your project. If I see <code>fields.py</code> I immediately expect code in it to subclass django's field, whereas if I see <code>inputtypes.py</code> I might not be so clear on what that means without looking at it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS FLASK + WERKZEUG FOR COMPLEX SCALABL AND LARG APPLIC
    </pattern>
    <template>
<![CDATA[<p>I've used Werkzeug with Jinja and SQLAlchemy for two years and can only recommend these three libraries. Werkzeug might be a little harder to learn than Django at first but the docs are actually extensive and well written. The included debugger is extremely useful.</p><br/><br/><p>Unlike the Django ORM, SQLAlchemy won't get in your way. The programmatic SQL generation has very few limitations, with or without the ORM, and in the very rare cases where you need it, raw SQL is available without abandonning the benefits of wrapped query results, transaction management, connection pooling, etc.</p><br/><br/><p>As for Jinja, it is very similar to Django's template language, only without the limitations (you won't have to write template tags).</p><br/><br/><p>I haven't had the chance to try Flask yet but it's likely to be the best way to start a new project based on Werkzeug and Jinja.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WORKFLOW
    </pattern>
    <template>
<![CDATA[<p>Follow the Agile approach. Finish one small case, <strong>from the start to the end</strong>. From the models to the tests to user experience. Then build on it. Iterate.</p><br/><br/><p>Thats the right way to software development.</p><br/><br/><p>To do it efficiently, you need: (don't bother right away, you <em>will need</em> it.)</p><br/><br/><p>Automated schema migration, automated build system, auto updating and deployment. - None of these, django has got anything to do with. Use <a href="http://www.pip-installer.org/" rel="nofollow">pip</a>, <a href="http://docs.fabfile.org/" rel="nofollow">fabric</a>, <a href="http://hudson-ci.org/" rel="nofollow">hudson</a>, <a href="http://twill.idyll.org/" rel="nofollow">twill</a> and <a href="http://south.aeracode.org/" rel="nofollow">south</a> appropriately.</p><br/><br/><p>Take care not to over burden yourself with all these right away, particularly since you say, you are beginning.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER A TREE STRUCTUR ( RECURS ) USE A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I think the canonical answer is: "Don't".</p><br/><br/><p>What you should probably do instead is unravel the thing in your <em>view</em> code, so it's just a matter of iterating over (in|de)dents in the template. I think I'd do it by appending indents and dedents to a list while recursing through the tree and then sending that "travelogue" list to the template. (the template would then insert <code>&lt;li&gt;</code> and <code>&lt;/li&gt;</code> from that list, creating the recursive structure with "understanding" it.)</p><br/><br/><p>I'm also pretty sure recursively including template files is really a <em>wrong</em> way to do it...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT VARIABL AND JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>The <code>{{variable}}</code> is substituted directly into the HTML.  Do a view source; it isn't a "variable" or anything like it.  It's just text.</p><br/><br/><p>Having said that, you can put this kind of substitution into your javascript</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt; <br/>   var a = "{{someDjangoVariable}}"<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>gives you "dynamic" javascript.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGNAL VS. OVERRID SAVE METHOD
    </pattern>
    <template>
<![CDATA[<p>Save/delete signals are generally favourable in situations where you need to make changes which aren't completely specific to the model in question, or could be applied to models which have something in common, or could be configured for use across models.</p><br/><br/><p>One common task in overridden <code>save</code> methods is automated generation of slugs from some text field in a model. That's an example of something which, if you needed to implement it for a number of models, would benefit from using a <code>pre_save</code> signal, where the signal handler could take the name of the slug field and the name of the field to generate the slug from. Once you have something like that in place, any enhanced functionality you put in place will also apply to all models - e.g. looking up the slug you're about to add for the type of model in question, to ensure uniqueness.</p><br/><br/><p>Reusable applications often benefit from the use of signals - if the functionality they provide can be applied to any model, they generally (unless it's unavoidable) won't want users to have to directly modify their models in order to benefit from it.</p><br/><br/><p>With <a href="http://code.google.com/p/django-mptt/" rel="nofollow">django-mptt</a>, for example, I used the <code>pre_save</code> signal to manage a set of fields which describe a tree structure for the model which is about to be created or updated and the <code>pre_delete</code> signal to remove tree structure details for the object being deleted and its entire sub-tree of objects before it and they are deleted. Due to the use of signals, users don't have to add or modify <code>save</code> or <code>delete</code> methods on their models to have this management done for them, they just have to let django-mptt know which models they want it to manage.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO DO TUPL UNPACK IN A TEMPLAT FOR LOOP
    </pattern>
    <template>
<![CDATA[<p>it would be best if you construct your data like {note the '(' and ')' can be exchanged for '[' and ']' repectively, one being for tuples, one for lists}</p><br/><br/><pre><code>[ (Product_Type_1, ( product_1, product_2 )),<br/>   (Product_Type_2, ( product_3, product_4 )) ]<br/></code></pre><br/><br/><p>and have the template do this:</p><br/><br/><pre><code>{% for product_type, products in product_type_list %}<br/>    {{ product_type }}<br/>    {% for product in products %}<br/>        {{ product }}<br/>    {% endfor %}<br/>{% endfor %}<br/></code></pre><br/><br/><p>the way tuples/lists are unpacked in for loops is based on the item returned by the list iterator.<br/>each iteration only one item was returned. the first time around the loop, Product_Type_1, the second your list of products... </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSU PLONE
    </pattern>
    <template>
<![CDATA[<h2>Plone is a CMS</h2><br/><br/><p>Plone is a <a href="http://en.wikipedia.org/wiki/Content%5Fmanagement%5Fsystem" rel="nofollow">Content Management System</a>. It has a lot of features built-in and you have a working website with workflows, write access, right management, content management and a strong back office out of the box.</p><br/><br/><p>But the question is, do you need this? </p><br/><br/><p>Plone is great if you need these features because they are tedious to code and it spares your time so you can focus on the other parts of the apps.</p><br/><br/><p>The trouble is that Plone is really complex to deeply tweak (my company works 100% with Plone so I can tell...). You can customize everything, but getting your staff to become Plone experts is long and expensive.</p><br/><br/><p>What's more, using Plone implies using Zope, which includes the good stuff (Zope admin, the rollback features, cache, etc) and the nasty stuffs (it's resource intensive, you have to deal with <a href="http://en.wikipedia.org/wiki/ZODB" rel="nofollow">ZODB</a>...).</p><br/><br/><h2>Django is a Framework</h2><br/><br/><p>Running the Django <a href="http://en.wikipedia.org/wiki/Software%5Fframework" rel="nofollow">framework</a>, you have nothing. Well, almost nothing (you can generate an admin BO) but a ton of bricks that are easy to make work together.</p><br/><br/><p>With Django, it takes more time to actually have a website, but it's far easier to tweak since you can understand and control everything (hey, you made it yourself!), then plug it to anything.</p><br/><br/><p>Django is really intuitive and well documented, the learning curve is smooth. If you don't need a working app out of the box, but you want to hack some really specific features (meaning, not another <a href="http://en.wikipedia.org/wiki/Create,%5Fread,%5Fupdate%5Fand%5Fdelete" rel="nofollow">CRUD</a> app), you may want to use it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A CASE FOR DJANGO OR RUBI ON RAIL TO NON TECHN CLIENT
    </pattern>
    <template>
<![CDATA[<p>It's easier to ask forgiveness than permission.</p><br/><br/><p>First, build the initial release in Django.  Quickly.  Build the model well (really well!).  But use as much default admin functionality as you can.</p><br/><br/><p>Spend time only only reporting and display pages where the HTML might actually matter to the presentation.</p><br/><br/><p>Show this and they'll only want more.  Once they've gotten addicted to fast turnaround and correct out-of-the box operation, you can discuss technology with them.  By then it won't matter any more.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERYSET ORDER BY METHOD
    </pattern>
    <template>
<![CDATA[<p>Oh, of course I forget about new aggregation support in Django and its <code>annotate</code> functionality.</p><br/><br/><p>So query may look like this:</p><br/><br/><pre><code>Contest.objects.get(pk=id).image_set.annotate(score=Sum('vote__value')).order_by( 'score' )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL A MODEL INSTANC IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It sounds like what you're asking about involves serializing the data structure of a Django model instance for interoperability.  The other posters are correct: if you wanted the serialized form to be used with a python application that can query the database via Django's api, then you would wan to serialize a queryset with one object.  If, on the other hand, what you need is a way to re-inflate the model instance somewhere else without touching the database or without using Django, then you have a little bit of work to do.</p><br/><br/><p>Here's what I do:</p><br/><br/><p>First, I use <a href="http://deron.meranda.us/python/demjson/" rel="nofollow"><code>demjson</code></a> for the conversion.  It happened to be what I found first, but it might not be the best.  My implementation depends on one of its features, but there should be similar ways with other converters.</p><br/><br/><p>Second, implement a <code>json_equivalent</code> method on all models that you might need serialized.  This is a magic method for <code>demjson</code>, but it's probably something you're going to want to think about no matter what implementation you choose.  The idea is that you return an object that is directly convertible to <code>json</code> (i.e. an array or dictionary).  If you really want to do this automatically:</p><br/><br/><pre><code>def json_equivalent(self):<br/>    dictionary = {}<br/>    for field in self._meta.get_all_field_names()<br/>        dictionary[field] = self.__getattribute__(field)<br/>    return dictionary<br/></code></pre><br/><br/><p>This will not be helpful to you unless you have a completely flat data structure (no <code>ForeignKeys</code>, only numbers and strings in the database, etc.).  Otherwise, you should seriously think about the right way to implement this method.</p><br/><br/><p>Third, call <code>demjson.JSON.encode(instance)</code> and you have what you want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON SERIAL A PYTHON DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>The Django serializers module is designed to serialize Django ORM objects. If you want to encode a regular Python dictionary you should use simplejson, which ships with Django in case you don't have it installed already.</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>def json_response(something):<br/>    return HttpResponse(simplejson.dumps(something))<br/></code></pre><br/><br/><p>I'd suggest sending it back with an application/javascript Content-Type header (you could also use application/json but that will prevent you from debugging in your browser):</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>def json_response(something):<br/>    return HttpResponse(<br/>        simplejson.dumps(something),<br/>        content_type = 'application/javascript; charset=utf8'<br/>    )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HART IN DJANGO WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>Another choice is <a href="http://linil.wordpress.com/2008/09/16/cairoplot-11/" rel="nofollow">CairoPlot</a>.</p><br/><br/><p>We picked matplotlib over the others for some serious graphing inside one of our django apps, primarily because it was the only one that gave us exactly the kind of control we needed.</p><br/><br/><p>Performance generating PNG's was fine for us but... it was a highly specialized app with less than 10 logins a day.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND DEPLOY A COMET SERVER
    </pattern>
    <template>
<![CDATA[<p>I would recommend looking into Twisted, their twisted.web server, and the comet work done on top of it at Divmod. They can handle far more concurrent connections than traditional thread or process based servers, which is exactly what you need for something like this. And, yes, I've architected systems using Twisted for COMET stuff, while using other things for the more front-facing web applications beside it. It works out well with each part doing what it does best.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL ANALYT WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>First, create a way to have your development and production servers pull settings from different files, say dev.py and prod.py.  There are lots of ways to do this.</p><br/><br/><p>Then, create a setting, <code>GOOGLE_ANALYTICS_KEY</code>.  In dev.py set it to the empty string.  In prod.py, set it to your key, something like "UA-124465-1".  Create a <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors" rel="nofollow">context processor</a> to add this setting to all your template contexts, either as <code>GOOGLE_ANALYTICS_KEY</code>, or just go ahead and add your settings module.  Then, in your template, use it to conditionally include your analytics code:</p><br/><br/><pre><code>{% if settings.GOOGLE_ANALYTICS_KEY %}<br/>&lt;script&gt; blah blah {{settings.GOOGLE_ANALYTICS_KEY}} blah blah &lt;/script&gt;<br/>{% endif %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CA N T SEE CSS FILE
    </pattern>
    <template>
<![CDATA[<p>in the "development only" block in your urls.py you need to change</p><br/><br/><pre><code>(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve',<br/>    {'document_root': '/media'}),<br/></code></pre><br/><br/><p>to...</p><br/><br/><pre><code>(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve',<br/>    {'document_root': settings.MEDIA_ROOT}),<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM INHERIT AND ORDER OF FORM FIELD
    </pattern>
    <template>
<![CDATA[<p>I had this same problem and I found another technique for reordering fields in the <a href="http://code.djangoproject.com/wiki/CookBookNewFormsFieldOrdering" rel="nofollow">Django CookBook</a>:</p><br/><br/><pre><code>class edit_form(forms.Form):<br/>    summary = forms.CharField()<br/>    description = forms.CharField(widget=forms.TextArea)<br/><br/><br/>class create_form(edit_form):<br/>    name = forms.CharField()<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(edit_form, self).__init__(*args, **kwargs)<br/>        self.fields.keyOrder = ['name', 'summary', 'description']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK AND RESOURC FOR LEARN TO DEVELOP DEPLOY AND OR HOST DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.apress.com/book/view/1430219386" rel="nofollow">Practical Django projects, second edition</a> by <a href="http://www.b-list.org/" rel="nofollow">James Bennett</a> the <a href="http://uswaretech.com/blog/2008/04/interview-with-james-bennett-django-release-manager/" rel="nofollow">release manager of Django</a></p><br/><br/><p>The book covers building applications, adding features, practical development techniques like using DVCS, automated build deploy tools and there is also a dedicated chapter on reusable development and how to submit to <a href="http://en.wikipedia.org/wiki/Python_Project_Index" rel="nofollow">PyPI</a>.</p><br/><br/><p>The book also gives good tips on Python wherever necessary; that way you can develop a good understanding of Python too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARTER DJANGO BOOK RECOMMEND + DJANGO REAL WORLD ADVIC
    </pattern>
    <template>
<![CDATA[<p>As for books:</p><br/><br/><ul><br/><li>There's the free <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">Django Book</a></li><br/><li>I really like <a href="http://rads.stackoverflow.com/amzn/click/1430219386" rel="nofollow">Practical Django Projects</a></li><br/><li>Amazon has a couple <a href="http://www.amazon.com/s/ref=nb%5Fss%5Fb%5F2%5F6?url=search-alias%3Dstripbooks&amp;field-keywords=django+web+development&amp;sprefix=django" rel="nofollow">more</a>. Generally, if it's written or edited by one of the Django core devs, it should be worth the money. But pay attention that you don't buy an edition for an obsolete Django version (e.g. 0.96)</li><br/><li>Like others said, the official documentation is top notch, and #django on freenode and the <a href="http://groups.google.com/group/django-users" rel="nofollow">mailing list</a> can help with specific problems</li><br/></ul><br/><br/><p>And the second question:</p><br/><br/><ul><br/><li>before developing an app yourself, look if there isn't already something similar on <a href="http://code.google.com/hosting/search?q=django&amp;projectsearch=Search+projects" rel="nofollow">Google Code</a>, <a href="http://github.com/search?type=Repositories&amp;q=django" rel="nofollow">GitHub</a> or <a href="http://bitbucket.org/repo/all/?name=django" rel="nofollow">Bitbucket</a>. There's an incredible number of useful django apps around</li><br/><li>learn to love <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/" rel="nofollow">generic views</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS. PYLON
    </pattern>
    <template>
<![CDATA[<p>I'm using Pylons right now. The flexibility is great. It's all about best-of-breed rather than The Django Way. It's more oriented toward custom application development, as opposed to content-based web sites. You can certainly do content sites in it; it's just not specifically designed for them.</p><br/><br/><p>On the other hand, you do end up needing to read a lot of different documentation, in different places, of different quality, to grok all the components. Whereas one of the nice things about Django is that for all the core components, you just read "the" documentation.</p><br/><br/><p>The Mako (templates) + SQLAlchemy (DB &amp; ORM) combo is really nice, though. Back when I used Django, I replaced its templating and DB system with them (giving up some of its integration features in the process) and they are standard with Pylons. Mako lets you use Python expressions, which is nice because even though you should separate business logic from design, dynamic sites do require significant display logic, and Django's template tags are clumsy to work with. SQLAlchemy lets you work with the same data model anywhere from the raw SQL level to the object-oriented ORM level.</p><br/><br/><p>I think it's worth the time to at least go through the <a href="http://pylonshq.com/docs/en/0.9.7/" rel="nofollow">docs</a> and do the QuickWiki tutorial.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HERRYPI VS DJANGO
    </pattern>
    <template>
<![CDATA[<p>They're not exactly comparable. CherryPy provides url routing and a request/response abstraction, which makes prototyping very easy (although I find vanilla mod_python just as convenient).  Django is a complete web application "stack", including a templating system and an object-relational mapper.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATH TO LEARN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>The best kind of learning is learning by doing. Try to start your project. If possible, choose a small part to deploy first just to keep you motivated. If you get stuck somewhere:</p><br/><br/><ol><br/><li>Search Google</li><br/><li>Go back to the reference sites that you have already found</li><br/><li>Ask SO :-)</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEAL WITH THE PONI IN PYTHON COMMUN
    </pattern>
    <template>
<![CDATA[<p>See also <a href="http://avalonstar.com/blog/2010/jan/13/for-the-love-of-ponies/" rel="nofollow">Bryan Veloso's post about the pony mascot image</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG USE HTTP POST
    </pattern>
    <template>
<![CDATA[<p>I'm going to assume that you know the path and filename of the image that you want to upload. Add this string to your <code>NameValuePair</code> using <code>image</code> as the key-name.</p><br/><br/><p>Sending images can be done using the <a href="http://hc.apache.org/downloads.cgi" rel="nofollow" title="HttpComponents library">HttpComponents libraries</a>. Download the latest HttpClient  (currently <a href="http://apache.cs.uu.nl/dist/httpcomponents/httpclient/binary/httpcomponents-client-4.0.1-bin-with-dependencies.zip" rel="nofollow" title="HttpClient 4.0.1 - Binary with dependencies">4.0.1</a>) binary with dependencies package and copy <code>apache-mime4j-0.6.jar</code> and <code>httpmime-4.0.1.jar</code> to your project and add them to your Java build path.</p><br/><br/><p>You will need to add the following imports to your class.</p><br/><br/><pre><code>import org.apache.http.entity.mime.HttpMultipartMode;<br/>import org.apache.http.entity.mime.MultipartEntity;<br/>import org.apache.http.entity.mime.content.FileBody;<br/>import org.apache.http.entity.mime.content.StringBody;<br/></code></pre><br/><br/><p>Now you can create a <code>MultipartEntity</code> to attach an image to your POST request. The following code shows an example of how to do this:</p><br/><br/><pre><code>public void post(String url, List&lt;NameValuePair&gt; nameValuePairs) {<br/>    HttpClient httpClient = new DefaultHttpClient();<br/>    HttpContext localContext = new BasicHttpContext();<br/>    HttpPost httpPost = new HttpPost(url);<br/><br/>    try {<br/>        MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);<br/><br/>        for(int index=0; index &lt; nameValuePairs.size(); index++) {<br/>            if(nameValuePairs.get(index).getName().equalsIgnoreCase("image")) {<br/>                // If the key equals to "image", we use FileBody to transfer the data<br/>                entity.addPart(nameValuePairs.get(index).getName(), new FileBody(new File (nameValuePairs.get(index).getValue())));<br/>            } else {<br/>                // Normal string data<br/>                entity.addPart(nameValuePairs.get(index).getName(), new StringBody(nameValuePairs.get(index).getValue()));<br/>            }<br/>        }<br/><br/>        httpPost.setEntity(entity);<br/><br/>        HttpResponse response = httpClient.execute(httpPost, localContext);<br/>    } catch (IOException e) {<br/>        e.printStackTrace();<br/>    }<br/>}<br/></code></pre><br/><br/><p>I hope this helps you a bit in the right direction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLALCHEMI HAVE AN EQUIVAL OF DJANGO S GET OR CR
    </pattern>
    <template>
<![CDATA[<p>That's basically the way to do it, there is no shortcut readily available AFAIK.</p><br/><br/><p>You could generalize it ofcourse:</p><br/><br/><pre><code>def get_or_create(session, model, defaults=None, **kwargs):<br/>    instance = session.Query(model.filter_by(**kwargs)).first()<br/>    if instance:<br/>        return instance, False<br/>    else:<br/>        params = dict((k, v) for k, v in kwargs.iteritems() if not isinstance(v, ClauseElement))<br/>        params.update(defaults)<br/>        instance = model(**params)<br/>        session.add(instance)<br/>        return instance, True<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS A WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Let's talk for a moment about things that aren't a web framework.</p><br/><br/><p>At the most basic level of the web you have a webpage. It's typically a dumb page with some text on it, maybe an embedded video or a few images. It doesn't (or at least ideally shouldn't) care where the stuff it displays is coming from. You don't need any scripts, databases, etc. in order to have a static webpage. Typical tools used: HTML, CSS, Javascript.</p><br/><br/><p>Then you have content management systems (CMS) such as, say, Wordpress. They add a bit more functionality to your site, but really all they do is provide you with a way to manage your collection of webpages -- create ones on the fly, etc. You can use them as is and interact with CMSs through the administration pages they provide. You can extend some of them (for example, Wordpress has a plugin architecture), but you're typically not concerned with how they work or with their specific API.</p><br/><br/><p>And <em>then</em> you have web frameworks. They allow you to do everything else in a structured manner. You don't need to have a framework to create a database-powered site, but it can help. Frameworks buy you a lot of convenience through convention. For example, if you want to add a new section to your site, you can create a "module", upload it to a known location, maybe update a config file, and it more or less wires itself into your site.</p><br/><br/><p>The framework is what can take care of your database details or pulling data in from other services (or providing data through a service). It can build pages for you automatically based on a template. It can take care of "prettifying" your links through URL routing. It can help you make sure none of your site links ever break -- by dynamically figuring out where pages are instead of you manually hardcoding links. They allow you to separate your back-end concerns (business logic, data access, authentication, etc) from your views, allowing you to easily update your page design if you feel like it.</p><br/><br/><p>To specifically address your questions...</p><br/><br/><ol><br/><li><p>Web frameworks generate HTML pages served over HTTP. There's no particular magic here. You could often write the same pages yourself, but frameworks allow you to, for example, define a template and have a different page displayed based on your needs without your direct manual involvement.</p></li><br/><li><p>Web frameworks don't store data. They can access or provide it, but they aren't themselves a database of any kind. Web frameworks live on the server side and serve up pages to the client and process client's input.</p></li><br/><li><p>Frameworks like Django and Rails are used on the back-end. There are other frameworks like jQuery that can be used to script client-side activities, but they aren't web frameworks in the same sense. Usually when someone says "web framework", they mean server-side.</p></li><br/></ol><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT TAG CONFLICT WITH DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://docs.djangoproject.com/en/1.2/ref/templates/builtins/#templatetag" rel="nofollow"><code>templatetag</code></a> template tag to render the brackets:</p><br/><br/><pre><code>{% templatetag openvariable %}each(i,cond) conditions.data{% templatetag closevariable %}<br/></code></pre><br/><br/><p>It's a bit fiddly, which is why a <code>raw</code> template tag has been proposed for Django 1.3.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS UTF 8 CONFUS IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>what is a "Unicode string" in Python? Does that mean UCS-2?</p><br/></blockquote><br/><br/><p>Unicode strings in Python are stored internally either as UCS-2 (fixed-length 16-bit representation, almost the same as UTF-16) or UCS-4/UTF-32 (fixed-length 32-bit representation). It's a compile-time option; on Windows it's always UTF-16 whilst many Linux distributions set UTF-32 ('wide mode') for their versions of Python.</p><br/><br/><p>You are generally not supposed to care: you will see Unicode code-points as single elements in your strings and you won't know whether they're stored as two or four bytes. If you're in a UTF-16 build and you need to handle characters outside the Basic Multilingual Plane you'll be Doing It Wrong, but that's still very rare, and users who really need the extra characters should be compiling wide builds.</p><br/><br/><blockquote><br/>  <p>plain wrong, or is it?</p><br/></blockquote><br/><br/><p>Yes, it's quite wrong. To be fair I think that tutorial is rather old; it probably pre-dates wide Unicode strings, if not Unicode 3.1 (the version that introduced characters outside the Basic Multilingual Plane).</p><br/><br/><p>There is an additional source of confusion stemming from Windows's habit of using the term "Unicode" to mean, specifically, the UTF-16LE encoding that NT uses internally. People from Microsoftland may often copy this somewhat misleading habit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIRTI FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You haven't said very much about your specific use case or needs.  In particular, it would be helpful to know what you need to do with the change information (how long do you need to store it?).  If you only need to store it for transient purposes, @S.Lott's session solution may be best.  If you want a full audit trail of all changes to your objects stored in the DB, try this <a href="http://code.djangoproject.com/wiki/AuditTrail" rel="nofollow">AuditTrail solution</a>.</p><br/><br/><p><strong>UPDATE</strong>: The AuditTrail code I linked to above is the closest I've seen to a full solution that would work for your case, though it has some limitations (doesn't work at all for ManyToMany fields).  It will store all previous versions of your objects in the DB, so the admin could roll back to any previous version.  You'd have to work with it a bit if you want the change to not take effect until approved.</p><br/><br/><p>You could also build a custom solution based on something like @Armin Ronacher's DiffingMixin.  You'd store the diff dictionary (maybe pickled?) in a table for the admin to review later and apply if desired (you'd need to write the code to take the diff dictionary and apply it to an instance).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD A STACKTRAC IN MY DJANGO 500.HTML PAGE
    </pattern>
    <template>
<![CDATA[<p>Automatically log your 500s, that way:</p><br/><br/><ul><br/><li>You know when they occur.</li><br/><li>You don't need to rely on users sending you stacktraces.</li><br/></ul><br/><br/><p>Joel recommends even going so far as automatically creating tickets in your bug tracker when your application experiences a failure. Personally, I create a (private) RSS feed with the stacktraces, urls, etc. that the developers can subscribe to.</p><br/><br/><p>Showing stack traces  to your users on the other hand could possibly leak information that malicious users could use to attack your site. Overly detailed error messages are one of the classic stepping stones to SQL injection attacks.</p><br/><br/><p><em>Edit</em> (added code sample to capture traceback):</p><br/><br/><p>You can get the exception information from the sys.exc_info call. While formatting the traceback for display comes from the traceback module:</p><br/><br/><pre><code>import traceback<br/>import sys<br/><br/>try:<br/>	raise Exception("Message")<br/>except:<br/>	type, value, tb = sys.exc_info()<br/>	print &gt;&gt; sys.stderr,  type.__name__, ":", value<br/>	print &gt;&gt; sys.stderr, '\n'.join(traceback.format_tb(tb))<br/></code></pre><br/><br/><p>Prints:</p><br/><br/><pre><code>Exception : Message<br/>  File "exception.py", line 5, in &lt;module&gt;<br/>    raise Exception("Message")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RE US A REUSABL APP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>In general, the only thing required to use a reusable app is to make sure it's on the PYTHONPATH, so that you can import it from Python code.  In most cases (if the author follows best practice), the reusable app tarball or bundle will contain a top-level directory with docs, a README, a setup.py, and then a subdirectory containing the actual app (see <a href="http://code.google.com/p/django-voting/source/browse/#svn/trunk" rel="nofollow">django-voting</a> for an example; the app itself is in the "voting" subdirectory).  This subdirectory is what needs to be placed in your Python path.  Possible methods for doing that include:</p><br/><br/><ul><br/><li>installing the app into your site-packages directory using "setup.py install", if the app comes with a setup.py and you have root privileges</li><br/><li>a symbolic link to the site-packages directory (also requires root privileges)</li><br/><li>using software like <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a> to create a "virtual Python environment" that has its own site-packages directory, and placing or symlinking the app there (highly recommended over all the "global installation" options, if you value your future sanity)</li><br/><li>placing the application in some directory where you intend to place various apps, and then adding that directory to the PYTHONPATH environment variable</li><br/></ul><br/><br/><p>You'll know you've got it in the right place if you can fire up a Python interpreter and "import voting" (for example) without getting an ImportError.</p><br/><br/><p>On a server where you have FTP access only, your only option is really the last one, and they have to set it up for you.  If they claim to support Django they must provide <em>some</em> place where you can upload packages and they will be available for importing in Python.  Without knowing details of your webhost, it's impossible to say how they structure that for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONLI THE DB PART OF DJANGO
    </pattern>
    <template>
<![CDATA[<p>The short answer is: no, you can't use the Django ORM separately from Django.</p><br/><br/><p>The long answer is: yes, you can if you are willing to load large parts of Django along with it. For example, the database connection that is used by Django is opened when a request to Django occurs. This happens when a signal is sent so you could ostensibly send this signal to open the connection without using the specific request mechanism. Also, you'd need to setup the various applications and settings for the Django project. </p><br/><br/><p>Ultimately, it probably isn't worth your time. <a href="http://www.sqlalchemy.org/" rel="nofollow">SQL Alchemy</a> is a relatively well known Python ORM, which is actually more powerful than Django's anyway since it supports multiple database connections and connection pooling and other good stuff.</p><br/><br/><p><hr /></p><br/><br/><p><strong>Edit:</strong> in response to James' criticism elsewhere, I will clarify what I described in my original post. While it is gratifying that a major Django contributor has called me out, I still think I'm right :)</p><br/><br/><p>First off, consider what needs to be done to use Django's ORM separate from any other part. You use one of the <a href="http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/" rel="nofollow">methods</a> described by James for doing a basic setup of Django. But a number of these methods don't allow for using the <code>syncdb</code> command, which is required to create the tables for your models. A settings.py file is needed for this, with variables not just for <code>DATABASE_*</code>, but also <code>INSTALLED_APPLICATIONS</code> with the correct paths to all models.py files.</p><br/><br/><p>It is possible to roll your own solution to use <code>syncdb</code> without a settings.py, but it requires some advanced knowledge of Django. Of course, you don't need to use <code>syncdb</code>; the tables can be created independently of the models. But it is an aspect of the ORM that is not available unless you put some effort into setup.</p><br/><br/><p>Secondly, consider how you would create your queries to the DB with the standard <code>Model.objects.filter()</code> call. If this is done as part of a view, it's very simple: construct the <code>QuerySet</code> and view the instances. For example:</p><br/><br/><pre><code>tag_query = Tag.objects.filter( name='stackoverflow' )<br/>if( tag_query.count() &gt; 0 ):<br/>    tag = tag_query[0]<br/>    tag.name = 'stackoverflowed'<br/>    tag.save()<br/></code></pre><br/><br/><p>Nice, simple and clean. Now, without the crutch of Django's request/response chaining system, you need to initialise the database connection, make the query, then close the connection. So the above example becomes:</p><br/><br/><pre><code>from django.db import reset_queries, close_connection, _rollback_on_exception<br/>reset_queries()<br/>try:<br/>    tag_query = Tag.objects.filter( name='stackoverflow' )<br/>    if( tag_query.count() &gt; 0 ):<br/>        tag = tag_query[0]<br/>        tag.name = 'stackoverflowed'<br/>        tag.save()<br/>except:<br/>    _rollback_on_exception()<br/>finally:<br/>    close_connection()<br/></code></pre><br/><br/><p>The database connection management can also be done via Django signals. All of the above is defined in <a href="http://code.djangoproject.com/browser/django/trunk/django/db/%5F%5Finit%5F%5F.py" rel="nofollow">django/db/<strong>init</strong>.py</a>. Other ORMs also have this sort of connection management, but you don't need to dig into their source to find out how to do it. SQL Alchemy's connection management system is documented in the <a href="http://www.sqlalchemy.org/docs/05/ormtutorial.html" rel="nofollow">tutorials</a> and elsewhere.</p><br/><br/><p>Finally, you need to keep in mind that the database connection object is local to the current thread at all times, which may or may not limit you depending on your requirements. If your application is not stateless, like Django, but persistent, you may hit threading issues.</p><br/><br/><p>In conclusion, it is a matter of opinion. In my opinion, both the limitations of, and the setup required for, Django's ORM separate from the framework is too much of a liability. There are perfectly viable dedicated ORM solutions available elsewhere that are designed for library usage. Django's is not. </p><br/><br/><p>Don't think that all of the above shows I dislike Django and all it's workings, I really do like Django a lot! But I'm realistic about what it's capabilities are and being an ORM library is not one of them.</p><br/><br/><p>P.S. Multiple database connection support is being <a href="http://code.djangoproject.com/ticket/1142" rel="nofollow">worked</a> on. But it's not there now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAYMENT PROCCESS
    </pattern>
    <template>
<![CDATA[<p>The most developed Django solution is <a href="http://www.satchmoproject.com/docs/svn/" rel="nofollow">Satchmo</a> with support for Authorize.Net, TrustCommerce, CyberSource, PayPal, Google Checkout, and Protx.</p><br/><br/><p>The new kid on the Django block is <a href="http://code.google.com/p/django-lfs/" rel="nofollow">django-lfs</a> which looks like only support for PayPal at the moment, and even that may not be complete.</p><br/><br/><p>For general Python the main player is <a href="http://code.google.com/p/getpaid/" rel="nofollow">getpaid</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAG CHAIN
    </pattern>
    <template>
<![CDATA[<p>See this snippet on Djangosnippets: <a href="http://www.djangosnippets.org/snippets/734/">http://www.djangosnippets.org/snippets/734/</a></p><br/><br/><p>Instead of putting your custom methods in a manager, you subclass the queryset itself. It's very easy and works perfectly. The only issue I've had is with model inheritance, you always have to define the manager in model subclasses (just: "objects = QuerySetManager()" in the subclass), even though they will inherit the queryset. This will make more sense once you are using QuerySetManager.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDITOR FOR DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I haven't tried it personally, but a co-worker uses the free <a href="http://www.activestate.com/komodo%5Fedit/features/" rel="nofollow">ActiveState Komodo Edit</a> to edit Django templates, and the page I linked claims support for Django template editing.</p><br/><br/><p>There's also <a href="http://code.google.com/p/netbeans-django/" rel="nofollow">netbeans-django</a> that is building a Django plugin for Netbeans, but no idea how complete or how well it works.</p><br/><br/><p>I've read that TextMate has a "Django bundle" for editing code and templates if you're on a Mac.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AND GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Adding the Facebook directory from the PyFacebook install directory to the app-engine-patch application allows you to add 'facebook.djangofb.FacebookMiddleware', to the MIDDLEWARE_CLASSES in settings.py. Then your view can use 'import facebook.djangofb as facebook' and '@facebook.require_login().'</p><br/><br/><p>I haven't gone end to end, but when I tried to display the view preceded by '@facebook.require_login()', I was redirected to the Facebook login.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTRIBUT INTO DJANGO MODEL S META CLASS
    </pattern>
    <template>
<![CDATA[<p>I don't know about elegant, but one pragmatic way is:</p><br/><br/><pre><code>import django.db.models.options as options<br/><br/>options.DEFAULT_NAMES = options.DEFAULT_NAMES + ('schema',)<br/></code></pre><br/><br/><p>Obviously, this would break if Django ever added a 'schema' attribute of its own. But hey, it's a thought...you could always pick an attribute name which is less likely to clash.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO INTEGERFIELD BY CHOIC ... NAME
    </pattern>
    <template>
<![CDATA[<p>Do as <a href="http://www.b-list.org/weblog/2007/nov/02/handle-choices-right-way/" rel="nofollow">seen here</a>. Then you can use a word that represents the proper integer.</p><br/><br/><p>Like so:</p><br/><br/><pre><code>LOW = 0<br/>NORMAL = 1<br/>HIGH = 2<br/>STATUS_CHOICES = (<br/>    (LOW, 'Low'),<br/>    (NORMAL, 'Normal'),<br/>    (HIGH, 'High'),<br/>)<br/></code></pre><br/><br/><p>Then they are still integers in the DB.</p><br/><br/><p>Usage would be <code>thing.priority = Thing.NORMAL</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV WITH ECLIPS ( GALILEO )
    </pattern>
    <template>
<![CDATA[<p>I'm not sure about this, because you don't say that you're having problems with this, but here is some things to you:</p><br/><br/><ul><br/><li><a href="http://10thvirtue.wordpress.com/2009/05/29/python-workbench/" rel="nofollow">Python Workbench</a></li><br/><li><a href="http://www.stuartellis.eu/articles/python-development-windows/" rel="nofollow">Setting Up a Python Development Environment on Windows</a></li><br/><li><a href="http://stackoverflow.com/questions/959479/i-need-a-beginners-guide-to-setting-up-windows-for-python-development/959494">I need a beginners guide to setting up windows for python development</a></li><br/><li><a href="http://blog.vlku.com/index.php/2009/06/10/djangoeclipse-with-code-complete-screencast/" rel="nofollow">Django+Eclipse with Code Complete Screencast</a></li><br/><li><a href="http://stackoverflow.com/questions/540538/pydev-and-pylons-inside-virtual-environment-auto-completion-wont-work">Pydev and Pylons inside virtual environment</a></li><br/><li><a href="http://en.wordpress.com/tag/pydev/" rel="nofollow">Blogs about: Pydev</a></li><br/><li><a href="http://dbaktiar.wordpress.com/2009/07/18/pydev1-4-7ongalileo/" rel="nofollow">PyDev 1.4.7 on Eclipse Galileo</a></li><br/><li><a href="http://www.magpiebrain.com/blog/2006/10/09/using-eclipse-and-pydev-for-django/" rel="nofollow">Using Eclipse and PyDev for django</a></li><br/><li><a href="http://penkin.wordpress.com/2007/08/20/django-with-pydev/" rel="nofollow">Django with PyDev</a></li><br/><li><a href="http://www.youtube.com/watch?v=Z3frAur-JUY" rel="nofollow">Eclipse PyDev com Django</a></li><br/></ul><br/><br/><p>Hope i'm helping you!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHETHER MY DJANGO APPLIC IS RUN ON DEVELOP SERVER OR NOT
    </pattern>
    <template>
<![CDATA[<pre><code>server = request.META.get('wsgi.file_wrapper', None)<br/>if server is not None and server.__module__ == 'django.core.servers.basehttp':<br/>    print 'inside dev'<br/></code></pre><br/><br/><p>Of course, <code>wsgi.file_wrapper</code> might be set on META, and have a class from a module named <code>django.core.servers.basehttp</code> by extreme coincidence on another server environment, but I hope this will have you covered.</p><br/><br/><p>By the way, I discovered this by making a syntatically invalid template while running on the development server, and searched for interesting stuff on the <code>Traceback</code> and the <code>Request information</code> sections, so I'm just editing my answer to corroborate with Nate's ideas.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS PHP + FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Ajax and reporting and Django go quite well together, so if you find yourself more comfortable at Python (no surprise there) and would like a well rounded framework to code in - Django is the way to go. It does not get in your way while being pretty full-featured, we have production Ajax sites with heavy reporting (all custom though) and never regretted going with Django over RoR or especially PHP.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI BE PASS TO DJANGO MODEL ON CREAT
    </pattern>
    <template>
<![CDATA[<p>If <code>title</code> and <code>body</code> are fields in your model, then <a href="http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">you can deliver the keyword arguments in your dictionary using the ** operator</a>.</p><br/><br/><p>Assuming your model is called <code>MyModel</code>:</p><br/><br/><pre><code># create instance of model<br/>m = MyModel(**data_dict)<br/># don't forget to save to database!<br/>m.save()<br/></code></pre><br/><br/><p>As for your second question, the dictionary has to be the final argument. Again, <code>extra</code> and <code>extra2</code> should be fields in the model.</p><br/><br/><pre><code>m2 =MyModel(extra='hello', extra2='world', **data_dict)<br/>m2.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTO NOW AND AUTO NOW ADD
    </pattern>
    <template>
<![CDATA[<p>Any field with the <code>auto_now</code> attribute set will also inherit <code>editable=False</code> and therefore will not show up in the admin panel.  There has been talk in the past about making the <code>auto_now</code> and <code>auto_now_add</code> arguments go away, and although they still exist, I feel you're better off just using a custom <code>save()</code> method.</p><br/><br/><p>So, to make this work properly, I would recommend not using <code>auto_now</code> or <code>auto_now_add</code> and instead  define your own <code>save()</code> method to make sure that <code>created</code> is only updated if <code>id</code> is not set (such as when the item is first created), and have it update <code>modified</code> every time the item is saved.</p><br/><br/><p>I have done the exact same thing with other projects I have written using Django, and so your <code>save()</code> would look like this:</p><br/><br/><pre><code>import datetime<br/><br/>class User(models.Model):<br/>    created     = models.DateTimeField(editable=False)<br/>    modified    = models.DateTimeField()<br/><br/>    def save(self, *args, **kwargs):<br/>        ''' On save, update timestamps '''<br/>        if not self.id:<br/>            self.created = datetime.datetime.today()<br/>        self.modified = datetime.datetime.today()<br/>        super(User, self).save(*args, **kwargs)<br/></code></pre><br/><br/><p>Hope this helps!</p><br/><br/><p><strong>Edit in response to comments:</strong></p><br/><br/><p>The reason why I just stick with overloading <code>save()</code> vs. relying on these field arguments is two-fold:</p><br/><br/><ol><br/><li>The aforementioned ups and downs with their reliability.  These arguments are heavily reliant on the way each type of database that Django knows how to interact with treats a date/time stamp field, and seems to break and/or change between every release. (Which I believe is the impetus behind the call to have them removed altogether).</li><br/><li>The fact that they only work on DateField, DateTimeField, and TimeField, and by using this technique you are able to automatically populate any field type every time an item is saved.</li><br/></ol><br/><br/><p>To address why the OP saw the error, I don't know exactly, but it looks like <code>created</code> isn't even being populated at all, despite having <code>auto_now_add=True</code>.  To me it stands out as a bug, and underscores item #1 in my little list above:  <code>auto_now</code> and <code>auto_now_add</code> are flaky at best. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD FILE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>All the answers are focusing on validating files. This is pretty much impossible.</p><br/><br/><p>The Django devs aren't asking you to validate whether files can be executed <em>as</em> cgi files. They are just telling you not to put them in a place where they <em>will</em> be executed.</p><br/><br/><p>You should put all Django stuff in a specially Django directory. That Django code directory should not contain static content. <strong>Don't put user files in the Django source repository.</strong></p><br/><br/><p>If you are using Apache2, check out the basic cgi tutorial: <a href="http://httpd.apache.org/docs/2.0/howto/cgi.html" rel="nofollow">http://httpd.apache.org/docs/2.0/howto/cgi.html</a></p><br/><br/><p>Apache2 might be setup to run any files in the <code>ScriptAlias</code> folder. <strong>Don't put user files in the <code>/cgi-bin/</code> or <code>/usr/local/apache2/cgi-bin/</code> folders.</strong></p><br/><br/><p>Apache2 might be set to server cgi files, depending on the  <code>AddHandler cgi-script</code> settings. <strong>Don't let the users submit files with extensions like <code>.cgi</code> or  <code>.pl</code>.</strong></p><br/><br/><p>However, you do need to <strong>sanitize user submitted files so they are safe to run on other clients' machines</strong>. <strong>Submitted HTML is unsafe to other users.</strong> It won't hurt your server. Your server will just spit it back at whoever requests it. Get a HTML sanitizer.</p><br/><br/><p>Also, <strong>SVG may be unsafe</strong>. It's had bugs in the past. SVG is an XML document with javascript in it, so it can be malicious. </p><br/><br/><p>PDF is ... tricky. You could convert it to an image (if you really had to), or provide an image preview (and let users download at their own risk), but it would be a pain for people trying to use it. </p><br/><br/><p><strong>Consider a white-list of files that are OK.</strong> A virus embedded in a gif, jpeg or png file will just look like a corrupt picture (or fail to display). If you want to be paranoid, convert them all to a standard format using PIL (hey, you could also check sizes). Sanitized HTML should be OK (stripping out script tags isn't rocket science). If the sanitization is sucking cycles (or you're just cautious), you could put it on a separate server, I guess.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GAE AND DJANGO WHAT ARE THE BENEFIT
    </pattern>
    <template>
<![CDATA[<p>With Django on GAE, you get all the benefits (and also the non-benefits) of GAE. The benefits are mainly automatic scalability and high reliability at a very low cost.</p><br/><br/><p>You may want to start by checking out the following:</p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/1011599/django-on-google-app-engine">Stack Overflow: Django on Google App Engine</a> </li><br/><li><a href="http://stackoverflow.com/questions/1988153/django-and-app-engine">Stack Overflow: Django and App Engine</a></li><br/><li><a href="http://code.google.com/appengine/articles/django.html" rel="nofollow">Google Code: Running Django on Google App Engine</a></li><br/><li><a href="http://www.youtube.com/watch?v=v1gTI4BOPUw" rel="nofollow">YouTube: Google I/O 2008 - Python, Django, and App Engine</a></li><br/><li><a href="http://thomas.broxrost.com/2008/04/08/django-on-google-app-engine/" rel="nofollow">Django on Google App Engine in 13 simple steps</a></li><br/><li><a href="http://code.google.com/appengine/whyappengine.html" rel="nofollow">Google - Why App Engine?</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OAUTH DJANGO LIBRARI
    </pattern>
    <template>
<![CDATA[<p>Not a library at all, but a ready authorization solution is provided by <a href="http://rpxnow.com" rel="nofollow">RPX Now</a>. It could help you. I'm using it in my current project and I can say it saved me much headache and time. Sometimes it happens to be slooow however. Rely or not to rely on it is your choice, of course.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RELAT DJANGO MODEL OBJECT
    </pattern>
    <template>
<![CDATA[<p>This gives you the property names for all related objects:</p><br/><br/><pre><code>links = [rel.get_accessor_name() for rel in a._meta.get_all_related_objects()]<br/></code></pre><br/><br/><p>You can then use something like this to get all related objects:</p><br/><br/><pre><code>for link in links:<br/>    objects = getattr(a, link).all()<br/>    for object in objects:<br/>        # do something with related object instance<br/></code></pre><br/><br/><p>I spent a while trying to figure this out so I could implement a kind of "Observer Pattern" on<br/>one of my models. Hope it's helpful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI USAG GO UP WITH EVERI REQUEST
    </pattern>
    <template>
<![CDATA[<p>I'm afraid I haven't got any definite answers. Graham Dumpleton's tips were most helpfull, but unfortunately he didn't make an answer (just comments), so there is no way to accept his response.</p><br/><br/><p>Although I still haven't fully resolved the issue, here are some basic tips for other people having similar problems:</p><br/><br/><ul><br/><li>Read <a href="http://blog.webfaction.com/tips-to-keep-your-django-mod-python-memory-usage-down" rel="nofollow">Webfaction's post about keeping memory usage down</a></li><br/><li>Make sure the <code>DEBUG</code> setting is set to <code>False</code></li><br/><li>Don't use <code>mod_python</code>, use <code>mod_wsgi</code></li><br/><li>Make sure you use the most recent version od <code>mod_wsgi</code> (Webfaction tend to install older versions)</li><br/><li><a href="http://docs.webfaction.com/software/static.html#serving-static-media" rel="nofollow">Don't use Django to serve static content</a></li><br/><li>Try running <code>mod_wsgi</code> in a daemon mode (Webfaction installs it in embedded mode by default) [thanks Graham Dumpleton for the tip]</li><br/><li>If you run in embeded mode, you can specify "inactivity-timeout=[seconds]" option. It will restart the process after [seconds] of inactivity, helping with increasing memory usage. <a href="http://forum.webfaction.com/viewtopic.php?id=3067" rel="nofollow">Read this forum post for detailed instructions</a>.</li><br/><li><a href="http://fightingrabbits.com/archives/198" rel="nofollow">This script</a> will help you monitor your memory usage easier, and more precisely [thanks ClaudioA for the tip]</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ( FASTCGI APACH MOD WSGI UWSGI GUNICORN )
    </pattern>
    <template>
<![CDATA[<p>Neither have to use threads to be able to handle concurrent requests. It depends on how you configure them. You can use multiple processes where each is single threaded if you want.</p><br/><br/><p>For more background on mod_wsgi process/threading models see:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading</a></p><br/><br/><p>The models are similar albeit that mod_wsgi handles process management itself. What happens in FASTCGI as far as process management depends on what FASTCGI hosting mechanism you are using and you don't say what that is.</p><br/><br/><p>Another difference is that FASTCGI still needs a separate FASTCGI to WSGI bridge such as flup where as mod_wsgi doesn't need any sort of bridge as implements WSGI interface natively.</p><br/><br/><p>Finally, FASTCGI process are an exec/fork of some supervisor process or the web server, dependent on hosting mechanism. In mod_wsgi the processes are a fork only of Apache parent process. In general this doesn't matter too much but does have some implications.</p><br/><br/><p>There are other differences but they arise more because mod_wsgi offers a lot more functionality and configurability than a FASTCGI hosting mechanism does.</p><br/><br/><p>Anyway, the question is a bit vague, can you be more specific about what it is you are wanting to know or contrast between the two and why? Answer can then perhaps be targeted better.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      . DEFAULT DATETIME.NOW ( ) PROBLEM
    </pattern>
    <template>
<![CDATA[<p>it looks like <code>datetime.now()</code> is being evaluated when the model is defined, and not each time you add a record.</p><br/><br/><p>Django has a feature to accomplish what you are trying to do already:</p><br/><br/><pre><code>date = models.DateTimeField(auto_now_add=True, blank=True)<br/></code></pre><br/><br/><p>or</p><br/><br/><pre><code>date = models.DateTimeField(default=datetime.now, blank=True)<br/></code></pre><br/><br/><p>The difference between the second example and what you currently have is the lack of parentheses. By passing <code>datetime.now</code> without the parentheses, you are passing the actual function, which will be called each time a record is added. If you pass it <code>datetime.now()</code>, then you are just evaluating the function and passing it the return value.</p><br/><br/><p>More information is available at Django's <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#datetimefield" rel="nofollow">model field reference</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATICFIL APP HELP
    </pattern>
    <template>
<![CDATA[<p>I should have edited this a long time ago, but please see jezdez' answer below for the correct way to do this: <a href="http://stackoverflow.com/a/4566907#237211">http://stackoverflow.com/a/4566907#237211</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WILL DJANGO SUPPORT PYTHON 3.X
    </pattern>
    <template>
<![CDATA[<p>It might run on Python 3 by the end of summer. <a href="http://news.ycombinator.com/item?id=2130853" rel="nofollow">http://news.ycombinator.com/item?id=2130853</a> I don't know if that means "officially" or not, but it doesn't sounds like it, so official support is probably slightly later.</p><br/><br/><p>The question is why you want to know? You can't run it on Python 3 today. That's all that matters. The day you can run it on python 3, then it matters. Before that it doesn't. [Except to those doing the porting, of course ;-) ].</p><br/><br/><p>Predicting the future is easy. It's making the predictions come true that is the hard part. :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NO MODUL NAME STATICFIL
    </pattern>
    <template>
<![CDATA[<p>I just remove the whole server and installed everything again, that solved everything. Seems I got some old django ghost installation or something</p><br/><br/><p>Sorry and thanks!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC FILE AND MEDIA FILE IN TERM OF DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>Static files are are meant for js/images etc, but media files is for user-uploaded content.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BETTER THAN DJANGO PISTON
    </pattern>
    <template>
<![CDATA[<p>check <a href="http://djangopackages.com/grids/g/api/" rel="nofollow">http://djangopackages.com/grids/g/api/</a> (django-tastypie looks very promising)</p><br/><br/><p>I also don't like Piston very much. Don't misunderstand me. It is (or was) a good app, though it has its issues. The main problem I had working with it that it hides Debugging information coming from django.</p><br/><br/><p>If you are absolutely unsure about what to use roll your own. With django 1.3 and class based views you got already a good way to add an API like this. If you need OAuth or other authentication methods you can simply check existing ways in piston or other apps and use them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNUS DJANGO CODE TO REMOV
    </pattern>
    <template>
<![CDATA[<p>You can run the dev server under coverage if you use the --noreload switch:</p><br/><br/><pre><code>coverage ./manage.py runserver --noreload<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LWAY INCLUD THE USER IN THE DJANGO TEMPLAT CONTEXT
    </pattern>
    <template>
<![CDATA[<p>In a more general sense of not having to explicitly set variables in each view, it sounds like you want to look at writing your own <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors" rel="nofollow">context processor</a>.</p><br/><br/><p>From the docs:</p><br/><br/><blockquote><br/>  <p>A context processor has a very simple interface: It's just a Python function that takes one argument, an HttpRequest object, and returns a dictionary that gets added to the template context. Each context processor must return a dictionary.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST OF BLOG ENGIN WRITTEN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>EDIT: Original link went dead so here's an updated link with extracts of the list sorted with the most recently updated source at the top.</p><br/><br/><p><a href="http://blog.montylounge.com/2010/02/10/eleven-django-blog-engines-you-should-know/" rel="nofollow">Eleven Django blog engines you should know</a></p><br/><br/><p>by Monty Lounge Industries</p><br/><br/><blockquote><br/>  <ul><br/>  <li><a href="http://github.com/eldarion/biblion" rel="nofollow">Biblion</a></li><br/>  <li><a href="http://bitbucket.org/codekoala/django-articles/" rel="nofollow">Django-article</a></li><br/>  <li><a href="http://github.com/flother/flother" rel="nofollow">Flother</a></li><br/>  <li><a href="http://github.com/nathanborror/django-basic-apps" rel="nofollow">Basic-Blog</a></li><br/>  <li><a href="http://github.com/gregnewman/hello-newman" rel="nofollow">Hello-Newman</a></li><br/>  <li><a href="http://getbanjo.com/download/" rel="nofollow">Banjo</a></li><br/>  <li><a href="http://code.google.com/p/djangotechblog/" rel="nofollow">djangotechblog</a></li><br/>  <li><a href="http://github.com/f4nt/django-yaba/" rel="nofollow">Django-YABA</a></li><br/>  <li><a href="http://github.com/paltman/shiftingbits/" rel="nofollow">Shifting Bits</a> (this is now just a <a href="http://github.com/eldarion/biblion" rel="nofollow">biblion</a> blog)</li><br/>  <li><a href="http://github.com/mightylemon/mightylemon" rel="nofollow">Mighty Lemon</a></li><br/>  <li><a href="http://code.google.com/p/coltrane-blog/" rel="nofollow">Coltrane</a></li><br/>  </ul><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO BE A GOOD CHOIC FOR A PERMISS BASE WEB APP
    </pattern>
    <template>
<![CDATA[<p>If I read your updated requirements correctly, I don't think Django's existing auth system will be sufficient. It sounds like you need a full-on ACL system.</p><br/><br/><p>This subject has come up a number of times. Try googling on django+acl.</p><br/><br/><p>Random samplings ...</p><br/><br/><p>There was a Summer of Code project a couple of years ago, but I'm not sure where they got to. See <a href="http://code.djangoproject.com/wiki/GenericAuthorization" rel="nofollow">http://code.djangoproject.com/wiki/GenericAuthorization</a></p><br/><br/><p>There is a fresh ticket at djngoproject.org that might be interesting:</p><br/><br/><ul><br/><li><a href="http://code.djangoproject.com/ticket/9444" rel="nofollow">http://code.djangoproject.com/ticket/9444</a></li><br/></ul><br/><br/><p>There is some interesting code snips on dumpz.org:</p><br/><br/><ul><br/><li><a href="http://dumpz.org/274/" rel="nofollow">http://dumpz.org/274/</a> models.py       </li><br/><li><a href="http://dumpz.org/273/" rel="nofollow">http://dumpz.org/273/</a> signals.py</li><br/></ul><br/><br/><p>... but there are zero docs.</p><br/><br/><p>Good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONLI SOME PART OF DJANGO
    </pattern>
    <template>
<![CDATA[<p>I myself use Django for its object/db mapping without using its urlconfigs.  Simply create a file called <code>djangosettings.py</code> and insert the necessary configuration, for example:</p><br/><br/><pre><code>DATABASE_ENGINE   = 'oracle'<br/>DATABASE_HOST     = 'localhost'<br/>DATABASE_NAME     = 'ORCL'<br/>DATABASE_USER     = 'scott' <br/>DATABASE_PASSWORD = 'tiger'<br/></code></pre><br/><br/><p>Then in your regular Python code, do</p><br/><br/><pre><code>import os<br/>os.environ["DJANGO_SETTINGS_MODULE"] = "djangosettings.py"<br/></code></pre><br/><br/><p>before you import any Django modules.  This will let you use Django's object/db mappings without actually having a Django project, so you can use it for standalone scripts or other web applications or whatever you want.</p><br/><br/><p>As for caching, if you don't want to use Django then you should probably decide what you are using and go from there.  I recommend using CherryPy, which doesn't use Django-style regular expression URL mapping, but instead automatically maps URLs to functions based on the function names.  There's an example right at the top of the CherryPy home page: <a href="http://cherrypy.org/" rel="nofollow">http://cherrypy.org/</a></p><br/><br/><p>CherryPy has its own caching system, so you can accomplish exactly the same thing as what Django does but without needing to use Django's urlconfig system.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRI TO UNDERSTAND HOW APP INTERACT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Take a look at django's built-in <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#ref-contrib-contenttypes" rel="nofollow">contenttypes framework</a>:</p><br/><br/><p><code>django.contrib.contenttypes</code></p><br/><br/><p>It allows you develop your applications as stand-alone units.  This is what the django developers used to allow django's built-in <a href="http://docs.djangoproject.com/en/dev/ref/contrib/comments/#ref-contrib-comments-index" rel="nofollow">comment framework</a> to attach a comment to any model in your project.</p><br/><br/><p>For instance, if you have some content object that you want to "attach" to other content objects of different types, like allowing each user to leave a "favorite" star on a blog post, image, or user profile, you can create a <code>Favorite</code> model with a <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations" rel="nofollow">generic relation field</a> like so:</p><br/><br/><pre><code>from django.db import models<br/>from django.contrib.auth.models import User<br/>from django.contrib.contenttypes.models import ContentType<br/>from django.contrib.contenttypes import generic<br/><br/>class Favorite(models.Model):<br/>    user = models.ForeignKey(User)<br/>    content_type = models.ForeignKey(ContentType)<br/>    object_id = models.PositiveIntegerField()<br/>    content_object = generic.GenericForeignKey('content_type', 'object_id')<br/></code></pre><br/><br/><p>In this way you can add a <code>Favorite</code> star from any user to any model in your project.  If you want to add API access via the recipient model class you can either add a <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#reverse-generic-relations" rel="nofollow">reverse generic relation field</a> on the recipient model (although this would be "coupling" the two models, which you said you wanted to avoid), or do the lookup through the <code>Favorite</code> model with the <code>content_type</code> and <code>object_id</code> of the recipient instance, see the <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#reverse-generic-relations" rel="nofollow">official docs</a> for an example. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + AJAX
    </pattern>
    <template>
<![CDATA[<p>An HTTP response is more than sending content to the browser. A response is associated with a status code and several HTTP headers. Additionally, a response may contain a body (actual content).</p><br/><br/><p>I think it's OK to sent an HttpResponse object with no body. That is:</p><br/><br/><pre><code>return HttpResponse()<br/></code></pre><br/><br/><p>This will send an HTTP response with status code 200 OK, which is exactly what happened on the server side, i.e. the operation succeeded, everything is OK. Although there are better ways, see below.</p><br/><br/><p><a href="http://en.wikipedia.org/wiki/Representational%5FState%5FTransfer" rel="nofollow">Restfully</a> speaking, when the operation encountered problems, you should return an HTTP response with an appropriate <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" rel="nofollow">status code</a>. Like  one of the 5XX status codes which designate server side errors.</p><br/><br/><p>Now, looking at all those HTTP status codes we see a 201 Created status code which is a more appropriate code than 200 OK when you're storing that POST data somewhere, like a DB. In this case you should be doing something like this in your view:</p><br/><br/><pre><code>return HttpResponse(status=201)<br/></code></pre><br/><br/><p>And, as someone already mentioned, you could take advantage of these status codes in your JavaScript so that you can present a user a more informative message or maybe choose some other strategy for your requests.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHP S ADVANTAG OVER RUBI ON RAIL AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>Firstly PHP is not a framework, its a language.</p><br/><br/><p>IMHO the strongest point for PHP frameworks (apart from deployment :) is the huge and mature community. RoR and Django are fantastic tools with devoted but limited followers. </p><br/><br/><p>RoR has been greatly imitated in the PHP world, with CakePHP being almost identical, eliminating any need for a PHP developer to switch to Ruby.</p><br/><br/><p>Django is one of the few gems out there but personally I am in love with Zend Framework.</p><br/><br/><p>There are great tools for any of the major languages, and as you cannot compare a framework with a language you can't decide on a framework if you don't decide on your language first.</p><br/><br/><p>Ruby, Python, PHP and (even) Perl are essentially the same for a person with strong computer science skills, and in the end the choice depends more on <em>personal style</em> and programming roots than which one is "<em>better</em>"...</p><br/><br/><p>Anyhow, my point is that removing Java everything else is a perfectly logical choice. <strong>;)</strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN APP OR ROLL MY OWN
    </pattern>
    <template>
<![CDATA[<p>It really depends on the project I guess. While you can do everything in the admin, when your app gets more complex using the admin gets more complex too. And if you want to make your app really easy to manage you want control over every little detail, which is not really possible with the admin app.</p><br/><br/><p>I guess you should see it like this:</p><br/><br/><p>Using django admin: save time writing it, lose time using it.<br /><br/>Rolling your own admin: lose time writing it, save time using it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO YOU RETRIEV DATA FROM EXTRA FIELD ON MANY TO MANI RELATIONSHIP WITHOUT AN EXPLICIT QUERI FOR IT
    </pattern>
    <template>
<![CDATA[<p>So, 15 minutes after asking the question, and I found my own answer.  </p><br/><br/><p>Using <code>dir(Team)</code>, I can see another generated attribute named <code>teamplayer_set</code> (it also exists on Player). </p><br/><br/><pre><code>t = Team.objects.get(pk=168)<br/>for x in t.teamplayer_set.all():<br/>  if x.captain:<br/>    print "%s (Captain)" % (x.player.name)<br/>  else:<br/>    print x.player.name<br/></code></pre><br/><br/><p>Not sure how I would customize that generated related_name, but at least I know I can get to the data from the template without adding additional query results into the context.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SITE AND AN APP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django actually has 3 concepts here:</p><br/><br/><ul><br/><li><p><strong>Project</strong> (I think this is what you're calling site): This is the directory that contains all the apps. They share a common runtime invocation and can refer to each other.</p></li><br/><li><p><strong>App</strong>: This is a set of views, models, and templates. Apps are often designed so they can be plugged into another project.</p></li><br/><li><p><strong>Site</strong>: You can designate different behaviour for an app based on the site (ie: URL) being visited. This way, the same "App" can customize itself based on whether or not the user has visited 'StackOverflow.com' or 'RackOverflow.com' (or whatever the IT-targeted version will be called), even though it's the same codebase that's handling the request.</p></li><br/></ul><br/><br/><p>How you arrange these is really up to your project. In a complicated case, you might do:</p><br/><br/><pre><code>Project: StackOverflowProject<br/>    App: Web Version<br/>        Site: StackOverflow.com<br/>        Site: RackOverflow.com<br/>    App: XML API Version<br/>        Site: StackOverflow.com<br/>        Site: RackOverflow.com<br/>    Common non-app settings, libraries, auth, etc<br/></code></pre><br/><br/><p>Or, for a simpler project that wants to leverage an open-source plugin:</p><br/><br/><pre><code>Project: StackOverflowProject<br/>    App: Stackoverflow<br/>        (No specific use of the sites feature... it's just one site)<br/>    App: Plug-in TinyMCE editor with image upload<br/>        (No specific use of the sites feature)<br/></code></pre><br/><br/><p>Aside from the fact that there needs to be a Project, and at least one app, the arrangement is very flexible; you can adapt however suits best to help abstract and manage the complexity (or simplicity) of your deployment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV A DYNAM GENER IMAG WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I assume you're using PIL (Python Imaging Library). You need to replace your last line with (for example, if you want to serve a PNG image):</p><br/><br/><pre><code>response = HttpResponse(mimetype="image/png")<br/>img.save(response, "PNG")<br/>return response<br/></code></pre><br/><br/><p>See <a href="http://effbot.org/zone/django-pil.htm" rel="nofollow">here</a> for more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S MY JSON DATA IN MY INCOM DJANGO REQUEST
    </pattern>
    <template>
<![CDATA[<p>If you are posting JSON to Django, I think what you want is request.raw_post_data, this will give you the raw JSON data sent via the post, from there you can process it further.</p><br/><br/><p>Here is an example using Javascript/jQuery/jquery-json and Django.</p><br/><br/><p>Javascript:</p><br/><br/><pre><code>var myEvent = {id: calEvent.id, start: calEvent.start, end: calEvent.end,<br/>                allDay: calEvent.allDay };<br/><br/>$.ajax({<br/>        url: '/event/save-json/',<br/>        type: 'POST',<br/>        contentType: 'application/json; charset=utf-8',<br/>        data: $.toJSON(myEvent),<br/>        dataType: 'text',<br/>        success: function(result) {<br/>            alert(result.Result);<br/>        }<br/>    });<br/></code></pre><br/><br/><p>Django:</p><br/><br/><pre><code>def save_events_json(request):<br/>if request.is_ajax():<br/>        if request.method == 'POST':<br/>            print 'Raw Data: "%s"' % request.raw_post_data  <br/><br/>    return HttpResponse("OK")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST WITH DATE TIME BAS OBJECT
    </pattern>
    <template>
<![CDATA[<p>Replacing internal stuff like this is always dangerous because it can have nasty side effects. So what you indeed want, is to have the monkey patching be as local as possible.</p><br/><br/><p>We use Michael Foord's excellent mock library: <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow">http://www.voidspace.org.uk/python/mock/</a> that has a <code>@patch</code> decorator which patches certain functionality, but the monkey patch only lives in the scope of the testing function, and everything is automatically restored after the function runs out of its scope.</p><br/><br/><p>The only problem is that the internal <code>datetime</code> module is implemented in C, so by default you won't be able to monkey patch it. We fixed this by making our own simple implementation which <em>can</em> be mocked.</p><br/><br/><p>The total solution is something like this (the example is a validator function used within a Django project to validate that a date is in the future). Mind you I took this from a project but took out the non-important stuff, so things may not actually work when copy-pasting this, but you get the idea, I hope :)</p><br/><br/><p>First we define our own very simple implementation of <code>datetime.date.today</code> in a file called <code>utils/date.py</code>:</p><br/><br/><pre><code>import datetime<br/><br/>def today():<br/>    return datetime.date.today()<br/></code></pre><br/><br/><p>Then we create the unittest for this validator in <code>tests.py</code>:</p><br/><br/><pre><code>import datetime<br/>import mock<br/>from unittest2 import TestCase<br/><br/>from django.core.exceptions import ValidationError<br/><br/>from .. import validators<br/><br/>class ValidationTests(TestCase):<br/>    @mock.patch('utils.date.today')<br/>    def test_validate_future_date(self, today_mock):<br/>        # Pin python's today to returning the same date<br/>        # always so we can actually keep on unit testing in the future :)<br/>        today_mock.return_value = datetime.date(2010, 1, 1)<br/><br/>        # A future date should work<br/>        validators.validate_future_date(datetime.date(2010, 1, 2))<br/><br/>        # The mocked today's date should fail<br/>        with self.assertRaises(ValidationError) as e:<br/>            validators.validate_future_date(datetime.date(2010, 1, 1))<br/>        self.assertEquals([u'Date should be in the future.'], e.exception.messages)<br/><br/>        # Date in the past should also fail<br/>        with self.assertRaises(ValidationError) as e:<br/>            validators.validate_future_date(datetime.date(2009, 12, 31))<br/>        self.assertEquals([u'Date should be in the future.'], e.exception.messages)<br/></code></pre><br/><br/><p>The final implementation looks like this:</p><br/><br/><pre><code>from django.utils.translation import ugettext_lazy as _<br/>from django.core.exceptions import ValidationError<br/><br/>from utils import date<br/><br/>def validate_future_date(value):<br/>    if value &lt;= date.today():<br/>        raise ValidationError(_('Date should be in the future.'))<br/></code></pre><br/><br/><p>Hope this helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVERT A LIST BACK TO A QUERYSET
    </pattern>
    <template>
<![CDATA[<p>There is no point in converting a data list back to a query. A query object never holds data; it just represents a query to the database. It would have to fetch everything again if you made your list to a query, and that would be redundant and very bad performance-wise.</p><br/><br/><p>What you can do:</p><br/><br/><ul><br/><li>Describe how the <code>reputation</code> field is calculated; it's probably possible to order the data in the database somehow.</li><br/><li>Modify the view to not require a query object. If it needs to do additional filtering etc. this should be done before any ordering, since the ordering will take less time with less entries (and less data will be fetched from the database.) So you could send the filtered query object to the sort function just before you send it to the template (which shouldn't care whether it's a query or a list.)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI LEAK DEBUG
    </pattern>
    <template>
<![CDATA[<p>See <a href="http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/">http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/</a> . Short answer: if you're running django but not in a web-request-based format, you need to manually run db.reset_queries() (and of course have DEBUG=False, as others have mentioned). Django automatically does reset_queries() after a web request, but in your format, that never happens.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE REVERS URL MAP IN SET
    </pattern>
    <template>
<![CDATA[<p>In urls.py, import settings:</p><br/><br/><pre><code>from django.conf import settings<br/></code></pre><br/><br/><p>Then add the url pattern</p><br/><br/><pre><code>urlpatterns=('',<br/>    ...<br/>    url('^%s$' %settings.LOGIN_URL[1:], 'django.contrib.auth.views.login', <br/>        name="login")<br/>    ...<br/>)<br/></code></pre><br/><br/><p>Note that you need to slice <code>LOGIN_URL</code> to remove the leading forward slash.</p><br/><br/><p>In the shell:</p><br/><br/><pre><code>&gt;&gt;&gt;from django.core.urlresolvers import reverse<br/>&gt;&gt;&gt;reverse('login')<br/>'/accounts/login/'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECK WHETHER AN OBJECT ALREADI EXIST BEFOR AD
    </pattern>
    <template>
<![CDATA[<p>There's a helper function for this idiom called 'get_or_create' on your model manager:</p><br/><br/><pre><code>role, created = UserToUserRole.objects.get_or_create(<br/>    from_user=current_user, to_user=user, role='follow')<br/></code></pre><br/><br/><p>It returns a tuple of (model, bool) where 'model' is the object you're interested in and 'bool' tells you whether it had to be created or not.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INDEX PAGE BEST MOST COMMON PRACTIC
    </pattern>
    <template>
<![CDATA[<p>If all of your dynamic content is handled in the template (for example, if it's just simple checking if a user is present on the request), then I recommend using a generic view, specificially the <a href="http://docs.djangoproject.com/en/1.1/ref/generic-views/#django-views-generic-simple-direct-to-template" rel="nofollow">direct to template</a> view:</p><br/><br/><pre><code>urlpatterns = patterns('django.views.generic.simple',<br/>    (r'^$', 'direct_to_template', {'template': 'index.html'}),<br/>)<br/></code></pre><br/><br/><p>If you want to add a few more bits of information to the template context, there is another argument, <code>extra_context</code>, that you can pass to the generic view to include it:</p><br/><br/><pre><code>extra_context = { <br/>    'foo': 'bar',<br/>    # etc<br/>}<br/>urlpatterns = patterns('django.views.generic.simple',<br/>    (r'^$', 'direct_to_template', {'template': 'index.html', 'extra_context': extra_context }),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM A BATCH INSERT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I recently looked for such a thing myself (inspired by <a href="http://docs.djangoproject.com/en/1.1/topics/db/queries/#topics-db-queries-update" rel="nofollow">QuerySet.update()</a>, as I imagine you are too). To my knowledge, no bulk create exists in the current production framework (1.1.1 as of today). We ended up creating a custom manager for the model that needed bulk-create, and created a function on that manager to build an appropriate SQL statement with the sequence of VALUES parameters.</p><br/><br/><p>Something like (apologies if this does not work... hopefully I've adapted this runnably from our code):</p><br/><br/><pre><code>from django.db import models, connection<br/><br/>class MyManager(models.Manager):<br/><br/>    def create_in_bulk(self, values):<br/>        base_sql = "INSERT INTO tbl_name (a,b,c) VALUES "<br/>        values_sql = []<br/>        values_data = []<br/><br/>        for value_list in values:<br/>            placeholders = ['%s' for i in range(len(value_list))]<br/>            values_sql.append("(%s)" % ','.join(placeholders))<br/>            values_data.extend(value_list)<br/><br/>        sql = '%s%s' % (base_sql, ', '.join(values_sql))<br/><br/>        curs = connection.cursor()<br/>        curs.execute(sql, values_data)<br/><br/>class MyObject(models.Model):<br/>    # model definition as usual... assume:<br/>    foo = models.CharField(max_length=128)<br/><br/>    # custom manager<br/>    objects = MyManager()<br/><br/>MyObject.objects.create_in_bulk( [('hello',), ('bye',), ('c', )] )<br/></code></pre><br/><br/><p>This approach does run the risk of being very specific to a particular database. In our case, we wanted the function to return the IDs just created, so we had a postgres-specific query in the function to generate the requisite number of IDs from the primary key sequence for the table that represents the object. That said, it does perform significantly better in tests versus iterating over the data and issuing separate QuerySet.create() statements.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .GITIGNOR FILE FOR PYTHON PROJECT
    </pattern>
    <template>
<![CDATA[<p>When using <a href="http://www.buildout.org/" rel="nofollow">buildout</a> I have following in <code>.gitignore</code> (along with <code>*.pyo</code> and <code>*.pyc</code>):</p><br/><br/><pre><code>.installed.cfg<br/>bin<br/>develop-eggs<br/>dist<br/>downloads<br/>eggs<br/>parts<br/>src/*.egg-info<br/>lib<br/>lib64<br/></code></pre><br/><br/><p>Thanks to <a href="http://jacobian.org/writing/django-apps-with-buildout/" rel="nofollow">Jacob Kaplan-Moss</a></p><br/><br/><p>Also I tend to put <code>.svn</code> in since we use several SCM-s where I work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK ( CODEIGNIT YII CAKEPHP ) VS. DJANGO
    </pattern>
    <template>
<![CDATA[<p>Most of the frameworks out there nowadays are fast enough to serve whatever needs you will have. It really depends on in which environment you feel most comfortable. Though there are nuances here and there, MVC frameworks share a lot of the same principles, so whichever you choose to use is really a matter of which you most enjoy using.</p><br/><br/><p>So, if you like Python more, there's your answer. Use a Python framework, and Django is the best. If you like PHP more (which I personally don't), you've got some more decisions to make. But any of the PHP frameworks are fine. They really are. Just pick one that looks nice with comprehensive documentation and get to work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APPLIC LAYOUT
    </pattern>
    <template>
<![CDATA[<p>The best way that I have found to go about this is to create applications and then a project to glue them together.  Most of my projects have similar apps which are included in each.  Emails, notes, action reminders, user auth, etc.  My preferred layout is like so:</p><br/><br/><ul><br/><li>project/<br/><ul><br/><li>settings.py</li><br/><li>urls.py</li><br/><li>views.py</li><br/><li>...</li><br/></ul></li><br/><li>apps/<br/><ul><br/><li>emails/<br/><ul><br/><li>urls.py</li><br/><li>views.py</li><br/><li>...</li><br/></ul></li><br/><li>notes/<br/><ul><br/><li>urls.py</li><br/><li>views.py</li><br/><li>...</li><br/></ul></li><br/><li>...</li><br/></ul></li><br/></ul><br/><br/><p><strong>apps:</strong></p><br/><br/><p>Each of the "apps" stands on its own, and other than a <code>settings.py</code>, does not rely on the project itself (though it can rely on other apps).  One of the apps, is the user authentication and management.  It has all of the URLs for accomplishing its tasks in <code>apps/auth/urls.py</code>.  All of its templates are in <code>apps/auth/templates/auth/</code>.  All of its functionality is self-contained, so that when I need to tweak something, I know where to go.</p><br/><br/><p><strong>project:</strong></p><br/><br/><p>The <code>project/</code> contains all of the glue required to put these individual apps together into the final project.  In my case, I made use heavy of <code>settings.INSTALLED_APPS</code> in <code>project/</code> to discern which views from the apps were available to me.  This way, if I take <code>apps.notes</code> out of my <code>INSTALLED_APPS</code>, everything still works wonderfully, just with no notes.   </p><br/><br/><p><strong>Maintenance:</strong></p><br/><br/><p>This layout/methodology/plan also has long-term positive ramifications.  You can re-use any of the apps later on, with almost no work.  You can test the system from the bottom up, ensuring that each of the apps works as intended before being integrated into the whole, helping you find/fix bugs quicker.  You can implement a new feature without rolling it out to existing instances of the application (if it isn't in <code>INSTALLED_APPS</code>, they can't see it).  </p><br/><br/><p>I'm sure there are better documented ways of laying out a project, and more widely used ways, but this is the one which has worked best for me so far.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GLOBAL VARIABL
    </pattern>
    <template>
<![CDATA[<p>You <strong>mustn't</strong> declare global variables. Settings (constants) are OK if done right. But variables violate with <em>shared-nothing</em> architecture and might cause a lot of trouble. (best case they'll be inconsistent)</p><br/><br/><p>I would simply store those statistics in the cache. (Well, actually I would store them in the database but you made clear you <em>believe</em> it will have a negative impact on performance, so...)</p><br/><br/><p>The new <code>incr()</code> and <code>decr()</code> methods are especially suitable for counting. See <a href="http://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api" rel="nofollow"> docs</a> for more info.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE THREAD LOCAL IN DJANGO BAD
    </pattern>
    <template>
<![CDATA[<p>I disagree entirely.  TLS is extremely useful.  It should be used with care, just as globals should be used with care; but saying it shouldn't be used at all is just as ridiculous as saying globals should never be used.</p><br/><br/><p>For example, I store the currently active request in TLS.  This makes it accessible from my logging class, without having to pass the request around through every single interface--including many that don't care about Django at all.  It lets me make log entries from anywhere in the code; the logger outputs to a database table, and if a request happens to be active when a log is made, it logs things like the active user and what was being requested.</p><br/><br/><p>If you don't want one thread to have the capability of modifying another thread's TLS data, then set your TLS up to prohibit this, which probably requires using a native TLS class.  I don't find that argument convincing, though; if an attacker can execute arbitrary Python code as your backend, your system is already fatally compromised--he could monkey patch anything to be run later as a different user, for example.</p><br/><br/><p>Obviously, you'll want to clear any TLS at the end of a request; in Django, that means clearing it in process_response and process_exception in a middleware class.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN OLD VERSION OF DJANGO ON VIRTUALENV
    </pattern>
    <template>
<![CDATA[<p>There was never a Django 1.0.7. The 1.0 series only went up to 1.0.4. You can see all the releases in the <a href="http://code.djangoproject.com/browser/django/tags/releases" rel="nofollow">tags section of the Django code repository</a>.</p><br/><br/><p>However to answer your question, don't use <code>easy_install</code>, use <code>pip</code>. (If it's not already installed, do <code>easy_install pip</code>, then never touch easy_install again). Now you can do:</p><br/><br/><pre><code>pip install Django==1.0.4<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPRES A BIT FLAG INT FIELD IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Working off the snippet in Andrew's answer, here are the changes you'd need to make:</p><br/><br/><pre><code>from django.db import models<br/>from django import forms<br/><br/>class BitFlagFormField(forms.MultipleChoiceField):<br/>    widget = forms.CheckboxSelectMultiple<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(BitFlagFormField, self).__init__(*args, **kwargs)<br/><br/>class BitFlagField(models.Field):<br/>    __metaclass__ = models.SubfieldBase<br/><br/>    def get_internal_type(self):<br/>        return "Integer"<br/><br/>    def get_choices_default(self):<br/>        return self.get_choices(include_blank=False)<br/><br/>    def _get_FIELD_display(self, field):<br/>        value = getattr(self, field.attname)<br/>        choicedict = dict(field.choices)<br/><br/>    def formfield(self, **kwargs):<br/>        # do not call super, as that overrides default widget if it has choices<br/>        defaults = {'required': not self.blank, 'label': capfirst(self.verbose_name), <br/>                    'help_text': self.help_text, 'choices':self.choices}<br/>        if self.has_default():<br/>            defaults['initial'] = self.get_default()<br/>        defaults.update(kwargs)<br/>        return BitFlagFormField(**defaults)<br/><br/>    def get_db_prep_value(self, value):<br/>        if isinstance(value, int):<br/>            return value<br/>        elif isinstance(value, list):<br/>            return sum(value)<br/><br/>    def to_python(self, value):<br/>        result = []<br/>        n = 1<br/>        while value &gt; 0:<br/>            if (value % 2) &gt; 0:<br/>                result.append(n)<br/>            n *= 2<br/>            value /= 2<br/>        return sorted(result)<br/><br/><br/>    def contribute_to_class(self, cls, name):<br/>        super(BitFlagField, self).contribute_to_class(cls, name)<br/>        if self.choices:<br/>            func = lambda self, fieldname = name, choicedict = dict(self.choices):" and ".join([choicedict.get(value,value) for value in getattr(self,fieldname)])<br/>            setattr(cls, 'get_%s_display' % self.name, func)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH DJANGO + CELERI WITHOUT RUN CELERYD
    </pattern>
    <template>
<![CDATA[<p>Yes you can do this by setting <code>CELERY_ALWAYS_EAGER = True</code> in your settings.<br><br/><a href="http://ask.github.com/celery/configuration.html#celery-always-eager" rel="nofollow">http://ask.github.com/celery/configuration.html#celery-always-eager</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN DISABL THE ADD ACTION FOR A SPECIF MODEL
    </pattern>
    <template>
<![CDATA[<p>It is easy, just overload has_add_permission method in your Admin class like so:</p><br/><br/><pre><code>class MyAdmin(admin.ModelAdmin):<br/>     def has_add_permission(self, request):<br/>        return False<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GROUP AND PERMISS
    </pattern>
    <template>
<![CDATA[<p>I suppose the first question you need to ask are what permissions do you need and what sort.  By what sort, I mean do you want Model- or Object-level.  To clarify the difference say you have a model Car.  If you want to give permissions on all cars, then Model-level is appropriate, but if you want to give permissions on a per-car basis you want Object-level.  You may need both, and this isn't a problem as we'll see.  </p><br/><br/><p>For Model permissions, Django handles these for you... mostly.  For each model Django will create permissions in the form 'appname.permissionname_modelname'.  If you have an app called 'drivers' with the Car model then one permission would be 'drivers.delete_car'.  The permissions that Django automatically creates will be create, change, and delete.  For some strange reason they decided not to include read permissions from CRUD, you will have to do this yourself.  Note that Django decided to change CRUD's 'update' to 'change' for some reason.  To add more permissions to a model, say read permissions, you use the Meta class:</p><br/><br/><pre><code>class Car( models.Model ):<br/>    # model stuff here<br/>    class Meta:<br/>        permissions = ( <br/>            ( "read_car", "Can read Car" ),<br/>        )<br/></code></pre><br/><br/><p>Note that permissions is a set of tuples, where the tuple items are the permission as described above and a description of that permission.  You don't have to follow the permname_modelname convention but I usually stick with it.</p><br/><br/><p>Finally, to check permissions, you can use has_perm:</p><br/><br/><pre><code>obj.has_perm( 'drivers.read_car' )<br/></code></pre><br/><br/><p>Where obj is either a User or Group instance.  I think it is simpler to write a function for this:</p><br/><br/><pre><code>def has_model_permissions( entity, model, perms, app ):<br/>    for p in perms:<br/>        if not entity.has_perm( "%s.%s_%s" % ( app, p, model.__name__ ) ):<br/>            return False<br/>        return True<br/></code></pre><br/><br/><p>Where entity is the object to check permissions on (Group or User), model is the instance of a model, perms is a list of permissions as strings to check (e.g. ['read', 'change']), and app is the application name as a string.  To do the same check as has_perm above you'd call something like this:</p><br/><br/><pre><code>result = has_model_permissions( myuser, mycar, ['read'], 'drivers' )<br/></code></pre><br/><br/><p>If you need to use object or row permissions (they mean the same thing), then Django can't really help you by itself.  The nice thing is that you can use both model and object permissions side-by-side.  If you want object permissions you'll have to either <a href="http://djangoadvent.com/1.2/object-permissions/" rel="nofollow">write your own</a> (if using 1.2+) or find a project someone else has written, one I like is <a href="https://github.com/washingtontimes/django-objectpermissions" rel="nofollow">django-objectpermissions</a> from washingtontimes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CA N T LOOP DEFAULTDICT
    </pattern>
    <template>
<![CDATA[<p>try:</p><br/><br/><pre><code>dict(new_data)<br/></code></pre><br/><br/><p>and is better to use iteritems instead of items:)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORAG BACKEND FOR S3
    </pattern>
    <template>
<![CDATA[<p>Have you checked out <a href="https://bitbucket.org/david/django-storages/" rel="nofollow">django-storages</a>?  I would lean towards the boto library as I have had good experiences with boto.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML APPROACH WHEN FORM INPUT ARE SPREAD THROUGHOUT THE PAGE
    </pattern>
    <template>
<![CDATA[<h2>You can make it work with Javascript without sacrifying accesibility</h2><br/><br/><ol><br/><li>Put all the checkboxes in the header and wrap them in div</li><br/><li>Set up and empty but clean side bar</li><br/><li>Using Javascript, move you checkboxes from the header into the side bar</li><br/><li>Attach a callback to the <code>form.submit</code> event, and when the user submit the form, cancel the event then, take the data from the search field and the checkboxes and send it as an Ajax POST request.</li><br/></ol><br/><br/><p>Using a framework like jQuery, it's a 15 minutes job.</p><br/><br/><p>If the user has JS enable, the form will post the request and everything will work. If the user doesn't have javascript enable, the checkboxes will be in the header and so they will work, at just the price of a slightly less elegant design.</p><br/><br/><p>But people with Javascript disable are used to design changes so it's ok. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UTHOR IN SOCIAL NETWORK WEBSIT
    </pattern>
    <template>
<![CDATA[<p>A general answer is to find the distance between the document owner and a given contact. In Computer Science terms, this is a <a href="http://en.wikipedia.org/wiki/Directed_graph" rel="nofollow">directed graph</a>.</p><br/><br/><p>There's a good article with some SQL queries that covers this topic at <a href="http://techportal.ibuildings.com/2009/09/07/graphs-in-the-database-sql-meets-social-networks/" rel="nofollow">http://techportal.ibuildings.com/2009/09/07/graphs-in-the-database-sql-meets-social-networks/</a>. Rather than trying to summarize the entire article, here's how to conceptualize the problem:</p><br/><br/><ul><br/><li>Start with a blank piece of paper.</li><br/><li>Draw a dot somewhere on the page for each person (in this case, Users A, B, and C). In CS terms, this is a "node".</li><br/><li>Draw an arrow from a user to all of their contacts. In CS terms, this is a "directed edge", or an "arc".<br/><ul><br/><li>This isn't explicit in the question, but it looks like User C must be a contact of User B, or a contact another of User A's other contacts (since User A can read C2 and C4).</li><br/><li>So in this case, you would draw from User A -> User B, and User B -> User C.</li><br/></ul></li><br/></ul><br/><br/><p>As an aside, if being a "contact" is mutual, you can draw a line segment (or bidirectional arrow) instead of an arrow. In CS terms, this would be an "undirected" vs. a "directed" graph. Facebook relationships are an undirected relationship; if someone is my friend, then I am also their friend. By contrast, if someone is in my Outlook address book, I'm not necessarily in theirs. So this is a directed relationship.</p><br/><br/><p>As more users are added to the drawing, you'll notice that a user's contacts are one step away, and their contacts-of-contacts are two steps away. But you can only travel in the direction of the arrow.</p><br/><br/><p>So the problem for contacts is, "How do I find all nodes whose graph distance is one?" And the question for contacts-of-contacts is, "How do I find all nodes whose graph distance is two?". Although "two or less" is probably more appropriate, since you'd expect direct contacts to have access to all of the "contacts-of-contacts" content.</p><br/><br/><p>For the general case, there are some SQL queries described in the article that might provide some insight. But for your specific need, I'd consider just using some joins.</p><br/><br/><p>Let's consider a <code>Users</code> table, with primary key <code>id</code> along with its other fields, and a <code>HasContact</code> table which has only two columns: <code>userId</code> and <code>contactId</code>. We'll assume that User A has id 1, User B is 2, and User C is 3. HasContact has rows (1, 2) and (2, 3) to represent the relationships described above.</p><br/><br/><p>A pretty simple set of SQL joins can produce a list of all friends, or all friends-of-friends.</p><br/><br/><p>The following query would return all IDs of a User's contacts:</p><br/><br/><pre><code>SELECT contact.id<br/>  FROM Users "user"<br/>    LEFT JOIN Relationships "rel"<br/>      ON user.id = rel.userid<br/>    LEFT JOIN Users "contact"<br/>      ON rel.contactId = contact.id<br/>  WHERE user.id = $id_of_current_user<br/></code></pre><br/><br/><p>If you know the user IDs, an authorization query could be quite simple:</p><br/><br/><pre><code>SELECT count(*)<br/>  FROM Relationships "rel"<br/>  WHERE rel.userid = $document_owner_user_id<br/>    AND rel.contactid = $id_of_current_user<br/></code></pre><br/><br/><p>If the query returns 0, then we know that the current user is <em>not</em> one of the document owner's contacts.</p><br/><br/><p>We can update that second query to indicate whether a user is a contact-of-a-contact:</p><br/><br/><pre><code>SELECT count(*)<br/>  FROM Relationships "rel_1"<br/>    INNER JOIN Relationships "rel_2"<br/>      ON rel_1.contactId = rel_2.userId<br/>  WHERE rel_1.userid = $document_owner_user_id<br/>    AND rel_2.contactid = $id_of_current_user<br/></code></pre><br/><br/><p>This should return nonzero, as long as there are entries in the Relationships table such that <code>($document_owner_user_id, X)</code> and <code>(X, $id_of_current_user)</code> both exist. Otherwise, it will return zero.</p><br/><br/><p>I know this is a long and somewhat indirect answer, so please comment if you have any questions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DELET THING MYSTERI ( EDIT ACTUAL DJANGO STORAG )
    </pattern>
    <template>
<![CDATA[<p>Okay ladies and gents I have a public apology to make. <strong>Git was not to blame</strong>. I will leave this question here as a lesson to other people who may pass the same way.</p><br/><br/><p>We were using the django-storages backend (a 'plugin' to enable Django to store files on Amazon S3 transparently). This has a test called <code>HashPathStorageTest</code>. The tear-down this test deletes <code>settings.MEDIA_ROOT</code>, which was set to <code>./static</code>. This is faulty, in my opinion. It has no business blanket-deleting files that it didn't create.</p><br/><br/><p>We were running our tests, like good citizens, before checking in. Most of the time we ran only tests for our code, but occasionally we ran tests for the whole project (including 3rd party plugins). This was producing the behaviour in the question. Because we ran test  and git things together, it wasn't easy to pin down which command was doing the deleting (and the deleted files only showed up when we ran <code>git status</code>).</p><br/><br/><p>So problem solved. Again, sorry for casting aspersions on the good name of Git!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB DEVELOP DJANGO VS NODE VS RAIL VS OTHER
    </pattern>
    <template>
<![CDATA[<h1>Ruby on Rails:</h1><br/><br/><p><strong>Easy to learn?</strong> - Yes - excellent documentation at <a href="http://guides.rubyonrails.org/">guides.rubyonrails.org</a> and a great tutorial at railstutorial.org. </p><br/><br/><p><strong>Easy to build and iterate?</strong> - for sure - rails lends itself to agile and iterative development very well.</p><br/><br/><p><strong>Easy to deploy?</strong> - To deploy (at least for small apps and while learning), you can't really get easier than using <a href="http://www.heroku.com">heroku.com</a> - git based push and it's free.</p><br/><br/><p><strong>Popularity</strong> - very popular!</p><br/><br/><h1>Django</h1><br/><br/><p><strong>Easy to learn?</strong> - like Rails, Django has excellent documentation at <a href="https://docs.djangoproject.com/en/1.3/">docs.djangoproject.com/en/1.3/</a>. Maybe a slightly steeper learning curve (purely opinion here, but I find rails tends to be "ready to go" whereas django needs a little bit of config before you get into development). </p><br/><br/><p><strong>Easy to build and iterate?</strong> - again, like Rails, once you are up and running with it, it is pretty easy to iterate.</p><br/><br/><p><strong>Easy to deploy?</strong> - not as easy as Rails. There are heroku equivalents <a href="https://gondor.io/">gondor.io</a>, <a href="http://djangozoom.com">djangozoom.com</a>, <a href="http://stable.io">stable.io</a> but they tend to be in private beta. That said, I had no trouble getting an invite to <a href="https://gondor.io/">gondor.io</a>. </p><br/><br/><p><strong>Popularity</strong> - it's popular, but the user community is a little less....lively than the Rails crowd.</p><br/><br/><h1>Node</h1><br/><br/><p><strong>Easy to learn?</strong> - um yes and no, easy to put a quick hello world server together, but more tricky if you want a full scale app. I would stay away from this in the first instance - it is new and rapidly evolving. Also, Node itself isn't comparable with Rails or Django because the latter two are frameworks whereas Node is more of a barebones set of apis that you could use to develop something. You could opt for a framework like <a href="http://expressjs.com/">expressjs.com</a> which is more in line with Rails and Django. I've not used it so I can't really give you an opinion.</p><br/><br/><p><strong>Easy to build and iterate?</strong> - easy to build - yes, easy to iterate - yes.</p><br/><br/><p><strong>Easy to deploy?</strong>  - you can head over to no.de and apply to get a smartmachine - it is free at the moment and easy to deploy - git based.</p><br/><br/><p><strong>Popularity</strong> - it's gaining.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEVELOP FASTER THAN ASP.NET FOR SMALL MEDIUM S APP
    </pattern>
    <template>
<![CDATA[<p>I used to work on a large ASP.NET site and I started there with a lot of C# background. I now work on a python/django site and I started here with no python or django background, and I would say without a doubt python/django is far easier to work with and rapidly prototype an application.</p><br/><br/><p>Who knows when you get to scaling it, but a small/medium sized app that should be of no concern, and I would recommend python/django any day over asp.net, even to someone with limited python experience and no django experience and years of C# experience. At least, if they are a good programmer, if not, stick with dragging things out of the toolbox in VS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE DJANGO ADMIN INTERFAC IS THERE A WAY TO DUPLIC AN ITEM
    </pattern>
    <template>
<![CDATA[<p>You can <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_as" rel="nofollow">save as</a> by just enabling adding this to your ModelAdmin:</p><br/><br/><pre><code>save_as = True<br/></code></pre><br/><br/><p>This replaces the "Save and add another" button with a "Save as" button.  "Save as" means the object will be saved as a new object (with a new ID), rather than the old object.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CM COMPON FOR INTEGR INTO EXIST SITE
    </pattern>
    <template>
<![CDATA[<p>I have worked with all three (and more) and they are all built for different use cases IMHO. I would agree that these are the top-teir choices.</p><br/><br/><p>The grid comparison at djangopluggables.com certainly can make evaluating each of these easier.</p><br/><br/><p><strong>django-cms</strong> is the most full-featured and is something you could actually hand over to clients without being irresponsible. Even though it has features for integrating other apps, it doesn't have the extensibility/integration of FeinCMS or the simplicity of django-page-cms. That being said, I think the consensus is that this is the best Open Source CMS for Django. However, it's docs are a little lacking. <strong><em>update</em></strong>: <em>I have been told that integrating apps into DjangoCMS 2.1 has been improved.</em></p><br/><br/><p><strong>FeinCMS</strong> - Is a great set of tools for combining and building CMS functionality into your own apps. It's not "out of the box" at all, which means that you can integrate it however you want. It doesn't want to take over your urls.py or control how you route pages. It's probably a prototype for the next-generation of truly pluggable apps in Django. - We are moving from django-page-cms to FeinCMS because our primary models is high volume eCommerce and I have custom content-types I want to integrate that aren't blogs or flash. Good documentation and support as well.</p><br/><br/><p><strong>Django-page-cms</strong> - Is great if you want to just have some "About Us" pages around your principle application. Its menu system is not truly hierarchical and building your page presentation is up to you. But it's very simple, unobtrusive, and very easy to slap into your app and get a navigation going that clients can manage, or even for yourself. It has no docs that I know of, but you won't really need any. Read the code and you will get it all in 30 minutes or less.</p><br/><br/><p><em>update</em></p><br/><br/><p><strong>Mezzanine</strong> - Is a very well designed CMS and one that I have finally settled on for most of my client work, mostly because it has an integrated eCommerce portion. But beyond that it has very extensible page models, and a custom admin interface that a client might be willing to use. It also has the best "out of the box" experience i.e. You can have a full fledged site up with one command.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM DEVELOP DJANGO ON JYTHON
    </pattern>
    <template>
<![CDATA[<p>Django does <a href="http://wiki.python.org/jython/DjangoOnJython" rel="nofollow">work on Jython</a>, although you'll need to use the development release of Jython, since technically Jython 2.5 is still in beta.  However, Django 1.0 and up should work unmodified.</p><br/><br/><p>So as to whether you should use the regular Python implementation or Jython, I'd say it's a matter of whether you prefer having all the Java libraries available or all of the Python libraries.  At this point you can expect almost everything in the Python standard library to work with Jython, but there are still plenty of third-party packages which will not work, especially C extension modules.  I'd personally recommend going with regular Python, but if you've got a ton of JVM experience and want to stick with what you know, then I can respect that.</p><br/><br/><p>As for finding Python hosting, <a href="http://wiki.python.org/moin/PythonHosting" rel="nofollow">this page might be helpful</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELMULTIPLECHOICEFIELD DOE N T SELECT INITI CHOIC
    </pattern>
    <template>
<![CDATA[<p>You will need to add an <code>__init__</code> method to <code>Action_Form</code> to set your initial values, remembering to call <code>__init__</code> on the base <code>ModelForm</code> class via <strong>super</strong>.  See this <a href="http://www.pointy-stick.com/blog/2009/01/23/advanced-formset-usage-django/" rel="nofollow" rel="nofollow">blog post</a> for details.</p><br/><br/><pre><code>class Action_Form(forms.ModelForm):<br/>    def __init__(self, *args, **kwargs):<br/>        super(Action_Form, self).__init__(*args, **kwargs)<br/>        self.fields['from_company'].queryset = Contact.object.filter(...<br/></code></pre><br/><br/><p>If you plan to pass your filter params as keyword args to <code>Action_Form</code>, you'll need to remove them prior invoking super:</p><br/><br/><pre><code>myfilter = kwargs['myfilter']<br/>del kwargs['myfilter']<br/></code></pre><br/><br/><p>or, probably better:</p><br/><br/><pre><code>myfilter = kwargs.pop('myfilter')<br/></code></pre><br/><br/><p>For more information, here's another link referring to <a href="http://www.rossp.org/blog/2008/dec/15/modelforms/" rel="nofollow" rel="nofollow">Dynamic ModelForms in Django</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR RUBI ON RAIL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I kind of like the Python language<br/>  better and it seems to be more<br/>  full-featured than Ruby for<br/>  statistical, scientific and networking<br/>  (let me know if you think this is<br/>  wrong).</p><br/></blockquote><br/><br/><p>If you think you'll need libraries like NumPy or SciPy, probably best to stick with python/django. I've struggled to find ruby equivalents.</p><br/><br/><blockquote><br/>  <p>However, the RoR community seems to be<br/>  much bigger</p><br/></blockquote><br/><br/><p>Bigger is of course not going to be better. I've had great experiences with the django community in terms of support, and the pluggable app ecosystem is maturing quite quickly.</p><br/><br/><p>I would also add that I find the django documentation to be very easy to follow.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALL ERROR TO CONSOL OR FILE ON DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>It's a bit extreme, but for debugging purposes, you can turn on the <a href="http://docs.djangoproject.com/en/dev/ref/settings/#debug-propagate-exceptions" rel="nofollow"><code>DEBUG_PROPAGATE_EXCEPTIONS</code></a> setting.  This will allow you to set up your own error handling.  The easiest way to set up said error handling would be to override <a href="http://docs.python.org/library/sys.html#sys.excepthook" rel="nofollow">sys.excepthook</a>.  This will terminate your application, but it will work.  There may be things you can do to make this not kill your app, but this will depend on what platform you're deploying this for.  At any rate, never use this in production!</p><br/><br/><p>For production, you're pretty much going to have to have extensive error handling in place.  One technique I've used is something like this:</p><br/><br/><pre><code>&gt;&gt;&gt; def log_error(func):<br/>...     def _call_func(*args, **argd):<br/>...         try:<br/>...             func(*args, **argd)<br/>...         except:<br/>...             print "error" #substitute your own error handling<br/>...     return _call_func<br/>...<br/>&gt;&gt;&gt; @log_error<br/>... def foo(a):<br/>...     raise AttributeError<br/>...<br/>&gt;&gt;&gt; foo(1)<br/>error<br/></code></pre><br/><br/><p>If you use log_error as a decorator on your view, it will automatically handle whatever errors happened within it.</p><br/><br/><blockquote><br/>  <p>The process<code>_</code>exception function is called for some exceptions (eg: assert(False) in views.py) but process<code>_</code>exception is not getting called for other errors like ImportErrors (eg: import thisclassdoesnotexist in urs.py). I'm new to Django/Python. Is this because of some distinction between run-time and compile-time errors?</p><br/></blockquote><br/><br/><p>In Python, all errors are run-time errors.  The reason why this is causing problems is because these errors occur immediately when the module is imported before your view is ever called.  The first method I posted will catch errors like these for debugging.  You might be able to figure something out for production, but I'd argue that you have worse problems if you're getting ImportErrors in a production app (and you're not doing any dynamic importing).</p><br/><br/><p>A tool like <a href="http://www.logilab.org/857" rel="nofollow">pylint</a> can help you eliminate these kinds of problems though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASYNCHRON DJANGO MODEL QUERI POSSIBL
    </pattern>
    <template>
<![CDATA[<p>There aren't strictly asynchronous operations as you've described, but I think you can achieve the same effect by using django's <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#in-bulk" rel="nofollow">in_bulk</a> query operator, which takes a list of ids to query.</p><br/><br/><p>Something like this for the <code>urls.py</code>:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    (r'^compare/(\d+)/(\d+)/$', 'my.compareview'),<br/>)<br/></code></pre><br/><br/><p>And this for the view:</p><br/><br/><pre><code>def compareview(request, id1, id2):<br/>    # in_bulk returns a dict: { obj_id1: &lt;MyModel instance&gt;, <br/>    #                           obj_id2: &lt;MyModel instance&gt; }<br/>    # the SQL pulls all at once, rather than sequentially... arguably<br/>    # better than async as it pulls in one DB hit, rather than two<br/>    # happening at the same time<br/>    comparables = MyModel.objects.in_bulk([id1, id2])<br/>    o1, o2 = (comparables.get(id1), comparables.get(id2))      <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IZE REMOV DJANGO SELECT BOX BLANK OPTION
    </pattern>
    <template>
<![CDATA[<p>Haven't tested this, but based on reading Django's code <a href="http://code.djangoproject.com/browser/django/trunk/django/forms/models.py#L680" rel="nofollow">here</a> and <a href="http://code.djangoproject.com/browser/django/trunk/django/forms/models.py#L710" rel="nofollow">here</a> I believe it should work:</p><br/><br/><pre><code>class ThingForm(models.ModelForm):<br/>  class Meta:<br/>    model = Thing<br/><br/>  def __init__(self, *args, **kwargs):<br/>    super(ThingForm, self).__init__(*args, **kwargs)<br/>    self.fields['verb'].empty_label = None<br/></code></pre><br/><br/><p><strong>EDIT</strong>: This is <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#modelchoicefield" rel="nofollow">documented</a>, though you wouldn't necessarily know to look for ModelChoiceField if you're working with an auto-generated ModelForm.</p><br/><br/><p><strong>EDIT</strong>: As jlpp notes in his answer, this isn't complete - you have to re-assign the choices to the widgets after changing the empty_label attribute.  Since that's a bit hacky, the other option that might be easier to understand is just overriding the entire ModelChoiceField:</p><br/><br/><pre><code>class ThingForm(models.ModelForm):<br/>  verb = ModelChoiceField(Verb.objects.all(), empty_label=None)<br/><br/>  class Meta:<br/>    model = Thing<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BENCHMARK DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>There's two layers to this.  We have most of #1 in place for our testing.  We're about to start on #2.</p><br/><br/><ol><br/><li><p>Django in isolation.  The ordinary Django unit tests works well here.  Create some tests that cycle through a few (less than 6) "typical" use cases.  Get this, post that, etc.  Collect timing data.  This isn't real web performance, but it's an easy-to-work with test scenario that you can use for tuning.</p></li><br/><li><p>Your whole web stack.  In this case, you need a regular server running Squid, Apache, Django, MySQL, whatever.  You need a second computer(s) to act a client exercise your web site through urllib2, doing a few (less than 6) "typical" use cases.  Get this, post that, etc.  Collect timing data.  This still isn't "real" web performance, because it isn't through the internet, but it's as close as you're going to get without a really elaborate setup.</p></li><br/></ol><br/><br/><p>Note that the #2 (end-to-end) includes a great deal of caching for performance.   If your client scripts are doing similar work, caching will be really beneficial.  if your client scripts do unique things each time, caching will be less beneficial.</p><br/><br/><p>The hardest part is determining what the "typical" workload is.  This isn't functional testing, so the workload doesn't have to include everything.  Also, the more concurrent sessions your client is running, the slower it becomes.  Don't struggle trying to optimize your server when your test client is the slowest part of the processing.</p><br/><br/><p><hr /></p><br/><br/><p><strong>Edit</strong></p><br/><br/><p>If "line-by-line" means "profiling", well, you've got to get a Python profiler running.</p><br/><br/><p><a href="http://www.python.org/doc/2.5.2/lib/profile.html" rel="nofollow">http://www.python.org/doc/2.5.2/lib/profile.html</a></p><br/><br/><p>Note that there's plenty of caching in the Django ORM layer.  So running a view function a  half-dozen times to get a meaningful set of measurements isn't sensible.  You have to run a "typical" set of operations and then find hot-spots in the profile.  </p><br/><br/><p>Generally, your application is easy to optimize -- you shouldn't be doing much.  Your view functions should be short and have no processing to speak of.  Your form and model method functions, similarly, should be very short.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      20 MODEL IN 1 DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>"I have at least 20 models" -- this is probably more than one Django "app" and is more like a Django "project" with several small "apps"</p><br/><br/><p>I like to partition things around topics or subject areas that have a few (1 to 5) models.  This becomes a Django "app" -- and is the useful unit of reusability.</p><br/><br/><p>The overall "project" is a collection of apps that presents the integrated thing built up of separate pieces.</p><br/><br/><p>This also helps for project management since each "app" can become a sprint with a release at th end.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAVERS FOREIGN KEY RELAT TABL IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Just get rid of the parentheses:</p><br/><br/><pre><code>{% for company in category.company_set.all %}<br/></code></pre><br/><br/><p>Here's the <a href="http://docs.djangoproject.com/en/1.0/topics/templates/#variables" rel="nofollow">appropriate documentation</a>. You can call methods that take 0 parameters this way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVASCRIPT FILE
    </pattern>
    <template>
<![CDATA[<p>In with your other static media. See here for more info:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/static-files/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARE GOOD PYTHON DJANGO HOST SOLUT
    </pattern>
    <template>
<![CDATA[<p>Have a look at: <a href="http://djangohosting.org/" rel="nofollow">djangohosting.org</a> and <a href="http://djangofriendly.com/hosts/" rel="nofollow">djangofriendly.com</a><br/>If you are looking for a VPS, Slicehost and Linode are probably your best options.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URBOGEAR 2 VS DJANGO ANI ADVIC ON CHOOS REPLAC FOR TURBOGEAR 1
    </pattern>
    <template>
<![CDATA[<p>I have experience with both Django and TG1.1.</p><br/><br/><p>IMO, TurboGears strong point is it's ORM: SQLAlchemy. I prefer TurboGears when the database side of things is non-trivial.</p><br/><br/><p>Django's ORM is just not that flexible and powerful.</p><br/><br/><p>That being said, I prefer Django. If the database schema is a good fit with Django's ORM I would go with Django.</p><br/><br/><p>In my experience, it is simply less hassle to use Django compared with TurboGears.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WHICH AUTHORIZE.NET LIBRARI SHOULD I USE
    </pattern>
    <template>
<![CDATA[<p>For what it's worth we ended up using the <a href="http://bitbucket.org/adroll/authorize/wiki/Home" rel="nofollow">adroll authorize library</a>. Both Paython and django-authorizenet look interesting, will be checking those out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTO POPUL A PDF FORM IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>Reportlab is great if you're generating very dynamic PDFs and need to programmatically control all of it: data and layout. </p><br/><br/><p>To just fill out forms in existing PDFs, reportlab is overkill and you'll basically have to rebuild the PDF from scratch in reportlab instead of just taking a PDF with a form that's already been made. </p><br/><br/><p>PDF forms work with <a href="http://www.citationsoftware.com/faqFDF.htm" rel="nofollow">FDF</a> data. I ported a PHP FDF library to Python a while back when I had to do this and released it as <a href="http://pypi.python.org/pypi/fdfgen/" rel="nofollow">fdfgen</a>. I use that to generate an fdf file with the data for the form, then use <a href="http://www.accesspdf.com/pdftk/" rel="nofollow">pdftk</a> to push the fdf into a PDF form and generate the output. </p><br/><br/><p>The whole process works like this:</p><br/><br/><ol><br/><li>You (or a designer) design the PDF in Acrobat or whatever and mark the form fields and take note of the field names (I'm not sure exactly how this is done; our designer does this step). Let's say your form has fields "name" and "telephone". </li><br/><li><p>Use fdfgen to create a FDF file:</p><br/><br/><pre><code>#!python<br/>from fdfgen import forge_fdf<br/>fields = [('name','John Smith'),('telephone','555-1234')]<br/>fdf = forge_fdf("",fields,[],[],[])<br/>fdf_file = open("data.fdf","w")<br/>fdf_file.write(fdf)<br/>fdf_file.close()<br/></code></pre></li><br/><li><p>Then you run pdftk to merge and flatten:</p><br/><br/><p>pdftk form.pdf fill_form data.fdf output output.pdf flatten</p></li><br/></ol><br/><br/><p>and a filled out, flattened (meaning that there are no longer editable form fields) pdf will be in output.pdf.</p><br/><br/><p>It's a bit complicated, and pdftk can be a pain to install (requires a java stack and there are bugs on Ubuntu 9.10 that have to be worked around) but it's the simplest process I've been able to come up with yet and the workflow is convenient (ie, our designers can make all the layout changes to the PDF they want and as long as they don't change the names of the fields, I can drop the new one in and everything keeps working). </p><br/><br/><p>I apologize for the lack of docs on fdfgen. forge_fdf() is really the only function you should need and it has a docstrings to explain the arguments. I've just never quite gotten around to doing more with it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGNAL WHEN USER LOG IN
    </pattern>
    <template>
<![CDATA[<p>One option might be to wrap Django's login/logout views with your own.  For example:</p><br/><br/><pre><code>from django.contrib.auth.views import login, logout<br/><br/>def my_login(request, *args, **kwargs):<br/>    response = login(request, *args, **kwargs)<br/>    #fire a signal, or equivalent<br/>    return response<br/><br/>def my_logout(request, *args, **kwargs):<br/>    #fire a signal, or equivalent<br/>    return logout(request, *args, **kwargs)<br/></code></pre><br/><br/><p>You then use these views in your code rather than Django's, and voila.</p><br/><br/><p>With regards to querying login status, it's pretty simple if you have access to the request object; simply check request's user attribute to see if they're a registered user or the anonymous user, and bingo.  To quote the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.user" rel="nofollow">Django documentation</a>:</p><br/><br/><pre><code>if request.user.is_authenticated():<br/>    # Do something for logged-in users.<br/>else:<br/>    # Do something for anonymous users.<br/></code></pre><br/><br/><p>If you don't have access to the request object, then determining if the current user is logged in is going to be difficult.</p><br/><br/><p><strong>Edit:</strong></p><br/><br/><p>Unfortunately, you'll never be able to get <code>User.is_logged_in()</code> functionality - it's a limitation of the HTTP protocol.  If you make a few assumptions, however, you might be able to get close to what you want.</p><br/><br/><p>First, why can't you get that functionality?  Well, you can't tell the difference between someone closing the browser, or someone spending a while on a page before fetching a new one.  There's no way to tell over HTTP when someone actually leaves the site or closes the browser.</p><br/><br/><p>So you have two options here that aren't perfect:</p><br/><br/><ol><br/><li>Use Javascript's <code>unload</code> event to catch when a user is leaving a page.  You'd have to write some careful logic to make sure you aren't logging out a user when they're still navigating <em>your</em> site, however.</li><br/><li>Fire the logout signal whenever a user logs in, just to be sure.  Also create a cron job that runs fairly often to flush out expired sessions -- when an expired session is deleted, check that the session's user (if it's not anonymous) has no more active sessions, in which case you fire the logout signal.</li><br/></ol><br/><br/><p>These solutions are messy and not ideal, but they're the best you can do, unfortunately.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI THAT GET MOST RECENT OBJECT FROM DIFFER CATEGORI
    </pattern>
    <template>
<![CDATA[<p>As far as I know, there is no one-step way of doing this in Django ORM.</p><br/><br/><p>But you can split it in two queries:</p><br/><br/><pre><code>bakeries = Bakery.objects.annotate(hottest_cake_baked_at=Max('cake__baked_at')) <br/>hottest_cakes = Cake.objects.filter(baked_at__in=[b.hottest_cake_baked_at for b in bakeries])<br/></code></pre><br/><br/><p>If id's of cakes are progressing along with bake_at timestamps, you can simplify and disambiguate the above code (in case two cakes arrives at the same time you can get both of them):</p><br/><br/><pre><code>bakeries = Bakery.objects.annotate(hottest_cake_id=Max('cake__id')) <br/>hottest_cakes = Cake.objects.filter(id__in=[b.hottest_cake_id for b in bakeries])<br/></code></pre><br/><br/><p>BTW credits for this goes to Daniel Roseman, who once answered similar question of mine:</p><br/><br/><p><a href="http://groups.google.pl/group/django-users/browse_thread/thread/3b3cd4cbad478d34/3e4c87f336696054?hl=pl&amp;q=" rel="nofollow">http://groups.google.pl/group/django-users/browse_thread/thread/3b3cd4cbad478d34/3e4c87f336696054?hl=pl&amp;q=</a></p><br/><br/><p>If the above method is too slow, then I know also second method - you can write custom SQL producing only those Cakes, that are hottest in relevant Bakeries, define it as database VIEW, and then write unmanaged Django model for it. It's also mentioned in the above django-users thread. Direct link to the original concept is here:</p><br/><br/><p><a href="http://wolfram.kriesing.de/blog/index.php/2007/django-nice-and-critical-article#comment-48425" rel="nofollow">http://wolfram.kriesing.de/blog/index.php/2007/django-nice-and-critical-article#comment-48425</a></p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLI TO AN EMAIL USE THE PYTHON IMAPLIB AND INCLUD THE ORIGIN MESSAG
    </pattern>
    <template>
<![CDATA[<p>The original MIME tree structure of the incoming message is as follows (using <code>email.iterators._structure(msg)</code>):</p><br/><br/><pre><code>multipart/mixed<br/>    text/html                (message)<br/>    application/octet-stream (attachment 1)<br/>    application/octet-stream (attachment 2)<br/></code></pre><br/><br/><p>Replying via GMail results in the following structure:</p><br/><br/><pre><code>multipart/alternative<br/>    text/plain<br/>    text/html<br/></code></pre><br/><br/><p>I.e. they aren't being as smart as I thought, just discarding the attachments (good) and providing text and HTML versions that explicitly restructure the "quoted content."</p><br/><br/><p>I'm beginning to think that's all I should do too, just reply with a simple message as after discarding the attachments there's not much point in keeping the original message.</p><br/><br/><p>Still, might as well answer my original question since I've figured out how to now anyway.</p><br/><br/><p>First, replace all the attachments in the original message with text/plain placeholders:</p><br/><br/><pre><code>import email<br/><br/>original = email.message_from_string( ... )<br/><br/>for part in original.walk():<br/>    if (part.get('Content-Disposition')<br/>        and part.get('Content-Disposition').startswith("attachment")):<br/><br/>        part.set_type("text/plain")<br/>        part.set_payload("Attachment removed: %s (%s, %d bytes)"<br/>                         %(part.get_filename(), <br/>                           part.get_content_type(), <br/>                           len(part.get_payload(decode=True))))<br/>        del part["Content-Disposition"]<br/>        del part["Content-Transfer-Encoding"]<br/></code></pre><br/><br/><p>Then create a reply message:</p><br/><br/><pre><code>from email.mime.multipart import MIMEMultipart<br/>from email.mime.text import MIMEText<br/>from email.mime.message import MIMEMessage<br/><br/>new = MIMEMultipart("mixed")<br/>body = MIMEMultipart("alternative")<br/>body.attach( MIMEText("reply body text", "plain") )<br/>body.attach( MIMEText("&lt;html&gt;reply body text&lt;/html&gt;", "html") )<br/>new.attach(body)<br/><br/>new["Message-ID"] = email.utils.make_msgid()<br/>new["In-Reply-To"] = original["Message-ID"]<br/>new["References"] = original["Message-ID"]<br/>new["Subject"] = "Re: "+original["Subject"]<br/>new["To"] = original["Reply-To"] or original["From"]<br/>new["From"] = "me@mysite.com"<br/></code></pre><br/><br/><p>Then attach the original MIME message object and send:</p><br/><br/><pre><code>new.attach( MIMEMessage(original) )<br/><br/>s = smtplib.SMTP()<br/>s.sendmail("me@mysite.com", [new["To"]], new.as_string())<br/>s.quit()<br/></code></pre><br/><br/><p>The resulting structure is:</p><br/><br/><pre><code>multipart/mixed<br/>    multipart/alternative<br/>        text/plain<br/>        text/html<br/>    message/rfc822<br/>        multipart/mixed<br/>            text/html<br/>            text/plain<br/>            text/plain<br/></code></pre><br/><br/><p>Or it's a bit simpler using Django:</p><br/><br/><pre><code>from django.core.mail import EmailMultiAlternatives<br/>from email.mime.message import MIMEMessage<br/><br/>new = EmailMultiAlternatives("Re: "+original["Subject"],<br/>                             "reply body text", <br/>                             "me@mysite.com", # from<br/>                             [original["Reply-To"] or original["From"]], # to<br/>                             headers = {'Reply-To': "me@mysite.com",<br/>                                        "In-Reply-To": original["Message-ID"],<br/>                                        "References": original["Message-ID"]})<br/>new.attach_alternative("&lt;html&gt;reply body text&lt;/html&gt;", "text/html")<br/>new.attach( MIMEMessage(original) ) # attach original message<br/>new.send()<br/></code></pre><br/><br/><p>The result ends (in GMail at least) showing the original message as "---- Forwarded message ----" which isn't quite what I was after, but the general idea works and I hope this answer helps someone trying to figure out how to fiddle with MIME messages.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUBI 1.9.1 ACTUAL READI AND FASTER FOR A NEW RAIL DEPLOY
    </pattern>
    <template>
<![CDATA[<p>We experimented with 1.9 a couple months ago and we were so impressed by the speed improvements that we almost immediately began the process of migrating over to it. The only libraries that did not run smoothly were Facebooker, which one of our developers was able to patch in a couple of days (The plugin is now fully 1.9 compatible), and VPim (iCalendar library) which we were able to switch out easily with the much newer RiCal plugin.</p><br/><br/><p>Rails 2.3 is absolutely ready to run on 1.9 and in our experience resulted in a greater than 60% improvement in request times. Our integration tests also received the same benefit. We had 1200 tests that tool 300 seconds to run now taking only 110 seconds with no other changes except switching from Ruby 1.8.7 to Ruby 1.9.1. This also means we were able to double the amount of load each of our servers could handle.</p><br/><br/><p>It's certainly possible that you use a gem that is not 1.9 compatible, but the vast majority of them are or can be made compatible with minor changes.</p><br/><br/><p>You will definitely not experience any issues with 75,000 unique visitors, and a single server should be able to host a rails application with at least ten times that level of traffic unless your application is written very poorly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OSQA ON WINDOW ( LOCAL SYSTEM )
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>Download <a href="http://svn.osqa.net/svnroot/osqa/trunk" rel="nofollow">http://svn.osqa.net/svnroot/osqa/trunk</a> to a folder <code>{OSQA_ROOT}</code> eg, <code>c:\osqa</code> </p></li><br/><li><p>Rename <code>{OSQA_ROOT}\settings_local.py.dist</code> to <code>{OSQA_ROOT}\settings_local.py</code></p></li><br/><li><p>set following in <code>{OSQA_ROOT}\settings_local.py</code></p><br/><br/><pre><code>DATABASE_NAME = 'osqa'             # Or path to database file if using sqlite3.<br/>DATABASE_USER = 'root'               # Not used with sqlite3.<br/>DATABASE_PASSWORD = 'PASSWD'               # Not used with sqlite3.  put bitnami here<br/>DATABASE_ENGINE = 'mysql'  #mysql, etc<br/></code></pre><br/><br/><ul><br/><li>Default MySQL credentials in bitnami are: -u root -p bitnami <br/><br><br/><br></li><br/></ul></li><br/><li><p>add following <code>{DJANGOSTACK}\apps\django\conf\django.conf</code>, <code>/</code> means root folder like <code>http://localhost</code></p><br/><br/><pre><code>&lt;location '/'&gt;<br/>    SetHandler python-program<br/>    PythonHandler django.core.handlers.modpython<br/>    PythonPath "['{OSQA_ROOT}'] + sys.path"<br/>    SetEnv DJANGO_SETTINGS_MODULE osqa.settings<br/>    PythonDebug On<br/>&lt;/location&gt;<br/></code></pre></li><br/><li><p>instasll markdown2 and html5lib with easy_install.exe, which is inside <code>{DJANGOSTACK}\python\Scripts\</code> </p><br/><br/><pre><code>easy_install markdown2<br/>easy_install html5lib<br/></code></pre></li><br/><li><p>create new db called <code>osqa</code> with mysqladmin.exe which is in <code>{DJANGOSTACK}\mysql\bin</code></p><br/><br/><pre><code>mysqladmin create osqa<br/></code></pre></li><br/><li><p>syncdb </p><br/><br/><pre><code>{DJANGOSTACK}\python\python.exe manage.py syncdb<br/></code></pre><br/><br/><ul><br/><li>manage.py is in apps\django\django\conf\project_template as of 5/8/11</li><br/><li>You must update settings.py with mysql, root, and bitnami (pw), and osqa as db name<br/><br><br></li><br/></ul></li><br/><li><p>enjoy!</p></li><br/></ol><br/><br/><p><img src="http://img87.imageshack.us/img87/723/osqabitnamidjangostack.png" alt="alt text"></p><br/><br/><p><strong>Note:</strong> </p><br/><br/><ul><br/><li><code>{OSQA_ROOT}</code> => osqa trunk directory</li><br/><li><code>{DJANGOSTACK}</code> => BitNami DjangoStack install directory</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECOR VS. CLASS IN PYTHON WEB DEVELOP
    </pattern>
    <template>
<![CDATA[<p>There's actually a reason for each of the three methods you listed, specific to each project.</p><br/><br/><ul><br/><li>Bottle tries to keep things as<br/>simple/straightforward as possible<br/>for the programmer.  With decorators<br/>for routes you don't have to worry<br/>about the developer understanding OOP.</li><br/><li>Pylons development goal is to make<br/>code re-usable and to be easily<br/>integrated with WSGI-style HTTP<br/>process routing.  As such, they have<br/>chosen a very OOP way of organizing<br/>routes.  As an example, you could<br/>copy &amp; paste HelloController into any<br/>Pylons app and it should just<br/>magically work.  Even if said app is<br/>being served up via WSGI in some<br/>complicated fashion.</li><br/><li>Tornado has yet another reason for<br/>doing things the way it does: <br/>Tornado's epoll-based IOLoop (in conjunction with tornado.web.Application)<br/>instantiates each RequestHandler as<br/>requests come in.  By keeping each<br/>RequestHandler limited to a specific<br/>GET or POST this allows IOLoop to<br/>quickly instantiate the class,<br/>process the request, and finally let<br/>it get garbage collected.  This keeps<br/>it fast and efficient with a small<br/>memory footprint regardless of how<br/>many RequestHandlers your application<br/>has.  This is also the reason why Tornado can handle so many more simultaneous requests than other Python-based web servers (each request gets its own instance).</li><br/></ul><br/><br/><p>Now, having said all that you should know that you can always override the default framework behavior.  For example, I wrote a <a href="http://code.activestate.com/recipes/576958-method-based-url-dispatcher-for-the-tornado-web-se/" rel="nofollow">MethodDispatcher</a> for Tornado that makes it work more like Pylons (well, I had CherryPy in mind when I wrote it).  It slows down Tornado a tiny amount (and increases the memory footprint slightly) due to having one large RequestHandler (as opposed to a lot of small ones) but it can reduce the amount of code in your app and make it a little easier to read (In my biased opinion, of course =).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CSRF FOR VIEW THAT DO NOT ALWAY HAVE A RESPONS
    </pattern>
    <template>
<![CDATA[<p>Django really expects view functions to return responses.  Maybe you could return an empty response instead of None?  Or return an HTTP error code?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL WID HELP TEXT TO A DJANGO MODEL S ADMIN FORM
    </pattern>
    <template>
<![CDATA[<p>There is a fairly simple, yet underdocumented way of accomplishing this. </p><br/><br/><h2>Define render_change_form in the Admin class</h2><br/><br/><p>First, you need to pass extra context to your admin. To do this, you can define a render_change_form function within your admin Class, e.g.:</p><br/><br/><pre><code># admin.py<br/>class CustomAdmin(admin.ModelAdmin):<br/>    def render_change_form(self, request, context, *args, **kwargs):<br/>        # here we define a custom template<br/>        self.change_form_template = 'admin/myapp/change_form_help_text.html'<br/>        extra = {<br/>            'help_text': "This is a help message. Good luck filling out the form."<br/>        }<br/><br/>        context.update(extra)<br/>        superclass = super(CustomAdmin, self)<br/>        return superclass.render_change_form(request, context, *args, **kwargs)<br/></code></pre><br/><br/><h2>Creating a custom template</h2><br/><br/><p>Next, you need to create that custom template (change_form_help_text.html) and extend the default 'admin/change_form.html'.</p><br/><br/><pre><code># change_form_help_text.html<br/>{% extends 'admin/change_form.html' %}<br/>{% block form_top %} <br/>{% if help_text %}&lt;p&gt;{{ help_text }}&lt;/p&gt;{% endif %}<br/>{% endblock %}<br/></code></pre><br/><br/><p>I've chosen to place this template inside templates/admin/myapp/, but this is also flexible.</p><br/><br/><hr><br/><br/><p>More info available at:</p><br/><br/><p><a href="http://davidmburke.com/2010/05/24/django-hack-adding-extra-data-to-admin-interface/">http://davidmburke.com/2010/05/24/django-hack-adding-extra-data-to-admin-interface/</a></p><br/><br/><p><a href="http://code.djangoproject.com/wiki/NewformsHOWTO#Q:HowcanIpassextracontextvariablesintomyaddandchangeviews">http://code.djangoproject.com/wiki/NewformsHOWTO#Q:HowcanIpassextracontextvariablesintomyaddandchangeviews</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH PYPI
    </pattern>
    <template>
<![CDATA[<p>Unlikely. A Django application is almost always I/O-bound, usually because of the database connection. PyPy wouldn't help with that at all, even if it was purely compatible (which I'm not sure it is).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE EXTEND ... CONDIT DJANGO
    </pattern>
    <template>
<![CDATA[<p>Use a variable.</p><br/><br/><pre><code>{% extends base_template %}<br/></code></pre><br/><br/><p>and in your view, set it to "base.html" in your view, or a new "ajax.html" file which just provides the block and nothing else.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PACKAG A PYTHON APPLIC TO MAKE IT PIP INSTAL
    </pattern>
    <template>
<![CDATA[<p>Yes, MANIFEST.in and setup.py should be sufficient.</p><br/><br/><p>This blog post really has some good information on this topic: <a href="http://bruno.im/2010/may/05/packaging-django-reusable-app/" rel="nofollow">http://bruno.im/2010/may/05/packaging-django-reusable-app/</a></p><br/><br/><p>And here's another good, detailed overview, that helped me a lot: <a href="http://guide.python-distribute.org/creation.html" rel="nofollow">http://guide.python-distribute.org/creation.html</a></p><br/><br/><p>Especially the tips to get your static files (templates) included are important, as this might not be obvious at first.</p><br/><br/><p>And yes, you can specify required packages in your setup.py which are automatically fetched when installing your app.</p><br/><br/><p>For example:</p><br/><br/><pre><code>    install_requires = [<br/>    'django-profiles',<br/>    ],<br/></code></pre><br/><br/><p>With this setup your package should be installable via <strong>pip -e</strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CA N T RENDER STATIC URL FROM SET IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You have to use <code>context_instance=RequestContext(request)</code> in your <code>render_to_response</code>, for example:</p><br/><br/><pre><code>return render_to_response('my_template.html',<br/>                          my_data_dictionary,<br/>                          context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>Or use the new shortcut <a href="http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render" rel="nofollow">render</a></p><br/><br/><p>As Dave pointed out, you should check if <code>django.core.context_processors.static</code> is in your <code>TEMPLATE_CONTEXT_PROCESSORS</code> variable in settings.py. As <a href="http://docs.djangoproject.com/en/dev/howto/static-files/#with-a-context-processor" rel="nofollow">the docs</a> said, it's there by default.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI GET RELEAS TO SYSTEM AFTER LARG QUERI ( OR SERI OF QUERI ) IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I decided to move my comments into an answer to make things clearer.</p><br/><br/><p>Since Python 2.5, the CPython memory allocation tracks internal memory usage by the small object allocator, and attempts to return completely free arenas to the underlying OS. This works most of the time, but the fact that objects can't be moved around in memory means that fragmentation can be a serious problem.</p><br/><br/><p>Try the following experiment (I used 3.2, but 2.5+ should be similar if you use xrange):</p><br/><br/><pre><code># Create the big lists in advance to avoid skewing the memory counts<br/>seq1 = [None] * 10**6 # Big list of references to None<br/>seq2 = seq1[::10]<br/><br/># Create and reference a lot of smaller lists<br/>seq1[:] = [[] for x in range(10**6)] # References all the new lists<br/>seq2[:] = seq1[::10] # Grab a second reference to 10% of the new lists<br/><br/># Memory fragmentation in action<br/>seq1[:] = [None] * 10**6 # 90% of the lists are no longer referenced here<br/>seq2[:] = seq1[::10] # But memory freed only after last 10% are dropped<br/></code></pre><br/><br/><p>Note, even if you drop the references to <code>seq1</code> and <code>seq2</code>, the above sequence will likely leave your Python process holding a lot of extra memory.</p><br/><br/><p>When people talk about PyPy using less memory than CPython, this is a major part of what they're talking about. Because PyPy doesn't use direct pointer references under the hood, it is able to use a compacting GC, thus avoiding much of the fragmentation problem and more reliably returning memory to the OS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MONGODB AS OUR MASTER DATABAS SHOULD I USE A SEPAR GRAPH DATABAS TO IMPLEMENT RELATIONSHIP BETWEEN ENTITI
    </pattern>
    <template>
<![CDATA[<p>Mike,</p><br/><br/><p>you should be able to store your relationship data in the graph database. Its high performance on traversing big graphs comes from locality, i.e. you don't run queries globally but rather start a a set of nodes (which equal documents in your case, which are looked up by an index. you might even store start-node-ids for quick access in your mongo documents). From there you can traverse arbitrarily large paths in constant time (wrt data set size).</p><br/><br/><p>What are your other requirements (i.e. data set size, # of concurrent accesses etc, relationship/graph complexity).</p><br/><br/><p>Your queries are a really good fit for the graph database and easily expressable in its terms. </p><br/><br/><p>I'd suggest that you just grab a graphdb like neo4j and do a quick spike with your domain to verify the general feasibility and also find out additional questions you would like to have answered before investing in the second technology.</p><br/><br/><p>P.S. If you hadn't started yet, you could also have gone with a pure graphdb approach as graph databases are a superset of document databases. And you'd rather talk domain in your case anyway than just generic documents. (E.g. <a href="http://structr.org/" rel="nofollow">structr</a> is a CMS built on top of Neo4j).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FUNCTION TO RETRIEV A QUERYSET OF ANCESTOR OF AN MPTT QUERYSET
    </pattern>
    <template>
<![CDATA[<p>How about:</p><br/><br/><pre><code>def qs_ancestors(queryset):<br/>    if isinstance(queryset, EmptyQuerySet):<br/>        return queryset<br/>    new_queryset = queryset.none()<br/>    for obj in queryset:<br/>        new_queryset = new_queryset | obj.get_ancestors()<br/>return new_queryset<br/></code></pre><br/><br/><p>It's still len(queryset) clauses. You could potentially reduce the number of clauses a bit by doing a preprocess pass that removes objects that are ancestors of other objects in the queryset, something like:</p><br/><br/><pre><code>min_obj_set = []<br/>for obj in queryset.order_by('tree_id', '-level'):<br/>    for obj2 in min_obj_set:<br/>        if obj.is_ancestor_of(obj2):<br/>            break<br/>    else:<br/>        min_obj_set.append(obj)<br/></code></pre><br/><br/><p>Although the above snippet is only an example, you'll probably want to use a BST if your querset contains a significant amount of objects.</p><br/><br/><p>You'll have to test if this yeilds an increase in speed vs. the larger DB query, though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPAWN THREAD IN A WSGI APPL
    </pattern>
    <template>
<![CDATA[<p>FWIW, also have a read of:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/RegisteringCleanupCode" rel="nofollow">http://code.google.com/p/modwsgi/wiki/RegisteringCleanupCode</a></p><br/><br/><p>The hooking of actions to close() of iterable is the only way within context of the WSGI specification itself for doing deferred work. That isn't in a separate thread though and would occur within the context of the actual request, albeit after the response is supposed to have been flushed back to the client. Thus your deferred action will consume that request thread until the work is complete and so that request thread would not be able to handle other requests until then.</p><br/><br/><p>In general, if you do use background threads, there is no guarantee that any hosting mechanism would wait until those background threads complete before shutting process down. In fact, can't even think of any standard deployment mechanism which does wait. There isn't really even a guarantee that atexit handlers will be called on process shutdown, something that the referenced documentation also briefly talks about.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON WEB FRAMEWORK THAT NOVIC WEB DEVELOP SHOULD LEARN FLASK DJANGO OR ...
    </pattern>
    <template>
<![CDATA[<p>I think you'll find <a href="http://www.web2py.com" rel="nofollow">web2py</a> to be one of the easiest to set up, learn, and use (those are among its <a href="http://web2py.com/book/default/chapter/00" rel="nofollow">primary goals</a>). It requires no installation or configuration, has no dependencies, and includes everything you need (Python interpreter, web server, relational database, web-based IDE, error ticketing, database abstraction layer, database administration, scaffolding application, jQuery integration, AJAX support, access control, internationalization, web services, etc.). The default behaviors make it easy to get going with minimal coding, yet it is also very powerful and flexible for more advanced needs.</p><br/><br/><p>The <a href="http://web2py.com/book" rel="nofollow">online book</a> is an excellent learning resource, and there are also some live <a href="http://www.web2py.com/examples/default/examples" rel="nofollow">examples</a> on the web site. If you have any questions, there's a very helpful and responsive <a href="https://groups.google.com/forum/?fromgroups#!forum/web2py" rel="nofollow">mailing list</a>.</p><br/><br/><p>Take a few minutes to try it out. Just <a href="http://www.web2py.com/examples/default/download" rel="nofollow">download</a>, unzip it, and click on web2py.exe (Windows), web2py.app (Mac), or web2py.py (source).</p><br/><br/><p>There was a recent review in InfoWorld: [<a href="http://www.infoworld.com/d/application-development/pillars-python-six-python-web-frameworks-compared-169442" rel="nofollow">Overview</a> | <a href="http://www.infoworld.com/d/application-development/pillars-python-web2py-web-framework-168920?page=0,0&amp;1313029958=" rel="nofollow">web2py</a>].</p><br/><br/><p>web2py also recently won a <a href="http://www.infoworld.com/d/open-source-software/bossie-awards-2011-the-best-open-source-application-development-software-171759-0&amp;current=10&amp;last=9#slideshowTop" rel="nofollow">Bossie Award</a> for best open source application development software as well as a <a href="http://www.infoworld.com/slideshow/24605/infoworlds-2012-technology-the-year-award-winners-183313#slide23" rel="nofollow">Technology of the Year Award</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPOS A SESSION S CSRF PROTECT TOKEN SAFE
    </pattern>
    <template>
<![CDATA[<p>If you know you're going to need the CSRF token for AJAX requests, you can always embed it in the HTML somewhere; then you can find it through Javascript by traversing the DOM.  This way, you'll still have access to the token, but you're not exposing it via an API.</p><br/><br/><p>To put it another way: do it through Django's templates -- not through the URL dispatcher.  It's much more secure this way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I SORT A MODEL ON A FIELD AND THEN GET THE LAST ITEM
    </pattern>
    <template>
<![CDATA[<pre><code>obj = Edition.objects.latest('pub_date')<br/></code></pre><br/><br/><p>You can also simplify things by putting <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#get-latest-by" rel="nofollow"><code>get_latest_by</code></a> in the model's Meta, then you'll be able to do</p><br/><br/><pre><code>obj = Edition.objects.latest()<br/></code></pre><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#latest-field-name-none" rel="nofollow">the docs</a> for more info.  You'll probably also want to set the <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#ordering" rel="nofollow"><code>ordering</code></a> Meta option.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS GRAIL VS
    </pattern>
    <template>
<![CDATA[<p>You asked for someone who used both Grails and Django. I've done work on both for big projects. Here's my Thoughts:</p><br/><br/><p><strong>IDE's:</strong><br/>Django works really well in Eclipse, Grails works really well in IntelliJ Idea.</p><br/><br/><p><strong>Debugging:</strong><br/>Practically the same (assuming you use IntelliJ for Grails, and Eclipse for Python). Step debugging, inspecting variables, etc... never need a print statement for either. Sometimes django error messages can be useless but Grails error messages are usually pretty lengthy and hard to parse through.</p><br/><br/><p><strong>Time to run a unit test:</strong><br/>django: 2 seconds.<br/>Grails: 20 seconds (the tests themselves both run in a fraction of a second, it's the part about loading the framework to run them that takes the rest... as you can see, Grails is frustratingly slow to load).</p><br/><br/><p><strong>Deployment:</strong><br/>Django: copy &amp; paste one file into an apache config, and to redeploy, just change the code and reload apache.<br/>Grails: create a .war file, deploy it on tomcat, rinse and repeat to redeploy.</p><br/><br/><p><strong>Programming languages:</strong><br/>Groovy is TOTALLY awesome. I love it, more so than Python. But I certainly have no complaints. </p><br/><br/><p><strong>Plugins:</strong><br/>Grails: lots of broken plugins (and can use every java lib ever).<br/>Django: a few stable plugins, but enough to do most of what you need.</p><br/><br/><p><strong>Database:</strong><br/>Django: schema migrations using South, and generally intuitive relations.<br/>Grails: no schema migrations, and by default it deletes the database on startup... WTF</p><br/><br/><p><strong>Usage:</strong><br/>Django: startups (especially in the Gov 2.0 space), independent web dev shops.<br/>Grails: enterprise</p><br/><br/><p>Hope that helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BETA CODE FOR A PUBLIC DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>Start with <a href="http://www.djangosnippets.org/snippets/136/" rel="nofollow">this Django snippet</a>, but modify it to check <code>request.session['has_beta_access']</code>. If they don't have it, then have it return a redirect to a "enter beta code" page that, when posted to with the right code, sets that session variable to <code>True</code>.</p><br/><br/><p>Making it a public beta then just consists of removing that middleware from your <code>MIDDLEWARE_CLASSES</code> setting.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPUL SLUGFIELD FROM CHARFIELD
    </pattern>
    <template>
<![CDATA[<p>for Admin in 1.0, you'd need to use</p><br/><br/><pre><code>prepopulated_fields = {'slug':('title',),}<br/></code></pre><br/><br/><p>in your admin.py</p><br/><br/><p>Your key in the prepopulated_fields dictionary is the field you want filled, and the value is a tuple of fields you want concatenated.</p><br/><br/><p>Outside of admin, you can use the <code>slugify</code> function in your views.<br/>In templates, you can use the <code>|slugify</code> filter.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIMIT CHOICES TO USER USER
    </pattern>
    <template>
<![CDATA[<p>Use threadlocals if you want to get <strong>current</strong> user that edits this model. Threadlocals middleware puts current user into process-wide variable. Take this middleware</p><br/><br/><pre><code>from threading import local<br/><br/>_thread_locals = local()<br/>def get_current_user():<br/>    return getattr(getattr(_thread_locals, 'user', None),'id',None)<br/><br/>class ThreadLocals(object):<br/>    """Middleware that gets various objects from the<br/>    request object and saves them in thread local storage."""<br/>    def process_request(self, request):<br/>        _thread_locals.user = getattr(request, 'user', None)<br/></code></pre><br/><br/><p>Check the documentation on how to use middleware classes. Then anywhere in code you can call</p><br/><br/><pre><code>user = threadlocals.get_current_user<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SELL DOWNLOAD CONTENT HANDL BEHIND THE SCENE
    </pattern>
    <template>
<![CDATA[<p>This seems to me like a fairly general "secured content" question.  The type of content, be it webpages or MP3 files doesn't really have any effect on the methods.</p><br/><br/><p>I'm an ASP.NET guy, but as you say the techniques are platform-agnostic.  The most obvious method is to secure the content by folder, including the page(s) that link to the secured files.  A few ideas:</p><br/><br/><ol><br/><li>You'll need role-based security with login to secure the pages and files.</li><br/><li>If the secured content are files, you could encrypt and compress the downloaded file(s) to enhance security.  Send the password to unencrypt in a separate email.</li><br/><li>Use SSL to secure traffic to your protected content.</li><br/><li><p>Track what has been downloaded by each user so they can see a list of previously downloaded files.</p><br/><br/><p>The specific implementation will depend partly on your billing model.  Do you charge monthly for all content, file by file, or do your users buy credit and spend it by downloading files with a value attached?</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEARN CSS EASILI
    </pattern>
    <template>
<![CDATA[<p>CSS by itself is fairly easy to understand and other answers have pointed to a lot of good CSS resources.  The real challenge is learning all the quirks and bugs in each browser and this takes a lot of time.</p><br/><br/><p>You should definitely take the time to learn how CSS works, but as a newbie if you want to get started now, without worrying about many issues, I would recommend using one of the so-called CSS frameworks.</p><br/><br/><p>Here are some of the better known:</p><br/><br/><ul><br/><li><a href="http://developer.yahoo.com/yui/base/" rel="nofollow">Yahoo! UI Library: Base CSS</a></li><br/><li><a href="http://capsizedesigns.com/blog/2008/04/bluetripcss-a-fusion-of-blueprint-and-tripoli/" rel="nofollow">Bluetrip</a></li><br/><li><a href="http://code.google.com/p/blueprintcss/" rel="nofollow">Blueprint</a></li><br/><li><a href="http://www.allapis.com/Emastic-CSS-Temaplates/index.html" rel="nofollow">Emastic</a></li><br/><li><a href="http://www.yaml.de/en/" rel="nofollow">YAML</a> (not to be confused with the data markup language)</li><br/><li><a href="http://960.gs/" rel="nofollow">960 Grid System</a></li><br/></ul><br/><br/><p>I've successfully used Blueprint and Emastic templates with Django.</p><br/><br/><p>The Yahoo! YUI grid has an extra advantage of there being a Django app designed specifically for using YUI grid with Django called <a href="http://code.google.com/p/django-yui-layout-templates/" rel="nofollow">django-yui-layout-templates</a></p><br/><br/><p>If you start with one of these frameworks you can build websites <strong>now</strong> and then gradually develop your own CSS over time as you learn the quirks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIKE ABOUT DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong><em>What do I like about it :</em></strong></p><br/><br/><ul><br/><li>Very simple ORM</li><br/><li>clear separation of template / controller</li><br/><li>django-admin</li><br/><li>pluggable apps : it seems to me that the Django community really nailed that one !</li><br/></ul><br/><br/><p><strong><em>What made me switch :</em></strong></p><br/><br/><ul><br/><li>mainly curiosity</li><br/><li>I heard a lot of good things about it from a colleague</li><br/><li>I wanted something more lightweight than the Java I do for a living</li><br/><li>I had a side project heavily data-driven for which the Django-Admin interface is very useful</li><br/></ul><br/><br/><p><strong><em>What features I'd like :</em></strong></p><br/><br/><ul><br/><li>better / simpler control of the transactions (configuring different types of transactions (read only / read write / some tweaking here and there) isnt as easy as i am used to. Having a session in view model, where the transaction is still open in the view doesnt make me all that comfortable, I would prefer if the transactions didnt leave a service layer. But again, there isnt really a service layer in the Django model.</li><br/><li>better model for business logic (maybe that's just me, but I miss the service oriented approach of enterprise java, I never know if I should put the business logic in the view, in the form or in the model. None of those solution make me feel warm and fuzzy ... at the same time, I dont have heavy business logic in the application I develop for the moment, and I would probably still use Java for those)</li><br/><li>stability (in the sense of not changing, not in the sense of not crashing). Again, coming from Java, where I'm still working on Java 1.4 for a lot of projects, having a project that just released 1.0 and all the refactoring that went with it is not very reassuring. It did take some work to follow trunk and using 0.96 was not particularly compelling. I dont think I would feel comfortable to use it on a mission critical enterprise project yet.</li><br/></ul><br/><br/><p>I realize that there is quite a few improvements that I would like. Dont understand me wrong, I love Django and I will stick to it for a lot of projects. I jsut wont put it everywhere yet ...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACHIEV A CASE INSENSIT UNIQU CONSTRAINT IN SQLITE3 ( WITH DJANGO )
    </pattern>
    <template>
<![CDATA[<p>Yes this can easily be done by adding a unique index to the table with the following command:</p><br/><br/><p>CREATE UNIQUE INDEX uidxName ON mytable (myfield COLLATE NOCASE)</p><br/><br/><p>If you need case insensitivity for nonASCII letters, you will need to register your own COLLATION with commands similar to the following:</p><br/><br/><p>The following example shows a custom collation that sorts "the wrong way":</p><br/><br/><pre><code>import sqlite3<br/><br/>def collate_reverse(string1, string2):<br/>    return -cmp(string1, string2)<br/><br/>con = sqlite3.connect(":memory:")<br/>con.create_collation("reverse", collate_reverse)<br/><br/>cur = con.cursor()<br/>cur.execute("create table test(x)")<br/>cur.executemany("insert into test(x) values (?)", [("a",), ("b",)])<br/>cur.execute("select x from test order by x collate reverse")<br/>for row in cur:<br/>    print row<br/>con.close()<br/></code></pre><br/><br/><p>Additional python documentation for sqlite3 shown <a href="http://docs.python.org/library/sqlite3.html" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FILE WITH DJANGO ( PYTHON ) AND S3
    </pattern>
    <template>
<![CDATA[<p>You will have to provide the enctype attribute to the FORM element (I've been bitten by this before). For example, your FORM tag should look like: </p><br/><br/><pre><code>&lt;form action="/submitpicture/" method="POST" enctype="multipart/form-data" &gt;<br/></code></pre><br/><br/><p>Without the enctype, you will find yourself with an empty request.FILES.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + GIT WHAT DOE STAGE MEAN
    </pattern>
    <template>
<![CDATA[<p>It means your file has been added to the <a href="http://gitready.com/beginner/2009/01/18/the-staging-area.html" rel="nofollow">index</a>.</p><br/><br/><p><img src="http://whygitisbetterthanx.com/images/index1.png" alt="alt text" /></p><br/><br/><p>As described in <a href="http://tomayko.com/writings/the-thing-about-git" rel="nofollow">The Thing About Git</a></p><br/><br/><p>The Index is also sometimes referred to as The Staging Area.</p><br/><br/><blockquote><br/>  <p>I tend to think of it as the next patch:<br /><br/>  You build it up interactively with changes from your working copy and can later review and revise it.<br /><br/>  When you're happy with what you have lined up in the staging area, which basically amounts to a diff, you commit it. <br/>  <strong>And because your commits are no longer bound directly to what's in your working copy, you're free to stage individual pieces on a file-by-file, hunk-by-hunk basis</strong>.</p><br/></blockquote><br/><br/><p><hr /></p><br/><br/><p>If you look to the latest <a href="http://repo.or.cz/w/egit.git?a=log" rel="nofollow">change logs of egit</a> (the eclipse Git plugin), you will see they are still fiddling with how "staged" files are managed, se the more recent your egit plugin is, the better ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMBER OF INPUT WITH DJANGO FORM POSSIBL
    </pattern>
    <template>
<![CDATA[<p>Yes, it's possible to create forms dynamically in Django.  You can even mix and match dynamic fields with normal fields.</p><br/><br/><pre><code>class EligibilityForm(forms.Form):<br/>    def __init__(self, *args, **kwargs):<br/>        super(EligibilityForm, self).__init__(*args, **kwargs)<br/>        # dynamic fields here ...<br/>        self.fields['plan_id'] = CharField()<br/>    # normal fields here ...<br/>    date_requested = DateField()<br/></code></pre><br/><br/><p>For a better elaboration of this technique, see James Bennett's article: <strong>So you want a dynamic form?</strong></p><br/><br/><p><a href="http://www.b-list.org/weblog/2008/nov/09/dynamic-forms/" rel="nofollow">http://www.b-list.org/weblog/2008/nov/09/dynamic-forms/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFICI WAY TO INSERT THOUSAND OF RECORD INTO A TABL ( MYSQL PYTHON DJANGO )
    </pattern>
    <template>
<![CDATA[<p>You can write the rows to a file in the format<br/>"field1", "field2", .. and then use LOAD DATA to load them</p><br/><br/><pre><code>data = '\n'.join(','.join('"%s"' % field for field in row) for row in data)<br/>f= open('data.txt', 'w')<br/>f.write(data)<br/>f.close()<br/></code></pre><br/><br/><p>Then execute this:</p><br/><br/><pre><code>LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;<br/></code></pre><br/><br/><p><a href="http://dev.mysql.com/doc/refman/5.1/en/load-data.html" rel="nofollow">Reference</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE CASE FOR DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>No, the Django admin is not suited for individual user profiles, each user would be able to see, and edit, all other user profiles.  This is suited more to an administrator who has to manage all the users at once.</p><br/><br/><p>What you need to build is a user profile page.  Django already has a nice login system courtesy of the django.contrib.auth module.  You can easily integrate this into your pages, and its exactly what the Django admin uses to authenticate users.</p><br/><br/><p>Next you'll have to build a simple page that exposes that specific user's profile information based on their User model.  This should be relatively painless as it will only require one view and one template, and the template can take advantage of ModelForms.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVER POLIT TO PUT CODE IN A PYTHON CONFIGUR FILE
    </pattern>
    <template>
<![CDATA[<p>There is a Django wiki page, which addresses exactly the thing you're asking.<br/><a href="http://code.djangoproject.com/wiki/SplitSettings" rel="nofollow">http://code.djangoproject.com/wiki/SplitSettings</a></p><br/><br/><p>Do not reinvent the wheel. Use <a href="http://docs.python.org/library/configparser.html" rel="nofollow">configparser</a> and INI files. Python files are to easy to break by someone, who doesn't know Python. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ABOUT WORKFLOW FRAMEWORKS LIBRARI IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Try <a href="http://code.djangoproject.com/wiki/GoFlow" rel="nofollow">GoFlow</a>, a workflow engine for Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP DEPEND CYCL
    </pattern>
    <template>
<![CDATA[<p>If your dependency is with foreign keys referencing models in other applications, you <em>don't</em> need to import the other model. You can use a string in your ForeignKey definition:</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    myfield = models.ForeignKey('myotherapp.MyOtherModel')<br/></code></pre><br/><br/><p>This way there's no need to import MyOtherModel, so no circular reference. Django resolves the string internally, and it all works as expected.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CUSTOM MODEL METHOD PROPERTI IN ORDER BI ( )
    </pattern>
    <template>
<![CDATA[<p>No, you can't do that. <code>order_by</code> is applied at the database level, but the database can't know anything about your custom Python methods.</p><br/><br/><p>You can either use the separate fields to order:</p><br/><br/><pre><code>Author.objects.order_by('first_name', 'last_name')<br/></code></pre><br/><br/><p>or do the ordering in Python:</p><br/><br/><pre><code>sorted(Author.objects.all(), key=lambda a: a.full_name)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC WHITESPAC WITH UNDERSCOR AND VICE VERSA
    </pattern>
    <template>
<![CDATA[<p>You don't need regular expressions, Python has a string method that does what you need:</p><br/><br/><pre><code>mystring.replace (" ", "_")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RACE CONDIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could use <a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/#controlling-transaction-management-in-views" rel="nofollow">transactions</a> to encapsulate your request. At the per-request level it looks like this:</p><br/><br/><pre><code>from django.db import transaction<br/><br/>@transaction.autocommit<br/>def add_points(request):<br/>    ...<br/></code></pre><br/><br/><p>This shoudl be sufficient if you read and update the user data within the request.</p><br/><br/><p>If the user can also edit other fields in the form and then save this data, you need to do something like this:</p><br/><br/><p>Store the last modified time stamp in the request. Before saving the new data, check to see if it is still the same. Otherwise there is a race condition and you can display a message.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH SYSTEM TIMEZON SET VS USER S INDIVIDU TIMEZON
    </pattern>
    <template>
<![CDATA[<p>I'm going to be working on this problem myself for my application. My first approach to this problem would be to go with django core developer Malcom Tredinnick's advice in <a href="http://groups.google.com/group/django-users/msg/ee174701c960ff2d">this django-user's post</a>. You'll want to store the user's timezone setting in their user profile, probably.</p><br/><br/><p>I would also highly encourage you to look into the <a href="http://pytz.sourceforge.net/">pytz module</a>, which makes working with timezones less painful. For the front end, I created a "timezone picker" based on the common timezones in pytz. I have one select box for the area, and another for the location (e.g. US/Central is rendered with two select boxes). It makes picking timezones slightly more convenient than wading through a list of 400+ choices.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TROUBL IN DJANGO CA N T RESET BECAUS OF DEPEND
    </pattern>
    <template>
<![CDATA[<p>The easy way to fully reset a Django database is using <a href="http://code.google.com/p/django-command-extensions/">django-extensions</a>.</p><br/><br/><p>It has a <code>reset_db</code> command that supports all Django's default database backends.</p><br/><br/><pre><code>python manage.py reset_db<br/></code></pre><br/><br/><p>If you're using Django 1.2+ you should explicitly define the database you want to reset. If your project only uses one database, you should probably set <code>--router=default</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APPLIC TO GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Most (all?) of Django is available in GAE, so your main task is to avoid basing your designs around a reliance on anything from Django or the Python standard libraries which is not available on GAE.</p><br/><br/><p>You've identified the glaring difference, which is the database, so I'll assume you're on top of that. Another difference is the tie-in to Google Accounts and hence that if you want, you can do a fair amount of access control through the app.yaml file rather than in code. You don't have to use any of that, though, so if you don't envisage switching to Google Accounts when you switch to GAE, no problem.</p><br/><br/><p>I think the differences in the standard libraries can mostly be deduced from the fact that GAE has no I/O and no C-accelerated libraries unless explicitly stated, and my experience so far is that things I've expected to be there, have been there. I don't know Django and haven't used it on GAE (apart from templates), so I can't comment on that.</p><br/><br/><p>Personally I probably wouldn't target LAMP (where P = Django) with the intention of migrating to GAE later. I'd develop for both together, and try to ensure if possible that the differences are kept to the very top (configuration) and the very bottom (data model). The GAE version doesn't necessarily have to be perfect, as long as you know how to make it perfect should you need it.</p><br/><br/><p>It's not guaranteed that this is faster than writing and then porting, but my guess is it normally will be. The easiest way to spot any differences is to run the code, rather than relying on not missing anything in the GAE docs, so you'll likely save some mistakes that need to be unpicked. The Python SDK is a fairly good approximation to the real App Engine, so all or most of your tests can be run locally most of the time.</p><br/><br/><p>Of course if you eventually decide not to port then you've done unnecessary work, so you have to think about the probability of that happening, and whether you'd consider the GAE development to be a waste of your time if it's not needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGE INITI AND UPDAT VIA AJAX USE THE SAME TEMPLAT HTML
    </pattern>
    <template>
<![CDATA[<p>I think option 2 is best.  It's incremental (only renders one more comment when a comment is added), and re-uses the rendering.  If you don't like returning just HTML from an Ajax request, then have the response be a JSON structure which includes the HTML as just one component.  Then you can also carry status (or whatever) without an extra request to get the HTML.</p><br/><br/><p>Option 1 is wasteful: the server should render the page as it should first appear.</p><br/><br/><p>Option 3 is also wasteful: why make two requests to add a single comment?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERS ( ) FOR JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p><a href="https://github.com/mlouro/django-js-utils" rel="nofollow">https://github.com/mlouro/django-js-utils</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BI DIRECT MANYTOMANYFIELD IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>The workaround I found was to follow the instructions for <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#working-with-many-to-many-intermediary-models" rel="nofollow">ManyToManyFields with intermediary models</a>.  Even though you're not using the 'through' model feature, just pretend as if you were and create a stub model with the necessary ForeignKey.</p><br/><br/><pre><code># models:  make sure the naming convention matches what ManyToManyField would create<br/>class Report_LocationGroups(models.Model):<br/>    locationgroup = models.ForeignKey(LocationGroup)<br/>    report = models.ForeignKey(Report)<br/><br/># admin<br/>class ReportInline(admin.TabularInline):<br/>    model = models.Report_LocationGroups<br/><br/>class LocationGroupAdmin(admin.ModelAdmin):<br/>    inlines = ReportInline,<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSENSIT URL FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Just put <code>(?i)</code> at the start of every <code>r'...'</code> string, i.e.:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>(r'^(?i)admin/(.*)', admin.site.root),<br/>(r'^(?i)static/(?P&lt;path&gt;.*)$', 'django.views.static.serve',<br/>    {'document_root': settings.STATIC_DOC_ROOT, 'show_indexes': True}),<br/>(r'^(?i)login/$', 'django.contrib.auth.views.login'),<br/>(r'^(?i)logout/$', do_logout),<br/>)<br/></code></pre><br/><br/><p>to tell every RE to match case-insensitively -- and, of course, live happily ever after!-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( AND USE ) EXTEND PERMISS IN FACEBOOK WITH PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>After a lot of tinkering, I appear to have solved all of my problems in Facebookland:</p><br/><br/><ol><br/><li>Turns out that having a user click on a button to grant permissions is as easy as Caio Romão said it was.  For my part though, I found that directing them to the Facebook Desktop App link was way easier and more dependable.</li><br/><li>Using this link method, Facebook allows you to specify <code>enable_profile_selector=1</code> which will make sure that a list of pages is generated from which the user can select which pages (if any) will grant these permissions.</li><br/><li>For this one though, <em>Facebook is totally broken</em>.  While in #2 they allow the user to select a page to grant permissions, <em>they don't pass this information onto the application</em> either by way of a POST or in the headers.  It's just not there.  Instead, you have to do an ugly trick with FQL and some additional questions to the user to make it work.</li><br/></ol><br/><br/><p>Anyway, I <a href="http://danielquinn.org/blog/1578.html" rel="nofollow">detailed it all on my blog</a> if anyone is interested.  Thanks for your help!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO NEED AN IDE
    </pattern>
    <template>
<![CDATA[<p>It's great that your company wants to contribute to the community, but I have to say that I don't see what a 'Django IDE' would achieve. There are already plugins for all the main editors and IDEs to support Django - from Vim to TextMate to NetBeans - and these provide syntax highlighting, indentation, shortcuts and snippets for both Python source and Django templates. These can always do with more work, of course, so perhaps your efforts would be best focused on improving one of these.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DOE N T WORK IN DJANGO SHELL
    </pattern>
    <template>
<![CDATA[<p>IPython 0.11 has a different API, for which a fix exists in the last Django versions.</p><br/><br/><p>For older Django versions, you can use IPython 0.10, which does work:</p><br/><br/><pre><code>pip install ipython==0.10<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUIR LOGIN FOR DJANGO GENER VIEW
    </pattern>
    <template>
<![CDATA[<p>You can also adds decorator by wrapping the function in your urls, which allows you to wrap the generic views:</p><br/><br/><pre><code>from django.contrib.auth.decorators import login_required<br/>from django.views.generic.simple import direct_to_template<br/>urlpatterns = patterns('',<br/>    (r'^foo/$', login_required(direct_to_template), {'template': 'foo_index.html'}),<br/>    )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTO MINIFI CSS J FILE BEFOR RELEAS
    </pattern>
    <template>
<![CDATA[<p>Did you try <a href="http://code.google.com/p/django-compress/" rel="nofollow">http://code.google.com/p/django-compress/</a> ?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME URL
    </pattern>
    <template>
<![CDATA[<p>I can't re-produce the import error on my machine using your project files (Windows 7, Django 1.1.1, Python 2.6.4). Everything imported fine but the urls were not specified properly (like the tutorial shows). Fixing the code:</p><br/><br/><p>/mysite/urls.py:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/><br/>from django.contrib import admin<br/>admin.autodiscover()<br/><br/>urlpatterns = patterns('',<br/>    (r'^polls/', include('mysite.polls.urls')),<br/>    (r'^admin/', include(admin.site.urls)),<br/>)<br/></code></pre><br/><br/><p>/mysite/polls/urls.py:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/><br/>urlpatterns = patterns('mysite.polls.views',<br/>    (r'^$', 'index'),<br/>    (r'^(?P&lt;poll_id&gt;\d+)/$', 'detail'),<br/>    (r'^(?P&lt;poll_id&gt;\d+)/results/$', 'results'),<br/>    (r'^(?P&lt;poll_id&gt;\d+)/vote/$', 'vote'),<br/>)<br/></code></pre><br/><br/><p>Visit <a href="http://127.0.0.1:8000/polls/" rel="nofollow">http://127.0.0.1:8000/polls/</a> - I received a TemplateDoesNotExist exception because the template file is missing.</p><br/><br/><p><strong>I'm afraid my answer might be to reboot and try it again. ;)</strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTEND THE COMMENT FRAMEWORK ( DJANGO ) BY REMOV UNNECESARI FIELD
    </pattern>
    <template>
<![CDATA[<p>I recently implemented the solution that Ofri mentioned, since I only wanted to accept a solitary "comment" field for a comment (like SO does, no "name", no "email" and no "url"). </p><br/><br/><p>To customize the default comment form and list display, I created a "comments" directory in my root "templates" directory and overrode the two default comment templates.</p><br/><br/><p>My "/templates/comments/form.html" is:</p><br/><br/><pre><code>{% load comments i18n %}<br/>{% if user.is_authenticated %}<br/>    &lt;form action="{% comment_form_target %}" method="post"&gt;<br/>        {% csrf_token %}<br/>        {% if next %}&lt;input type="hidden" name="next" value="{{ next }}" /&gt;{% endif %}<br/>        {% for field in form %}<br/>            {% if field.is_hidden %}<br/>                {{ field }}<br/>            {% else %}<br/>                {% if field.name != "name" and field.name != "email" and field.name != "url" %}<br/>                    {% if field.errors %}{{ field.errors }}{% endif %}<br/>                    &lt;p {% if field.errors %} class="error"{% endif %} {% ifequal field.name "honeypot" %} style="display:none;"{% endifequal %}&gt;<br/>                    {{ field }}<br/>                    &lt;/p&gt;<br/>                {% endif %}<br/>            {% endif %}<br/>        {% endfor %}<br/>        &lt;input type="submit" name="post" class="submit-post" value="{% trans "Add Comment" %}" /&gt;<br/>    &lt;/form&gt;<br/>{% else %}<br/>    I'm sorry, but you must be &lt;a href="javascript:alert('send to login page')"&gt;logged in&lt;/a&gt; to submit comments.<br/>{% endif %}<br/></code></pre><br/><br/><p>Which is only slightly different from the default comments form, primarily suppressing the display of the not-required "name", "email" and "url" inputs.</p><br/><br/><p>My "/templates/comments/list.html" is:</p><br/><br/><pre><code>&lt;div class="comment_start"&gt;&lt;/div&gt;<br/>{% for comment in comment_list %}<br/>    &lt;div class="comment"&gt;<br/>       {{ comment.comment }} <br/>       (from &lt;a href="javascript:alert('show user profile/stats')"&gt;{{ comment.user }}&lt;/a&gt; - {{ comment.submit_date|timesince }} ago)<br/>    &lt;/div&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>On the page I want the form, I first call <code>{% load comments %}</code> and then <code>{% render_comment_form for [object] %</code>} to show the form, or <code>{% render_comment_list for [object] %}</code> to generate a list of the comments on the object (replace [object] with your appropriate object name). </p><br/><br/><p>This is working great for me, and still giving me all the other "free" stuff that comes with django comments (moderation, flagging, feeds, polymorphic associations, etc...) </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CM MALFUNCT SITE MATCH QUERI DOE NOT EXIST
    </pattern>
    <template>
<![CDATA[<p>From <a href="http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites">http://docs.djangoproject.com/en/dev/ref/contrib/sites/#ref-contrib-sites</a></p><br/><br/><p>The SITE_ID setting specifies the database ID of the Site object associated with that particular settings file.</p><br/><br/><p>So, check the django_site table and make sure you are using the correct SITE_ID for your site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNRESOLV IMPORT MODEL
    </pattern>
    <template>
<![CDATA[<p>I was able to get rid of the import errors executing this cmd</p><br/><br/><pre><code>sudo ln -s /usr/lib/pymodules/ /usr/lib/python2.6/pymodules<br/></code></pre><br/><br/><p>I was lucky, testing different things I could resolve it but I'm not sure why I have to do this and how I could avoid doing it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT PATH
    </pattern>
    <template>
<![CDATA[<p>I know this isn't in the django tutorial, and shame on them, but it's better to set up relative paths for your path variables. You can set it up like so:</p><br/><br/><pre><code>import os<br/><br/>PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))<br/><br/>...<br/><br/>MEDIA_ROOT = PROJECT_PATH + '/media/'<br/><br/>TEMPLATE_DIRS = (<br/>    PROJECT_PATH + '/templates/'<br/>)<br/></code></pre><br/><br/><p>This way you can move your django project and your path roots will update automatically. This is useful when you're setting up your production server.</p><br/><br/><p>Second, there's something suspect to your TEMPLATE_DIRS path. It should point to the root of your template directory. Also, it should also end in a trailing <code>/</code>.</p><br/><br/><p>I'm just going to guess here that the <code>.../admin/</code> directory is not your template root. If you still want to write absolute paths you should take out the reference to the admin template directory.</p><br/><br/><pre><code>TEMPLATE_DIRS = (<br/>    'C:/django-project/myapp/mytemplates/'<br/>)<br/></code></pre><br/><br/><p>With that being said, the template loaders by default should be set up to recursively traverse into your app directories to locate template files.</p><br/><br/><pre><code>TEMPLATE_LOADERS = (<br/>    'django.template.loaders.filesystem.load_template_source',<br/>    'django.template.loaders.app_directories.load_template_source',<br/>#     'django.template.loaders.eggs.load_template_source',<br/>)<br/></code></pre><br/><br/><p>You shouldn't need to copy over the admin templates unless if you specifically want to overwrite something.</p><br/><br/><p>You will have to run a syncdb if you haven't run it yet. You'll also need to statically server your media files if you're hosting django through runserver.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELERI GET TASK ID FOR CURRENT TASK
    </pattern>
    <template>
<![CDATA[<p>Celery does set some default keyword arguments if the task accepts them.<br/>(you can accept them by either using **kwargs, or list them specifically)</p><br/><br/><pre><code>@task<br/>def do_job(path, task_id=None):<br/>    cache.set(task_id, operation_results)<br/></code></pre><br/><br/><p>The list of default keyword arguments is documented here:<br/><a href="http://ask.github.com/celery/userguide/tasks.html#default-keyword-arguments" rel="nofollow" rel="nofollow">http://ask.github.com/celery/userguide/tasks.html#default-keyword-arguments</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAINTAIN CONSIST THIRD PARTI LIBRARI AMONGST ALL DEVELOP
    </pattern>
    <template>
<![CDATA[<p>I recommend using PIP with its requirements files, sounds exactly what you need. I use it in every project. You can set the required packages and their respective sources (got/svn/pypi), even the exact commit you need.</p><br/><br/><p>Then, to update your local libraries to the versions required by the new commit on github, just pull and do "pip install -r requirements.txt" on requirements.txt file living in the root of your git repo. </p><br/><br/><p>You can read about it <a href="http://bit.ly/hucaS3" rel="nofollow">here</a>. </p><br/><br/><p>I'm not sure whether it can put the built packages in a preset directory, but it works incredibly well with Pythons virtualenv, which I also recommend.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TURBO GEAR WEB2PI WHICH IS BETTER FOR WHAT
    </pattern>
    <template>
<![CDATA[<p>You should look at the web2py online documentation (<a href="http://web2py.com/book" rel="nofollow">http://web2py.com/book</a>). It comes with a Role Based Access Control (the most general access control mechanism) and it is very granular, you can grant access for specific operation on specific records. It comes with a web based IDE but you can use WingIDE and Eclipse too. It comes with  helper system that allows you to generate HTML without using HTML. Here is an example of a complete app that requires users to register/login/post messages:</p><br/><br/><pre><code>db.define_table('message',Field('body'),Field('author',db.auth_user))<br/>@auth.requires_login()<br/>def index():<br/>    db.message.author.default=auth.user.id<br/>    db.message.author.writable=False<br/>    return dict(form=crud.create(db.message),<br/>                messages=db(db.message.id&gt;0).select())<br/></code></pre><br/><br/><p>The web2py project is very active as you can see from the list of changes <a href="http://code.google.com/p/web2py/source/list" rel="nofollow">http://code.google.com/p/web2py/source/list</a></p><br/><br/><p>If you have web2py related questions I strongly suggest you join the web2py mailing list:<br/><a href="http://groups.google.com/group/web2py/topics" rel="nofollow">http://groups.google.com/group/web2py/topics</a></p><br/><br/><p>We are very active and your questions will be answered very quickly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPLAT WITH JAVASCRIPT OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>The (massive) advantage of sticking with Django templates is that you only need to use one templating language, which retains the same capabilities regardless of the page you wish to generate. If you find that you're having performance issues then you should consider looking into <a href="http://docs.djangoproject.com/en/dev/topics/cache/#template-fragment-caching" rel="nofollow">caching template fragments</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH DJANGO CELERI
    </pattern>
    <template>
<![CDATA[<p>Try setting <code>BROKER_BACKEND=memory</code></p><br/><br/><p>(Thanks to <a href="http://stackoverflow.com/users/5577/asksol">asksol</a>'s comment.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL INSID OF SCRAPI
    </pattern>
    <template>
<![CDATA[<p>If anyone else is having the same problem, this is how I solved it.</p><br/><br/><p>I added this to my <strong>scrapy</strong> settings.py file:</p><br/><br/><pre><code>def setup_django_env(path):<br/>    import imp, os<br/>    from django.core.management import setup_environ<br/><br/>    f, filename, desc = imp.find_module('settings', [path])<br/>    project = imp.load_module('settings', f, filename, desc)       <br/><br/>    setup_environ(project)<br/><br/>setup_django_env('/path/to/django/project/')<br/></code></pre><br/><br/><p>Note: the path above is to your django project folder, not the settings.py file.  </p><br/><br/><p>Now you will have full access to your django models inside of your scrapy project.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOVE W WEBSOCKET AND PYTHON DJANGO ( TWIST )
    </pattern>
    <template>
<![CDATA[<p>I'm the author of django-websocket. I'm not a real expert in the topic of websockets and networking, however I think I have a decent understanding of whats going on. Sorry for going into great detail. Even if most of the answer isn't specific to your question it might help you at some other point. :-)</p><br/><br/><hr><br/><br/><h1>How websockets work</h1><br/><br/><p>Let me explain shortly what a websocket is. A websocket starts as something that really looks like a plain HTTP request, established from the browser. It indicates through a HTTP header that it wants to "upgrade" the protocol to be a websocket instead of a HTTP request. If the server supports websockets, it agrees on the handshake and both - server and client - now know that they will use the established tcp socket formerly used for the HTTP request as a connection to interchange websocket messages.</p><br/><br/><p>Beside sending and waiting for messages, they have also of course the ability to close the connection at any time.</p><br/><br/><h1>How django-websocket abuses the python's wsgi request environment to hijack the socket</h1><br/><br/><p>Now lets get into the details of how django-websocket implements the "upgrading" of the HTTP request in a django request-response cylce.</p><br/><br/><p>Django usually uses the WSGI specification to talk to the webserver like apache or gunicorn etc. This specification was designed just with the very limited communication model of HTTP in mind. It assumes that it gets a HTTP request (only incoming data) and returns the response (only outgoing data). This makes it tricky to force django into the concept of a websocket where bidirectional communication is allowed.</p><br/><br/><p>What I'm doing in django-websocket to achieve this is that I dig very deeply into the internals of WSGI and django's request object to retrieve the underlaying socket. This tcp socket is then used to handle the upgrade the HTTP request to a websocket instance directly.</p><br/><br/><p><strong>Now to your original question ...</strong></p><br/><br/><p>I hope the above makes it obvious that when a websocket is established, there is no point in returning a HttpResponse. This is why you usually don't return anything in a view that is handled by django-websocket.</p><br/><br/><p>However I wanted to stick close to the concept of a view that holds the logic and returns data based on the input. This is why you should only use the code in your view to handle the websocket.</p><br/><br/><p>After you return from the view, the websocket is automatically closed. This is done for a reason: We don't want to keep the socket open for an undefined amount of time and relying on the client (the browser) to close it.</p><br/><br/><p>This is why you cannot access a websocket with django-websocket outside of your view. The file descriptor is then of course set to -1 indicating that its already closed.</p><br/><br/><h1>Disclaimer</h1><br/><br/><p>I explained above that I'm digging in the surrounding environment of django to get somehow -- in a very hackish way -- access to the underlaying socket. This is very fragile and also not supposed to work since WSGI is not designed for this! I also explained above that the websocket is closed after the view ends - however after the websocket closed down (AND closed the tcp socket), django's WSGI implementation tries to send a HTTP response - it doesn't know about websockets and thinks it is in a normal HTTP request-response cycle. But the socket is already closed an the sending will fail. This usually causes an exception in django.</p><br/><br/><p>This didn't affected my testings with the development server. The browser will never notice (you know .. the socket is already closed ;-) - but raising an unhandled error in every request is not a very good concept and may leak memory, doesn't handle database connection shutdown correctly and many athor things that <em>will</em> break at some point if you use django-websocket for more than experimenting.</p><br/><br/><p>This is why I would really advise you <strong><em>not to use websockets with django</em></strong> yet. It doesn't work by design. Django and especially WSGI would need a total overhaul to solve these problems (see <a href="http://groups.google.com/group/paste-users/browse_thread/thread/2f3a5ba33b857c6c" rel="nofollow">this discussion for websockets and WSGI</a>). Since then I would suggest using something like <a href="http://eventlet.net/" rel="nofollow">eventlet</a>. Eventlet has a working websocket implementation (I borrowed some code from eventlet for the initial version of django-websocket) and since its just plain python code you can import your models and everything else from django. The only drawback is that you need a second webserver running just to handle websockets.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST TIP
    </pattern>
    <template>
<![CDATA[<p>I would recommend reading <a href="https://www.packtpub.com/django-1-1-testing-and-debugging/book" rel="nofollow"><em>Django 1.1 Testing and Debugging</em> by Karen M. Tracey</a>. The first five chapters cover testing in Django. Specifically, you should look at Chapter 5 which discusses integrating other test tools. Below is an excerpt of what Chapter 5 covers:</p><br/><br/><blockquote><br/>  <p>In this chapter, we:</p><br/>  <br/>  <ul><br/>  <li>Learned what hooks Django provides for adding test functions</li><br/>  <li>Saw an example of how these hooks can be used, specifically in the case of adding code coverage reporting</li><br/>  <li>Also explored an example where using these hooks was not necessary-when integrating the use of the <code>twill</code> test tool into our Django test cases</li><br/>  </ul><br/></blockquote><br/><br/><p>Here are links to some of the tools that Karen Tracey discusses in chapter 5 of her book:</p><br/><br/><ul><br/><li><a href="http://nedbatchelder.com/code/coverage/" rel="nofollow">Ned Batchelder's <code>coverage</code> module</a></li><br/><li><a href="http://twill.idyll.org/" rel="nofollow">Twill</a></li><br/></ul><br/><br/><h3>Lettuce</h3><br/><br/><p>You may also want to check out <a href="http://lettuce.it/" rel="nofollow">Lettuce</a>. From the website:</p><br/><br/><blockquote><br/>  <p>Lettuce is a very simple BDD tool based on the Cucumber.</p><br/></blockquote><br/><br/><p>The Lettuce documentation also has a section on <a href="http://lettuce.it/recipes/django-lxml.html#recipes-django-lxml" rel="nofollow">integrating Lettuce with Django</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON AMAZON WEB SERVIC
    </pattern>
    <template>
<![CDATA[<p>There is nothing "special" with EC2 here. It just provides bare (or generally preconfigured from custom AMI) system instance - you have access to whole virtualized system, so you can safely break things on your own. Think about it as a specific VPS.</p><br/><br/><p>You have to prepare deployment by yourself, which is not so difficult - just follow the documentation. I'd advice to run with basic linux distro and add needed stuff than to rely on some preconfigured image. As for you questions:</p><br/><br/><ol><br/><li><p>You need to do two things: setup your instance (accounts, needed software, other custom setup, so some linux administration guide should be handy) and prepare django app deployment (deploy python code, hook up to web server). For the latter, general deployment instructions for django can be applied here ( <a href="http://docs.djangoproject.com/en/dev/howto/deployment/">http://docs.djangoproject.com/en/dev/howto/deployment/</a> ). </p></li><br/><li><p>Start with AMI with your favorite linux distro, and then add necessary software from it's repository. </p></li><br/><li><p>Mount and use EBS as soon as possible for all your data. When rebooted, EC2 instance will wipe out all it's data, so be prepared for this. Do system snapshots to AMI to have quick recovery on failure.</p></li><br/></ol><br/><br/><p>Yes, you can deploy several applications on one instance, but mind that EC2 instance is virtualized (with quite high "virtualization tax" imo, especially for smaller instances), so you might run into general performance problems. Assume that you'd need migrate to bigger instance/multiple instances after some time.</p><br/><br/><p>Virtualenv should be your default deployment tool. Yes, you can use it here too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO 1.3 BETA
    </pattern>
    <template>
<![CDATA[<p>To avoid problems like that in the future, use <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND BACKBONE.J QUESTION
    </pattern>
    <template>
<![CDATA[<p>you can point backbone collections/models toward whatever urls you want and parse the response however you want in your backbone "subclasses".</p><br/><br/><p>Model.url:</p><br/><br/><p><a href="http://documentcloud.github.com/backbone/docs/backbone.html#section-43">http://documentcloud.github.com/backbone/docs/backbone.html#section-43</a></p><br/><br/><p>Collection.parse:</p><br/><br/><p><a href="http://documentcloud.github.com/backbone/docs/backbone.html#section-69">http://documentcloud.github.com/backbone/docs/backbone.html#section-69</a></p><br/><br/><p>You can setup one-off request handlers that can return some json for backbone to parse/ingest without piston or tastypie.  But, yes, these are two good solutions for comprehensive REST with django.</p><br/><br/><p>There are some good tips here: <a href="http://joshbohde.com/blog/backbonejs-and-django">http://joshbohde.com/blog/backbonejs-and-django</a> for using backbone with tastypie.</p><br/><br/><p>With tastypie, you can limit access to the api with custom authorization/authentication.</p><br/><br/><p><a href="http://django-tastypie.readthedocs.org/en/latest/authentication_authorization.html">http://django-tastypie.readthedocs.org/en/latest/authentication_authorization.html</a></p><br/><br/><p>You can create an Authorization scheme that makes sure that the objects list is filtered to be only the object which the user "owns", something like this:</p><br/><br/><pre><code>class PerUserAuthorization(Authorization):<br/>  def apply_limits(self, request, object_list):<br/>    if request and hasattr(request, 'user'):<br/>        if request.user.is_authenticated():<br/>            object_list = object_list.filter(user=request.user)<br/>            return object_list<br/><br/>    return object_list.none()<br/></code></pre><br/><br/><p>Alternately/additionally, you can make resources that only return the user's objects by overriding the <code>ModelResource.apply_authorization_limits</code> method and automatically associate the user with created objects by overriding the <code>obj_create</code> method,  something like:</p><br/><br/><pre><code>class PerUserModelResource(ModelResource):<br/><br/>  def obj_create(self, bundle, request=None, **kwargs):<br/>    return ModelResource.obj_create(self, bundle, request, user=request.user)<br/><br/>  def apply_authorization_limits(self, request, object_list):<br/>    return object_list.filter(user=request.user)<br/></code></pre><br/><br/><p>Then, you can inherit from the PerUserModelResource and/or make PerUserAuthorization the authorization for the resource.</p><br/><br/><pre><code>class ImageGroupResource(PerUserModelResource):<br/>  study = fields.ForeignKey(StudyResource, "study")<br/>  uploads = fields.ToManyField('cm.api.UploadResource', 'uploads', null=True)<br/><br/>  class Meta:<br/>    queryset = ImageGroup.objects.all()<br/>    list_allowed_methods = ['get', 'post']<br/>    detail_allowed_methods = ['get', 'post', 'put', 'delete']<br/>    resource_name = 'cm/imagegroup'<br/>    authorization = PerUserAuthorization()<br/>    filtering = {<br/>        'name': ALL,<br/>        'created_dt': ['exact', 'range', 'gt', 'gte', 'lt', 'lte'],<br/>    }<br/></code></pre><br/><br/><p>Backbone and django-tastypie are nicely documented.  Take the time to build a simple proof of concept and read through the docs a few times.  They go together like peas and carrots.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COLLABOR FILTERING MATCHING RECOMMEND LIBRARI FOR PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>They covered this subject in the free Stanford ML class. Check the videos for chapter XVI at <a href="http://www.ml-class.org/course/video/preview_list" rel="nofollow">http://www.ml-class.org/course/video/preview_list</a></p><br/><br/><p>Although the implementation discussed is Matlab/Octave it should be not difficult to implement in Python, even easier if you are using Numpy</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you need to use something similar to the {% url %} template tag in your code, Django provides the django.core.urlresolvers.reverse(). The reverse() function has the following signature:</p><br/><br/><pre><code>reverse(viewname, urlconf=None, args=None, kwargs=None)<br/></code></pre><br/><br/><p><a href="http://www.djangoproject.com/documentation/url_dispatch/#utility-methods" rel="nofollow">http://www.djangoproject.com/documentation/url_dispatch/#utility-methods</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUTER JOIN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django doesn't support "joins" in the usual SQL sense -- it supports object navigation.</p><br/><br/><p>Note that a relational join (inner or outer) creates a new "class" of entities.  One that doesn't have a definition in Django.  So there's no proper "result set" since there's no class definition for the things you get back.   The best you can do is define a tuple which will be packed with None's for missing combinations.</p><br/><br/><p>A left (or right) outer join looks like this.  It creates two disjoint subsets, those who have an associated set of related entities, and those who don't.</p><br/><br/><pre><code>for obj in Model1.objects.all():<br/>    if obj.model2_set().count() == 0:<br/>        # process (obj, None) -- no Model2 association<br/>    else:<br/>        for obj2 in obj.model2_set.all():<br/>            # process (obj, obj2) -- the "inner join" result<br/></code></pre><br/><br/><p>A "Full" outer join is a union of the remaining items that have no relationships.</p><br/><br/><pre><code>for obj2 in Model2.objects.all():<br/>    if obj2.model1_set().count() == 0:<br/>        # process (None, obj2) -- no Model1 association<br/></code></pre><br/><br/><p>The issue is always, what processing are you doing with this weird collection of three different subsets of objects?   </p><br/><br/><p>The point of an object database is to focus the processing on the object and it's associated objects.   </p><br/><br/><p>The peculiar collection called a "relational join" is never in the original object model.  It's a new class of objects built from two (or more) original objects. </p><br/><br/><p>Worse, outer joins create a collection with multiple subclasses (inner join, left outer join and right outer join).  What does that collection of things <strong>mean</strong>?</p><br/><br/><p>Wait, it can get worse.  If the processing includes checks for the missing attributes (i.e. <code>if someObj.anObj2attribute is None</code>: we're essentially looking for <code>Model1</code> items with no <code>Model2</code> object associated.  Ummm... why did we put those in the outer join, only to filter them using an <code>if</code> statement?  Why not just do separate queries amd process each subset properly?</p><br/><br/><p><hr /></p><br/><br/><p>Edit:  When you're showing "incomplete" status, it isn't an outer-join at all.  It's much simpler.  You need to create one (or two) separate collections in your view function for your template to display.</p><br/><br/><p>First, you should use status codes, not the presence or absence of a foreign key.  Optional foreign keys don't have "reasons" -- they're either there or not there.  A status code can provide useful shades of meaning ("incomplete", "in error", "broken", "not applicable", "to be deleted", etc.)</p><br/><br/><pre><code>errorList1 = Model1.objects.filter( status="Incomplete" )<br/>errorList2 = Model2.objects.filter( status="Incomplete" )<br/></code></pre><br/><br/><p>These two are the two non-join parts of a full outer join.  You can then display these two error lists in your template with appropriate column titles and status codes and everything.</p><br/><br/><p>You can even put them into a single table to mimic the old full outer join report people used to see</p><br/><br/><pre><code>&lt;table&gt;<br/>    &lt;tr&gt;&lt;th&gt;Model1&lt;/th&gt;&lt;th&gt;Model2&lt;/th&gt;&lt;/tr&gt;<br/>    {% for e1 in errorList1 %}<br/>    &lt;tr&gt;&lt;td&gt;e1&lt;/td&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;/tr&gt;<br/>    {% endfor %}<br/>    {% for e2 in errorList2 %}<br/>    &lt;tr&gt;&lt;td&gt;NULL&lt;/td&gt;&lt;td&gt;e2&lt;/td&gt;&lt;/tr&gt;<br/>    {% endfor %}<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>Looks like a full outer join report.  Without the full outer join.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUOT A STRING VALU EXPLICITLI ( PYTHON DB API PSYCOPG2 )
    </pattern>
    <template>
<![CDATA[<p>Ok, so I was curious and went and looked at the source of psycopg2. Turns out I didn't have to go further than the examples folder :)</p><br/><br/><p>And yes, this is psycopg2-specific. Basically, if you just want to quote a string you'd do this:</p><br/><br/><pre><code>from psycopg2.extensions import adapt<br/><br/>print adapt("Hello World'; DROP DATABASE World;")<br/></code></pre><br/><br/><p>But what you probably want to do is to write and register your own adapter;</p><br/><br/><p>In the examples folder of psycopg2 you find the file <a href="http://initd.org/svn/psycopg/psycopg2/trunk/examples/myfirstrecipe.py" rel="nofollow">'myfirstrecipe.py'</a> there is an example of how to cast and quote a specific type in a special way.</p><br/><br/><p>If you have objects for the stuff you want to do, you can just create an adapter that conforms to the 'IPsycopgSQLQuote' protocol (see pydocs for the myfirstrecipe.py-example...actually that's the only reference I can find to that name) that quotes your object and then registering it like so:</p><br/><br/><pre><code>from psycopg2.extensions import register_adapter<br/><br/>register_adapter(mytype, myadapter)<br/></code></pre><br/><br/><p>Also, the other examples are interesting; esp. <a href="http://initd.org/svn/psycopg/psycopg2/trunk/examples/dialtone.py" rel="nofollow">'dialtone.py'</a> and <a href="http://initd.org/svn/psycopg/psycopg2/trunk/examples/simple.py" rel="nofollow">'simple.py'</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW CAN I COMBIN TWO QUERI FROM SEPAR MODEL INTO ONE QUERI
    </pattern>
    <template>
<![CDATA[<p>I would suggest that you use <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#id4" rel="nofollow">Model inheritance</a>. </p><br/><br/><p>Create a base model that contains date and title. Subclass Msg1 and Msg2 off it as described. Do all your queries (to fill a page) using the base model and then switch to the derived type at the last moment. </p><br/><br/><p>The really great thing about inheritance is that django then allows you to use the base model in foreign keys from other models, so you can make your whole application more flexible. Under the hood it is just a table for the base model with a table per sub-model containing one-to-one keys.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RDBM OOP FRIENDLI PYTHON WEB APP FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Django seems to have the most traction, and is being actively development; being chosen by Google as the default template framework for App Engine certainly didn't hurt. It seems solid enough to keep you going for three years or longer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WHERE IS THE BEST PLACE TO PUT SHORT SNIPPET OF HTML FORMAT DATA
    </pattern>
    <template>
<![CDATA[<p>Sounds like an <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-tags" rel="nofollow">inclusion tag</a> is what you're looking for. You could have a template and tag for each major variation and use the tag's arguments to customise the context for each template as required.</p><br/><br/><p>Basic tag definition:</p><br/><br/><pre><code>@register.inclusion_tag('person/address.html')<br/>def display_address(address):<br/>    return {'address': address}<br/></code></pre><br/><br/><p>Use in templates (assuming the templatetag module containing it has already been <code>{% load %}</code>-ed):</p><br/><br/><pre><code>{% display_address address %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT MODELFORM S META CLASS
    </pattern>
    <template>
<![CDATA[<p>The Meta class is used to dynamically construct the form definition - so by the time you've created the ModelForm instance, the fields not in the exclude have already been added as the new object's attributes.</p><br/><br/><p>The normal way to do it would be to just have multiple class definitions for each possible exclude list.  But if you want the form itself to be dynamic, you'll have to create a class definition on the fly.  Something like:</p><br/><br/><pre><code>def get_form(exclude_list):<br/>    class myform(ModelForm):<br/>        class Meta:<br/>            model = Passenger<br/>            exclude = exclude_list<br/>    return myform<br/><br/>frm_class = get_form( ('field1', 'field2') )<br/>form = frm_class()<br/></code></pre><br/><br/><p><strong>UPDATE</strong>:  I just revisited this post and thought I'd post a little more idiomatic way to handle a dynamic class:</p><br/><br/><pre><code>def PassengerForm(exclude_list, *args, **kwargs):<br/>    class MyPassengerForm(ModelForm):<br/>        class Meta:<br/>            model = Passenger<br/>            exclude = exclude_list<br/><br/>        def __init__(self):<br/>            super(MyPassengerForm, self).__init__(*args, **kwargs)<br/><br/>    return MyPassengerForm()<br/><br/>form = PassengerForm( ('field1', 'field2') )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIT TO DEPLOY WEBSIT
    </pattern>
    <template>
<![CDATA[<p>I use git to track my website, and I deploy it like this:</p><br/><br/><pre><code>git archive --format=tar --prefix="homepage/" master | gzip | ssh webserver "tar xvz -C ~/public_html"<br/></code></pre><br/><br/><p>This deserves a little explanation. The archive command for git will export the files for the master branch, which gets compressed with gzip to minimize network traffic. It's received remotely over ssh, which is decompressed into the final destination directory.</p><br/><br/><p>The deploy script that I use has a little more going on, but this is the most important piece.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CM FOR MY OWN WEBSIT
    </pattern>
    <template>
<![CDATA[<p>It depends what kind of tools you're looking for.</p><br/><br/><p>As for an editor, if you like CLI stuff, then emacs or vim is the way to go (I prefer emacs).  If you choose emacs, then you may also want to use <a href="http://pymacs.progiciels-bpi.ca/" rel="nofollow">pymacs</a> for customizing it (since you'll already be familiar with python).  If you want some intellisense-like features, then eclipse is a good way to go, but I should warn you:  python can be a tricky language to do that kind of stuff for.  Thus, it may not be what you're used to with some other languages.  All the same, you may give <a href="http://pydev.sourceforge.net/" rel="nofollow">pydev</a> a shot.</p><br/><br/><p>I'd also recommend going with <a href="http://trac.edgewall.org/" rel="nofollow">trac</a> for tickets, source viewing, and for using your <a href="http://buildbot.net/trac" rel="nofollow">buildbot</a> continuous integration server.</p><br/><br/><p>And tools like <a href="http://www.logilab.org/857" rel="nofollow">pylint</a> and <a href="http://bicyclerepair.sourceforge.net/" rel="nofollow">bicycle repair man</a> are always helpful as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS VERI SLOW ON MY MACHIN
    </pattern>
    <template>
<![CDATA[<p>Firefox has a problem browsing to localhost on some Windows machines. You can solve it by switching off ipv6, which isn't really recommended. Using 127.0.0.1 directly is another way round the problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REAL WORLD DIFFER BETWEEN ZEND FRAMEWORK AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>Zend doesn't include a real ORM. It provides some helper classes but you are mostly on your own in modelling your database and writing your own SQL queries. So you would have full freedom there. As Deresh says, Zend is modularized so you can pick and choose the parts you want.</p><br/><br/><p>Personally I use Zend together with DB_DataObjects from PEAR as by ORM. It can auto-generate your skeleton code. It is a very simple solution for handling simple queries but I can always write custom SQL where necessary.</p><br/><br/><p>Regarding separation of the two admin and frontend I would suggest putting them on different domains, e.g.: admin.yoursite.com (backend) and www.yoursite.com (frontend). You can probably work it with having them both on the same URL but it is not really a use-case that is supported by Django or Zend.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCREMENT BLOG ENTRI VIEW COUNT BY ONE. IS THI EFFICI
    </pattern>
    <template>
<![CDATA[<p>You can use <code>F()</code> objects for this now:</p><br/><br/><p><strong><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#updating-multiple-objects-at-once" rel="nofollow">New in Django 1.1</a>.</strong><br><br/>Calls to update can also use F() objects to update one field based on the value of another field in the model. This is especially useful for incrementing counters based upon their current value.</p><br/><br/><pre><code>Entry.objects.filter(is_published=True).update(views=F('views')+1)<br/></code></pre><br/><br/><p>Although you can't do an update on a sliced query set... <strong>edit: actually you can...</strong></p><br/><br/><p>This can be done completely in django ORM. You need two SQL queries:</p><br/><br/><ol><br/><li>Do your filter and collect a list of primary keys</li><br/><li>Do an update on a non-sliced query set of items matching any of those primary keys.</li><br/></ol><br/><br/><p>Getting the non-sliced query set is the hard bit. I wondered about using <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#in-bulk-id-list" rel="nofollow"><code>in_bulk</code></a> but that returns a dictionary, not a query set. One would usually use <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="nofollow"><code>Q objects</code></a> to do complex OR type queries and that will work, but <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#in" rel="nofollow"><code>pk__in</code></a> does the job much more simply.</p><br/><br/><pre><code>latest_entry_query_set = Entry.objects.filter(is_published=True)\<br/>                                      .order_by('-date_published')[:10]  <br/>latest_entry_ids = (ent.pk for ent in latest_entry_query_set)  #iterator<br/>non_sliced_query_set = Entry.objects.filter(pk__in=latest_entry_ids)  <br/>n = non_sliced_query_set.update(views=F('views')+1)  <br/>print n or 0, 'items updated'<br/></code></pre><br/><br/><p>Due to the way that django executes queries lazily, this results in just 2 database hits, no matter how many items are updated. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE SELECT MULTIPL AND POST
    </pattern>
    <template>
<![CDATA[<pre><code>request.POST.getlist('services')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PURE DJANGO FORM ERROR IN JSON
    </pattern>
    <template>
<![CDATA[<p>Got it after a <em>lot</em> of messing around, testing different things.  N.B. I'm not sure whether this works with internationalization as well. This also takes the first validation error for each field, but modifying it to get all of the errors should be rather easy.</p><br/><br/><pre><code>return json_response({ 'success' : False,<br/>                       'errors' : [(k, v[0].__unicode__()) for k, v in form.errors.items()] })<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAYP SETUP
    </pattern>
    <template>
<![CDATA[<p>In your code...</p><br/><br/><pre><code>  'payment_form_cls': 'payment_form_cls',  # form class to use for payment<br/></code></pre><br/><br/><p>This must be a Form object that's used for validation.</p><br/><br/><pre><code>   'payment_form_cls': MyValidationForm,  # form class to use for payment<br/></code></pre><br/><br/><p><hr /></p><br/><br/><p><strong>Edit</strong></p><br/><br/><p><a href="http://github.com/johnboxall/django-paypal/tree/master" rel="nofollow">http://github.com/johnboxall/django-paypal/tree/master</a></p><br/><br/><p>Your request is supposed to include a notify-url, return-url and cancel-return.  All three url's YOU provide to Paypal.</p><br/><br/><p>Paypal will send messages to these URL's.</p><br/><br/><p>Since Paypal will send messages to these URL's, YOU must put them in your urls.py.  You must write view functions for these three urls'.  These urls will have your paypal responses sent to them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LABEL OF A CHOIC IN A DJANGO CHOICEFIELD
    </pattern>
    <template>
<![CDATA[<p>Here is a way I came up with.  There may be an easier way.  I tested it using <code>python manage.py shell</code>:</p><br/><br/><pre><code>&gt;&gt;&gt; cf = ContactForm({'reason': 'feature'})<br/>&gt;&gt;&gt; cf.is_valid()<br/>True<br/>&gt;&gt;&gt; cf.fields['reason'].choices<br/>[('feature', 'A feature')]<br/>&gt;&gt;&gt; for val in cf.fields['reason'].choices:<br/>...     if val[0] == cf.cleaned_data['reason']:<br/>...             print val[1]<br/>...             break<br/>...<br/>A feature<br/></code></pre><br/><br/><p>Note: This probably isn't very Pythonic, but it demonstrates where the data you need can be found.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM TEMPLAT TAG IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>try doing the following:</p><br/><br/><pre><code>$ python ./manage.py startapp foo<br/></code></pre><br/><br/><p>Add foo to installed apps:</p><br/><br/><pre><code>INSTALLED_APPS += ('foo',)<br/></code></pre><br/><br/><p>And move your templatetags directory into your foo app. Something like:</p><br/><br/><pre><code>./djangoproject<br/>    __init__.py<br/>    settings.py<br/>    urls.py<br/>    etc..<br/>    foo/<br/>        __init__.py<br/>        templatetags/<br/>            __init__.py<br/>            range_template.py<br/></code></pre><br/><br/><p>Django convention is that template tag code resides in apps, in directories named templatetags (<a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/" rel="nofollow">see docs</a>). I assume the same would be true for GAE.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A GETATTR ( ) STYLE LOOKUP IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I also had to <a href="http://snipt.net/Fotinakis/django-template-tag-for-dynamic-attribute-lookups/" rel="nofollow">write this code</a> as a custom template tag recently. To handle all look-up scenarios, it first does a standard attribute look-up, then tries to do a dictionary look-up, then tries a <strong>getitem</strong> lookup (for lists to work), then follows standard Django template behavior when an object is not found.</p><br/><br/><p>(updated 2009-08-26 to now handle list index lookups as well)</p><br/><br/><pre><code># app/templatetags/getattribute.py<br/><br/>import re<br/>from django import template<br/>from django.conf import settings<br/><br/>numeric_test = re.compile("^\d+$")<br/>register = template.Library()<br/><br/>def getattribute(value, arg):<br/>	"""Gets an attribute of an object dynamically from a string name"""<br/><br/>	if hasattr(value, str(arg)):<br/>		return getattr(value, arg)<br/>	elif hasattr(value, 'has_key') and value.has_key(arg):<br/>		return value[arg]<br/>	elif numeric_test.match(str(arg)) and len(value) &gt; int(arg):<br/>		return value[int(arg)]<br/>	else:<br/>		return settings.TEMPLATE_STRING_IF_INVALID<br/><br/>register.filter('getattribute', getattribute)<br/></code></pre><br/><br/><p>Template usage:</p><br/><br/><pre><code>{% load getattribute %}<br/>{{ object|getattribute:dynamic_string_var }}<br/></code></pre><br/><br/><p><br /></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD IMAG FILE IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>In production, you'll just have the HTML generated from your template pointing to wherever the host has media files stored. So your template will just have for example</p><br/><br/><pre><code>&lt;img src="../media/foo.png"&gt;<br/></code></pre><br/><br/><p>And then you'll just make sure that directory is there with the relevant file(s).</p><br/><br/><p>during development is a different issue. The django docs explain it succinctly and clearly enough that it's more effective to link there and type it up here, but basically you'll define a view for site media with a hardcoded path to location on disk.</p><br/><br/><p>Right <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DATA TO JAVASCRIPT VIA DJANGO
    </pattern>
    <template>
<![CDATA[<p>I recommend against putting much JavaScript in your Django templates - it tends to be hard to write and debug, particularly as your project expands. Instead, try writing all of your JavaScript in a separate script file which your template loads and simply including just a JSON data object in the template. This allows you to do things like run your entire JavaScript app through something like <a href="http://www.jslint.com" rel="nofollow">JSLint</a>, minify it, etc. and you can test it with a static HTML file without any dependencies on your Django app. Using a library like simplejson also saves you the time spent writing tedious serialization code.</p><br/><br/><p>If you aren't assuming that you're building an AJAX app this might simply be done like this:</p><br/><br/><p>In the view:</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/><br/>def view(request, ...):<br/>    js_data = simplejson.dumps(my_dict)<br/>    ...<br/>    render_template_to_response("my_template.html", {"my_data": js_data, ...})<br/></code></pre><br/><br/><p>In the template:</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt;<br/>    data_from_django = {{ my_data }};<br/>    widget.init(data_from_django);<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>As far as dates go, you might also want to think about how you pass dates around. I've almost always found it easiest to pass them as Unix timestamps:</p><br/><br/><p>In Django:</p><br/><br/><pre><code>time_t = time.mktime(my_date.timetuple())<br/></code></pre><br/><br/><p>In JavaScript, assuming you've done something like <code>my_date = {{ time_t }}</code> with the results of the snippet above:</p><br/><br/><pre><code>my_date = new Date();<br/>my_date.setTime(time_t);<br/></code></pre><br/><br/><p>Finally, pay attention to UTC - you'll want to have the Python and Django date functions exchange data in UTC to avoid embarrassing shifts from the user's local time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AID IN BROWSING FOLLOW ( LARG ) PYTHON PROJECT SOURC CODE
    </pattern>
    <template>
<![CDATA[<p>The following is an aggregate of tools mentioned in other answers...</p><br/><br/><h2>cscope </h2><br/><br/><p><a href="http://cscope.sourceforge.net/" rel="nofollow">http://cscope.sourceforge.net/</a></p><br/><br/><p>wikipedia entry: <a href="http://en.wikipedia.org/wiki/Cscope" rel="nofollow">http://en.wikipedia.org/wiki/Cscope</a></p><br/><br/><p>cscope is a console mode or text-based graphical interface ... It is often used on very large projects to find source code, functions, declarations, definitions and regular expressions given a text string.</p><br/><br/><h2>pyscope </h2><br/><br/><p><a href="http://pypi.python.org/pypi/pycscope/" rel="nofollow">http://pypi.python.org/pypi/pycscope/</a></p><br/><br/><p>generates a cscope index of Python source trees</p><br/><br/><h2>ctags and exuberant ctags</h2><br/><br/><p><a href="http://ctags.sourceforge.net/" rel="nofollow">http://ctags.sourceforge.net/</a></p><br/><br/><p><a href="http://ctags.sourceforge.net/ctags.html" rel="nofollow">http://ctags.sourceforge.net/ctags.html</a></p><br/><br/><p>wikipedia entry: <a href="http://en.wikipedia.org/wiki/Ctags" rel="nofollow">http://en.wikipedia.org/wiki/Ctags</a></p><br/><br/><p>Ctags is a program that generates an index (or tag) file of names found in source and header files of various programming languages. Depending on the language, functions, variables, class members, macros and so on may be indexed. These tags allow definitions to be quickly and easily located by a text editor or other utility. </p><br/><br/><h2>Eclipse: </h2><br/><br/><p><a href="http://www.eclipse.org/" rel="nofollow">http://www.eclipse.org/</a></p><br/><br/><p>wikipedia entry: <a href="http://en.wikipedia.org/wiki/Eclipse%5F%28software%29" rel="nofollow">http://en.wikipedia.org/wiki/Eclipse_%28software%29</a></p><br/><br/><p>Eclipse is a multi-language software development platform comprising an IDE and a plug-in system to extend it. It is written primarily in Java and can be used to develop applications in Java and, by means of the various plug-ins, in other languages as well, including C, C++, COBOL, Python, Perl, PHP, and others.</p><br/><br/><h2>PyDev</h2><br/><br/><p><a href="http://pydev.sourceforge.net/" rel="nofollow">http://pydev.sourceforge.net/</a></p><br/><br/><p>"Pydev is a plugin that enables users to use Eclipse for Python and Jython development -- making Eclipse a first class Python IDE"</p><br/><br/><h2>Komodo Edit</h2><br/><br/><p><a href="http://www.activestate.com/komodo%5Fedit/" rel="nofollow">http://www.activestate.com/komodo_edit/</a></p><br/><br/><p>wikipedia entry: <a href="http://en.wikipedia.org/wiki/ActiveState%5FKomodo" rel="nofollow">http://en.wikipedia.org/wiki/ActiveState_Komodo</a></p><br/><br/><p>Komodo Edit is a free text editor for dynamic programming languages introduced in January 2007. With the release of version 4.3, Komodo Edit is built on top of the Open Komodo project.</p><br/><br/><p>It was developed for programmers who need a multi-language editor with broad functionality, but not the features of an IDE, like debugging, DOM viewer, interactive shells, and source code control integration.</p><br/><br/><h2>Prashanth's call graph (visualization) tool</h2><br/><br/><p><a href="http://blog.prashanthellina.com/2007/11/14/generating-call-graphs-for-understanding-and-refactoring-python-code/" rel="nofollow">http://blog.prashanthellina.com/2007/11/14/generating-call-graphs-for-understanding-and-refactoring-python-code/</a></p><br/><br/><p>Just thought I'd share a link to an interesting small fun script I've found long time ago, that draws a graph of function calls. It works only for simple cases, so "as is" it's more fun than useful.</p><br/><br/><h2>rope/ropemacs</h2><br/><br/><p><a href="http://rope.sourceforge.net/ropemacs.html" rel="nofollow">http://rope.sourceforge.net/ropemacs.html</a></p><br/><br/><p>Ropemacs is a plugin for performing python refactorings in emacs. It uses <a href="http://rope.sourceforge.net/" rel="nofollow">rope</a> library and pymacs.</p><br/><br/><p><a href="http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/" rel="nofollow">http://www.enigmacurry.com/2008/05/09/emacs-as-a-powerful-python-ide/</a></p><br/><br/><h2>WingIDE</h2><br/><br/><p><a href="http://www.wingware.com/" rel="nofollow">http://www.wingware.com/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM FOR DESKTOP APPLIC
    </pattern>
    <template>
<![CDATA[<p>The Django people are sensible people with a philosophy of decoupling things. So yes, in theory you should be perfectly able to use Django's ORM in a standalone application. </p><br/><br/><p>Here's one guide I found: <a href="http://jystewart.net/process/2008/02/using-the-django-orm-as-a-standalone-component/" rel="nofollow">Django ORM as a standalone component</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEWBI DEPLOY QUESTION IMPORTERROR COULD NOT IMPORT SET SETTINGS
    </pattern>
    <template>
<![CDATA[<p>Your apache configuration should look like this:</p><br/><br/><pre><code>&lt;Location "/mysite"&gt;<br/>    SetHandler python-program<br/>    PythonHandler django.core.handlers.modpython<br/>    SetEnv DJANGO_SETTINGS_MODULE mysite.settings<br/>    PythonOption django.root /mysite<br/>    PythonPath "['/root/djangoprojects/', '/root/djangoprojects/mysite','/root/djangoprojects/mysite/polls', '/var/www'] + sys.path"<br/>    PythonDebug On<br/>&lt;/Location&gt;<br/></code></pre><br/><br/><p>Note that the sole difference is the "mysite.settings". Don't forget to restart apache once the config has changed (apache2ctl restart). See <a href="http://docs.djangoproject.com/en/dev/howto/deployment/modpython/" rel="nofollow" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/deployment/modpython/</a> for more info.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OMMA SEPAR LIST IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I would suggest a custom django templating <em>filter</em> rather than a custom <em>tag</em> -- filter is handier and simpler (where appropriate, like here). <code>{{ fruits | joinby:", " }}</code> looks like what I'd want to have for the purpose... with a custom <code>joinby</code> filter:</p><br/><br/><pre><code>def joinby(value, arg):<br/>    return arg.join(value)<br/></code></pre><br/><br/><p>which as you see is simplicity itself!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRACTIC FOR AJAX WITH DJANGO ( OR ANI WEB FRAMEWORK )
    </pattern>
    <template>
<![CDATA[<p>When I work with Ajax my main concern is usually to limit the amount of data I have to send. Ajax applications of this type should be very responsive (invisible if possible).</p><br/><br/><p>In the case of toggling a star, I would create the actual on/off states as CSS classes, StarOn and StarOff. The client will download both the off and on star when they first visit the page, which is acceptable considering that the star is a small image. When you want to change the star appearance in the future, you'll only be editing CSS, and won't have to touch the javascript at all.</p><br/><br/><p>As for the Ajax, I'd send back and forth one thing -- a JSON variable true/false that says whether or not the request was successful. As soon as the user clicks on the star, I'd change it to the StarOn state and send out the request. 99% of the time Ajax will return <code>true</code> and the user will not even realize that there was some sort of delay in the web request. In the rare case where you get a <code>false</code> back, you'll have to revert the star to StarOff and display an error message to the user.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VOTE UP DOWN METHOD
    </pattern>
    <template>
<![CDATA[<p>Just plug and play: </p><br/><br/><pre><code>RedditStyleVoting  <br/>Implementing reddit style voting for any Model with django-voting<br/>http://code.google.com/p/django-voting/wiki/RedditStyleVoting<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + MYSQL ON MAC OS 10.6.2 SNOW LEOPARD
    </pattern>
    <template>
<![CDATA[<p>I have ultimately solved my own problem, with of course, the subconscious and conscious help from the many posts, blogs, and mail logs I've read.  I would give links if I could remember.</p><br/><br/><p>In a nutshell, I reinstalled EVERYTHING using MacPorts.  </p><br/><br/><p>After editing ~/.bash_profile and commenting out all the previous modifications to ${PATH}, I downloaded the <a href="http://distfiles.macports.org/MacPorts/MacPorts-1.8.1-10.6-SnowLeopard.dmg" rel="nofollow">dmg for Snow Leopard</a> and ran through its installation.</p><br/><br/><p>Then opened the terminal and ran the self update.</p><br/><br/><pre><code>sudo port selfupdate<br/>sudo port install python26<br/></code></pre><br/><br/><p>That second part, installing Python 2.6, took forever.  But when it completed it prompted me with the following:</p><br/><br/><pre><code>To fully complete your installation and make python 2.6 the default, please run<br/><br/>sudo port install python_select  <br/>sudo python_select python26<br/></code></pre><br/><br/><p>I did both and they went quick.</p><br/><br/><p>I forgot to mention how handy 'port search ' command is.  I searched for 'mysql' and similar to find the thing to type after 'install'.  But I proceeded with reinstalling both the client and server for MySQL.  Perhaps I did this in reverse order, but the end result worked fine.</p><br/><br/><pre><code>sudo port install mysql5<br/>...<br/>---&gt;  Installing mysql5 @5.1.41_0<br/>The MySQL client has been installed.<br/>If you also want a MySQL server, install the mysql5-server port.<br/></code></pre><br/><br/><p>So naturally:</p><br/><br/><pre><code>sudo port install mysql5-server<br/></code></pre><br/><br/><p>I love how the so many of the macports installations give you feedback as to what to do next.  At the end of the server installation, it said the following:</p><br/><br/><pre><code>******************************************************<br/>* In order to setup the database, you might want to run<br/>* sudo -u _mysql mysql_install_db5<br/>* if this is a new install<br/>******************************************************<br/></code></pre><br/><br/><p>It was a new install for me (didn't have any local schemas).  For completeness, and for my own reference, here is the output of running that command:</p><br/><br/><pre><code>Installing MySQL system tables...<br/>OK<br/>Filling help tables...<br/>OK<br/><br/>To start mysqld at boot time you have to copy<br/>support-files/mysql.server to the right place for your system<br/><br/>PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !<br/>To do so, start the server, then issue the following commands:<br/><br/>/opt/local/lib/mysql5/bin/mysqladmin -u root password 'new-password'<br/>/opt/local/lib/mysql5/bin/mysqladmin -u root -h iMac.local password 'new-password'<br/><br/>Alternatively you can run:<br/>/opt/local/lib/mysql5/bin/mysql_secure_installation<br/><br/>which will also give you the option of removing the test<br/>databases and anonymous user created by default.  This is<br/>strongly recommended for production servers.<br/><br/>See the manual for more instructions.<br/><br/>You can start the MySQL daemon with:<br/>cd /opt/local ; /opt/local/lib/mysql5/bin/mysqld_safe &amp;<br/><br/>You can test the MySQL daemon with mysql-test-run.pl<br/>cd /opt/local/mysql-test ; perl mysql-test-run.pl<br/><br/>Please report any problems with the /opt/local/lib/mysql5/bin/mysqlbug script!<br/><br/>The latest information about MySQL is available at http://www.mysql.com/<br/>Support MySQL by buying support/licenses from http://shop.mysql.com/<br/></code></pre><br/><br/><p>Almost done. Earlier in my 'port search'ing I came across this interesting port:</p><br/><br/><p>py26-mysql @1.2.2 (python, devel, databases)<br/>   Python interface to mysql</p><br/><br/><p>With much, much hope that this would provide me with MySQLdb package, I installed it (and it did).</p><br/><br/><pre><code>sudo port install py26-mysql<br/></code></pre><br/><br/><p>Afterwords I cranked up the python interpreter attempted to import MySQLdb, the very thing in my way all this time.</p><br/><br/><pre><code>iMac:~ drhoden$ python<br/>Python 2.6.4 (r264:75706, Dec 15 2009, 18:00:14) <br/>[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin<br/>Type "help", "copyright", "credits" or "license" for more information.<br/>&gt;&gt;&gt; import MySQLdb<br/>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py:34: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet<br/>&gt;&gt;&gt; <br/></code></pre><br/><br/><p>A warning, but It worked!!</p><br/><br/><p>Just one more thing:</p><br/><br/><pre><code>sudo port install py26-django<br/></code></pre><br/><br/><p>After all of this I was finally able to crank up my Django project and remotely connect to my company's MySQL server!!  It may not have been necessary to reinstall Django using MacPorts, but I wasn't going to risk complications.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD TO OUTSID OF MEDIA ROOT
    </pattern>
    <template>
<![CDATA[<p>Thornomad, I did the following:</p><br/><br/><pre><code>upload_storage = FileSystemStorage(location=UPLOAD_ROOT, base_url='/uploads')<br/><br/>image = models.ImageField(upload_to='/images', storage=upload_storage)<br/></code></pre><br/><br/><p>UPLOAD_ROOT is defined in my settings.py file: /foo/bar/webfolder/uploads</p><br/><br/><p>I found a great example here: <a href="http://abing.gotdns.com/posts/2009/django-file-upload-handling-examples/" rel="nofollow">http://abing.gotdns.com/posts/2009/django-file-upload-handling-examples/</a></p><br/><br/><p>Hope that helps!<br/>Toby.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLIC EXTREM SLOW
    </pattern>
    <template>
<![CDATA[<p>This is a horrible suggestion but I'll make it anyway:</p><br/><br/><p>Build a little client application or just use <code>wget</code> with <code>cron</code> to periodically access your app, maybe once every 5 minutes or so. That should keep Google from putting it into a dormant state.</p><br/><br/><p>I say this is a horrible suggestion because it's a waste of resources and an abuse of Google's free service. I'd expect you to do this only during a short testing/startup phase.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT AND PYTHON DICTIONARI DATA STRUCTUR QUESTION
    </pattern>
    <template>
<![CDATA[<p>The filter you want is something like </p><br/><br/><pre><code>@register.filter(name='getkey')<br/>def getkey(value, arg):<br/>    return value[arg]<br/></code></pre><br/><br/><p>And used with </p><br/><br/><pre><code>{{test|getkey:'this works'}}<br/></code></pre><br/><br/><p>source: <a href="http://www.bhphp.com/blog4.php/2009/08/17/django-templates-and-dictionaries" rel="nofollow">http://www.bhphp.com/blog4.php/2009/08/17/django-templates-and-dictionaries</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTO PYTHON DICT
    </pattern>
    <template>
<![CDATA[<p>The string you show is not a JSON-coded object (eqv to a Python dict) -- more like an array (eqv to a list) without brackets and with a stray extra comma at the end.  So (using <a href="http://simplejson.googlecode.com/svn/tags/simplejson-2.1.0/docs/index.html">simplejson</a> for version portability -- the stndard library's <code>json</code> in 2.6 is fine too of course!-):</p><br/><br/><pre><code>&gt;&gt;&gt; import simplejson                                                           &gt;&gt;&gt; js = "{\"description\":\"fdsafsa\",\"order\":\"1\",\"place\":\"22 Plainsman Rd, Mississauga, ON, Canada\",\"lat\":43.5969175,\"lng\":-79.7248744,\"locationDate\":\"03/24/2010\"},{\"description\":\"sadfdsa\",\"order\":\"2\",\"place\":\"50 Dawnridge Trail, Brampton, ON, Canada\",\"lat\":43.7304774,\"lng\":-79.8055435,\"locationDate\":\"03/26/2010\"},"<br/>&gt;&gt;&gt; simplejson.loads('[%s]' % js[:-1])<br/></code></pre><br/><br/><p>[{'description': 'fdsafsa', 'order': '1', 'place': '22 Plainsman Rd, Mississauga, ON, Canada', 'lat': 43.596917500000004, 'lng': -79.724874400000004, 'locationDate': '03/24/2010'}, {'description': 'sadfdsa', 'order': '2', 'place': '50 Dawnridge Trail, Brampton, ON, Canada', 'lat': 43.730477399999998, 'lng': -79.805543499999999, 'locationDate': '03/26/2010'}]</p><br/><br/><p>If you really want a dict you'll have to specify how to treat these two unnamed items, i.e., what arbitrary keys you want to slap on them...?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOCK USER AND REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>How do you mock users?</p><br/></blockquote><br/><br/><p>Initialise a <code>django.contrib.auth.models.User</code> object. <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/models.py#L105" rel="nofollow"><code>User.objects.create_user</code></a> makes this easy.</p><br/><br/><blockquote><br/>  <p>How do you mock requests?</p><br/></blockquote><br/><br/><p>Initialise a <a href="http://code.djangoproject.com/browser/django/trunk/django/http/__init__.py#L27" rel="nofollow"><code>django.http.HttpRequest</code></a> object.</p><br/><br/><p>Of course, there are shortcuts depending on what you want to do. If you just need an object with a <code>user</code> attribute that points to a user, simply create something (anything) and give it that attribute. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK FOR PYTHON 3
    </pattern>
    <template>
<![CDATA[<p>There's really nothing at the moment; currently the WSGI specification for Python 3 is still being debated, and there are not many db-api modules which work on Python 3. So basically all you have is the <code>sqlite3</code> builtin DB-API, I don't believe any of the postgres or mysql wrappers have been ported yet.</p><br/><br/><p>the <a href="http://www.sqlalchemy.org/" rel="nofollow">SQLAlchemy</a> DB framework is purported to work on Python3 (with sqlite3), but no major webapp frameworks or templating engines yet (most are waiting for WSGI and the db-apis); this is really a bleeding edge space.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APP BUNDL STATIC MEDIA
    </pattern>
    <template>
<![CDATA[<p>The only app I know of that deals with this without any intervention is the rather wonderful <a href="http://github.com/robhudson/django-debug-toolbar" rel="nofollow">django-debug-toolbar</a>, though it's arguable that this isn't a great example, since it's an app specifically designed for debug mode only.</p><br/><br/><p>The way it deals with it is that it serves its media through Django itself - see the source for <a href="http://github.com/robhudson/django-debug-toolbar/blob/master/debug_toolbar/urls.py" rel="nofollow">urls.py</a>:</p><br/><br/><pre><code>url(r'^%s/m/(.*)$' % _PREFIX, 'debug_toolbar.views.debug_media'),<br/></code></pre><br/><br/><p>In general, this is a bad idea (you don't want to serve static files through Django), per <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">this comment from the documentation</a>:</p><br/><br/><blockquote><br/>  <p>[Serving static files through Django] is inefficient and<br/>  insecure. Do not use this in a<br/>  production setting. Use this only for<br/>  development.</p><br/></blockquote><br/><br/><p>Obviously, the django-debug-toolbar is only used for development, so I think its method of deployment makes sense, but this is very much an exception.</p><br/><br/><p>In general, the best way I know to do it is to create symbolic links wherever your media is stored to the media inside your app code. For example, create a folder called <code>media</code> within your app, and then require users installing your app to either add a symbolic link from their media directory, or copy the whole thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEED THE DJANGO SETTINGS MODUL SET
    </pattern>
    <template>
<![CDATA[<p>Your<code>manage.py</code> is referencing an application (<code>notifications</code>). This forces Django to complain about DJANGO_SETTINGS_MODULE being set because the Django environment hasn't been set up yet.</p><br/><br/><p>Incidentally, you can force the enviroment setup manually, but honestly I wouldn't do this in manage.py.  That's not really a good practice in my opinion.</p><br/><br/><p>Here is how you can manually setup the Django environment from within any app (or program for that matter):</p><br/><br/><pre><code># set up the environment using the settings module<br/>from django.core.management import setup_environ<br/>from myapp import settings<br/>setup_environ(settings)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIKE FRAMEWORK FOR JAVA
    </pattern>
    <template>
<![CDATA[<p>Recently I found a framework which looked very much like django. It's called playframework and you can find it here:</p><br/><br/><p><a href="http://playframework.org/" rel="nofollow">http://playframework.org/</a></p><br/><br/><p>I suggest you watch the video on the front page.</p><br/><br/><p>Another Java based django-like framework is Spring Roo, but in my opinion it's not quite ready. Last time I used it the documentation was virtually non-existent.</p><br/><br/><p><a href="http://www.springsource.org/roo" rel="nofollow">http://www.springsource.org/roo</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOCTEST IN VIEWS.PI
    </pattern>
    <template>
<![CDATA[<p>You could try to write your own <code>testrunner</code> and see, if you can include other files to be checked for doc tests.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM CSS ON THE FLI BASE ON ACCOUNT SET IN A DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>I've used option #2 with success. There are 2 decent ways of updating the generated static files that I know of:</p><br/><br/><ol><br/><li><p>Use a version querystring like /special_path.css?v=11452354234 where the v parameter is generated from a database field, key in memcached, or some other persistent file. Version gets updated by admin, or for development you would just make the generation not save if the parameter was something special like v=-1. You'll need a process to clean up the old generations after some time.</p></li><br/><li><p>Don't use a version querystring, but have it look first for the generated file, if it can't find it, it generates it. You can create a cron job or WSGI app that looks for filesystem changes for development, and have a hook from your admin panel that deletes generations after an update. Here's an example of the monitoring, which you would have to convert to be specific to your generations and not to Django. <a href="http://code.google.com/p/modwsgi/wiki/ReloadingSourceCode#Monitoring%5FFor%5FCode%5FChanges" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ReloadingSourceCode#Monitoring%5FFor%5FCode%5FChanges</a></p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.2 OBJECT LEVEL PERMISS THIRD PARTI SOLUT
    </pattern>
    <template>
<![CDATA[<p>Finally, I found really good stuff: Florian Apolloner wrote a howto on djangoadvent: <a href="http://djangoadvent.com/1.2/object-permissions/" rel="nofollow">http://djangoadvent.com/1.2/object-permissions/</a><br/>Now <strong>that's</strong> what I'm gonna use :)</p><br/><br/><p>Something useful might be as well: <a href="http://github.com/washingtontimes/django-objectpermissions" rel="nofollow">http://github.com/washingtontimes/django-objectpermissions</a> (link dead as of 2011-07-18)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RON AND VIRTUALENV
    </pattern>
    <template>
<![CDATA[<p>You should be able to do this by using the <code>python</code> in your virtual environment:</p><br/><br/><pre><code>/home/my/virtual/bin/python /home/my/project/manage.py command arg<br/></code></pre><br/><br/><p>EDIT: If your django project isn't in the PYTHONPATH, then you'll need to switch to the right directory:</p><br/><br/><pre><code>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python ...<br/></code></pre><br/><br/><p>You can also try to log the failure from cron:</p><br/><br/><pre><code>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python /home/my/project/manage.py &gt; /tmp/cronlog.txt 2&gt;&amp;1<br/></code></pre><br/><br/><p>Another thing to try is to make the same change in your <code>manage.py</code> script at the very top:</p><br/><br/><pre><code>#!/home/my/virtual/bin/python<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RACE CONDIT IN MODEL.SAV ( )
    </pattern>
    <template>
<![CDATA[<p>It may <em>feel</em> like a hack to you, but to me it looks like a legitimate, reasonable implementation of the "optimistic concurrency" approach -- try doing whatever, detect conflicts  caused by race conditions, if one occurs, retry a bit later.  Some databases systematically uses that instead of locking, and it can lead to much better performance except under systems under a <em>lot</em> of write-load (which are quite rare in real life).</p><br/><br/><p>I like it a lot because I see it as a general case of the Hopper Principle: "it's easy to ask forgiveness than permission", which applies widely in programming (especially but not exclusively in Python -- the language Hopper is usually credited for is, after all, Cobol;-).</p><br/><br/><p>One improvement I'd recommend is to wait a <em>random</em> amount of time -- avoid a "meta-race condition" where two processes try at the same time, both find conflicts, and both retry <em>again</em> at the same time, leading to "starvation".  <code>time.sleep(random.uniform(0.1, 0.6))</code> or the like should suffice.</p><br/><br/><p>A more refined improvement is to lengthen the expected wait if more conflicts are met -- this is what is known as "exponential backoff" in TCP/IP (you wouldn't have to lengthen things exponentially, i.e. by a constant multiplier > 1 each time, of course, but that approach has nice mathematical properties).  It's only warranted to limit problems for <em>very</em> write-loaded systems (where multiple conflicts during attempted writes happen quite often) and it may likely not be worth it in your specific case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY FACEBOOK WALL ON MY WEBSIT
    </pattern>
    <template>
<![CDATA[<p>i am going to use LIKEBOX plugin. it satisfies my requirement</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON GOOD ENOUGH FOR BIG APPLIC
    </pattern>
    <template>
<![CDATA[<p>Python is a pleasure to work with on big applications. Compared to other enterprise-popular languages you get:</p><br/><br/><ul><br/><li>No compilation time, if you ever worked on a large C++ project you know how time consuming this can get</li><br/><li>A concise and clean syntax that makes reading code easier, also a big time saver when reading someone else's code or even yours when it was written long time ago</li><br/><li>Portability at the core level, if it's important for your app to run on more than one platform it certainly helps</li><br/><li>It's fast enough for most things, and when it's not, rewriting hot spots in C is trivial with tools such as Cython and numpy. People advocating against dynamic languages for speed reasons have forgotten the 80-20 rule (or never heard about it). The important thing to consider when choosing a language for a performance-critical application IMHO is how easily you can gain access to the C level when needed, and Python is great for that</li><br/></ul><br/><br/><p>It's not a magic language however, you need to use the same techniques used for big projects in other languages: TDD (some may argue that it's more important than in other languages because of the lack of type checking, but that's not a win for other languages, unit tests are <strong>always</strong> important in big projects), clean OO design, etc... or maintaining your application will become a nightmare.</p><br/><br/><p>The main reason for its lack of acceptance in enterprise compared to .NET, Java et al. is probably not having herds of consultants and "certified specialists" bragging about their tool being the best thing on Earth. I also heard Java was easily accepted because its syntax resembled C++... that may not be such a silly idea considering C# also chose to take this route.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIP INSTAL USE GIT DIFFER THAN JUST CLONE A REPOSITORI
    </pattern>
    <template>
<![CDATA[<p>When you use "pip" to install something, the package's <code>setup.py</code> is used to determine what packages to install.  And this project's <code>setup.py</code>, if I'm reading it correctly, says "just install these Python packages inside the <code>basic</code> directory" - the <code>setup.py</code> makes absolutely no mention of any non-Python files it wants included in the install.</p><br/><br/><p>This might be deliberate on the developer's part, since it is something of a tradition for Django packages to not include templates - notoriously, even something so basic as the built-in <code>django.contrib.auth</code> comes without any templates and makes you build its little forms from the ground up each time! (Or, to cut and paste from examples elsewhere on the web.)</p><br/><br/><p>But if you yourself want the templates to be installed with this Python distribution, regardless of how the author has set things up, then just list the templates in the <code>setup.py</code>!  First, add something like this to the <code>setup.py</code> file:</p><br/><br/><pre><code>template_patterns = [<br/>    'templates/*.html',<br/>    'templates/*/*.html',<br/>    'templates/*/*/*.html',<br/>    ]<br/></code></pre><br/><br/><p>Then, add one last variable to the <code>setup()</code> call so that it ends like this:</p><br/><br/><pre><code>...<br/>packages=packages,<br/>package_data=dict( (package_name, template_patterns)<br/>                   for package_name in packages ))<br/></code></pre><br/><br/><p>This asserts to the <code>setup()</code> function that every package should be accompanied by data files that are found by searching for HTML files beneath each package's <code>templates</code> directory.</p><br/><br/><p>Try it out, and let me know if this works on your machine too!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL SEND DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can use a <a href="http://docs.djangoproject.com/en/dev/topics/email/#file-backend">file backend for sending emails</a> which is a very handy solution for development and testing; emails are not sent but stored in a folder you can specify!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      . YOU DO N T HAVE PERMISS TO EDIT ANYTH
    </pattern>
    <template>
<![CDATA[<p>I checked files one more time and found the difference. I forgot to add <code>admin.autodiscover()</code> in <code>urls.py</code> of the project. Thanks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEAN OF IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Please read up on Internationalization (i18n)</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/i18n/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/i18n/</a></p><br/><br/><p>The <code>_</code> is a commonly-used name for the function that translates strings to another language.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/i18n/translation/#standard-translation" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/i18n/translation/#standard-translation</a></p><br/><br/><p>Also, read all of these related questions on SO:</p><br/><br/><p><a href="http://stackoverflow.com/search?q=%5Bdjango%5D+i18n">http://stackoverflow.com/search?q=%5Bdjango%5D+i18n</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHARACT NORMAL
    </pattern>
    <template>
<![CDATA[<p>I recommend using <a href="http://pypi.python.org/pypi/Unidecode/" rel="nofollow">Unidecode module</a>:</p><br/><br/><pre><code>&gt;&gt;&gt; from unidecode import unidecode<br/>&gt;&gt;&gt; unidecode(u'ıöüç')<br/>'iouc'<br/></code></pre><br/><br/><p>Note how you feed it a unicode string and it outputs a byte string. The output is guaranteed to be ASCII.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TURN MONGODB QUERI INTO A JSON
    </pattern>
    <template>
<![CDATA[<p>The <strong>json</strong> module won't work due to things like the ObjectID. </p><br/><br/><p>Luckily <a href="http://api.mongodb.org/python/1.9%2B/index.html">PyMongo</a> provides <strong>json_util</strong> which ...</p><br/><br/><blockquote><br/>  <p>... allow[s] for specialized encoding and<br/>  decoding of BSON documents into Mongo<br/>  Extended JSON's Strict mode. This lets<br/>  you encode / decode BSON documents to<br/>  JSON even when they use special BSON<br/>  types.</p><br/></blockquote><br/><br/><p>More here: <a href="http://api.mongodb.org/python/1.9%2B/api/bson/json_util.html#module-bson.json_util">http://api.mongodb.org/python/1.9%2B/api/bson/json_util.html#module-bson.json_util</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N UNDO FEATUR USE PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Take a look at <a href="https://github.com/etianen/django-reversion" rel="nofollow"><code>django-reversion</code></a>. It provides version control for Django models. Can be easily added to existing project.</p><br/><br/><p>It doesn't employ "current" pointer approach. Instead, it serializes object each time it's being saved and stores it in a separate <code>Version</code> model with generic foreign key pointing to this object. (Relationship fields are serialized as primary keys by default.) Also, it allows to group <code>Version</code>s into <code>Revision</code>s in a flexible way.</p><br/><br/><p>So you can do something like that:</p><br/><br/><ul><br/><li>When user uploads CSV, just save changes as usual, but add <code>@revision.create_on_success</code> decorator to the function which does the import-so that any changes to records made by that function will be stored under a single revision.</li><br/><li>When user hits "Undo", you just revert the latest revision.</li><br/></ul><br/><br/><p>Here's how it could be done::</p><br/><br/><pre><code>@revision.create_on_success<br/>def import_csv(request, csv):<br/>    # Old versions of all objects save()d here will<br/>    # belong to single revision.<br/><br/>def undo_last_csv_import(request):<br/>    # First, get latest revision saved by this user.<br/>    # (Assuming you create revisions only when user imports a CSV<br/>    # and do not version control other data.)<br/>    revision = Revision.objects.filter(user=request.user)\<br/>        .order_by('-date_created')[0]<br/>    # And revert it, delete=True means we want to delete<br/>    # any newly added records as well<br/>    revision.revert(delete=True)<br/></code></pre><br/><br/><p>It relies on the fact that you create revisions only when user imports CSVs. That means, if you plan to also version control other data, then you'll need to implement some kind of a flag by which you can get records affected by the latest import. Then you can get a record by this flag, get it latest saved version, and revert the whole revision that version belongs to. Like this::</p><br/><br/><pre><code>def undo_last_csv_import(request):<br/>    some_record = Record.objects.by_user(request.user).from_the_last_import()[0]<br/>    latest_saved_version_of_some_record = Version.objects.get_for_date(<br/>        some_record,<br/>        datetime.now(), # The latest saved Version at the moment.<br/>        )<br/>    # Revert all versions that belong to the same revision<br/>    # as the version we got above.<br/>    latest_saved_version_of_some_record.revision.revert()<br/></code></pre><br/><br/><p>It's not a beautiful solution, there most certainly are ways to do it better with this app. I recommend to take a look at the code to understand better how does <code>django-reversion</code> work-very well documented, couldn't find a function without a docstring. ^_^d</p><br/><br/><p>(Documentation is also good, but turned out to be a bit misleading for me, i.e. they write <code>Version.objects.get_for_date(your_model, date)</code>, where your_model is actually a model instance.)</p><br/><br/><p><strong>Update:</strong> django-reversion is actively maintained, so don't rely on the code above much, and better check their <a href="https://github.com/etianen/django-reversion/wiki/Low-Level-API" rel="nofollow">wiki</a> on how to manage versions &amp; revisions outside django's admin. For instance, revision comments are already supported, that may simplify things a bit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLOW USE VIRTUALENV AND PIP
    </pattern>
    <template>
<![CDATA[<p>You want to do:</p><br/><br/><pre><code>virtualenv --python=/path/to/python/version --no-site-packages ENV_NAME<br/></code></pre><br/><br/><p>For example:</p><br/><br/><pre><code>virtualenv --python=/usr/bin/python2.6 --no-site-packages my_project_env<br/></code></pre><br/><br/><p>If you follow this for your projects you should be able to have a separate configuration for each one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON 2.7 32 BIT OR 64 BIT WITH WINDOW 7
    </pattern>
    <template>
<![CDATA[<p>I recommend the 32-bit one unless you are going to exhaust the address space. Many third-party modules like OpenCV and Numpy are considerably easier to install with 32-bit Python. (You can build those modules from source to get them to work with 64-bit Python but that's probably more time and effort than necessary in most cases. Sometimes there are unofficial 64-bit builds but they aren't supported by the module authors.)</p><br/><br/><p>While you probably don't need those modules for Django, if this is your personal computer and you might install them for a different project and don't want to deal with two Python installations on the same machine, I would choose 32-bit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLEANEST WAY TO OVERRID INIT WHERE AN OPTION KWARG MUST BE USE AFTER THE SUPER ( ) CALL
    </pattern>
    <template>
<![CDATA[<p>I usually just do essentially what you're doing here. However, you can shorten/clean up your code by supplying a default argument to <code>dict.pop</code>:</p><br/><br/><pre><code> def __init__(self, *args, **kwargs):<br/>    user = kwargs.pop('user', None)<br/>    super(BaseCheckoutForm, self).__init__(*args, **kwargs)<br/>    if user is not None:<br/>        self.prefill_from_user(user)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL TO USE WITH DJANGO ON MAC OS X
    </pattern>
    <template>
<![CDATA[<p><strong>EDIT:</strong> This answer has been getting voted up recently, and I want to modify it to reflect what I'm doing now.</p><br/><br/><p>Firstly, I've switched from MacPorts to <a href="http://mxcl.github.com/homebrew/" rel="nofollow">Homebrew</a> for package management on Mac OS X. Secondly, I've switched from using my package manager to using <a href="http://www.pip-installer.org/en/latest/index.html" rel="nofollow">pip</a> and <a href="http://www.doughellmann.com/projects/virtualenvwrapper/" rel="nofollow">virtualenvwrapper</a> to manage my Python libraries.</p><br/><br/><p><strong>Why I switched:</strong></p><br/><br/><p>At first, with just a few Django projects, it was very easy to keep everything up to date using MacPorts. It was also fairly easy to have multiple versions of Python using <code>python_select</code>. What I didn't realize was that I was doing a pretty terrible job of keeping multiple libraries working side-by-side. It became obvious as I upgraded my packages that sometimes I <strong>really</strong> didn't want a project's Django version to change. After a couple of Django 1.1 projects (now running Django 1.3) started exhibiting weird behaviour (forms failing to submit because of CSRF middleware changes, small differences in Django libraries, admin app assets changing, and so on) it became clear that I should look into a better solution.</p><br/><br/><p><strong>What I do now:</strong></p><br/><br/><p>On Mac OS X I'm moved over to using pip and virtualenvwrapper. First off, I install virtualenvwrapper:</p><br/><br/><pre><code>pip install virtualenvwrapper<br/></code></pre><br/><br/><p>This will grab virtualenv and virtualenvwrapper. You then need to add the following to your <code>.bashrc</code> or <code>.profile</code> and <code>source</code> it or open a new shell.</p><br/><br/><pre><code>export WORKON_HOME=$HOME/.virtualenvs<br/>source /usr/local/bin/virtualenvwrapper.sh # where Homebrew places it<br/>export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages' # optional<br/></code></pre><br/><br/><p>Line 1 sets up the variable <code>workon</code> needs to find its files. Line 2 points to the main shell script (the path here is where Homebrew places the file, it might be different if you're using another package manager). Line 3 is optional, but I really like it: it makes sure that no currently installed libraries in the "main" site-packages repository will leak into your newly created virtual environment. I find this keeps things clean and leads to fewer surprises down the road as things are upgraded.</p><br/><br/><p>The next step is to create a new virtual environment:</p><br/><br/><pre><code>mkvirtualenv testEnvironmentName<br/></code></pre><br/><br/><p>After making the environment, you'll be placed into it. If you kept the <code>--no-site-packages</code> flag, you can type <code>pip freeze</code> to see that your Python library slate is now blank. To escape from the virtual environment, use the <code>deactivate</code> command. To get into your virtualenv again, use <code>workon testEnvironmentName</code>. Note that you can use tab completion on the name of the environment. Also note that typing <code>workon</code> by itself will give you a list of available environments. From here you can <code>pip install</code> any libraries you want, including PIL.</p><br/><br/><p>To learn more about virtualenvwrapper, <a href="http://www.doughellmann.com/docs/virtualenvwrapper/" rel="nofollow">I recommend checking out the documentation</a>. </p><br/><br/><p><a href="http://mathematism.com/2009/07/30/presentation-pip-and-virtualenv/" rel="nofollow">Here's another great resource which taught me a lot about using virtualenvwrapper</a> (<a href="http://vimeo.com/5894881" rel="nofollow">or just view the screencast</a>)</p><br/><br/><hr><br/><br/><p><strong>ORIGINAL:</strong></p><br/><br/><p>You can also instal PIL using <a href="http://www.macports.org/" rel="nofollow">MacPorts</a>. The package name is <code>py-pil</code>. <a href="http://py-pil.darwinports.com/" rel="nofollow">Here's more information on the package</a>. I'm pretty fond of MacPorts over pip, as I find it gives me a bit more configurability when it comes to keeping several versions of python and several libraries installed.</p><br/><br/><p>Here are the installation instructions for MacPorts: <a href="http://www.macports.org/install.php" rel="nofollow">http://www.macports.org/install.php</a></p><br/><br/><p>See also: <a href="http://stackoverflow.com/questions/1213690/what-is-the-most-compatible-way-to-install-python-modules-on-a-mac/1213823#1213823">What is the most compatible way to install python modules on a Mac?</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR WEB.PI WHICH IS BETTER TO BUILD A LARG WEBSIT WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p>Django makes building complicated sites really simple.  Before Django, I was messing around with PHP, and I was doing a really terrible job putting it together.  Django leads you in the right direction with some good practices which makes your site really easy to maintain and update.  I really like the ORM and how you can easily work with data from the database without having to write a single line of SQL.  It makes development less of a slog.</p><br/><br/><p>I don't have any experience with web.py, and I can't compare the performance of the two.  But you can't go wrong with Django at least.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE UPLOAD VIA PUT REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Django 1.3 is acceptable. So I can<br/>  either do something with<br/>  request.raw_post_data or<br/>  request.read() (or alternatively some<br/>  other better method of access). Any<br/>  ideas?</p><br/></blockquote><br/><br/><p>You don't want to be touching <code>request.raw_post_data</code> - that implies reading the entire request body into memory, which if you're talking about file uploads might be a very large amount, so <code>request.read()</code> is the way to go.  You can do this with Django &lt;= 1.2 as well, but it means digging around in <code>HttpRequest</code> to figure out the the right way to use the private interfaces, and it's a real drag to then ensure your code will also be compatible with Django >= 1.3.</p><br/><br/><p>I'd suggest that what you want to do is to replicate the <a href="http://code.djangoproject.com/browser/django/trunk/django/http/multipartparser.py#L184" rel="nofollow">existing file upload behaviour parts of the <code>MultiPartParser</code> class</a>:</p><br/><br/><ol><br/><li>Retrieve the upload handers from <code>request.upload_handlers</code> (Which by default will be <code>MemoryFileUploadHandler</code> &amp; <code>TemporaryFileUploadHandler</code>)</li><br/><li>Determine the request's content length (Search of Content-Length in <code>HttpRequest</code> or <code>MultiPartParser</code> to see the right way to do this.)</li><br/><li>Determine the uploaded file's filename, either by letting the client specify this using the last path part of the url, or by letting the client specify it in the "filename=" part of <a href="http://www.ietf.org/rfc/rfc2183.txt" rel="nofollow">the <code>Content-Disposition</code> header</a>.</li><br/><li>For each handler, call <code>handler.new_file</code> with the relevant args (mocking up a field name)</li><br/><li>Read the request body in chunks using <code>request.read()</code> and calling <code>handler.receive_data_chunk()</code> for each chunk.</li><br/><li>For each handler call <code>handler.file_complete()</code>, and if it returns a value, that's the uploaded file.</li><br/></ol><br/><br/><blockquote><br/>  <p>How can I deduce the mime type of what<br/>  is being sent? If I've got it right, a<br/>  PUT body is simply the file without<br/>  prelude. Do I therefore require that<br/>  the user specify the mime type in<br/>  their headers?</p><br/></blockquote><br/><br/><p>Either let the client specify it in the Content-Type header, or use <a href="http://docs.python.org/library/mimetypes.html" rel="nofollow">python's mimetype module</a> to guess the media type.</p><br/><br/><p>I'd be interested to find out how you get on with this - it's something I've been meaning to look into myself, be great if you could comment to let me know how it goes!</p><br/><br/><hr><br/><br/><p><strong>Edit by Ninefingers</strong> as requested, this is what I did and is based entirely on the above and the django source.</p><br/><br/><pre><code>upload_handlers = request.upload_handlers<br/>content_type   = str(request.META.get('CONTENT_TYPE', ""))<br/>content_length = int(request.META.get('CONTENT_LENGTH', 0))<br/><br/>if content_type == "":<br/>    return HttpResponse(status=400)<br/>if content_length == 0:<br/>    # both returned 0<br/>    return HttpResponse(status=400)<br/><br/>content_type = content_type.split(";")[0].strip()<br/>try:<br/>    charset = content_type.split(";")[1].strip()<br/>except IndexError:<br/>    charset = ""<br/><br/># we can get the file name via the path, we don't actually<br/>file_name = path.split("/")[-1:][0]<br/>field_name = file_name<br/></code></pre><br/><br/><p>Since I'm defining the API here, cross browser support isn't a concern. As far as my protocol is concerned, not supplying the correct information is a broken request. I'm in two minds as to whether I want say <code>image/jpeg; charset=binary</code> or if I'm going to allow non-existent charsets. In any case, I'm putting setting <code>Content-Type</code> validly as a client-side responsibility.</p><br/><br/><p>Similarly, for my protocol, the file name is passed in. I'm not sure what the <code>field_name</code> parameter is for and the source didn't give many clues.</p><br/><br/><p>What happens below is actually much simpler than it looks. You ask each handler if it will handle the raw input. As the author of the above states, you've got <code>MemoryFileUploadHandler</code> &amp; <code>TemporaryFileUploadHandler</code> by default. Well, it turns out <code>MemoryFileUploadHandler</code> will when asked to create a <code>new_file</code> decide whether it will or not handle the file (based on various settings). If it decides it's going to, it throws an exception, otherwise it won't create the file and lets another handler take over.</p><br/><br/><p>I'm not sure what the purpose of <code>counters</code> was, but I've kept it from the source. The rest should be straightforward. </p><br/><br/><pre><code>counters = [0]*len(upload_handlers)<br/><br/>for handler in upload_handlers:<br/>    result = handler.handle_raw_input("",request.META,content_length,"","")<br/><br/>for handler in upload_handlers:<br/><br/>    try:<br/>        handler.new_file(field_name, file_name, <br/>                         content_type, content_length, charset)<br/>    except StopFutureHandlers:<br/>        break<br/><br/>for i, handler in enumerate(upload_handlers):<br/>    while True:<br/>        chunk = request.read(handler.chunk_size)<br/>        if chunk:<br/><br/>            handler.receive_data_chunk(chunk, counters[i])<br/>            counters[i] += len(chunk)<br/>        else:<br/>            # no chunk<br/>            break<br/><br/>for i, handler in enumerate(upload_handlers):<br/>    file_obj = handler.file_complete(counters[i])<br/>    if not file_obj:<br/>        # some indication this didn't work?<br/>        return HttpResponse(status=500) <br/>    else:<br/>        # handle file obj!<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHANG THE COLLAT TYPE FOR A MYSQL COLUMN
    </pattern>
    <template>
<![CDATA[<p>You need to be aware of the character-set/collation settings at the database/table/column levels. Column-level settings take precedence over the others. Because of this, I'm including commands you can use to perform these changes at each level of the db.</p><br/><br/><hr><br/><br/><p>Inspect your current configuration (database):</p><br/><br/><p><code>SHOW CREATE DATABASE db_name;</code></p><br/><br/><p>Inspect your current configuration (table):</p><br/><br/><p><code>SHOW TABLE STATUS WHERE name='tbl_name'</code></p><br/><br/><p>Inspect your current configuration (columns):</p><br/><br/><p><code>SHOW FULL COLUMNS FROM tbl_name;</code></p><br/><br/><hr><br/><br/><p>Change the character-set/collation (database):</p><br/><br/><p><code>ALTER DATABASE db_name DEFAULT CHARACTER SET utf8;</code></p><br/><br/><p>Change the character-set/collation (table):</p><br/><br/><p><code>ALTER TABLE tbl_name DEFAULT CHARACTER SET utf8;</code></p><br/><br/><p>Change the character-set/collation (columns):</p><br/><br/><p><code>ALTER TABLE tbl_name CONVERT TO CHARACTER SET utf8;</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSION OF DJANGO FOR APPLIC
    </pattern>
    <template>
<![CDATA[<p>The only way is to take a guess. I would start by looking at the created date of the settings.py file (or other base project files)</p><br/><br/><p>release dates for versions:</p><br/><br/><ul><br/><li>1.0: September 2008. (?)</li><br/><li>1.1: July 29, 2009 [<a href="https://docs.djangoproject.com/en/dev/releases/1.1/" rel="nofollow">1</a>]  </li><br/><li>1.2: May 17, 2010 [<a href="https://docs.djangoproject.com/en/dev/releases/1.2/" rel="nofollow">2</a>]</li><br/><li>1.3: March 23, 2011 [<a href="https://docs.djangoproject.com/en/dev/releases/1.3/" rel="nofollow">3</a>]</li><br/></ul><br/><br/><p>having in your urls.py:[<a href="https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges#Mergednewforms-adminintotrunk" rel="nofollow">4</a>]</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from django.contrib import admin<br/></code></pre><br/><br/><p>or having an <code>admin.py</code> file in an app [<a href="https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges#Movedinner-modelclassAdmintoModelAdminclasses" rel="nofollow">5</a>]</p><br/><br/><p>suggests that it is a 1.0+ project.</p><br/><br/><p>having in your urls.py: [<a href="https://docs.djangoproject.com/en/dev/topics/db/multi-db/#defining-your-databases" rel="nofollow">6</a>]</p><br/><br/><pre><code>(r'^admin/', include(admin.site.urls)),<br/></code></pre><br/><br/><p>would suggest 1.1+</p><br/><br/><p>having in your settings.py file:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'NAME': 'app_data',<br/>        'ENGINE': 'django.db.backends.postgresql_psycopg2',<br/>        'USER': 'postgres_user',<br/>        'PASSWORD': 's3krit'<br/>    },<br/>    'users': {<br/>        'NAME': 'user_data',<br/>        'ENGINE': 'django.db.backends.mysql',<br/>        'USER': 'mysql_user',<br/>        'PASSWORD': 'priv4te'<br/>    }<br/>}<br/></code></pre><br/><br/><p>would suggest 1.2+.</p><br/><br/><p>[1]: <a href="https://docs.djangoproject.com/en/dev/releases/1.1/" rel="nofollow">1.1 release notes</a></p><br/><br/><p>[2]: <a href="https://docs.djangoproject.com/en/dev/releases/1.2/" rel="nofollow">1.2 release notes</a></p><br/><br/><p>[3]: <a href="https://docs.djangoproject.com/en/dev/releases/1.3/" rel="nofollow">1.3 release notes</a></p><br/><br/><p>[4]: <a href="https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges#Mergednewforms-adminintotrunk" rel="nofollow">backwards Incompatible changes 0.96 > 1.0</a></p><br/><br/><p>[5]: <a href="https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges#Movedinner-modelclassAdmintoModelAdminclasses" rel="nofollow">backwards Incompatible changes 0.96 > 1.0</a></p><br/><br/><p>[6]: <a href="https://docs.djangoproject.com/en/dev/topics/db/multi-db/#defining-your-databases" rel="nofollow">multiple databases</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SSH INTO DJANGO SHELL
    </pattern>
    <template>
<![CDATA[<p>Pass the <code>-t</code> option to <code>ssh</code>.</p><br/><br/><blockquote><br/>  <p>Force pseudo-tty allocation. This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services. Multiple -t options force tty allocation, even if ssh has no local tty.</p><br/></blockquote><br/><br/><p>By default, running <code>ssh host command</code> doesn't allocate a proper pseudo-tty, which makes any program that uses terminal escape routines, such as line-editing interpreters, etc. fail.</p><br/><br/><p>Therefore, your one-liner can be:</p><br/><br/><pre><code>ssh -t -i mysite.pem root@remotehost python /usr/local/myapp/manage.py shell<br/></code></pre><br/><br/><p>It is possible to, but no need to wrap in another layer of bash like you did. Remember that <code>ssh host command</code> actually passes <code>command</code> as a string to the user's default shell (which is why you can do shell-specific things like <code>cd</code>), so I can't think of a reason why you'll need to run <code>bash</code> within <code>bash</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO COMPRESSOR BEHIND LOAD BALANC
    </pattern>
    <template>
<![CDATA[<p>If you want to have identical cache files you must be sure that you have identical input on both servers.</p><br/><br/><p><strong>You should check:</strong></p><br/><br/><ul><br/><li>if code in <code>{% compress %}...{% endcompress %}</code> is identical on both servers (if you deploying to both servers at once it should be)</li><br/><li>if all your .css/.js files are identical on both servers (if you deploying to both servers at once it should be)</li><br/><li>if mtime (modify time) of your .css/.js files is identical on both servers (your deployment script may affect those and set current date)</li><br/></ul><br/><br/><p>If all of this requirements ale satisfied, generated files should be identical (content and names).</p><br/><br/><p>You can check mtime using "stat" unix command.</p><br/><br/><p>Answers to your questions:</p><br/><br/><ul><br/><li>Purpose of the cache in django-compressor is to reduce reads from file system.</li><br/><li>Generated file with combined code is stored only on filesystem.</li><br/></ul><br/><br/><p><strong>Edit:</strong></p><br/><br/><p>I have checked it on one of my websites behind load balancer. I have different file names for .css files, but they are identical for .js.</p><br/><br/><p>For .css files I use preprocessor (http://lesscss.org/), so it affects mtime.</p><br/><br/><p><strong>Edit (after topic developed):</strong></p><br/><br/><p><strong>What is in the cache?</strong></p><br/><br/><p>Due to <a href="http://django_compressor.readthedocs.org/en/latest/behind-the-scenes/" rel="nofollow">documentation</a> django-compressor stores in the cache two different things:</p><br/><br/><ul><br/><li>mtime of cached files (rechecked every COMPRESS_MTIME_DELAY seconds)</li><br/><li><p>full generated code ie.:</p><br/><br/><p>&lt;link rel="stylesheet" href="http://cdn.inprl.pl/CACHE/css/117f97d818b8.css" type="text/css"></p></li><br/></ul><br/><br/><p>Due to following cache usage django-compressor reduces number of reads to filesystem to 0. This is essential for page speed, because reading from memory is hundreds times faster than reading from filesystem. Also filesystem is very often bottleneck.</p><br/><br/><p><strong>How it is stored in the cache?</strong></p><br/><br/><p>django-compress is storing code in the cache using generated key. Key is generated from:</p><br/><br/><ul><br/><li>code in <code>{% compress %}...{% endcompress %}</code></li><br/><li>mtime of files mentioned in <code>{% compress %}...{% endcompress %}</code></li><br/></ul><br/><br/><p>So those must be the same on all servers if you want to have consistent responses.</p><br/><br/><p><strong>PS.</strong></p><br/><br/><p>Please check constrains (like mtime) on your server and post here information if they match.</p><br/><br/><p>I will be fixing the same problem on my site probably next week, I will post additional details then.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTINLINGU DATABAS SUPPORT FOR DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>one solution is to use this projet that is made by the creator of django-multilingual-ng (<br/><a href="https://github.com/KristianOellegaard/django-hvad" rel="nofollow">django-hvad</a> )<br><br/>but the probleme is that it's in alpha state.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET A SEMI LONG UNIQU ID ( NON SEQUENTI ) KEY FOR DATABAS OBJECT
    </pattern>
    <template>
<![CDATA[<h3>Encoding the integers</h3><br/><br/><p>You could use a reversible encoding for your integers:</p><br/><br/><pre><code>def int_str(val, keyspace):<br/>    """ Turn a positive integer into a string. """<br/>    assert val &gt;= 0<br/>    out = ""<br/>    while val &gt; 0:<br/>        val, digit = divmod(val, len(keyspace))<br/>        out += keyspace[digit]<br/>    return out[::-1]<br/><br/>def str_int(val, keyspace):<br/>    """ Turn a string into a positive integer. """<br/>    out = 0<br/>    for c in val:<br/>        out = out * len(keyspace) + keyspace.index(c)<br/>    return out<br/></code></pre><br/><br/><p>Quick testing code:</p><br/><br/><pre><code>keyspace = "fw59eorpma2nvxb07liqt83_u6kgzs41-ycdjh" # Can be anything you like - this was just shuffled letters and numbers, but...<br/>assert len(set(keyspace)) == len(keyspace) # each character must occur only once<br/><br/>def test(v):<br/>    s = int_str(v, keyspace)<br/>    w = str_int(s, keyspace)<br/>    print "OK? %r -- int_str(%d) = %r; str_int(%r) = %d" % (v == w, v, s, s, w)<br/><br/>test(1064463423090)<br/>test(4319193500)<br/>test(495689346389)<br/>test(2496486533)<br/></code></pre><br/><br/><p>outputs</p><br/><br/><pre><code>OK? True -- int_str(1064463423090) = 'antmgabi'; str_int('antmgabi') = 1064463423090<br/>OK? True -- int_str(4319193500) = 'w7q0hm-'; str_int('w7q0hm-') = 4319193500<br/>OK? True -- int_str(495689346389) = 'ev_dpe_d'; str_int('ev_dpe_d') = 495689346389<br/>OK? True -- int_str(2496486533) = '1q2t4w'; str_int('1q2t4w') = 2496486533<br/></code></pre><br/><br/><h3>Obfuscating them and making them non-continuous</h3><br/><br/><p>To make the IDs non-contiguous, you could, say, multiply the original value with some arbitrary value, add random "chaff" as the digits-to-be-discarded - with a simple modulus check in my example:</p><br/><br/><pre><code>def chaffify(val, chaff_size = 150, chaff_modulus = 7):<br/>    """ Add chaff to the given positive integer.<br/>    chaff_size defines how large the chaffing value is; the larger it is, the larger (and more unwieldy) the resulting value will be.<br/>    chaff_modulus defines the modulus value for the chaff integer; the larger this is, the less chances there are for the chaff validation in dechaffify() to yield a false "okay".<br/>    """<br/>    chaff = random.randint(0, chaff_size / chaff_modulus) * chaff_modulus<br/>    return val * chaff_size + chaff<br/><br/>def dechaffify(chaffy_val, chaff_size = 150, chaff_modulus = 7):<br/>    """ Dechaffs the given chaffed value. The chaff_size and chaff_modulus parameters must be the same as given to chaffify() for the dechaffification to succeed.<br/>    If the chaff value has been tampered with, then a ValueError will (probably - not necessarily) be raised. """<br/>    val, chaff = divmod(chaffy_val, chaff_size)<br/>    if chaff % chaff_modulus != 0:<br/>        raise ValueError("Invalid chaff in value")<br/>    return val<br/><br/>for x in xrange(1, 11):<br/>    chaffed = chaffify(x)<br/>    print x, chaffed, dechaffify(chaffed)<br/></code></pre><br/><br/><p>outputs (with randomness):</p><br/><br/><pre><code>1 262 1<br/>2 440 2<br/>3 576 3<br/>4 684 4<br/>5 841 5<br/>6 977 6<br/>7 1197 7<br/>8 1326 8<br/>9 1364 9<br/>10 1528 10<br/></code></pre><br/><br/><p><strong>EDIT:</strong> On second thought, the randomness of the chaff may not be a good idea, as you lose the canonicality of each obfuscated ID -- this lacks the randomness but still has validation (changing one digit will likely invalidate the whole number if <code>chaff_val</code> is Large Enough).</p><br/><br/><pre><code>def chaffify2(val, chaff_val = 87953):<br/>    """ Add chaff to the given positive integer. """<br/>    return val * chaff_val<br/><br/>def dechaffify2(chaffy_val, chaff_val = 87953):<br/>    """ Dechaffs the given chaffed value. chaff_val must be the same as given to chaffify2(). If the value does not seem to be correctly chaffed, raises a ValueError. """<br/>    val, chaff = divmod(chaffy_val, chaff_val)<br/>    if chaff != 0:<br/>        raise ValueError("Invalid chaff in value")<br/>    return val<br/></code></pre><br/><br/><h3>Putting it all together</h3><br/><br/><pre><code>document_id = random.randint(0, 1000000)<br/>url_fragment = int_str(chaffify(document_id))<br/>print "URL for document %d: http://example.com/%s" % (document_id, url_fragment)<br/>request_id = dechaffify(str_int(url_fragment))<br/>print "Requested: Document %d" % request_id<br/></code></pre><br/><br/><p>outputs (with randomness)</p><br/><br/><pre><code>URL for document 831274: http://example.com/w840pi<br/>Requested: Document 831274<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM HOW TO USE PREFIX PARAMET
    </pattern>
    <template>
<![CDATA[<p>You process each form as you normally would, ensuring that you create instances which have the same prefixes as those used to generate the form initially.</p><br/><br/><p>Here's a slightly awkward example using the form you've given, as I don't know what the exact use case is:</p><br/><br/><pre><code>def some_view(request):<br/>    if request.method == 'POST':<br/>        form1 = GeneralForm(request.POST, prefix='form1')<br/>        form2 = GeneralForm(request.POST, prefix='form2')<br/>        if all([form1.is_valid(), form2.is_valid()]):<br/>            pass # Do stuff with the forms<br/>    else:<br/>        form1 = GeneralForm(prefix='form1')<br/>        form2 = GeneralForm(prefix='form2')<br/>    return render_to_response('some_template.html', {<br/>        'form1': form1,<br/>        'form2': form2,<br/>    })<br/></code></pre><br/><br/><p>Here's some real-world sample code which demonstrates processing forms using the prefix:</p><br/><br/><p><a href="http://collingrady.wordpress.com/2008/02/18/editing-multiple-objects-in-django-with-newforms/" rel="nofollow">http://collingrady.wordpress.com/2008/02/18/editing-multiple-objects-in-django-with-newforms/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WEBCASTS VIDEO
    </pattern>
    <template>
<![CDATA[<p>Check the <a href="http://thisweekindjango.com/screencasts/" rel="nofollow">screencasts section</a> at <a href="http://thisweekindjango.com/" rel="nofollow">This Week In Django</a>.</p><br/><br/><p>Update: The TWID site appears to be down, a condition which is likely permanent. The list of screencasts is still <a href="http://web.archive.org/web/20090122214849/http://thisweekindjango.com/screencasts/" rel="nofollow">available at archive.org</a>, but the bulk of the actual videos (Eric Florenzano's "Django from the Ground Up" series) were and are <a href="http://showmedo.com/videotutorials/series?name=PPN7NA155" rel="nofollow">hosted at showmedo.com</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPGRAD FROM DJANGO 0.96 TO 1.0
    </pattern>
    <template>
<![CDATA[<p>Although this depends on what you're doing, most applications should be able to just upgrade and then fix everything that breaks.  In my experience, the main things that I've had to fix after an upgrade are</p><br/><br/><ol><br/><li><p>Changes to some of the funky stuff with models, such as the syntax for following foreign keys.</p></li><br/><li><p>A small set of template changes, most notably auto-escaping.</p></li><br/><li><p>Anything that depends on the specific structure of Django's internals.  This shouldn't be an issue unless you're doing stuff like dynamically modifying Django internals to change their behavior in a way that's necessary/convenient for your project.</p></li><br/></ol><br/><br/><p>To summarize, unless you're doing a lot of really weird and/or complex stuff, a simple upgrade should be relatively painless and only require a few changes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I NOTIFI A PARENT WHEN A CHILD IS SAVE IN A FOREIGN KEY RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>What you want to look into is <a href="http://docs.djangoproject.com/en/dev/ref/signals/" rel="nofollow">Django's signals</a> (check out <a href="http://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow">this page</a> too), specifically the model signals--more specifically, the <strong>post_save</strong> signal. Signals are Django's version of a plugin/hook system. The post_save signal gets sent every time a model is saved, whether it's updated or created (and it'll let you know if it was created). This is how you'd use signals to get notified when an Activity has a Cancellation</p><br/><br/><pre><code>from django.db.models.signals import post_save<br/><br/>class Activity(models.Model):<br/>    name = models.CharField(max_length=50, help_text='Some help.')<br/>    entity = models.ForeignKey(CancellationEntity)<br/><br/>    @classmethod<br/>    def cancellation_occurred (sender, instance, created, raw):<br/>        # grab the current instance of Activity<br/>        self = instance.activity_set.all()[0]<br/>        # do something<br/>    ...<br/><br/><br/>class Cancellation(models.Model):<br/>    activity = models.ForeignKey(Activity)<br/>    date = models.DateField(default=datetime.now().date())<br/>    description = models.CharField(max_length=250)<br/>    ...<br/><br/>post_save.connect(Activity.cancellation_occurred, sender=Cancellation)</code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESTRICT FOREIGN KEY CHOIC TO RELAT OBJECT ONLI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I just came across <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.limit_choices_to" rel="nofollow">ForeignKey.limit_choices_to</a> in the Django docs.<br/>Not sure yet how this works, but it might just be the right think here.</p><br/><br/><p><strong>Update:</strong> ForeignKey.limit_choices_to allows to specify either a constant, a callable or a Q object to restrict the allowable choices for the key. A constant obviously is no use here, since it knows nothing about the objects involved.</p><br/><br/><p>Using a callable (function or class method or any callable object) seem more promising. The problem remains how to access the necessary information form the HttpRequest object. Using <a href="http://stackoverflow.com/questions/160009/django-model-limitchoicestouser-user">thread local storage</a> may be a solution.</p><br/><br/><p><strong>2. Update:</strong> Here is what hast worked for me:</p><br/><br/><p>I created a middle ware as described in the link above. It extracts one or more arguments from the request's GET part, such as "product=1" and stores this information in the thread locals.</p><br/><br/><p>Next there is a class method in the model that reads the thread local variable and returns a list of ids to limit the choice of a foreign key field.</p><br/><br/><pre><code>@classmethod<br/>def _product_list(cls):<br/>    """<br/>    return a list containing the one product_id contained in the request URL,<br/>    or a query containing all valid product_ids if not id present in URL<br/><br/>    used to limit the choice of foreign key object to those related to the current product<br/>    """<br/>    id = threadlocals.get_current_product()<br/>    if id is not None:<br/>        return [id]<br/>    else:<br/>        return Product.objects.all().values('pk').query<br/></code></pre><br/><br/><p>It is important to return a query containing all possible ids if none was selected so the normal admin pages work ok.</p><br/><br/><p>The foreign key field is then declared as:</p><br/><br/><pre><code>product = models.ForeignKey(Product, limit_choices_to=dict(id__in=BaseModel._product_list))<br/></code></pre><br/><br/><p>The catch is that you have to provide the information to restrict the choices via the request. I don't see a way to access "self" here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAB COMPLET TO THE PYTHON SHELL
    </pattern>
    <template>
<![CDATA[<p>I think django does something like <a href="http://www.python.org/doc/2.5.2/lib/module-rlcompleter.html" rel="nofollow">http://www.python.org/doc/2.5.2/lib/module-rlcompleter.html</a> </p><br/><br/><p>If you want to have a really good interactive interpreter have a look at <br/><a href="http://ipython.scipy.org/" rel="nofollow">http://ipython.scipy.org/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL HOW TO FILTER NUMBER OF FOREIGNKEY OBJECT
    </pattern>
    <template>
<![CDATA[<p>Sounds like a job for <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none" rel="nofollow" rel="nofollow"><code>extra</code></a>.</p><br/><br/><pre><code>A.objects.extra(<br/>    select={<br/>        'b_count': 'SELECT COUNT(*) FROM yourapp_b WHERE yourapp_b.a_id = yourapp_a.id',<br/>    },<br/>    where=['b_count &lt; 2']<br/>)<br/></code></pre><br/><br/><p>If the B count is something you often need as a filtering or ordering criterion, or needs to be displayed on list views, you could consider denormalisation by adding a b_count field to your A model and using signals to update it when a B is added or deleted:</p><br/><br/><pre><code>from django.db import connection, transaction<br/>from django.db.models.signals import post_delete, post_save<br/><br/>def update_b_count(instance, **kwargs):<br/>    """<br/>    Updates the B count for the A related to the given B.<br/>    """<br/>    if not kwargs.get('created', True) or kwargs.get('raw', False):<br/>        return<br/>    cursor = connection.cursor()<br/>    cursor.execute(<br/>        'UPDATE yourapp_a SET b_count = ('<br/>            'SELECT COUNT(*) FROM yourapp_b '<br/>            'WHERE yourapp_b.a_id = yourapp_a.id'<br/>        ') '<br/>        'WHERE id = %s', [instance.a_id])<br/>    transaction.commit_unless_managed()<br/><br/>post_save.connect(update_b_count, sender=B)<br/>post_delete.connect(update_b_count, sender=B)<br/></code></pre><br/><br/><p>Another solution would be to manage a status flag on the A object when you're adding or removing a related B.</p><br/><br/><pre><code>B.objects.create(a=some_a)<br/>if some_a.hidden and some_a.b_set.count() &gt; 1:<br/>    A.objects.filter(id=some_a.id).update(hidden=False)<br/><br/>...<br/><br/>some_a = b.a<br/>some_b.delete()<br/>if not some_a.hidden and some_a.b_set.count() &lt; 2:<br/>    A.objects.filter(id=some_a.id).update(hidden=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HA MORE JOB OPEN FOR PROGRAMM RAIL OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>How many jobs can you hold at once anyway? You only need one.</p><br/><br/><p>Realistically, if you're deciding on what technology to learn based on jobs, you might want there to be a few openings. If the first job doesn't work out then you have to jump ship. Beyond that, it doesn't matter if there are a 100 openings or 100,000. </p><br/><br/><p>Take for example erlang right now. There are not many openings, look at the graph above with erlang added. Erlang's a whole language not just one framework in a language. </p><br/><br/><p><a href="http://www.indeed.com/jobtrends?q=django%2C%22ruby+on+rails%22%2Cerlang" rel="nofollow">job trends for django, ruby on rails, and erlang</a></p><br/><br/><p>Clearly if you were just looking at numbers, you wouldn't go spend time learning erlang. But that's not the whole picture. Just yesterday one of my coworkers, based in Montevideo, Uruguay got a call from a company in Norway begging him work for them. His total erlang experience was one university class half a decade ago.</p><br/><br/><p>You could go the other direction, say, let's look at what's popular, java.</p><br/><br/><p><a href="http://www.indeed.com/jobtrends?q=django%2C%22ruby+on+rails%22%2Cjava" rel="nofollow">job trends for django, ruby on rails, and java</a></p><br/><br/><p>Throwing java in the picture you can see that both rails and django have almost no listings or growth. </p><br/><br/><p>The size of the job market mostly does not matter. What matters is do you enjoy working in the language, is there a job, or a few interesting jobs to choose from. I've worked professionally programming in both ruby and python a times when there were few to no jobs for those languages. At the time there were a few passionate coders who had experience and would happily move half way around the world to work in their favorite language. </p><br/><br/><p>Trends matter, but i'd say that job listings are a tailing indicator of technology adoption, not something you can use to predict the future. Find something you enjoy working with, learn a new language every year, and don't worry about getting 100,000 jobs, you only need one. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLATTEN ONE TO MANI RELATIONSHIP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Actually, it looks like there's a better approach using filter:</p><br/><br/><pre><code>my_book = Book.objects.get(pk=1)<br/>all_ingredients = Ingredient.objects.filter(recipe__book=my_book)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FOREIGN KEY TO AN ABSTRACT BASE CLASS WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>A <a href="https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations" rel="nofollow">generic relation</a> seems to be the solution. But it will complicate things even further.</p><br/><br/><p>It seems to me; your model structure is already more complex than necessary. I would simply merge all three <code>Answer</code> models into one. This way:</p><br/><br/><ul><br/><li><code>Answer_Risk</code> would work without modification.</li><br/><li>You can set <code>resident</code> to None (NULL) in case of an <code>Answer_A</code>.</li><br/><li>You can return different string represantations depending on <code>resident == None</code>. (in other words; same functionality)</li><br/></ul><br/><br/><p>One more thing; are your answers likely to have more than one risk? If they'll have none or one risk you should consider following alternative implementations:</p><br/><br/><ul><br/><li>Using a <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#one-to-one-relationships" rel="nofollow">one-to-one relationship</a></li><br/><li>Demoting risk as a field (or any number of fields) inside <code>Answer</code> class.</li><br/></ul><br/><br/><p>My main concern is neither database structure nor performance (although these changes should improve performance) but <em>code maintainability</em>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DICTIONARI ON A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>If it's really dictionary like arbitrary data you're looking for you can probably use a two-level setup with one model that's a container and another model that's key-value pairs. You'd create an instance of the container, create each of the key-value instances, and associate the set of key-value instances with the container instance. Something like:</p><br/><br/><pre><code>class Dicty(models.Model):<br/>    name      = models.CharField(max_length=50)<br/><br/>class KeyVal(models.Model):<br/>    container = models.ForeignKey(Dicty, db_index=True)<br/>    key       = models.CharField(max_length=240, db_index=True)<br/>    value     = models.CharField(max_length=240, db_index=True)<br/></code></pre><br/><br/><p>It's not pretty, but it'll let you access/search the innards of the dictionary using the DB whereas a pickle/serialize solution will not.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCEPT
    </pattern>
    <template>
<![CDATA[<p>The clue is in the name - exceptions should be exceptional.</p><br/><br/><p>If you always expect the item will exist then use <code>get</code>, but if you expect it not to exist a reasonable proportion of the time (i.e. it not existing is an expected result rather than an exceptional result) then I'd suggest using <code>filter</code>.</p><br/><br/><p>So, seeing as you indicated that between 1 in 2 and 1 in 4 are expected not to exist, I'd definitely write a wrapper around <code>filter</code>, as that's definitely not an exceptional case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRODUC A 303 HTTP RESPONS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could just override HttpResponse, like the other Responses do:</p><br/><br/><pre><code>class HttpResponseSeeOther(HttpResponseRedirect):<br/>    status_code = 303<br/></code></pre><br/><br/><p><strong>Edit</strong>: Location field is required, so I've overridden HttpResponseRedirect.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMATRESULT AND FORMATITEM OPTION DO IN JQUERI AUTOCOMPLET
    </pattern>
    <template>
<![CDATA[<p><code>formatItem</code> formats an item for display in the dropdown list, while <code>formatResult</code> formats the item for display in the inputbox once it is selected.</p><br/><br/><p>By default, autocomplete expects to get data from the specified url formatted as: </p><br/><br/><pre><code>foo|bar|baz|bing<br/>zaz|ding|blop|grok<br/></code></pre><br/><br/><p>where each line is a row of data; each row being the data that it passes to <code>formatItem</code> and <code>formatResult</code>. You may want to take the path of least resistance and return data in the way it likes.</p><br/><br/><p>If you want to use data that doesn't fit autocomplete's assumptions, you'll need to use the (undocumented, as far as I can tell) parse option to identify a function to parse the results of your ajax request. It appears to me that your django view is returning an array rather than returning a formatted string. To format your array as jquery would like it:</p><br/><br/><pre><code>return HttpResponse('|'.join(your_array), mimetype='text/plain')<br/></code></pre><br/><br/><p>Here is an example of doing autocomplete using non-standard autocomplete data (JSON):</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt; <br/>  format_item = function (item, position, length){ <br/>    return item.title; <br/>  } <br/><br/> // Handle data from ajax request <br/> prep_data = function(data){ <br/>   tmp = $.evalJSON(data); <br/>   parsed_data = []; <br/>   for (i=0; i &lt; tmp.length; i++) { <br/>     obj = tmp[i]; <br/>     // Other internal autocomplete operations expect <br/>     // the data to be split into associative arrays of this sort <br/>     parsed_data[i] = { <br/>        data: obj , <br/>        value: obj.isbn13, <br/>        result: obj.title <br/>     }; <br/>   } <br/>   return parsed_data <br/> } <br/><br/> $(document).ready(function(){ <br/>   $("#fop").autocomplete({ <br/>          url : "{% url book-search %}", <br/>          // undocumented <br/>          parse: prep_data, <br/>          formatItem: format_item, <br/>          }); <br/> }) <br/><br/>&lt;/script&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OLUMN COMPARISON IN DJANGO QUERI
    </pattern>
    <template>
<![CDATA[<p>You can't do this right now without custom SQL.  The django devs are working on an F() function that would make it possible: <a href="http://groups.google.com/group/django-developers/browse_thread/thread/c8cff7e5e16c692a#" rel="nofollow">#7210 - F() syntax, design feedback required.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIQU FOR A TUPL OF FIELD IN A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>There is a META option called unique_together. For example:</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    field1 = models.BlahField()<br/>    field2 = models.FooField()<br/>    field3 = models.BazField()<br/><br/>    class Meta:<br/>        unique_together = ("field1", "field2")<br/></code></pre><br/><br/><p>More info on the Django <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#unique-together" rel="nofollow">documentation</a> page.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSTAL APP LOCAT
    </pattern>
    <template>
<![CDATA[<p>Make sure that the '__init__.py' file is in your apps directory, if it's not there it won't be recognized as part of the package.</p><br/><br/><p>So each of the folders here should have '__init__.py' file in it. (empty is fine).</p><br/><br/><pre><code>/project/<br/>/project/apps/<br/>/project/apps/app1/<br/>/project/apps/app2<br/></code></pre><br/><br/><p>Then as long as your root 'module' folder is in your PYTHONPATH you'll be able to import from your apps.</p><br/><br/><p>Here's the documentation regarding the python search path for your reading pleasure:</p><br/><br/><p><a href="http://docs.python.org/install/index.html#modifying-python-s-search-path" rel="nofollow">http://docs.python.org/install/index.html#modifying-python-s-search-path</a></p><br/><br/><p>And a nice simple explanation of what __init__.py file is for:</p><br/><br/><p><a href="http://effbot.org/pyfaq/what-is-init-py-used-for.htm" rel="nofollow">http://effbot.org/pyfaq/what-is-init-py-used-for.htm</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHOIC FIELD OPTION BASE ON ANOTH CHOIC FIELD IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Here is some javascript (JQuery based) to change the item option values when category changes:</p><br/><br/><pre><code>&lt;script charset="utf-8" type="text/javascript"&gt;<br/>  $(function(){<br/>    $("select#id_category").change(function(){<br/>      $.getJSON("/items/",{id: $(this).val(), view: 'json'}, function(j) {<br/>        var options = '&lt;option value=""&gt;--------&amp;nbsp;&lt;/option&gt;';<br/>        for (var i = 0; i &lt; j.length; i++) {<br/>          options += '&lt;option value="' + j[i].optionValue + '"&gt;' + j[i].optionDisplay + '&lt;/option&gt;';<br/>        }<br/>        $("#id_item").html(options);<br/>        $("#id_item option:first").attr('selected', 'selected');<br/>      })<br/>      $("#id_category").attr('selected', 'selected');<br/>    })<br/>  })<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>You need a view to be called on the /items/ URL that supplies a JSON list of the valid items.</p><br/><br/><p>You can hook this into your admin by using <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-media-definitions" rel="nofollow">model admin media definitions</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAMPL FOR DJANGO + SWFUPLOAD
    </pattern>
    <template>
<![CDATA[<p>Unfortunately I can't give you any very detailed code samples, but I have quite a bit of experience with working with SWFUpload + Django (for a photo sharing site I work on). Anyway, here are a few pointers that will hopefully help you on your quest for DjSWF happiness :)</p><br/><br/><ol><br/><li><p>You'll want to use the cookies plugin (if of course you are using some sort of session-based authentication [like <code>django.contrib.auth</code>, and care who uploaded what).</p><br/><br/><p>The cookies plugin sends the data from cookies as POST, so you'll have to find some way of getting this back into <code>request.COOKIES</code> (<code>process_request</code> middleware that looks for a <code>settings.SESSION_COOKIE_NAME</code> in <code>request.POST</code> on specific URLs and dumps it into <code>request.COOKIES</code> works nicely for this :)</p></li><br/><li><p>Also, remember that you <em>must</em> return something in the response body for SWFUpload to recognize it as a successful upload attempt. I believe this has changed in the latest beta of SWFUpload, but anyway it's advisable just to stick something in there like 'ok'. For failures, make use of something like <code>HttpResponseBadRequest</code> or the like.</p></li><br/><li><p>Lastly, in case you're having trouble finding them, the uploaded file is in <code>request.FILES</code> :)</p></li><br/></ol><br/><br/><p>If you have anything perplexing I haven't covered, feel free to post something more detailed and I'll be happy to help.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AND PHP TOGETH ON ONE APACH SERVER
    </pattern>
    <template>
<![CDATA[<p>I run dozens of mod_wsgi/Django sites, PHP sites, and a Rails site with a single Apache.</p><br/><br/><p>It's mostly done using virtual hosts but I have some that are running both on the same domain.</p><br/><br/><p>You just need to put your <code>WSGIScriptAlias /...</code> after any other Location/Alias directives.</p><br/><br/><p>Lets say, for example, I want to run phpMyAdmin on the same domain as a Django site.  The config would look something like this:</p><br/><br/><pre><code>Alias /phpmyadmin /full/path/to/phpmyadmin/<br/>&lt;Directory /full/path/to/phpmyadmin&gt;<br/>   Options -Indexes<br/>   ...etc...<br/>&lt;/Directory&gt;<br/><br/>WSGIScriptAlias / /full/path/to/django/project/app.wsgi<br/>&lt;Directory /full/path/to/django/project&gt;<br/>    Options +ExecCGI<br/>    ...etc...<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p><strong>Edit</strong>: </p><br/><br/><p>Your configuration should look something like this:</p><br/><br/><pre><code>&lt;VirtualHost *:80&gt;<br/>    DocumentRoot "C:/django_proj"<br/>    ServerName localhost<br/>    WSGIScriptAlias / "C:/django_proj/apache/proj.wsgi"<br/>    &lt;Directory "C:/django_proj/apache"&gt;<br/>        Options +ExecCGI<br/>        Order allow,deny<br/>        Allow from all<br/>    &lt;/Directory&gt;<br/>&lt;/VirtualHost&gt;<br/><br/>&lt;VirtualHost *:80&gt;<br/>    DocumentRoot "C:/web"<br/>    ServerName php.localhost<br/>    Alias / C:/web<br/>    &lt;Directory C:/web&gt;<br/>        Options Indexes FollowSymLinks<br/>        AllowOverride None<br/>        Order Deny,Allow<br/>        Allow from all<br/>    &lt;/Directory&gt;<br/>&lt;/VirtualHost&gt;<br/></code></pre><br/><br/><p>You don't need those <code>&lt;Directory&gt;</code> directives in <code>http.conf</code>... do all your configuration in the Virtual hosts.</p><br/><br/><p>Also, completely get rid of the <code>&lt;Directory /&gt;</code> block.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY OF SPECIFI CHANNEL IMAG IN RSS FEED
    </pattern>
    <template>
<![CDATA[<p>Found the <em>right</em> way of doing it. As the <a href="http://docs.djangoproject.com/en/dev/ref/contrib/syndication/?from=olddocs#custom-feed-generators">documentation</a> describes, I needed to create a custom feed generator by subclassing from <em>Rss201rev2Feed</em> and overriding method </p><br/><br/><pre><br/>add_root_elements()<br/></pre><br/><br/><p>like this:</p><br/><br/><pre><code>class RssFooFeedGenerator(Rss201rev2Feed):<br/>    def add_root_elements(self, handler):<br/>        super(RssFooFeedGenerator, self).add_root_elements(handler)<br/>        handler.addQuickElement(u"image", '',<br/>            {<br/>                 'url': u"http://www.example.com/images/logo.jpg",<br/>                 'title': u"Some title",<br/>                 'link': u"http://www.example.com/", <br/>             })     <br/><br/>class RssFooFeed(Feed):<br/>    feed_type = RssFooFeedGenerator<br/>    title = u"Foo items"<br/>    link = u"http://www.example.com/"<br/>    description = u"Some description"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIFI A BASE TEMPLAT BY DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>May be I oversee something, but all you want can be accomplished with the django template system. All extends calls are relative to template directories.</p><br/><br/><ol><br/><li><p>In order for all base.html files in subdirectories to extend base.html, you just have to put a <code>{% extends "base.html" %}</code> into the files. section1/base.html would would look like that.</p><br/><br/><p>{% extends "base.html" %}</p><br/><br/><p>{# ... rest of your code ...#}</p></li><br/><li><p>Now, to get the files from section1 to extend section1/base.html you just have to put <code>{% extends "section1/base.html" %}</code> at the top of them. Same for section2, section3 and so on.</p></li><br/></ol><br/><br/><p>It is just that simple, but might not totally obvious in the documentation.</p><br/><br/><p>I hope, I understood your question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ABL FOREIGNKEY AND DELET A REFERENC MODEL INSTANC
    </pattern>
    <template>
<![CDATA[<p>Django does indeed emulate SQL's <code>ON DELETE CASCADE</code> behaviour, and there's no out-of-the box documented way to change this. The docs where they mention this are near the end of this section: <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#deleting-objects" rel="nofollow">Deleting objects</a>.</p><br/><br/><p>You are right that Django's collects all related model instances, then calls the pre-delete handler for each. The sender of the signal will be the model class about to be deleted, in this case <code>Message</code>, rather than <code>User</code>, which makes it hard to detect the difference between a cascade delete triggered by User and a normal delete... especially since the signal for deleting the User class comes last, since that's the last deletion :-)</p><br/><br/><p>You can, however, get the list of objects that Django is proposing to delete in advance of calling the User.delete() function. Each model instance has a semi-private method called <code>_collect_sub_objects()</code> that compiles the list of instances with foreign keys pointing to it (it compiles this list without deleting the instances). You can see how this method is called by looking at <code>delete()</code> in <code>django.db.base</code>.</p><br/><br/><p>If this was one of your own objects, I'd recommend overriding the <code>delete()</code> method on your instance to run _collect_sub_objects(), and then break the ForeignKeys before calling the super class delete. Since you're using a built-in Django object that you may find too difficult to subclass (though it is possible to substitute your own User object for django's), you may have to rely on view logic to run <code>_collect_sub_objects</code> and break the FKs before deletion.</p><br/><br/><p>Here's a quick-and-dirty example:</p><br/><br/><pre><code>from django.db.models.query import CollectedObjects<br/>u = User.objects.get(id=1)<br/><br/><br/>instances_to_be_deleted = CollectedObjects()<br/>u._collect_sub_objects(instances_to_be_deleted)<br/><br/>for k in instances_to_be_deleted.ordered_keys():<br/>    inst_dict = instances_to_be_deleted.data[k]<br/>    for i in inst_dict.values():<br/>        i.sender = None  # You will need a more generic way for this<br/>        i.save()<br/><br/>u.delete()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT NEW VARIABL DECLAR
    </pattern>
    <template>
<![CDATA[<p>Check out the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#for" rel="nofollow">documentation</a> on the <code>for</code> loop.</p><br/><br/><p>It automatically creates a variable called <code>forloop.counter</code> that holds the current iteration index.</p><br/><br/><p>As far as the greater question on how to declare variables, there is no out-of-the-box way of doing this with Django, and it is not considered a missing feature but a feature. If you really wanted to do this it is possible with <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-tags" rel="nofollow">custom tags</a> but for the most part the philosophy you want to follow is that mostly anything you want to do that would require this should be done in the view and the template should be reserved for very simple logic. For your example of summing up a total, for example, you could use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#add" rel="nofollow">add</a> filter. Likewise, you can <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-filters" rel="nofollow">create your own filters</a> just like with tags.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPORT SERVIC IN DJANGO OR PYTHON
    </pattern>
    <template>
<![CDATA[<p>I just thought after a fair bit of investigation I would report my findings...</p><br/><br/><p><a href="http://code.google.com/p/django-reporting/" rel="nofollow">http://code.google.com/p/django-reporting/</a> - I think that this project, looks like an awesome candidate for alot of the functionality I require. Unfortunately its Django 1.1 which as of this writing (29th April 2009) has not been released.At least in the ability to create reports without too much code.</p><br/><br/><p><a href="http://code.google.com/p/django-cron/" rel="nofollow">http://code.google.com/p/django-cron/</a> - Look promising for scheduling of jobs without cron access</p><br/><br/><p><a href="http://www.xhtml2pdf.com/" rel="nofollow">http://www.xhtml2pdf.com/</a> - Could be used or ReportLabs PDF Libraries for conversion of HTML to PDF</p><br/><br/><p>All these together with Django's Email functionality could make a nice Reporting System.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANUAL ASSIGN IMAGEFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>See the django docs for <a href="http://docs.djangoproject.com/en/dev/ref/files/file/#django.core.files.File.save" rel="nofollow">django.core.files.File</a></p><br/><br/><p>Where fd is an open file object:</p><br/><br/><pre><code>model_instance.image_field.save('filename.jpeg', fd.read(), True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DENORM DATA IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You have managers in Django.</p><br/><br/><p>Use a customized manager to do creates and maintain the FK relationships.</p><br/><br/><p>The manager can update the counts as the sets of children are updated.</p><br/><br/><p>If you don't want to make customized managers, just extend the <code>save</code> method.  Everything you want to do for denormalizing counts and sums can be done in <code>save</code>.</p><br/><br/><p>You don't need signals.  Just extend <code>save</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPOS AN OR QUERI FILTER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could chain your queries as follows:</p><br/><br/><pre><code>values = [1,2,3]<br/><br/># Turn list of values into list of Q objects<br/>queries = [Q(pk=value) for value in values]<br/><br/># Take one Q object from the list<br/>query = queries.pop()<br/><br/># Or the Q object with the ones remaining in the list<br/>for item in queries:<br/>    query |= item<br/><br/># Query the model<br/>Article.objects.filter(query)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPUL CREATED BI FIELD WITH DJANGO ADMIN SITE
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.djangoproject.com/wiki/CookBookNewformsAdminAndUser" rel="nofollow">http://code.djangoproject.com/wiki/CookBookNewformsAdminAndUser</a></p><br/><br/><p>Involves implementing save methods on your ModelAdmin objects.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY CRON JOB TO PRODUCT
    </pattern>
    <template>
<![CDATA[<p>If you're using <a href="http://docs.fabfile.org/0.9/">Fabric</a> for deploment you could add a function that edits your crontab. </p><br/><br/><pre><code>def add_cronjob():<br/>    run('crontab &gt; /tmp/crondump')<br/>    run('echo "@daily /path/to/dostuff.sh 2&gt;/dev/null" &gt;&gt; /tmp/crondump')<br/>    run('crontab /tmp/crondump')<br/></code></pre><br/><br/><p>This would append a job to your crontab (disclaimer: totally untested and not very idempotent). (1. Save the crontab to a tempfile. 2. append a line to the tmpfile. 3.write the crontab back.)</p><br/><br/><p>This is propably not exactly what you want to do but along those lines you could think about checking the crontab into git and overwrite it on the server with every deploy. (if there's a dedicated user for your project.) </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAYSTACK AND WHOOSH
    </pattern>
    <template>
<![CDATA[<p>As a general principle, I put Whoosh in the same category as SQLite: <em>great</em> for getting started, wonderful for single-user or really small-scale apps, but not suitable for large-scale deployment.</p><br/><br/><p>Whoosh is, in my experience, about an order of magnitude slower than Solr. A typical search against a bigish Solr index I've got in production takes about a hundredth of a second ; the same search using Whoosh and the same data takes roughly a tenth of second.</p><br/><br/><p>You should decide what's "fast enough" for you, but I don't think Whoosh is a good idea for anything where you expect high performance.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR LOOP COUNTER BREAK
    </pattern>
    <template>
<![CDATA[<p>Use:</p><br/><br/><pre><code>{% for photos in gallery.photo_set|slice:":3" %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPERI OF CREAT SOCIAL NETWORK SITE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you're interested in creating a social-network site in Django, you should definitely investigate <a href="http://pinaxproject.com/" rel="nofollow">Pinax</a>. This is a project that integrates a number of apps that are useful for creating this sort of site - friends, messaging, invitations, registration, etc. They're mostly very high quality.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFIC WAY TO STORE A LIST IN THE DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Would not this relationship be better expressed as a one-to-many foreign key relationship to a <code>Friends</code> table?  I understand that <code>myFriends</code> are just strings but I would think that a better design would be to create a <code>Friend</code> model and have <code>MyClass</code> contain a foreign key realtionship to the resulting table.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML ESCAP IN DJANGO S TEXTFIELD
    </pattern>
    <template>
<![CDATA[<p>One way to do it is to put a function in your model which returns the data marked as safe:</p><br/><br/><pre><code>from django.utils.safestring import mark_safe <br/><br/>class MyModel(models.Model): <br/>    myTextField = models.TextField()<br/><br/>def display_mySafeField(self): <br/>    return mark_safe(self.myTextField)<br/></code></pre><br/><br/><p>Then in the template you would have to use: </p><br/><br/><pre><code>{{instance.display_mySafeField}}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.python.org/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> is your dear, dear friend:</p><br/><br/><pre><code>import itertools<br/><br/>dates = [<br/>   (1,'2009-01-01 10:15:23'),<br/>   (2,'2009-01-01 13:21:29'),<br/>   (3,'2009-01-02 01:03:13'),<br/>   (4,'2009-01-03 12:20:19'),<br/>   (5,'2009-01-03 13:01:06'),<br/>]<br/><br/>for key,group in itertools.groupby(dates, key=lambda x: x[1][:11]):<br/>   print key<br/>   for element in group:<br/>      print '   ', element<br/></code></pre><br/><br/><p>The above code prints the following:</p><br/><br/><pre><code>2009-01-01 <br/>    (1, '2009-01-01 10:15:23')<br/>    (2, '2009-01-01 13:21:29')<br/>2009-01-02 <br/>    (3, '2009-01-02 01:03:13')<br/>2009-01-03 <br/>    (4, '2009-01-03 12:20:19')<br/>    (5, '2009-01-03 13:01:06')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO POST SAV SIGNAL GIVE ME PRE SAV DATA
    </pattern>
    <template>
<![CDATA[<p>There's an open ticket for the issue you are facing <a href="http://code.djangoproject.com/ticket/5390">here</a>.  You could either keep an eye on that for when it makes it into a release, or you could try applying the patch that it provides and see if that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INDEX AND PRIMARI KEY IN SQL
    </pattern>
    <template>
<![CDATA[<p>Yes, you can assume it is a standard rule that RDBMSes require an index for the primary key.</p><br/><br/><p>Mainly, the database engine needs the index to enforces data uniqueness for the primary key, and to do this quickly requires an index. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENGIN MYSQL DATABAS TO CREAT DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Create a project, and point your settings @ your database</p><br/><br/><p>Then run</p><br/><br/><p><code>./manage.py inspectdb</code></p><br/><br/><p>This will print out a python models file for the DB you're pointing at</p><br/><br/><p>You can output this to a file by doing something like</p><br/><br/><p><code>./manage.py inspectdb &gt; models.py</code></p><br/><br/><p>And then you can move the file to the most suitable location, and edit it as needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + DJANGO SOCIAL NETWORK OPEN SOURC PROJECT
    </pattern>
    <template>
<![CDATA[<p>try this<br/><a href="http://pinaxproject.com/" rel="nofollow">pinax</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIFI WHICH MODEL MANAG DJANGO ADMIN SHOULD USE
    </pattern>
    <template>
<![CDATA[<p>You can choose the manager by overriding the <code>queryset</code> method in your ModelAdmin subclass.</p><br/><br/><pre><code>def queryset(self, request):<br/>    # use our manager, rather than the default one<br/>    qs = self.model.objects.get_query_set()<br/><br/>    # we need this from the superclass method<br/>    ordering = self.ordering or () # otherwise we might try to *None, which is bad ;)<br/>    if ordering:<br/>        qs = qs.order_by(*ordering)<br/>    return qs<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTR GTBFIELDID AND HOW TO AVOID AUTOCOMPLET BEHAVIOR
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>The <code>gtbfieldid</code> attribute is added dynamically by the Google Toolbar to the <code>&lt;input&gt;</code> and <code>&lt;select&gt;</code> tags that it thinks it can fill in for you.</p></li><br/><li><p>If you add the <code>autocomplete="off"</code> attribute to the <code>&lt;form&gt;</code> tag that contains them, then the Google Toolbar will not add these <code>gtbfielid</code> attributes, and its autofill functionality will not be available when filling out that form.  </p></li><br/></ol><br/><br/><p>Both of these attributes are non-standard XHTML, so your form will fail validation but if this autofill behavior is causing problems for your visitors, then adding the <code>autocomplete="off"</code> attribute is the only workaround to stop the Google Toolbar from manipulating your form elements and offering to try to fill it in for the user.</p><br/><br/><p>Here's how you'd set the autocomplete attribute (in django):</p><br/><br/><pre><code>class PagoDesde(forms.Form):<br/>    from django import forms as f<br/>    desde = f.DateField(input_formats=['%d/%m/%Y'],<br/>                        widget=forms.TextInput(attrs={'autocomplete': 'off'}))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIQU IN DJANGO MODEL AND ALSO INDEX A COLUMN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Regarding your first question:<br/>You should look at <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#unique-together" rel="nofollow">unique_together</a>.</p><br/><br/><pre><code>class Rating(models.Model):<br/>    content = models.OneToOneField(Content, primary_key=True)<br/>    ip =  models.CharField(max_length=200, blank=True)<br/>    rating = models.IntegerField(default=0)<br/><br/>    Class Meta:<br/>        unique_together= (('content', 'ip'),)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER PDF CONTAIN NON ASCII SYMBOL WITH PISA FROM DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>This does work for me:</p><br/><br/><pre><code>pdf = pisa.pisaDocument(StringIO.StringIO(html.encode("UTF-8")), result, encoding='UTF-8')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITI PARAMET TO DJANGO S MODELFORM INSTANC
    </pattern>
    <template>
<![CDATA[<p>Use the following method (hopefully it's clear enough):</p><br/><br/><pre><code>class BackupForm(ModelForm):<br/>    """Form for adding and editing backups."""<br/><br/>    def __init__(self, *args, **kwargs):<br/>        systemid = kwargs.pop('systemid')<br/>        super(BackupForm, self).__init__(*args, **kwargs)<br/>        self.fields['units'] = forms.ModelMultipleChoiceField(<br/>                required=False,<br/>                queryset=Unit.objects.filter(system__id=systemid),<br/>                widget=forms.SelectMultiple(attrs={'title': _("Add unit")}))<br/><br/>    class Meta:<br/>        model = Backup<br/>        exclude = ('system',)<br/></code></pre><br/><br/><p>Create forms like this:</p><br/><br/><pre><code>form_backup = BackupForm(request.POST,<br/>                         instance=Backup,<br/>                         systemid=system.id)<br/>form_backup = BackupForm(initial=form_backup_defaults,<br/>                         systemid=system.id)<br/></code></pre><br/><br/><p>Hope that helps! Let me know if you need me to explain more in depth.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF VERIF FAIL WHEN ATTEMPT TO UPLOAD A FILE OR CREAT A FOLDER WITH FILEBROWS FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>You are probably using the development version of Django, which includes quite a lot of extra CRSF security. However it's not released yet so external products probably aren't compatible. You should use the 1.1 version of Django instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE A DYNAM FORMSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are a few places in Django where "the reason why" is because that's how it was implemented for the Django admin app, and I believe this is one of them.  Thus the answer is they expect you to implement your own javascript.</p><br/><br/><p>See this SO question <a href="http://stackoverflow.com/questions/501719/dynamically-adding-a-form-to-a-django-formset-with-ajax">Dynamically adding a form...</a> for some more javascript ideas.</p><br/><br/><p>There are also two pluggable apps available, <a href="http://code.google.com/p/django-dynamic-formset/" rel="nofollow">django-dynamic-formset</a> and <a href="http://github.com/javisantana/django-dinamyc-form" rel="nofollow">django-dinamyc-form</a> which I hadn't seen until just now when looking up the first one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER A MANYTOMANYFIELD AS CHECKBOX
    </pattern>
    <template>
<![CDATA[<pre><code>class GameForm(forms.ModelForm): <br/>        name = forms.CharField(max_length=15, label='Name') <br/>        url = forms.URLField(label='URL', initial='http://') <br/>        cats = forms.ModelMultipleChoiceField(widget=forms.CheckboxSelectMultiple(),required=True)<br/>        class Meta: <br/>                model = Game <br/>                fields = ('name','url','cats')<br/></code></pre><br/><br/><p>that should fix your view, but i'm not sure about the admin. still looking... will edit if i find anything.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ORM DO AN ORDER BY ON A SPECIF VALU OF A COLUMN
    </pattern>
    <template>
<![CDATA[<pre><code>q = Ticket.objects.extra(select={'is_top': "status = 4"})<br/>q = q.extra(order_by = ['-is_top'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOOP DISPLAY AN UPDAT OBJECT COUNT EVERI FIVE SECOND
    </pattern>
    <template>
<![CDATA[<p>Because Python DB API is by default in AUTOCOMMIT=OFF mode, and (at least for MySQLdb) on REPEATABLE READ isolation level. This means that behind the scenes you have an ongoing database transaction (InnoDB is transactional engine) in which the first access to given row (or maybe even table, I'm not sure) fixes "view" of this resource for the remaining part of the transaction.</p><br/><br/><p>To prevent this behaviour, you have to 'refresh' current transaction:</p><br/><br/><pre><code>  from django.db import transaction<br/><br/><br/>  @transaction.autocommit  <br/>  def my_count():     <br/>      while True:<br/>          transaction.commit()<br/>          print "Number of Things: %d" % Thing.objects.count()<br/>          time.sleep(5)<br/></code></pre><br/><br/><p>-- note that the <a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/#django-db-transaction-autocommit" rel="nofollow">transaction.autocommit</a> decorator is only for entering transaction management mode (this could also be done manually using transaction.enter_transaction_management/leave_transaction_managemen functions).</p><br/><br/><p>One more thing - to be aware - Django's autocommit is not the same autocommit you have in database - it's completely independent. But this is out of scope for this question.</p><br/><br/><h2>Edited on 22/01/2012</h2><br/><br/><p><a href="http://stackoverflow.com/questions/2235318/how-do-i-deal-with-this-race-condition-in-django/2235624#2235624">Here</a> is a "twin answer" to a similar question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDIT FORM BASE ON ADD FORM
    </pattern>
    <template>
<![CDATA[<p>Are you extending your form from ModelForm?  If so, use the <code>instance</code> keyword argument.  Here we pass either an existing <code>instance</code> or a new one, depending on whether we're editing an existing article or adding a new one.  In both cases the <code>author</code> field is set on the instance, so <code>commit=False</code> is not required (note that I'm assuming only the author can edit their own articles, hence the HttpResponseForbidden exception):</p><br/><br/><pre><code>@login_required<br/>def edit(request, id=None, template_name='article_edit_template.html'):<br/>    if id:<br/>        article = get_object_or_404(Article, pk=id)<br/>        if article.author != request.user:<br/>            raise HttpResponseForbidden()<br/>    else:<br/>        article = Article(author=request.user)<br/><br/>    if request.POST:<br/>        form = ArticleForm(request.POST, instance=article)<br/>        if form.is_valid():<br/>            form.save()<br/><br/>            # If the save was successful, redirect to another page<br/>            redirect_url = reverse(article_save_success)<br/>            return HttpResponseRedirect(redirect_url)<br/><br/>    else:<br/>        form = ArticleForm(instance=article)<br/><br/>    return render_to_response(template_name, {<br/>        'form': form,<br/>    }, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>And in your <code>urls.py</code>:</p><br/><br/><pre><code>(r'^article/new/$', views.edit, {}, 'article_new'),<br/>(r'^article/edit/(?P&lt;id&gt;\d+)/$', views.edit, {}, 'article_edit'),<br/></code></pre><br/><br/><p>The same <code>edit</code> view is used for both adds and edits, but only the edit url pattern passes an id to the view.  To make this work well with your form you'll need to omit the <code>author</code> field from the form:</p><br/><br/><pre><code>class ArticleForm(forms.ModelForm):<br/>    class Meta:<br/>        model=Article<br/>        exclude=('author',)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VP OR SHARE HOST
    </pattern>
    <template>
<![CDATA[<p>I've been using Webfaction for shared hosting of Django.  The price is pretty decent, they have good forums, and have a nice web-based interface to help get you setup.  Despite the web interface, it doesn't impede you from having full control over your site form the command line. You can host all sorts of things, from Django to Rails, to PHP, and mysql.  For smaller sites, it works nicely.  I'm not sure how the performance works under high load, but you can always start small and upgrade to a vps.   I've never had direct contact with the support personel there, but the documentation seems good.  I don't mean for this to sound like a plug, but it's been pretty good for shared hosting.  If you have any questions about it, I'll be grad to answer. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLITE FOR DEV MYSQL FOR PROD
    </pattern>
    <template>
<![CDATA[<p>I'd highly recommend using the same database backend in production as in development, and all stages in between. Django will abstract the database stuff, but having different environments will leave you open to horrible internationalisation, configuration issues, and nasty tiny inconsistencies that won't even show up until you push it live.</p><br/><br/><p>Personally, I'd stick to mysql, but I never got on with postgres :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S META AN OLD STYL CLASS
    </pattern>
    <template>
<![CDATA[<p>I believe that there is no real reason (including history, since new-style classes exist since Python 2.2) and that not only can you choose to use a new-style class instead, but that it would probably be a good idea for you to do so (for all the usual reasons).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST RUNNER NOT FIND TEST
    </pattern>
    <template>
<![CDATA[<p>Worked it out.</p><br/><br/><p>It turns out I had done <code>django-admin.py startproject pyDietTracker</code> but not <code>python manage.py startapp myApp</code>.  After going back and doing this, it did work as documented.  It would appear I have a lot to learn about reading and the difference between a site and an app in Django.</p><br/><br/><p>Thank you for your help S.Lott and Emil Stenström.  I wish I could accept both your answers because they are both helped alot.</p><br/><br/><p>Most important lesson <strong>Tests only work at the app level not the site level</strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND SSL QUESTION
    </pattern>
    <template>
<![CDATA[<p>I have deployed Django apps on SSL using Apache's <code>mod_ssl</code> and <code>mod_wsgi</code>.</p><br/><br/><p>I am no Apache expert, but here's how I setup SSL for one site (put the directives below in the <code>httpd.conf</code> file, or in a file referenced from that file, for instance in the <code>sites-enabled</code> directory, if that is used in your Apache installation). See the first documentation link below for how to create and use a self-signed certificate.</p><br/><br/><pre><code>NameVirtualHost *:443<br/>&lt;VirtualHost *:443&gt;<br/>    SSLEngine On<br/>    SSLCertificateFile /etc/apache2/ssl/certificatefile.crt<br/>    SSLCertificateKeyFile /etc/apache2/ssl/certificatekeyfile.crt<br/><br/>    WSGIScriptAlias / /path/to/file.wsgi<br/>&lt;/VirtualHost&gt;<br/></code></pre><br/><br/><p>Documentation links:</p><br/><br/><ul><br/><li>Apache self signed certificate HOWTO: <a href="http://www.perturb.org/display/entry/754/">http://www.perturb.org/display/entry/754/</a></li><br/><li><a href="http://httpd.apache.org/docs/2.2/mod/mod_ssl.html">http://httpd.apache.org/docs/2.2/mod/mod_ssl.html</a></li><br/><li><a href="http://httpd.apache.org/docs/2.2/ssl/">http://httpd.apache.org/docs/2.2/ssl/</a></li><br/><li>Using mod_wsgi to host Django: <a href="http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/">http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM FIELD LOOKUP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Rather than creating a field lookup, best practice would be to create a manager method, that might look a little bit like this:</p><br/><br/><pre><code>class PersonManger(models.Manager):<br/>    def in_age_range(self, min, max):<br/>        return self.filter(age__gte=min, age__lt=max)<br/><br/>class Person(models.Model):<br/>    age = #...<br/><br/>    objects = PersonManager()<br/></code></pre><br/><br/><p>then usage would be like so:</p><br/><br/><pre><code>twentysomethings = Person.objects.in_age_range(20, 30)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RGUMENT TO A DYNAM FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Add it as keyword argument, say it's called my_arg.</p><br/><br/><pre><code>class DynamicForm(Form):<br/>  def __init__(self, *args, **kwargs):<br/>    my_arg = kwargs.pop('my_arg')<br/>    super(DynamicForm, self).__init__(*args, **kwargs)<br/>    for item in range(5):<br/>        self.fields['test_field_%d' % item] = CharField(max_length=255)<br/></code></pre><br/><br/><p>And when you create form it's like this:</p><br/><br/><pre><code>form = DynamicForm(..., my_arg='value')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CONTEXT PROCESSOR
    </pattern>
    <template>
<![CDATA[<p>When you specify this:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = ('myapp.processor.foos',)<br/></code></pre><br/><br/><p>In your settings file, you are overriding the <a href="http://docs.djangoproject.com/en/1.1/ref/settings/#template-context-processors" rel="nofollow">default context processors</a> that you had before.  You need to include the old ones in your settings:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    "django.core.context_processors.auth",<br/>    "django.core.context_processors.debug",<br/>    "django.core.context_processors.i18n",<br/>    "django.core.context_processors.media",<br/>    "myapp.processor.foos",<br/>)<br/></code></pre><br/><br/><p>Note, the settings above are the defaults (plus your processor) for django 1.1.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL DJANGO WEBSERV FROM OUTSID WORLD
    </pattern>
    <template>
<![CDATA[<p>You have to run the development server such that it <a href="http://docs.djangoproject.com/en/dev/ref/django-admin/#runserver-port-or-ipaddr-port" rel="nofollow">listens on the interface</a> to your network.</p><br/><br/><p>E.g.</p><br/><br/><pre><code>python manage.py runserver 0.0.0.0:8000<br/></code></pre><br/><br/><p>listens on <strong>every</strong> interface on port 8000.</p><br/><br/><p>It doesn't matter whether you access the webserver with the IP or the hostname. I guess you are still in your own LAN.<br><br/>If you really want to access the server from outside, you also have to configure your router to forward port e.g. <code>8000</code> to your server.</p><br/><br/><p><strong>Update:</strong> Check your firewall on your server whether incoming connections to the port in use are allowed!</p><br/><br/><p>Assuming you can access your Apache server from the outside successfully, you can also try this:</p><br/><br/><ul><br/><li>Stop the Apache server, so that port <code>80</code> is free.</li><br/><li>Start the development server with <code>sudo python manage.py runserver 0.0.0.0:80</code></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN THE RESULT OF A DJANGO FORM POST REQUEST
    </pattern>
    <template>
<![CDATA[<p>If you want to access the store data in later request, you would have to store it somewhere. Django provides several ways to archive this:</p><br/><br/><p><strong>1) You can use <a href="http://docs.djangoproject.com/en/dev/topics/http/sessions/" rel="nofollow">sessions</a> to store the query:</strong> Every visitor who visits your site will get an empty session object and you can store whatever you want inside this object, which acts like a dict. Drawback: A single visitor can't do multiple searches with pagination concurrently.</p><br/><br/><p><strong>2) Use cookies:</strong> If you set a cookie which is stored on the client side, the browser will append the data of the cookie to each request where you can access it. Cookies are more server friendly, because you don't need a session manager for them on the server, but the data stored in cookies is visible (and editable) to the client. Drawback: same as before.</p><br/><br/><p><strong>3) Use hidden fields:</strong> You can add a form with some hidden fields on your search-result page and store the query inside them. Then, the client will resend the query whenever you submit the form. Drawback: You must use a form with submit buttons for the pagination on your page (simple links wont work).</p><br/><br/><p><strong>4) Create Links which contain the query:</strong> Instead of using POST, you can also use GET. For example, you could have a link like <code>"/search/hello+world/?order=votes"</code> and "paginated links" like <code>"/search/hello+world/2/?order-votes"</code>. Then the query can be easily retrieved from the URL. Drawback: The maximum amount of data you can send via GET is limited (But that shouldn't be a problem for a simple search).</p><br/><br/><p><strong>5) Use a combination:</strong> You might want to store all the data in a session or a database and access them via a generated key which you can put in the URL. URLs might then look like "<code>/search/029af239ccd23/2"</code> (for the 2nd page) and you can use the key to access a huge amount of data which you have stored before. This eliminates the drawback of solution 1 as well as that of solution 4. New drawback: much work :)</p><br/><br/><p><strong>6) Use AJAX:</strong> With ajax you can store the data inside some js-variables on the client side, which can then passed to the other requests. And since ajax will only update your result list, the variables aren't getting lost.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COUNT RAWQUERYSET
    </pattern>
    <template>
<![CDATA[<p>Use the 'len()' function. This would give:</p><br/><br/><pre><code>query = "SELECT *, ((ACOS(SIN(%s * PI() / 180) * SIN(lat * PI() / 180) + COS(%s * PI() / 180) * COS(lat * PI() / 180) * COS((%s - lon) * PI() / 180)) * 180 / PI()) * 60 * 1.1515) AS distance FROM app_car WHERE price BETWEEN %s AND %s HAVING distance&lt;=%s ORDER BY distance ASC"<br/><br/>cars = Car.objects.raw(query, [lat, lat, lon, min_price, max_price, miles])<br/><br/>return HttpResponse(len(list(cars))<br/></code></pre><br/><br/><p>Aside: there's some useful information on the Django 1.2 Model.objects.raw() method at: <a href="http://djangoadvent.com/1.2/smoothing-curve/">http://djangoadvent.com/1.2/smoothing-curve/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORK WITH MULTIPL FORM
    </pattern>
    <template>
<![CDATA[<p>Use the <code>prefix</code> kwarg</p><br/><br/><p>You can declare your form as:</p><br/><br/><pre><code>form = MyFormClass(prefix='some_prefix')<br/></code></pre><br/><br/><p>and then, as long as the prefix is the same, process data as:</p><br/><br/><pre><code>form = MyFormClass(request.POST, prefix='some_prefix')<br/></code></pre><br/><br/><p>Django will handle the rest.</p><br/><br/><p>This way you can have as many forms of the same type as you want on the page</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET DJANGO APP TO WORK WITH MOD WSGI ON CENTO 5
    </pattern>
    <template>
<![CDATA[<p><code>SystemError: dynamic module not initialized properly</code> is the exception that is thrown when a dll (or .so) that is being loaded cannot be properly initialized. In function <code>_PyImport_LoadDynamicModule</code> of <code>Python/importdl.c</code> in case anyone is interested.</p><br/><br/><p>Now, the dll/so in question (the <em>dynamic module</em> in Python parliance) is <code>_functools.so</code> which is part of Python standard library. I see that it is being loaded from /opt/python2.6 so we know that this is not the system python. My guess is that this is not the python against which mod_wsgi was compiled. To check whether this is the case run <code>ldd mod_wsgi.so</code> and look at what <code>libpython</code> is returned.</p><br/><br/><p>Therefore my suggestion is either to recompile mod_wsgi againast the interpreter in /opt/python2.6 by running in the wsgi_mod source directory</p><br/><br/><pre><code>./configure --with-python=/opt/python2.6/bin/python2.6<br/></code></pre><br/><br/><p>or make sure that <code>sys.prefix</code> points to the python installation that mod_wsgi expects by setting its value with the <code>WSGIPythonHome</code> directory.</p><br/><br/><p><strong>UPDATE after ldd output</strong></p><br/><br/><p>The second line in the ldd output shows that mod_wsgi loads the pythonlib in <code>/usr/lib</code> instead of <code>/opt/python2.6</code>. To instruct mod_wsgi to load that in <code>/opt/python2.6</code> you should probably prepend it to the <code>LD_LIBRARY_PATH</code> envirnoment variable.</p><br/><br/><p>Try it first on the command line:</p><br/><br/><pre><code>LD_LIBRARY_PATH=/opt/python2.6/lib:$LD_LIBRARY_PATH ldd mod_wsgi.so<br/></code></pre><br/><br/><p>and then make sure that the correct LD_LIBRARY_PATH is specified in the script that starts Apache.</p><br/><br/><p><strong>Yet another update</strong></p><br/><br/><p>You'll have to debug your mod_wsgi configuration. Just try with the following <code>.wsgi</code> file in place of yours and tell us what you get:</p><br/><br/><pre><code>def application(environ, start_response):<br/>    status = '200 OK'<br/>    start_response(status, [('Content-type', 'text/plain')])<br/><br/>    try:<br/>        import sys<br/>        return ['\n'.join([sys.prefix, sys.executable])]<br/>    except:<br/>        import traceback as tb<br/>        return [tb.format_exc()]<br/></code></pre><br/><br/><p>If what you get is not '/opt/python2.6', try with the option</p><br/><br/><pre><code>WSGIPythonHome /opt/python2.6<br/></code></pre><br/><br/><p>See also <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK FOR IMPLEMENT REST WEB SERVIC IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Indeed, you can roll your own, but there's a lot of boilerplate involved.</p><br/><br/><p><a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a> is an exceptionally easy to use, and extensible, micro-framework.  In addition to mocking up all the necessary views and url patterns, it supports directly mapping models to a REST interface, which is nice if you have a simple use case.  I'd suggest looking into it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEST POSSIBL PAYMENT GATEWAY TO IMPLEMENT ( USE DJANGO )
    </pattern>
    <template>
<![CDATA[<p><a href="http://bit.ly/braintree" rel="nofollow">Braintree</a> is about to release a Python client library that could give you the quick integration that you're looking for. Here are the tests for the Transaction class to give you an idea of what it's like: <a href="http://pastie.org/private/qdb4q5db3328gpp4apaw8w" rel="nofollow">http://pastie.org/private/qdb4q5db3328gpp4apaw8w</a> . We're planning to release it on Friday.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PPROPRO IT USE DJANGO SIGNAL WITHIN THE SAME APP
    </pattern>
    <template>
<![CDATA[<p>I think it's a good idea. The <a href="http://djangocon.blip.tv/file/3068413/" rel="nofollow">"Custom Signals for Uncoupled Design" talk</a> from the most recent DjangoCon is a great resource of what is possible and appropriate with signals in Django. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GRAPH API AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>since it looks to me as something simple as calling an URL and deserializing the result (JSON), this should be only a few lines:</p><br/><br/><pre><code>from urllib2 import urlopen<br/>from simplejson import loads<br/>content = loads(urlopen('http://graph.facebook.com/2439131959').read())<br/></code></pre><br/><br/><p><strong>content</strong> is now a dictionary with all the info:</p><br/><br/><pre><code>{'category': u'Just for fun',<br/> 'description': "Graffiti lets you draw on your friends' profiles.",<br/> 'id': '2439131959',<br/> 'name': 'Graffiti'}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BIGINTEG AUTO INCR FIELD AS PRIMARI KEY
    </pattern>
    <template>
<![CDATA[<p>You could alter the table afterwards. That may be a better solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MESSAG STACKOVERFLOW STYLE
    </pattern>
    <template>
<![CDATA[<p>In your case <code>django.contrib.messages</code> won't bring you anywhere good. It's a message system inspired by RoR flash system, where messages aren't supposed to stay around</p><br/><br/><p>You should create your own messaging system (django-persistent-messages maybe?) that would save messages for registered users in database.</p><br/><br/><ul><br/><li>It's a fairly trivial task to implement </li><br/><li>a model with a foreign key on User</li><br/><li>a context processor to have the messages available in the templates</li><br/><li>a view to consume a message</li><br/><li>maybe a helper function to create the messages</li><br/></ul><br/><br/><p>Don't forget to make it available to others if you do so =)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.2 EQUIVAL OF QUERYSET.QUERY.AS SQL ( )
    </pattern>
    <template>
<![CDATA[<p>In Django 1.1, <code>QuerySet.query</code> returned a <code>BaseQuery</code> object, now it returns a <code>Query</code> objects. The query object has a <code>__str__</code> method defined that returns the SQL.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECUR OUTPUT FILTER FAIL TO READ BUCKET ( RC 104 ) CONNECT RESET BY PEER
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.modsecurity.org/documentation/modsecurity-apache/1.9.3/html-multipage/04-rules.html" rel="nofollow">Output filtering</a> is a way for an administrator to check all text that go through Apache for a specific set a strings, and then block those requests. </p><br/><br/><p>You have two options:</p><br/><br/><ol><br/><li>Look at the mod_security filter rules inside your apache config.</li><br/><li>Remove half of your text from your output, and see if it works or not. If it did, the problem string is inside that block of text. Repeat with smaller and smaller chunks of text until you have found the offending string.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELERY DJANGO CA N T FIND SET
    </pattern>
    <template>
<![CDATA[<p>Apparently this is a problem with <a href="http://groups.google.com/group/celery-users/browse_thread/thread/43a95be6865a636/d91ab2492885f3d4?lnk=gst&amp;q=settings#d91ab2492885f3d4" rel="nofollow">running Celery on Windows</a>.  Using the <em>--settings</em> argument ala <code>python manage.py celeryd start --settings=settings</code> did the trick.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM INTERNATIONALIS SYSTEM TO USE IN DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>I agree with S.Lott in that you will want to think about what you need from internationalization. However, this is a very good run-down of all of the mentioned packages:</p><br/><br/><p><a href="http://www.muhuk.com/2010/01/dynamic-translation-apps-for-django/" rel="nofollow">http://www.muhuk.com/2010/01/dynamic-translation-apps-for-django/</a></p><br/><br/><p>My personal pick thus far is "none of the above". I am currently prototyping with datatrans: </p><br/><br/><p><a href="http://github.com/citylive/django-datatrans" rel="nofollow">http://github.com/citylive/django-datatrans</a></p><br/><br/><p><a href="http://www.botondus.com/dynamic-translation-with-django-datatrans/" rel="nofollow">http://www.botondus.com/dynamic-translation-with-django-datatrans/</a></p><br/><br/><p>But I may yet choose another solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF RUN SHELL COMMAND FROM A WEB BASE INTERFAC
    </pattern>
    <template>
<![CDATA[<p>So, I've tried to answer my own question with code as I couldn't find anything to quite fit the bill. Hopefully it's useful to anyone coming across the same problem.</p><br/><br/><p>Redbeard 0X0A pointed me in the general direction, I was able to get a stand along ruby script doing what I wanted using popen. Extending this to using EventMachine (as it provided a convenient way of writing a websocket server) and using it's inbuilt popen method solved my problem.</p><br/><br/><p>More details here <a href="http://morethanseven.net/2010/09/09/Script-running-web-interface-with-websockets.html" rel="nofollow">http://morethanseven.net/2010/09/09/Script-running-web-interface-with-websockets.html</a> and the code at <a href="http://github.com/garethr/bolt/" rel="nofollow">http://github.com/garethr/bolt/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX UPLOAD OUTSID OF A FORM
    </pattern>
    <template>
<![CDATA[<p>Well I found two solutions if anyone is interested.</p><br/><br/><p>The first is a pure-Python way of doing it that is moderately successful.  </p><br/><br/><pre><code>with BufferedReader( BytesIO( request.raw_post_data ) ) as stream:<br/>  with BufferedWriter( FileIO( "/tmp/foo.bar", "wb" ) ) as destination:<br/>    foo = stream.read( 1024 )<br/>    while foo:<br/>      destination.write( foo )<br/>      foo = stream.read( 1024 )<br/></code></pre><br/><br/><p>It worked on testing for small files (up to 20MB) but failed when I tried it with ISOs (~600MB) or larger files.  I didn't try anything between the 20MB and 600MB so not sure where the break point is.  I've copied the bottom of the trace below, I'm not sure what the root problem is in this situation.  There seemed to be a struggle with memory, but I had enough RAM+swap to hold the file three times over so not sure why there was an issue.  Not sure if using other forms of Python read/write or not using buffers would help here.</p><br/><br/><pre><code>[error] [client 127.0.0.1]   File "/usr/local/lib/python2.6 /dist-packages/django/core/handlers/wsgi.py", line 69, in safe_copyfileobj, referer: http://localhost/project/<br/>[error] [client 127.0.0.1]     buf = fsrc.read(min(length, size)), referer: http://localhost/project/<br/>[error] [client 127.0.0.1] TemplateSyntaxError: Caught IOError while rendering: request data read error, referer: http://localhost/project/<br/></code></pre><br/><br/><p>The solution that has worked with everything I've thrown at it, up to 2GB files at least, required Django 1.3.  They have added file-like support for reading directly from HttpRequest so I took advantage of that.</p><br/><br/><pre><code>with BufferedWriter( FileIO( "/tmp/foo.bar", "wb" ) ) as destination:<br/>  foo = request.read( 1024 )<br/>  while foo:<br/>    destination.write( foo )<br/>    foo = request.read( 1024 ) <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      API FOR DJANGO PROJECTS APP
    </pattern>
    <template>
<![CDATA[<p>I'm most familiar with django-piston, so I would naturally steer you in that direction.</p><br/><br/><p>A quick glance at the other two, though, indicates that django-rest-interface does nothing more than expose models as resources, and that django-restful-resources is some guy's one-off attempt at the same.</p><br/><br/><p>Piston, if I recall correctly, grew out of <a href="http://bitbucket.org/" rel="nofollow">bitbucket.org</a>'s own site development, and allows a lot of flexibility - you can return almost any object from your resource's access methods, not just model instances, and it will be properly encoded.  It also has built-in support for some nice features, like form validation (if you can get it to work right, anyway) and request throttling, among other things.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDECODEERROR ASCII CODEC CA N T DECOD BYTE 0XE0 IN POSIT 0 ORDIN NOT IN RANG ( 128 )
    </pattern>
    <template>
<![CDATA[<p>This is a bug in <code>mimetypes</code>, triggered by bad data in the registry. (<code>рєфшю/AMR</code> is not at all a valid MIME media type.)</p><br/><br/><p><code>ctype</code> is a registry key name returned by <code>_winreg.EnumKey</code>, which <code>mimetypes</code> is expecting to be a Unicode string, but it isn't. Unlike <code>_winreg.QueryValueEx</code>, <code>EnumKey</code> returns a byte string (direct from the ANSI version of the Windows API; <code>_winreg</code> in Python 2 doesn't use the Unicode interfaces even though it returns Unicode strings, so it'll never read non-ANSI characters correctly).</p><br/><br/><p>So the attempt to <code>.encode</code> it fails with a Unicode<strong>Decode</strong>Error trying to get a Unicode string before encoding it back to ASCII!</p><br/><br/><pre><code>try:<br/>    ctype = ctype.encode(default_encoding) # omit in 3.x!<br/>except UnicodeEncodeError:<br/>    pass<br/></code></pre><br/><br/><p>These lines in <code>mimetypes</code> should simply be removed.</p><br/><br/><p>ETA: <a href="http://bugs.python.org/issue10490" rel="nofollow">added to bug tracker</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME BACKENDS.DEFAULT.URL
    </pattern>
    <template>
<![CDATA[<p>Is the registration module in your <code>PYTHONPATH</code>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S MODEL.SAV ( ) CALL FULL CLEAN
    </pattern>
    <template>
<![CDATA[<p>AFAIK, this is because of backwards compatibility. There are also problems with ModelForms with excluded fields, models with default values, pre_save() signals, etc.</p><br/><br/><p>Sources you might be intrested in:</p><br/><br/><ul><br/><li><a href="http://code.djangoproject.com/ticket/13100">http://code.djangoproject.com/ticket/13100</a></li><br/><li><a href="http://groups.google.com/group/django-developers/browse_frm/thread/b888734b05878f87">http://groups.google.com/group/django-developers/browse_frm/thread/b888734b05878f87</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ODD INTEGRITYERROR ON MYSQL # 1452
    </pattern>
    <template>
<![CDATA[<p>I'm not exactly sure why it happened, but I did seem to find a solution. I'm using South to manage the DB; it created Messages as InnoDB and AffiliateLead as MyISAM. Changing the AffiliateLead table to InnoDB ended the IntegrityErrors. Hope this helps someone else.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL SET
    </pattern>
    <template>
<![CDATA[<p>You can't just add local_settings.py, you have to explicity import it.</p><br/><br/><p>At the <em>very end</em> of your settings.py, add this:</p><br/><br/><pre><code>try:<br/>    from local_settings import *<br/>except ImportError:<br/>    pass<br/></code></pre><br/><br/><p>The try/except block is there so that Python just ignores the case when you haven't actually defined a local_settings file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET THE FIRST OBJECT FROM A QUERYSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>r = list(qs[:1])<br/>if r:<br/>  return r[0]<br/>return None<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT IS THE DIFFER BETWEEN RENDER ( ) RENDER TO RESPONS ( ) AND DIRECT TO TEMPL ( )
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render">http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render</a></p><br/><br/><pre><code>render(request, template[, dictionary][, context_instance][, content_type][, status][, current_app])<br/></code></pre><br/><br/><p><code>render()</code> is a brand spanking new shortcut for <code>render_to_response</code> in the development version that will automatically use <code>RequestContext</code> that I will most definitely be using in the next release.</p><br/><br/><hr><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render">http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render</a></p><br/><br/><pre><code>render_to_response(template[, dictionary][, context_instance][, mimetype])¶<br/></code></pre><br/><br/><p><code>render_to_response</code> is your standard render function used in the tutorials and such. To use <code>RequestContext</code> you'd have to specify <code>context_instance=RequestContext(request)</code></p><br/><br/><hr><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-direct-to-template">http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-direct-to-template</a></p><br/><br/><p><code>direct_to_template</code> is a generic view that I use in my views (as opposed to in my urls) because like the new <code>render()</code> function, it automatically uses <code>RequestContext</code> and all its <code>context_processor</code>s.</p><br/><br/><p>I'm happy I haven't typed <code>RequestContext</code> in a long, long time. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A CSV FILE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Here's some simple code that'll stream a CSV; you can probably go from this to whatever you need to do:</p><br/><br/><pre><code>import cStringIO as StringIO<br/>import csv<br/><br/>def csv(request):<br/>    def data():<br/>        for i in xrange(10):<br/>            csvfile = StringIO.StringIO()<br/>            csvwriter = csv.writer(csvfile)<br/>            csvwriter.writerow([i,"a","b","c"])<br/>            yield csvfile.getvalue()<br/><br/>    response = HttpResponse(data(), mimetype="text/csv")<br/>    response["Content-Disposition"] = "attachment; filename=test.csv"<br/>    return response<br/></code></pre><br/><br/><p>This simply writes each row to an in-memory file, reads the row and yields it.</p><br/><br/><p>This version is more efficient for generating bulk data, but be sure to understand the above before using it:</p><br/><br/><pre><code>import cStringIO as StringIO<br/>import csv<br/><br/>def csv(request):<br/>    csvfile = StringIO.StringIO()<br/>    csvwriter = csv.writer(csvfile)<br/><br/>    def read_and_flush():<br/>        csvfile.seek(0)<br/>        data = csvfile.read()<br/>        csvfile.seek(0)<br/>        csvfile.truncate()<br/>        return data<br/><br/>    def data():<br/>        for i in xrange(10):<br/>            csvwriter.writerow([i,"a","b","c"])<br/>        data = read_and_flush()<br/>        yield data<br/><br/>    response = HttpResponse(data(), mimetype="text/csv")<br/>    response["Content-Disposition"] = "attachment; filename=test.csv"<br/>    return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STOP DJANGO FROM CREAT .PYC FILE WHILST IN DEVELOP
    </pattern>
    <template>
<![CDATA[<p>You can use this, where applicable:</p><br/><br/><pre><code>import sys<br/><br/>sys.dont_write_bytecode = True<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMEZONE AWAR DATETIM TO LOCAL TIME IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>In general, to convert an arbitrary timezone-aware datetime to a naive (local) datetime, I'd use the <code>pytz</code> module and <code>astimezone</code> to convert to local time, and <code>replace</code> to make the datetime naive:</p><br/><br/><pre><code>In [76]: import pytz<br/><br/>In [77]: est=pytz.timezone('US/Eastern')<br/><br/>In [78]: d.astimezone(est)<br/>Out[78]: datetime.datetime(2010, 10, 30, 13, 21, 12, tzinfo=&lt;DstTzInfo 'US/Eastern' EDT-1 day, 20:00:00 DST&gt;)<br/><br/>In [79]: d.astimezone(est).replace(tzinfo=None)<br/>Out[79]: datetime.datetime(2010, 10, 30, 13, 21, 12)<br/></code></pre><br/><br/><p>But since your particular datetime seems to be in the UTC timezone, you could do this instead:</p><br/><br/><pre><code>In [65]: d<br/>Out[65]: datetime.datetime(2010, 10, 30, 17, 21, 12, tzinfo=tzutc())<br/><br/>In [66]: import datetime<br/><br/>In [67]: import calendar<br/><br/>In [68]: datetime.datetime.fromtimestamp(calendar.timegm(d.timetuple()))<br/>Out[68]: datetime.datetime(2010, 10, 30, 13, 21, 12)<br/></code></pre><br/><br/><hr><br/><br/><p>By the way, you might be better off storing the datetimes as naive UTC datetimes instead of naive local datetimes. That way, your data is local-time agnostic, and you only convert to local-time or any other timezone when necessary. Sort of analogous to working in unicode as much as possible, and encoding only when necessary.</p><br/><br/><p>So if you agree that storing the datetimes in naive UTC is the best way, then all you'd need to do is define:</p><br/><br/><pre><code>local_d = d.replace(tzinfo=None)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUCH TABL ERROR WHEN RUN A DJANGO SERVER FROM ECLIPS
    </pattern>
    <template>
<![CDATA[<p>Probably Eclipse/PyDev is not able to find the database. Assuming that you use a sqlite3 database, use a full path in the DATABASES settings. Test it via the console and afterwards within Eclipse. That should work ;-)</p><br/><br/><p>edit:<br/>As photioionized suggested, the best approach is to put those lines in settings.py</p><br/><br/><pre><code>import os<br/>PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))<br/></code></pre><br/><br/><p>and then to</p><br/><br/><pre><code>SQLITE_3 = os.path.join(PROJECT_PATH, 'YOUR DATABASE.DB')<br/></code></pre><br/><br/><p>SQLITE_3 is now the full path to your sqlite3 database, whereever your django project lives.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DJANGO VIEW CODE
    </pattern>
    <template>
<![CDATA[<p>I originally tried to replicate the behaviour of your signup process using django.contrib.formtools.wizard, but it was becoming far too complicated, considering there are only two steps in your process, and one of them is simply selecting an image. I would highly advise looking at a form-wizard solution if you intend to keep the multi-step signup process though. It will mean the infrastructure takes care of carrying state across requests, and all you need to do is define a series of forms.</p><br/><br/><p>Anyway, I've opted to simplify your whole process to one step. Using a basic model form, we are able to simply capture ALL of the UserProfile information you need on one page, with very very little code.</p><br/><br/><p>I've also gone with class-based-views, introduced in Django 1.3. It makes boilerplate code (such as your check at the top of each function for what process you're up to) much nicer to manage, at the cost of more upfront complexity. Once you understand them though, they are fantastic for a lot of use cases. Ok, so; on to the code.</p><br/><br/><pre><code># in models.py<br/><br/>graduation_choices = ([(x,str(x)) for x in range(1970,2015)])<br/>graduation_choices.reverse()<br/><br/>class UserProfile(models.Model):<br/>    # usually you want null=True if blank=True. blank allows empty forms in admin, but will <br/>    # get a database error when trying to save the instance, because null is not allowed<br/>    user = models.OneToOneField(User)       # OneToOneField is more explicit<br/>    network = models.ForeignKey(Network)<br/>    location = models.CharField(max_length=100, blank=True, null=True)<br/>    graduation = models.CharField(max_length=100, blank=True, null=True, choices=graduation_choices)<br/>    headline = models.CharField(max_length=100, blank=True, null=True)<br/>    positions = models.ManyToManyField(Position, blank=True)<br/>    avatar = models.ImageField(upload_to='images/%Y/%m/%d', blank=True, null=True)<br/><br/>    def get_avatar_path(self):<br/>        if self.avatar is None:<br/>            return 'images/default_profile_picture.jpg'<br/>        return self.avatar.name<br/><br/>    def is_complete(self):<br/>        """ Determine if getting started is complete without requiring a field. Change this method appropriately """<br/>        if self.location is None and self.graduation is None and self.headline is None:<br/>            return False<br/>        return True<br/></code></pre><br/><br/><p>I stole <a href="http://stackoverflow.com/questions/6245755/improving-python-django-view-code/6246043#6246043">a piece of this answer</a> for handling the default image location as it was very good advice. Leave the 'which picture to render' up to the template and the model. Also, define a method on the model which can answer the 'completed?' question, rather than defining another field if possible. Makes the process easier.</p><br/><br/><pre><code># forms.py<br/><br/>class UserProfileForm(forms.ModelForm):<br/>    class Meta:<br/>        model = UserProfile<br/>        widgets = {<br/>            'user': forms.HiddenInput() # initial data MUST be used to assign this<br/>        }<br/></code></pre><br/><br/><p>A simple ModelForm based on the UserProfile object. This will ensure that all fields of the model are exposed to a form, and everything can be saved atomically. This is how I've mainly deviated from your method. Instead of using several forms, just one will do. I think this is a nicer user experience also, especially since there aren't very many fields at all. You can also reuse this exact form for when a user wants to modify their information.</p><br/><br/><pre><code># in views.py - using class based views available from django 1.3 onward<br/><br/>class SignupMixin(View):<br/>    """ If included within another view, will validate the user has completed <br/>    the getting started page, and redirects to the profile page if incomplete<br/>    """<br/>    def dispatch(self, request, *args, **kwargs):<br/>        user = request.user<br/>        if user.is_authenticated() and not user.get_profile().is_complete()<br/>            return HttpResponseRedirect('/profile/')<br/>        return super(SignupMixin, self).dispatch(request, *args, **kwargs)<br/><br/>class CheckEmailMixin(View):<br/>    """ If included within another view, will validate the user is active,<br/>    and will redirect to the re-send confirmation email URL if not.<br/><br/>    """<br/>    def dispatch(self, request, *args, **kwargs):<br/>        user = request.user<br/>        if user.is_authenticated() and not user.is_active<br/>            return HttpResponseRedirect('/confirm/')<br/>        return super(CheckEmailMixin, self).dispatch(request, *args, **kwargs)<br/><br/>class UserProfileFormView(FormView, ModelFormMixin):<br/>    """ Responsible for displaying and validating that the form was <br/>    saved successfully. Notice that it sets the User automatically within the form """<br/><br/>    form_class = UserProfileForm<br/>    template_name = 'registration/profile.html' # whatever your template is...<br/>    success_url = '/home/'<br/><br/>    def get_initial(self):<br/>        return { 'user': self.request.user }<br/><br/>class HomeView(TemplateView, SignupMixin, CheckEmailMixin):<br/>    """ Simply displays a template, but will redirect to /profile/ or /confirm/<br/>    if the user hasn't completed their profile or confirmed their address """<br/>    template_name = 'home/index.html'<br/></code></pre><br/><br/><p>These views will probably be the most complicated part, but I feel are much easier to understand than reams of spaghetti view function code. I've documented the functions briefly inline, so it should make it slightly easier to understand. The only thing left is to wire up your URLs to these view classes.</p><br/><br/><pre><code># urls.py<br/><br/>urlpatterns = patterns('',<br/><br/>    url(r'^home/$', HomeView.as_view(), name='home'),<br/>    url(r'^profile/$', UserProfileFormView.as_view(), name='profile'),<br/>    url(r'^confirm/$', HomeView.as_view(template_name='checkemail.html'), name='checkemail'),<br/>)<br/></code></pre><br/><br/><p>Now this is all untested code, so it may need tweaks to get working, and to integrate into your particular site. Also, it completely departs from your multi-step process. The multi-step process would be nice in the case of many many many fields.. but a separate page JUST to do the avatar seems a bit extreme to me. Hopefully, whichever way you go, this helps.</p><br/><br/><p>Some links regarding class based views:</p><br/><br/><p><a href="https://docs.djangoproject.com/en/1.3/ref/class-based-views/" rel="nofollow">API Reference</a><br><br/><a href="https://docs.djangoproject.com/en/1.3/topics/class-based-views/" rel="nofollow">Topic Introduction</a></p><br/><br/><p>I also wanted to mention a few things about your code in general. For instance you have this:</p><br/><br/><pre><code>populate_positions = []<br/>for position in positions:<br/>    populate_positions.append(Position.objects.get(label=position))<br/></code></pre><br/><br/><p>Which could be replaced with this:</p><br/><br/><pre><code>populate_positions = Position.objects.filter(label__in=positions)<br/></code></pre><br/><br/><p>The former will hit the DB for every position. The latter will do a single query when evaluated.</p><br/><br/><p>Also;</p><br/><br/><pre><code>if request.user.is_authenticated():<br/>    username = request.user.username                      <br/>    user = User.objects.get(email=username)<br/></code></pre><br/><br/><p>The above is redundant. You've got access to the user object already, and then trying to fetch it again.</p><br/><br/><pre><code>user = request.user<br/></code></pre><br/><br/><p>Done.</p><br/><br/><p>By the way, if you want to use email addresses as a username, you will have problems. The database will only accept a maximum of 30 characters (it is how the User model is writtin in contrib.auth). Read some of them comments on <a href="http://justcramer.com/2008/08/23/logging-in-with-email-addresses-in-django/" rel="nofollow">this thread</a> that discuss some of the pitfalls.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THAT USER ALREADI AUTHENT FROM TASTYPI
    </pattern>
    <template>
<![CDATA[<p>I have this solution so far:</p><br/><br/><pre><code>class MyBasicAuthentication(BasicAuthentication):<br/>    def __init__(self, *args, **kwargs):<br/>        super(MyBasicAuthentication, self).__init__(*args, **kwargs)<br/><br/>    def is_authenticated(self, request, **kwargs):<br/>        from django.contrib.sessions.models import Session<br/>        if 'sessionid' in request.COOKIES:<br/>            s = Session.objects.get(pk=request.COOKIES['sessionid'])<br/>            if '_auth_user_id' in s.get_decoded():<br/>                u = User.objects.get(id=s.get_decoded()['_auth_user_id'])<br/>                request.user = u<br/>                return True<br/>        return super(MyBasicAuthentication, self).is_authenticated(request, **kwargs)<br/></code></pre><br/><br/><p>which seems to do what I want. If user is logged on, then session contains <code>_auth_user_id</code>, if not, the key is missing.</p><br/><br/><p>Anyone can think of any problems this approach may cause?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF MORE THAN ONE OF THREE THING IS TRUE RETURN FALS
    </pattern>
    <template>
<![CDATA[<p>One thing I've done in similar situations is this:</p><br/><br/><pre><code>coupon_types = (self.months, self.dollars, self.lifetime,)<br/><br/>true_count =  sum([1 for ct in coupon_types if ct])<br/>if true_count &gt; 1:<br/>    raise ValueError("Coupon can be valid for only one of: months, lifetime, or dollars")  <br/></code></pre><br/><br/><p>It's now much easier to add new coupon types to check for in the future!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK FOR DJANGO + CELERI + RABBITMQ
    </pattern>
    <template>
<![CDATA[<p>Well not a book but I recently did setup in Dotcloud for Django+Celery, and here's the short doc:<br/><a href="http://docs.dotcloud.com/tutorials/python/django-celery/">http://docs.dotcloud.com/tutorials/python/django-celery/</a></p><br/><br/><p>It's intended for simple tasks to be run asynchronously. There is a dotcloud-specific setup, but the rest might clear things up a bit. AFAIK, Celery started tightly coupled with Django but later became an entirely different animal, although it still retains superb compatibility with Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMUN AUTHENT PRIVACI INTEGR WITH MOBIL APP
    </pattern>
    <template>
<![CDATA[<p>You're working on bad information. SSL can absolutely authenticate the client, it's just not something that is done for the bulk of SSL as the protocol is (or, atleast was) typically used to protect e-commerce sites where authentication of the server was important but doing so with the client was not important and/or not feasible. What you want to do is employ mutually-authenticated SSL, so that your server will only accept incoming connections from your app and your app will only communicate with your server.</p><br/><br/><p>Here's the high-level approach. Create a self-signed server SSL certificate and deploy on your web server. If you're using Android, you can use the keytool included with the Android SDK for this purpose; if you're using another app platform like iOS, similar tools exist for them as well. Then create a self-signed client and deploy that within your application in a custom keystore included in your application as a resource (keytool will generate this as well). Configure the server to require client-side SSL authentication and to only accept the client certificate you generated. Configure the client to use that client-side certificate to identify itself and only accept the one server-side certificate you installed on your server for that part of it.</p><br/><br/><p>If someone/something other than your app attempts to connect to your server, the SSL connection will not be created, as the server will reject incoming SSL connections that do not present the client certificate that you have included in your app.</p><br/><br/><p>A step-by-step for this is a much longer answer than is warranted here. I would suggest doing this in stages as there are resources on the web about how to deal with self-signed SSL certificate in both Android and iOS, both server and client side. There is also a complete walk-through in my book, <a href="http://shop.oreilly.com/product/0636920022596.do" rel="nofollow">Application Security for the Android Platform</a>, published by O'Reilly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATTRIBUTEERROR MESSAG WHEN USE MANAGE.PI IN DJANGO NONREL FOR GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>GAE 1.6.0 doesnt work for me too, 1.5.2 does.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SESSION THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>The <code>request.session</code> object returned will be a new one for every request, accessing the same storage. Furthermore, they are loaded from the storage at request time and saved back at response time. So if you wish to transfer information from a long-running thread to another request, you need to save it in the long-running thread manually. Unfortunately, this will result in modifications to the same session's data being lost.</p><br/><br/><p>Session is thread-safe in some sense. You will not break the interpreter in this way. Your request will see the session data as a snapshot of it on the first access, and on saving it will overwrite all changes that landed since that moment. So the session state will be consistent, but some requests' modifications may be lost.</p><br/><br/><p>Actually this property is common for virtually any framework - any session/cache/some other storage that may be shared between multiple processes is very unlikely to provide modifications of the objects stored inside without the chance of someone's changes being overwritten.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND CON OF CELERI VS DISCO VS HADOOP VS OTHER DISTRIBUT COMPUT PACKAG
    </pattern>
    <template>
<![CDATA[<p>First of all, I have no experience with disco and little experience with hadoop. Then, to answer your questions one by one:</p><br/><br/><ul><br/><li><p>are easiest to work with in python/django?</p><br/><br/><p>Celery is the winner. It has straightforward integration with django via django-celery, while feature-rich and simple to use. I assume that disco comes second ( you write python code ) and hadoop comes last ( you can write python code, but in obscure ways).</p></li><br/><li><p>play nice with each other?</p><br/><br/><p>Everybody can play nice with others, provided that there exists a common layer on which they can communicate ( XML, JSON, whatever...).</p></li><br/><li><p>tend to work best for which tasks?</p><br/><br/><p>Disco and hadoop use the mapReduce paradigm, and the word "big data" comes in mind. If you have lots of data and you want to perform some processing on all of them, then mapReduce is an optimal solution. Celery is a distributed task queue, which is more "open and agile" in the ways you can  implement distributed processings/schemas. </p></li><br/><li><p>impose restrictions on other aspects of the system architecture (e.g. database design)?</p><br/><br/><p>I don't believe that there exists any (serious) restriction for any of the contestants (please correct me if I am wrong).</p></li><br/><li><p>have the largest user bases and best documentation?</p><br/><br/><p>Here hadoop is probably the winner. Celery has a decent community and lots of stackoverflow questions :). I don't know for Disco.</p></li><br/><li><p>have the steepest learning curves?</p><br/><br/><p>I believe that Celery has the steepest learning curve, seriously.. Hadoop is a bit tricky.. Don't know for Disco, but I suspect it's in the middle.</p><br/><br/><p>To sum up, if you want a great pythonic tool for general distributed processing, easy to use and fast to learn, with full django-integration, go with Celery. On the other hand, if your data "cry" for mapReduce, then follow your heart..</p></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S FILEFIELD TO AN EXIST FILE
    </pattern>
    <template>
<![CDATA[<p>If you want to do this permanently, you need to create your own FileStorage class</p><br/><br/><pre><code>from django.core.files.storage import FileSystemStorage<br/><br/>class MyFileStorage(FileSystemStorage):<br/><br/>    # This method is actually defined in Storage<br/>    def get_available_name(self, name):<br/>      return name # simply returns the name passed<br/></code></pre><br/><br/><p>Now in your model, you use your modified MyFileStorage</p><br/><br/><pre><code>from mystuff.customs import MyFileStorage<br/><br/>mfs = MyFileStorage()<br/><br/>class SomeModel(model.Model):<br/>   my_file = model.FileField(storage=mfs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESULT FOR PK REQUEST.US AND PK REQUEST.USER.ID IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is by design - if you pass a model object as the parameter to a query, it is the same as passing its primary key. </p><br/><br/><p>If this wasn't the behaviour, either passing the pk would be required, or an error, which would merely be annoying.</p><br/><br/><p>Thanks to rebus for this reference to the source: <a href="https://code.djangoproject.com/browser/django/trunk/django/db/models/fields/related.py#L175" rel="nofollow">https://code.djangoproject.com/browser/django/trunk/django/db/models/fields/related.py#L175</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRIPLE JOIN TABL WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong>zacherates</strong> writes:</p><br/><br/><blockquote><br/>  <p>I'd model Role as an association class between Users and Roles (...)</p><br/></blockquote><br/><br/><p>I'd also reccomed this solution, but you can also make use of some syntactical sugar provided by Django: <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships" rel="nofollow">ManyToMany relation with extra fields</a>.</p><br/><br/><p>Example:</p><br/><br/><pre><code>class User(models.Model):<br/>    name = models.CharField(max_length=128)<br/><br/>class Event(models.Model):<br/>    name = models.CharField(max_length=128)<br/>    members = models.ManyToManyField(User, through='Role')<br/><br/>    def __unicode__(self):<br/>        return self.name<br/><br/>class Role(models.Model):<br/>    person = models.ForeignKey(User)<br/>    group = models.ForeignKey(Event)<br/>    date_joined = models.DateField()<br/>    invite_reason = models.CharField(max_length=64)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUCCESS PASS A FUNCTION REFER TO DJANGO S REVERS ( ) FUNCTION
    </pattern>
    <template>
<![CDATA[<p>Got it!! The problem is that some of the imports are of <code>myproject.myapp.views</code>, and some are just of <code>myapp.views</code>. This is confusing the Python module system enough that it no longer detects the functions as the same object. This is because your main <code>settings.py</code> probably has a line like:</p><br/><br/><pre><code>ROOT_URLCONF = 'myproject.urls'<br/></code></pre><br/><br/><p>To solve this, try using the full import in your shell session:</p><br/><br/><pre><code>&gt;&gt;&gt; from django.core.urlresolvers import reverse<br/>&gt;&gt;&gt; from myproject.myapp import views<br/>&gt;&gt;&gt; reverse(views.myview)<br/>'/myview/'<br/></code></pre><br/><br/><p>Here's a log of the debugging session, for any interested future readers:</p><br/><br/><pre><code>&gt;&gt;&gt; from django.core import urlresolvers<br/>&gt;&gt;&gt; from myapp import myview<br/>&gt;&gt;&gt; urlresolvers.get_resolver (None).reverse_dict<br/>{None: ([(u'myview/', [])], 'myview/$'), &lt;function myview at 0x845d17c&gt;: ([(u'myview/', [])], 'myview/$')}<br/>&gt;&gt;&gt; v1 = urlresolvers.get_resolver (None).reverse_dict.items ()[1][0]<br/>&gt;&gt;&gt; reverse(v1)<br/>'/myview/'<br/>&gt;&gt;&gt; v1 is myview<br/>False<br/>&gt;&gt;&gt; v1.__module__<br/>'testproject.myapp.views'<br/>&gt;&gt;&gt; myview.__module__<br/>'myapp.views'<br/></code></pre><br/><br/><p>What happens if you change the URL match to be <code>r'^myview/$'</code>?</p><br/><br/><p><hr /></p><br/><br/><p>Have you tried it with the view name? Something like <code>reverse ('myapp.myview')</code>?</p><br/><br/><p>Is <code>urls.py</code> the root URLconf, or in the <code>myapp</code> application? There needs to be a full path from the root to a view for it to be resolved. If that's <code>myproject/myapp/urls.py</code>, then in <code>myproject/urls.py</code> you'll need code like this:</p><br/><br/><pre><code>from django.conf.urls.defaults import patterns<br/>urlpatterns = patterns ('',<br/>    (r'^/', 'myapp.urls'),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEED TO IMPORT TO GAIN ACCESS TO MY MODEL
    </pattern>
    <template>
<![CDATA[<p>Import your settings module too</p><br/><br/><pre><code>import os<br/>os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"<br/><br/>from mysite.polls.models import Poll, Choice<br/></code></pre><br/><br/><p>should do the trick.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OOKI ACROSS SUBDOMAIN AND HOST
    </pattern>
    <template>
<![CDATA[<p>For the benefit of anyone reading this question the code and information contained in the original post are exactly correct and work fine.</p><br/><br/><p>The problem is when you introduce other technology.  For instance, <strong>I have since learned that sending PHP code through a Python module, one that allows Django to serve PHP files/content, changes a great deal about what is accessible to the script and what is not.</strong></p><br/><br/><p>This was eventually discovered following the advice of <a href="http://stackoverflow.com/users/27020/marc-novakowski">Marc Novakowski</a>, who suggested sending <code>$_COOKIE</code> to the log in order to find out what was there.</p><br/><br/><p>I also checked out <code>$_SERVER</code> and <code>$_GET</code>.  It was the emptiness of <code>$_GET</code> that tipped me off that the setup I am attempting to use is not as straightforward has I had thought.  It was that mistaken understanding that led to not including the information about Django in the original post.</p><br/><br/><p>Apologies <em>and</em> thanks to all who responded to this question!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB APP IN GRAIL VS DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can run grails in 256 megs of ram.  Many members of the community are doing so.  That being said I would say in either platform you want much more ram than that to make sure your performant.  But I might also reccomend checking out www.linode.com.  You can get quality hosting for a very reasonable cost and adding a bit of ram for grails will not break your budget.  Also if your interested in cloud based solutions Morph is hosting grails apps.<br/><a href="http://developer.mor.ph/grails" rel="nofollow">http://developer.mor.ph/grails</a></p><br/><br/><p>I like Django, but I for the maturity of the platform and the amount of quality Java work out there in terms of libaries and frameworks I chose grails.  In truth I think they are both good solutions but you cannot deny that your options are much greater with grails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIL ROUTING...POINT
    </pattern>
    <template>
<![CDATA[<ul><br/><li>URLs should be easy to remember and say. And the user should know what to expect when she see that URL. Mapping URL directly to file doesn't always allow that.</li><br/><li>You might want to use diffrent URLs for the same, or at least similar, information displayed. If your server forces you to use 1 url &lt;-> 1 file mapping, you need to create additional files with all their function being to redirect to other file. Or you use stuff like <code>mod_rewrite</code> which isn't easier then Rails' url mappings.</li><br/><li>In one of my applications I use URL that looks like <code>http://www.example.com/</code><em>username</em><code>/</code><em>some additional stuff</em><code>/</code>. This can be also made with <code>mod_rewrite</code>, but at least for me it's easier to configure urls in django project then in every apache instance I run application at.</li><br/></ul><br/><br/><p>just my 2 cents... </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABL INHERIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are currently two form of inheritance in Django - MTI (model table inheritance) and ABC (abstract base classes).</p><br/><br/><p>I wrote a tutorial on what's going on under the hood here: <a href="http://thisweekindjango.com/articles/2008/jun/17/abstract-base-classes-vs-model-tab/" rel="nofollow">http://thisweekindjango.com/articles/2008/jun/17/abstract-base-classes-vs-model-tab/</a></p><br/><br/><p>I hope this helps.</p><br/><br/><p>You can also reference the official docs: <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/models/#model-inheritance</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL AND THE PYTHON MYSQL PACKAG ON OSX LEOPARD OR HOW DO I LEARN ABOUT BE A WEB DEVELOP USE OSX
    </pattern>
    <template>
<![CDATA[<p>Did the MySQL and MySQL-dev installations go smoothly? Can you run MySQL, connect to it and so on? Does <code>/usr/local/mysql/include</code> contain lots of header files? (I've got 46 header files there, for reference).</p><br/><br/><p>If so, MySQL should be good to go. There are still a few manual steps required to compile MySQL-python, however.</p><br/><br/><p><a href="http://www.keningle.com/?p=11" rel="nofollow">This</a> is a decent guide: I've included the salient steps below.</p><br/><br/><p><hr /></p><br/><br/><ol><br/><li><p>Download the <a href="https://sourceforge.net/projects/mysql-python" rel="nofollow">MySQL-python source</a> (v1.2.2 at time of writing: all subsequent instructions are for this version)</p><br/><br/><pre><code>$ tar xzf MySQL-python-1.2.2.tar.gz &amp;&amp; cd MySQL-python-1.2.2<br/></code></pre></li><br/><li><p>Edit <code>_mysql.c</code>: remove lines 37-39 and change lines 481-482. Here's the diff:</p><br/><br/><pre><code>37,39d36<br/>&lt; #ifndef uint<br/>&lt; #define uint unsigned int<br/>&lt; #endif<br/>484,485c481,482<br/>&lt;         uint port = MYSQL_PORT;<br/>&lt;         uint client_flag = 0;<br/>---<br/>&gt;         unsigned int port = MYSQL_PORT;<br/>&gt;         unsigned int client_flag = 0;<br/></code></pre></li><br/><li><p>Symlink the libs to where MySQL-python expects them:</p><br/><br/><pre><code>$ sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql<br/></code></pre></li><br/><li><p>In your MySQL-python-1.2.2 directory, rebuild your package:</p><br/><br/><pre><code>$ sudo python setup.py build<br/></code></pre><br/><br/><p><strong>Note:</strong> You will receive a warning, ignore it.</p></li><br/><li><p>Install the package:</p><br/><br/><pre><code>$ sudo python setup.py install<br/></code></pre></li><br/></ol><br/><br/><p><hr /></p><br/><br/><p>As for starting MySQL, there are instructions <a href="http://dev.mysql.com/doc/refman/5.0/en/mac-os-x-installation.html" rel="nofollow">here</a> on starting it as a service. Personally, I just run</p><br/><br/><pre><code>sudo mysqld_safe<br/></code></pre><br/><br/><p>manually, backgrounding it with <code>^Z</code> and <code>bg</code> once I've put in my password.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REFER GUID FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>You want <a href="http://www.djangobook.com/" rel="nofollow">The Django Book</a>. <a href="http://docs.djangoproject.com/en/dev/" rel="nofollow">The official documentation</a> is also quite good.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CACH
    </pattern>
    <template>
<![CDATA[<p>We do a lot of component caching and not all of them are updated at the same time. So we set host and timestamp values in a universally included context processor. At the top of each template fragment we stick in:</p><br/><br/><pre><code>&lt;!-- component_name {{host}} {{timestamp}} --&gt;<br/></code></pre><br/><br/><p>The component_name just makes it easy to do a View Source and search for that string.</p><br/><br/><p>All of our views that are object-detail pages define a context variable "page_object" and we have this at the top of the base.html template master:</p><br/><br/><pre><code>&lt;!-- {{page_object.class_id}} @ {{timestamp}} --&gt;<br/></code></pre><br/><br/><p>class_id() is a method from a super class used by all of our primary content classes. It is just:</p><br/><br/><pre><code>def class_id(self):<br/>    "%s.%s.%s" % (self.__class__._meta.app_label,<br/>                    self.__class__.__name__, self.id)<br/></code></pre><br/><br/><p>If you load a page and any of the timestamps are more than few seconds old, it's a pretty good bet that the component was cached.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .CONTRIB.FLATPAG WITHOUT MODEL
    </pattern>
    <template>
<![CDATA[<p>Using the <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-simple-direct-to-template" rel="nofollow"><code>direct_to_template</code></a> generic view would be a lot simpler.  You could use the passed in parameters on one view to specify the actual template in urls.py, if you don't want to add an entry for each page:</p><br/><br/><pre><code>r'^foo/(?P&lt;template_name&gt;.+)/$','direct_to_template', {'template': 'foo_index.html'}),<br/></code></pre><br/><br/><p>Then import the template in your <code>foo_index.html</code>:</p><br/><br/><pre><code>{% include template_name %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL CONTENT OF A DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>I would suggest checking out <a href="http://code.google.com/p/django-multilingual/" rel="nofollow">django-multilingual</a>.  It is a third party app that lets you define translation fields on your models.</p><br/><br/><p>Of course, you still have to type in the actual translations, but they are stored transparently in the database (as opposed to in static PO files), which is what I believe you are asking about.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNESCAP APOSTROPH AND SUCH IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://stackoverflow.com/questions/275174/">this question</a>. What you're looking for is "html entity decoding". Typically, you'll find a function named something like "htmldecode" that will do what you want. Both Django and Cheetah provide such functions as does BeautifulSoup.</p><br/><br/><p>The other answer will work just great if you don't want to use a library and all the entities are numeric.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + FASTCGI RANDOMLI RAIS OPERATIONALERROR
    </pattern>
    <template>
<![CDATA[<p>In the end I switched back to Apache + mod_python (I was having other random errors with fcgi, besides this one) and everything is good and stable now.</p><br/><br/><p>The question still remains open. In case anybody has this problem in the future and solves it they can record the solution here for future reference. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUESTION ABOUT NEST COLLECT IN DJANGO AND QUERI EFFICI
    </pattern>
    <template>
<![CDATA[<p>This is a very good question, and one not limited to Django's ORM framework.</p><br/><br/><p>I always feel it's important to remember some of the problems that an object-relational mapping (ORM) framework solves:</p><br/><br/><ul><br/><li><p><strong>Object-oriented CRUD</strong>: If the rest of the application is based on strong object-oriented principles, accessing data persistence using objects makes the code just that much more coherent, internally consistent, and sometimes shorter.</p></li><br/><li><p><strong>Persistence layer encapsulation</strong>: An ORM provides a clear layer in your application for DB access. It encapsulates all the functions needed to read/write data in one spot, the epitome of the so-called DRY (do not repeat yourself) principle. This makes a few things much easier: <em>model changes</em>, because all the DB-facing select and insert/update code is in one spot rather than throughout the app, <em>security</em>, because all DB access goes through one location, and <em>testing</em>, because it's easy to mock out your data models and access if they are clearly delineated.</p></li><br/><li><p><strong>SQL security</strong>: While it's easy to secure raw SQL use against injection attacks and such, it's even easier if you have an ORM framework as a single point of DB-contact that does it for you so you never have to think about it.</p></li><br/></ul><br/><br/><p>Notice that speed is not on the list. An ORM is a level of indirection between your code and the database. We certainly hold ORM designers responsible for writing a framework that produces good SQL statements, but an ORM is meant to provide code- and architecture-level efficiency, not executional efficiency. A developer who has read a basic book on SQL will always be able to get better performance talking directly to the DB.</p><br/><br/><p>There are certainly strategies to counter this, and in Django those are <code>select_related()</code> as ozan has mentioned, and site/view/miscellaneous caching, but they won't give you the same performance as a direct SQL statement. Because of this, I would never use an ORM framework that does not provide some mechanism for issuing a raw SQL statement on those occasions when I need speed. For example, I often resort to raw SQL when generating a large report out of the database that joins many tables; the ORM way can take minutes, the SQL way can take seconds.</p><br/><br/><p>Having said that, I never start by worrying about each individual query. My advice for anyone coming to an ORM layer is: don't nanny the ORM's database access. Write your application or module, and then profile it, tweaking those areas that truly need the performance boost, or using caching/select_related to reduce the overall DB-chattiness of your application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM DOCUMENT
    </pattern>
    <template>
<![CDATA[<p>For the Magento ORM which is based off of Zend Framework's Zend_Db_Adapter , you can use the Zend Framework Programmers Reference (Available as a free pdf on <a href="http://framework.zend.com/" rel="nofollow">Zend Framework's site</a> ). I also found this <a href="http://activecodeline.com/getting-things-in-magento-by-getmodel-and-getdata-methods/" rel="nofollow">link</a> helpful for learning more about Magento models.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON OLAP MDX ORM ENGIN
    </pattern>
    <template>
<![CDATA[<p>Django has some OLAP features that are nearing release.</p><br/><br/><p>Read <a href="http://www.eflorenzano.com/blog/post/secrets-django-orm/" rel="nofollow">http://www.eflorenzano.com/blog/post/secrets-django-orm/</a></p><br/><br/><p>See <a href="http://blog.doughellmann.com/2007/12/using-raw-sql-in-django.html" rel="nofollow">http://blog.doughellmann.com/2007/12/using-raw-sql-in-django.html</a>, also</p><br/><br/><p>If you have a proper star schema design in the first place, then one-dimensional results can have the following form.</p><br/><br/><pre><code>from myapp.models import SomeFact<br/>from collections import defaultdict<br/><br/>facts = SomeFact.objects.filter( dimension1__attribute=this, dimension2__attribute=that )<br/>myAggregates = defaultdict( int )<br/>for row in facts:<br/>    myAggregates[row.dimension3__attribute] += row.someMeasure<br/></code></pre><br/><br/><p>If you want to create a two-dimensional summary, you have to do something like the following.</p><br/><br/><pre><code>facts = SomeFact.objects.filter( dimension1__attribute=this, dimension2__attribute=that )<br/>myAggregates = defaultdict( int )<br/>for row in facts:<br/>    key = ( row.dimension3__attribute, row.dimension4__attribute )<br/>    myAggregates[key] += row.someMeasure<br/></code></pre><br/><br/><p>To compute multiple SUM's and COUNT's and what-not, you have to do something like this.</p><br/><br/><pre><code>class MyAgg( object ):<br/>    def __init__( self ):<br/>        self.count = 0<br/>        self.thisSum= 0<br/>        self.thatSum= 0<br/><br/>myAggregates= defaultdict( MyAgg )<br/>for row in facts:<br/>    myAggregates[row.dimension3__attr].count += 1<br/>    myAggregates[row.dimension3__attr].thisSum += row.this<br/>    myAggregates[row.dimension3__attr].thatSum += row.that<br/></code></pre><br/><br/><p>This -- at first blush -- seems inefficient.  You're trolling through the fact table returning lots of rows which you are then aggregating in your application.</p><br/><br/><p>In some cases, this may be <em>faster</em> than the RDBMS's native sum/group_by.  Why?  You're using a simple mapping, not the more complex sort-based grouping operation that the RDBMS often has to use for this.  Yes, you're getting a lot of rows; but you're doing less to get them.</p><br/><br/><p>This has the disadvantage that it's not so declarative as we'd like.  It has the advantage that it's pure Django ORM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR TUPL OBJECT IS NOT CALLABL
    </pattern>
    <template>
<![CDATA[<p>You somehow set some function to a tuple. Please edit the question and paste your <code>urls.py</code> code, so we can point you to the error.</p><br/><br/><p>I can try a <strong>wild guess</strong>:</p><br/><br/><pre><code>File "c:\projects\iFriends\..\iFriends\urls.py", line 17, in &lt;module&gt;<br/>   (r'^admin/', include('django.contribute.admin.urls'))<br/></code></pre><br/><br/><p>This somehow tells me that you missed a comma on line 16, so:</p><br/><br/><pre><code>16. (r'^/', 'some_stuff....')      # &lt;-- missed comma here<br/>17. (r'^admin/', include('django.contribute.admin.urls'))<br/></code></pre><br/><br/><p>Just put the comma and it will work. If that's not the case, I'll send my cristal ball for mainantance. Paste the code.</p><br/><br/><h1>EDIT</h1><br/><br/><p>Seems like you have pasted the <code>urls.py</code> as an answer. Please edit the <strong>question</strong> and paste urls.py there.</p><br/><br/><p>Anyway, the error has changed. What did you do? In this new error, <code>urls.py</code> is not found anymore so maybe you've renamed it? Have you changed the way you run the application?</p><br/><br/><p>The file you pasted <strong>is not</strong> the one that is running. Are you pasting <code>url.py</code> and django is reading <code>urls.py</code>? The code in the error doesn't match the code you pasted! Please paste the correct file, i.e. the same that gives the error, or we can't help.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER A MODEL BY A MANY TO MANI FIELD
    </pattern>
    <template>
<![CDATA[<p>Django 1.1 (currently beta) adds <a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">aggregation</a> support. Your query can be done with something like:</p><br/><br/><pre><code>from django.db.models import Max<br/>People.objects.annotate(max_weight=Max('roles__weight')).order_by('-max_weight')<br/></code></pre><br/><br/><p>This sorts people by their heaviest roles, without returning duplicates.</p><br/><br/><p>The generated query is:</p><br/><br/><pre><code>SELECT people.id, people.name, MAX(role.weight) AS max_weight<br/>FROM people LEFT OUTER JOIN people_roles ON (people.id = people_roles.people_id)<br/>            LEFT OUTER JOIN role ON (people_roles.role_id = role.id)<br/>GROUP BY people.id, people.name<br/>ORDER BY max_weight DESC<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTERN POPUL A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>There is excellent way to do some maintenance-like jobs in project environment- write a <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands" rel="nofollow">custom manage.py command</a>. It takes all environment configuration and other stuff allows you to concentrate on concrete task.</p><br/><br/><p>And of course call it directly by cron.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM FAIL VALID ON A UNIQU FIELD
    </pattern>
    <template>
<![CDATA[<p>I don't think you are actually updating an existing article, but instead creating a new one, presumably with more or less the same content, especially the slug, and thus you will get an error. It is a bit strange that you don't get better error reporting, but also I do not know what the rest of your view looks like.</p><br/><br/><p>What if you where to try something along these lines (I have included a bit more of a possible view function, change it to fit your needs); I haven't actually tested my code, so I am sure I've made at least one mistake, but you should at least get the general idea:</p><br/><br/><pre><code>def article_update(request, id):<br/>   article = get_objects_or_404(Article, pk=id)<br/><br/>   if request.method == 'POST':<br/>      form = ArticleForm(request.POST, instance=article)<br/><br/>      if form.is_valid():<br/>         form.save()<br/><br/>         return HttpResponseRedirect(to-some-suitable-url)<br/><br/>   else:<br/>      form = ArticleForm(instance=article)<br/><br/>   return render_to_response('article_update.html', { 'form': form })<br/></code></pre><br/><br/><p>The thing is, as taurean noted, you should instantiate your model form with the object you wish to update, otherwise you will get a new one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE BEST LIST OF EXIST DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Check out this list of <a href="http://code.djangoproject.com/wiki/DjangoResources" rel="nofollow">Django resources</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE MIDDLEWAR COMMUN WITH VIEWS TEMPL
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>It's not the best way. You could set my_var on the request rather than on the settings. Settings are global and apply to the whole site. You don't want to modify it for every request. There could be concurrency issues with multiple request updating/reading the variable at the same time.</p></li><br/><li><p>To access request.my_var in your templates you could do <strong>{{ request.my_var }}</strong>. To get access to the request variable in your template you will have to add <strong>django.core.context_processors.request</strong> to your <strong>TEMPLATE_CONTEXT_PROCESSORS</strong> setting.</p></li><br/><li><p>Yes. Other terminology to describe request middleware would be request pre-processor/filter/interceptor. </p></li><br/></ol><br/><br/><p>Also, if you want to use a common Site name for the header in your templates, you might want to check out the Django Sites application which provides a site name variable for your use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIDE GOOGL MARKER CLUSTER PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>I wrote a blog post about my approach using Python and Django here:</p><br/><br/><p><a href="http://www.quanative.com/2010/01/01/server-side-marker-clustering-for-google-maps-with-python/" rel="nofollow">http://www.quanative.com/2010/01/01/server-side-marker-clustering-for-google-maps-with-python/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGE HIT COUNT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you use Django 1.1+, just use <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#filters-can-reference-fields-on-the-model" rel="nofollow">F expressions</a>:</p><br/><br/><pre><code>from django.db.models import F<br/>...<br/>MyModel.objects.filter(id=...).update(hit_count=F('hit_count')+1)<br/></code></pre><br/><br/><p>This will perform a single atomic database query.</p><br/><br/><p>As gerdemb says, you should consider putting this in a middleware to make it easily reusable so it doesn't clutter up all your views.</p><br/><br/><hr><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODELFORM MENU ITEM SELECT BY DEFAULT
    </pattern>
    <template>
<![CDATA[<p>If you need a blank form with a default value selected, then pass an 'initial' dictionary to the constructor of your model form using the name of your field as the key:</p><br/><br/><pre><code>form = MyModelForm (initial={'gender':'M'})<br/></code></pre><br/><br/><p>-OR-</p><br/><br/><p>You can override certain attributes of a ModelForm using the declarative nature of the Forms API.  However, this is probably a little cumbersome for this use case and I mention it only to show you that you can do it.   You may find other uses for this in the future.</p><br/><br/><pre><code>class MyModelForm (forms.ModelForm):<br/>    gender = forms.ChoiceField (choices=..., initial='M', ...)<br/>    class Meta:<br/>        model=MyModel<br/></code></pre><br/><br/><p>-OR-</p><br/><br/><p>If you want a ModelForm that is bound to a particular instance of your model, you can pass an 'instance' of your model which causes Django to pull the selected value from that model.  </p><br/><br/><pre><code>form = MyModelForm (instance=someinst)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIF ITEM FROM DJANGO S CACH
    </pattern>
    <template>
<![CDATA[<p>tghw's solution does not actually work, because the cache key is NOT the absolute path. The key is calculated from the absolute path and the HTTP headers. See <a href="http://stackoverflow.com/questions/1995126/invalidating-a-path-from-the-django-cache-recursively">this question</a> for an example.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GROUP BY STRFTIME DATE FORMAT
    </pattern>
    <template>
<![CDATA[<p>This works for me:</p><br/><br/><pre><code>select_data = {"d": """strftime('%%m/%%d/%%Y', time_stamp)"""}<br/><br/>data = My_Model.objects.extra(select=select_data).values('d').annotate(Sum("numbers_data")).order_by()<br/></code></pre><br/><br/><p>Took a bit to figure out I had to escape the % signs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTH USER TRUNCAT EMAIL FIELD
    </pattern>
    <template>
<![CDATA[<p>EmailField 75 chars length is hardcoded in django. You can fix this like that:</p><br/><br/><pre><code>from django.db.models.fields import EmailField<br/>def email_field_init(self, *args, **kwargs):<br/>  kwargs['max_length'] = kwargs.get('max_length', 200)<br/>  CharField.__init__(self, *args, **kwargs)<br/>EmailField.__init__ = email_field_init<br/></code></pre><br/><br/><p>but this will change ALL EmailField fields lengths, so you could also try:</p><br/><br/><pre><code>from django.contrib.auth.models import User<br/>from django.utils.translation import ugettext as _<br/>from django.db import models<br/>User.email = models.EmailField(_('e-mail address'), blank=True, max_length=200)<br/></code></pre><br/><br/><p>both ways it'd be best to put this code in init of any module BEFORE django.contrib.auth in your INSTALLED_APPS</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MVT ISSU IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You want to use <code>context_instance</code> and <code>RequestContext</code>s. </p><br/><br/><p>First, add at the top of your <code>views.py</code>:</p><br/><br/><pre><code>from django.template import RequestContext<br/></code></pre><br/><br/><p>Then, update all of your views to look like:</p><br/><br/><pre><code>def someview(request, ...)<br/>    ...<br/>    return render_to_response('viewtemplate.html', someContext, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>In your <code>settings.py</code>, add:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    'django.core.context_processors.auth',<br/>    ...<br/>    'myproj.app.context_processors.dynamic',<br/>    'myproj.app.context_processors.sidebar',<br/>    'myproj.app.context_processors.etc',<br/>)<br/></code></pre><br/><br/><p>Each of these <code>context_processors</code> is a function takes the <code>request</code> object and returns a context in the form of a dictionary. Just put all the functions in <code>context_processors.py</code> inside the appropriate app. For example, a blog might have a sidebar with a list of recent entries and comments. <code>context_processors.py</code> would just define:</p><br/><br/><pre><code>def sidebar(request):<br/>    recent_entry_list = Entry.objects...<br/>    recent_comment_list = Comment.objects...<br/>    return {'recent_entry_list': recent_entry_list, 'recent_comment_list': recent_comment_list}<br/></code></pre><br/><br/><p>You can add as many or as few as you like.</p><br/><br/><p>For more, check out the <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#id1" rel="nofollow">Django Template Docs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM SELECT RELAT SET
    </pattern>
    <template>
<![CDATA[<p>First answer: don't waste time writing something like qbind until you've already written a working application, profiled it, and demonstrated that N queries is actually a performance problem for your database and load scenarios.</p><br/><br/><p>But maybe you've done that.  So second answer: qbind() does what you'll need to do, but it would be more idiomatic if packaged in a custom QuerySet subclass, with an accompanying Manager subclass that returns instances of the custom QuerySet.  Ideally you could even make them generic and reusable for any reverse relation.  Then you could do something like:</p><br/><br/><pre><code>Poll.objects.filter(category='foo').fetch_reverse_relations('choices_set')<br/></code></pre><br/><br/><p>For an example of the Manager/QuerySet technique, see <a href="http://www.djangosnippets.org/snippets/1079/" rel="nofollow">this snippet</a>, which solves a similar problem but for the case of Generic Foreign Keys, not reverse relations.  It wouldn't be too hard to combine the guts of your qbind() function with the structure shown there to make a really nice solution to your problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTERN DJANGO REDIRECT WITH POST PARAMET
    </pattern>
    <template>
<![CDATA[<p>I suggest the following approach. In your Django view/template return form to the browser with all the parameters that you want to post as hidden form elements. As soon as the form loads the JavaScript will submit (POST) form to where ever you want.</p><br/><br/><p>View:</p><br/><br/><pre><code>from django.shortcuts import render_to_response<br/><br/>def view(request):<br/>    return render_to_response('test.html', { 'foo': 123, 'bar': 456 })<br/></code></pre><br/><br/><p>Template:</p><br/><br/><pre><code>&lt;html&gt;<br/>&lt;head&gt;<br/>    &lt;title&gt;test&lt;/title&gt;<br/>     &lt;script type="text/javascript"&gt;<br/>     function load()<br/>     {<br/>          window.document.test.submit();<br/>          return;<br/>     }<br/>     &lt;/script&gt;<br/>&lt;/head&gt;<br/>&lt;body onload="load()"&gt;<br/>&lt;form name="test" method="post" action="http://www.example.com"&gt;<br/>    &lt;input type="hidden" name="foo" value={{ foo }} /&gt;<br/>    &lt;input type="hidden" name="bar" value={{ bar }} /&gt;<br/>&lt;/form&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ART A DJANGO APPLIC RUN ON APACH + MOD PYTHON
    </pattern>
    <template>
<![CDATA[<p>If possible, you should switch to mod_wsgi. This is now the <a href="http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/" rel="nofollow">recommended way</a> to serve Django anyway, and is much more efficient in terms of memory and server resources.</p><br/><br/><p>In mod_wsgi, each site has a <code>.wsgi</code> file associated with it. To restart a site, just <code>touch</code> the relevant file, and only that code will be reloaded.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO INSTAL IN UBUNTU
    </pattern>
    <template>
<![CDATA[<p>you can just print it out.</p><br/><br/><pre><code>&gt;&gt;&gt; import django<br/>&gt;&gt;&gt; print django.__file__<br/>/var/lib/python-support/python2.5/django/__init__.pyc<br/>&gt;&gt;&gt;<br/></code></pre><br/><br/><p>or:</p><br/><br/><pre><code>import inspect<br/>import django<br/>print inspect.getabsfile(django)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EAMCITI FOR PYTHON DJANGO CONTINU INTEGR
    </pattern>
    <template>
<![CDATA[<p>Ok, so there's how to get it working with proper TeamCity integration:</p><br/><br/><p>Presuming you have TeamCity installed with at least 1 build agent available</p><br/><br/><p>1) Configure your build agent to execute </p><br/><br/><pre><code>manage.py test<br/></code></pre><br/><br/><p>2) Download and install this plugin for TC <a href="http://pypi.python.org/pypi/teamcity-messages" rel="nofollow">http://pypi.python.org/pypi/teamcity-messages</a></p><br/><br/><p>3) You'll have to provide your custom test runner for plugin in (2) to work. It can be straight copy of run_tests from django.test.simple, with only one slight modification: replace line where test runner is called with TeamcityTestRunner, so insted of </p><br/><br/><pre><code>def run_tests(test_labels, verbosity=1, interactive=True, extra_tests=[]):<br/>    ...<br/>    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)<br/></code></pre><br/><br/><p>use this:</p><br/><br/><pre><code>def run_tests(test_labels, verbosity=1, interactive=True, extra_tests=[]):<br/>    ...<br/>    result = TeamcityTestRunner().run(suite)<br/></code></pre><br/><br/><p>You'll have to place that function into a file in your solution, and specify a custome test runner, using Django's TEST_RUNNER configuration property like this:</p><br/><br/><pre><code>TEST_RUNNER = 'my_site.file_name_with_run_tests.run_tests'<br/></code></pre><br/><br/><p>Make sure you reference all required imports in your <strong>file_name_with_run_tests</strong></p><br/><br/><p>You can test it by running </p><br/><br/><pre><code>./manage.py test<br/></code></pre><br/><br/><p>from command line and noticing that output has changed and now messages like</p><br/><br/><pre><code>#teamcity....<br/></code></pre><br/><br/><p>appearing in it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESIZ WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>If it's OK for you, there is a Django application ready, doing exactly what you want:<br/><a href="http://code.google.com/p/sorl-thumbnail/" rel="nofollow">http://code.google.com/p/sorl-thumbnail/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMENT IN DJANGO 1.1
    </pattern>
    <template>
<![CDATA[<p>Theju wrote an authenticated comments app - <a href="http://thejaswi.info/tech/blog/2009/08/04/reusable-app-authenticated-comments/" rel="nofollow">http://thejaswi.info/tech/blog/2009/08/04/reusable-app-authenticated-comments/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQLDB ON SNOW LEOPARD
    </pattern>
    <template>
<![CDATA[<p>I'd recomend installing macports (latest svn trunk) and installing mysql from there. </p><br/><br/><p>sudo port install mysql5-server</p><br/><br/><p>Download the MySQL-python-1.2.2 source</p><br/><br/><p>make sure /opt/local/lib/mysql5/bin is in your path or edit site.cfg to include: </p><br/><br/><pre><code>mysql_config = /opt/local/lib/mysql5/bin/mysql_config<br/></code></pre><br/><br/><p>Comment out line 38 of _mysql.c </p><br/><br/><pre><code>// #define uint unsigned int<br/></code></pre><br/><br/><p>Then run:</p><br/><br/><pre><code>sudo python setup.py install<br/></code></pre><br/><br/><p>should be all good.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BY PROPERTI
    </pattern>
    <template>
<![CDATA[<p>Nope.  Django filters operate at the database level, generating SQL.  To filter based on Python properties, you have to load the object into Python to evaluate the property--and at that point, you've already done all the work to load it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PPUCCINO DJANGO AJAX AND FIT IT ALL TOGETH REVIEW MY ARCHITECTUR
    </pattern>
    <template>
<![CDATA[<p>For a low traffic site, using Django's routing layer would be fine, but if you plan on getting a significant amount of traffic, you might consider having your proxying webserver handle the stubs.</p><br/><br/><p>As for the rest, it works and the TurboGears community has been doing it for years (I was a TG committer so that's what I normally use). The TG architecture of returning a dictionary to a template makes this trivial since you just set 'json' as your template engine.</p><br/><br/><p>Doing the same thing in Django isn't much more complicated. Just use the <a href="http://docs.djangoproject.com/en/dev/topics/serialization/" rel="nofollow">serialization</a> tools to write the result to the response rather than using the templating calls.</p><br/><br/><p>Note that when you do an architecture like this, it's considerably easier to manage if you keep all the application logic in one place. Putting some app logic in Django and some in the browser causes things to start getting messy fairly quickly. If you treat your server as a dumb persistence layer  (with the exception of validation/authentication/authorization), life is easier.</p><br/><br/><p>FWIW, I find Sproutcore to be easier to work with than Cappuccino if you're interested in heavier non-progressive enhancement frameworks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT INDEX NON UNIQU MULTIPL COLUMN
    </pattern>
    <template>
<![CDATA[<p>No, this isn't currently implemented in Django. However, there's a <a href="http://code.djangoproject.com/ticket/373" rel="nofollow">ticket</a> for composite primary keys and a <a href="http://github.com/dcramer/django-compositepks" rel="nofollow">Django fork</a> maintained by ticket's assignee that implements it. So, your way of doing this is best in terms of built-in tools. You may also want to try using some DB migration system like <a href="http://south.aeracode.org/" rel="nofollow">south</a> if your project is quite large.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET PARAMET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I generally make two patterns with a <a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#naming-url-patterns">named url</a>:</p><br/><br/><pre><code>url(r'^so/(?P&lt;required&gt;\d+)/$', 'myapp.so', name='something'),<br/>url(r'^so/(?P&lt;required&gt;\d+)/(?P&lt;optional&gt;.*)/$', 'myapp.so', name='something_else'),<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLUSH RESPONS
    </pattern>
    <template>
<![CDATA[<p>Most webservers (eg. FCGI/SCGI) do their own buffering, HTTP clients do their own, and so on.  It's very difficult to actually get data flushed out in this way and for the client to actually receive it, because it's not a typical operation.</p><br/><br/><p>The closest to what you're trying to do would be to pass an iterator to HttpResponse, and to do the work in a generator; something like this:</p><br/><br/><pre><code>def index(request):<br/>    def do_work():<br/>        step_1()<br/>        yield "step 1 complete"<br/>        step_2()<br/>        yield "step 2 complete"<br/>        step_3()<br/>        yield "step 3 complete"<br/>    return HttpResponse(do_work())<br/></code></pre><br/><br/><p>... but this won't <em>necessarily</em> flush.  (Not tested code, but you get the idea; see <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#passing-iterators" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/request-response/#passing-iterators</a>.)</p><br/><br/><p>Most of the infrastructure is simply not expecting a piecemeal response.  Even if Django isn't buffering, your front-end server might be, and the client probably is, too.  That's why most things use pull updates for this: a separate interface to query the status of a long-running request.</p><br/><br/><p>(I'd like to be able to do reliable push updates for this sort of thing, too...)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>What makes an app (for us) is one thing:</p><br/><br/><p><strong>An App Is The Unit Of Reuse</strong></p><br/><br/><p>If we might want to split it off to use somewhere else, it's an app.  </p><br/><br/><p>If it has a reusable data model, it's an app.  User Profiles: App.  Customers: App.  Customer Statistical History (this is hard to explain without providing too many details): App.  Reporting: App.  Actuarial Analysis: App.  Vendor API's for data gathering: App.</p><br/><br/><p>If it is unique and will never be reused (i.e., customer specific) it's an app that depends on other apps.  Data Loads are customer specific.  Each is an app that builds on an existing pair of apps (Batch Uploads, and Statistical History)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOM INCREMENT OF A COUNTER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#query-expressions" rel="nofollow">New in Django 1.1</a></p><br/><br/><pre><code>Counter.objects.get_or_create(name = name)<br/>Counter.objects.filter(name = name).update(count = F('count')+1)<br/></code></pre><br/><br/><p>or </p><br/><br/><pre><code>counter = Counter.objects.get_or_create(name = name)<br/>counter.count = F('count') +1<br/>counter.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MONDAY S DATE WITH PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; import datetime<br/>&gt;&gt;&gt; today = datetime.date.today()<br/>&gt;&gt;&gt; today + datetime.timedelta(days=-today.weekday(), weeks=1)<br/>datetime.date(2009, 10, 26)<br/></code></pre><br/><br/><p><em>Some words of explanation:</em></p><br/><br/><p>Take todays date. Subtract the number of days which already passed this week (this gets you 'last' monday). Add one week.</p><br/><br/><p><strong>Edit</strong>: The above is for 'next monday', but since you were looking for 'last monday' you could use</p><br/><br/><pre><code>today - datetime.timedelta(days=today.weekday())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINK TO EDIT OBJECT IN DJANGO S ADMIN ( DISPLAY LIST ONLI )
    </pattern>
    <template>
<![CDATA[<p>I wanted a Log viewer as a list only.<br/>I got it working like this:</p><br/><br/><pre><code>class LogEntryAdmin(ModelAdmin):<br/>    actions = None<br/>    list_display = ('action_time', 'user', 'content_type', 'object_repr', 'change_message')<br/>    search_fields = ['=user__username', ]<br/>    fieldsets = [<br/>        (None, {'fields':()}), <br/>        ]<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(LogEntryAdmin, self).__init__(*args, **kwargs)<br/>        self.list_display_links = (None, )<br/></code></pre><br/><br/><p>It is kind of a mix between both answers.<br/>If you just do "self.list_display_links = ()" it will show the link anyway because the templatetag code (templatetags/admin_list.py) checks again to see if the list is empty.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRUCTUR FOR STORE A SORT FIELD TO EFFICI ALLOW MODIF
    </pattern>
    <template>
<![CDATA[<p><strong>Prefered solutions:</strong></p><br/><br/><p>A <a href="http://en.wikipedia.org/wiki/Linked%5Flist" rel="nofollow">linked list</a> would be the usual way to achieve this. A query to return the items in order is <a href="http://stackoverflow.com/questions/515749/how-do-i-sort-a-linked-list-in-sql/515761#515761">trivial in Oracle</a>, but Im not sure how you would do it in PostreSQL.</p><br/><br/><p>Another option would be to implement this using the <a href="http://www.postgresql.org/docs/current/static/ltree.html" rel="nofollow">ltree module for postgresql.</a></p><br/><br/><p><strong>Less graceful (and write-heavy) solution:</strong><br/>Start transaction. "select for update" within scope for row level locks. Move the target record to position 0, update the targets future succeeding records to +1 where their position is higher than the targets original position (or vice versa) and then update the target to the new position - a single additional write over that needed without a unique constraint. Commit :D</p><br/><br/><p><strong>Simple (yet still write-heavy) solution if you can wait for Postgresql 8.5 (Alpha is available) :)</strong></p><br/><br/><p>Wrap it in a transaction, select for update in scope, and use a deferred constraint (<a href="http://developer.postgresql.org/pgdocs/postgres/release-8.5.html#AEN94987" rel="nofollow">postgresql 8.5 has support for deferred unique constraints</a> like Oracle).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONCURR CONTROL IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>The short answer, this really isn't a Django question as presented.  </p><br/><br/><p>Concurrency control is often presented as a technical question, but is in many ways a question of functional requirements.  How do you want/need your application to work?  Until we know that, it will be difficult to give any Django-specific advice.  </p><br/><br/><p>But, I feel like rambling, so here goes... </p><br/><br/><p>There are two questions that I tend to ask myself when confronted with the need for concurrency control:</p><br/><br/><ul><br/><li>How likely is it that two users will need to concurrently modify the same record?</li><br/><li>What is the impact to the user if his/her modifications to a record are lost? </li><br/></ul><br/><br/><p>If the likelihood of collisions is relatively high, or the impact of losing a modification is severe, then you may be looking at some form of pessimistic locking.  In a pessimistic scheme, each user must acquire a logical lock prior to opening the record for modification.</p><br/><br/><p>Pessimistic locking comes with much complexity.  You must synchronize access to the locks, consider fault tolerance, lock expiration, can locks be overridden by super users, can users see who has the lock, so on and so on.</p><br/><br/><p>In Django, this could be implemented with a separate Lock model or some kind of 'lock user' foreign key on the locked record.  Using a lock table gives you a bit more flexibility in terms of storing when the lock was acquired, user, notes, etc.  If you need a generic lock table that can be used to lock any kind of record, then take a look at the <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/" rel="nofollow">django.contrib.contenttypes framework</a>, but quickly this can devolve into abstraction astronaut syndrome.</p><br/><br/><p>If collisions are unlikely or lost modifications are trivially recreated, then you can functionally get away with optimistic concurrency techniques. This technique is simple and easier to implement.  Essentially, you just keep track of a version number or modification time stamp and reject any modifications that you detect as out of whack.</p><br/><br/><p>From a functional design standpoint, you only have to consider how these concurrent modification errors are presented to your users.</p><br/><br/><p>In terms of Django, optimistic concurrency control can be implemented by overriding the save method on your model class...</p><br/><br/><pre><code>def save(self, *args, **kwargs):<br/>    if self.version != self.read_current_version():<br/>        raise ConcurrentModificationError('Ooops!!!!')<br/>    super(MyModel, self).save(*args, **kwargs)<br/></code></pre><br/><br/><p>And, of course, for either of these concurrency mechanisms to be robust, you have to consider <a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/" rel="nofollow">transactional control</a>.  Neither of these models are fully workable if you can't guarantee ACID properties of your transactions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR SIMILAR FOR COMPOSIT PRIMARI KEY
    </pattern>
    <template>
<![CDATA[<p>A work around is to create a surrogate key (an auto increment column) as the primary key column and place a unique index on your domain composite key.</p><br/><br/><p>Foreign keys will then refer to the surrogate primary key column.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USERPROFIL FORM IN DJANGO WITH FIRST NAM LAST NAM MODIF
    </pattern>
    <template>
<![CDATA[<p>Here is how I finally did : </p><br/><br/><pre><code>class UserProfileForm(forms.ModelForm):<br/>    first_name = forms.CharField(label=_(u'Prénom'), max_length=30)<br/>    last_name = forms.CharField(label=_(u'Nom'), max_length=30)<br/><br/>    def __init__(self, *args, **kw):<br/>        super(UserProfileForm, self).__init__(*args, **kw)<br/>        self.fields['first_name'].initial = self.instance.user.first_name<br/>        self.fields['last_name'].initial = self.instance.user.last_name<br/><br/>        self.fields.keyOrder = [<br/>            'first_name',<br/>            'last_name',<br/>            ...some_other...<br/>            ]<br/><br/>    def save(self, *args, **kw):<br/>        super(UserProfileForm, self).save(*args, **kw)<br/>        self.instance.user.first_name = self.cleaned_data.get('first_name')<br/>        self.instance.user.last_name = self.cleaned_data.get('last_name')<br/>        self.instance.user.save()<br/><br/>    class Meta:<br/>        model = UserProfile<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EAS OF BUILD A REST INTERFAC
    </pattern>
    <template>
<![CDATA[<p>This is probably pretty easy to do.</p><br/><br/><p>URL mappings are easy to construct, for example:</p><br/><br/><pre><code>urlpatterns = patterns('books.views',<br/>  (r'^books/$', 'index'),<br/>  (r'^books/(\d+)/$', 'get'))<br/></code></pre><br/><br/><p>Django supports <a href="http://docs.djangoproject.com/en/dev/topics/serialization/" rel="nofollow">model serialization</a>, so it's easy to turn models into XML:</p><br/><br/><pre><code>from django.core import serializers<br/>from models import Book<br/><br/>data = serializers.serialize("xml", Book.objects.all())<br/></code></pre><br/><br/><p>Combine the two with <a href="http://www.ibm.com/developerworks/linux/library/l-cpdecor.html" rel="nofollow">decorators</a> and you can build fast, quick handlers:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>from django.shortcuts import get_object_or_404<br/><br/>def xml_view(func):<br/>  def wrapper(*args, **kwargs):<br/>    result = func(*args, **kwargs)<br/>    return HttpResponse(serializers.serialize("xml", result),<br/>        mimetype="text/xml")<br/>  return wrapper<br/><br/>@xml_view<br/>def index(request):<br/>  return Books.objects.all()<br/><br/>@xml_view<br/>def get(request, id):<br/>  return get_object_or_404(Book, pk=id)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB FRAMEWORK FOR SOMEON WHO WANT A JOB
    </pattern>
    <template>
<![CDATA[<p>As a long-time ASP.NET guy, I've recently gone through a similar decision process to figure out what other web frameworks I should try.  Here's what I learned so far which may apply to your case too: </p><br/><br/><ul><br/><li>framework/platofrm choices (and hence job opportunities) are highly regional--  the Bay Area job market differs alot from what you'll find in NYC, Chicago, Montreal, or London.  Look at local job listings (craigslist and indeed are good places to start) to get a good sense at what's in demand.</li><br/><li>similarly, usage varies alot based on the size and type of company. if you want to get a job in a large company, Spring MVC and ASP.NET MVC may be your best bets.  In small companies, DJango and (especially) Rails seem to be on the rise.</li><br/><li>usage also sometimes varies by industry.  for example, many HR apps seem be to .NET based, while financial/banking apps seem to favor Java. if you want to work in a particular industry, check out what up-and-coming companies in that industry are using.</li><br/><li>when investing your scarce time in learning something new, favor technologies which are on the upswing of the adoption curve (e.g. Rails) rather than frameworks with wider adoption which may not be growing as fast.  Also be wary of very early or niche frameworks which may not ever gain wide adoption. </li><br/><li>the one common thread between most (or almost all) frameworks gaining in popularity is that they're MVC frameworks and rely heavily on a solid understanding of REST. Learning those concepts in depth is a good idea.  </li><br/><li>before deciding to invest a <em>lot</em> of time in one framework, gain a basic understanding of several of them, so you can get a reasonable sense of what you like and don't about each-- and so if you end up applying for a job using a framework you haven't learned, at least you'll be able to talk intelligently about it.</li><br/><li>If you focus on what you enjoy, you'll be more motivated to learn it.  For example, personally I found Rails (regarless of employment opportunities) more interesting than Spring or Django, so I decided to focus on Rails first. Others may have different impressions-- follow your programmer instincts.  That said, there are often few jobs using technologies you find fascinating, so try to strike the right balance: technology you like that many companies are actually hiring people to use! </li><br/><li>once you answer the basic "what framework" question, there are many more questions lurking, including picking a javascript framework, validation framework, an ORM, etc. Don't worry too much about those choices yet-- when starting, just pick the default implementation for your framework.  But as you get more advanced, the same argument about frameworks also hold for those other things-- e.g. it's useful to know a few ORMs.</li><br/></ul><br/><br/><p>Personally, I decided on this approach:</p><br/><br/><ul><br/><li>continue building stuff in what I knew best (ASP.NET) but transition all work to ASP.NET MVC, where I can better understand MVC and REST concepts which apply cross-platform </li><br/><li>learn JQuery (again, platform neutral)</li><br/><li>blow off the ORM choice alltogether for now-- too many other things to worry about</li><br/><li>build a few projects in Rails, which is the framework I see used most in the newer SF-Bay-Area startups I've been looking at</li><br/><li>learn the basics (e.g. read a book or two, try a few samples) about Python/Django, Java/Spring, and Groovy/Grails.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABL NAME IN A DJANGO APP
    </pattern>
    <template>
<![CDATA[<pre><code>from django.db import connection<br/>tables = connection.introspection.table_names()<br/>seen_models = connection.introspection.installed_models(tables)<br/></code></pre><br/><br/><p>As seen in the syncdb command for manage.py.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME DJANGO SET ACCESS BY STAFF
    </pattern>
    <template>
<![CDATA[<p>Something like <a href="http://code.google.com/p/django-values/" rel="nofollow">dbsettings</a> (as you mentioned) seems like the way to go. From the <a href="http://code.google.com/p/django-values/source/browse/trunk/dbsettings/dbsettings.txt" rel="nofollow">reasons for existence</a> for that project:</p><br/><br/><blockquote><br/>  <p>Not all settings belong in<br/>  <code>settings.py</code>, as it has some<br/>  particular limitations:</p><br/>  <br/>  <ul><br/>  <li><p>Settings are project-wide. This not only requires apps to clutter up<br/>    <code>settings.py</code>, but also increases the chances of naming<br/>  conflicts.</p></li><br/>  <li><p>Settings are constant throughout an instance of Django. They cannot be<br/>    changed without restarting the application.</p></li><br/>  <li><p>Settings require a programmer in order to be changed. This is true even<br/>    if the setting has no functional impact on anything else.</p></li><br/>  </ul><br/></blockquote><br/><br/><p>If dbsettings doesn't work for you, then implement your own, or fork it. It doesn't seem like it'd be too arduous.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAMMAT OBTAIN THE MAX LENGTH OF A DJANGO MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p><code>Person._meta.get_field('name').max_length</code> will give you this value. <s>But having to use <code>_meta</code> suggests this is something you shouldn't do in normal usage.</s></p><br/><br/><p>Edit: as Carl pointed out, this naming is misleading and it does seem quite acceptable to use it: <a href="http://www.b-list.org/weblog/2007/nov/04/working-models/" rel="nofollow">http://www.b-list.org/weblog/2007/nov/04/working-models/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATPLOTLIB IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You need to remove the <code>num</code> parameter from the <a href="http://matplotlib.sourceforge.net/api/pyplot%5Fapi.html#matplotlib.pyplot.figure" rel="nofollow">figure constructor</a> and <a href="http://matplotlib.sourceforge.net/api/pyplot%5Fapi.html#matplotlib.pyplot.close" rel="nofollow">close</a> the figure when you're done with it.</p><br/><br/><pre><code>import matplotlib.pyplot<br/><br/>def test_matplotlib(request):<br/>    f = figure(figsize=(6,6))<br/>    ....<br/>    matplotlib.pyplot.close(f)<br/></code></pre><br/><br/><p>By removing the <code>num</code> parameter, you'll avoid using the same figure at the same time. This could happen if 2 browsers request the image at the same time. If this is not an issue, another possible solution is to use the <a href="http://matplotlib.sourceforge.net/api/figure%5Fapi.html#matplotlib.figure.Figure.clear" rel="nofollow">clear</a> method, i.e. <code>f.clear()</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLEVER WAY TO GET THE PREVIOUS NEXT ITEM USE THE DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>You're in luck! Django creates <code>get_next_by_foo</code> and <code>get_previous_by_foo</code> methods by default for <code>DateField</code> &amp; <code>DateTimeField</code> as long as they do not have <code>null=True</code>.</p><br/><br/><p>For example:</p><br/><br/><pre><code>&gt;&gt;&gt; from foo.models import Request<br/>&gt;&gt;&gt; r = Request.objects.get(id=1)<br/>&gt;&gt;&gt; r.get_next_by_created()<br/>&lt;Request: xyz246&gt;<br/></code></pre><br/><br/><p>And if you reach the end of a set it will raise a <code>DoesNotExist</code> exception, which you could easily use as a trigger to return to the beginning of the set:</p><br/><br/><pre><code>&gt;&gt;&gt; r2 = r.get_next_by_created()<br/>&gt;&gt;&gt; r2.get_next_by_created()<br/>...<br/>DoesNotExist: Request matching query does not exist.<br/></code></pre><br/><br/><p>Further reading: <a href="http://docs.djangoproject.com/en/dev/ref/models/instances/#extra-instance-methods" rel="nofollow">Extra instance methods</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IDIOM TO CHECK IF STRING IS EMPTI PRINT DEFAULT
    </pattern>
    <template>
<![CDATA[<pre><code>displayname = firstname + lastname or username<br/></code></pre><br/><br/><p>will work if firstname and last name has 0 length blank string</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIMIT ARE WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Web frameworks tend to optimize around building websites, making most normal use cases simpler to accomplish.  Once you start to do more "out of the box" stuff with a framework, you might find that you spend more time working around it then you save using it in the first place.</p><br/><br/><p>It's hard to generalize here (especially since I've really only worked in-depth with Django), so I'll offer some advice based on my own experiences developing a JSON API using Django:</p><br/><br/><p>Simple put, I don't recommend using Django to write a REST API.  In my own experience, I really didn't find anything worth writing home about.  I didn't need Django's templating system, so all that I really made use of was the URL dispatching and ORM.  Even then, I had to do some hacks to get the URL dispatcher to do what I wanted -- had I not used other features it would've been faster to use a different URL system, in fact.  In your case, Django's ORM wouldn't even be suitable since it doesn't support multiple databases (unless you're using 1.2 alphas...).  Compound that with Django's lack of a good startup signal, and Django starts to look pretty bad for the job.</p><br/><br/><p>If I were in your shoes, I'd dig around for specific libraries that did what I needed (ORM, WSGI, etc) and just use them, rather than trying to bend and hammer Django into something that suits my needs.</p><br/><br/><p>On a totally different note, you might want to take a look at <a href="http://www.tornadoweb.org/" rel="nofollow">Tornado</a> as a possible HTTP frontend.  It's both simple and fast.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP HTML IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I would suggest <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">Beautifulsoup</a>.  It has a wonderful parser that can deal with malformed tags quite gracefully.  Once you've read in the entire tree you can just output the result.</p><br/><br/><pre><code>from BeautifulSoup import BeautifulSoup<br/>tree = BeautifulSoup(bad_html)<br/>good_html = tree.prettify()<br/></code></pre><br/><br/><p>I've used this many times and it works wonders.  If you're simply pulling out the data from bad-html then BeautifulSoup really shines when it comes to pulling out data.</p><br/><br/><p>Hope that helps,</p><br/><br/><p>Will</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WORK WITH UNSUPPORT MYSQL DRIVER SUCH AS GEVENT MYSQL OR CONCURR S MYSQL DRIVER
    </pattern>
    <template>
<![CDATA[<p>three cheers for @traviscline's suggestion to go with <a href="https://github.com/petehunt/PyMySQL/" rel="nofollow">pymysql</a>. his suggestion was based on <a href="https://tarekziade.wordpress.com/2011/07/12/firefox-sync-python/" rel="nofollow">this post from mozilla</a>.  all it takes is a <a href="https://groups.google.com/group/django-users/browse_thread/thread/cbef429d014c1ad9/" rel="nofollow">simple patch to your manage.py file</a></p><br/><br/><pre><code>#!/usr/bin/env python<br/>+try:<br/>+    import pymysql<br/>+    pymysql.install_as_MySQLdb()<br/>+except ImportError:<br/>+    pass <br/></code></pre><br/><br/><p>changing the import in your settings file, and monkeypatch() since pymysql is a pure python driver.  </p><br/><br/><p>travis mentioned that he tests for compatability by changing the imports and running the unittests for pymysql, mysqldb, and myconnpy.  </p><br/><br/><p>note that there are already <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=668664" rel="nofollow">examples of finer details to watch out for</a> - but overall this is an elegant, maintainable solution.  i will update when i get this running in production!  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGI DJANGO PASS USERNAM BACK TO APACH FOR ACCESS LOG
    </pattern>
    <template>
<![CDATA[<p>You can only do it if using embedded mode and only if you use a separate package called apswigpy, which provides a Python binding for original Apache request object. The mod_wsgi package provides an optional mechanism for allowing original Apache request object to be passed as Python CObject reference in WSGI environment. You use that in conjunction with apswigpy something like:</p><br/><br/><pre><code>from apache.httpd import request_rec<br/>r = request_rec(environ['apache.request_rec'])<br/>r.user = user<br/></code></pre><br/><br/><p>At least I think that will setup the appropriate information which access logging can then use.</p><br/><br/><p>You should really take this discussion over to the mod_wsgi mailing list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DO WITH MEDIA ROOT
    </pattern>
    <template>
<![CDATA[<p>You're not the only one who wonders; check out <a href="http://code.djangoproject.com/ticket/10650" rel="nofollow">Django ticket #10650</a>.  Based on the comments by Django developers there, I think this pretty much sums up what <code>MEDIA_ROOT</code> is used for:</p><br/><br/><blockquote><br/>  <p>Unfortunately, Django is also at fault for being far too vague in its docs about what<br/>  MEDIA_ROOT and MEDIA_URL are used for. Searching through Django's code confirms that <br/>  MEDIA_ROOT &amp; MEDIA_URL are used for file upload, and that MEDIA_URL is provided as a <br/>  convenience to templates via the default context processors (available when using <br/>  RequestContext??).</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT APP FROM DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>In an admin.py you know will definitely be loaded, try:</p><br/><br/><pre><code>admin.site.unregister(User)<br/>admin.site.unregister(Group)<br/>admin.site.unregister(Site)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAIN ENGLISH WHAT ARE DJANGO GENER VIEW
    </pattern>
    <template>
<![CDATA[<p>Django generic views are just view functions (regular old python functions) that do things that are very common in web applications.</p><br/><br/><p>Depending on the type of app you are building, they can save you from writing a lot of very simple views.</p><br/><br/><p>For example, the <code>direct_to_template</code> generic view simply renders a template with the <code>RequestContext</code> (which means the template has access to information on the request, like the current user, etc).</p><br/><br/><p>As a simple example, you can go from writing things like this:</p><br/><br/><pre><code># urls.py<br/>url('^some-url/$', some_view)<br/><br/># views.py<br/>def some_view(request):<br/>    return render_to_response('template_name.html', context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>To just this:</p><br/><br/><pre><code># urls.py<br/>url('^some-url/$', direct_to_template, {'template': 'template_name.html'})<br/><br/># views.py doesn't need any code for this view anymore<br/></code></pre><br/><br/><p>There are also more complicated generic views for common actions such as "showing a list of models", or "adding a model to the db".</p><br/><br/><p>Also, because generic views are just functions, you can call them within your own view functions to do "most of the work", when you need something that is a bit different from the generic cases.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL ERROR CAUGHT AN EXCEPT WHILE RENDER THE IMAGINGFT C MODUL IS NOT INSTAL
    </pattern>
    <template>
<![CDATA[<p>I've had this problem as well. Couldn't resolve it with PIL 1.1.6 nor with PIL 1.1.7. I installed py26-pil from ports and presto, it works.</p><br/><br/><pre><code>sudo port install py26-pil<br/></code></pre><br/><br/><p>If you don't have ports, go to <a href="http://www.macports.org/" rel="nofollow">http://www.macports.org/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A VARIABL IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I don't think it's intended you should alter data in your templates. For in your specific case, you could instead use the <code>forloop.counter</code> variable.</p><br/><br/><p>For example: </p><br/><br/><pre><code>{% for op in options %}<br/>  {{op.choices}}&lt;input type="radio" name="template" id="template{{forloop.counter}}" value="template{{forloop.counter}}"/&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>Also note that I added that number to the <code>id</code> attributes of the <code>&lt;input /&gt;</code> tag. Otherwise you'll have multiple inputs with the same id.</p><br/><br/><p>EDIT: I didn't note that it was a radio input. You could of course have the same name for each <code>&lt;input type="radio" /&gt;</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( PYTHON ) TEMPLATESYNTAXERROR FOR STATEMENT WITH FIVE WORD SHOULD END IN REVERSED
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>This is using the web app framework,<br/>  not Django.</p><br/></blockquote><br/><br/><p>But framework apart, you must be using Django's templating -- and apparently in an old version, which does not support the "automatic unpacking" style of <code>for</code> -- probably the <a href="http://www.djangoproject.com/documentation/0.96/templates/#for" rel="nofollow">0.96</a> version that's the default for App Engine.  To use any part of more modern Django (including "just the templates") you must have a <code>settings.py</code> file and do:</p><br/><br/><pre><code>import os<br/>os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'<br/><br/>from google.appengine.dist import use_library<br/>use_library('django', '1.1')<br/></code></pre><br/><br/><p>as per <a href="http://code.google.com/appengine/docs/python/tools/libraries.html#Django" rel="nofollow">the docs</a>.  After that you can <code>from django import template</code> and you'll be using the 1.1 version of Django's templating engine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST FAIL
    </pattern>
    <template>
<![CDATA[<p>Solution: Make sure you explicitly define submodules (e.g. <code>common.media</code>) in <code>INSTALLED_APPS</code> and not just the parent module (e.g. <code>common</code>) to make sure that the models are picked up and the test is able to run.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YWAY TO GET PDB AND MAC TERMIN TO PLAY NICE
    </pattern>
    <template>
<![CDATA[<p>OK - this works for me I created a ~/.pdbrc and added</p><br/><br/><blockquote><br/>  <p>import os<br /><br/>   os.system("stty sane")</p><br/></blockquote><br/><br/><p>Now each time pdb is run it sets the line settings back to sane.</p><br/><br/><p>If I fall out to the terminal then I still have to do it manually - but it solves having to quit runserver and reset all the time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNC THE DB IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>management.call_command('syncdb', interactive=False)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LANGUAG FROM DJANGO URL
    </pattern>
    <template>
<![CDATA[<p>Checkout <a href="https://bitbucket.org/carljm/django-localeurl" rel="nofollow">django-locale-url</a>.</p><br/><br/><p>It provides a middleware that does exactly what you are asking for, so you don't need to check for the language in urls.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO LAZY LOAD FIELD IN A MODEL
    </pattern>
    <template>
<![CDATA[<p>The functionality happens when you make the query, using the <code>defer()</code> statement, instead of in the model definition. Check it out here in the docs:<br/><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#defer" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#defer</a></p><br/><br/><p>Now, actually, your alternative solution of refactoring and pulling the data into another table is a really good solution. Some people would say that the need to lazy load fields means there is a design flaw, and the data should have been modeled differently.</p><br/><br/><p>Either way works, though!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DROP ALL TABL FROM DATABAS
    </pattern>
    <template>
<![CDATA[<p>AFAIK there is no management command to drop all tables. If you don't mind hacking Python you can write your own custom command to do that. You may find the <code>sqlclear</code> option interesting. Documentation says that <code>./manage.py sqlclear</code> <em>Prints the DROP TABLE SQL statements for the given app name(s).</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT SEARCH WHOOSH VS SOLR
    </pattern>
    <template>
<![CDATA[<p>Whoosh is actually very fast for a python-only implementation. That said, it's still at least an order of magnitude slower. Depending on the amount of data you need to index and search and the requirements on the maximum allowable latency and concurrent searches, it may not be an option.</p><br/><br/><p>SOLR is a bit of a complicated beast, but it's by far the most comprehensive search solution. Mix it with <a href="http://code.google.com/p/solrpy/" rel="nofollow">solrpy</a> for stunning results. Yes, you will need java hosting.</p><br/><br/><p>You might also want to check out the <a href="http://xapian.org/docs/bindings/python/" rel="nofollow">python bindings for xapian</a>. Xapian is very very fast, but less of a complete solution than SOLR. They are GPL licensed though, so that may/may not be viable for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIME APP SOCKET.IO VS PUSHERAPP
    </pattern>
    <template>
<![CDATA[<p>Socket.io is using Ajax long polling which requires more resources.<br/>Pusherapp on the other hand is real push.<br/>Pusherapp has various libraries, they have gem for rails, wrappers for python and GAE.<br/>You can also try other services like:</p><br/><br/><ol><br/><li>Pubnub</li><br/><li>Beaconpush</li><br/><li>Hookbox</li><br/><li>Pubsubhubbub (using XMPP instead of websockets)</li><br/><li>Kwwika</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETERMIN ZODIAC ASTROLOG STAR SIGN FROM A BIRTHDAY IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I've done this before.  The simplest solution that I ended up with was an array of the following key/values:</p><br/><br/><pre><code>120:Sag, 218:Cap, 320:Aqu, 420:Pis, 521:Ari,<br/>621:Tau, 722:Gem, 823:Can, 923:Leo, 1023:Vir<br/>1122:Lib, 1222:Scorp, 1231: Sag<br/></code></pre><br/><br/><p>Then you write the birth date in the <code>mdd</code> format, ie, month number (starting with 1 for January) and two digit day number (01-31).  Iterate through the array, and if the date is less than an item in the array, you have your star sign.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL STRAIGHT TO HTML TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>As long as there is some uniquely identifying section in the URL, you will not need to create an entry in urls.py for each direct-template url.</p><br/><br/><p>For example, you could say that all urls ending in ".html" are referencing a direct file from the templates.</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    (r'(.+\.html$', 'django.views.generic.simple.direct_to_template'),<br/>    # ...<br/>)<br/></code></pre><br/><br/><p>Take a look at <a href="http://docs.djangoproject.com/en/1.2/ref/generic-views/#django-views-generic-simple-direct-to-template" rel="nofollow">http://docs.djangoproject.com/en/1.2/ref/generic-views/#django-views-generic-simple-direct-to-template</a> for details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEXT PARAMET REDIRECT DJANGO.CONTRIB.AUTH.LOGIN
    </pattern>
    <template>
<![CDATA[<p>I confess I usually use 2 redirects in order to get something like this to work.</p><br/><br/><p>First, Make your own <code>registration/login.html</code> page. You can copy-and-paste the html example in this section of the <a href="http://docs.djangoproject.com/en/1.2/topics/auth/#django.contrib.auth.views.login" rel="nofollow">authentication docs</a> to make the process a little easier. Instead of using the dynamic <code>'{{ next }}</code> variable from the context, however, hardwire the value of next to go to a generic landing view of logged-in users</p><br/><br/><pre><code>&lt;input type="submit" value="login" /&gt;<br/>&lt;input type="hidden" name="next" value="/gallery/" /&gt;<br/></code></pre><br/><br/><p>Then, in the view that you map to the <code>/gallery/</code> URL, extract the User object from the request (since the user will now be logged in, especially if the gallery view is wrapped in a <code>@permission_required</code> or <code>@login_required</code> decorator. Use that view to redirect to the appropriate user-specific gallery page:</p><br/><br/><pre><code>@login_required<br/>def gallery(request):<br/>    url = '/gallery/%s/' % request.user.username<br/>    return HttpResponseRedirect(url)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BE MY HUMAN COMPIL WHAT IS WRONG WITH THI PYTHON 2.5 CODE
    </pattern>
    <template>
<![CDATA[<p>The alternate syntax <code>except SomeException as err</code> <a href="http://docs.python.org/whatsnew/2.6.html#pep-3110-exception-handling-changes" rel="nofollow">is new in 2.6</a>. You should use <code>except SomeException, err</code> in 2.5.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUIET PYLINT FALSE POSIT WHEN USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Ok, this is a serious hack but I got pylint and django working together.  Since the errors give a text description containing the name of the class they refer to, I turned off the reports in the pylintrc file and wrote a bash script to pipe the output of pylint into a series of <code>grep -v 'text description'</code> commands.  The output is the name of the files checked, followed by problems not removed by the script (if there are any).</p><br/><br/><p>My only disappointment with this approach is losing the pylint score, as the approach doesn't work if pylint is also spitting out the reports.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE FRESHEN TEST FAIL ON UNDEFIN TEST
    </pattern>
    <template>
<![CDATA[<p>There is an open ticket requesting this at <a href="https://github.com/rlisagor/freshen/issues/16" rel="nofollow">https://github.com/rlisagor/freshen/issues/16</a><br/>I also attached a link to a github branch implementing this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S ORM MANAG TO FETCH FOREIGN OBJECT WHEN THEY ARE ACCESS
    </pattern>
    <template>
<![CDATA[<p>Django uses a <a href="http://docs.python.org/reference/datamodel.html#customizing-class-creation" rel="nofollow">metaclass</a> (<a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/base.py#L22" rel="nofollow"><code>django.db.models.base.ModelBase</code></a>) to customize the creation of model classes.  For each object defined as a class attribute on the model (<code>user</code> is the one we care about here), Django first looks to see if it defines a <code>contribute_to_class</code> method.  If the method is defined, Django calls it, allowing the object to customize the model class as it's being created.  If the object doesn't define <code>contribute_to_class</code>, it is simply assigned to the class using <code>setattr</code>.</p><br/><br/><p>Since <code>ForeignKey</code> is a Django model field, it defines <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/fields/related.py#L872" rel="nofollow"><code>contribute_to_class</code></a>.  When the <code>ModelBase</code> metaclass calls <code>ForeignKey.contribute_to_class</code>, the value assigned to <code>ModelClass.user</code> is an instance of <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/fields/related.py#L266" rel="nofollow"><code>django.db.models.fields.related.ReverseSingleRelatedObjectDescriptor</code></a>.</p><br/><br/><p><code>ReverseSingleRelatedObjectDescriptor</code> is an object that implements Python's <a href="http://docs.python.org/reference/datamodel.html#descriptors" rel="nofollow">descriptor protocol</a> in order to customize what happens when an instance of the class is accessed as an attribute of another class.  In this case, the descriptor is used to <a href="http://en.wikipedia.org/wiki/Lazy_loading" rel="nofollow">lazily load</a> and return the related model instance from the database the first time it is accessed.</p><br/><br/><pre><code># make a user and an instance of our model<br/>&gt;&gt;&gt; user = User(username="example")<br/>&gt;&gt;&gt; my_instance = MyModel(user=user)<br/><br/># user is a ReverseSingleRelatedObjectDescriptor<br/>&gt;&gt;&gt; MyModel.user<br/>&lt;django.db.models.fields.related.ReverseSingleRelatedObjectDescriptor object&gt;<br/><br/># user hasn't been loaded, yet<br/>&gt;&gt;&gt; my_instance._user_cache<br/>AttributeError: 'MyModel' object has no attribute '_user_cache'<br/><br/># ReverseSingleRelatedObjectDescriptor.__get__ loads the user<br/>&gt;&gt;&gt; my_instance.user<br/>&lt;User: example&gt;<br/><br/># now the user is cached and won't be looked up again<br/>&gt;&gt;&gt; my_instance._user_cache<br/>&lt;User: example&gt;<br/></code></pre><br/><br/><p>The <code>ReverseSingleRelatedObjectDescriptor.__get__</code> method is called every time the <code>user</code> attribute is accessed on the model instance, but it's smart enough to only look up the related object once and then return a cached version on subsequent calls.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRATEGI FOR ENCRYPT WITH DJANGO + POSTGR
    </pattern>
    <template>
<![CDATA[<p>What are you protecting against? If attacker would get access to your DB/filesystem, he would find how you decrypt data &amp; keys. Hiding your encription key is not an easy task (and rarely implemented in "usual" applications).</p><br/><br/><p>I would spend more time on protecting the server and fixing all general security issues.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS CONFIG IN DJANGO 1.2
    </pattern>
    <template>
<![CDATA[<p>Yeah, it is a little bit complicated.</p><br/><br/><p>There are a number of ways you could implement it. Basically, you need some way of indicating which models are associated with which database. </p><br/><br/><h1>First option</h1><br/><br/><p>Here's the code that I use; hope it helps.</p><br/><br/><pre><code>from django.db import connections<br/><br/>class DBRouter(object):<br/>    """A router to control all database operations on models in<br/>    the contrib.auth application"""<br/><br/>    def db_for_read(self, model, **hints):<br/>        m = model.__module__.split('.')<br/>        try:<br/>            d = m[-1]<br/>            if d in connections:<br/>                return d<br/>        except IndexError:<br/>            pass<br/>        return None<br/><br/>    def db_for_write(self, model, **hints):<br/>        m = model.__module__.split('.')<br/>        try:<br/>            d = m[-1]<br/>            if d in connections:<br/>                return d<br/>        except IndexError:<br/>            pass<br/>        return None<br/><br/>    def allow_syncdb(self, db, model):<br/>        "Make sure syncdb doesn't run on anything but default"<br/>        if model._meta.app_label == 'myapp':<br/>            return False<br/>        elif db == 'default':<br/>            return True<br/>        return None<br/></code></pre><br/><br/><p>The way this works is I create a file with the name of the database to use that holds my models. In your case, you'd create a separate <code>models</code>-style file called <code>asterisk.py</code> that was in the same folder as the models for your app.</p><br/><br/><p>In your <code>models.py</code> file, you'd add</p><br/><br/><pre><code>from asterisk import *<br/></code></pre><br/><br/><p>Then when you actually request a record from that model, it works something like this:</p><br/><br/><ol><br/><li><code>records = MyModel.object.all()</code></li><br/><li>module for <code>MyModel</code> is <code>myapp.asterisk</code> </li><br/><li>there's a connection called "asterisk" so use<br/>it instead of "default"</li><br/></ol><br/><br/><h1>Second Option</h1><br/><br/><p>If you want to have per-model control of database choice, something like this would work:</p><br/><br/><pre><code>from django.db import connections<br/><br/>class DBRouter(object):<br/>    """A router to control all database operations on models in<br/>    the contrib.auth application"""<br/><br/>    def db_for_read(self, model, **hints):<br/>        if hasattr(model,'connection_name'):<br/>            return model.connection_name<br/>        return None<br/><br/>    def db_for_write(self, model, **hints):<br/>        if hasattr(model,'connection_name'):<br/>            return model.connection_name<br/>        return None<br/><br/>    def allow_syncdb(self, db, model):<br/>        if hasattr(model,'connection_name'):<br/>            return model.connection_name<br/>        return None<br/></code></pre><br/><br/><p>Then for each model:</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    connection_name="asterisk"<br/>    #etc...<br/></code></pre><br/><br/><p>Note that I have not tested this second option.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFICI FILTER A STRING AGAINST A LONG LIST OF WORD IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could do this very simply using the set and string functionality in Python and see how it performs (premature optimisation being the root of all evil!):</p><br/><br/><pre><code>common_words = frozenset(("if", "but", "and", "the", "when", "use", "to", "for"))<br/>title = "When to use Python for web applications"<br/>title_words = set(title.lower().split())<br/>keywords = title_words.difference(common_words)<br/>print(keywords)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO THE PYTHONPATH IN WINDOW 7
    </pattern>
    <template>
<![CDATA[<p>You know what has worked for me really well on windows.<br/>My Computer > Properties > Advanced System Settings > Environment Variables > Then under system variables I create a new Variable called "PythonPath". In this variable I have "C:\Python27\Lib;C:\Python27\DLLs;C:\Python27\Lib\lib-tk;C:\other-foolder-on-the-path"</p><br/><br/><p><img src="http://i.stack.imgur.com/ZGp36.png" alt="enter image description here"><br/>This is the best way that has worked for me which I hadn't found in any of the docs offered.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT A CSV FILE TO SQLITE3 ( OR MYSQL ) PYTHON
    </pattern>
    <template>
<![CDATA[<p>For MySQL imports:</p><br/><br/><pre><code>mysqlimport [options] db_name textfile1 [textfile2 ...]<br/></code></pre><br/><br/><p>For SQLite3 imports: </p><br/><br/><p>ref <a href="http://stackoverflow.com/questions/1045910/how-can-i-import-load-a-sql-or-csv-file-into-sqlite">http://stackoverflow.com/questions/1045910/how-can-i-import-load-a-sql-or-csv-file-into-sqlite</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYDEV NOT RECOGN PYTHON INSTAL WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>go in the menu to <strong>window -> preference -> pydev -> Interpreter - Python</strong> ; and add the python interpreter there, if you installed the django in a virtual environment you should add the python interpreter of the virtual env ; after adding the interpreter by clicking on <strong>new</strong> you should now click on <strong>Apply</strong> , you should see now all the system libs from PYTHONPATH added there between them Django .</p><br/><br/><p>hope this will help</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLEAN WAY TO UNITTEST FILEFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are several ways you could tackle this but they're all ugly since unit tests are supposed to be isolated but files are all about durable changes.</p><br/><br/><p>My unit tests don't run on a system with production data so it's been easy to simply reset the upload directory after each run with something like <code>git reset --hard</code>. This approach is in some ways the best simply because it involves no code changes and is guaranteed to work as long as you start with good test data. </p><br/><br/><p>If you don't actually need to do anything with that file after testing your model's save method, I'd recommend using Michael Foord's excellent <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow">Mock library</a> to completely fake the <code>File</code> instance (i.e. something like <code>mock_file = Mock(spec=django.core.files.File); mock_file.read.return_value = "fake file contents"</code>) so you can completely avoid changes to your file handling logic. The Mock library has a couple of ways to <a href="http://www.voidspace.org.uk/python/mock/patch.html#patch-object" rel="nofollow">globally patch</a> Django's <a href="http://docs.djangoproject.com/en/dev/ref/files/file/" rel="nofollow">File class</a> within a test method which is about as easy as this will get.</p><br/><br/><p>If you need to have a real file (i.e. for serving as part of a test, processing with an external script, etc.) you can use something similar to Mirko's example and create a <a href="http://docs.djangoproject.com/en/dev/ref/files/file/" rel="nofollow">File object</a> after making sure it'll be stored somewhere appropriate - here are three ways to do that:</p><br/><br/><ul><br/><li>Have your test <code>settings.MEDIA_ROOT</code> point to a temporary directory (see the Python <a href="http://docs.python.org/library/tempfile.html#tempfile.mkdtemp" rel="nofollow">tempfile</a> module's <code>mkdtemp</code> function). This works fine as long as you have something like a separate <code>STATIC_ROOT</code> which you use for the media files which are part of your source code.</li><br/><li>Use a custom <a href="http://docs.djangoproject.com/en/dev/ref/files/storage/" rel="nofollow">storage manager</a></li><br/><li>Set the file path manually on each File instance or have a custom <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField.upload_to" rel="nofollow">upload_to</a> function to point somewhere which your test setup/teardown process purges such as a test subdirectory under <code>MEDIA_ROOT</code>.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF TOKEN MISS OR INCORRECT EVEN THOUGH I HAVE CSRF TOKEN
    </pattern>
    <template>
<![CDATA[<p>You have to use a <a href="http://docs.djangoproject.com/en/1.3/ref/templates/api/#django.template.RequestContext" rel="nofollow">RequestContext</a> object to get the context, then pass the results in to your <em>render_to_response()</em> function. <em>RequestContext</em> adds in a required CSRF token.</p><br/><br/><pre><code>from django.template import RequestContext<br/>from django.shortcuts import render_to_response<br/><br/>csrfContext = RequestContext(request)<br/>return render_to_response(some_template, csrfContext)<br/></code></pre><br/><br/><p>As a side note, you can also use <em>RequestContext</em> to add contexts/dictionaries intended for the template. For instance, I frequently use:</p><br/><br/><pre><code>initialData = {'form': theForm, 'user_status': 'online'}<br/>csrfContext = RequestContext(request, initialData)<br/>return render_to_response(show_template, csrfContext)<br/></code></pre><br/><br/><p>As a (brief) explanation of what <em>RequestContext</em> does: most middleware creates something called a <em>context processor</em>, which is simply a function that supplies a context (dictionary) of variables. <em>RequestContext</em> looks for all the available context processors, gets their contexts, and appends them all to a single (giant) context.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A MODEL CLASS IN DJANGO SHELL FAIL
    </pattern>
    <template>
<![CDATA[<p>The model definition must come in an application - the error you're seeing there is that it tries to take the <code>__name__</code> <code>model_module</code> - which should be something like <code>project.appname.models</code> for <code>project\appname\models.py</code> - and get the app name, <code>appname</code>. In the interactive console, the module's <code>__name__</code> is <code>'__main__'</code> - so it fails.</p><br/><br/><p>To get around this, you'll need to specify the <code>app_label</code> yourself in the <code>Meta</code> class;</p><br/><br/><pre><code>&gt;&gt;&gt; from django.db import models<br/>&gt;&gt;&gt; class Poll(models.Model):<br/>...     question = models.CharField(max_length=200)<br/>...     pub_date = models.DateTimeField('date published')<br/>...     class Meta:<br/>...         app_label = 'test'<br/></code></pre><br/><br/><p>For explanation of why you can do that, look at that file mentioned in the traceback, <code>D:\Python25\lib\site-packages\django\db\models\base.py</code>:</p><br/><br/><pre><code>    if getattr(meta, 'app_label', None) is None:<br/>        # Figure out the app_label by looking one level up.<br/>        # For 'django.contrib.sites.models', this would be 'sites'.<br/>        model_module = sys.modules[new_class.__module__]<br/>        kwargs = {"app_label": model_module.__name__.split('.')[-2]}<br/>    else:<br/>        kwargs = {}<br/></code></pre><br/><br/><p>(Where <code>meta</code> is the <code>Meta</code> class, see just above in that file.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIQUE TOGETH AND BLANK TRUE
    </pattern>
    <template>
<![CDATA[<p>Using <code>unique_together</code>, you're telling Django that you don't want any two <code>MyModel</code> instances with the same <code>parent</code> and <code>name</code> attributes -- which applies even when <code>name</code> is an empty string.</p><br/><br/><p>This is enforced at the database level using the <code>unique</code> attribute on the appropriate database columns.  So to make any exceptions to this behavior, you'll have to avoid using <code>unique_together</code> in your model.</p><br/><br/><p>Instead, you can get what you want by overriding the <code>save</code> method on the model and enforcing the unique restraint there.  When you try to save an instance of your model, your code can check to see if there are any existing instances that have the same <code>parent</code> and <code>name</code> combination, and refuse to save the instance if there are.  But you can also allow the instance to be saved if the <code>name</code> is an empty string.  A basic version of this might look like this:</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    ...<br/><br/>    def save(self, *args, **kwargs):<br/><br/>        if self.name != '':<br/>            conflicting_instance = MyModel.objects.filter(parent=self.parent, \<br/>                                                          name=self.name)<br/>            if self.id:<br/>                # This instance has already been saved. So we need to filter out<br/>                # this instance from our results.<br/>                conflicting_instance = conflicting_instance.exclude(pk=self.id)<br/><br/>            if conflicting_instance.exists():<br/>                raise Exception('MyModel with this name and parent already exists.')<br/><br/>        super(MyModel, self).save(*args, **kwargs)<br/></code></pre><br/><br/><p>Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERYSET LEFT JOIN WITH AND
    </pattern>
    <template>
<![CDATA[<p>Unfortunately, the answer here is no.</p><br/><br/><p>The Django ORM, like most of Django, follows a philosophy that easy things should be easy and hard things should be possible.  In this case, you are definitely in the "hard things" area and the "possible" solution is to simply write the raw query.  There are definitely situations like this where writing the raw query can be difficult and feels kinda gross, but from the project's perspective situations like this are too rare to justify the cost of adding such functionality.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UGETTEXT AND UGETTEXT LAZI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>ugettext</code> is used to load a translation of a string <em>right now</em>.  <code>ugettext_lazy</code> returns an object that can eventually be turned into a string.  You need that if the <code>ugettext_lazy</code> call is evaluated before the proper locale has been set.</p><br/><br/><p><code>ugettext_lazy</code> can be used where you use a Unicode object.  Double-check your HTML output, it might look like this:</p><br/><br/><pre><code>&lt;django.utils.functional...&gt;<br/></code></pre><br/><br/><p>and the browser is ignoring it all as an unrecognized tag.</p><br/><br/><p>You don't need a lazy translation in this case, because you are immediately using the string.  If you really want to continue with ugettext_lazy for some reason, try this:</p><br/><br/><pre><code>return HttpResponse(ugettext_lazy("Hello").encode('utf-8'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER IP ADDRESS IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>def get_client_ip(request):<br/>    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')<br/>    if x_forwarded_for:<br/>        ip = x_forwarded_for.split(',')[0]<br/>    else:<br/>        ip = request.META.get('REMOTE_ADDR')<br/>    return ip<br/></code></pre><br/><br/><p>Make sure you have reverse proxy (if any) configured correctly (e.g. <code>mod_rpaf</code> installed for Apache).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CELERI WORK IN PYTHON SHELL BUT NOT IN MY DJANGO VIEW ( IMPORT PROBLEM )
    </pattern>
    <template>
<![CDATA[<p>I believe your tasks.py file needs to be in a django app (that's registered in settings.py) in order to be imported. Alternatively, you might try importing the tasks from an <code>__init__.py</code> file in your main project or one of the apps. </p><br/><br/><p>Also try starting celeryd from manage.py: </p><br/><br/><pre><code>$ python manage.py celeryd -E -B -lDEBUG<br/></code></pre><br/><br/><p>(<code>-E</code> and <code>-B</code> may or may not be necessary, but that's what I use). </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOUTH INTROSPECT RULE DOE N T WORK
    </pattern>
    <template>
<![CDATA[<p>I got it! :)</p><br/><br/><p>I changed this: <code>["^core/.fields/.ImageWithThumbsField",])</code></p><br/><br/><p>To this: <code>["^lib.thumbs.ImageWithThumbsField",])</code></p><br/><br/><p>This whole line is a <em>regular-expression</em> of python paths of <strong>Django field types</strong> (read this again, long sentence).</p><br/><br/><p><em>South</em> stumbled upon a field name <code>ImageWithThumbsField</code> that was declared in the path <code>lib.thumbs</code>. I gave him a wrong path, so South <em>still</em> didn't know what to do when stumbling upon this field.</p><br/><br/><p>Once I gave him the correct path, it knew how to handle the field once he got to it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE TO JAVASCRIPT AT THE TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I've had alot of success with the isoformat function in python:</p><br/><br/><pre><code>var selected_date = new Date("{{ selected_date.isoformat }}")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FROM PYTHON MANAGE.PI SHELL TO PYTHON SCRIPT
    </pattern>
    <template>
<![CDATA[<p>Try using a <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#writing-custom-django-admin-commands" rel="nofollow">Django management command</a> instead.</p><br/><br/><pre><code># myproject/myapp/management/commands/my_command.py<br/><br/>from django.core.management.base import NoArgsCommand<br/>from django.template import Template, Context<br/>from django.conf import settings<br/><br/>class Command(NoArgsCommand):<br/>    def handle_noargs(self, **options):<br/>        t=Template("My name is {myname}.")<br/>        c=Context({"myname":"John"})<br/>        f = open('write_test.txt', 'w')<br/>        f.write(t.render(c))<br/>        f.close<br/></code></pre><br/><br/><p>And then (if you follow the docs) you will be able to execute the command in the following fashion:</p><br/><br/><pre><code>python manage.py my_command<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INHERIT MODEL OBJECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If <code>A</code> can be concrete, you can do this all in one query using <code>select_related</code>.</p><br/><br/><pre><code>from django.db import connection<br/>q = A.objects.filter(NAME__istartswith='z').order_by('ORDER').select_related('b', 'c')<br/>for obj in q:<br/>   obj = obj.b or obj.c or obj<br/>   print repr(obj), obj.__dict__ # (to prove the subclass-specific attributes exist)<br/>print "query count:", len(connection.queries)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPLATEDOESNOTEXIST ON PYTHON APP ENGIN DJANGO 1.2 WHILE TEMPLAT RENDER REL PATH
    </pattern>
    <template>
<![CDATA[<p>This problem bit me too when I converted from 0.96 to 1.2 Django templates. I was initially pushed to do so when SDK 1.4.2 started issuing the warning that I needed to pick a version, but when I looked into the much-needed improvements in the template language, I was eager to make the change.</p><br/><br/><p>And then everything broke. Like you, I used a lot of relative paths in my <code>extends</code> and <code>include</code> commands. It took a lot of debugging and digging, but I did figure out the cause of the problem and a pretty good solution.</p><br/><br/><p>The cause: in Django 1.2, the code that loads template files started using a command called <code>safe_join</code> to join path parts (you can see the code in <code>google_appengine\lib\django_1_2\django\template\loaders\filesystem.py</code>) . It won't allow relative paths to go above what it thinks of as the top-level directory. This is the same thing as a web server being configured to prevent you gaining access to the server's whole filesystem just by sticking some <code>..</code>'s into your URL. The end result is that the </p><br/><br/><pre><code>{% extends "../templates/base.html" %}<br/></code></pre><br/><br/><p>that used to be just fine breaks the rules and it isn't going to work.</p><br/><br/><p>The way that I fixed this in my application without completely restructuring how my templates are laid out is by implementing a custom <em>TemplateLoader</em>. Django's template rendering engine allows an application to have many different classes that know how to find templates in different ways. If you look in the directory that I gave above, you'll see that there are several provided, and they are all classes that inherit from <em>BaseLoader</em>. I provided my own that is custom-tailored to how my templates are laid out.</p><br/><br/><p>My project has a Rails-like lay-out:</p><br/><br/><pre><code>app/<br/>   controllers/<br/>      home_controller.py<br/>      posts_controller.py<br/>   models/<br/>      ...<br/>   views/<br/>      home/<br/>          index.html<br/>          about.html<br/>      posts/<br/>          show.html<br/>          new.html<br/>      shared/<br/>          base.html<br/>          post.html<br/></code></pre><br/><br/><p>Every template extends <code>base.html</code> and a couple include <code>post.html</code>, and they previously used relative paths to get to their location in <code>base/</code>. Ideally, I didn't even want to use the <code>..</code> up-dir to get there, but it was required with 0.96. I created the following template loader to work with my scheme:</p><br/><br/><pre><code>from django.conf import settings<br/>from django.template import TemplateDoesNotExist<br/>from django.template.loader import BaseLoader<br/>from django.utils._os import safe_join<br/>import os<br/><br/>class MvcTemplateLoader(BaseLoader):<br/>    "A custom template loader for the MVCEngine framework."<br/><br/>    is_usable = True<br/><br/>    __view_paths = None<br/><br/>    def __init__(self, views_path):<br/>        self.views_path = views_path<br/>        # We only need to instantiate the view_paths class variable once.<br/>        if MvcTemplateLoader.__view_paths is None:<br/>            temp_paths = []<br/>            for each_path in os.listdir(views_path):<br/>                # We want to skip hidden directories, so avoid anything that starts with .<br/>                # This works on both Windows and *NIX, but could it fail for other OS's?<br/>                if not each_path.startswith('.'):<br/>                    full_path = os.path.join(views_path, each_path)<br/>                    if each_path == "shared":<br/>                        # The shared directory is special. Since templates in many other directories will be<br/>                        # inheriting from or including templates there, it should come second, right after the<br/>                        # root views directory. For now, it will be first.<br/>                        temp_paths.insert(0, full_path)<br/>                    else:<br/>                        temp_paths.append(full_path)<br/>            # The root views_path itself will always be first in order to give resolution precendence to templates<br/>            # that are specified with a parent directory. In other words, home/index.html will be immediately<br/>            # resolved with no ambiguity; whereas, index.html could resolve as bar/index.html rather than<br/>            # foo/index.html.<br/>            temp_paths.insert(0, views_path)<br/>            MvcTemplateLoader.__view_paths = temp_paths<br/><br/><br/>    def get_template_sources(self, template_name):<br/>        for template_dir in MvcTemplateLoader.__view_paths:<br/>            try:<br/>                yield safe_join(template_dir, template_name)<br/>            except UnicodeDecodeError:<br/>                # The template dir name was a bytestring that wasn't valid UTF-8.<br/>                raise<br/>            except ValueError:<br/>                # The joined path was located outside of this particular<br/>                # template_dir (it might be inside another one, so this isn't<br/>                # fatal).<br/>                pass<br/><br/>    def load_template_source(self, template_name, template_dirs=None):<br/>        tried = []<br/>        for filepath in self.get_template_sources(template_name):<br/>            try:<br/>                file = open(filepath)<br/>                try:<br/>                    return (file.read().decode(settings.FILE_CHARSET), filepath)<br/>                finally:<br/>                    file.close()<br/>            except IOError:<br/>                tried.append(filepath)<br/><br/>        error_msg = "Could not find %s in any of the views subdirectories." % template_name<br/>        raise TemplateDoesNotExist(error_msg)<br/>    load_template_source.is_usable = True<br/><br/>_loader = MvcTemplateLoader<br/></code></pre><br/><br/><p>And I caused my custom template loader to be included in the collection that Django tries by changing my application's <code>main</code> function to look like this:</p><br/><br/><pre><code>def main():    <br/>    from google.appengine.dist import use_library<br/>    use_library('django', '1.2')<br/><br/>    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'<br/><br/>    from django.conf import settings <br/>    views_path = os.path.join(os.path.dirname(__file__), 'app','views')<br/>    settings.TEMPLATE_LOADERS = (('gaemvclib.mvctemplateloader.MvcTemplateLoader', views_path), 'django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader')<br/></code></pre><br/><br/><p>(and then all the rest of the stuff that normally goes into your main function).</p><br/><br/><p>So, I think that you should be able to modify the TemplateLoader code above to match how you have your template directories laid out, and it will give you a greater control over not only how you layout you templates hierarcy but also how you write your <code>extends</code> and <code>include</code> statement. You no longer use <code>..</code> but rather just give the path of the template relative to whatever in your project is the equivalent of my <code>views</code> directory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VARIABL BEST CONVENT
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/coding-style/" rel="nofollow">Django's coding style</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGR DJANGO WITH AN AJAX
    </pattern>
    <template>
<![CDATA[<p>On python side, I'd suggest to look at <a href="https://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow"><code>piston</code></a> and <a href="https://github.com/toastdriven/django-tastypie" rel="nofollow"><code>tastypie</code></a>.</p><br/><br/><p>(Starting with AJAX + Django myself, I also found Dajax, but went with <code>piston</code>-felt more 'unix-way' for me, don't like these all-in-one solutions. Though piston wasn't updated for a long time now, so I'd recommend <code>tastypie</code>, which is actively maintained.)</p><br/><br/><p>EDIT. There's also a similar project, <a href="http://django-rest-framework.org/" rel="nofollow"><code>django-rest-framework</code></a>. Never used it myself yet, it's pretty new.</p><br/><br/><p>Basically, these libs help you create a fully working read-write API for your models, so you can perform create-read-update-delete operations from your javascript via HTTP. You don't need to define any views or serializers. Instead, you define <em>resources</em>, which is a decent abstraction, I think.</p><br/><br/><p>And it usually takes just a few lines of code, especially if your resources are tied to models.</p><br/><br/><p>However, if you need something more complicated, you can <strike>rethink your design</strike> write your views. With class-based views, it's pretty easy, too. Take a look at <a href="http://djangosnippets.org/snippets/2335/" rel="nofollow">this snippet</a> for example.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI TO UPDAT FIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Here's an example of create using your dictionary d:</p><br/><br/><pre><code>Book.objects.create(**d)<br/></code></pre><br/><br/><p>To update an existing model, you will need to use the QuerySet <code>filter</code> method.  Assuming you know the <code>pk</code> of the Book you want to update:</p><br/><br/><pre><code>Book.objects.filter(pk=pk).update(**d)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOUTH MIGRAT AD FULLTEXT INDEX
    </pattern>
    <template>
<![CDATA[<p>You can write anything as a migration. That's the point!</p><br/><br/><p>Once you have <code>South</code> up and running, type in <code>python manage.py schemamigration myapp --empty my_custom_migration</code> to create a blank migration that you can customize.</p><br/><br/><p>Open up the <code>XXXX_my_custom_migration.py</code> file in <code>myapp/migrations/</code> and type in your custom SQL migration there in the <code>forwards</code> method. For example you could use <a href="http://south.aeracode.org/wiki/db.execute" rel="nofollow"><code>db.execute</code></a> </p><br/><br/><p>The migration might look something like this:</p><br/><br/><pre><code>class Migration(SchemaMigration):<br/><br/>    def forwards(self, orm):<br/>        db.execute("CREATE FULLTEXT INDEX foo ON bar (foobar)")<br/>        print "Just created a fulltext index..."<br/>        print "And calculated {answer}".format(answer=40+2)<br/><br/><br/>    def backwards(self, orm):<br/>        raise RuntimeError("Cannot reverse this migration.") <br/>        # or what have you<br/><br/><br/>$ python manage.py migrate myapp XXXX # or just python manage.py migrate.<br/>"Just created fulltext index...."<br/>"And calculated 42"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( OR HIDE ) DEFAULT PERMISS FROM DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is a standard functionality of the <a href="https://docs.djangoproject.com/en/dev/topics/auth/" rel="nofollow"><em>auth</em></a> contrib application</p><br/><br/><p>It handles the <em>post_syncdb</em> signal and creates the permissions (the standard 3: <em>add</em>, <em>change</em>, <em>delete</em>, plus the custom ones) for each model, they are stored into the <em>auth_permission</em> table on the database</p><br/><br/><p>So, <strong>they will be created each time you run syncdb management command</strong></p><br/><br/><p>You have some choices, no one is really elegant, but you can consider:</p><br/><br/><ol><br/><li><p>Dropping the <em>auth</em> contrib app and provide your <a href="https://docs.djangoproject.com/en/dev/topics/auth/#authentication-backends" rel="nofollow"><em>authentication backend</em></a>.</p><br/><br/><p><strong>Consequences</strong> -> you will lose the admin and other custom apps built on top of the auth User model, but if your application is highly customized that could be an option for you</p></li><br/><li><p>Overriding the behaviour of the <em>post_syncdb</em> signal inside the auth app (inside <a href="https://code.djangoproject.com/browser/django/trunk/django/contrib/auth/management/__init__.py" rel="nofollow">\django\contrib\auth\management__init__.py</a> file)</p><br/><br/><p><strong>Consequences</strong> -> be aware that without the basic permissions the django admin interface won't be able to work (and maybe other things as well)</p></li><br/><li><p>Deleting the basic permissions (<em>add</em>, <em>change</em>, <em>delete</em>) for each model inside the <em>auth_permission</em> table (manually, with a script, or whatever)</p><br/><br/><p><strong>Consequences</strong> -> you will lose the admin again, and you will need to delete them each time you will run <em>syncdb</em></p></li><br/><li><p>Building your own <em>Permission application/system</em> (with your decorators, middlewares, etc..) or extend the existing one.</p><br/><br/><p><strong>Consequences</strong> -> none, if you build it well, this is one of the cleanest solutions I think</p></li><br/></ol><br/><br/><p><em>A final consideration</em>: changing the contrib applications or django framework itself is never considered a good thing, you could break something and you will have hard times if you will need to upgrade to a newer version of django.</p><br/><br/><p>So, if you want to be as clean as possibile, consider rolling your own permission system, ore extending the standard one (<a href="https://github.com/lukaszb/django-guardian" rel="nofollow">django-guardian</a> is a good example of an extension to django permissions). It won't take much effort, and you can build it the way it feels right for you, overcoming the limitations of the standard django permission system. And if you do a good work, you could also consider to open source it to enable other people using/improving your solution =)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS AND JS NOT GO THROUGH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Apache and Nginx are faster than Django (because they do much less and much simpler things). So serving CSS and JS with Django is a waste of resources.</p><br/><br/><p>Although "should" is too strong here, IMO. "Should, if you have high traffic", rather.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICT KEY FOR FAST LOOKUP IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I had to test ;-)</p><br/><br/><p>using </p><br/><br/><ul><br/><li>f1, integer key <code>1</code></li><br/><li>f2  short string,  <code>"one"</code></li><br/><li>f3  long string <code>"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</code></li><br/></ul><br/><br/><p>as one of the keys into a dictionary of length 4. Iterating 10,000,000 times and measuring the times. I get this result:</p><br/><br/><pre><code>&lt;function f1 at 0xb779187c&gt;<br/>f1 3.64<br/>&lt;function f2 at 0xb7791bfc&gt;<br/>f2 3.48<br/>&lt;function f3 at 0xb7791bc4&gt;<br/>f3 3.65<br/></code></pre><br/><br/><p>I.e no difference...</p><br/><br/><p>My <a href="http://pastebin.com/TVuCzyuJ" rel="nofollow">code</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>Taken from my answer to:<br/><a href="http://stackoverflow.com/questions/1453488/how-to-markup-form-fields-with-div-class-field-type-in-django/1504903#1504903">How to markup form fields with &lt;div class=&#39;field_type&#39;&gt; in Django</a></p><br/><br/><pre><code>class MyForm(forms.Form):<br/>    myfield = forms.CharField(widget=forms.TextInput(attrs={'class' : 'myfieldclass'}))<br/></code></pre><br/><br/><p>or</p><br/><br/><pre><code>class MyForm(forms.ModelForm):<br/>    class Meta:<br/>        model = MyModel<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(MyForm, self).__init__(*args, **kwargs)<br/>        self.fields['myfield'].widget.attrs.update({'class' : 'myfieldclass'})<br/></code></pre><br/><br/><p>--- EDIT ---<br><br/>The above is the easiest change to make to original question's code that accomplishes what was asked. It also keeps you from repeating yourself if you reuse the form in other places; your classes or other attributes just work if you use the Django's as_table/as_ul/as_p form methods.  If you need full control for a completely custom rendering, this is <a href="http://docs.djangoproject.com/en/1.3/topics/forms/#customizing-the-form-template">clearly documented</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ROOT LOGGER LEVEL
    </pattern>
    <template>
<![CDATA[<p>The South developers shouldn't really be setting its top level logger level to DEBUG. In fact if they don't set it at all, it would inherit the root logger's level, which is normally defined by the application developer (which I guess is you, in this case).</p><br/><br/><p>I would suggest you report this as a bug on the relevant South forum.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERMAN STORE COMMAND IN THE PYTHON REPL PROMPT
    </pattern>
    <template>
<![CDATA[<p>In Bash, I'm assuming you are defining this aliases in <code>.profile</code>, <code>.bash_rc</code> or a similar file. In that file, add the line</p><br/><br/><pre><code>export PYTHONSTARTUP=~/.python_rc.py<br/></code></pre><br/><br/><p>This will allow you to create a <code>.python_rc.py</code> file that is included whenever you start a session in the Python prompt/REPL. (It will not be included when running Python scripts, becasue it could be disruptive to do so.)</p><br/><br/><p>Inside that file, you could <a href="http://docs.python.org/tutorial/controlflow.html#defining-functions" rel="nofollow">define a function</a> for the command you want to save. In your case what you're doing is actually a touch more complicated than it seems, so you'd need to use a few more lines:</p><br/><br/><pre><code>def profile():<br/>    global Profile<br/>    import sys<br/>    if "path/to/your/project" not in sys.path:<br/>        sys.path.append("path/to/your/project")<br/>    from userprofile.models import Profile<br/></code></pre><br/><br/><p>After doing this, you'll be able to call <code>profile()</code> to import <code>Profile</code> in the Python prompt.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVENT IN A CALENDAR CPU VS DATABAS
    </pattern>
    <template>
<![CDATA[<p>I want to address only question 3, about holidays.  </p><br/><br/><p>In several reporting databases, I have found it handy to define a table, let's call it "Almanac", that has one row for each date, within a certain range.  If the range spans ten years, the table will contain about 3,652 rows.  That's small by today's standards.   The primary key is the date.  </p><br/><br/><p>Some other columns are things like whether the date is a holiday, a normal working day, or a weekend day.  I know, I know, you could compute the weekend stuff by using a built in function.  But it turns out to be convenient to include this stuff as data.  It makes your joins simpler and more similar to each other.</p><br/><br/><p>Then you have one application program that populates the Almanac.  It has all the calendar quirks built into it, including the enterprise rules for figuring out which days are holidays.  You can even include columns for which "fiscal month" a given date belongs to, if that's relevant to your case.  The rest of the application,  both entry programs and extraction programs, all treat the Almanac like plain old data.</p><br/><br/><p>This may seem suboptimal because it's not minimal.  But trust me, this design pattern is useful in a wide variety of situations.  It's up to you to figure how it applies to your case.  </p><br/><br/><p>The Almanac is really a subset of the principles of data warehousing and star schema design. </p><br/><br/><p>if you want to do the same thing inside the CPU, you could have an "Almanac" object with public features such as Almanac.holiday(date).   </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY OF KNOW WHEN THE FIRST AND LAST LOOP IN A FOR IS BE PASS THROUGH
    </pattern>
    <template>
<![CDATA[<p>If I am understanding your question correctly, you want a simple test for whether you are at the beginning or end of the list?</p><br/><br/><p>If that's the case, this would do it:</p><br/><br/><pre><code>for item in list:<br/>    if item != list[-1]:<br/>        #Do stuff<br/></code></pre><br/><br/><p>For the first item in the list, you would replace "-1" with 0.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV
    </pattern>
    <template>
<![CDATA[<p>The easiest way is to use pip to generate a requirements file. A requirements file is basically a file that contains a list of all the python packages you want to install, and what versions they're at.</p><br/><br/><p>To generate a requirements file, go into your original virtualenv, and run:</p><br/><br/><pre><code>pip freeze &gt; requirements.txt<br/></code></pre><br/><br/><p>This will generate the requirements.txt file for you. If you open that file up in your favorite text editor, you'll see something like:</p><br/><br/><pre><code>Django==1.3<br/>Fabric==1.0.1<br/>etc...<br/></code></pre><br/><br/><p>Now, edit the line that says Django==x.x to say Django==1.3 (or whatever version you want to install in your new virtualenv).</p><br/><br/><p>Lastly, activate your new virtualenv, and run:</p><br/><br/><pre><code>pip install -r requirements.txt<br/></code></pre><br/><br/><p>And pip will automatically download and install all the python modules listed in your requirements.txt file, at whatever versions you specified!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON SCRIPT AS ROOT ( SETEUID VS C WRAPPER )
    </pattern>
    <template>
<![CDATA[<p>sudo does not require setuid bit on Python. You can enable sudo for one command only, no arguments:</p><br/><br/><pre><code> www          ALL=(ALL)       NOPASSWD:  /root/bin/reload-stuff.py ""<br/></code></pre><br/><br/><p>This would be secure if your script does not take any arguments, cannot be overridden by www user, and sudo does "env_reset" (the default in most distros). </p><br/><br/><p>You can accept arguments, but be very careful with them -- do not take output filenames, make sure you verify all inputs. In this case, remove "" from the end of sudo line.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND MUSTACH USE THE SAME SYNTAX FOR TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You can use the <code>{% templatetag %}</code> templatetag to print out characters that would normally be processed by Django. For example:</p><br/><br/><pre><code>{% templatetag openvariable %} variable {% templatetag closevariable %}<br/></code></pre><br/><br/><p>Results in the following in your HTML:</p><br/><br/><pre><code>{{ variable }}<br/></code></pre><br/><br/><p>For a full list of arguments see: <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#templatetag" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/templates/builtins/#templatetag</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FAIL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Firstly, you are using POST and not sending a <strong>csrf token</strong>. Try explicitly sending the csrf token rather than using the decorator <strong>csrf_exempt</strong>.<br><br/>One way of doing this is with what I have done in <em>data</em>. That is to fetch the csrf token (or from your own method) and pass it in your arguments.</p><br/><br/><pre><code>$.ajax({<br/>        url : url,<br/>        type: "POST",<br/>        data : {csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0].value},<br/>        dataType : "json",<br/>        success: function( data ){<br/>            // do something<br/>        }<br/>    });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELEG APPROACH FOR WRITE JSON DATA TO A RELAT DATABAS USE DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>In my opinion the cleanest place for the code you need is as a new Manager method (eg from_json_string) on a custom manager for the NinjaData model.</p><br/><br/><p>I don't think you should override the standard create, get_or_create etc methods since you're doing something a bit different from what they normally do and it's good to keep them working normally.</p><br/><br/><p><strong>Update:</strong><br/>I realised I'd probably want this for myself at some point so I have coded up and lightly tested a generic function. Since it recursively goes through and affects other models I'm no longer certain it belongs as a Manager method and should probably be a stand-alone helper function.</p><br/><br/><pre><code>def create_or_update_and_get(model_class, data):<br/>    get_or_create_kwargs = {<br/>        model_class._meta.pk.name: data.pop(model_class._meta.pk.name)<br/>    }<br/>    try:<br/>        # get<br/>        instance = model_class.objects.get(**get_or_create_kwargs)<br/>    except model_class.DoesNotExist:<br/>        # create<br/>        instance = model_class(**get_or_create_kwargs)<br/>    # update (or finish creating)<br/>    for key,value in data.items():<br/>        field = model_class._meta.get_field(key)<br/>        if not field:<br/>            continue<br/>        if isinstance(field, models.ManyToManyField):<br/>            # can't add m2m until parent is saved<br/>            continue<br/>        elif isinstance(field, models.ForeignKey) and hasattr(value, 'items'):<br/>            rel_instance = create_or_update_and_get(field.rel.to, value)<br/>            setattr(instance, key, rel_instance)<br/>        else:<br/>            setattr(instance, key, value)<br/>    instance.save()<br/>    # now add the m2m relations<br/>    for field in model_class._meta.many_to_many:<br/>        if field.name in data and hasattr(data[field.name], 'append'):<br/>            for obj in data[field.name]:<br/>                rel_instance = create_or_update_and_get(field.rel.to, obj)<br/>                getattr(instance, field.name).add(rel_instance)<br/>    return instance<br/><br/># for example:<br/>from django.utils.simplejson import simplejson as json<br/><br/>data = json.loads(ninja_json)<br/>ninja = create_or_update_and_get(NinjaData, data)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEGAT A BOOLEAN RETURN TO VARIABL
    </pattern>
    <template>
<![CDATA[<p>You can do this:</p><br/><br/><p><code><br/>item.active = not item.active<br/></code></p><br/><br/><p>That should do the trick :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAINTAIN WHEN DJANGO SWITCH TO PYTHON 3
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>... what happens when the transition to Python 3 actually comes along.</p><br/></blockquote><br/><br/><p>Nothing. That's why you're using a framework in the first place. All you need to be responsible for is the small amount of your code that <a href="http://docs.python.org/release/3.0.1/whatsnew/3.0.html" rel="nofollow">will need to be ported</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT SET FILE
    </pattern>
    <template>
<![CDATA[<pre><code>import settings<br/></code></pre><br/><br/><p>Will import settings(.py) module of your Django project (if you are writing this code from the "root" package of your application, of course)</p><br/><br/><pre><code>from django.conf import settings<br/></code></pre><br/><br/><p>Will import settings <strong>object</strong> from django.conf package (Django's provided files). <a href="https://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code">This is important</a>, because</p><br/><br/><blockquote><br/>  <p>[..] note that your code should not import from either global_settings or your own settings file. django.conf.settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.</p><br/></blockquote><br/><br/><p>UPDATE: if you want to define some own settings, see <a href="https://docs.djangoproject.com/en/dev/topics/settings/#custom-default-settings">this part of the documentation</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GO GREEN
    </pattern>
    <template>
<![CDATA[<p>The gevent monkey patcher will patch the standard library to be Greenlet friendly. This should take of a lot of common Django calls.</p><br/><br/><pre><code>from gevent import monkey; monkey.patch_all()<br/></code></pre><br/><br/><p>As far as databases, normally the interfaces are blocking. If you use PostgreSQL look into <a href="https://bitbucket.org/denis/psycogreen/src/ff88c9635332/gevent/psyco_gevent.py" rel="nofollow">psyco_gevent</a> to monkey patch psycopg2 to cooperate with gevent.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVASCRIPT OBJECT OUT OF DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>It sounds like you're looking for a complete JavaScript interface to the model and queryset APIs. I can't imagine that this would have ever been done or even be a simple task. Not only would you need to somehow generate JavaScript instances of models (much more than JSON serialisation provides, since you also want the methods) but you'd need to expose a web service that can handle every kind of DB-API call.  I can't even begin to imagine where to start and the security issues may be too numerous to easily overcome.</p><br/><br/><p>The alternative (and much simpler) approach would be to use one of the various Django REST modules and JSON serialization. You could perform an AJAX GET request on a resource, which can be identified by a series of query parameters that would be equivalent to chained queryset filters. This would return the JSON representation of the model's values. You can then modify the JavaScript object and use an overloaded AJAX POST request to persist the changes back to the server. You wouldn't have access to the model's methods, so that functionality would have to be reimplemented but making any changes to a model should be straightforward enough - This is basically the JavaScript equivalent of using an HTML form to modify data.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALU FROM AN UNBOUND FORM
    </pattern>
    <template>
<![CDATA[<p>If you add this method to your form class:</p><br/><br/><pre><code>def get_cleaned_or_initial(self, fieldname):<br/>        if hasattr(self, 'cleaned_data'):<br/>            return self.cleaned_data.get(fieldname)<br/>        else:<br/>            return self[fieldname].field.initial<br/></code></pre><br/><br/><p>you could then re-write your code as:</p><br/><br/><pre><code>if request.method == 'GET':<br/>    form = MyForm()<br/>else:<br/>    form = MyForm(request.method.POST)<br/>    form.is_valid()<br/><br/>do_query(form.get_cleaned_or_initial('start_date'), form.get_cleaned_or_initial('end_date'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL APP ENGIN A WORTHI PLATFORM FOR A LIFESTREAM APP
    </pattern>
    <template>
<![CDATA[<p>While I can not answer your question directly, my experience of building <a href="http://www.microupdater.com" rel="nofollow">Microupdater</a> (a news aggregator collecting a few hundred feeds on AppEngine) may give you a little insight.</p><br/><br/><ul><br/><li><p>Fetching feeds. Fetching lots of feeds by cron jobs (it was the only solution until SDK 1.2.5) is not efficient and scalable, which has lower limit on job frequency (say 1 min, so you could only fetch at most 60 feeds hourly). And with latest SDK 1.2.5, there is <a href="http://drupal.org/project/xmpp" rel="nofollow">XMPP API</a>, which I have not implemented yet. The best promising approach would be <a href="http://code.google.com/p/pubsubhubbub/" rel="nofollow">PubSubHubBub</a>, of which you offer an callback url and HubBub will notify you new entries in <strong>real-time</strong>. And there is an <a href="http://pubsubhubbub.appspot.com/" rel="nofollow">demo implementation</a> on AppEngine, which you can play around.</p></li><br/><li><p>Parsing feeds. You may already know that parsing feeds is cpu-intensive. I use <a href="http://www.feedparser.org/" rel="nofollow">Universal Feed Parser</a> by Mark Pilgrim, when parsing a large feed (say a public google reader topic), AppEngine may fail to process all entries. My dashboard have a lot of these CPU-limit warnings. But it may result in my incapability to optimize the code yet.</p></li><br/></ul><br/><br/><p>Totally said, AppEngine is not yet an ideal platform for lifestream app, but that may change in future.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO.CORE.URLRESOLVERS.REVERS WITH A FUNCTION REFER INSTEAD OF A NAME URL PATTERN
    </pattern>
    <template>
<![CDATA[<p>After futher investigation, turns out it was an issue with how I was importing the views module:</p><br/><br/><p><a href="http://stackoverflow.com/questions/146522/how-do-i-successfully-pass-a-function-reference-to-djangos-reverse-function">http://stackoverflow.com/questions/146522/how-do-i-successfully-pass-a-function-reference-to-djangos-reverse-function</a></p><br/><br/><p>Thanks for the help though, guys: you inspired me to look at it properly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND PYTHON 2.6
    </pattern>
    <template>
<![CDATA[<p>The impression I get is that 2.6 should work fine with Django 1.0. As found here: <a href="http://simonwillison.net/2008/Oct/2/whatus/" rel="nofollow">http://simonwillison.net/2008/Oct/2/whatus/</a> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON GROUP OBJECT BY COMMON SET FROM A MANY TO MANI RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>Have you tried sorting the list first? The algorithm you proposed should work, albeit with lots of database hits.</p><br/><br/><pre><code>import itertools<br/><br/>cars = [<br/>    {'car': 'X2', 'mods': [1,2]},<br/>    {'car': 'Y2', 'mods': [2]},<br/>    {'car': 'W2', 'mods': [1]},<br/>    {'car': 'X1', 'mods': [1,2]},<br/>    {'car': 'W1', 'mods': [1]},<br/>    {'car': 'Y1', 'mods': [2]},<br/>    {'car': 'Z1', 'mods': [1,2,3]},<br/>    {'car': 'X3', 'mods': [1,2]},<br/>]<br/><br/>cars.sort(key=lambda car: car['mods'])<br/><br/>cars_by_common_mods = {}<br/>for k, g in itertools.groupby(cars, lambda car: car['mods']):<br/>    cars_by_common_mods[frozenset(k)] = [car['car'] for car in g]<br/><br/>print cars_by_common_mods<br/></code></pre><br/><br/><p>Now, about those queries:</p><br/><br/><pre><code>import collections<br/>import itertools<br/>from operator import itemgetter<br/><br/>from django.db import connection<br/><br/>cursor = connection.cursor()<br/>cursor.execute('SELECT car_id, mod_id FROM someapp_car_mod ORDER BY 1, 2')<br/>cars = collections.defaultdict(list)<br/>for row in cursor.fetchall():<br/>    cars[row[0]].append(row[1])<br/><br/># Here's one I prepared earlier, which emulates the sample data we've been working<br/># with so far, but using the car id instead of the previous string.<br/>cars = {<br/>    1: [1,2],<br/>    2: [2],<br/>    3: [1],<br/>    4: [1,2],<br/>    5: [1],<br/>    6: [2],<br/>    7: [1,2,3],<br/>    8: [1,2],<br/>}<br/><br/>sorted_cars = sorted(cars.iteritems(), key=itemgetter(1))<br/>cars_by_common_mods = []<br/>for k, g in itertools.groupby(sorted_cars, key=itemgetter(1)):<br/>    cars_by_common_mods.append({'mods': k, 'cars': map(itemgetter(0), g)})<br/><br/>print cars_by_common_mods<br/><br/># Which, for the sample data gives me (reformatted by hand for clarity)<br/>[{'cars': [3, 5],    'mods': [1]},<br/> {'cars': [1, 4, 8], 'mods': [1, 2]},<br/> {'cars': [7],       'mods': [1, 2, 3]},<br/> {'cars': [2, 6],    'mods': [2]}]<br/></code></pre><br/><br/><p>Now that you've got your lists of car ids and mod ids, if you need the complete objects to work with, you could do a single query for each to get a complete list for each model and create a lookup <code>dict</code> for those, keyed by their ids  - then, I believe, Bob is your proverbial father's brother.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I CREAT A GENER URL ROUT TO VIEW
    </pattern>
    <template>
<![CDATA[<pre><code>mods = ('Project','Links','Profile','Contact')<br/><br/>urlpatterns = patterns('',<br/>   *(('^%s/$'%n, 'mysite.app.views.%s'%n.lower()) for n in mods)<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO 1.0 ADMIN APPLIC WORK
    </pattern>
    <template>
<![CDATA[<p>It's because you left out a <code>/</code> in <code>urls.py</code>.  Change the admin line to the following:</p><br/><br/><pre><code>(r'^admin/(.*)', admin.site.root),<br/></code></pre><br/><br/><p>I checked this on my server and got the same error with your line from <code>urls.py</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SITE UNDER MOD WSGI
    </pattern>
    <template>
<![CDATA[<p>The problem is that mod_python doesn't go well together with mod_wsgi. I got into similar issue few weeks ago and everything started working for me shortly after I commented out mod_python inclusion.</p><br/><br/><p>Try to search <a href="http://modwsgi.org" rel="nofollow">modwsgi.org</a> wiki for "mod_python", I believe there was someone talking about this somewhere in comments</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM DATA IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can define clean_FIELD_NAME() methods which can validate and alter data, as documented here: <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOMAT GENER A LIST OF COLUMN THAT NEED INDEX
    </pattern>
    <template>
<![CDATA[<p>Yes, there is.</p><br/><br/><p>If you take a look at the <a href="http://dev.mysql.com/doc/refman/5.1/en/slow-query-log.html" rel="nofollow">slow query log</a>, there's an option <code>--log-queries-not-using-indexes</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPEND ON GROUP OF ITEM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't see any great way to do what you're trying to do directly.  If you're willing to accept a little de-normalization, I would recommend a pre-save signal to mark messages as being at the head.</p><br/><br/><pre><code>#In your model<br/>head = models.BooleanField(default=True)<br/><br/>#As a signal plugin:<br/>def check_head(sender, **kwargs):<br/>    message = kwargs['instance']<br/>    if hasattr(message,'no_check_head') and message.no_check_head:<br/>        return<br/>    previous_message = Message.objects.filter(time__lt=message.time).order_by('-time')[0]<br/>    if message.source == previous_message.source:<br/>        message.head = False<br/>    next_message = Message.objects.filter(time__gt=message.time).order_by('time')[0]<br/>    if message.source == next_message.source:<br/>        next_message.head = False<br/>        next_message.no_check_head<br/>        next_message.save()<br/></code></pre><br/><br/><p>Then your query becomes magically simple:</p><br/><br/><pre><code>messages = Message.objects.filter(head=True).order_by('time')[0:15]<br/></code></pre><br/><br/><p>To be quite honest...the signal listener would have to be a bit more complicated than the one I wrote.  There are a host of lost synchronization/lost update problems inherent in my approach, the solutions to which will vary depending on your server (if it is single-processed, multi-threaded, then a python <code>Lock</code> object should get you by, but if it is multi-processed, then you will really need to implement locking based on files or database objects).  Also, you will certainly also have to write a corresponding delete signal listener.</p><br/><br/><p>Obviously this solution involves adding some database hits, but they are on edit as opposed to on view, which might be worthwhile for you.  Otherwise, perhaps consider a cruder approach: grab 30 stories, loop through the in the view, knock out the ones you won't display, and if you have 15 left, display them, otherwise repeat.  Definitely an awful worst-case scenario, but perhaps not terrible average case?</p><br/><br/><p>If you had a server configuration that used a single process that's multi-threaded, a Lock or RLock should do the trick.  Here's a possible implementation with non-reentrant lock:</p><br/><br/><pre><code>import thread<br/>lock = thread.allocate_lock()<br/>def check_head(sender, **kwargs):<br/>    # This check must come outside the safe zone<br/>    # Otherwise, your code will screech to a hault<br/>    message = kwargs['instance']<br/>    if hasattr(message,'no_check_head') and message.no_check_head:<br/>        return<br/>    # define safe zone<br/>    lock.acquire()<br/>    # see code above<br/>    ....<br/>    lock.release()<br/></code></pre><br/><br/><p>Again, a corresponding delete signal is critical as well.</p><br/><br/><p>EDIT: Many or most server configurations (such as Apache) will prefork, meaning there are several processes going on.  The above code will be useless in that case.  See <a href="http://stackoverflow.com/questions/698950/what-is-the-simplest-way-to-lock-an-object-in-django/699222#699222">this page</a> for ideas on how to get started synchronizing with forked processes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS STORE PROCEDUR IN DJANGO S ORM
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.djangosnippets.org/snippets/118" rel="nofollow">Django Using Stored Procedure</a> - will give some idea. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM INLIN ADMIN WIDGET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It works exactly the same way.  The TabularInline and StackedInline classes also have a formfield_for_dbfield method, and you override it the same way in your subclass.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL QUESTION ( NEWBI )
    </pattern>
    <template>
<![CDATA[<p>Yes, first_name and last_name are class variables. They define fields that will be created in a database table. There is a Person table that has first_name and last_name columns, so it makes sense for them to be at Class level at this point.</p><br/><br/><p>For more on models, see:<br/><a href="http://docs.djangoproject.com/en/dev/topics/db/models/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/models/</a></p><br/><br/><p>When it comes to accessing instances of a Person in code, you are typically doing this via Django's ORM, and at this point they essentially behave as instance variables.</p><br/><br/><p>For more on model instances, see:<br/><a href="http://docs.djangoproject.com/en/dev/ref/models/instances/?from=olddocs" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/instances/?from=olddocs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY DJANGO WITH SPAWN
    </pattern>
    <template>
<![CDATA[<p>I'd be interested in seeing whose seriously recommending Spawning over Apache and mod_python or mod_wsgi.</p><br/><br/><p>Judging by the fact that this question is now the #4 result in Google for 'django spawning' I'd say it's very much early days. :) If you're putting anything serious into production stick to Apache/mod_wsgi for now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM CASE INSENSIT LOOKUP BY DEFAULT
    </pattern>
    <template>
<![CDATA[<p>Managers can't be added to classes with simple attribute assignment (User.objects = MyManager()).  Look at the ModelBase metaclass (db/models/base.py) to see what all is done for you behind the scenes when you subclass Model.  </p><br/><br/><p>You should be able to make it work with User.add_to_class('objects', MyManager()).  Alternatively, you could make a <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models" rel="nofollow">proxy subclass</a> of User and add the manager there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONTEXT PROCESSOR USE WERKZEUG AND JINJA2
    </pattern>
    <template>
<![CDATA[<p>One way of achieving this is through late-bound <a href="http://jinja.pocoo.org/2/documentation/api#jinja2.Environment.globals" rel="nofollow">template globals</a> using the <a href="http://werkzeug.pocoo.org/documentation/local" rel="nofollow">thread-local proxy</a> in Werkzeug.</p><br/><br/><p>A simple example that puts the request into the the template globals:</p><br/><br/><pre><code>from werkzeug import Local, LocalManager<br/>local = Local()<br/>local_manager = LocalManager([local])<br/><br/>from jinja2 import Environment, FileSystemLoader<br/><br/># Create a global dict using the local's proxy to the request attribute<br/>global_dict = {'request': local('request')}<br/>jinja2_env = Environment(loader=FileSystemLoader('/'))<br/>jinja2_env.globals.update(global_dict)<br/><br/>def application(environ, start_response):<br/>    """A WSGI Application"""<br/>    # later, bind the actual attribute to the local object<br/>    local.request = request = Request(environ)<br/><br/>    # continue to view handling code<br/>    # ...<br/><br/>application = local_manager.make_middleware(application)<br/></code></pre><br/><br/><p>Now in any of your templates, the current request will appear bound to the variable "request". Of course that could be anything else in environ. The trick is to use the local proxy, then set the value before you render any template.</p><br/><br/><p>I should probably also add that a framework like <a href="http://glashammer.org" rel="nofollow">Glashammer</a> (Werkzeug+Jinja2) streamlines this process for you by using events. Many functions can connect to the events during the process of the WSGI call (for example, when a request is created) and they can put stuff in the template namespace at that point.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LAZI CHOIC IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>Another solution is to move the <code>bodystyle</code> field to the class constructor:</p><br/><br/><pre><code>class CarSearchForm(forms.Form):<br/>  def __init__(self, *args, **kwargs):<br/>    super(CarSearchForm, self).__init__(*args, **kwargs)<br/>    self.fields['bodystyle'] = forms.ChoiceField(choices=bodystyle_choices())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL
    </pattern>
    <template>
<![CDATA[<p>Django only uses <strong>settings.DEFAULT_FROM_EMAIL</strong> when any of the mail sending functions pass <code>None</code> or empty string as the <em>sender address</em>.  This can be verified in <code>django/core/mail.py</code>.</p><br/><br/><p>When there is an unhandled exception Django calls the <code>mail_admins()</code> function in <code>django/core/mail.py</code> which always uses <strong>settings.SERVER_EMAIL</strong> and is <strong>only</strong> sent to addresses listed in <strong>settings.ADMINS</strong>.  This can also be verified in <code>django/core/mail.py</code>.</p><br/><br/><p>The only other place Django itself sends e-mails is if <strong>settings.SEND_BROKEN_LINK_EMAILS</strong> is True, then CommonMiddleware will send mail to all addresses listed in <strong>settings.MANAGERS</strong> and the e-mail sender is <strong>settings.SERVER_EMAIL</strong>.</p><br/><br/><p>Therefore, the only time a regular user will receive e-mail from your site is when you call <code>send_mail()</code>.  So, always pass a real address as the <code>from_mail</code> argument and you will avoid users receiving email from <strong>settings.SERVER_EMAIL</strong> or <strong>settings.DEFAULT_FROM_EMAIL</strong>.</p><br/><br/><p>Side note: django-registration is at least one example of a Django pluggable that will send mail from <strong>settings.DEFAULT_FROM_EMAIL</strong> so in cases like this you need to make sure it is a proper e-mail address such as support@yoursite.com or webmaster@yoursite.com.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO PROJECT SETTINGS.PI PYTHON FILE FROM A SUB DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>This is going one level up from your question, but probably the best solution here is to implement your scripts as <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands" rel="nofollow">custom manage.py (django-admin.py) commands</a>.  This gives you all of Django's functionality (including settings) for free with no ugly path-hacking, as well as command-line niceties like options parsing.  I've never seen a good reason to write Django-related command-line scripts any other way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA API AUTHENT
    </pattern>
    <template>
<![CDATA[<p>According to the 2.0 documentation <a href="http://code.google.com/apis/contacts/docs/2.0/developers_guide_protocol.html#auth_sub" rel="nofollow">here</a> there is a python example set...</p><br/><br/><blockquote><br/>  <p>Running the sample code</p><br/>  <br/>  <p>A full working sample client, containing all the sample code shown in this document, is available in the Python client library distribution, under the directory <code>samples/contacts/contacts_example.py</code>.</p><br/>  <br/>  <p>The sample client performs several operations on contacts to demonstrate the use of the Contacts Data API.</p><br/></blockquote><br/><br/><p>Hopefully it will point you in the right direction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION MESSAG TO AN ANONYM USER IN A DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>See <a href="http://code.google.com/p/django-session-messages/" rel="nofollow">http://code.google.com/p/django-session-messages/</a> until the patch that enables session based messages lands in Django tree (as I saw recently, it's marked for 1.2, so no hope for quick addition...).</p><br/><br/><p>Another project with similar functionality is Django Flash (<a href="http://djangoflash.destaquenet.com/" rel="nofollow">http://djangoflash.destaquenet.com/</a>).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT STRIP SPACE
    </pattern>
    <template>
<![CDATA[<p>Let me preface this by saying <a href="#721082" rel="nofollow">@DNS's answer</a> is correct as to why the spaces are not showing.</p><br/><br/><p>With that in mind, this template filter will replace any spaces in the string with <code>&amp;nbsp;</code></p><br/><br/><p>Usage:</p><br/><br/><pre><code>{{ "hey there  world"|spacify }}<br/></code></pre><br/><br/><p>Output would be <code>hey&amp;nbsp;there&amp;nbsp;&amp;nbsp;world</code></p><br/><br/><p>Here is the code:</p><br/><br/><pre><code>from django.template import Library<br/>from django.template.defaultfilters import stringfilter<br/>from django.utils.html import conditional_escape<br/>from django.utils.safestring import mark_safe<br/>import re<br/><br/>register = Library()<br/><br/>@stringfilter<br/>def spacify(value, autoescape=None):<br/>    if autoescape:<br/>	esc = conditional_escape<br/>    else:<br/>	esc = lambda x: x<br/>    return mark_safe(re.sub('\s', '&amp;'+'nbsp;', esc(value)))<br/>spacify.needs_autoescape = True<br/>register.filter(spacify)<br/></code></pre><br/><br/><p>For notes on how template filters work and how to install them, <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#code-layout" rel="nofollow">check out the docs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIMARI KEY AFTER SAVE A MODELFORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#modelform" rel="nofollow">ModelForm</a>'s <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#the-save-method" rel="nofollow">save</a> method returns the saved object.</p><br/><br/><p>Try this:</p><br/><br/><pre><code>def contact_create(request):<br/>    if request.method == 'POST':<br/>        form = ContactForm(request.POST)<br/>        if form.is_valid():<br/>            new_contact = form.save()<br/>            return HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))<br/>    else:<br/>        form = ContactForm()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXECUT OF ARBITRARI COMMAND FROM A DJANGO APP MAKE SYSTEM CALL
    </pattern>
    <template>
<![CDATA[<p>Based on my understanding of the question, I'm assuming you aren't letting the users specify commands to run on the shell, but just arguments to those commands.  In this case, you can avoid <a href="http://en.wikipedia.org/wiki/Code%5Finjection#Shell%5FInjection" rel="nofollow">shell injection</a> attacks by using the <a href="http://docs.python.org/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module and <em>not</em> using the shell (i.e. specify use the default <code>shell=False</code> parameter in the <code>subprocess.Popen</code> constructor.</p><br/><br/><p>Oh, and <em>never</em> use <code>os.system()</code> for any strings containing any input coming from a user.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON GOOGL APPENGIN
    </pattern>
    <template>
<![CDATA[<p>It's a bit late to answer, but the problem I've had so far with app-engine-patch is that, while it's a generally feature-complete port of Django 1.0, it discards Django models in favor of AppEngine's db.Model.</p><br/><br/><p>It's understandable, given the differences between the two, but it can require quite a bit of effort to port, depending on how involved your models (and usage of those models; this means you lose the Django query syntax as well).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMEDELTA IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>You can trivially normalize a timedelta to a single floating-point number in days or seconds. </p><br/><br/><p>Here's the "Normalize to Days" version.</p><br/><br/><pre><code>timedelta.days+timedelta.seconds/86400<br/></code></pre><br/><br/><p>You can trivially turn a floating-point number into a timedelta. </p><br/><br/><pre><code>&gt;&gt;&gt; datetime.timedelta(2.5)<br/>datetime.timedelta(2, 43200)<br/></code></pre><br/><br/><p>So, store your timedelta as a float.</p><br/><br/><p>Here's the "Normalize to Seconds" version.</p><br/><br/><pre><code>timedelta.days*86400+timedelta.seconds<br/></code></pre><br/><br/><p>Here's the reverse (using seconds)</p><br/><br/><pre><code>datetime.timedelta( someSeconds/86400 )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY PYTHON WEB APP USE UNICOD FOR ALL STRING
    </pattern>
    <template>
<![CDATA[<p>In Python 3, all strings are Unicode. So, you can prepare for this by using <code>u''</code> strings everywhere you need to, and then when you eventually upgrade to Python 3 using the <code>2to3</code> tool all the <code>u</code>s will disappear. And you'll be in a better position because you will have already tested your code with Unicode strings.</p><br/><br/><p>See <a href="http://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="nofollow">Text Vs. Data Instead Of Unicode Vs. 8-bit</a> for more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RANDOM.RANDOM ( ) CAUS MODUL OBJECT IS NOT CALLABL WHEN USE IN CUSTOM TEMPLAT TAG
    </pattern>
    <template>
<![CDATA[<p>The answer is ... strange.</p><br/><br/><p>When I originally wrote my custom tag, I called it "random.py". I quickly realized that this name may not be good and renamed it "randomchoice.py" and deleted my "random.py". Python kept the compiled random.pyc file around, and it was getting loaded whenever I did:</p><br/><br/><p>import random</p><br/><br/><p>I removed my random.pyc file, and the problem goes away. </p><br/><br/><p>I thank you all for your help. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCOD FOR THE TABL CHAR COLUMN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django does not specify charset and collation in <code>CREATE TABLE</code> statements. Everything is determined by database charset. Doing <code>ALTER DATABASE ... CHARACTER SET utf8 COLLATE utf8_general_ci</code> before running <code>syncdb</code> should help.</p><br/><br/><p>For connection, Django issues <code>SET NAMES utf8</code> automatically, so you don't need to worry about default connection charset settings.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.0 USE DEFAULT PASSWORD RESET
    </pattern>
    <template>
<![CDATA[<p>Just wanted to post the solution I came up with.  The problem was in this line:</p><br/><br/><pre><code>{% url django.contrib.auth.views.password_reset_confirm uidb36=uid, token=token %}<br/></code></pre><br/><br/><p>I'm not really a 100% why either, so I just hard coded the url like this:</p><br/><br/><pre><code>http://mysite.com/accounts/reset/{{uid}}-{{token}}/<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOVE DATA FROM POSTGR TO MYSQL RUN ON AMAZON S RD
    </pattern>
    <template>
<![CDATA[<p>Django also has the <a href="http://docs.djangoproject.com/en/dev/ref/django-admin/#dumpdata" rel="nofollow">dumpdata</a> and <a href="http://docs.djangoproject.com/en/dev/ref/django-admin/#loaddata-fixture-fixture" rel="nofollow">loaddata</a> commands in manage.py. Process would be</p><br/><br/><ol><br/><li>syncdb in MySQL to prepare the tables</li><br/><li>dumpdata from PostgreSQL</li><br/><li>loaddata from the previous command into the new MySQL instance</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ZIP ARCHIV FOR INSTANT DOWNLOAD
    </pattern>
    <template>
<![CDATA[<p>Check this <a href="http://stackoverflow.com/questions/67454/serving-dynamically-generated-zip-archives-in-django">Serving dynamically generated ZIP archives in Django</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK FOR A PROJECT
    </pattern>
    <template>
<![CDATA[<p>Django! It's great. Look up Django vs Rails.</p><br/><br/><p>"Which framework will meet the needs of a large website (not just a simple blog) that might require caching in the future (memcached etc) and heavy db usage (mysql) so performance is important."</p><br/><br/><p>Yes, Django.</p><br/><br/><p>Plus...since you are new, Django will teach you how to separate your layers of logic. Database, processing, presentation, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUILD DJANGO REQUEST.POST HELP
    </pattern>
    <template>
<![CDATA[<p>If you're <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" rel="nofollow">expecting a list</a> for the key <code>attach</code>, you should use <code>request.POST.getlist('attach')</code>. Doing <code>request.POST['attach']</code> will only give you the last value, which <em>is</em> a string.</p><br/><br/><p>Happy new year!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S SIGNAL HANDL USE WEAK REFER FOR CALLBACK BY DEFAULT
    </pattern>
    <template>
<![CDATA[<p>Signals handlers are stored as weak references to avoid the object they reference from not being garbage collected (for example after explicit deletion of the signal handler), just because a signal is still flying around.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OF NEW RELIC RPM FOR RAIL
    </pattern>
    <template>
<![CDATA[<p>None that I'm aware. django-debug-toolbar is a fairly popular app which can provide you with performance info for a particular page, but feature-wise it doesn't even come close to what the New Relic demo shows (I have no experience with NR/RoR myself).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADD FUNCTION IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Sure, you can customize admin VERY granularly by following the instructions <a href="http://docs.djangoproject.com/en/1.0/ref/contrib/admin/" rel="nofollow">here</a> -- I believe that what you want can be obtained in part by overriding <code>ModelAdmin.save_model(self, request, obj, form, change)</code> in your own <code>ModelAdmin</code> subclass, to ensure nothing happens on the store when <code>change</code> is false (i.e. an attempt to add rather than change), and in part by overriding <code>ModelAdmin.add_view(self, request, form_url='', extra_context=None)</code> to display an "add view" that makes it very clear to the admin that they're NOT going to be allowed to add object through this route. I haven't actually done the specific admin customization you require, but I've done others and they do seem to work pretty smoothly!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND URLS.PI HOW DO I HTTPRESPONSEREDIRECT VIA A NAME URL
    </pattern>
    <template>
<![CDATA[<p>You need to use the <a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#django.core.urlresolvers.reverse" rel="nofollow"><code>reverse()</code></a> command.</p><br/><br/><pre><code>from django.core.urlresolvers import reverse<br/><br/>def myview(request):<br/>    return HttpResponseRedirect(reverse('arch-summary', args=[1945]))<br/></code></pre><br/><br/><p>Where args satisfies all the arguments in your url's regular expression.  You can also supply named args by passing a dictionary.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM HIDE FORM FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think I found my answer.</p><br/><br/><p>First I tried:</p><br/><br/><pre><code>field.widget = field.hidden_widget<br/></code></pre><br/><br/><p>which didn't work.</p><br/><br/><p>The correct way happens to be:</p><br/><br/><pre><code>field.widget = field.hidden_widget()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATEFIELD TO UNIX TIMESTAMP
    </pattern>
    <template>
<![CDATA[<p>In python code, you can do this to convert a date or datetime to the Unix Epoch</p><br/><br/><pre><code>import time<br/>epoch = int(time.mktime(mydate.timetuple())*1000)<br/></code></pre><br/><br/><p>This doesn't work in a Django template though, so you need a custom filter, e.g:</p><br/><br/><pre><code>import time<br/><br/>from django import template<br/><br/>register = template.Library()<br/><br/>@register.filter<br/>def epoch(value):<br/>    try:<br/>        return int(time.mktime(value.timetuple())*1000)<br/>    except AttributeError:<br/>        return ''<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      START WITH SESSION IN GOOGL APP ENGIN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The reason django sessions are not supported by App engine out of the box is because django uses database table (model) based sessions, and the django ORM is not supported on appengine.</p><br/><br/><p>A solution to this is to make django models work out of the box on appengine. And it has been done by patching django code, in the <a href="http://code.google.com/p/app-engine-patch/" rel="nofollow">App Engine Patch</a> project.</p><br/><br/><p>Using this patch, as django models work, you get to access django admin, django auth along with the latest django release.</p><br/><br/><p>You may also find this blog post on deploying a django application on App engine, useful: <a href="http://uswaretech.com/blog/2009/04/develop-twitter-api-application-in-django-and-deploy-on-google-app-engine/" rel="nofollow">http://uswaretech.com/blog/2009/04/develop-twitter-api-application-in-django-and-deploy-on-google-app-engine/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN CUSTOM ERROR MESSAG
    </pattern>
    <template>
<![CDATA[<p>One way to do that is by overriding the ModelForm for the admin page. That allows you to write custom validation methods and return errors of your choosing very cleanly. Like this in admin.py:</p><br/><br/><pre><code>from django.contrib import admin<br/>from models import *<br/>from django import forms<br/><br/>class MyForm(forms.ModelForm):<br/>    class Meta:<br/>        model = MyModel<br/>    def clean_points(self):<br/>        points = self.cleaned_data['points']<br/>        if points.isdigit() and points &lt; 1:<br/>            raise forms.ValidationError("You have no points!")<br/>        return points<br/><br/>class MyModelAdmin(admin.ModelAdmin):<br/>    form = MyForm<br/><br/>admin.site.register(MyModel, MyModelAdmin)<br/></code></pre><br/><br/><p>Hope that helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL A FOREIGN KEY IN A REUSABL DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>If you think the link app will always point to a single app then one approach would be to pass the name of the foreign model as a string containing the application label instead of a class reference (<a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey" rel="nofollow">Django docs explanation</a>).</p><br/><br/><p>In other words, instead of:</p><br/><br/><pre><code>class Link(models.Model):<br/>    blog_post = models.ForeignKey(BlogPost)<br/></code></pre><br/><br/><p>do:</p><br/><br/><pre><code>from django.conf import setings<br/>class Link(models.Model):<br/>    link_model = models.ForeignKey(settings.LINK_MODEL)<br/></code></pre><br/><br/><p>and in your settings.py:</p><br/><br/><pre><code>LINK_MODEL = 'someproject.somemodel'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CONTEXT INFORM WHEN USE HTTPRESPONSEREDIRECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The best way would probably be to use a coded querystring on the redirect URL... its an old school approach.</p><br/><br/><p>You could do something like</p><br/><br/><p>/page/?m=1, /page/?m=2, etc</p><br/><br/><p>You would then parse that variable with request.GET in the view code and show the appropriate message.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PISTON ON GOOGL APPENGIN
    </pattern>
    <template>
<![CDATA[<p>It turns out the problem with Piston and AppEngine is mainly when it comes to the authentication code.<br/>So, I managed to port Piston to AppEngine doing the following:</p><br/><br/><ol><br/><li>I'm using the <a href="http://code.google.com/p/app-engine-patch/" rel="nofollow">app-engine-patch</a> project which integrates django's authentication framework with Google AppEngine</li><br/><li>I forked Piston and removed all the OAuth authentication code and models (in authentication.py). Its probably not too complicated to convert the model and auth code but as I don't need it I didn't bother...</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMUN BETWEEN DJANGO SERVER AND IPHON APP
    </pattern>
    <template>
<![CDATA[<p>Using xml-rpc or json-rpc are only means to encapsulate your data into a form that is easy to transport. Your iPhone app can transform the Objective C data using one of those formats and your Django server app can transform the data back into Python objects.</p><br/><br/><p>Neither of these have <em>anything</em> to do with security.</p><br/><br/><p>Creating an HTTPS (SSL) connection encrypts all communication between the client (iPhone) and the server (Django). You will need to get a certificate for the server side. This indicates to the client that the server is who it claims to be. Your next line of research down this path should be about how to configure lighttpd to handle SSL traffic. Once lighttpd negotiates the SSL communication, your Django app will operate as it does for non-secured traffic.</p><br/><br/><p>This is your best choice.</p><br/><br/><p>If, for whatever reason, you don't want to use SSL, then you could find strong encryption libraries for both ends of the communication. The iPhone app could encrypt the data, send it over an HTTP connection and the Django app could decrypt it. For example, the <a href="http://www.dlitz.net/software/pycrypto/doc/" rel="nofollow">pycrypto</a> Python library implements strong encryption ciphers such as <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard" rel="nofollow">AES</a> and <a href="http://en.wikipedia.org/wiki/Blowfish_%28cipher%29" rel="nofollow">Blowfish</a>. You might be able to find an implementation of one of these ciphers written in Objective C.</p><br/><br/><p>Did you notice that this is getting increasingly complex?</p><br/><br/><p>Go with SSL. It's the way security is done for HTTP-based communication.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUID TO ORM FOR SQL USER
    </pattern>
    <template>
<![CDATA[<p>There are some things that are ridiculously simple in SQL that are difficult or impossible through an ORM.  This is called the "<a href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch" rel="nofollow">object-relational impedance mismatch</a>."  Essentially an ORM treats each row in a database as a separate object.  So operations that involve treating values separately from their row become fairly challenging.  Recent versions of Django (1.1+) improve this situation somewhat with <a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">aggregation support</a>, but for many things, only SQL will work.  </p><br/><br/><p>To this end, django provides several methods of letting you drop down into raw sql quite simply.  Some of them return model objects as results, while others take you all the way down to your DBAPI2 connector.  The most low level looks like this:</p><br/><br/><pre><code>from django.db import connection<br/><br/>cursor = connection.cursor()<br/>cursor.execute("SELECT DISTINCT column1 FROM tablename")<br/>row = cursor.fetchone()<br/></code></pre><br/><br/><p>If you want to return a queryset from a SQL query, use the raw() on your model's manager:</p><br/><br/><pre><code>qs = ModelName.objects.raw("""SELECT first_name <br/>                              FROM myapp_modelname <br/>                              WHERE last_name = 'van Rossum'")<br/>for person in qs:<br/>     print person.first_name # Result already available<br/>     print person.last_name  # Has to hit the DB again<br/></code></pre><br/><br/><p><strong>Note:</strong> raw() is only available in the development version of Django, which should be merged into trunk as of 1.2.</p><br/><br/><p>Complete information is available in the documentation under <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/" rel="nofollow">Performing raw SQL queries</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO VIEW THAT HA URL PARAMET
    </pattern>
    <template>
<![CDATA[<p>Right, vary headers is not the correct solution, it's used when you want to cache based on client request headers like user-agent etc.  </p><br/><br/><p>You'll need to use <a href="http://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api">low-level API</a> or <a href="http://docs.djangoproject.com/en/dev/topics/cache/#template-fragment-caching">template fragment caching</a>. It depends on your views really.</p><br/><br/><p>With low-level API it looks something like this:</p><br/><br/><pre><code>from django.core.cache import cache<br/><br/>def get_user(request):<br/>    user_id = request.GET.get("user_id")<br/>    user = cache.get("user_id_%s"%user_id)<br/>    if user is None:<br/>        user = User.objects.get(pk=user_id)<br/>        cache.set("user_id_%s"%user_id, user, 10*60) # 10 minutes<br/>    ...<br/>    ..<br/>    .<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I don't believe I am supposed to<br/>  manually create an "export DJANGO..."<br/>  environment variable...</p><br/></blockquote><br/><br/><p>Manually or otherwise, you <em>are</em> supposed to ensure that variable is in the environment before you import a Django models file -- not sure what the causes are for your disbelief, but, whatever they may be, that disbelief is ill-founded.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIME EMAIL TEMPLAT WITH IMAG TO SEND WITH PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>To send an e-mail with embedded images, use python's built-in email module to build up the MIME parts.</p><br/><br/><p>The following should do it:</p><br/><br/><pre><code>from email.mime.image import MIMEImage<br/>from email.mime.multipart import MIMEMultipart<br/>from email.mime.text import MIMEText<br/><br/># Load the image you want to send at bytes<br/>img_data = open('logo.jpg', 'rb').read()<br/><br/># Create a "related" message container that will hold the HTML <br/># message and the image<br/>msg = MIMEMultipart(_subtype='related')<br/><br/># Create the body with HTML. Note that the image, since it is inline, is <br/># referenced with the URL cid:myimage... you should take care to make<br/># "myimage" unique<br/>body = MIMEText('&lt;p&gt;Hello &lt;img src="cid:myimage" /&gt;&lt;/p&gt;', _subtype='html')<br/>msg.attach(body)<br/><br/># Now create the MIME container for the image<br/>img = MIMEImage(img_data, 'jpeg')<br/>img.add_header('Content-Id', '&lt;myimage&gt;')  # angle brackets are important<br/>msg.attach(img)<br/><br/>send_mail(subject, msg.as_string(), from, [to], priority="high")<br/></code></pre><br/><br/><p>In reality, you'll probably want to send the HTML along with a plain-text alternative. In that case, use MIMEMultipart to create the "related" mimetype container as the root. Then create another MIMEMultipart with the subtype "alternative", and attach both a MIMEText (subtype html) and a MIMEText (subtype plain) to the alternative part. Then attach the image to the related root.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YEAR MONTH BASE POST ARCHIV
    </pattern>
    <template>
<![CDATA[<p>Firstly, the datetime format strings are given in the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#now" rel="nofollow">django docs</a>. I think you want capital instead of lowercase 'M'.</p><br/><br/><p>Since you want to display all 12 months of a year, even if only some have posts, we'll create an <code>archives</code> object to pass to the template. I've chosen to use a dictionary where</p><br/><br/><ul><br/><li>the keys are the years</li><br/><li>the values are a list of 12 <code>[datetime, bool]</code> pairs, where <code>datetime</code> represents a month, and <code>bool</code> is <code>True</code> if there are posts for that month.</li><br/></ul><br/><br/><p>Here's how we build the <code>archives</code> object in the view.</p><br/><br/><pre><code>from datetime import date<br/><br/>def archive(request):<br/>    arch = Post.objects.dates('date', 'month', order='DESC')<br/><br/>    archives = {}<br/><br/>    for i in arch:<br/>        year = i.year<br/>        month = i.month<br/>        try:<br/>            archives[year][month-1][1]=True<br/>        except KeyError:<br/>            # catch the KeyError, and set up list for that year<br/>            archives[year]=[[date(y,m,1),False] for m in xrange(1,13)]<br/>            archives[year][month-1][1]=True<br/><br/>    return render_to_response('blog/arhiva.html', <br/>              {'archives':sorted(archives.items(),reverse=True)})<br/></code></pre><br/><br/><p>In the template, we loop through the months for each year, and display the link if appropriate.</p><br/><br/><pre><code>{% for year, month_list in archives %}<br/>  {{ year }} archives: <br/>  {% for month, has_link in month_list %}<br/>    {% if has_link %}&lt;a href="/{{ month.year }}/{{ month.month }}/"&gt;{% endif %}<br/>      {{ month|date:"M" }}<br/>    {% if has_link %}&lt;/a&gt;{% endif %}<br/>  {% endfor %}<br/>{% endfor %}<br/></code></pre><br/><br/><p>I haven't checked all the code so there might be a couple of bugs. It would be better to use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#url" rel="nofollow">url template tag</a> for the link, instead of hardcoding the url format. I have a feeling my answer might be overly complicated, but I've spent a while typing it up, so I may as well share it with the world. </p><br/><br/><p><hr /></p><br/><br/><h2>Internationalization</h2><br/><br/><p>I haven't used the internationalization features of Django, so I can't really help with the translation. I recommend you have a look at the <a href="http://docs.djangoproject.com/en/dev/topics/i18n/" rel="nofollow">documentation</a>, and ask another question if there's a particular bit you don't understand.</p><br/><br/><p>Having said that, if you want to display the months is Romanian only, here's an ugly way to do it. </p><br/><br/><p>First, add the following line to the top of your archive function in the view.  </p><br/><br/><pre><code>rom_months = ['Ian', 'Feb', 'Mar', 'Apr', 'Mai', 'Iun', <br/>              'Iul', 'Aug', 'Sept', 'Oct', 'Noi', 'Dec']<br/></code></pre><br/><br/><p>Then substitute the following line into your view</p><br/><br/><pre><code>archives[year]=[[date(y,k+1,1),False,rom] for k, rom in enumerate(rom_months)]<br/></code></pre><br/><br/><p>Finally substitute the following into the template</p><br/><br/><pre><code>...<br/>{% for month, has_link, rom_month in month_list %}<br/>  {% if has_link %}&lt;a href="/{{ month.year }}/{{ month.month }}/"&gt;{% endif %}<br/>  {{ rom_month }}<br/>...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MOD WSGI PAGE CACH
    </pattern>
    <template>
<![CDATA[<p>From my experience with mod_wsgi in Apache, it is highly unlikely that they are causing caching.  A couple of things to try:</p><br/><br/><ol><br/><li>It is possible that you have some <a href="http://www.mnot.net/cache%5Fdocs/" rel="nofollow">proxy server</a> between your computer and the web server that is appropriately or inappropriately caching pages.  Sometimes ISPs run proxy servers to reduce bandwidth outside their network.  Can you please provide the HTTP headers for a page that is getting cached (Firebug can give these to you).  Headers that I would specifically be interested in include Cache-Control, Expires, Last-Modified, and ETag.</li><br/><li>Can you post your MIDDLEWARE_CLASSES from your settings.py file.  It possible that you have a Middleware that performs caching for you.</li><br/><li>Can you grep your code for the following items "load cache", "django.core.cache", and "cache_page".  A *grep -R "search" ** will work.</li><br/><li>Does the settings.py (or anything it imports like "from localsettings import *") include CACHE_BACKEND?</li><br/><li>What happens when you restart apache?  (e.g. sudo services apache restart).  If a restart clears the issue, then it might be apache doing caching (it is possible that this could also clear out a locmen Django cache backend)</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO BE USE WITH PY2EX
    </pattern>
    <template>
<![CDATA[<p>Yes, you require:</p><br/><br/><ul><br/><li>Python 2.5.2</li><br/><li>Django (svn version at<br/>least 2008-06-05)</li><br/><li>CherryPy (web<br/>server)</li><br/><li>Py2Exe</li><br/></ul><br/><br/><p><a href="http://misunderstandings.wordpress.com/2008/06/26/django-desktop-app/" rel="nofollow">Tutorial</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEJSON TO RETURN PREGENER JSON
    </pattern>
    <template>
<![CDATA[<p>EDITED after author's edit:</p><br/><br/><p>Can you do something like this:</p><br/><br/><pre><code>lat = float(request.GET.get('lat'))<br/>lng = float(request.GET.get('lng'))<br/>a = Authority.objects.get(area__contains=Point(lng, lat))<br/>if a:<br/>    json = simplejson.dumps({'name': a.name, <br/>                             'area': "{replaceme}",<br/>                             'id': a.id}), <br/>    return HttpResponse(json.replace('"{replaceme}"', a.area.geojson),<br/>                        mimetype='application/json')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWO RANDOM RECORD WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you specify the random operator in the ORM I'm pretty sure it will give you two distinct random results won't it?</p><br/><br/><pre><code>MyModel.objects.order_by('?')[:2] # 2 random results.<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VARCHAR 2 MORE EFFICI THAN A VARCHAR 255
    </pattern>
    <template>
<![CDATA[<p>In general, varchar(255) requires as much storage as varchar(1). In each case the table stores something like a pointer into a string table and a length. E.g. 4 bytes offset + 1 byte size = 5 bytes fixed per row, just for overhead.</p><br/><br/><p>The actual content is of course in the string table, which is only as long as the string your store in it. So if you store a 5 letter name in a varchar(255) field, it'll only use (say) 5 overhead bytes + 5 content bytes = 10 bytes.</p><br/><br/><p>Using a varchar(10) field will use exactly the same amount, but will only truncate strings longer than 10 bytes.</p><br/><br/><hr><br/><br/><p>Of course, the specific numbers depend on the storage engine implementation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DATABAS LAYER OUTSID OF DJANGO
    </pattern>
    <template>
<![CDATA[<p>You just need to configure the Django settings before you do any calls, including importing your models. Something like this:</p><br/><br/><pre><code>from django.conf import settings<br/>settings.configure(<br/>    DATABASE_ENGINE = 'postgresql_psycopg2',<br/>    DATABASE_NAME = 'db_name',<br/>    DATABASE_USER = 'db_user',<br/>    DATABASE_PASSWORD = 'db_pass',<br/>    DATABASE_HOST = 'localhost',<br/>    DATABASE_PORT = '5432',<br/>    TIME_ZONE = 'America/New_York',<br/>)<br/></code></pre><br/><br/><p>Again, be sure to run that code before running, e.g.:</p><br/><br/><pre><code>from your_app.models import *<br/></code></pre><br/><br/><p>Then just use the DB API as usual.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S MARKDOWN FILTER TRANSFORM A CARRIAG RETURN TO BR
    </pattern>
    <template>
<![CDATA[<h2>I don't think messing around with the newline syntax is a good idea ...</h2><br/><br/><p>I agree with Henrik's comment. From the <a href="http://daringfireball.net/projects/markdown/syntax" rel="nofollow">markdown docs</a>:</p><br/><br/><blockquote><br/>  <p>When you do want to insert a <code>&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.  </p><br/>  <br/>  <p>Yes, this takes a tad more effort to create a <code>&lt;br /&gt;</code>, but a simplistic "every line break is a <code>&lt;br /&gt;</code>" rule wouldn't work for Markdown. Markdown's email-style blockquoting and multi-paragraph list items work best - and look better - when you format them with hard breaks.</p><br/></blockquote><br/><br/><p>Have you looked at the other Django markup options, textile and restructuredtext? Their syntax might suit you better.</p><br/><br/><p><hr></p><br/><br/><h2>but if you still want to ...</h2><br/><br/><p>A rough and ready method is to chain the markdown and <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#linebreaksbr" rel="nofollow">linebreaksbr</a> filters.</p><br/><br/><pre><code>{{ value|markdown|linebreaksbr }}<br/></code></pre><br/><br/><p>This runs the markdown filter, then the linebreaksbr filter, which replaces <code>\n</code> with <code>&lt;br /&gt;</code>. You'll probably end up with too many linebreaks, but that might be better for you than too few.</p><br/><br/><p>If you a better solution than that, you could</p><br/><br/><ol><br/><li><p>Write a custom filter, as John suggests in his answer.</p></li><br/><li><p>Dive into the the <a href="http://www.freewisdom.org/projects/python-markdown" rel="nofollow">python-markdown</a> library, which Django uses, and <a href="http://www.freewisdom.org/projects/python-markdown/Writing%5FExtensions" rel="nofollow">write an extension</a> that implements your desired newline syntax. You would then use the extension with the filter  </p><br/><br/><p><code>{{ value|markdown:"linebreakextension" }}</code></p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO FILTER USER S THAT BELONG TO A SPECIF GROUP
    </pattern>
    <template>
<![CDATA[<p>You'll want to use <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#lookups-that-span-relationships" rel="nofollow">Django's convention for joining across relationships</a> to join to the group table in your query set:</p><br/><br/><pre><code>form.fields['myuser'].queryset = User.objects.filter(groups__name='foo')<br/></code></pre><br/><br/><p>If you want to see the generated query, you can do this:</p><br/><br/><pre><code>qs = User.objects.filter(groups__name='foo')<br/>print qs.query<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AR ALGORITHM SQL DJANGO
    </pattern>
    <template>
<![CDATA[<p>You should cache your popularity rating in an own column and update it when the underlying values change. You should also setup a database index on that column. If you then also cache the result of your most common queries, you took the most effective measures for the performance of your popularity queries.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATESYNTAXERROR CURRENT TRANSACT IS ABORT WHAT DOE THI EXCEPT MEAN DOE POSTGRESQL 8.4 WORK FINE WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>That exception means that there was an error in some SQL that is getting executed.  Since Django runs all the SQL inside of a database transaction, all the SQL that is being executed after the error gets ignored. So:</p><br/><br/><pre><code>BEGIN;<br/>SELECT * FROM table;<br/>SELECT missing_column FROM table WHERE id = 1; -- generates an error because the column is missing<br/>SELECT * FROM another_table; -- this statement and all following statements get ignored until the next COMMIT;<br/>COMMIT;<br/></code></pre><br/><br/><p>To figure out the problem, find your log file for PostgreSQL and run <code>tail -f /path/to/postgresql_error.log</code>.  Then refresh the page.  You should see the error come up in the log file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TYPEERROR IS NOT JSON SERIALIZ WHI
    </pattern>
    <template>
<![CDATA[<p>Querysets are not serializable out-of-the-box. If you try <code>list(self.items)</code> instead of just <code>self.items</code>, that should work as long as the items themselves are JSON-serializable.</p><br/><br/><p><strong>Update:</strong> It will raise an exception even if it isn't empty. I don't think it'll be accepted as a Django bug, though of course you can try; the simplest answer is to force evaluation using <code>list(qs)</code>, as I've already said.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN + RAW SQL QUERI
    </pattern>
    <template>
<![CDATA[<p>Looking at Paginator's source code, <a href="http://code.djangoproject.com/browser/django/tags/releases/1.1.1/django/core/paginator.py#L35" rel="nofollow">page() function</a> in particular, I think that it's only matter of implementing <a href="http://docs.python.org/reference/datamodel.html#object.__getslice__" rel="nofollow">slicing</a> on your side, and translating that to relevant LIMIT clause in SQL query. You might also need to add some caching, but this starts to look like QuerySet, so maybe you can do something else:</p><br/><br/><ul><br/><li>you can create database VIEW using CREATE VIEW myview AS [your query];</li><br/><li>add Django model for that VIEW, with <a href="http://docs.djangoproject.com/en/1.1/ref/models/options/#managed" rel="nofollow">Meta: managed=False</a></li><br/><li>use that model like any other model, including slicing its querysets - this means it's perfectly suitable for using with Paginator</li><br/></ul><br/><br/><p>(For your information - I've been using this approach for a long time now, even with complex many-to-many relationships with VIEWs faking m2m intermediate tables.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHERE TO PUT HELPER FUNCTION
    </pattern>
    <template>
<![CDATA[<p>I usually put such app specific helper function in file utils.py and use someting like this</p><br/><br/><pre><code>from myapp.utils import my_cool_func<br/><br/>dev view_coolness(request):<br/>    data = my_cool_func(request)<br/>    return render_to_response("xxx.html")<br/></code></pre><br/><br/><p>but it depends what you helper does, may be they modify request , the could be part of middleware, so you need to tell what exactly those helper functions do</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AT ALWAYSDATA.COM
    </pattern>
    <template>
<![CDATA[<p>Here's the <a href="http://wiki.alwaysdata.com/wiki/D%C3%A9ployer_une_application_Django" rel="nofollow">alwaysdata wiki entry</a> for setting up Django with fastcgi. Only down-side: it's written in French.</p><br/><br/><p>Well, I don't speak French, but what it basically says is:</p><br/><br/><ol><br/><li>Create a directory named <code>public</code> in the folder of your django project.</li><br/><li><p>In that directory create the file <code>django.fcgi</code> with the following content:</p><br/><br/><pre><code>#!/usr/bin/python<br/>import os, sys<br/><br/>_PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))<br/>sys.path.insert(0, _PROJECT_DIR)<br/>sys.path.insert(0, os.path.dirname(_PROJECT_DIR))<br/><br/>_PROJECT_NAME = _PROJECT_DIR.split('/')[-1]<br/>os.environ['DJANGO_SETTINGS_MODULE'] = "%s.settings" % _PROJECT_NAME<br/><br/>from django.core.servers.fastcgi import runfastcgi<br/>runfastcgi(method="threaded", daemonize="false")<br/></code></pre></li><br/><li><p>Next, create a .htaccess in the <code>public</code> folder with the following content:</p><br/><br/><pre><code>AddHandler fcgid-script .fcgi<br/>RewriteEngine On<br/>RewriteCond %{REQUEST_FILENAME} !-f<br/>RewriteRule ^(.*)$ django.fcgi/$1 [QSA,L]<br/></code></pre></li><br/><li><p>If you're planning to include the django admin interface, create this symbolic link in your <code>public</code> directory:</p><br/><br/><pre><code>ln -s /usr/local/alwaysdata/python/django/1.1/django/contrib/admin/media/ media<br/></code></pre></li><br/><li><p>In the end your folder tree hierarchy should somehow look like this:</p><br/><br/><pre><code>myproject/<br/>    __init__.py<br/>    manage.py<br/>    public/<br/>        django.fcgi<br/>        .htaccess<br/>        media/<br/>    settings.py<br/>    urls.py<br/>    myapp/<br/>        views.py<br/>        models.py<br/></code></pre></li><br/></ol><br/><br/><p>Hope this helps. I talked with the admin, and he said he will soon provide an English wiki. Let's hope this is going to happen anytime soon.</p><br/><br/><hr><br/><br/><p><strong>UPDATE: There is an <a href="http://wiki.alwaysdata.com/wiki/Deploying_a_Django_App" rel="nofollow">English wiki article now.</a></strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT DIGEST JSON PARS ERROR RESOLV
    </pattern>
    <template>
<![CDATA[<p>The example data you present looks all right but my strong suspicion still is that there is an unclosed comma somewhere like this:</p><br/><br/><pre><code> "timestamp":{<br/>              "response":"answer",<br/>              "response_text":"the text here"<br/>              }, &lt;------------<br/>}<br/></code></pre><br/><br/><p>IE is the only browser that (correctly) trips over this.</p><br/><br/><p>If this is not it, can you show a full data sample (or confirm that the example you show is indeed a full sample)?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPULAR ALGORITHM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>On Hacker News, only the 210 newest stories and 210 most popular stories are paginated (7 pages worth * 30 stories each). My guess is that the reason for the limit (at least in part) is this problem.</p><br/><br/><p>Why not drop all the fancy SQL for the most popular stories and just keep a running list instead? Once you've established a list of the top 210 stories you only need to worry about reordering when a new vote comes in since relative order is maintained over time. And when a new vote does come in, you only need to worry about reordering the story that received the vote.</p><br/><br/><p>If the story that received the vote is not on the list, calculate the score of that story, plus the least popular story that <em>is</em> on the list. If the story that received the vote is lower, you're done. If it's higher, calculate the current score for the second-to-least most popular (story 209) and compare again. Continue working up until you find a story with a higher score and then place the newly-voted-upon story right below that one in the rankings. Unless, of course, it reaches #1.</p><br/><br/><p>The benefit of this approach is that it limits the set of stories you have to look at to figure out the top stories list. In the absolute worst case scenario, you have to calculate the ranking for 211 stories. So it's very efficient unless you have to establish the list from an existing data set - but that's just a one-time penalty assuming you cache the list someplace.</p><br/><br/><p>Downvotes are another issue, but I can only upvote (at my karma level, anyway).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS THERE A WAY TO HAVE THE THROUGH MODEL IN A MANYTOMANYFIELD IN A DIFFER APP TO THE MODEL CONTAIN THE MANYTOMANYFIELD
    </pattern>
    <template>
<![CDATA[<p>It seems like I've found an answer, which works more consistently :)</p><br/><br/><p>The <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey" rel="nofollow">Django documentation on the ForeignKey class</a> says:</p><br/><br/><blockquote><br/>  <p>To refer to models defined in another<br/>  application, you can explicitly<br/>  specify a model with the full<br/>  application label. For example, if the<br/>  Manufacturer model above is defined in<br/>  another application called production,<br/>  you'd need to use:</p><br/></blockquote><br/><br/><pre><code>class Car(models.Model):<br/>    manufacturer = models.ForeignKey('production.Manufacturer')<br/></code></pre><br/><br/><blockquote><br/>  <p>This sort of reference can be useful<br/>  when resolving circular import<br/>  dependencies between two applications.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POSIT OF A RESULT IN THE LIST AFTER AN ORDER BI
    </pattern>
    <template>
<![CDATA[<p>I don't think you can do this in one database query using Django ORM. But if it doesn't bothers you, I would create a custom method on a model:</p><br/><br/><pre><code>from django.db.models import Count<br/><br/>class Model(models.Model):<br/>    score = models.IntegerField()<br/>    ...<br/><br/>    def ranking(self):<br/>        aggregate = Model.objects.filter(score__lt=self.score).aggregate(ranking=Count('score'))<br/>        return aggregate['ranking'] + 1<br/></code></pre><br/><br/><p>You can then use "ranking" anywhere, as if it was a normal field:</p><br/><br/><pre><code>print Model.objects.get(pk=1).ranking<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REALLI SCALE UP WITH DJANGO...GIVEN THAT YOU CAN ONLI USE ONE DATABAS ( IN THE MODELS.PI AND SETTINGS.PI )
    </pattern>
    <template>
<![CDATA[<p>Django now has <a href="http://code.djangoproject.com/wiki/MultipleDatabaseSupport" rel="nofollow">support for multiple databases</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E APP ENGIN JSON MODUL
    </pattern>
    <template>
<![CDATA[<p>Maybe you can import the django simplejson wrapper:</p><br/><br/><pre><code> from django.utils import simplejson  <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO RETURN PROXI MODEL INSTANC FROM A BASE MODEL INSTANC IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can perhaps make Django models polymorphic using the approach described <a href="http://groups.google.com/group/django-developers/msg/b567b75fe61d5044" rel="nofollow">here</a>. That code is in early stages of development, I believe, but worth investigating.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFIC WAY TO BULK INSERT WITH GET OR CR ( ) IN DJANGO ( SQL PYTHON DJANGO )
    </pattern>
    <template>
<![CDATA[<p>You can't do decent bulk insertions with get_or_create (or even create), and there's no API for doing this easily.</p><br/><br/><p>If your table is simple enough that creating rows with raw SQL isn't too much of a pain, it's not too hard; something like:</p><br/><br/><pre><code>INSERT INTO site_entry (field1, field2)<br/>(<br/>         SELECT i.field1, i.field2<br/>         FROM (VALUES %s) AS i(field1, field2)<br/>         LEFT JOIN site_entry as existing<br/>                 ON (existing.field1 = i.field1 AND existing.field2 = i.field2)<br/>         WHERE existing.id IS NULL<br/>)<br/></code></pre><br/><br/><p>where %s is a string like <code>("field1, field2"), ("field3, field4"), ("field5, field6")</code> that you'll have to create and escape properly yourself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N HTML CLASS TO A DJANGO FORM S HELP TEXT
    </pattern>
    <template>
<![CDATA[<p>There's only that much you can customize in UI from form options.  The more flexible way to approach a problem is to create your own form template then and reuse it instead of <code>{{ form.as_something }}</code>.  Read these topics from Django documentation:</p><br/><br/><ol><br/><li><a href="http://docs.djangoproject.com/en/1.1/topics/forms/#customizing-the-form-template" rel="nofollow">Customizing form templates</a></li><br/><li><a href="http://docs.djangoproject.com/en/1.1/topics/forms/#reusable-form-templates" rel="nofollow">Reuseable form templates</a></li><br/></ol><br/><br/><p>This worked very well when I needed significantly customized form marks yet keeping it DRY.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BIG PICTUR QUESTION REGARD DJANGO JAVA PYTHON HTML AND WEB SIT DEVELOP IN GENER
    </pattern>
    <template>
<![CDATA[<p>Hmm, you've asked a laundry list of questions here. I'll pick a couple of the important ones and answer.</p><br/><br/><p>As for the rationale for languages like Python... the truth is that many web applications are either I/O bound or database bound. When that's the case it doesn't matter much if the language you're using is not as fast as C++- the bottleneck is elsewhere. Beyond that an awful lot of the core Python routines and data structures are written in C. Python is used to drive the highest level of logic, but most of the work happens in fast native code. It might surprise you to learn that in my current job I write 3D animation software in Python. Of course a lot of what is going on behind the scenes was written in C++. There's a name for this: "Alternate Hard and Soft Layers." The reason we use Python is pretty simple- our choices are Python or C++ because of the APIs we write to, and we're several times as productive in Python. I would actually ask what the rationale for the existence of C++ is, but that's another subject (and flamebait ;).)</p><br/><br/><p>As for the visual presentation issues... traditionally there has been a pretty distinct separation between the server-side logic of an application and the in-browser logic, partially because the only language you can count on being in the browser is Javascript (and even then you can't actually count on it being on, leaving aside the existence of browsers like Lynx.) So you wrote your server logic in some sort of framework like Django, and then you used some Javascript framework to do your front-end stuff, and (in the last few years) you used something like AJAX to let them interoperate a bit more smoothly.</p><br/><br/><p>This is still pretty much the dominant paradigm, but things have started to change. A lot of server-side frameworks have started including facilities for generating Javascript in one way or another. And people have started writing compilers that translate from other languages to Javascript. One prominent example is Google's GWT, which translates from Java to Javascript: <a href="http://code.google.com/webtoolkit/" rel="nofollow">http://code.google.com/webtoolkit/</a> There are other examples of this sort of approach though. I did a lot of programming in a common lisp library called parenscript ( <a href="http://common-lisp.net/project/parenscript/" rel="nofollow">http://common-lisp.net/project/parenscript/</a>) a few years ago, and there is the beginning of a Clojure ( <a href="http://clojure.org/" rel="nofollow">http://clojure.org/</a>) library for doing something similar. Also, one of the most interesting set of frameworks around is Seaside/Magritte ( <a href="http://www.seaside.st/" rel="nofollow">http://www.seaside.st/</a> and <a href="http://www.lukas-renggli.ch/smalltalk/magritte" rel="nofollow">http://www.lukas-renggli.ch/smalltalk/magritte</a>) which use continuations to manage the state of widgets. There are similar frameworks for scheme and common lisp.</p><br/><br/><p>As for html being like assembler, I'm inclined to agree in cases where I am writing the html. I tend to use some sort of abstraction layer to generate html in those cases. But an awful lot of the html in the world is made by designers. Some of them use GUI applications to generate html, and the better ones use text editors. But most of them don't want to deal with anything more complicated than simple templating in html, which is what they know.</p><br/><br/><p>One thing you have to understand about the evolution of the web is that http and html were not initially designed to do the kinds of things they are being used for today. And on top of that the major browsers have very often been really broken. And on top of that you have no control over what facilities the user has available to them- they could be using any browser, with or without Java, Javascript, Flash, etc, and with any of a number of permutations of bugsets, depending on the browser. So it's only in the last several years that things have stabilized enough for people to be a little less conservative about the facilities they use on the client side. It's still a good idea to make sure that pages degrade gracefully, when possible. A general purpose web page should be usable in a text browser, though of course many types of web applications can't be made to work in that limited an environment.</p><br/><br/><p>HTML 5 is going to shake a lot of this up. But it is going to be a long time before it is safe to assume that everyone is using a browser capable of doing anything from HTML 5, and longer before it is safe to assume that everyone is using a browser that implements all of HTML 5. Anyway, I'd suggest you look around at some of the less visible projects, like Seaside for instance. There is a lot of experimentation going on. But the web has always been a tough environment for this kind of thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO SORT A QUERYSET DJANGO
    </pattern>
    <template>
<![CDATA[<p>What about</p><br/><br/><pre><code>import operator<br/><br/>auths = Author.objects.order_by('-score')[:30]<br/>ordered = sorted(auths, key=operator.attrgetter('last_name'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT REVERS AJAX IN A DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>How about using the awesome <a href="http://pushmodule.slact.net/" rel="nofollow">nginx push module</a>? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FULL TEXT SEARCH IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I suggest you to adopt a search engine.</p><br/><br/><p>We've used <a href="http://haystacksearch.org/" rel="nofollow">Haystack search</a>, a modular search application for django supporting many search engines (Solr, Xapian, Whoosh, etc...)</p><br/><br/><p>Advantages:</p><br/><br/><ul><br/><li>Faster</li><br/><li>perform search queries even without querying the database.</li><br/><li>Highlight searched terms</li><br/><li>"More like this" functionality</li><br/><li>Spelling suggestions</li><br/><li>Better ranking</li><br/><li>etc...</li><br/></ul><br/><br/><p>Disadvantages:</p><br/><br/><ul><br/><li>Search Indexes can grow in size pretty fast</li><br/><li>One of the best search engines (Solr) run as a Java servlet (Xapian does not)</li><br/></ul><br/><br/><p>We're pretty happy with this solution and it's pretty easy to implement.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DUMPDATA TO DUMP A SUBSET OF OVERAL DATA
    </pattern>
    <template>
<![CDATA[<p>A 3rd party django app, <a href="http://github.com/ericholscher/django-test-utils" rel="nofollow" title="django-test-utils">django-test-utils</a> contains a <a href="http://github.com/ericholscher/django-test-utils/blob/master/test_utils/management/commands/makefixture.py" rel="nofollow" title="makefixture">makefixture</a> command implementation which is basically a smarter dumpdata. You can specify exact model names with ID ranges to export (and it will follow related objects)<br/>Example: <code>manage.py makefixture --format=xml --indent=4 proj.appname.modelname[1:101] &gt; test.xml</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL CHOIC FIELD CHECKBOX SELECT MULTIPL
    </pattern>
    <template>
<![CDATA[<p>The profile choices need to be setup as a ManyToManyField for this to work correctly.</p><br/><br/><p>So... your model should be like this:</p><br/><br/><pre><code>class Choices(models.Model):<br/>  description = models.CharField(max_length=300)<br/><br/>class Profile(models.Model):<br/>  user = models.ForeignKey(User, blank=True, unique=True, verbose_name_('user'))<br/>  choices = models.ManyToManyField(Choices)<br/></code></pre><br/><br/><p>Then, sync the database and load up Choices with the various options you want available.</p><br/><br/><p>Now, the ModelForm will build itself...</p><br/><br/><pre><code>class ProfileForm(forms.ModelForm):<br/>  Meta:<br/>    model = Profile<br/>    exclude ['user']<br/></code></pre><br/><br/><p>And finally, the view:</p><br/><br/><pre><code>if request.method=='POST':<br/>  form = ProfileForm(request.POST)<br/>  if form.is_valid():<br/>    profile = form.save(commit=False)<br/>    profile.user = request.user<br/>    profile.save()<br/>else:<br/>  form = ProfileForm()<br/><br/>return render_to_response(template_name, {"profile_form": form}, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>It should be mentioned that you could setup a profile in a couple different ways, including inheritance. That said, this should work for you as well.</p><br/><br/><p>Good luck.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE INPUT PARS
    </pattern>
    <template>
<![CDATA[<p>If you are using django.forms look at <a href="http://docs.djangoproject.com/en/1.1/ref/forms/fields/#datefield" rel="nofollow">DateField.input_formats</a>. This argument allows to define several date formats. DateField tries to parse raw data according to those formats in order.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLI CALCUL TO A QUERI SET
    </pattern>
    <template>
<![CDATA[<p>While was unable to calculate over a QuerySet, instead I had to convert into a list of sorts</p><br/><br/><pre><code>links = Link.objects.select_related().annotate(votes=Count('vote'))<br/>for link in links:<br/>    delta_in_hours = (int(datetime.now().strftime("%s")) - int(link.created.strftime("%s"))) / 3600<br/>    link.popularity = ((link.votes - 1) / (delta_in_hours + 2)**1.5)<br/><br/>links = sorted(links, key=lambda x: x.popularity, reverse=True)<br/></code></pre><br/><br/><p>Not optimal but it works.  I can't use my lovely object_list generic view with it's automatically pagination and have to resort to doing it manually but it's a fair compromise to having a working view...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEAN OF LEAD UNDERSCOR IN LIST OF TUPL USE TO DEFIN CHOIC FIELD
    </pattern>
    <template>
<![CDATA[<p>The leading underscore is the commonly used function alias for the one of the ugettext functions used by the internationalization (i18n) mechanics. </p><br/><br/><p>It means that when you have i18n running, the choicefield labels will be translated into the appropriate end-user language, if a translation is available.  </p><br/><br/><p>At the top of a file that features this kind of syntax, you should see (or if not, you should have) something like:</p><br/><br/><p><code>from django.utils.translation import ugettext_lazy as _</code></p><br/><br/><p>See the <a href="http://docs.djangoproject.com/en/dev/topics/i18n/internationalization/#topics-i18n-internationalization">docs here</a> for more details</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE INCLUD URLCONF DOE N T HAVE ANI PATTERN IN IT
    </pattern>
    <template>
<![CDATA[<p>Check your patterns for include statements that point to non-existent modules or modules that do not have a <code>urlpatterns</code> member. I see that you have an <code>include('urls.ajax')</code> which may not be correct. Should it be <code>ajax.urls</code>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( OR REPLAC ) UNICOD CHARACT THAT WOULD TAKE MORE THAN 3 BYTE IN UTF 8
    </pattern>
    <template>
<![CDATA[<p>Unicode characters in the ranges \u0000-\uD7FF and \uE000-\uFFFF will have 3 byte (or less) encodings in UTF8.  The \uD800-\uDFFF range is for multibyte UTF16.  I do not know python, but you should be able to set up a regular expression to match outside those ranges.</p><br/><br/><pre><code>pattern = re.compile("[\uD800-\uDFFF].", re.UNICODE)<br/>pattern = re.compile("[^\u0000-\uFFFF]", re.UNICODE)<br/></code></pre><br/><br/><p>Edit adding Python from Denilson Sá:</p><br/><br/><pre><code>pattern = re.compile(u'[^\u0000-\uD7FF\uE000-\uFFFF]', re.UNICODE)<br/>filtered_string = re_pattern.sub(u'\uFFFD', unicode_string)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A PYTHON UNICOD STRING CONTAIN NON WESTERN LETTER
    </pattern>
    <template>
<![CDATA[<pre><code>import unicodedata as ud<br/><br/>latin_letters= {}<br/><br/>def is_latin(uchr):<br/>    try: return latin_letters[uchr]<br/>    except KeyError:<br/>         return latin_letters.setdefault(uchr, 'LATIN' in ud.name(uchr))<br/><br/>def only_roman_chars(unistr):<br/>    return all(is_latin(uchr)<br/>           for uchr in unistr<br/>           if uchr.isalpha()) # isalpha suggested by John Machin<br/><br/>&gt;&gt;&gt; only_roman_chars(u"ελληνικά means greek")<br/>False<br/>&gt;&gt;&gt; only_roman_chars(u"frappé")<br/>True<br/>&gt;&gt;&gt; only_roman_chars(u"hôtel lœwe")<br/>True<br/>&gt;&gt;&gt; only_roman_chars(u"123 ångstrom ð áß")<br/>True<br/>&gt;&gt;&gt; only_roman_chars(u"russian: гага")<br/>False<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.NOW ( ) ABNORM PYTHON
    </pattern>
    <template>
<![CDATA[<p>because datetime.now() is being called when your module is initialised and that value is being used for the default.</p><br/><br/><p>You want to use the <a href="http://docs.djangoproject.com/en/1.2/ref/models/fields/#datefield" rel="nofollow">auto_now_add=True parameter</a></p><br/><br/><pre><code>created = models.DateTimeField(auto_now_add=True)<br/></code></pre><br/><br/><p>edit: no need for 'blank' if you're setting the auto option.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S SOURC FOR PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://www.djangoproject.com/community/" rel="nofollow">Django community aggregator</a> is a great source of news and information about what people are doing with Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG LIBRARI WITH VIRTUALENV ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>OK this appears to be a VirtualEnv problem. </p><br/><br/><p>Despite making a new VirtualEnv with the --no-site-packages argument, my Django site is fetching the django files from the root install <code>C:/Python26/Lib/site-packages/</code> rather than locally.</p><br/><br/><p>Django then attempts to fetch PIL in the root <code>site-packages</code> which it cannot find and results in an error.</p><br/><br/><p>I have no idea why this is occurring. If I open the python interpreter the root django files do not appear on the path.</p><br/><br/><p>Once remedied <code>easy_install PIL</code> should work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UDIO WAVEFORM VISUALIS IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>This one (uses audiolab, PIL and numpy) is decent: <a href="http://www.freesound.org/blog/?p=10" rel="nofollow">http://www.freesound.org/blog/?p=10</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET THE CURRENT LANGUAG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Functions of particular interest are django.utils.translation.get_language() which returns the language used in the current thread.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/1.1/howto/i18n/#using-translations-outside-views-and-templates" rel="nofollow">http://docs.djangoproject.com/en/1.1/howto/i18n/#using-translations-outside-views-and-templates</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HAVE TEST TOOL COMPAR TO RAIL TEST TOOL
    </pattern>
    <template>
<![CDATA[<p>There is a new tools called <a href="http://lettuce.it/" title="Lettuce">Lettuce</a> that promises to be a Pythonic version of Cucumber.  It is starting with Django integration.  That plus the existing testing tools in Django make it pretty good for unit testing.</p><br/><br/><p>There's also a tool called <a href="http://www.getwindmill.com/">Windmill</a> that provides a solid browser-based testing tool for building GUI tests.  Couple that with a tool like Lettuce for writing acceptance tests and the straight <a href="http://docs.python.org/library/unittest.html">unittest</a> and <a href="http://somethingaboutorange.com/mrl/projects/nose/">nosetests</a> and I'd say you're set.</p><br/><br/><p>The thing to remember, there's a slightly different culture between Ruby and Python.  Ruby has a preference for tests above all else.  In Python it's documentation.  As such, there's not a million and one testing frameworks in Python, just a few really solid ones with the occasional outlier (like Lettuce).</p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DOWNLOAD IMAG FROM URL MODIFI AND SAVE TO IMAGEFIELD
    </pattern>
    <template>
<![CDATA[<p>In an attempt to kill 2 birds with 1 stone. Why not use a (c)StringIO object instead of a NamedTemporaryFile? You won't have to store it on disk anymore and I know for a fact that something like this works (I use similar code myself).</p><br/><br/><pre><code>from cStringIO import StringIO<br/>img_temp = StringIO()<br/>inImage.save(fh, 'PNG')<br/>img_temp.seek(0)<br/><br/>file_object = File(img_temp, filename)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOTO S3 ACCESS
    </pattern>
    <template>
<![CDATA[<p>The docs for boto's ACLs are <a href="http://boto.s3.amazonaws.com/s3_tut.html#setting-getting-the-access-control-list-for-buckets-and-keys">here</a>.  I suggest just using the <code>private</code> "canned policy" -- since your users don't have S3 accounts anyway, it's by far the simplest idea.  Your app will of course have to keep track of which user "owns" which files (which should be a very, very simple Django model!).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I CALL THE SUBCOMMAND SYNCDB FROM THE INITI SCRIPT
    </pattern>
    <template>
<![CDATA[<p>All Django management commands can be accessed programmatically:</p><br/><br/><pre><code>from django.core.management import call_command<br/>call_command('syncdb', interactive=True)<br/></code></pre><br/><br/><p>Ideally you'd use a pre-init signal on <code>runserver</code> to activate this, but such a signal <a href="http://code.djangoproject.com/ticket/13024" rel="nofollow">doesn't exist</a>.  So, actually, the way I'd handle this if I were you would be to create a custom management command, like <code>runserver_newdb</code>, and execute this inside it:</p><br/><br/><pre><code>from django.core.management import call_command<br/>call_command('syncdb', interactive=True)<br/>call_command('runserver')<br/></code></pre><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/" rel="nofollow">the documentation</a> for more information on writing custom management commands.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YOU DO N T USE SCAFFOLD IS RUBI ON RAIL STILL GOOD FOR RAPID DEVELOP
    </pattern>
    <template>
<![CDATA[<p>I have never seen Rails scaffold-generated view code used in a production app. The chances that it's going to create the look that you want is nearly zero. I use the generators for models and controllers all the time, as they are very useful.</p><br/><br/><p>To your question of frameworks:</p><br/><br/><p>If you know Python better, use Django.<br/>If you know Ruby better, use Rails. </p><br/><br/><p>If this is a hobby site, use whichever one interests you the most.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC MAP URL LENGTH LIMIT
    </pattern>
    <template>
<![CDATA[<p>This response came from the Server (google). So your not allowed to request such long URLs.</p><br/><br/><p>See the google api doc for more infos:</p><br/><br/><blockquote><br/>  <p>Static Map URLs are restricted to 2048 characters in size. In practice, you will probably not have need for URLs longer than this, unless you produce complicated maps with a high number of markers and paths.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLASK FOR PYTHON ARCHITECTUR QUESTION REGARD THE SYSTEM
    </pattern>
    <template>
<![CDATA[<p>In Flask request is a thread-safe global, so you actually do import it:</p><br/><br/><pre><code>from flask import request<br/></code></pre><br/><br/><p>I'm not sure this feature is related to WSGI as other WSGI micro-frameworks do pass request as a view function argument. "Global" request object is a feature of Flask. Flask also encourages to store user's data which is valid for a single request in a similar object called flask.g:</p><br/><br/><blockquote><br/>  <p>To share data that is valid for one<br/>  request only from one function to<br/>  another, a global variable is not good<br/>  enough because it would break in<br/>  threaded environments. Flask provides<br/>  you with a special object that ensures<br/>  it is only valid for the active<br/>  request and that will return different<br/>  values for each request. In a<br/>  nutshell: it does the right thing,<br/>  like it does for request and session.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>If you want to use Python to do complex SQL queries on your database, e.g. eagerloading or filtering on the fly you might be wanting <a href="http://www.sqlalchemy.org/" rel="nofollow">SQLAlchemy</a>.</p><br/><br/><p><a href="http://turbogears.org/2.0/" rel="nofollow">TurboGears 2</a> is a framework which comes with SQLAlchemy as standard, check out their <a href="http://www.turbogears.org/2.0/docs/main/Caching.html" rel="nofollow">caching page</a> for more info on the second part of your answer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL ( 1054 UNKNOWN COLUMN IN FIELD LIST )
    </pattern>
    <template>
<![CDATA[<p>maybe your tables schema has been changed? Also, running <code>syncdb</code> does not update already created tables.</p><br/><br/><p>You might need to drop all the tables &amp; then run <code>syncdb</code> again. Also remember to take backup of your data!!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE OS.SYSTEM IS THERE A WAY FOR PYTHON SCRIPT TO MOVE PAST THI WITHOUT WAIT FOR CALL TO FINISH
    </pattern>
    <template>
<![CDATA[<p>I'm not sure, but I think <a href="http://docs.python.org/library/subprocess.html" rel="nofollow">the subprocess module</a> with its Popen is much more flexible than os.popen. If I recall correctly it includes asynchronous process spawning, which I think is what you're looking for.</p><br/><br/><p><strong>Edit:</strong> It's been a while since I used the subprocess module, but if I'm not mistaken, subprocess.Popen returns immediately, and only when you try to communicate with the process (such as reading its output) using subprocess.communicate does your program block waiting for output if there is none.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROXI MODEL AND FOREIGNKEY
    </pattern>
    <template>
<![CDATA[<p>To switch from a model class to a proxy class without hitting the database:</p><br/><br/><pre><code>class EntryProxy(Entry):<br/>    @property<br/>    def category(self):<br/>        new_inst = EntryProxy()<br/>        new_inst.__dict__ = super(EntryProxy, self).category.__dict__<br/>        return new_inst<br/></code></pre><br/><br/><p>edit: the snippet above seems not working on django 1.4</p><br/><br/><p>To switch from a queryset to a child proxy class without hitting database:</p><br/><br/><pre><code>class CategoryProxy(Category):<br/>    @property<br/>    def entry_set(self):<br/>        qs = super(CategoryProxy, self).entry_set<br/>        qs.model = EntryProxy<br/>        return qs<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONSTANT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Both Luper and Vladimir are correct imho but you'll need both in order to complete your requirements.</p><br/><br/><ul><br/><li><p>Although, the constants don't <em>need</em> to be in the settings.py, you could put them anywhere and import them from that place into your view/model/module code.  I sometimes put them into the <code>__init__.py</code> if I don't care to have them to be considered globally relevant.</p></li><br/><li><p>a context processor like this will ensure that selected variables are globally in the template scope</p><br/><br/><pre><code>def settings(request):<br/>    """<br/>    Put selected settings variables into the default template context<br/>    """<br/>    from django.conf import settings<br/>    return {<br/>        'DOMAIN':     settings.DOMAIN,<br/>        'GOOGLEMAPS_API_KEY': settings.GOOGLEMAPS_API_KEY,<br/>    }<br/></code></pre></li><br/></ul><br/><br/><p>But this might be overkill if you're new to django; perhaps you're just asking how to put variables into the template scope...?</p><br/><br/><pre><code>from django.conf import settings<br/><br/>...<br/># do stuff with settings.MIN_TIME_TEST as you wish<br/><br/>render_to_response("the_template.html", { <br/>    "MIN_TIME_TEST": settings.MIN_TIME_TEST <br/>}, context_instance=RequestContext(request)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO START LEARN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is from a post I made on my blog, answering almost <a href="http://ironzebra.com/news/41/learning-django-where-to-start-and-what-to-know" rel="nofollow">exactly same question</a>. It contains many of the answers already given here, as well as some extra advice, and some of it is my personal opinion, and others may differ from me. Hopefully someone finds it useful:</p><br/><br/><h2>Build Something</h2><br/><br/><p>The best advice I can give is to start by building something. A typical "Hello world" for Django is a blog website, and I would also recommend starting with that. The Django framework tries to make common tasks extremely easy and simple, and a website with simple blogging functionality is a typical example. A fluent Djangonaut can code up a simple blog website in less than an hour by using all the libraries available, and therefore it's a good place to start and get a feel for how Django does things.</p><br/><br/><h2>The Django Book</h2><br/><br/><p>Of course, before you can just jump in and start coding, you need to get your system up and running with Django, and learn the basics. A great resource for that is the <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">Django Book</a>. The authors haven't worked on it in a while or kept it quite up to date (due to its young nature, Django changes quite frequently), but It's freely available online and highly recommended. Read the first few chapters on how to set up your system, how all the parts of Django fit together into the MVC model, and be amazed by how Django does things so simply that other frameworks made unnecisarily tiresome.</p><br/><br/><h2>The Django Tutorials and Documentation</h2><br/><br/><p>There are so many great tutorials on the <a href="https://docs.djangoproject.com/en/1.3/" rel="nofollow">Django website</a>, that you'll almost need nothing else once you have the basics of Django down. The documentation is also fantastic, go take a look for yourself.</p><br/><br/><h2>Pick a Django Version</h2><br/><br/><p>For a beginner, it will be a good idea to pick a Django version, and stick with it. At the time of this writing, there are two main versions being used by most, Django 1.2 and Django 1.3, as well as the development version (the version that the Django developers work on and test changes in before it gets released as a major version). Don't use the development version when you're starting out - you're bound to run into trouble.</p><br/><br/><p>The big thing is that Django has existed for around four or five years now, and much of the tutorials you'll find scattered over Google will be aimed at Django 1.0 and 1.1. That's fine, and mostly not a problem, but Django's added quite a lot of functionality since then that makes most of those tutorials and code snippets obsolete. Try to stick to tutorials that are aimed at your version, where possible.</p><br/><br/><p>Once you've picked a version, make sure you always read the correct version of the <a href="https://docs.djangoproject.com/en/1.3/" rel="nofollow">Django documentation</a>. You'll see on the right-hand side sidebar and in the url of the page you are on that you can change the version you're looking at. Django's documentaion is truly excellent and far beyond anything else out there, and the authors take great care to specifically state which functions are new to that version, and which are deprecated in later versions. Just make sure you're aware of that, so that you don't waste countless hours trying to make something work that's not available in your version.</p><br/><br/><h2>Know what DRY means, and practice it</h2><br/><br/><p>DRY: "Don't Repeat Yourself" is one of the core principles behind Django. If you find yourself copy-pasting anything in Django, there's almost certainly a better way to do it. Most programmers will know from experience why repitition like that is bad, but in short, if something in your code needs to change later on or if you made a mistake somewhere, you only need to change it in one place. That's useful, because if there is more than one place needing change, and you forget about that instance, you'll be introducing errors and bugs into your code.</p><br/><br/><h2>Stay away from Class-based views</h2><br/><br/><p>A new addition to Django 1.3 is a whole array of Class-based Generic Views. If you don't know what that means, don't worry. The vast majority of tutorials and books about Django won't make any mention of it, mainly because it is so new. It's a feature that is meant to lessen the repitition in creating views, thereby following the DRY principle. While it does do that to some extent, it also introduces a lot of black magic and the need to frequently go scratch around in the Django source code to see what's going on. For the beginner, that is less than ideal. In addition, the error messages as they are now provided for Class-based views often point you in the completely wrong direction. Stay away from them, and rather use functional views in the beginning, as most tutorials will tell you to. When you're a bit more used to Django and you find the repitition of functional views frustrating, look into Class-based Generic Views.</p><br/><br/><h2>Don't start out hosting on Google App Engine</h2><br/><br/><p>While GAE is free and great for scalable Django apps, it also introduces a lot of restrictions on your login process, and the documentation on that is extremely scarce. As a beginner, don't start out with that route, since lots of the normal Django documentation will suddenly not apply, and you won't know what to do. Rather, start with a service like <a href="http://ep.io" rel="nofollow">epio</a>, <a href="http://gondor.io" rel="nofollow">gondor.io</a>, or <a href="https://code.djangoproject.com/wiki/DjangoFriendlyWebHosts" rel="nofollow">many others</a> . Epio's still in beta, but have a free hosting option as well (up to a certain amount of monthly usage). Developed by two of the Django core developers, I strongly recommend using them - it's comparable to Heroku for Ruby on Rails.</p><br/><br/><h2>Use StackOverflow,  Ask questions</h2><br/><br/><p>My final piece of advice is to make use of StackOverflow any time you get stuck. First off, they already have the answer to just about any question you can dream of. If you can't find it on the site, a good way to find the answer to your question is to append "stackoverflow" as part of your google search terms. Otherwise, post a question and let the Django community help you out. It's proven to be my greatest resource in learning the darker sides of Django over the last few years, apart from physically reading the Django code (which you should also do!). Good luck, and enjoy!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT ERROR DLL LOAD FAIL PYTHON
    </pattern>
    <template>
<![CDATA[<p>This error is a PITA: it is often caused by missing symbols in dll (because a dependent dll was not found, etc...). You should check the .pyd with dependency walker, or look into the windows log which may log such errors depending on your configuration.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CM AND JQUERI
    </pattern>
    <template>
<![CDATA[<p>A simple solution: keep your JQuery library in the header and place all other your JS at the boottom of the page, right before <code>&lt;/body&gt;</code>. In this case in admin mode, your jQuery lib will be overrided by admin's copy, and then all of your code will be added back to it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIQU TASK WITH CELERI
    </pattern>
    <template>
<![CDATA[<p>There is an example of "Ensuring a task is only executed one at a time" here in the documentation:<br><br/><a href="http://ask.github.com/celery/cookbook/tasks.html" rel="nofollow">http://ask.github.com/celery/cookbook/tasks.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST TEST THE INITI VALU OF A FORM FIELD
    </pattern>
    <template>
<![CDATA[<p>Hate to answer my own question (like the 3rd time I've done it) but after mocking around with the test client, I've found a better way:</p><br/><br/><pre><code>def test_creating_stop(self):<br/>    c = self.client<br/><br/>    # Check that name is pre-filled<br/>    response = c.get('%s?name=abcd' % reverse('add_new_stop'))<br/>    self.assertEqual(response.context['form'].initial['name'], 'abcd')<br/></code></pre><br/><br/><p>Does anyone see anything wrong with this? I'll leave it up for a while see what people think.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DOE N T FIND THE SHELL.IPSHEL CLASS
    </pattern>
    <template>
<![CDATA[<p>A <a href="https://github.com/ipython/ipython/blob/8ce576641c4d1d244944fcb4c6b244efde4aa1df/IPython/__init__.py" rel="nofollow">change</a> was made to IPython back in August 19, 2009 that removed this name, and Django hasn't caught up yet. So, Django bug.</p><br/><br/><p><strong>EDIT:</strong></p><br/><br/><p>And <a href="http://code.djangoproject.com/ticket/12735" rel="nofollow">here it is</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO REMOV EXTRA WHITE SPACE TAB FROM A STRING
    </pattern>
    <template>
<![CDATA[<p>Split on any whitespace, then join on a single space.</p><br/><br/><pre><code>' '.join(s.split())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EC2 AMI PRE CONFIGUR WITH DJANGO STACK
    </pattern>
    <template>
<![CDATA[<p>It might be better take a standard well known image and install the software.  The Ubuntu installation is quick and easy.  In my case I've had no trouble using the ubuntu-maverick-10.10-amd64-server AMI from Canonical to build up a Pylons stack.  For your requirements you could start with this AMI and then using </p><br/><br/><pre><code>sudo tasksel --section server<br/></code></pre><br/><br/><p>and selecting the LAMP components (space-bar to select) you get Apache and MySQL.  Then </p><br/><br/><pre><code>sudo apt-get install python-django python-django-doc<br/></code></pre><br/><br/><p>gets you Django. See more details <a href="https://wiki.ubuntu.com/Django" rel="nofollow">here</a>.</p><br/><br/><p>Of course custom configuration is another matter -- which for my level of Apache experience is a slow process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IF A CELERI TASK IS STILL BE PROCESS
    </pattern>
    <template>
<![CDATA[<p>define a field (PickledObjectField) in your model to store the celery task:  </p><br/><br/><pre><code>class YourModel(models.Model):<br/>    .<br/>    .<br/>    celery_task = PickledObjectField()<br/>    .<br/>    .<br/><br/>    def task():<br/>        self.celery_task = SubmitTask.apply_async(args = self.task_detail())<br/>        self.save()<br/></code></pre><br/><br/><p>In case your task is not specific on any model you should create one specifically for the celery tasks. </p><br/><br/><p>or else I suggest using django-celery. It has a nice monitoring feature:<br><br/><a href="http://ask.github.com/celery/userguide/monitoring.html#django-admin-monitor" rel="nofollow">http://ask.github.com/celery/userguide/monitoring.html#django-admin-monitor</a>, saves the tasks details in a django model in a nice graphical way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROVID CHART ON THE WEB SERVER SID OR CLIENT SID LIBRARI HTML5
    </pattern>
    <template>
<![CDATA[<p>Client-side charts have the advantage that can be manipulated by the user, but need client-side support for the technology that is used to implement the charts.</p><br/><br/><p>HTML5 charts:</p><br/><br/><ul><br/><li><a href="http://www.rgraph.net/" rel="nofollow">http://www.rgraph.net/</a></li><br/><li>jquery's <a href="http://www.filamentgroup.com/lab/update_to_jquery_visualize_accessible_charts_with_html5_from_designing_with/" rel="nofollow">visualize</a> plugin</li><br/><li><a href="http://www.jqplot.com/" rel="nofollow">http://www.jqplot.com/</a></li><br/><li><a href="http://thejit.org/" rel="nofollow">http://thejit.org/</a></li><br/><li><a href="http://mbostock.github.com/d3/" rel="nofollow">http://mbostock.github.com/d3/</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNION OF TWO DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Convert to lists, then add or extend.</p><br/><br/><pre><code>allobjs = list(query1)<br/>allobjs.extend(query2)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCHRON EMAIL USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>it is ok now ;</p><br/><br/><pre><code>class EmailThread(threading.Thread):<br/>    def __init__(self, subject, html_content, recipient_list):<br/>        self.subject = subject<br/>        self.recipient_list = recipient_list<br/>        self.html_content = html_content<br/>        threading.Thread.__init__(self)<br/><br/>    def run (self):<br/>        msg = EmailMessage(self.subject, self.html_content, EMAIL_HOST_USER, self.recipient_list)<br/>        msg.content_subtype = "html"<br/>        msg.send()<br/><br/>def send_html_mail(subject, html_content, recipient_list):<br/>    EmailThread(subject, html_content, recipient_list).start()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CONVERT PYTHON LIST INTO A JAVASCRIPT OBJECT
    </pattern>
    <template>
<![CDATA[<p><strong>Solution</strong></p><br/><br/><p>created a custom template filter,<br/>see <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/custom-template-tags/</a></p><br/><br/><pre><code>from django.core.serializers import serialize<br/>from django.db.models.query import QuerySet<br/>from django.utils import simplejson<br/>from django.utils.safestring import mark_safe<br/>from django.template import Library<br/><br/>register = Library()<br/><br/>def jsonify(object):<br/>    if isinstance(object, QuerySet):<br/>        return mark_safe(serialize('json', object))<br/>    return mark_safe(simplejson.dumps(object))<br/><br/>register.filter('jsonify', jsonify)<br/>jsonify.is_safe = True   <br/></code></pre><br/><br/><p>the calls to mark_safe are important otherwise Django will escape it</p><br/><br/><p>in the template:</p><br/><br/><pre><code>//without template filter (you'll need to serialise in the view)<br/>var data = jQuery.parseJSON('{{ json_data|safe }}');<br/>alert(data.length);<br/><br/>//using template filter    <br/>var data2 = jQuery.parseJSON('{{ record_list|jsonify }}');<br/>alert(data2.length);<br/></code></pre><br/><br/><p>note the single quotes around the template tag</p><br/><br/><p>although my next question would be - is it REALLY safe?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER MANY TO MANI WITH CONTAIN
    </pattern>
    <template>
<![CDATA[<p>Have you tried something like this:</p><br/><br/><pre><code>module.workflow_set.filter(trigger_roles__in=self.role.id,allowed=True)<br/></code></pre><br/><br/><p>or just if <code>self.role.id</code> is not a list of pks:</p><br/><br/><pre><code>module.workflow_set.filter(trigger_roles__id__exact=self.role.id,allowed=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GEODJANGO USE MYSQL
    </pattern>
    <template>
<![CDATA[<p>set <code>django.contrib.gis.db.backends.mysql</code> in your settings.DATABASE engine db config.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL JPEG LIBRARI HELP
    </pattern>
    <template>
<![CDATA[<p>You need to install jpeg library first and reinstall your PIL.  For example, I'm using CentOS, to install libjpeg, I run</p><br/><br/><pre><code>sudo yum install -y libjpeg-devel<br/></code></pre><br/><br/><p>It depends on what kind of linux you are using. And here you have to remove the old PIL</p><br/><br/><pre><code>rm -rf /usr/lib/python2.6/site-packages/PIL-1.1.7-py2.6-linux-x86_64.egg/<br/></code></pre><br/><br/><p>Then install the PIL</p><br/><br/><pre><code>sudo easy_install PIL<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST ITEM BY INDEX WITHIN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>If it's even allowed, it would look like <code>{{ data.0 }}</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLONE A DJANGO MODEL INSTANC OBJECT AND SAVE IT TO THE DATABAS
    </pattern>
    <template>
<![CDATA[<p>Just change the primary key of your object and run save().</p><br/><br/><pre><code>obj = Foo.objects.get(pk="foo")<br/>obj.pk = "bar"<br/>obj.save()<br/></code></pre><br/><br/><p>If you want auto-generated key, set the new key to None.</p><br/><br/><p>More on UPDATE/INSERT <a href="http://docs.djangoproject.com/en/1.2/ref/models/instances/#how-django-knows-to-update-vs-insert" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON LINK AND 301 REDIRECT IF URL DOE N T MATCH SLUG
    </pattern>
    <template>
<![CDATA[<p>1: I don't think there's a point in using the canonical tag if there are 301s anyways. </p><br/><br/><p>Let's just imagine a scenario where you change the URL from <code>/q/111/hello-world</code> to <code>/q/111/foobar</code>. The engines won't assume the two are equal unless they visit the original url with the canonical tag on it pointing to <code>/q/111/foobar</code> (which it wont, because it's now a 301, severing any proof of a relationship between the pages).</p><br/><br/><p>2: I'd do it the straight forward way. Define a non unique <code>slug</code> field and compare vs the captured URL in your detail view.</p><br/><br/><pre><code># models<br/>class MyModel(models.Model):<br/>    # ...<br/>    non_unique_slug = models.SlugField()<br/><br/>    def get_absolute_url(self):<br/>        return "/questions/%s/%s" % (self.id, self.non_unique_slug)<br/><br/><br/># urls<br/>    r'^questions/(?P&lt;id&gt;\d+)/(?P&lt;slug&gt;[\w-]+)/$' <br/><br/># views<br/>def my_view(request, id, slug):<br/>    page = Page.objects.get(id=id)<br/>    if not slug == page.slug:<br/>        return http.HttpResponsePermanentRedirect(page.get_absolute_url())<br/><br/>    # render page<br/>    return direct_to_template(request, "foobar.html", {'page': page})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTIF TO THE USER ON DATABAS CHANG
    </pattern>
    <template>
<![CDATA[<p>It really depends what you really need.</p><br/><br/><p>If notification can be sent ad part of user activity, simply add a user message, and it will be displayed whenever user do an action on the page. <a href="http://docs.djangoproject.com/en/dev/ref/contrib/messages/" rel="nofollow">django.contrib.messages</a> plus few lines in your main html template will do it.</p><br/><br/><p>But if you want the notification to be interactive - you can use one of the <a href="http://en.wikipedia.org/wiki/Push_technology" rel="nofollow">few PUSH options</a></p><br/><br/><p>Interesting links:</p><br/><br/><ul><br/><li><a href="http://en.wikipedia.org/wiki/Reverse_Ajax" rel="nofollow">wikipedia on reverse ajax</a></li><br/><li><a href="http://en.wikipedia.org/wiki/Comet_%28programming%29" rel="nofollow">comet</a></li><br/></ul><br/><br/><p>From the servers side, there are few options available, the simplest is <a href="http://gunicorn.org/" rel="nofollow">Green Unicorn</a>. Using it will allow you to have few thousands connections open and managed by only few processes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN CHANG HEADER DJANGO ADMINISTR TEXT
    </pattern>
    <template>
<![CDATA[<p>You need to create your own admin base_site.html template to do this. The easiest way is to create the file:</p><br/><br/><pre><code>/&lt;projectdir&gt;/templates/admin/base_site.html<br/></code></pre><br/><br/><p>This should be a copy of <a href="http://code.djangoproject.com/svn/django/branches/releases/1.2.X/django/contrib/admin/templates/admin/base_site.html" rel="nofollow">http://code.djangoproject.com/svn/django/branches/releases/1.2.X/django/contrib/admin/templates/admin/base_site.html</a> - except putting in your custom title:</p><br/><br/><pre><code>{% block branding %}<br/>&lt;h1 id="site-name"&gt;{% trans 'my cool admin console' %}&lt;/h1&gt;<br/>{% endblock %}<br/></code></pre><br/><br/><p>For this to work, you need to have the correct settings for your project, namely in settings.py:</p><br/><br/><ul><br/><li>Make sure '/projectdir/templates/' is added as a TEMPLATE_DIR</li><br/><li>Make sure 'django.template.loaders.filesystem.Loader' is added as a TEMPLATE_LOADER</li><br/></ul><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/ref/settings/" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/settings/</a> for more information on settings.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BLOB MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p>This snippet any good:</p><br/><br/><p><a href="http://djangosnippets.org/snippets/1597/">http://djangosnippets.org/snippets/1597/</a></p><br/><br/><p>There's a couple of other snippets there that might help.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT SYNTAX HIGHLIGHT IN ECLIPS
    </pattern>
    <template>
<![CDATA[<p>The latest PyDev versions include a Django template editor, but it's not compatible with vanilla Eclipse. You have to use Aptana Studio instead.</p><br/><br/><p>Just use <a href="http://pydev.org/nightly" rel="nofollow">http://pydev.org/nightly</a> as update URL, the PyDev and Django template editor packages should be there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATESYNTAXERROR COULD NOT PARS THE REMAIND ( )
    </pattern>
    <template>
<![CDATA[<p>You don't need to use <code>()</code> to call methods in templates. You can just use <code>f_values.items</code>. This notation works for list, tuples and functions:</p><br/><br/><pre><code>lst = ['a', 'b', 'c']<br/>di = {'a': 'a'}<br/>class Foo:<br/>   def bar(self): pass<br/></code></pre><br/><br/><p>You can do:</p><br/><br/><pre><code>{{ lst.0 }}<br/>{{ di.a }}<br/>{{ foo.bar }}<br/></code></pre><br/><br/><p>So for your code:</p><br/><br/><pre><code>  {% for (key_o, value_o) in f_values.items %}<br/>        &lt;tr class="row {% cycle 'odd' 'even' %}"&gt;<br/>            {% for (key_i, val_i) in value_o.items %}<br/>                &lt;td class="tile "&gt;<br/>                    {{ val_i }} <br/>                &lt;/td&gt;<br/>            {% endfor %}    <br/>        &lt;/tr&gt;<br/>    {% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISABL LOG WHILE RUN UNIT TEST IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>logging.disable(logging.CRITICAL)<br/></code></pre><br/><br/><p>will disable all logging calls less severe than <code>CRITICAL</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AVE DYNAM CREAT OBJECT TYPE
    </pattern>
    <template>
<![CDATA[<p>How about creating a Factory class with methods to create, pickle, and unpickle dynamically created type objects?  The following is a rough start.  To use, simply replace calls to pickle.dump(type, fh) with TypeFactory.pickle(type, fh), and replace calls to pickle.load(fh) with TypeFactory.unpickle(fh).</p><br/><br/><pre><code>import pickle<br/><br/>class TypeFactory(object):<br/>    def __init__(self):<br/>        pass<br/>    @staticmethod<br/>    def create_type(name='DynamicType', dict={}):<br/>        return type(name, (object,), dict)<br/>    @staticmethod<br/>    def pickle(t, fh):<br/>        dict = t.__dict__.copy()<br/>        name = t.__name__<br/>        for key in dict.keys():<br/>            if key.startswith('__') and key.endswith('__'):<br/>                del dict[key]<br/>        pickle.dump((name, dict), fh)<br/>    @classmethod<br/>    def unpickle(cls, fh):<br/>        name, dict = pickle.load(fh)<br/>        return cls.create_type(name, dict)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E COMMERC FROM SCRATCH OR NOT
    </pattern>
    <template>
<![CDATA[<p>I've no experience with Django. I develop websites using Wordpress and a year ago I tested Magento (not tested it since).</p><br/><br/><p>I was surprised of how user friendly Magento was. Both front end and backend. It was really easy to set up. You can easilly customize the layout as well using Magento template API.</p><br/><br/><p>Here are some pros and cons:</p><br/><br/><p><strong>Pros</strong>  </p><br/><br/><ul><br/><li>Don't develop your own e-commerce<br/>site. It's a lot of work to re-invent<br/>the wheel.</li><br/><li>By using a well know e-commers product, you will also find support.</li><br/><li>E-commerse like Magento is easy to set up and offers the option for change look and feel to match the rest of the web site.</li><br/><li>You can easilly combine CMS and e-commerce</li><br/><li>E-commerse apps like Magento offers the option for custom static / dynamic pages (like a mini cms)</li><br/><li>You will save money (development time) by using something that is already developed</li><br/><li>Most e-commerce sites handles payment towards different banking providers.</li><br/></ul><br/><br/><p><strong>Cons</strong>  </p><br/><br/><ul><br/><li>Magento does not work on all servers (server configuration). This however might have changed the past year.</li><br/><li>If free e-commers products like Magento does not sattisfy your needs, you need to buy licenses. And that costs a lot of money.</li><br/><li>It takes a lot of time developing your own e-commerce site if you want quality and usability. There is no way you can develop a good e-commerce site from scratch in just 3 months.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM CLASS WITH A DYNAM NUMBER OF FIELD
    </pattern>
    <template>
<![CDATA[<p>Jacob Kaplan-Moss has an extensive writeup on dynamic form fields:<br/><a href="http://jacobian.org/writing/dynamic-form-generation/">http://jacobian.org/writing/dynamic-form-generation/</a></p><br/><br/><p>Essentially, you add more items to the form's fields member variable during instantiation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHEDUL A REGULAR EVENT CRON CRON ALTERN ( INCLUD CELERI )
    </pattern>
    <template>
<![CDATA[<p>A simple, non-Celery way to approach things would be to create <a href="https://docs.djangoproject.com/en/1.3/howto/custom-management-commands/" rel="nofollow">Django custom management commands</a> to perform your asynchronous or scheduled tasks.</p><br/><br/><p>Then, on Windows, you use the <code>at</code> command to schedule these tasks. On Linux, you use <code>cron</code>.</p><br/><br/><p>I'd also strongly recommend ditching Windows if you can for a development environment. Your life will be so much better on Linux or even Mac OSX. Re-purpose a spare or old machine with Ubuntu for example, or run Ubuntu in a VM on your Windows box.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.3 IN APPENGIN
    </pattern>
    <template>
<![CDATA[<p>There is no standalone version for django 1.3 in appengine yet. You can use Django 1.0, 1.1 or 1.2 though if you want to (without app-engine-patch). See <a href="http://code.google.com/appengine/docs/python/tools/libraries.html#Django" rel="nofollow">here</a> for more information. </p><br/><br/><p>About django-nonrel. It's great and is working with 1.3 already. If you follow the <a href="http://www.allbuttonspressed.com/projects/djangoappengin" rel="nofollow">guidelines</a> you are basically good to go. Keep in mind that you can only syncdb and createsuperuser with appengine via <code>manage.py remote</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN PAGE MISS CSS
    </pattern>
    <template>
<![CDATA[<p>In addition to correcting the symbolic link as Daniel Roseman suggested, you'll need to make sure that the user that is running Apache has read access to the admin media.</p><br/><br/><ul><br/><li>If you do <code>ls -l</code> in your media directory, do you see the symbolic link?</li><br/><li>If you <code>cd admin</code> from your media directory, does it work? If you then run <code>ls</code> can you see the admin media?</li><br/><li>Does the user that runs Apache have read access to the admin media?</li><br/></ul><br/><br/><p>If all those things work, then please update your question with your current configuration and results of those commands and we'll take another look.</p><br/><br/><p><strong>Response to Update</strong>: Ok, the permissions look ok. It looks like you've got the directory structure in your media directory a little bit wrong.</p><br/><br/><p>The fact that <code>/usr/lib/python2.6/site-packages/django/contrib/admin/media/</code> was empty is disturbing, too. Once you solve the immediate problem you may want to look into reinstall django in the expected place.</p><br/><br/><p>Anyways, here's how the structure should look:</p><br/><br/><pre><code>$ cd media<br/>$ ls -la<br/>drwxr-xr-x 2 root root 4096 Apr 13 03:33 .<br/>drwxr-xr-x 3 root root 4096 Apr  8 09:02 ..<br/>lrwxrwxrwx 1 root root   60 Apr 13 03:33 admin -&gt; /usr/lib/python2.6/site-packages/django/contrib/admin/media/<br/>-rw-r--r-- 1 root root    9 Apr  8 09:02 test.txt<br/></code></pre><br/><br/><p>That is, inside of the <code>media/</code> directory their should be a link called <code>admin</code> directly to the <code>/admin/media</code> directory of your django installation.</p><br/><br/><p>To fix what you've got, inside of the <code>media/admin/</code> directory run:</p><br/><br/><pre><code>rm media<br/>cd ..<br/>rmdir admin<br/></code></pre><br/><br/><p>and then re-create the symlink as suggested in Daniel Roseman's answer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL LIBJPEG.SO.8 CAN NOT OPEN SHARE OBJECT FILE NO SUCH FILE OR DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>See an explanation here: <a href="http://stackoverflow.com/questions/1099981/why-cant-python-find-shared-objects-that-are-in-directories-in-sys-path">Why can&#39;t Python find shared objects that are in directories in sys.path?</a></p><br/><br/><p>A quick fix is to add the directory that contains <code>libjpeg.so.8</code> to your <code>/etc/ld.so.conf</code> file, and then run <code>ldconfig</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING FORMAT IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<pre><code>{{ variable|stringformat:"%.3f" }}<br/></code></pre><br/><br/><p><em>Source: <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#stringformat" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/builtins/#stringformat</a></em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYMONGO VS MONGOENGIN FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>I assume you have not read the MongoEngine claim.</p><br/><br/><blockquote><br/>  <p>MongoEngine is a Document-Object<br/>  Mapper (think ORM, but for document<br/>  databases) for working with MongoDB<br/>  from Python.</p><br/></blockquote><br/><br/><p>This basically say it all.</p><br/><br/><p>In addition: your claim that Pymongo would deliver objects is wrong....well in Python everything is an object - even a dict is an object...so you are true but not in the sense of having a custom class defined on the application level.</p><br/><br/><p>PyMongo is the low-level driver wrapping the MongoDB API into Python and delivering JSON in and out. </p><br/><br/><p>MongoEngine or other layers like MongoKit map your MongoDB-based data to objects similar to native Python database drivers + SQLAlchemy as ORM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR SOCIAL NETWORK
    </pattern>
    <template>
<![CDATA[<p>"What are its potential weaknesses, and things that need to be focused on in order to make it as fast as possible?"</p><br/><br/><p>The one thing you might be worried about further down the road is that depending on how you create your models and connect them to one another, you may run into an issue where a single page generates many, many, <em>many</em> queries.</p><br/><br/><p>This is especially true if you're using a model that involves a <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations" rel="nofollow">generic relation</a>.</p><br/><br/><p>Let's say you're using <a href="https://github.com/justquick/django-activity-stream" rel="nofollow">django-activity-stream</a> to create a list of recent events (similar to Facebook's News Feed). django-activity-stream basically creates a list of generic relations. For each of these generic relations you're going to have to run a query to get information about that object. And, since it's generic (i.e. you're not writing a custom query for each kind of object), if that object has its own relations that you want to output, you might be looking at something like 40-100 queries for an activity feed with just 20-30 items.</p><br/><br/><p>Running 40-100 queries for a single request is not optimal behavior.</p><br/><br/><p>The good news is that Django is really just a bunch of classes and functions written in python. Almost anything you write in python can be added into Django, so you can always write your own functions or code to optimize a given request.</p><br/><br/><p>Choosing another framework is not going to avoid the problem of scalability; it's just going to present different difficulties in different areas.</p><br/><br/><p>Also, you can look into things like <a href="http://docs.djangoproject.com/en/dev/topics/cache/?from=olddocs" rel="nofollow">caching</a> in order to speed up responses and prevent server load.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON MODUL EXIST AND CAN BE IMPORT
    </pattern>
    <template>
<![CDATA[<p>You can use the same logic inside your function:</p><br/><br/><pre><code>def module_exists(module_name):<br/>    try:<br/>        __import__(module_name)<br/>    except ImportError:<br/>        return False<br/>    else:<br/>        return True<br/></code></pre><br/><br/><p>There is no performance penalty to this solution becuase modules are imported only once.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET THE MOST TEST COVERAG WITH DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>Additionally this series of articles so far has some good advice on testing django apps:</p><br/><br/><p><a href="http://toastdriven.com/blog/2011/apr/10/guide-to-testing-in-django/" rel="nofollow">http://toastdriven.com/blog/2011/apr/10/guide-to-testing-in-django/</a></p><br/><br/><p>My only criticism of the answer would be to not store everything in the <code>tests.py</code> file, but do as the article suggest. Create a <code>tests</code> directory and turn it in to a module by adding an <code>__init__.py</code> file and importing all your test cases there. eg <code>from myapp.tests.views import *</code>. But definitely sound advice. Gotta walk before you can run... <code>tests</code>! See what I did there?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT FROM DJANGO 1.2.5 TO 1.3.X ARE THERE ANI UNDOCU ISSU
    </pattern>
    <template>
<![CDATA[<p>You need reasons? Just look at the <a href="http://docs.djangoproject.com/en/dev/releases/1.3/" rel="nofollow">release notes</a>. They do a very good job outlining both new features and backwards incompatible changes. I have been happy to migrate all of my Django projects to 1.3, I'm particularly happier about the changes to the way static files are managed. Class-based views are quite nice, the improved logging support is great. If you have the time go for it. It shouldn't take too much work to migrate. Generally I stay as current as I can.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MIDDLEWAR THREAD SAFE
    </pattern>
    <template>
<![CDATA[<p>Why not bind your variable to the request object, like so:</p><br/><br/><pre><code>class ThreadsafeTestMiddleware(object):<br/><br/>    def process_request(self, request):<br/>        request.thread_safe_variable = some_dynamic_value_from_request<br/><br/>    def process_response(self, request, response):<br/>        #... do something with request.thread_safe_variable here ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELS.PI INTO SEVER FILE
    </pattern>
    <template>
<![CDATA[<p>I can't even begin to imagine why you'd want to do this.  But I'll assume you've got a good reason.  If I needed to do this for some reason, I'd do the following:</p><br/><br/><pre><code>myproject/<br/>    ...<br/>    app1/<br/>        views.py<br/>        __init__.py<br/>        models.py<br/>        submodels/<br/>            __init__.py<br/>            model1.py<br/>            model2.py<br/>    app2/<br/>        views.py<br/>        __init__.py<br/>        models.py<br/>        submodels/<br/>            __init__.py<br/>            model3.py<br/>            model4.py<br/></code></pre><br/><br/><p>Then</p><br/><br/><pre><code>#myproject/app1/models.py:<br/>    from submodels/model1.py import *<br/>    from submodels/model2.py import *<br/><br/>#myproject/app2/models.py:<br/>    from submodels/model3.py import *<br/>    from submodels/model4.py import *<br/></code></pre><br/><br/><p>But, if you don't have a good reason, put model1 and model2 directly in app1/models.py and model3 and model4 in app2/models.py</p><br/><br/><p>---second part---</p><br/><br/><p>This is app1/submodels/model1.py file:</p><br/><br/><pre><code>from django.db import models<br/>class Store(models.Model):<br/>    class Meta:<br/>        app_label = "store"<br/></code></pre><br/><br/><p>Thus correct your model3 file:</p><br/><br/><pre><code>from django.db import models<br/>from app1.models import Store<br/><br/>class Product(models.Model):<br/>    store = models.ForeignKey(Store)<br/>    class Meta:<br/>        app_label = "product"<br/></code></pre><br/><br/><p>Edited, in case this comes up again for someone:<br/>Check out django-schedule for an example of a project that does just this.<br/><a href="https://github.com/thauber/django-schedule/tree/master/schedule/models" rel="nofollow">https://github.com/thauber/django-schedule/tree/master/schedule/models</a><br/>https://github.com/thauber/django-schedule/</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGRITYERROR COLUMN USER ID IS NOT UNIQU
    </pattern>
    <template>
<![CDATA[<p>I worked around the problem by adjusting my signal like this:</p><br/><br/><pre><code>from django.dispatch import receiver<br/><br/>@receiver(post_save, sender=User)<br/>def create_profile(sender, instance, created, **kwargs):<br/>    if created:<br/>        Profile.objects.get_or_create(user=instance)<br/></code></pre><br/><br/><p>This solved the symptom but not really the cause. I think that mixing normal tests with Django tests is causing an error somewhere. When I ran the test in my question alone it would work. </p><br/><br/><p>If I get no other answers I'll mark this one as correct.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASP.NET MVC3 OUTPERFORM RUBI ON RAIL 3 DJANGO
    </pattern>
    <template>
<![CDATA[<p>At least in terms of Rails vs Django it clearly looks like the latter IS faster (http://blog.curiasolutions.com/2010/11/the-great-web-technology-shootout---round-4-pyramid-vs-django-vs-tg-vs-rails-2-3/) </p><br/><br/><p>With ASP.NET MVC it looks more like there is some kind of conspiracy so no one actually tries to benchmark it :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE WHEN DJANGO START ONC ONLI
    </pattern>
    <template>
<![CDATA[<p>Don't do it this way.</p><br/><br/><p>You don't want "middleware" for a one-time startup thing.</p><br/><br/><p>You want to execute code in the top-level <code>urls.py</code>.  That module is imported and executed once.</p><br/><br/><p><code>urls.py</code></p><br/><br/><pre><code>from django.confs.urls.defaults import *<br/>from my_app import one_time_startup<br/><br/>urlpatterns = ...<br/><br/>one_time_startup()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESIGN PATTERN FOR WEB ANALYT SCREEN THAT TAKE A REALLI LONG TIME TO CALCUL
    </pattern>
    <template>
<![CDATA[<p>What you're looking for is a combination of offline processing and caching. By offline, I mean that the computation logic happens outside the request-response cycle. By caching, I mean that the result of your expensive calculation is sufficiently valid for X time, during which you do not need to recalculate it for display. This is a very common pattern.</p><br/><br/><h2>Offline Processing</h2><br/><br/><p>There are two widely-used approaches to work which needs to happen outside the request-response cycle:</p><br/><br/><ul><br/><li>Cron jobs (often made easier via a custom management command)</li><br/><li><a href="http://celeryproject.org/" rel="nofollow">Celery</a></li><br/></ul><br/><br/><p>In relative terms, cron is simpler to setup, and Celery is more powerful/flexible. That being said, Celery enjoys fantastic documentation and a comprehensive test suite. I've used it in production on almost every project, and while it does involve some requirements, it's not really a bear to setup.</p><br/><br/><h3>Cron</h3><br/><br/><p>Cron jobs are the time-honored method. If all you need is to run some logic and store some result in the database, a cron job has zero dependencies. The only fiddly bits with cron jobs is getting your code to run in the context of your django project -- that is, your code must correctly load your settings.py in order to know about your database and apps. For the uninitiated, this can lead to some aggravation in divining the proper <code>PYTHONPATH</code> and such.</p><br/><br/><p>If you're going the cron route, a good approach is to write a custom management command. You'll have an easy time testing your command from the terminal (and writing tests), and you won't need to do any special hoopla at the top of your management command to setup a proper django environment. In production, you simply run <code>path/to/manage.py yourcommand</code>. I'm not sure if this approach works without the assistance of <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a>, which you really ought to be using regardless.</p><br/><br/><p>Another aspect to consider with cronjobs: if your logic takes a variable amount of time to run, cron is ignorant of the matter. A cute way to kill your server is to run a two-hour cronjob like this every hour. You can roll your own locking mechanism to prevent this, just be aware of this-what starts out as a short cronjob might not stay that way when your data grows, or when your RDBMS misbehaves, etc etc.</p><br/><br/><p>In your case, it sounds like cron is less applicable because you'd need to calculate the graphs for every user every so often, without regards to who is actually using the system. This is where celery can help.</p><br/><br/><h3>Celery</h3><br/><br/><p>...is the bee's knees. Usually people are scared off by the "default" requirement of an AMQP broker. It's not terribly onerous setting up RabbitMQ, but it does require stepping outside of the comfortable world of Python a bit. For many tasks, I just use redis as my task store for Celery. The settings are <a href="http://docs.celeryproject.org/en/latest/configuration.html#conf-redis-result-backend" rel="nofollow">straightforward</a>:</p><br/><br/><pre><code>CELERY_RESULT_BACKEND = "redis"<br/>REDIS_HOST = "localhost"<br/>REDIS_PORT = 6379<br/>REDIS_DB = 0<br/>REDIS_CONNECT_RETRY = True<br/></code></pre><br/><br/><p>Voilá, no need for an AMQP broker.</p><br/><br/><p>Celery provides a wealth of advantages over simple cron jobs. Like cron, you can schedule <a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html" rel="nofollow">periodic tasks</a>, but you can also fire off tasks in response to other stimuli without holding up the request/response cycle.</p><br/><br/><p>If you don't want to compute the chart for every active user every so often, you will need to generate it on-demand. I'm assuming that querying for the latest <em>available</em> averages is cheap, computing new averages is expensive, and you're generating the actual charts client-side using something like <a href="http://code.google.com/p/flot/" rel="nofollow">flot</a>. Here's an example flow:</p><br/><br/><ol><br/><li>User requests a page which contains an averages chart.</li><br/><li>Check cache -- is there a stored, nonexpired queryset containing averages for this user?<br/><ul><br/><li>If yes, use that.</li><br/><li>If not, fire off a celery task to recalculate it, requery and cache the result. Since querying <em>existing</em> data is cheap, run the query if you want to show stale data to the user in the meantime.</li><br/></ul></li><br/><li>If the chart is stale. optionally provide some indication that the chart is stale, or do some ajax fanciness to ping django every so often and ask if the refreshed chart is ready.</li><br/></ol><br/><br/><p>You could combine this with a periodic task to recalculate the chart every hour for users that have an active session, to prevent <em>really</em> stale charts from being displayed. This isn't the only way to skin the cat, but it provides you with all the control you need to ensure freshness while throttling CPU load of the calculation task. Best of all, the periodic task and the "on demand" task share the same logic-you define the task once and call it from both places for added DRYness.</p><br/><br/><h2>Caching</h2><br/><br/><p>The <a href="https://docs.djangoproject.com/en/1.3/topics/cache/" rel="nofollow">Django cache framework</a> provides you with all the hooks you need to cache whatever you want for as long as you want. Most production sites rely on <a href="http://memcached.org/" rel="nofollow">memcached</a> as their cache backend, I've lately started using redis with the <a href="http://pypi.python.org/pypi/django-redis-cache/" rel="nofollow">django-redis-cache</a> backend instead, but I'm not sure I'd trust it for a major production site yet.</p><br/><br/><p>Here's some code showing off usage of the <a href="https://docs.djangoproject.com/en/1.3/topics/cache/#the-low-level-cache-api" rel="nofollow">low-level caching API</a> to accomplish the workflow laid out above:</p><br/><br/><pre><code>import pickle<br/>from django.core.cache import cache<br/>from django.shortcuts import render<br/>from mytasks import calculate_stuff<br/><br/>from celery.task import task<br/><br/>@task<br/>def calculate_stuff(user_id):<br/>    # ... do your work to update the averages ...<br/>    # now pull the latest series<br/>    averages = TransactionAverage.objects.filter(user=user_id, ...)<br/>    # cache the pickled result for ten minutes <br/>    cache.set("averages_%s" % user_id, pickle.dumps(averages), 60*10)<br/><br/>def myview(request, user_id):<br/>    ctx = {}<br/>    cached = cache.get("averages_%s" % user_id, None)<br/>    if cached:<br/>        averages = pickle.loads(cached) # use the cached queryset<br/>    else:<br/>        # fetch the latest available data for now, same as in the task<br/>        averages = TransactionAverage.objects.filter(user=user_id, ...)<br/>        # fire off the celery task to update the information in the background<br/>        calculate_stuff.delay(user_id) # doesn't happen in-process.<br/>        ctx['stale_chart'] = True # display a warning, if you like<br/><br/>    ctx['averages'] = averages<br/>    # ... do your other work ...<br/>    render(request, 'my_template.html', ctx)<br/></code></pre><br/><br/><p><strong>Edit:</strong> worth noting that pickling a queryset loads the entire queryset into memory. If you're pulling up a lot of data with your averages queryset this could be suboptimal. Testing with real-world data would be wise in any case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUT VS VIRTUALENV + PIP FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>At the core, buildout and pip+virtualenv do the same. They both use python packages, install them, isolate them from the rest of your python environment, handle dependencies (through setup.py) and so on.</p><br/><br/><p>Buildout does more. Which, naturally, means a bit more configuration than with pip. You'll have to figure out whether the extra configuration is worth the effort for what you get back from it.</p><br/><br/><p>Some of the extras you can get out of buildout with a couple of add-ons ("recipes"):</p><br/><br/><ul><br/><li><p>The 'djangorecipe' addon that sets up django for you. No need for that environment variable that points at your settings.py file, for instance. Handy.</p></li><br/><li><p>Automatically setting up a cronjob.</p></li><br/><li><p>Generating config files (like an apache one for your site) from a template. Uses variables from your buildout config, so this prevents duplication.</p></li><br/></ul><br/><br/><p>Basically, you can get some <strong>explicit configuration</strong> done with buildout. Fewer manual steps.</p><br/><br/><p>On the other hand, you can use other tools for that extra level of automation that you probably need. So virtualenv+pip+something_else is also a possibility.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAC OSX LION VIRTUALENV PIL INSTAL GCC ERROR
    </pattern>
    <template>
<![CDATA[<p>Xcode 4.1 on OS X Lion 10.7 no longer includes <code>gcc-4.0</code> as it did in earlier versions of OS X.  When you install a Python package like PIL that includes a C extension module, Python's Distutils will attempt to use the same version of the C compiler that that Python itself was build with.  It sounds like the version of Python that was used to create your <code>virtualenv</code> is an older 32-bit-only Python built with <code>gcc-4.0</code>.  You can tell for sure by starting the <code>python</code> in your <code>virtualenv</code>.  If it says <code>gcc-4.0</code>, you will need to re-create the virtualenv, using a newer base Python, either one of the Apple-supplied Pythons in Lion or installing a newer python using a python.org installer or a brew recipe.  Then install <code>Distribute</code> and <code>pip</code> and <code>virtualenv</code> for that Python, create a new virutalenv and then install PIL in it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORBIT OR GEVENT FOR INTEGR COMET FUNCTION INTO A DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>I'd recommend using WebSockets for bidirectional realtime communication. Keep running Django as is and run a WebSocket server on another port. As far as your database blocking, yes, you'll need to keep that in mind as you write your WebSocket server and either use a non-blocking database driver, or address that in some way.</p><br/><br/><p>Client-side you'll want to use <a href="http://socket.io" rel="nofollow">Socket.IO</a> or <a href="https://github.com/gimite/web-socket-js" rel="nofollow">web-socket-js</a> to support flash fallback for older browsers which don't support flash.</p><br/><br/><p>For the server, I would lean towards gevent or tornado, personally. For gevent there is <a href="http://www.gelens.org/code/gevent-websocket/" rel="nofollow">gevent-websocket</a> and <a href="https://bitbucket.org/Jeffrey/gevent-socketio" rel="nofollow">gevent-socketio</a>, for tornado you get built-in WebSocket support and can use <a href="https://github.com/MrJoes/tornadio" rel="nofollow">tornadio</a> if you want to use Socket.IO. <a href="http://eventlet.net/doc/modules/websocket.html" rel="nofollow">Eventlet</a> and <a href="http://twistedmatrix.com/trac/export/29073/branches/websocket-4173-2/doc/web/howto/websocket.xhtml" rel="nofollow">twisted</a> both support WebSockets as well. There is also a pretty cool new project called <a href="http://www.tavendo.de/autobahn" rel="nofollow">autobahn</a> which is built on twisted, and <a href="https://github.com/mopemope/meinheld" rel="nofollow">meinheld</a> has WebSocket middleware you can use.</p><br/><br/><p>WebSockets are pretty exciting, and as such there are tons of great posts out there on the subject. I found these posts useful:</p><br/><br/><ul><br/><li><a href="http://gehrcke.de/2011/06/the-best-and-simplest-tools-to-create-a-basic-websocket-application-with-flash-fallback-and-python-on-the-server-side/" rel="nofollow">http://gehrcke.de/2011/06/the-best-and-simplest-tools-to-create-a-basic-websocket-application-with-flash-fallback-and-python-on-the-server-side/</a></li><br/><li><a href="http://codysoyland.com/2011/feb/6/evented-django-part-one-socketio-and-gevent/" rel="nofollow">http://codysoyland.com/2011/feb/6/evented-django-part-one-socketio-and-gevent/</a></li><br/><li><a href="http://toastdriven.com/blog/2011/jul/31/gevent-long-polling-you/" rel="nofollow">http://toastdriven.com/blog/2011/jul/31/gevent-long-polling-you/</a></li><br/><li><a href="http://blog.jupo.org/post/8858247674/real-time-web-apps-with-django-and-websockets/" rel="nofollow">http://blog.jupo.org/post/8858247674/real-time-web-apps-with-django-and-websockets/</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST FOR FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/testing/#django.test.TestCase.assertFormError" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/testing/#django.test.TestCase.assertFormError</a></p><br/><br/><pre><code>from django.tests import TestCase<br/><br/>class MyTests(TestCase):<br/>    def test_forms(self):<br/>        response = self.client.post("/my/form/", {'something':'something'})<br/>        self.assertFormError(response, 'form', 'something', 'This field is required.')<br/></code></pre><br/><br/><p>Where "form" is the context variable name for your form, "something" is the field name, and "This field is required." is the exact text of the expected validation error.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVER A LIST OF OBJECT WITHIN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>A couple of things.  There is a method by which you can order your query and just get the first ten entries.  It would be more efficient than the loop you have.  </p><br/><br/><p>The reason your template doesn't work is that you're referring to the list rather than the individual entry.  It should be:</p><br/><br/><pre><code>{% for entry in entries_list %}<br/>        &lt;i&gt;&lt;b&gt;Name:&lt;/i&gt;&lt;/b&gt; {{ entry.name }}&lt;br&gt;<br/>        &lt;img src="/images{{ entry.picture }}" height="300" width="300"&gt;&lt;/img&gt;&lt;br&gt;<br/>        &lt;i&gt;&lt;b&gt;Ingredients:&lt;/i&gt;&lt;/b&gt; {{ entry.ingredients }}&lt;br&gt;<br/>        &lt;p&gt;&lt;i&gt;{{ entry.description }}&lt;/i&gt;&lt;/p&gt;<br/>        &lt;i&gt;&lt;b&gt;Created by:&lt;/i&gt;&lt;/b&gt; {{ entry.user }}&lt;br&gt;&lt;br&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>Once you get your template working, try this to get your entries_list:</p><br/><br/><pre><code>entries_list = Recipes.objects.order_by('-id')[0:10]<br/></code></pre><br/><br/><p>Here's the docs on sorting and slicing queries:  <a href="https://docs.djangoproject.com/en/dev/topics/db/queries" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/db/queries</a> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MD5 HASH PASSWORD FROM PHP S CRYPT ( ) PORTABL TO THE DJANGO PASSWORD FIELD
    </pattern>
    <template>
<![CDATA[<p>Unfortunately, it isn't possible to convert those over to Django's format (though there is a possible route you can take that will get your hashes imported, detailed below).</p><br/><br/><p>Django's salted md5 algorithm uses a very simple algorithm: <code>md5(salt + password)</code>, which is then encoded to hexidecimal. </p><br/><br/><p>On the other hand, the hashes output by PHP's <code>crypt()</code> which begin with <code>$1$</code> are not simple md5 hashes. Instead, they use a password hashing algorithm known as <a href="http://packages.python.org/passlib/lib/passlib.hash.md5_crypt.html" rel="nofollow">MD5-Crypt</a>. This is much more complex (and secure) than a simple md5 hash. There's a section in the linked page which describes the MD5-Crypt format &amp; algorithm. There is no way to translate it into Django's format, as it doesn't offer support for the algorithm within it's code. </p><br/><br/><p>While Django <em>does</em> have code which called Python's stdlib <code>crypt()</code> function, the way Django mangles the hashes means there's no easy way to get a hash beginning with <code>$1$</code> all the way through Django and into <code>crypt()</code>; and that's the only way to signal to <code>crypt()</code> that you want to use MD5-Crypt instead of the older DES-Crypt.</p><br/><br/><hr><br/><br/><p>However, there is a possible route: you can monkeypatch <code>django.contrib.auth.models.User</code> so that it supports both the normal Django hashes, as well as the MD5-Crypt format. That way you can import the hashes unchanged. One way is to do this manually, by overriding the <code>User.set_password</code> and <code>User.check_password</code> methods. </p><br/><br/><p>Another alternative is to use the <a href="http://packages.python.org/passlib" rel="nofollow">Passlib</a> library, which contains a Django app that was designed to take care of all this, as well as provide cross-platform support for md5-crypt et al. <em>(Disclaimer: I'm the author of that library)</em>. Unfortunately that Django plugin is undocumented, because I haven't tested it much outside of my own django deploys... though it works fine for them :) (There is some beta documentation in the <a href="https://code.google.com/p/passlib/source/browse/docs/lib/passlib.ext.django.rst" rel="nofollow">source</a>).</p><br/><br/><p>In order to use it, install passlib, and add <code>passlib.ext.django</code> to your list of installed apps. Then, within <code>settings.py</code>, add the following:</p><br/><br/><pre><code>PASSLIB_CONTEXT = """<br/>[passlib]<br/>schemes =<br/>    md5_crypt,<br/>    django_salted_sha1, django_salted_md5,<br/>    django_des_crypt, hex_md5,<br/>    django_disabled<br/><br/>default = md5_crypt<br/><br/>deprecated = django_des_crypt, hex_md5<br/>"""<br/></code></pre><br/><br/><p>This will override <code>User.set_password</code> and <code>User.check_password</code> to use Passlib instead of the builtin code. The configuration string above configures passlib to mimic Django's builtin hashes, but then adds support for md5_crypt, so your hashes should then be accepted as-is.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND HOW IS A MANY TO MANI RELATIONSHIP CREAT WHEN SAVE A MODEL
    </pattern>
    <template>
<![CDATA[<p>As other people said, you cannot save in one-shot Document object and its ManyToMany field, because django create "<a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#id1" rel="nofollow">intermediatary join table</a>", which need the Document object's ID, which is not defined at that point.</p><br/><br/><p>There is a save_m2m function in ModelForm, that is supposed to be called by the Form itself, as described in <a href="https://docs.djangoproject.com/en/1.3/topics/forms/modelforms/#the-save-method" rel="nofollow">the doc</a></p><br/><br/><p>However, if it doesn't work, maybe a trick is to call save_m2m in the view function, like this:</p><br/><br/><pre><code>def upload_document(request):<br/>    if request.method == 'POST':<br/>        form = DocumentForm(request.POST, request.FILES)<br/>        if form.is_valid():<br/>            new_document = form.save()<br/>            form.save_m2m()<br/>            return HttpResponseRedirect("/thanks/")<br/><br/>    else:<br/>        form = DocumentForm()<br/><br/>    return render_to_response('upload_page.html', {'form':form}, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>Hope it helps,<br/>Stéphane</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I believe you are looking for the <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#templatetag" rel="nofollow"><code>templatetag</code></a> template tag.</p><br/><br/><p>As the linked-to doc states,</p><br/><br/><blockquote><br/>  <p>Since the template system has no concept of "escaping", to display one of the bits used in template tags, you must use the <code>{% templatetag %}</code> tag.</p><br/></blockquote><br/><br/><p>For example:</p><br/><br/><pre><code>&lt;p&gt;"{% templatetag openvariable %} some text {% templatetag closevariable %}"&lt;/p&gt;<br/></code></pre><br/><br/><p>will appear as so:</p><br/><br/><pre><code>&lt;p&gt;"{{ some text }}"&lt;/p&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRO DJANGO BOOK STILL RELEV
    </pattern>
    <template>
<![CDATA[<p>Yes, it's definitely still relevant. Although a lot has changed in Django since version 1, the internal parts and the concepts that Pro Django deals with are mostly the same. I'd have no hesitation in recommending the book - it's a really useful insight into how Django works and teaches some very useful methods as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSENSIT UNIQU MODEL FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Store the original <strong>mixed-case string in a plain text column</strong>. Use the data type <code>text</code> rather than <code>varchar(x)</code> (but both work). They are essentially the same, but with varchar() you have to set an arbitrary length limit, that can be a pain if you want to change later. Read more about that <a href="http://www.postgresql.org/docs/8.4/static/datatype-character.html" rel="nofollow">in the manual</a>.</p><br/><br/><p>Crate a <a href="http://www.postgresql.org/docs/8.4/static/indexes-expressional.html" rel="nofollow"><strong>functional unique index</strong></a> on lower(string). That's the major point here. Like this:</p><br/><br/><pre><code>CREATE UNIQUE INDEX my_idx ON mytbl(lower(name));<br/></code></pre><br/><br/><p>Now, if you try to INSERT a mixed case name that's already there in lower case, you get a unique key violation error.<br><br/>For fast equality searches use a query like this:</p><br/><br/><pre><code>SELECT * FROM mytbl WHERE lower(name) = 'foo' --'foo' is lower case, of course.<br/></code></pre><br/><br/><p>Use the exact same expression you have in the index and this will be very fast.</p><br/><br/><hr><br/><br/><p>On a side note: you may want to upgrade to at least PostgreSQL <strong>8.4.8</strong>. There have been lots of <a href="http://www.postgresql.org/docs/current/interactive/release.html" rel="nofollow">important fixes since 8.4.2</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYCRYPTO SAFE AND RELIABL TO USE
    </pattern>
    <template>
<![CDATA[<p>It depends.</p><br/><br/><p>Some parts of PyCrypto are really good.  For example, the API for Crypto.Random (introduced in PyCrypto 2.1) was designed to be pretty foolproof, and the underlying algorithm it uses (Fortuna) was also designed to be pretty foolproof.</p><br/><br/><p>Other parts are just implementations of low-level crypto primitives, so it works, but you have to know what you are doing to use them correctly.  For example, Crypto.PublicKey.RSA doesn't implement the full RSA PKCS#1 standard (which is what most people think about when they talk about "RSA").  It only implements the basic RSA primitive (m^e mod n and c^d mod n), and you still have to provide your own PKCS#1 implementation.</p><br/><br/><p>The best way to ensure that PyCrypto is encrypting your data correctly (without reading the source code, which I encourage everyone to do) is to use a standard protocol and/or message format, and test that your code interoperates with other implementations.  If you're making up your own message format (which you probably shouldn't do anyway), then you need to be very careful to ensure that PyCrypto is actually doing everything that you think it's doing.</p><br/><br/><p>Disclaimer: I'm the current PyCrypto maintainer, so my opinions shouldn't be considered an independent review.</p><br/><br/><p><strong>Update:</strong> PyCrypto v2.5 and later now include proper RSA PKCS#1 encryption and signature implementations.  See the API documentation for Crypto.Cipher.PKCS1_OAEP and Crypto.Signature.PKCS1_PSS for details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON AN APACH SERVER
    </pattern>
    <template>
<![CDATA[<p>Also go read:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango" rel="nofollow">http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango</a></p><br/><br/><p>and watch:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations" rel="nofollow">http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations</a></p><br/><br/><p>The latter includes Django examples and talks a bit about locations, permissions etc.</p><br/><br/><p>The first of these is even linked to in the document in the Django documentation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OWN DAEMON PROCESS WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>We do a lot of background processing for django using Celery <a href="http://celeryproject.org/">http://celeryproject.org/</a>.  It requires some effort to set up and there is a bit of a learning curve, but once it's up and running it's just awesome.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS LINK IN MONGODB.WHEN TO EMB AND WHEN TO LINK
    </pattern>
    <template>
<![CDATA[<p>First, conceptually, name your model classes as singular objects.</p><br/><br/><p>Users should be User, Teams should be Team...</p><br/><br/><p>Think of the model as the mold from which multiple objects will be made. User model will product Users and be stored in a table called Users where each document/row is a User object.</p><br/><br/><p>Now, regarding your question, hymloth is exactly right. The way to make it a reference to a document instead of an embedded one is to change those particular fields to reference the id of a user in the user's collection. That way you are just storing an id to lookup instead of a copy of the user document. When you change the reference document, it will be changed in all of the places it is referenced as well. (Typical relational association)</p><br/><br/><p>I didn't see a field for that in Django-mongoDB either but maybe you can use the traditional django ForeignKey field for this purpose. I don't know if you can mix and match so give it a shot.</p><br/><br/><p>for example, your Teams class would have a field like this:</p><br/><br/><pre><code>teamLeader = ForeignKey(User)<br/></code></pre><br/><br/><p>Let me know if that works.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL WITH JPEG SUPPORT ON MAC OS X
    </pattern>
    <template>
<![CDATA[<p>I installed libjpeg and PIL on Snow and it was migrated without problems to Lion.</p><br/><br/><p>I think however that you have the same problem I faced with installing libjpeg 7 on Snow. The solution for me was :</p><br/><br/><blockquote><br/>  <ul><br/>  <li>Make sure that you are NOT using GCC 4.0. That means those export lines in your .bash_profile file that you needed to get MySQLdb<br/>  working now need to go away.</li><br/>  <li>get (<a href="http://www.ijg.org/files/jpegsrc.v7.tar.gz" rel="nofollow">http://www.ijg.org/files/jpegsrc.v7.tar.gz</a>) and do the usual ./configure &amp;&amp; make &amp;&amp; make install (or whatever the readme says).</li><br/>  <li>Before installing PIL but after installing libjpeg, change the "JPEG_ROOT = None" line in my setup.py file to "JPEG_ROOT =<br/>  libinclude("/usr/local")"</li><br/>  </ul><br/></blockquote><br/><br/><p>I got this from a comment on <a href="http://jetfar.com/libjpeg-and-python-imaging-pil-on-snow-leopard/" rel="nofollow">this blog</a>.</p><br/><br/><p>Afterwards you can reinstall PIL through pip or easy_install. Make sure all the compiled stuff from your last run is deleted (sometimes you need to do this manually). I used virtualenv and pip.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SE SMTP WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Thanks everyone for the recommendations but I finally found a much simpler solution that would allow me to use Django's built-in mail classes so I can still get my admin error email reports etc.</p><br/><br/><p>Thanks to this little beauty I was able to use SES SMTP without any problems:</p><br/><br/><p><a href="https://github.com/bancek/django-smtp-ssl">https://github.com/bancek/django-smtp-ssl</a></p><br/><br/><p>Download and install (python setup.py install)</p><br/><br/><p>Then just change your settings to use this new email backend:</p><br/><br/><pre><code>EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'<br/></code></pre><br/><br/><p>The rest of the settings are as per normal:</p><br/><br/><pre><code>EMAIL_HOST = 'email-smtp.us-east-1.amazonaws.com'<br/>EMAIL_PORT = 465<br/>EMAIL_HOST_USER = 'my_smtp_username'<br/>EMAIL_HOST_PASSWORD = 'my_smtp_password'<br/>EMAIL_USE_TLS = True<br/></code></pre><br/><br/><p>Nice.</p><br/><br/><p>G</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAIN METHOD CALL INDENT STYLE IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>This is a case where a line continuation character is preferred to open parentheses.</p><br/><br/><pre><code>ShortName.objects.distinct() \<br/>         .filter().values()      # looks better<br/></code></pre><br/><br/><p>The need for this style becomes more obvious as method names get longer and as methods start taking arguments:</p><br/><br/><pre><code>return some_collection.get_objects(locator=l5) \<br/>                      .get_distinct(case_insensitive=True) \<br/>                      .filter(predicate=query(q5)) \<br/>                      .values()<br/></code></pre><br/><br/><p>PEP 8 is intend to be interpreted with a measure of common-sense and an eye for both the practical and the beautiful.  Happily violate any PEP 8 guideline that results in ugly or hard to read code.</p><br/><br/><p>That being said, if you frequently find yourself at odds with PEP 8, it may be a sign that there are readability issues that transcend your choice of whitespace :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MAKE PYTHON LOOK UGLI
    </pattern>
    <template>
<![CDATA[<p>1) You need slash, because usually, but not always, Django adheres to pep8, where lines should have at most 80 characters. The better way to write this though, is:</p><br/><br/><pre><code>from django.contrib.admin.util import (get_model_from_relation,<br/>    reverse_field_path, get_limit_choices_to_from_path)<br/></code></pre><br/><br/><p><code>\</code> should generally be avoided.</p><br/><br/><p>2) There is nothing inelegant with this code. Simply attributes required for making lookup are created. Why do you feel it's not elegant? How would you prefer this to be written?</p><br/><br/><p>3) Again to satisfy the need of having line shorter than 80 characters. This could be rewritten using <code>()</code> and made shorter:</p><br/><br/><pre><code>def has_output(self):<br/>    extra = (isinstance(self.field, models.related.RelatedObject) and <br/>             self.field.field.null or hasattr(self.field, 'rel') and self.field.null)<br/>    extra = 1 if extra else 0<br/>    return len(self.lookup_choices) + extra &gt; 1<br/></code></pre><br/><br/><p>However since Django uses Python 2.4 (I think they are bumping version soon or already did it), they can't use inline <code>if-else</code>.</p><br/><br/><p>On the other hand it could be also written in shorter way:</p><br/><br/><pre><code>def has_output(self):<br/>    if isinstance(self.field, models.related.RelatedObject) \<br/>       and self.field.field.null or hasattr(self.field, 'rel') \<br/>       and self.field.null:<br/>        return len(self.lookup_choices) &gt; 0<br/>    else:<br/>        return len(self.lookup_choices) &gt; 1<br/></code></pre><br/><br/><p>But I feel the original way is slightly clearer by having the <code>extra</code> variable. Here you would need a comment, why it's either 0 or 1. With extra you don't need a comment and it's perfectly clear. I dislike comments, so I prefer the first way :-)</p><br/><br/><p>4) This indeed looks messy. I believe it would be better to split it into three smaller methods, each potentially yielding someting. But then I am not sure that it's allowed in python2.4 (or python2.5) to yield from subroutine (I have some vague memory, that this was introduced later or even in py3). Anyway I would put creation of those dictionaries into a separate methods, because it seems very untrivial. What I would prefer is this:</p><br/><br/><pre><code>def choices(self, cl):<br/>    from django.contrib.admin.views.main import EMPTY_CHANGELIST_VALUE<br/>    yield self._some_default_choice()<br/>    for pk_val, val in self.lookup_choices:<br/>        yield self._choice_from_lookup_choices(pk_val, val)<br/>    if isinstance(self.field, models.related.RelatedObject) \<br/>       and self.field.field.null or hasattr(self.field, 'rel') \<br/>       and self.field.null:<br/>        yield self._some_conditional_choice()<br/></code></pre><br/><br/><p>Of course I would use some more meaningful names for submethods, but I don't see the full context and I don't really know what those choices are.</p><br/><br/><p><strong>Finally:</strong></p><br/><br/><p>What you see here is Python2 pushed to its limits. Django is a big framework. There are some <em>features</em> that are simply result of Django being large project, that has been now developed for several years and people learning new stuff. Fortunately Django developers are slowly removing stuff they believe is wrong, e.g. changing default project structure in Django 1.4, deprecating stuff and bumping python version. You can actually learn a lot from reading django code and asking questions. You probably can learn even more by trying to refactor some code and then learning, why it's not that easy and why it must be left the way it is ;-) Try it, it will be fun :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVASCRIPT COMPLEX IN A LARG PROJECT
    </pattern>
    <template>
<![CDATA[<p>Definitely look into a module system, like AMD. <a href="http://requirejs.org/" rel="nofollow">RequireJS</a> is the most popular AMD implementation.</p><br/><br/><p><a href="http://www.slideshare.net/davidpadbury/javascript-growing-up" rel="nofollow">Here's a good presentation on module systems</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DROPBOX AS A SERVER FOR MY DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>The point you need to understand is: can you run django without djagno installed? Can django be installed on a usb-drive? Dropbox is but a cloud storage service NOT cloud hosting service. To store you do not require RAM and processors while for hosting you do. </p><br/><br/><p>Hence the answer is NO. If you are okay with configuring apache etc. you can go for VPS. If not try some managed servers. If you dont want to spend much and are looking at free hosting solutions for django a few of them are:</p><br/><br/><p>kodingen.com</p><br/><br/><p>shellmix.com</p><br/><br/><p><a href="http://0x2a-dc.com/index.php?name=shop&amp;cat=6" rel="nofollow">http://0x2a-dc.com/index.php?name=shop&amp;cat=6</a></p><br/><br/><p><a href="http://www.heliohost.org/home/" rel="nofollow">http://www.heliohost.org/home/</a></p><br/><br/><p><a href="http://bitnami.org/cloud" rel="nofollow">http://bitnami.org/cloud</a></p><br/><br/><p><a href="https://www.alwaysdata.com/" rel="nofollow">https://www.alwaysdata.com/</a></p><br/><br/><p>more data:<br/><a href="http://freedjangohosting.com/" rel="nofollow">http://freedjangohosting.com/</a></p><br/><br/><p><a href="http://djangohosting.com/" rel="nofollow">http://djangohosting.com/</a></p><br/><br/><p><a href="https://code.djangoproject.com/wiki/DjangoFriendlyWebHosts" rel="nofollow">https://code.djangoproject.com/wiki/DjangoFriendlyWebHosts</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATPLOTLIB TABL FORMAT
    </pattern>
    <template>
<![CDATA[<p>The matplotlib documentation says </p><br/><br/><blockquote><br/>  <p>Add a table to the current axes. Returns a matplotlib.table.Table instance. For finer grained control over tables, use the Table class and add it to the axes with add_table().</p><br/></blockquote><br/><br/><p>You could do is the following, look at the properties of your table (it's and object belonging to that class Table):</p><br/><br/><pre><code>print  the_table.properties() # hint it's a dictionary do: type(the_table.properties() &lt;type 'dict'&gt; <br/></code></pre><br/><br/><p>edit that dictionary the way you see right, and the update your table, with:</p><br/><br/><pre><code>the_table.update(giveHereYourDictionary)<br/></code></pre><br/><br/><p>Hint: if you work with IPython or interactive shell it's enough to do help(objectName), e.g. help(the_table) to see all the object's methods.<br/>This should, hopefully, work.</p><br/><br/><p>OK, I'm adding here a walk through of how to to that kind of stuff. I admit, it's not trivial, but I am using matplotlib for 3.5 years now, so ...</p><br/><br/><p>Do your code in IPython (I said it before, but I must emphasize again), it really helps to examine all the properties that objects have (type object name and then the  key):</p><br/><br/><pre><code>In [95]: prop=the_table.properties()<br/>In [96]: prop #This is a dictionary, it's not so trivial, but never the less one can understand how dictionaries work...<br/>Out[96]: <br/>{'agg_filter': None,<br/> 'alpha': None,<br/> 'animated': False,<br/> 'axes': &lt;matplotlib.axes.AxesSubplot at 0x9eba34c&gt;,<br/> 'celld': {(0, -1): &lt;matplotlib.table.Cell at 0xa0cf5ec&gt;,<br/>  (0, 0): &lt;matplotlib.table.Cell at 0xa0c2d0c&gt;,<br/>  (0, 1): &lt;matplotlib.table.Cell at 0xa0c2dec&gt;,<br/>  (0, 2): &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;,<br/>  (1, -1): &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,<br/>  (1, 0): &lt;matplotlib.table.Cell at 0xa0c2fac&gt;,<br/>  (1, 1): &lt;matplotlib.table.Cell at 0xa0cf08c&gt;,<br/>  (1, 2): &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,<br/>  (2, -1): &lt;matplotlib.table.Cell at 0xa0cf84c&gt;,<br/>  (2, 0): &lt;matplotlib.table.Cell at 0xa0cf28c&gt;,<br/>  (2, 1): &lt;matplotlib.table.Cell at 0xa0cf3ac&gt;,<br/>  (2, 2): &lt;matplotlib.table.Cell at 0xa0cf4cc&gt;},<br/> 'child_artists': [&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0c2d0c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf84c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf3ac&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf08c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf28c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf4cc&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf5ec&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0c2fac&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;],<br/> 'children': [&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,<br/>  ...snip snap ...<br/>  &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,<br/>  &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;],<br/> 'clip_box': TransformedBbox(Bbox(array([[ 0.,  0.],<br/>       [ 1.,  1.]])), CompositeAffine2D(BboxTransformTo(Bbox(array([[ 0.,  0.],<br/>       [ 1.,  1.]]))), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.25,  0.3 ],<br/>       [ 0.95,  0.8 ]])), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.,  0.],<br/>       [ 8.,  6.]])), Affine2D(array([[ 80.,   0.,   0.],<br/>       [  0.,  80.,   0.],<br/>       [  0.,   0.,   1.]])))))))),<br/> 'clip_on': True,<br/> 'clip_path': None,<br/> 'contains': None,<br/> 'figure': &lt;matplotlib.figure.Figure at 0x9eaf56c&gt;,<br/> 'gid': None,<br/> 'label': '',<br/> 'picker': None,<br/> 'rasterized': None,<br/> 'snap': None,<br/> 'transform': BboxTransformTo(TransformedBbox(Bbox(array([[ 0.25,  0.3 ],<br/>       [ 0.95,  0.8 ]])), BboxTransformTo(TransformedBbox(Bbox(array([[ 0.,  0.],<br/>       [ 8.,  6.]])), Affine2D(array([[ 80.,   0.,   0.],<br/>       [  0.,  80.,   0.],<br/>       [  0.,   0.,   1.]])))))),<br/> 'transformed_clip_path_and_affine': (None, None),<br/> 'url': None,<br/> 'visible': True,<br/> 'zorder': 0}<br/><br/># we now get all the cells ...<br/> [97]: cells = prop['child_artists']<br/><br/>In [98]: cells<br/>Out[98]: <br/>[&lt;matplotlib.table.Cell at 0xa0c2dec&gt;,<br/> &lt;matplotlib.table.Cell at 0xa0cf18c&gt;,<br/>... snip snap...<br/> &lt;matplotlib.table.Cell at 0xa0cf72c&gt;,<br/> &lt;matplotlib.table.Cell at 0xa0c2ecc&gt;]<br/><br/>In [99]:cell=cells[0]<br/>In [100]: cell # press tab here to see cell's attributes<br/><br/>Display all 122 possibilities? (y or n)<br/>cell.PAD<br/>cell.add_callback<br/>...snip snap ...<br/>cell.draw<br/>cell.eventson<br/>cell.figure<br/>...snip snap ...<br/>In [100]: cell.set_h<br/>cell.set_hatch   cell.set_height <br/><br/># this looks promising no? Hell, I love python ;-)<br/>wait, let's examine something first ...<br/>In [100]: cell.get_height()<br/>Out[100]: 0.055555555555555552<br/>In [101]: cell.set_height(0.1) # we just 'doubled' the height...<br/>In [103]: pyplot.show()<br/></code></pre><br/><br/><p>and TA DA:</p><br/><br/><p><img src="http://i.stack.imgur.com/W2xaG.png" alt="Table with modified height for one cell"></p><br/><br/><p>Now, I challege you to change the height of all the cells, using a for loop. <br/>Should not be so hard. <br/>Would be nice to win that bounty ;-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK LANGUAG FOR NEW WEB 2.0 SITE ( 2008 AND 2009 )
    </pattern>
    <template>
<![CDATA[<p>it depends.</p><br/><br/><p>php - symfony is a great framework.  downsides: php, wordy and directory heavy.  propel gets annoying to use.  upsides: php is everywhere and labor is cheap.  well done framework, and good support.  lots of plugins to make your life easier</p><br/><br/><p>python - django is also a great framework.  downsides: python programmers can be harder to find, django even harder.  changing your db schema can be somewhat difficult since there are no official migrations.  doesn't quite do mvc like you'd expect.  upsides: does everything you need and has the great python std library and community behind it.</p><br/><br/><p>ruby - i've never used merb, so I'll address rails.  upsides: there is a plugin, gem, or recipe for almost anything you could want to do.  easy to use.  downsides: those plugins, gems, and recipes sometimes fail to work in mysterious ways.  monkey patching is often evil.  the community is.. vocal.  opinionated software, and sometimes those opinions are wrong (<em>lack of foreign keys</em>).  rails itself seems like a tower of cards waiting to explode and take hours of your life away.</p><br/><br/><p>with all of that said, I'm a freelance php/symfony and ruby/rails developer.  I've worked on several projects in both languages and frameworks.  My latest project is in Rails solely because of ActiveMerchant.  I've been looking for a reason to develop a django app for a while.  If there were an ActiveMerchant like library for django, I probably would have used it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORD ENTRI IN A MODEL USE DRAG AND DROP
    </pattern>
    <template>
<![CDATA[<p>For working code to do this, check out <a href="http://www.djangosnippets.org/snippets/1053/" rel="nofollow">snippet 1053</a> at <a href="http://www.djangosnippets.org" rel="nofollow">djangosnippets.org</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOLLOW SUBVERS REPOSITORI TRUNK GIT ( MIRROR ) GIT SVN SUBVERS
    </pattern>
    <template>
<![CDATA[<p>If you're not going to be making changes to the Django code, then there's no reason to import it into Git.  Just use option 1.</p><br/><br/><p>Using <code>git-svn</code> (either by running it yourself or by cloning somebody else's repository) is useful if you want to make local modifications to a project that uses Subversion (whether or not you send any of those modifications back to the project).  But if you're not making any local modifications, then it's just needless complexity.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL OR DJANGO ORM WHAT S THE CONVENT WAY TO HAVE AN ORDER ONE TO MANI
    </pattern>
    <template>
<![CDATA[<p>I hate this problem ... and I run into it all the time.</p><br/><br/><p>For my most recent Django site we had a Newsletter which contained N Articles and, of course, order was important. I assigned the default order as ascending Article.id, but this failed if Articles were entered in something other than "correct" order.</p><br/><br/><p>On the Newsletter change_form.html page I added a little bit of jQuery magic using the Interface plugin (<a href="http://interface.eyecon.ro/" rel="nofollow">http://interface.eyecon.ro/</a>). I show the titles of the associated Articles and the user can drag them around as they like. There is an onChange handler that recomputes the Article.id's in article_order field.</p><br/><br/><p>Enjoy,<br><br/>  Peter</p><br/><br/><p>For app=content, model=Newsletter, the following is in<br/>templates/admin/content/newslettter/change_form.html</p><br/><br/><pre><code>{% extends 'admin/change_form.html' %}<br/><br/>{% block form_top %}{% endblock %}<br/>{% block extrahead %}{{ block.super }}<br/>&lt;script type="text/javascript" src="/media/js/jquery.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/media/js/interface.js"&gt;&lt;/script&gt;<br/>&lt;script&gt;<br/>$(document).ready(<br/>    function () {<br/>        $('ol.articles').Sortable(<br/>            {<br/>                accept :        'sortableitem',<br/>                helperclass :   'sorthelper',<br/>                activeclass :   'sortableactive',<br/>                hoverclass :    'sortablehover',<br/>                opacity:        0.8,<br/>                fx:             200,<br/>                axis:           'vertically',<br/>                opacity:        0.4,<br/>                revert:         true,<br/>                trim:           'art_',<br/>                onchange:<br/>                    function(list){<br/>                        var arts = list[0].o[list[0].id];<br/>                        var vals = new Array();<br/>                        var a;<br/>                        for (a in arts) {<br/>                            vals[a] = arts[a].replace(/article./, '');<br/>                        }<br/>                        $('#id_article_order').attr('value', vals.join(','));<br/>                    }<br/>            });<br/>    }<br/>);<br/>&lt;/script&gt;<br/>{% endblock %}<br/><br/>{% block after_related_objects %}<br/>{% if original.articles %}<br/>&lt;style&gt;<br/>.sortableitem {<br/>    cursor:move;<br/>    width: 300px;<br/>    list-style-type: none;<br/>    }<br/>&lt;/style&gt;<br/><br/>&lt;h4&gt;Associated Articles&lt;/h4&gt;<br/>&lt;ol class="articles" id="article_list"&gt;<br/>{% for art in original.articles %}<br/>    &lt;li id="article.{{art.id}}" class="sortableitem"&gt;{{art.title}}&lt;/li&gt;<br/><br/>{% endfor %}<br/>&lt;/ol&gt;<br/>{% endif %}<br/>{% endblock %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VMWARE APPLIANC
    </pattern>
    <template>
<![CDATA[<p>Configure and build your appliance at <a href="http://es.cohesiveft.com/" rel="nofollow">Elastic Server On-Demand</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Unfortunately there's no easy way to do this.  The filtering does not seem to be saved in any session variable.</p><br/><br/><p>Clicking back twice is the normal method, but it can be unweildy and annoying if you've just changed an object so that it should no longer be shown using your filter.</p><br/><br/><p>If it's just a one-off, click back twice or go through the filtering again, it's the easiest way.</p><br/><br/><p>If you're going to be filtering more often, or you just want to learn about hacking the admin (which is pretty open and easy), you'll want to write a <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/admin/filterspecs.py" rel="nofollow">FilterSpec</a>.</p><br/><br/><p>Have a look <a href="http://www.djangosnippets.org/snippets/1051/" rel="nofollow">here</a> and <a href="http://www.djangosnippets.org/snippets/587/" rel="nofollow">here</a> for examples of people writing their own.</p><br/><br/><p>A really, really terrible way to do this would be to edit the admin interface so that after you click "Save", you are redirected to you filtered URL.  I wouldn't recommend this at all, but it's an option.</p><br/><br/><p>Another fairly simple way to do this would be to write a generic view to show your filtered objects, then use Django forms to edit the items from there.  I'd have a look at this, you'll be stunned just how little code you have to write to get a simple view/edit page going.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MERG TWO DJANGO PROJECT USER TABL
    </pattern>
    <template>
<![CDATA[<p>If you wait awhile, eventually Django will get multiple database support.</p><br/><br/><p>But as of right now, I think the best solution to your problem would be to synchronize the two database's user tables after changes to either are made.  You can use the signals support to handle this:</p><br/><br/><pre><code>from django.db import models<br/><br/>def user_post_save(sender, instance, **kwargs):<br/>    ... run script to synchronize tables ...<br/>models.signals.post_save.connect(user_post_save, sender=User)<br/></code></pre><br/><br/><p>You won't be able to use the ORM... but dumping the source table, then dropping the destination and importing into it would be relatively painless.  This could definitely cause timing problems, but transactions would mostly solve that.  If the two sites stepping on each other is a concern, I might look into setting up a write lock on the User table during the update, and set up some kind of a spin-wait cycle on the User model's save() method (or the pre_save signal) to check for a lock before completing the save.  This would guarantee that the post_save signal won't get sent during a synchronization.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIVE INTO RAIL OR DJANGO GO INTO THE FUTUR
    </pattern>
    <template>
<![CDATA[<p>Django for own projects and for keeping the job. Rails for finding a new job.</p><br/><br/><p>There's still much hype around Rails and Managers know the name. So it should be easier to find a Rails job.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A REPORT FILE ( ODF PDF ) FROM A DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>try <a href="http://appyframework.org/pod.html" rel="nofollow">pod</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FAIR TO ACCUS RAIL OF MAGIC
    </pattern>
    <template>
<![CDATA[<p>Rails makes extensive use of Ruby's metaprogramming facilities to do a lot of the grunt work for you, but there's no magic&mdash;in the end it's all just code and can be understood given enough time and effort.</p><br/><br/><p>Scaffolding was always intended just as a way of getting up and running with performing CRUD operations on your models quickly. The intention was always that scaffolding should be replaced with your real production code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT INSERT VALU FOR JAVASCRIPT VARIABL
    </pattern>
    <template>
<![CDATA[<p>Looks like I was missing one small thing.   I was using a data series which was an array of arrays.   Actually, the jquery flot plugin is expecting an array of series, which are arrays of arrays, so I needed a triple-nested array.</p><br/><br/><p>Changing from this:</p><br/><br/><pre><code>$.plot($('#mapWrapper'), coords, options);<br/></code></pre><br/><br/><p>to this: </p><br/><br/><pre><code>$.plot($('#mapWrapper'), [coords], options);<br/></code></pre><br/><br/><p>fixed the problem.    </p><br/><br/><p>Thanks to all who looked at this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECOR RUN BEFOR FUNCTION IT IS DECOR IS CALL
    </pattern>
    <template>
<![CDATA[<p>I believe python decorators are just syntactic sugar.</p><br/><br/><pre><code>@foo<br/>def bar ():<br/>    pass<br/></code></pre><br/><br/><p>is the same thing as</p><br/><br/><pre><code>def bar ():<br/>    pass<br/>bar = foo(bar)<br/></code></pre><br/><br/><p>As you can see, <em>foo</em> is being called even though <em>bar</em> has not been called. This is why you see the output from your decorator function. Your output should contain a single line for every function you applied your decorator to.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGNKEY IN UNICODE RETURN
    </pattern>
    <template>
<![CDATA[<pre><code>class RecipeContent(models.Model):<br/>  ...<br/>  def __unicode__(self):<br/>    # You can access ForeignKey properties through the field name!<br/>    return self.recipe.name<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You pretty much covered it, those are indeed all the ways to disable autoescaping.</p><br/><br/><p>Are you sure the value you are talking about is actually <code>s = '&lt;p&gt;Hello!&lt;/p&gt;'</code>?</p><br/><br/><p>My hunch is that you have additional escaping somewhere in that string...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EIGNKEY FORM RESTRICT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If I understand your predicament correctly, the problem itself lies with the way you're dealing with which categories can be parents and which ones can't.  One option to avoid these problems is to actually limit the level of categories which can become parents.  For example, let's say you have the following categories:</p><br/><br/><ul><br/><li>Internet<br/><ul><br/><li>Google</li><br/><li>Yahoo</li><br/></ul></li><br/><li>Offline<br/><ul><br/><li>MS Office</li><br/><li>OpenOffice</li><br/></ul></li><br/></ul><br/><br/><p>The way I usually handle this is I obviously have a parent_id FK on the categories table.  For the root elements (Internet, Offline), the parent_id would be 0.  So, when in your view you're trying to retrieve the "parent categories" for the dropdown, you need to decide how far down can they keep nesting.  I mostly limit this to the first level, so to choose which categories to show in your dropdown, you'd do something like:</p><br/><br/><pre><code>parents = Category.objects.filter(parent_id=0)<br/></code></pre><br/><br/><p>Now obviously, this limits the approach somewhat, but you can increase the level you'd like to include and work out some kind of visual identification system in your template for the dropdown (including extra spaces or dashes for each level in the hierarchy or something).</p><br/><br/><p>Anyway, sorry about the long response, and hopefully this addressed your issue somewhat.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETRIEV A DJANGO MODEL CLASS DYNAM
    </pattern>
    <template>
<![CDATA[<p>I think you're looking for this:</p><br/><br/><pre><code>from django.db.models.loading import get_model<br/>model = get_model('app_name', 'model_name')<br/></code></pre><br/><br/><p>There are other methods, of course, but this is the way I'd handle it if you don't know what models file you need to import into your namespace.  (Note there's really no way to safely get a model without first knowing what app it belongs to.  Look at the source code to loading.py if you want to test your luck at iterating over all the apps' models.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      D AS AUTHENT FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Here's another more recent snippet (July 2008):</p><br/><br/><p>[<a href="http://www.djangosnippets.org/snippets/901/" rel="nofollow">http://www.djangosnippets.org/snippets/901/</a>]</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Essentially, the second solution you propose is a linked list. Linked list implemented at the database level are usually not a good idea. To retrieve a list of <code>n</code> elements, you will need <code>n</code> database access (or use complicated queries). Performance wise, retrieving a list in O(n) is awfully not efficient.</p><br/><br/><p>In regular code, linked list are used to get better insert performance compared to arrays (no need to move all elements around). In your database, updating all elements is not that complicated in only 2 queries :</p><br/><br/><pre><code>UPDATE item.order = item.order + 1 FROM item WHERE order &gt; 3<br/>INSERT INTO item (order, ...) VALUES (3, ...)<br/></code></pre><br/><br/><p>I remember seeing a reuseable app that implemented all that and a nice admin interface, but I cant find it right now ...</p><br/><br/><p>To summarize, definitly use solution #1 and stay away from solution #2 unless you have a very very good reason not to !</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENGIN AND DJANGO INCLUD A TEMPLAT FILE
    </pattern>
    <template>
<![CDATA[<p>I found that it works "out of the box" if I don't load Templates first and render them with a Context object. Instead, I use the standard method shown in the <a href="http://code.google.com/appengine/docs/python/gettingstarted/templates.html" rel="nofollow">AppEngine tutorial</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PROJECT USE GIT
    </pattern>
    <template>
<![CDATA[<p>When pushing to a remote repository, best results are when the remote repository is a "bare" repository with no working directory. It sounds like you have a working directory on the remote repository, which will not be updated by Git when doing a push.</p><br/><br/><p>For your situation, I would recommend that developers have their own testing environment that they can test against locally before having to push their code anywhere else. Having one central location where everybody needs to push their work before they can even <em>try</em> it will lead to much pain and suffering.</p><br/><br/><p>For deployment, I would recommend pushing to a central "bare" repository, then having a process where the deployment server <em>pulls</em> the latest code from the central repository into its working directory.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IDIOMAT PYTHON EQUIVAL TO DJANGO S REGROUP TEMPLAT TAG
    </pattern>
    <template>
<![CDATA[<p>Combine <a href="http://docs.python.org/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> with <a href="http://docs.python.org/library/operator.html#operator.itemgetter" rel="nofollow"><code>operator.itemgetter</code></a> to get a pretty nice solution:</p><br/><br/><pre><code>from operator import itemgetter<br/>from itertools import groupby<br/><br/>key = itemgetter('gender')<br/>iter = groupby(sorted(people, key=key), key=key)<br/><br/>for gender, people in iter:<br/>    print '===', gender, '==='<br/>    for person in people:<br/>        print person<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL INPUT FIELD VALU WITH SAME NAME
    </pattern>
    <template>
<![CDATA[<p>I don't know how to do that with Forms, but if you want to grab the values in the raw way, here's how I'd do:</p><br/><br/><pre><code>relations = request.POST.getlist('relations')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCOD IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Sometimes there's nothing like describing a problem to someone else to help you solve it. :) I should have marked the Python strings as Unicode like this and everything works now:</p><br/><br/><pre><code>def test(request):<br/>    return render_to_response("test.html", {<br/>                                            "s1": u"dados",<br/>                                            "s2": u"aprovação",<br/>                                            }<br/>                              )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO REST INTERFAC WITH HTTP PUT
    </pattern>
    <template>
<![CDATA[<p>request.POST processes form-encoded data into a dictionary, which only makes sense for web browser form submissions.  There is no equivalent for PUT, as web browsers don't PUT forms; the data submitted could have any content type.  You'll need to get the raw data out of request.raw_post_data, possibly check the content type, and process it however makes sense for your application.</p><br/><br/><p>More information in <a href="http://groups.google.com/group/django-developers/browse_thread/thread/771238a95ceb058e">this thread</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CREAT A BACK LINK
    </pattern>
    <template>
<![CDATA[<p>Well you can enable:</p><br/><br/><pre><code>'django.core.context_processors.request',<br/></code></pre><br/><br/><p>in your <code>settings.TEMPLATE_CONTEXT_PROCESSORS</code> block and hook out the referrer but that's a bit nauseating and could break all over the place. </p><br/><br/><p>Most places where you'd want this (eg the edit post page on SO) you have a real object to hook on to (in that example, the post) so you can easily work out what the proper previous page should be.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSION CONTROL THE INVIDU APP OR THE WHOLE PROJECT OR BOTH
    </pattern>
    <template>
<![CDATA[<p>It really depends on whether those reusable apps are actually going to be reused outside of the project or not? </p><br/><br/><p>The only reason you might need it in a different repo is if other projects with seperate repos might need to use it. But you can always split it out later. Making a git repo is cheap so it's one of those things you can do later if it becomes necessary. Making things complicated up front is just going to frustrate you later so feel free to wait till you know it's necessary</p><br/><br/><p>YAGNI it's for more than just code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LISTS REPORT WITH IN LIN SUMMARI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Subtotals are <code>SELECT SUM(qty) GROUP BY order_number</code> things.</p><br/><br/><p>They are entirely separate from a query to get details.</p><br/><br/><p>The results of the two queries need to be interleaved.  A good way to do this is to create each order as a tuple <code>( list_of_details, appropriate summary )</code>.</p><br/><br/><p>Then the display is easy</p><br/><br/><pre><code>{% for order in orderList %}<br/>    {% for line in order.0 %}<br/>        {{ line }}<br/>    {% endfor %}<br/>    {{ order.1 }}<br/>{% endfor %}<br/></code></pre><br/><br/><p>The hard part is interleaving the two queries.</p><br/><br/><pre><code>details = Line.objects.all()<br/>ddict = defaultdict( list )<br/>for d in details:<br/>    ddict[d.order_number].append(d)<br/><br/>interleaved= []<br/>subtotals = ... Django query to get subtotals ... <br/>for s in subtotals:<br/>    interleaved.append( ( ddict[s.order], s.totals ) )<br/></code></pre><br/><br/><p>This <code>interleaved</code> object can be given to your template for rendering.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK TO START ON WEB PROGRAM FOR AN EXPERIENC NON WEB PROGRAMM
    </pattern>
    <template>
<![CDATA[<p>I can recommend a few that I usually provide my Jr. web developers, and that I find my self referencing from time to time.  These are create for basic web development, and depending on your back end server environment, you may want to purchase a books on IIS and C#, or Apache and PHP etc. </p><br/><br/><ol><br/><li><a href="http://rads.stackoverflow.com/amzn/click/0321346939" rel="nofollow">Bulletproof Web Design</a>  by Dan Cedarholm</li><br/><li><a href="http://rads.stackoverflow.com/amzn/click/1590596145" rel="nofollow">CSS Mastery:</a> Advanced Web Standards Solutions</li><br/><li><a href="http://rads.stackoverflow.com/amzn/click/0596101996" rel="nofollow">JavaScript: The Definitive Guide</a> </li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYDEV SET BREAKPOINT IN SITE PACKAG SOURC
    </pattern>
    <template>
<![CDATA[<p>Have you imported the Django source as a project? To do that you just create a new PyDev project and set it's location to the Django source folder.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISTINCT DJANGO APP ON SAME SUBDOMAIN TO SHARE SESSION COOKI
    </pattern>
    <template>
<![CDATA[<p>I would instead advise you to set <code>SESSION_COOKIE_NAME</code> to <em>different</em> values for the two apps. Your users will still have to log in twice initially, but their sessions won't conflict - if they log in to app A, then app B, and return to A, they'll still have their A session.</p><br/><br/><p>Sharing sessions between Django instances is probably not a good idea. If you want some kind of single-sign-on, look into something like django-cas. You'll still have 2 sessions (as you should), but the user will only log in once.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLAIN TEXT INFO TO FORM IN A FORMSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Instead of zipping your forms with the additional data, you can override the constructor on your form and hold your title/description as <em>instance-level</em> member variables.  This is a bit more object-oriented and learning how to do this will help you solve other problems down the road such as dynamic choice fields.</p><br/><br/><pre><code>class MyForm (forms.Form):<br/>    def __init__ (self, title, desc, *args, **kwargs):<br/>        self.title = title<br/>        self.desc = desc<br/>        super (MyForm, self).__init__ (*args, **kwargs) # call base class<br/></code></pre><br/><br/><p>Then in your view code:</p><br/><br/><pre><code>form = MyForm ('Title A', 'Description A')<br/></code></pre><br/><br/><p>Adjust accordingly if you need these values to come from the database. Then in your template, you access the instance variables just like you do anything else, e.g.:</p><br/><br/><pre><code>   &lt;h1&gt;{{ form.title }}&lt;/h1&gt;<br/>   &lt;p&gt;{{ form.desc }}&lt;/p&gt;<br/></code></pre><br/><br/><p>From the way you phrased your question, I think you probably have some confusion around the way Django uses Python <em>class attributes</em> to provide a declarative form API versus <em>instance-level</em> attributes that you apply to individual instances of a class, in this case your form objects.</p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/207000/python-difference-between-class-and-instance-attributes">Check out this link for a good discussion on the distinction</a></li><br/><li><a href="http://stackoverflow.com/questions/206734/why-do-attribute-references-act-like-this-with-python-inheritance">And this one</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND SQLITE CONCURR ISSU
    </pattern>
    <template>
<![CDATA[<p>In the following method function</p><br/><br/><pre><code>def add_active_residents(self):<br/>    ssa_res = SSA_Resident.objects.select_related(depth=1).filter(ssa=self.ssa, active=True)<br/>    for r in ssa_res:<br/>        self.residents.add(r.resident) # Fails Here<br/>    self.save()<br/></code></pre><br/><br/><p>Why is there a select_related?  You only really need the FK's of <code>ssa_res</code> items.  Why do additional queries for related items?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENABL AUTHENT ACROSS A DJANGO SITE AND TRANSPAR PRESERV ANI POST OR GET DATA
    </pattern>
    <template>
<![CDATA[<p>I have two suggestions.</p><br/><br/><h2>Redirect/Middleware</h2><br/><br/><p>Since you're already using middleware to handle the login requirement, you could modify this middleware.  Or possibly, create another middleware class that is called after the login middleware.  These ideas are intertwined so it may make more sense to modify the existing one.</p><br/><br/><ol><br/><li>If not logged in, capture the GET and POST data in the middleware, and store it in the session</li><br/><li>If the user is authenticated, check for the value(s) set in #1.  If they exist, modify request.GET and request.POST to reflect it, and delete the session data.</li><br/></ol><br/><br/><p>I think this should work cleanly, and many people would find it useful.  It'd be a great post on <a href="http://djangosnippets.org" rel="nofollow">djangosnippets.org</a>.</p><br/><br/><h2>Ajax technique</h2><br/><br/><p>This is less practical if you already have your form handling in place, but could create a better user experience.  If you POST asynchronously, your Javascript handler could recognize a "login required" response code, and then display a popup dialog requesting login.  On completion, the user could resubmit the form.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N T DJANGO S ADMIN INTERFAC BE USE FOR
    </pattern>
    <template>
<![CDATA[<p>User-specific privileges. I myself had been trying to work it into that-- some of the new (and at least at the time, undocumented) features (from newforms-admin) make it actually possible. Depending on how fine you want the control to be, though, you can end up getting very, very deep into the Django/admin internals. Just because you can doesn't mean you should-- it's easier and less fragile to do so with a custom admin app.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GEODJANGO FOR MAP A FLOOR PLAN
    </pattern>
    <template>
<![CDATA[<p>I'd say that using GeoDjango for this purpose is definitely overkill. </p><br/><br/><p>It could be implemented simply with an image map, or Canvas/SVG or Flash for extra pretty-points :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON AND PHP COMPAR FOR ECOMMERC
    </pattern>
    <template>
<![CDATA[<p>I don't think you'll get a good answer to this one. Everyone uses php, and python ecommerce is probably mainly in-house built. If there was a popular python solution (something like django for web platforms) - then I doubt there would be any discussion.</p><br/><br/><p>However - as of now I have yet to see a good all-in one system.<br/>On the upside, using python you can easily create something simple for your business.</p><br/><br/><p>As there are not going to be a lot of new drastic revisions to the Python language in the future, we can expect some good apps to come out soon. My bet today is on django apps.</p><br/><br/><p>Using php is probably good in the short run. Not that I would ever go back to it...</p><br/><br/><p>PS: I forgot about another one: ASP.NET (mvc?). If you are feeling particularly adventurous, they have loads of "controls" and products. However it all confuses me a lot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST OF DICTIONARI VALU BY DATE IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can do it this way:</p><br/><br/><pre><code>list.sort(key=lambda item:item['date'], reverse=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMEZON ON AN EXIST DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>I would do a mass update to the database tables by adding or subtracting hours to/from the datetime fields.</p><br/><br/><p>Something like this works in SQL Server, and adds 2 hours to the date:</p><br/><br/><pre><code>update tblName set date_field = dateadd("hh", 2, data_field)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO OR C # ASP.NET FOR WEB DEVELOP
    </pattern>
    <template>
<![CDATA[<p>Much as I love Python (and, that's a LOT!-), if you're highly skilled at C# and, as you say, "have no experience on Python", <em>your</em> code will be more scalable and suitable (for the next several months, at least) if you stick with what you know best. For a hypothetical developer extremely skilled at both platforms, scalability would essentially be a wash, and Python would enhance that developer's productivity; but getting really good at any technology takes some months of practice, it doesn't "just happen" magically.</p><br/><br/><p>So, unless you're trying to broaden your range of skills and job opportunities, or enhance your productivity, but rather are specifically, strictly focused on the scalability of the web apps you're coding right now, I have, in good conscience, to recommend you stick with C#. You should also try IronPython (and get the great "IronPython in Action" book from Mannings -- bias alert, I'm friends with the author and was a tech reviewer of that book;-) for all sorts of non-production supporting code, to get a taste of it and the incredible productivity boost it can give you... but, to deliver best value to your clients or employers, stick with what you REALLY master, C#, for <em>any</em> scalability-critical work you deliver to them!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILEPATH FOR A CLASS IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can use the <a href="http://docs.python.org/library/inspect.html#inspect.getfile" rel="nofollow">inspect</a> module, like this:</p><br/><br/><pre><code>import inspect<br/>inspect.getfile(C.__class__)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV STATIC FILE WITH MOD WSGI AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>The mod_wsgi documentation explains how to setup static files which appear at a URL underneath that which the WSGI application is mounted at. See:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/ConfigurationGuidelines#Hosting%5FOf%5FStatic%5FFiles" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ConfigurationGuidelines#Hosting_Of_Static_Files</a></p><br/><br/><p>Note that 'Options +ExecCGI' is not need when using WSGIScriptAlias directive to mount the WSGI application. The 'ExecCGI' option is only required when using AddHandler to mount applications as resources.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLI DJANGO MODEL META OPTION TO MODEL THAT I DID NOT WRITE
    </pattern>
    <template>
<![CDATA[<p>Paolo's answer is great; I wasn't previously aware of the new proxy support.  The only issue with it is that you need to target your code to the OrderedUser model - which is in a sense similar to simply doing a <code>User.objects.filter(....).order_by('username')</code>.  In other words, it's less verbose but you need to explicitly write your code to target it.  (Of course, as mentioned, you'd also have to be on trunk.)</p><br/><br/><p>My sense is that you want <i>all</i> <code>User</code> queries to be ordered, including in third party apps that you don't control.  In such a circumstance, monkeypatching the base class is relatively easy and very unlikely to cause any problems.  In a central location (such as your settings.py), you could do:</p><br/><br/><pre><code>from django.contrib.auth.models import User<br/>User.Meta.ordering = ['username']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PING FEEDBURN IN DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>You can use Django's <a href="http://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow"><code>signals</code></a> feature to get a callback after a model is saved:</p><br/><br/><pre><code>import xmlrpclib<br/>from django.db.models.signals import post_save<br/>from app.models import MyModel<br/><br/>def ping_handler(sender, instance=None, **kwargs):<br/>    if instance is None:<br/>        return<br/>    rpc = xmlrpclib.Server('http://ping.feedburner.google.com/')<br/>    rpc.weblogUpdates.ping(instance.title, instance.get_absolute_url())<br/><br/>post_save.connect(ping_handler, sender=MyModel)<br/></code></pre><br/><br/><p>Clearly, you should update this with what works for your app and read up on signals in case you want a different event.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTERN OF DJANGO AUTH MIDDLEWAR
    </pattern>
    <template>
<![CDATA[<p><code>LazyUser</code> is descriptor-class. According to <a href="http://docs.python.org/reference/datamodel.html#invoking-descriptors" rel="nofollow">documentation</a> it can be only class attribute not instance one:</p><br/><br/><blockquote><br/>  <p>For instance, <code>a.x</code> has a lookup chain starting with <code>a.__dict__['x']</code>, then <code>type(a).__dict__['x']</code>, and continuing through the base classes of <code>type(a)</code> excluding metaclasses.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CORRECT VALU FOR DJANGO ROOT URLCONF SET IN DIFFER BRANCH
    </pattern>
    <template>
<![CDATA[<p>Simply remove project name form <code>ROOT_URLCONF</code> definition - it is optional. Then you can have project folder with different names.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUCCESS METHOD FOR DEPLOY A DJANGO APPLIC ON THE DESKTOP
    </pattern>
    <template>
<![CDATA[<p>I did this a couple years ago for a Django app running as a local daemon. It was launched by Twisted and wrapped by py2app for Mac and py2exe for Windows. There was both a browser as well as an Air front-end hitting it. It worked pretty well for the most part but I didn't get to deploy it out in the wild because the larger project got postponed. It's been a while and I'm a bit rusty on the details, but here are a few tips:</p><br/><br/><ul><br/><li><p>IIRC, the most problematic thing was Python loading C extensions. I had an Intel assembler module written with C "asm" commands that I needed to load to get low-level system data. That took a while to get working across both platforms. If you can, try to avoid C extensions.</p></li><br/><li><p>You'll definitely need an installer. Most likely the app will end up running in the background, so you'll need to mark it as a Windows service, Unix daemon, or Mac launchd application.</p></li><br/><li><p>In your installer you'll want to provide a way to locate a free local TCP port. You may have to write a little stub routine that the installer runs or use the installer's built-in scripting facility to find a port that hasn't been taken and save it to a config file. You then load the config file inside your settings.py and whatever front-end you're going to deploy. That's the shared port. Or you could just pick a random number and hope no other service on the desktop steps on your toes :-)</p></li><br/><li><p>If your front-end and back-end are separate apps then you'll need to design an API for them to talk to each other. Make sure you provide a flag to return the data in both raw and human-readable form. It really helps in debugging.</p></li><br/><li><p>If you want Django to be able to send notifications to the user, you'll want to integrate with something like Growl or get Python for Windows extensions so you can bring up toaster pop-up notifications.</p></li><br/><li><p>You'll probably want to stick with SQLite for database in which case you'll want to make sure you use semaphores to tackle multiple requests vying for the database (or any other shared resource). If your app is accessed via a browser users can have multiple windows open and hit the app at the same time. If using a custom front-end (native, Air, etc...) then you can control how many instances are running at a given time so it won't be as much of an issue.</p></li><br/><li><p>You'll also want some sort of access to local system logging facilities since the app will be running in the background and make sure you trap all your exceptions and route it into the syslog. A big hassle was debugging Windows service startup issues. It would have been impossible without system logging. </p></li><br/><li><p>Be careful about hardcoded paths if you want to stay cross-platform. You may have to rely on the installer to write a config file entry with the actual installation path which you'll have to load up at startup.</p></li><br/><li><p>Test actual deployment especially across a variety of firewalls. Some of the desktop firewalls get pretty aggressive about blocking access to network services that accept incoming requests.</p></li><br/></ul><br/><br/><p>That's all I can think of. Hope it helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU OF 2 FIELD IN DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>In django 1.1 you can do the following:</p><br/><br/><pre><code>players = Player.objects.filter(batting__gt=F('bowling'))<br/></code></pre><br/><br/><p>See the <a href="http://stackoverflow.com/questions/433294/column-comparison-in-django-queries">other question</a> for details</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT MULTIPL CUSTOM WITH GIT
    </pattern>
    <template>
<![CDATA[<p>In addition to cpharmston's answer, it sounds like you need to do some refactoring to separate out what is truly custom for each client and what isn't. Then you may consider adding additional repositories to track the customizations for each client (entirely new repos, not branches). Then your deployment can pull your "core" from your main repo, and the client-specific stuff from that repo.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GIVE ERROR NO MODUL NAME DJANGO.COR
    </pattern>
    <template>
<![CDATA[<p>Also make sure that you have permission to access all of django's files.  I've seen these kinds of errors happen because of permissions issues before.</p><br/><br/><p><strong>EDIT</strong>:  I haven't tried it out, but there's a link on that page to <a href="http://www.instantdjango.com/" rel="nofollow">Instant Django</a>, which looks like a pretty easy to set up.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MVC FRAMEWORK IN PERL HA IT OWN STANDALON SERVER
    </pattern>
    <template>
<![CDATA[<p>Catalyst comes with a built-in test server - check <a href="http://search.cpan.org/~hkclark/Catalyst-Manual-5.8000/lib/Catalyst/Manual/Tutorial.pod" rel="nofollow">Catalyst::Manual::Tutorial</a> for more details. <a href="http://search.cpan.org/~hkclark/Catalyst-Manual-5.8000/lib/Catalyst/Manual/Tutorial/03%5FMoreCatalystBasics.pod#Test%5FRun%5FThe%5FApplication" rel="nofollow">This</a> looks like a good place to start.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT DJANGO MODEL SIMILAR TO RUBI ON RAIL MIGRAT
    </pattern>
    <template>
<![CDATA[<p>South has the most steam behind it. dmigrations is too basic IMO. django-evolution screams if you ever touch the db outside of it.</p><br/><br/><p>South is the strongest contender by far.  With the model freezing and auto-migrations it's come a long way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT MULTIPL CUSTOM GIT WORKFLOW
    </pattern>
    <template>
<![CDATA[<p>I would have a single project repo at a well-known place containing a master branch with the common code, and branches for specific deployments (e.g. customer/A customer/B demo).</p><br/><br/><p>Then I would have checkouts from each of these branches for each customer, for the demo server, and so on. You can let these pull automatically from their respective branch with a commit hook on the single project repo.</p><br/><br/><p>Every developer would have their local copy of the project repo, do local work, and then push stuff back to the single project repo.</p><br/><br/><p>The challenge will be to maintain the branches diverging from master and doing the regular merges so the diversion do not grow over time.</p><br/><br/><p>I have seen this solution describe somewhere in much more detail somewhere on the web, but I could not find it quickly again. Some blog post on using git for a staging and production web server, IIRC.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GAE HOW MAY I SHOW A DATE ACCORD TO RIGHT CLIENT TIMEZON
    </pattern>
    <template>
<![CDATA[<p>With respect to the second part of your question:</p><br/><br/><p>Python time() returns UTC regardless of what time zone the server is in.  timezone() and tzname() will give you, respectively, the offset to local time on the server and the name of the timezone and the DST timezone as a tuple.  GAE uses Python 2.5.x as of the time of this posting; see the documentation for Python time functions <a href="http://www.python.org/doc/2.3.5/lib/module-time.html" rel="nofollow">here</a>.</p><br/><br/><p>For the first part of the question:</p><br/><br/><p>You can either format the date with code on the server, or with code on the client.  </p><br/><br/><ul><br/><li><p>If you format on the server, you can </p><br/><br/><ul><br/><li>Use the timezone of the requester's IP address</li><br/><li>Require a user to register and give you a timezone, store it, and use the stored value</li><br/><li>Use a (hidden?) field on the GET or POST so the client's desired timezone is part of the request</li><br/></ul></li><br/><li><p>If you format on the client, you'll need to write a few lines of JavaScript.  The procedure is something like "make a date from UTC using Date(utctime), then stuff it into the document."  By default, JavaScript dates display as local time regardless of how they were initialized - awesome!  </p></li><br/></ul><br/><br/><p>I recommend formatting on the client, because what's a webpage like without a bit of JavaScript?  It's 2009!  <a href="http://blogs.msdn.com/marcelolr/archive/2008/06/04/javascript-date-utc-and-local-times.aspx" rel="nofollow">Marcelo</a> has some examples.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROCESS ACCESS DJANGO DB BACKEND RECORD NOT SHOW UP UNTIL MANUAL CALL COMMIT
    </pattern>
    <template>
<![CDATA[<p>He said:</p><br/><br/><blockquote><br/>  <p>Django's autocommit isn't an actual autocommit in the db.</p><br/></blockquote><br/><br/><p>So, you have to ensure that autocommit is set at the db level. Otherwise, because of transaction isolation, processes will not see changes made by a different process (different connection), until a commit is done. AFAIK this is not especially a Django issue, other than the lack of clarity in the docs about Django autocommit != db autocommit.</p><br/><br/><p><strong>Update:</strong> Paraphrasing slightly from the MySQL docs:</p><br/><br/><blockquote><br/>  <p>REPEATABLE READ is the default<br/>  isolation level for InnoDB. For<br/>  consistent reads, there is an<br/>  important difference from the READ<br/>  COMMITTED isolation level: <strong>All<br/>  consistent reads within the same<br/>  transaction read the snapshot<br/>  established by the first read</strong>. (My<br/>  emphasis.)</p><br/></blockquote><br/><br/><p>So, with REPEATABLE READ you only get, on subsequent reads, what was read in the first read. With READ COMMITTED, each read creates and reads its own fresh snapshot, so that you see subsequent updates from other transactions. So - in answer to your comment - your change to the transaction level is correct.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOONEFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>A <code>ManyToOne</code> field, as you've guessed, is called <code>ForeignKey</code> in Django. You will have to define it on your <code>User</code> class for the logic to work properly, but Django will make a reverse property available on the <code>Groups</code> model automatically:</p><br/><br/><pre><code>class Group(models.Model):<br/>    name = models.CharField(max_length=64)<br/><br/>class User(models.Model):<br/>    name = models.CharField(max_length=64)<br/>    group = models.ForeignKye(Group)<br/><br/>g = Group.objects.get(id=1)<br/>print g.user_set.all()  # prints list of all users in the group<br/></code></pre><br/><br/><p>Remember that Django's models sit on top of a relational database... there's no way to define a single FK field in a table that points to more than one foreign key (without a M2M, that is), so putting the ManyToOne relationship on the Groups object doesn't map to the underlying data store. If you were writing raw SQL, you'd model this relationship with a foreign key from the user table to the group table in any event, if it helps to think of it that way. The syntax and logic of using a <code>ManyToOne</code> property that is defined on a Group instance, if such a concept existed, would be much less straightforward than the ForeignKey defined on User.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EUROPEAN DATE INPUT IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Based on this idea I made new db.fields class EuDateField:</p><br/><br/><p>mydbfields.py</p><br/><br/><pre><code>from django import forms<br/>from django.forms.fields import DEFAULT_DATE_INPUT_FORMATS<br/>from django.db import models<br/><br/>class EuDateFormField(forms.DateField):<br/>    def __init__(self, *args, **kwargs):<br/>        kwargs.update({'input_formats': ("%d.%m.%Y",)+DEFAULT_DATE_INPUT_FORMATS})<br/>        super(EuDateFormField, self).__init__(*args, **kwargs)<br/><br/>class EuDateField(models.DateField):<br/>    def formfield(self, **kwargs):<br/>        kwargs.update({'form_class': EuDateFormField})<br/>        return super(EuDateField, self).formfield(**kwargs)<br/></code></pre><br/><br/><p>Note that it adds my format (e.g. 31.12.2007) to existing "standard" django formats at first place.</p><br/><br/><p>Usage: </p><br/><br/><pre><code>from mydbfields import EuDateField<br/>class Person(models.Model):<br/>    ...<br/>    birthday   = EuDateField("Birthday", null=True, blank=True, help_text="")<br/></code></pre><br/><br/><p>In my case this renders good in admin, but most probably will in ModelForm too (haven't tried it).</p><br/><br/><p>My django version is: </p><br/><br/><pre><code>&gt;&gt;&gt; import django<br/>&gt;&gt;&gt; django.get_version()<br/>u'1.1 alpha 1 SVN-10105'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL MAP BASE ON GEOCOD IP
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://www.ipinfodb.com/" rel="nofollow">http://www.ipinfodb.com/</a>. You can get a latitude and longitude value by passing their services an IP address. I did something recently where I created a simple service that grabbed the current IP address and then passed it to the service ("api/location/city" is just a service that curls the ipinfodb service). Using jquery:</p><br/><br/><pre><code>$.get("api/location/city", null, function(data, textStatus)<br/>{        <br/>    if (data != null)<br/>    {<br/>        if (data.Status == "OK")<br/>        {<br/>            var lat = parseFloat(data.Latitude);<br/>            var lng = parseFloat(data.Longitude);<br/><br/>            $.setCenter(lat, lng, $.settings.defaultCityZoom);<br/><br/>            manager = new MarkerManager(map, {trackMarkers : true });<br/><br/>            var e = $.createUserMarker(map.getCenter());<br/>            e.bindInfoWindowHtml($("#marker-content-event").html());<br/><br/>            var m = [];<br/>            m.push(e);<br/><br/>            // map.addOverlay(e);<br/>            manager.addMarkers(m, 10);<br/>            manager.refresh();<br/>        }<br/>        else<br/>        {<br/>            $.setCenter($.settings.defaultLat, $.settings.defaultLng, $.settings.defaultZoom);<br/>        }<br/>    }<br/>}, "json");<br/></code></pre><br/><br/><p>The key here is this line:</p><br/><br/><pre><code>$.setCenter(lat, lng, $.settings.defaultCityZoom);<br/></code></pre><br/><br/><p>Just setting the center to the lat/lng of the result of the service call.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SLUG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>A slug should have at least one letter or number. The regex you're looking for is just:</p><br/><br/><pre><code>[a-zA-Z0-9]+<br/></code></pre><br/><br/><p>or</p><br/><br/><pre><code>[\w\d]+<br/></code></pre><br/><br/><p>But you should also check to see if there are other slugs (already stored) with the same name.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BENEFIT OF INSTAL DJANGO FROM .DEB VERSU .TAR.GZ
    </pattern>
    <template>
<![CDATA[<p>Using <code>apt-get</code> lets your system keep track of the install (e.g. if you want to disinstall, upgrade, or the like, late). Installing from source (<code>.tar.gz</code> or otherwise) puts you in charge of what's what and where -- you can have multiple versions installed at various locations, etc, but there's no easy "uninstall" and the like. Personally I prefer to install by my OS's supported method (<code>apt-get</code> and the like) for packages I think as secondary or auxiliary, directly from svn/hg/&amp;c for ones I'm contributing to or otherwise want to keep the closest control on, and <code>.tar.gz</code> (or better when available <code>.tar.bz2</code>;-) "snapshots" and "source releases" that are s/where in the middle...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIK ABSTRACT DATABAS API FOR NON DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>What you're looking for is an <a href="http://en.wikipedia.org/wiki/Object-relational%5Fmapping" rel="nofollow">object-relational mapper</a> (ORM). Django has its own, built-in.</p><br/><br/><p>To use Django's ORM by itself:</p><br/><br/><ul><br/><li><a href="http://jystewart.net/process/2008/02/using-the-django-orm-as-a-standalone-component/" rel="nofollow">Using the Django ORM as a standalone component</a></li><br/><li><a href="http://pascal.nextrem.ch/2008/08/17/use-django-orm-as-standalone/" rel="nofollow">Use Django ORM as standalone</a></li><br/><li><a href="http://docs.djangoproject.com/en/dev/topics/settings/#using-settings-without-setting-django-settings-module" rel="nofollow">Using settings without setting DJANGO_SETTINGS_MODULE</a></li><br/></ul><br/><br/><p>If you want to use something else:</p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/53428/what-are-some-good-python-orm-solutions">What are some good Python ORM solutions?</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERY.AJAX RESPONS EMPTI WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Unless I am mistaken, <code>responseText</code> isn't an attribute on whatever <code>$.ajax()</code> returns. I think you have to do something like this:</p><br/><br/><pre><code>$.ajax({<br/>  url: "/test",<br/>  dataType: "json",<br/>  success: function(data) {<br/>    // use data<br/>  }<br/>});<br/></code></pre><br/><br/><p>Because of the <code>dataType</code> parameter, the data yielded to the success callback is a normal JS object. If you don't specify the <code>dataType</code>, you'll get the string with the raw content the server returns.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL APPROPRI FOR A READ HEAVI DATABAS WITH 3.5M + ROW IF SO WHICH ENGIN
    </pattern>
    <template>
<![CDATA[<p>I've run DB's far bigger than this on mysql- you should be fine. Just tune your indexes carefully.</p><br/><br/><p>InnoDB supports better locking semantics, so if there will be occasional or frequent writes (or if you want better data integrity), I'd suggest starting there, and then benchmarking myisam later if you can't hit your performance targets.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERRID THE METHOD USE TO CALL DJANGO S ADMIN DELET CONFIRM PAGE
    </pattern>
    <template>
<![CDATA[<p>You can override <code>ModelAdmin.delete_view()</code> method, like:</p><br/><br/><pre><code>class MyModelAdmin(ModelAdmin):<br/>    def delete_view(self, request, object_id, extra_context=None):<br/>        # if request.POST is set, the user already confirmed deletion<br/>        if not request.POST:<br/>            perform_my_action()<br/>        super(MyModelAdmin, self).delete_view(request, object_id, extra_context)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REMOV DJANGO DATABASE OPT S INIT COMMAND SET ENGIN INNODB AFTER TABL CREATION
    </pattern>
    <template>
<![CDATA[<p>Typically permissions and settings are tree based. Your settings for the session will be a pointer to the default settings one level above yours. You session settings are going to be already created and just referencing the default settings when you first connect. </p><br/><br/><p>When you modify a setting, such as by setting the storage_engine value, you are either creating a new copy of all of the settings and changing one value (as in Apache) or adding another layer to the tree that it has to check in when resolving values. I am not actually sure which one MySQL uses, but either way, if you do not need this setting, you should not set it on every round trip. </p><br/><br/><p>If you do need it relatively frequently, it might be worth the performance hit. A similar issue occurs in PHP. You do not want to modify variables like the PHP include path in your PHP code, that used to add a ton of overhead.</p><br/><br/><p>Jacob</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL ARE NOT AJAX SERIALIZ
    </pattern>
    <template>
<![CDATA[<p>You just need to add, in your <code>.dumps</code> call, a <code>default=encode_myway</code> argument to let <code>simplejson</code> know what to do when you pass it data whose types it does not know -- the answer to your "why" question is of course that you haven't <em>told</em> poor <code>simplejson</code> what to DO with one of your models' instances.</p><br/><br/><p>And of course you need to write <code>encode_myway</code> to provide JSON-encodable data, e.g.:</p><br/><br/><pre><code>def encode_myway(obj):<br/>  if isinstance(obj, User):<br/>    return [obj.username,<br/>            obj.firstname,<br/>            obj.lastname,<br/>            obj.email]<br/>    # and/or whatever else<br/>  elif isinstance(obj, OtherModel):<br/>    return [] # whatever<br/>  elif ...<br/>  else:<br/>    raise TypeError(repr(obj) + " is not JSON serializable")<br/></code></pre><br/><br/><p>Basically, JSON knows about VERY elementary data types (strings, ints and floats, grouped into dicts and lists) -- it's YOUR responsibility as an application programmer to match everything else into/from such elementary data types, and in <code>simplejson</code> that's typically done through a function passed to <code>default=</code> at <code>dump</code> or <code>dumps</code> time.</p><br/><br/><p>Alternatively, you can use the <code>json</code> serializer that's part of Django, see <a href="http://docs.djangoproject.com/en/1.0/topics/serialization/" rel="nofollow">the docs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW CAN YOU STOP LONG QUERI FROM KILL YOUR DATABAS
    </pattern>
    <template>
<![CDATA[<p>Unfortunately MySQL doesn't allow you an easy way to avoid this.  A common method is basically to write a script that checks all running processes every X seconds (based on what you think is "long") and kill ones it sees are running too long.  You can at least get some basic diagnostics, however, by setting <code>log_slow_queries</code> in MySQL which will write all queries that take longer than 10 seconds into a log.  If that's too long for what you regard as "slow" for your purposes, you can set <code>long_query_time</code> to a value other than 10 to change the threshold. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRENCH LETTER IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You are probably storing the template in a non-unicode encoding, such as latin-1.  I believe Django assumes that templates are in UTF-8 by default (though there is a setting to override this).</p><br/><br/><p>Your editor should be capable of saving the template file in the UTF-8 encoding (probably via a dropdown on the save as page, though this may depend on your editor).  Re-save the file as UTF-8, and the error should go away.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DELET IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>You need to implement this manually, by looking up affected records and deleting them at the same time as you delete the parent record. You can simplify this, if you wish, by overriding the .delete() method on your parent class to automatically delete all related records.</p><br/><br/><p>For performance reasons, you almost certainly want to use key-only queries (allowing you to get the keys of entities to be deleted without having to fetch and decode the actual entities), and batch deletes. For example:</p><br/><br/><pre><code>db.delete(Bottom.all(keys_only=True).filter("daddy =", top).fetch(1000))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOMMEND THE NEXT ACHIEV
    </pattern>
    <template>
<![CDATA[<p>One method you can recommend which achievements to go for is to see how many of your users already have those achievements and recommend those popular ones. When they have achieved those you go down the list and recommend slightly less popular ones. However, this has a naive assumption that everyone wants to go for popular achievements. It might cause popular achievements to be even more popular and less popular ones, well... A consolation is that this doesn't take up much resources and is likely to run very fast. (Just keep a list of achievements + number of times it's achieved)</p><br/><br/><p>Another method (which attempts to guess which achievements the user is likely to go after based on what achievements he already had) is to use some machine learning algorithms. I think the <a href="http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm" rel="nofollow">k-nearest neighbor algorithm</a> will perform quite well here. Select a threshold and just output everything that is above this threshold. Now, I don't know if this will run faster than what you already have, but you should just run the recommendation engine once every time the user has made a new achievement, store the top (let's say) five, and just output it back to the user whenever a recommendation is needed.</p><br/><br/><p>I hope this helps. =)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM STORE UNICOD CHARACT TO MYSQL WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Thank you to everyone who was posting here. It really helps my unicode knowledge (and hoepfully other people learned something).</p><br/><br/><p>We seemed to be all barking up the wrong tree since I tried to simplify my problem and didn't give ALL information. It seems that I wasn't using "REAL" unicode strings, but rather BeautifulSoup.NavigableString which repr themselves as unicode strings. So all the printouts looked like unicode, but they weren't.</p><br/><br/><p>Somewhere deep in the MySQLDB library they couldn't deal with these strings. </p><br/><br/><p>This worked :</p><br/><br/><pre><code>&gt;&gt;&gt; Achievement.objects.get(name = u"Mirror's Edge\u2122")<br/>&lt;Achievement: Mirror's Edge™&gt;<br/></code></pre><br/><br/><p>On the other hand :</p><br/><br/><pre><code>&gt;&gt;&gt; b = BeautifulSoup(u"&lt;span&gt;Mirror's Edge\u2122&lt;/span&gt;").span.string<br/>&gt;&gt;&gt; Achievement.objects.get(name = b)<br/>... Exceptoins ...<br/>UnicodeEncodeError: 'ascii' codec can't encode character u'\u2122' in position 13: ordinal not in range(128)<br/></code></pre><br/><br/><p>But this works :</p><br/><br/><pre><code>&gt;&gt;&gt; Achievement.objects.get(name = unicode(b))<br/>&lt;Achievement: Mirror's Edge™&gt;<br/></code></pre><br/><br/><p>So, thanks again for all the unicode help, I'm sure it will come in handy. But for now ...</p><br/><br/><p><strong>WARNING</strong> : BeautifulSoup doesn't return <strong>REAL</strong> unicode strings and should be coerced with unicode() before doing anything meaningful with them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPORT OPTION
    </pattern>
    <template>
<![CDATA[<p>This looks promising, although I haven't tried it yet:</p><br/><br/><p><a href="http://code.google.com/p/django-reporting/" rel="nofollow">http://code.google.com/p/django-reporting/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL SYNC TABL
    </pattern>
    <template>
<![CDATA[<p>Alas, Django does not support any easy solution to this.  </p><br/><br/><p>The only thing django will do for you, is restart your database with new tables that match your new models:</p><br/><br/><pre><code>$ #DON'T DO THIS UNLESS YOU CAN AFFORD TO LOSE ALL YOUR DATA!<br/>$ python PROJECT_DIR/manage.py syncdb<br/></code></pre><br/><br/><p>the next option is to use the various sql* options to manage.py to see what django would do to match the current models to the database, then issue your own <code>ALTER TABLE</code> commands to make everything work right.  Of course this is error prone and difficult.</p><br/><br/><p>The real solution is to use a database migration tool, such as <a href="http://south.aeracode.org/" rel="nofollow">south</a> to generate migration code.</p><br/><br/><p>Here is a <a href="http://stackoverflow.com/questions/426378/what-is-your-favorite-solution-for-managing-database-migrations-in-django">similar question</a> with discussion about various database migration options for django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITI
    </pattern>
    <template>
<![CDATA[<p>settings.py is the right place for that.  Settings.py is, like any other module, loaded once.  There is still the problem of the fact that a module must be imported once for each process, so a respawning style of web server (like apache) will reload it once for each instance in question.  For mod_python this will be once per process.  for mod_wsgi, this is likely to be just one time, unless you have to restart.</p><br/><br/><p>tl;dr modules are imported once, even if multiple import statements are used.  put it in settings.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCK A CRITIC SECTION IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You need a distributed lock manager at the point where your app suddenly needs to run on more than one service.  I wrote <a href="http://github.com/dustin/elock" rel="nofollow">elock</a> for this purpose.  There are <a href="http://hadoop.apache.org/zookeeper/" rel="nofollow">bigger ones</a> and others have chosen to ignore every suggestion and done the same with memcached.</p><br/><br/><p>Please don't use memcached for anything more than light advisory locking.  It is designed to forget stuff.</p><br/><br/><p>I like to pretend like filesystems don't exist when I'm making web apps.  Makes scale better.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHEETAH TEMPLAT SYSTEM WITH WINDOW AND PYTHON 2.6.1 ( NAMEMAPP PROBLEM )
    </pattern>
    <template>
<![CDATA[<p>I have compiled the PYD file for Python 2.6 as well as Windows installers that have it bundled in, so that users don't have to figure out where to drop the PYD on Windows.</p><br/><br/><p>Installers: <a href="http://feisley.com/python/cheetah/" rel="nofollow">http://feisley.com/python/cheetah/</a> (pyd files are in the /pyd folder)</p><br/><br/><p>Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO USE INCONSIST FILE IMPORT PATH IN PYTHON ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>For import to find a module, it needs to either be in sys.path.  Usually, this includes "", so it searches the current directory.  If you load "application" from project, it'll find it, since it's in the current directory.</p><br/><br/><p>Okay, that's the obvious stuff.  A confusing bit is that Python remembers which modules are loaded.  If you load application, then you load application2 which imports application, the module "application" is already loaded.  It doesn't need to find it on disk; it just uses the one that's already loaded.  On the other hand, if you didn't happen to load application yet, it'll search for it--and not find it, since it's not in the same directory as what's loading it ("."), or anywhere else in the path.</p><br/><br/><p>That can lead to the weird case where importing sometimes works and sometimes doesn't; it only works if it's already loaded.</p><br/><br/><p>If you want to be able to load these modules as just "application", then you need to arrange for project/ to be appended to sys.path.</p><br/><br/><p>(Relative imports sound related, but it seems like application and application2 are separate packages--relative imports are used for importing within the same package.)</p><br/><br/><p>Finally, be sure to consistently treat the whole thing as a package, or to consistently treat each application as their own package.  Do not mix and match.  If package/ is in the path (eg. sys.path includes package/..), then you can indeed do "from package.application import foo", but if you then also do "from application import foo", it's possible for Python to not realize these are the same thing--their names are different, and they're in different paths--and end up loading two distinct copies of it, which you definitely don't want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO DUPLIC DATA IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It looks like your layout is solid. You have a <code>base.html</code> template that defines the basic structure and outer layout for each page in your app. You also have <code>base_object.html</code> that extends this template.</p><br/><br/><p>You'd like each page to have a unique title and a matching h1 (I think). This best way to do this is to define two separate blocks in your base.html template.</p><br/><br/><pre><code>&lt;html&gt;<br/>    &lt;head&gt;<br/>        &lt;title&gt;{% block title %}Default Title{% endblock %}&lt;/title&gt;<br/>    &lt;/head&gt;<br/><br/>    &lt;body&gt;<br/>        &lt;h1&gt;{% block h1 %}{% endblock %}&lt;/h1&gt;<br/>    &lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/><br/><p>In your child templates, you need to override both of these if you'd like them to be identical. I know you feel this is counter-intuitive, but it is necessary due to the way template inheritance is handled in Django.</p><br/><br/><p>Source: <a href="http://docs.djangoproject.com/en/dev/topics/templates/#id1" rel="nofollow">The Django template language</a></p><br/><br/><blockquote><br/>  <p>Finally, note that you can't define multiple <code>{% block %}</code> tags with the same name in the same template. This limitation exists because a block tag works in "both" directions. That is, a block tag doesn't just provide a hole to fill -- it also defines the content that fills the hole in the parent. If there were two similarly-named <code>{% block %}</code> tags in a template, that template's parent wouldn't know which one of the blocks' content to use.</p><br/></blockquote><br/><br/><p>The children look like this:</p><br/><br/><pre><code>{% extends "base.html" %}<br/>{% block title %}Title{% endblock %}<br/>{% block h1 %}Title{% endblock %}<br/></code></pre><br/><br/><p>If this bothers you, you should set the title from the view for each object as a template variable.</p><br/><br/><pre><code>{% block title %}{{ title }}{% endblock %}<br/>{% block h1 %}{{ title }}{% endblock %}<br/></code></pre><br/><br/><p>Django strives to keep as much logic out of the template layer as possible. Often a title is determined dynamically from the database, so the view layer is the perfect place to retrieve and set this information. You can still leave the title blank if you'd like to defer to the default title (perhaps set in <code>base.html</code>, or you can grab the name of the site from the <code>django.contrib.sites</code> package)</p><br/><br/><p>Also <code>{{ block.super }}</code> may come in handy. This will allow you to combine the contents of the parent block with additional contents from the child. So you could define a title like "Stackoverflow.com" in the base, and set</p><br/><br/><pre><code>{% block title %}{{ block.super }} - Ask a Question{% endblock %}<br/></code></pre><br/><br/><p>in the child to get a title like "Stackoverflow.com - Ask a Question"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( ) REALLI SLOW WITH LARG DATASET AFTER DO SOME PYTHON PROFIL
    </pattern>
    <template>
<![CDATA[<p>There is a lot of things to assume about your problem as you don't have any type of code sample.</p><br/><br/><p>Here are my assumptions: You are using Django's built-in ORM tools and models (i.e. sales-data = modelobj.objects().all() ) and on the PHP side you are dealing with direct SQL queries and working with a query_set.</p><br/><br/><p>Django is doing a lot of type converting and casting to datatypes going from a database query into the ORM/Model object and the associated manager (objects() by default).</p><br/><br/><p>In PHP you are controlling the conversions and know exactly how to cast from one data type to another, you are saving some execution time based on that issue alone.</p><br/><br/><p>I would recommend trying to move some of that fancy number work into the database, especially if you are doing record-set based processing - databases eat that kind of processing from breakfast.  In Django you can send RAW SQL over to the database: <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql</a></p><br/><br/><p>I hope this at least can get you pointed in the right direction...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CACHE.SET ( ) CAUS DUPLIC KEY ERROR
    </pattern>
    <template>
<![CDATA[<p>That's a typical race.  It checks if the key you inserted exists; if it doesn't, it does an insert, but someone else can insert the key between the count and the insert.  Transactions don't prevent this.</p><br/><br/><p>The code appears to expect this and to try to deal with it, but when I looked at the code to handle this case I could see immediately that it was broken.  Reported here: <a href="http://code.djangoproject.com/ticket/11569" rel="nofollow">http://code.djangoproject.com/ticket/11569</a></p><br/><br/><p>I'd strongly recommend sticking to the memcache backend.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANI TO ONE RELATIONSHIP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It seams that you have your models setup <em>backwards</em>. If you want province to have many offices, then province should be a foreign key in the Office model.</p><br/><br/><pre><code>from django.db import models<br/><br/>class Province(models.Model):<br/>    numberPlate = models.IntegerField(primary_key=True)<br/>    name = models.CharField(max_length=20)<br/><br/>class Office(models.Model):<br/>    name = models.CharField(max_length=30)<br/>    province = models.ForeignKey(Province)<br/></code></pre><br/><br/><p>This would be straightforward and very intuitive way to implement one-to-many relationsship</p><br/><br/><p>As for the error that you are getting "no such column: haritaapp_province.office_id", when you add a new attribute (in your case office) to the model, you should either manually add column to the table. Or drop the table and re-run the syncdb:</p><br/><br/><pre><code> python manage.py syncdb<br/></code></pre><br/><br/><p>Django will <b>not</b> automatically add new columns to the table when you add new fields to the model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND INDEX INTO A LIST IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>As others have indicated, both of your problems are best solved outside the template -- either in the models, or in the view. One strategy would be to add helper methods to the relevant classes.</p><br/><br/><p>Getting a sorted list of a physician's patients:</p><br/><br/><pre><code>class Physician(Model):<br/>   ...<br/>   def sorted_patients(self):<br/>      return self.patients.order_by('bed__room__unit',<br/>                                    'bed__room__order',<br/>                                    'bed__order')<br/></code></pre><br/><br/><p>And in the template, use <code>physician.sorted_patients</code> rather than <code>physician.patients</code>.</p><br/><br/><p>For the "display the notes of this note_type", it sounds like you might want a <code>notes</code> method for the note_type class. From your description I'm not sure if this is a model class or not, but the principle is the same:</p><br/><br/><pre><code>class NoteType:<br/>   ...<br/>   def notes(self):<br/>      return &lt;calculate note set&gt;<br/></code></pre><br/><br/><p>And then the template:</p><br/><br/><pre><code>{% for note_type in note_types %}<br/>   &lt;div&gt;&lt;h3&gt;{{ note_type }}&lt;/h3&gt;&lt;/div&gt;<br/>   {% for note in note_type.notes %}<br/>      &lt;p&gt;{{ note }}&lt;/p&gt;<br/>   {% endfor %}<br/>   &lt;/div&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CTION TRIGGER BY FIELD CHANG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Basically, you need to override the <code>save</code> method, check if the <code>state</code> field was changed, set <code>started</code> if needed and then let the model base class finish persisting to the database.</p><br/><br/><p>The tricky part is figuring out if the field was changed.  Check out the mixins and other solutions in this question to help you out with this:</p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/110803/dirty-fields-in-django">http://stackoverflow.com/questions/110803/dirty-fields-in-django</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST DATA IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>As ars and Diarmuid have pointed out, you can pass <code>request.user</code> into your form, and use it in valiidating the email. Diarmuid's code, however, is wrong. The code should actually read:</p><br/><br/><pre><code>from django import forms<br/><br/>class UserForm(forms.Form):<br/>    email_address = forms.EmailField(widget = forms.TextInput(attrs = {'class':'required'}))<br/><br/>    def __init__(self, user=None, *args, **kwargs):<br/>        super(UserForm, self).__init__(*args, **kwargs)<br/>        self._user = user<br/><br/>    def clean_email_address(self):<br/>        email = self.cleaned_data.get('email_address')<br/>        if self._user and self._user.email == email:<br/>            return email<br/>        if UserProfile.objects.filter(email=email).count():<br/>            raise forms.ValidationError(u'That email address already exists.')<br/>        return email<br/></code></pre><br/><br/><p>Then, in your view, you can use it like so:</p><br/><br/><pre><code>def someview(request):<br/>    if request.method == 'POST':<br/>        form = UserForm(user=request.user, data=request.POST)<br/>        if form.is_valid():<br/>            # Do something with the data<br/>            pass<br/>    else:<br/>        form = UserForm(user=request.user)<br/>    # Rest of your view follows<br/></code></pre><br/><br/><p>Note that you should pass request.POST as a keyword argument, since your constructor expects 'user' as the first positional argument.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE CHARACT IN USERNAM IN THE DJANGO ADMIN INTERFAC
    </pattern>
    <template>
<![CDATA[<p>This should be as simple as overriding the behavior of the User ModelAdmin class. In one of your apps, in <code>admin.py</code> include the following code.</p><br/><br/><pre><code>from django.contrib import admin<br/>from django import forms<br/>from django.contrib.auth.models import User<br/>from django.contrib.auth.admin import UserAdmin<br/>from django.contrib.auth.forms import UserCreationForm, UserChangeForm<br/><br/>class MyUserCreationForm(UserCreationForm):<br/>    username = forms.RegexField(<br/>        label='Username', <br/>        max_length=30, <br/>        regex=r'^[\w-]+$',<br/>        help_text = 'Required. 30 characters or fewer. Alphanumeric characters only (letters, digits, hyphens and underscores).',<br/>        error_message = 'This value must contain only letters, numbers, hyphens and underscores.')<br/><br/>class MyUserChangeForm(UserChangeForm):<br/>    username = forms.RegexField(<br/>        label='Username', <br/>        max_length=30, <br/>        regex=r'^[\w-]+$',<br/>        help_text = 'Required. 30 characters or fewer. Alphanumeric characters only (letters, digits, hyphens and underscores).',<br/>        error_message = 'This value must contain only letters, numbers, hyphens and underscores.')<br/><br/>class MyUserAdmin(UserAdmin):<br/>    form = MyUserChangeForm<br/>    add_form = MyUserCreationForm<br/><br/>admin.site.unregister(User)<br/>admin.site.register(User, MyUserAdmin)<br/></code></pre><br/><br/><p>Here's a little explanation. </p><br/><br/><p>The first class definition (MyUserCreationForm) is a subclass (yes your terminology is correct) of the UserCreationForm. This is the form that appears when you click "Add User" in the Django Admin site. All we are doing here is redefining the <code>username</code> field to use our improved, hyphen-accepting regex, and changing the <code>helptext</code> to reflect this.</p><br/><br/><p>The second class definition does the same, except for the UserChangeForm.</p><br/><br/><p>The final class definition is a subclass of UserAdmin, which is the ModelAdmin that the User model uses by default. Here we state that we want to use our new custom forms in the ModelAdmin.</p><br/><br/><p>Note that for each of these subclasses, we only change what we have to. The rest of the class will be inherited from its parent (UserCreationForm, UserChangeForm and UserAdmin respectively).</p><br/><br/><p>Finally, we perform the important step of registering the User model with the admin site. To do that we unregister the default UserAdmin, and then register with our improved MyUserAdmin class.</p><br/><br/><p>You'll find that the Django admin site is very easy to customize using these techniques, especially considering the admin site is just a regular Django app.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPEAT A FORM FIELD N TIME IN ONE FORM
    </pattern>
    <template>
<![CDATA[<p>You can create the repeated fields in the <code>__init__</code> method of your form:</p><br/><br/><pre><code>class PaymentsForm(forms.Form):<br/>    invoice = forms.CharField(widget=forms.HiddenInput())<br/>    total = forms.CharField(widget=forms.HiddenInput())<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(PaymentsForm, self).__init__(*args, **kwargs)<br/>        for i in xrange(10):<br/>            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())<br/></code></pre><br/><br/><p>More about dynamic forms can be found e.g. <a href="http://www.b-list.org/weblog/2008/nov/09/dynamic-forms/" rel="nofollow">here</a></p><br/><br/><p>edit: to answer the question in your comment: just give the number of repetitions as an argument to the <code>__init__</code> method, something like this:</p><br/><br/><pre><code>    def __init__(self, repetitions, *args, **kwargs):<br/>        super(PaymentsForm, self).__init__(*args, **kwargs)<br/>        for i in xrange(repetitions):<br/>            self.fields['item_name_%d' % i] = forms.CharField(widget=forms.HiddenInput())<br/></code></pre><br/><br/><p>and then in your view (or wherever you create the form):</p><br/><br/><pre><code>payments_form = PaymentsForm(10)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PK FIELD FROM DJANGO SERIAL OBJECT
    </pattern>
    <template>
<![CDATA[<p>I ended up working around this by 'manually' achieving what I wanted using the underlying <code>simplejson</code> serializer:</p><br/><br/><pre><code>from django.utils import simplejson<br/>json = simplejson.dumps( [{'name': o.name,<br/>                           'country': o.country} for o in objects] )<br/></code></pre><br/><br/><p>A little more typing, but works.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGI FROM HANG APACH
    </pattern>
    <template>
<![CDATA[<p>It is not 'deadlock-timeout' you want as specified by another, that is for a very special purpose which will not help in this case.</p><br/><br/><p>As far as trying to use mod_wsgi features, you instead want the 'inactivity-timeout' option for WSGIDaemonProcess directive.</p><br/><br/><p>Even then, this is not a complete solution. This is because the 'inactivity-timeout' option is specifically to detect whether all request processing by a daemon process has ceased, it is not a per request timeout. It only equates to a per request timeout if daemon processes are single threaded. As well as help to unstick a process, the option will also have side effect of restarting daemon process if no requests arrive at all in that time.</p><br/><br/><p>In short, there is no way at mod_wsgi level to have per request timeouts, this is because there is no real way of interrupting a request, or thread, in Python.</p><br/><br/><p>What you really need to implement is a timeout on the HTTP request in your application code. Am not sure where it is up to and whether available already, but do a Google search for 'urllib2 socket timeout'.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PINAX ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>I have pinax 0.7rc1 installed and working on windows 7, with no problems.</p><br/><br/><p>Check out this video for a great example on how to do this. He uses pinax 0.7beta3 on windows XP.</p><br/><br/><p><a href="http://www.vimeo.com/6098872" rel="nofollow">http://www.vimeo.com/6098872</a></p><br/><br/><p>Here are the steps I followed.</p><br/><br/><ol><br/><li>download and install python</li><br/><li>download and install python image library</li><br/><li>download pinax at <a href="http://pinaxproject.com" rel="nofollow">http://pinaxproject.com</a></li><br/><li>extract the download to some working directory <code>&lt;pinax-directory&gt;</code> (maybe c:\pinax ?)</li><br/><li>make sure you have python in your path (c:\pythonXX)</li><br/><li>make sure you have the python scripts folder in your path (c:\pythonXX\scripts)</li><br/><li>open a command prompt</li><br/><li><code>cd</code> to <code>&lt;pinax-directory&gt;\scripts</code> folder</li><br/><li>run <code>python pinax-boot.py &lt;pinax-env&gt;</code> (I used "../pinax-env")</li><br/><li>wait for pinax-boot process to finish</li><br/></ol><br/><br/><p>-- technically pinax is installed and ready to use, but the next steps will get you up and running with pinax social app (any other app will also work fine)</p><br/><br/><ol><br/><li>cd to your <code>&lt;pinax-env&gt;\scripts</code> directory</li><br/><li>execute the <code>activate.bat</code> script</li><br/><li>execute <code>python clone_project social &lt;pinax-env&gt;\social</code></li><br/><li>cd to <code>&lt;pinax-env&gt;\social</code></li><br/><li>execute <code>python manage.py syncdb</code></li><br/><li><p>execute <code>python manage.py runserver</code></p></li><br/><li><p>open your browser to the server and you should see your new pinax site</p></li><br/></ol><br/><br/><p>Voila!! Pinax on Windows.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL IMAGE.RES ( ) NOT RESIZ THE PICTUR
    </pattern>
    <template>
<![CDATA[<p><code>resize()</code> returns a resized copy of an image. It doesn't modify the original. The correct way to use it is:</p><br/><br/><pre><code>img = img.resize((150, newheight), image.ANTIALIAS)<br/></code></pre><br/><br/><p><a href="http://www.pythonware.com/library/pil/handbook/image.htm" rel="nofollow">source</a></p><br/><br/><p>I think what you are looking for is the ImageOps.fit function. From PIL <a href="http://www.pythonware.com/library/pil/handbook/imageops.htm" rel="nofollow">docs</a>:</p><br/><br/><blockquote><br/>  <p>ImageOps.fit(image, size, method, bleed, centering) => image</p><br/>  <br/>  <p>Returns a sized and cropped version of<br/>  the image, cropped to the requested<br/>  aspect ratio and size. The size<br/>  argument is the requested output size<br/>  in pixels, given as a (width, height)<br/>  tuple.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET LAST OBJECT CREAT SIMULTAN FILTER
    </pattern>
    <template>
<![CDATA[<p>You can use the count() method on a query set the get the number of items.</p><br/><br/><pre><code>list = List.objects.all()<br/>list.count()<br/></code></pre><br/><br/><p>Arguments to filter are "AND"ed together. If you need to do OR filters look at Q objects.<br/><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET TECHNIC INFORM ON HOW THE INTERN OF DJANGO WORK
    </pattern>
    <template>
<![CDATA[<p>Easiest way to understand the internals of django, is by reading a book specifically written for that.</p><br/><br/><p>Read <a href="http://rads.stackoverflow.com/amzn/click/1430210478" rel="nofollow">Pro Django</a>. It provides you a good in depth understanding of the meta programming first and demonstrates how it is used in django models, to create them dynamically.</p><br/><br/><p>It deals similarly with many other python concepts and how django uses it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER RELAT AND ORM QUERI
    </pattern>
    <template>
<![CDATA[<p>Thanks to generic relations, you should be able to query this structure using traditional query-set semantics for reverse relations:</p><br/><br/><pre><code>Article.objects.filter(images__isnull=False)<br/></code></pre><br/><br/><p>This will produce duplicates for any <code>Article</code>s that are related to multiple <code>Image</code>s, but you can eliminate that with the <code>distinct()</code> QuerySet method:</p><br/><br/><pre><code>Article.objects.distinct().filter(images__isnull=False)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>No clean way but using extra() with your custom SQL:</p><br/><br/><pre><code>popular_links = Link.objects.select_related().annotate(karma_total = Sum('vote__karma_delta'))<br/>popular_links = popular_links.extra(<br/>    select = {'popularity': '(karma_total - 1) / POW((TIMESTAMPDIFF(HOUR, links.created, NOW()) + 2), 1.5)',},<br/>    order_by = ['-popularity',]<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO CALL A SUBPROCESS WITH A SLOW START UP TIME
    </pattern>
    <template>
<![CDATA[<p>It may seem like i am punting this product as this is the second time i have responded with a recommendation of this.</p><br/><br/><p>But it seems like you need a Message Queing service, in particular a distributed message queue.</p><br/><br/><p>ere is how it will work:</p><br/><br/><ol><br/><li>Your Django App requests CMD</li><br/><li>CMD gets added to a queue</li><br/><li>CMD gets pushed to several works</li><br/><li>It is executed and results returned upstream</li><br/></ol><br/><br/><p>Most of this code exists, and you dont have to go about building your own system.</p><br/><br/><p>Have a look at Celery which was initially built with Django. </p><br/><br/><p><a href="http://www.celeryq.org/" rel="nofollow">http://www.celeryq.org/</a><br/><a href="http://robertpogorzelski.com/blog/2009/09/10/rabbitmq-celery-and-django/" rel="nofollow">http://robertpogorzelski.com/blog/2009/09/10/rabbitmq-celery-and-django/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TLASSIAN BAMBOO WITH DJANGO PYTHON POSSIBL
    </pattern>
    <template>
<![CDATA[<p>Bamboo essentially just runs a shell script, so this could just as easily be:</p><br/><br/><pre><code>./manage.py test<br/></code></pre><br/><br/><p>as it typically is:</p><br/><br/><pre><code>mvn clean install<br/></code></pre><br/><br/><p>or:</p><br/><br/><pre><code>ant compile<br/></code></pre><br/><br/><p>You may have to massage to output of the Django test runner into traditional JUnit XML output, so that Bamboo can give you pretty graphs on how many tests passed.  Look at <a href="http://redsolo.blogspot.com/2007/11/hudson-embraces-python.html" rel="nofollow">this post</a> about using xmlrunner.py to get Python working with <a href="http://hudson.dev.java.net/" rel="nofollow">Hudson</a>.  Also take a look at <a href="http://confluence.atlassian.com/display/BAMEXT/NoseXUnit+-+JUnit+like+XML+reporting+for+Python+PyUnit" rel="nofollow">NoseXUnit</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SLUGIFI URL HOW TO HANDL COLLIS
    </pattern>
    <template>
<![CDATA[<p>One thing I never liked about the unique slug fields/methods is that if you have a lot of clashes for a single title, you'll end up running several queries to try and determine an available slug. I know you mentioned you don't want to show the id for non-clashing slugs, but, as far as performance, I think it's the better route to take. To make the URL a little nicer looking, I prefer also to embed the id before the slug, so that a URL takes the form of www.example.com/reviews/1/the-best-thing-ever.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMQ USE DJANGO AUTH WITH STOMP
    </pattern>
    <template>
<![CDATA[<p>If you use the restq extensions for morbidq, you can have it send an http callback to your application every time the user attempts to connect. (See <a href="http://www.morbidq.com/trac/wiki/RestQ" rel="nofollow">http://www.morbidq.com/trac/wiki/RestQ</a> ). Your django app can then just return yes or no to the connect attempt (after it runs though some auth procedure.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLEMENT A WEB BAS DIRECT DEPOSIT ECHECK PAYMENT SYSTEM
    </pattern>
    <template>
<![CDATA[<p>I'm certain that you would not be able to do facilitated ACH/EFT transfers directly from one user's account to another user's account.  However, as long as there's a third party in between the two users, this should be possible.  But I'm assuming you'd want to do that anyways, so that you can get paid.  The trick is finding a provider that will do both withdrawals and deposits, since most providers only give you withdrawals.  I'd recommend at least talking to <a href="http://www.braintreepaymentsolutions.com/" rel="nofollow">BrainTree</a>; they're by far my favorite payment provider.  If they don't work out though, you might try <a href="http://www.allianceach.com/" rel="nofollow">Alliance</a>, however, I've never used them, so take that recommendation with a grain of salt.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PURPOS PROGRESSBAR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>See the code here <a href="http://www.djangosnippets.org/snippets/679/" rel="nofollow">http://www.djangosnippets.org/snippets/679/</a>, it says "upload progress for multipart forms" but there is nothing specfic to forms you can use it anywhere with few tweaks.</p><br/><br/><p>General concept is</p><br/><br/><ol><br/><li>Write a webservice/webpage which can return e.g. JSON info about progress</li><br/><li>On client side use javascript(ajax) to contact progress API time to time, and using that info update something client side e.g. a text msg, width of an image, color of some div etc</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PAGE WITHOUT A PAGE RELOAD
    </pattern>
    <template>
<![CDATA[<p>two approaches:</p><br/><br/><ol><br/><li><p>just update the database and wait until the next AJAX query.  that means it should do the query periodically, you'll have to balance between immediacy and server load.  it helps a little if you can do a cheap query to just verify if there has been an update.  maybe make that check rely only on memcached instead of going to the DB</p></li><br/><li><p>use <a href="http://en.wikipedia.org/wiki/Comet%5F%28programming%29" rel="nofollow">comet</a>.  In short: the client does an AJAX query asking for the update.  the server sees there's no update, so it doesn't answer.  instead, the connection is kept open for a long time.  eventually either the update comes and the server finally answers, or the client times out and kill the connection.  in that case, the client should immediately reissue the query to keep waiting for the update.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTIF FROM DJANGO NOTIF
    </pattern>
    <template>
<![CDATA[<p>The answer is you have to build it into your own templates. This can be as simple as the following snippet:</p><br/><br/><pre><code>&lt;table&gt;<br/>    &lt;caption&gt;{% trans "Notices" %}&lt;/caption&gt; <br/>    &lt;thead&gt;<br/>        &lt;tr&gt;<br/>            &lt;th&gt;{% trans "Type" %}&lt;/th&gt;<br/>            &lt;th&gt;{% trans "Message" %}&lt;/th&gt;<br/>            &lt;th&gt;{% trans "Date of the Notice" %}&lt;/th&gt;<br/>        &lt;/tr&gt;<br/>    &lt;/thead&gt;<br/>    &lt;tbody&gt;<br/>        {% for notice in notices %}<br/>            {% if notice.is_unseen %}<br/>                &lt;tr class="unseen_notice"&gt;<br/>            {% else %}<br/>                &lt;tr class="notice"&gt;<br/>            {% endif %}<br/>                &lt;td class="notice_type"&gt;[{% trans notice.notice_type.display %}]&lt;/td&gt;<br/>                &lt;td class="notice_message"&gt;{{ notice.message|safe }}&lt;/td&gt;<br/>                &lt;td class="notice_time"&gt;{{ notice.added|timesince }} {% trans "ago" %}&lt;/td&gt;<br/>            &lt;/tr&gt;<br/>        {% endfor %}<br/>    &lt;/tbody&gt;<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>As @googletorp <a href="http://stackoverflow.com/questions/1609775/how-do-i-display-notifications-from-django-notification/1609800#1609800">answered</a>, <a href="http://pinaxproject.com" rel="nofollow">Pinax</a> is the goto place for figuring out how the authors are using <code>django-notification</code>. In particular, there is a notification administration page that can serve as a handy guide.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SITE WIDE CACH WITH DJANGO PROBLEM WITH PASSWORD PROTECT PAGE ON LOGOUT
    </pattern>
    <template>
<![CDATA[<p>I ran into similar issues. The standard Django way is to disable cache for authenticated users. </p><br/><br/><pre><code>#settings.py<br/>CACHE_MIDDLEWARE_ANONYMOUS_ONLY=True<br/></code></pre><br/><br/><p>It works fine if different users see different pages (example: their user name on them) and you can't have one version for them.</p><br/><br/><p>But if there are only 2 versions of page: for authenticated users and for others then it is not good to completely disable cache for authenticated users. I wrote an <a href="http://bitbucket.org/kmike/django-view-cache-utils/" rel="nofollow">app</a> that, besides all, make it possible to fine-tune cache in this case.</p><br/><br/><p>Update.</p><br/><br/><p>BTW: you mentioned that when you click 'refresh' correct version of page is received. It means that problem is client-side cache (Expires header or E-tag), not the server cache. </p><br/><br/><p>To prevent client-side caching (you have to do that if you have several versions of page under the same URL) use <code>@cache_control(must_revalidate=True)</code> decorator.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR WHEN MOVE A DJANGO APP FROM DEV TO PROD
    </pattern>
    <template>
<![CDATA[<p>Problems I typically have include:</p><br/><br/><ol><br/><li>Misconfigured productions settings, whether in my production localsettings.py, wsgi/cgi, or apache site files in /etc/sites-available</li><br/><li>Database differences. I use <a href="http://south.aeracode.org/" rel="nofollow">South</a> for migrations and have run into some subtle issues when performing my migration on PostgreSQL when it worked smoothly in sqlite.</li><br/><li>Static file hosting since I cheat and use the Django server in development</li><br/><li>Permissions, both on the file system and within the database</li><br/><li>Rare, but possible, network issues preventing me from getting my dependencies, whether on PyPi or some 3rd party site</li><br/></ol><br/><br/><p>Ways that I have mitigated these issues:</p><br/><br/><ul><br/><li>Use the same database in production and development (in your case, MySQL everywhere)</li><br/><li>I've found it is useful to have a "test" environment which mimics production in every way possible (it can be on lower end hardware, or even the same machine).  This way, if there are any issues in this "production-like" enivornment, I can solve them without taking my production server offline.</li><br/><li>Script everything for repeatable deployments.  I use <a href="http://www.nongnu.org/fab/" rel="nofollow">fabric</a>, but zc.buildout or Paver would also work.  These tools help reduce typos while deploying and reduce the time to deploy my app.</li><br/><li>Use version control (mercurial, git, subversion) and a schema migration tool (like South), so if something does go wrong when you deploy to production, you have the possibility of backing out the changes and allowing production to run on the old code with the old database schema.</li><br/><li>I haven't set up an "<a href="http://blog.jazkarta.com/2009/09/01/avoiding-buildout-failure-when-pypi-is-down-with-collective-eggproxy/" rel="nofollow">egg proxy</a>" yet, but I am considering it, to avoid issues when downloading dependencies.</li><br/><li>I've found <a href="http://pypi.python.org/pypi/pip" rel="nofollow">pip's</a> freezing dependencies to be useful, in case a new, incompatible change to a library occurred since I downloaded it initially</li><br/><li>Use a web testing framework like Windmill or Selenium to test my application in my "test" environment, so that I can get a lot of test coverage of my system very quickly.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV VIA OS.SYSTEM ( )
    </pattern>
    <template>
<![CDATA[<p>Each <code>os.system</code> call creates a new process.  You'll need to ensure that the <code>activate</code> and the <code>easy_install</code> are run in the same <code>os.system</code> or <code>subprocess</code> call.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO OPENSOURC APPLIC WITH DEPEND
    </pattern>
    <template>
<![CDATA[<p>This is one of the big limitations with the Django "Reusable app".  On the "This Week in Django" podcast a week or two ago they were talking about this <strong>exact</strong> problem.  It seems the consensus, and I agree, is that there really isn't a solution.</p><br/><br/><p>If you look at Pynax, which is probably the largest distributed Django project, you'll see they are bundling the apps with the whole system.</p><br/><br/><p>Python itself has a few package distributions.  I know ActiveState is working on starting up another.  But even then not all of the django apps are packaged.  Many are only found in bitbucket, github, or google source.  And even then, to get a copy of all those requires one to have mercurial, git, and svn installed.  (blah @ that)</p><br/><br/><p>You basically have 2 options here:</p><br/><br/><ol><br/><li>Include a copy of every dependency with your source</li><br/><li>Include documentation for how the users install a given dependency</li><br/></ol><br/><br/><p>It's a sad list, I know.  <em>It sucks actually</em>, especially after using the ruby gem system, but at the moment I'm not sure what better you're going to find.</p><br/><br/><p>If it's of any interest, I wrote a short blog post about keeping dependencies in your project's folder (or in SVN) and then adding that path to Python's search path at the start of django.  ( <a href="http://urlencode.blogspot.com/2009/10/managing-django-dependencies-via-svn.html" rel="nofollow">Managing Django Dependencies via SVN</a> )  It screws up Komodo Edit's intellisense, but it does make things easier otherwise.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS POSSIBL TO RUN TWO DIFFER VERSION
    </pattern>
    <template>
<![CDATA[<p>When you have more than one site on a server, you should consider using something like <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a>.</p><br/><br/><p>Using that you can setup different virtual environments and place site specific packages and such in there, instead of messing up your site-packages folder. It also makes development a lot easier as you easily can setup these environments on your local with specific versions of whatever you use.</p><br/><br/><p>This quickly becomes very handy if you use other apps, and this is something that Pinax uses very heavily. The easiest way to handle packages and versions is simply to create a requirements file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM WIDGET WITH DID YOU MEAN HINT BASE ON VALID
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <ol><br/>  <li>I would prefer the "did you mean" list to be displayed without<br/>  having to reload the page.</li><br/>  </ol><br/></blockquote><br/><br/><p>Create custom widget, which renders with JS code for checking possible values as user enters it</p><br/><br/><blockquote><br/>  <ol><br/>  <li>If a user clicks on one of the suggestions I want to perform the<br/>  form's action without an additional<br/>  lookup - the value has already been<br/>  checked.</li><br/>  </ol><br/></blockquote><br/><br/><p>Again, that widget, when clicked, should just submit the form.</p><br/><br/><blockquote><br/>  <ol><br/>  <li>I want to keep all the logic outside the view and keep it in the<br/>  form or in the model. This is a must.</li><br/>  </ol><br/></blockquote><br/><br/><p>On the form you'll have clean() method to validate everything. If, say, some bogus data passes with submit from p. 2 - you still raise validation error.</p><br/><br/><blockquote><br/>  <ol><br/>  <li>I want to avoid hardcoded js in the template and push it into the form if<br/>  possible. It's not a must.</li><br/>  </ol><br/></blockquote><br/><br/><p>Solved with custom widget, <a href="http://docs.djangoproject.com/en/dev/topics/forms/media/#media-as-a-static-definition" rel="nofollow">details</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO NGINX FASTCGI AND GREEN UNICORN
    </pattern>
    <template>
<![CDATA[<p>I think one solution could be using a combination of PHP as apache module or throught FastCGI and use mod_proxy apache module to do some reverse proxy to access your administration app running with gunicorn</p><br/><br/><p>You can have a setup like :</p><br/><br/><ul><br/><li>Front HTTP Server apache on port 80 : www.host.com:80</li><br/><li>Backend HTTP Server gunicorn on other port : other.host.com:8080 or localhost:8080 publicly accessed with mod_proxy and url like www.host.com/admin/ </li><br/><li>Media HTTP Server : media.host.com, if it has to be on same system you can use mod_proxy and run NGINX server on another TCP port.</li><br/></ul><br/><br/><p>Note that you should not be able to get most performance with the NGINX as media server hidden behind apache with mod_proxy. </p><br/><br/><p>This part of setup relies upon the possibility of having more than one public IP adress on this slice.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT A FORM FIELD THAT S READ ONLI USE WIDGET
    </pattern>
    <template>
<![CDATA[<p>You should use a form field and not a model field:</p><br/><br/><pre><code>somefield = models.CharField(<br/>    widget=forms.TextInput(attrs={'readonly':'readonly'})<br/>)<br/></code></pre><br/><br/><p>replaced with</p><br/><br/><pre><code>somefield = forms.CharField(<br/>    widget=forms.TextInput(attrs={'readonly':'readonly'})<br/>)<br/></code></pre><br/><br/><p>Should fix it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEPLOY
    </pattern>
    <template>
<![CDATA[<p>If you want a lightweight alternative to Tornado, I'd suggest <a href="http://pypi.python.org/pypi/Spawning/0.7" rel="nofollow">spawning</a>. It's very good at code reloading and seems to have good performance - though of course best you try it out yourself. </p><br/><br/><p>I'd also recommend supervisord regardless of OS, for keeping Tornado or spawning instances up and running as well as any other essential services.</p><br/><br/><p>However 9 times out of 10 it's the database that's the bottleneck and choice of web server is not really going to impact site performance and scalability. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DELET ALL BUT LAST FIVE OF QUERYSET
    </pattern>
    <template>
<![CDATA[<p>this is how i ended up doing this.</p><br/><br/><pre><code>    notes = Notification.objects.filter(user=self.user)<br/>    for note in notes[4:]:<br/>        note.delete()<br/></code></pre><br/><br/><p>because i'm doing this in the save method, the only way the loop would ever have to run more than once would be if the user got multiple notifications at once. i'm not worried about that happening (while it may happen it's not likely to be enough to cause a problem).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY DJANGO VIEW KNOW WHICH TEMPLAT TO RENDER OR WHETHER TO RETURN JSON
    </pattern>
    <template>
<![CDATA[<p>Have a function that returns a dict, and then have two views, one of which encodes it as JSON and the other that shoves it through a template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLEAN WAY TO ADORN DJANGO MODEL WITH REQUEST SPECIF ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>This doesn't really answer your question, but are you sure you want to handle friendship through a method on User? I say this because:</p><br/><br/><ol><br/><li>The logic surrounding friendship is presumably in another app, so you might want to be explicit about calling a function defined in that app;</li><br/><li>Friendship is almost always a symmetric relation, so using a method on User leads to redundancy (<code>a.is_friend_with(b) == b.is_friends_with(a)</code>). If you later want to cache the result of the call, for instance, it makes sense to define a function which simply accepts user objects as arbitrarily ordered arguments; and,</li><br/><li>You probably don't want to do anything too fancy with HttpRequest or User as it's likely to confuse other developers.</li><br/></ol><br/><br/><p>My approach would be to define a manager method on whatever model represents friendship, and explicitly pass in users to that, like so: <code>Friendship.objects.are_friends(other_user, request.user)</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SLOW ARE PYTHON DJANGO EXCEPT
    </pattern>
    <template>
<![CDATA[<p>Handling exceptions will be the least of your worries with regards to performance.  I would suggest, however, that you use a shortcut provided by Django for you:</p><br/><br/><pre><code>from django.shortcuts import get_object_or_404<br/>artist = get_object_or_404(Artist, id=id)<br/></code></pre><br/><br/><p>Which either assigns the object to <code>artist</code> or returns a 404.  It's win-win!</p><br/><br/><p>Also, you should check out the <a href="http://github.com/robhudson/django-debug-toolbar" rel="nofollow">django-debug-toolbar</a>, which provides rendering/cpu time, context switches, and all kinds of other helpful tidbits of data for developers and might be just the tool you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY USE GIT INCLUD PRODUCTION RELEV FILE
    </pattern>
    <template>
<![CDATA[<p>i'm a bit confused by your server names, i'm more used to: production, staging, development.</p><br/><br/><p>you should probably dump the database as sql code, or whatever way you want to output the data in, then transfer it to your master (development?) server. you could do that by uploading it to a git repository on production and pulling it on development. <a href="http://fabfile.org" rel="nofollow">Fabric</a> would make that very easy.</p><br/><br/><p>but putting the data in a git repository probably isn't such a great idea, i haven't tried merging database dumps, so I'm not too sure. how much data are you talking about? git is fast, but merging and committing large database dumps might be a painful process.</p><br/><br/><p>we tend to have small test-databases on our local machines (that can get wiped) and are running one staging server next to the production server, with separate DBs.</p><br/><br/><p>when the underlying django models change we use <a href="http://South.aeracode.org/" rel="nofollow">South</a> on our staging and production server to migrate to the new database.</p><br/><br/><p>uploaded files you should probably tar with Fabric and then download to your machine for analysis, but again a lot of that work can be done on the staging server, without having to transfer all the content to your local machine.</p><br/><br/><p>if you still want to add static stuff to your git repository, simply add the static files in a subdirectory. then you can either set your file server to serve straight from that subdirectory, or if that feels too insecure, git pull to some other location and then copy the files to /var/www-static/ with Fabric.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WHAT IS THE BEST WAY TO MANAG BOTH A MOBIL AND DESKTOP SITE
    </pattern>
    <template>
<![CDATA[<p>Have two sets of templates, one for mobile, one for desktop. Store the filenames in a pair of dictionaries, and use the <code>User-agent</code> header to detect which set should be used. Also allow manual selection of which site to use via a session entry.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRATIONS I IT POSSIBL TO USE SOUTH IN THE MIDDL OF THE PROJECT
    </pattern>
    <template>
<![CDATA[<p>Yes. I think it is not too late. I've moved to south in a middle of a project and I am happy with that choice. I think it is a big help for deployment.</p><br/><br/><p>The initialization of the south app can be done at any moment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONE TO MANI MODEL
    </pattern>
    <template>
<![CDATA[<p>It should be more like this:</p><br/><br/><pre><code>class Vuln(models.Model): <br/>  pub_date = models.DateTimeField("Publication Date") <br/>  short_description = models.CharField("Description", max_length=70)<br/>  vendor = models.ForeignKey(Vendor, verbose_name="Vendor") <br/><br/>class Url(models.Model): <br/>  url = models.URLField("URL", max_length=200)<br/>  vulnerability = models.ForeignKey(Vuln)<br/></code></pre><br/><br/><p>If you're saying each Url talks about a specific vulnerability, then there is your relation in the Django DBM :)</p><br/><br/><p>As for the vendor field, you simply add another class, much like Class Vuln. For example:</p><br/><br/><pre><code>class Vendor(models.Model): <br/>  field_names_go_here = models.TextField(max_length=70)<br/>  short_description = models.CharField("Description", max_length=70)<br/></code></pre><br/><br/><p>Hope this helps!<br/>Regards, Alex</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SHELL WO N T START
    </pattern>
    <template>
<![CDATA[<p>It seems like IPython is installed wrongly somehow. Try starting the shell with:</p><br/><br/><pre><code>./manage.py shell --plain<br/></code></pre><br/><br/><p>to start the standard Python shell, rather than IPython. If that works, then trying removing IPython completely and reinstalling it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO OR RAIL FOR THE .NET PLATFORM
    </pattern>
    <template>
<![CDATA[<p>I have not yet found a solution as you have described, but as you know there are bits and pieces that could be used together to provide a stack that is close:</p><br/><br/><ul><br/><li>Database Versioning/Migrations - <a href="http://www.codeplex.com/dotnetmigrations" rel="nofollow">DotNetMigrations</a></li><br/><li>ORM or similar code gen - <a href="https://www.hibernate.org/343.html" rel="nofollow">Nhibernate</a>, <a href="http://msdn.microsoft.com/en-us/library/aa697427%28VS.80%29.aspx" rel="nofollow">Entity Framework</a></li><br/><li>MVC-based - native to <a href="http://www.asp.net/mvc/" rel="nofollow">ASP.NET MVC</a></li><br/><li>Pre-generated administrative screens - <a href="http://plinqo.com/" rel="nofollow">PLINQO</a></li><br/><li>view generation - available in Entity Framework or <a href="http://www.codesmithtools.com/" rel="nofollow">CodeSmith</a> templates, PLINQO</li><br/><li>Theming / styling - native to ASP.NET</li><br/></ul><br/><br/><p>This would provide a stack that is .NET and not another ecosystem sitting on top of a .NET substrate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARENT IN A MODELFORM IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>I'll be interested to see if you get any good solutions to this problem.  My own solution, which is far from elegant, is to do this:</p><br/><br/><pre><code>book = models.Book(title='Foo')<br/>chapter = models.Chapter(parent=book, title='dummy')<br/>form = forms.ChapterForm(request.POST, request.FILES, instance=chapter)<br/></code></pre><br/><br/><p>Basically, I first create a dummy object (<code>chapter</code> in this case) with the correct parent relationship and then pass that as the <code>instance</code> argument to the form's constructor.  The form will overwrite the throwaway data I used to create the dummy object with the data given in the request.  At the end, to get the real child object, I do something like this:</p><br/><br/><pre><code>if form.is_valid():<br/>    chapter = form.save()<br/>    # Now chapter.parent() == book<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BEST WAY TO IMPLEMENT STATU FIELD IN MODUL
    </pattern>
    <template>
<![CDATA[<p>Maybe this question helps you: <a href="http://stackoverflow.com/questions/1117564/set-django-integerfield-by-choices-name">Set Django IntegerField by choices=... name</a>.<br><br/>I quote from the accepted answer (with adjustments ;)):<br><br/>Put this into your class (<code>STATUS_CHOICES</code> will be the list that is handed to the <code>choices</code> option of the field):</p><br/><br/><pre><code>PENDING = 0<br/>DONE = 1<br/>STATUS_CHOICES = (<br/>    (PENDING, 'Pending'),<br/>    (DONE, 'Done'),<br/>)<br/></code></pre><br/><br/><p>Then you can do <code>order.status = Order.DONE</code>.</p><br/><br/><hr><br/><br/><p><strong>Note</strong> that you <strong>don't</strong> have to implement an own method to retrieve the (readable) value, Django <a href="http://docs.djangoproject.com/en/1.1/ref/models/instances/#django.db.models.Model.get_FOO_display" rel="nofollow">provides the  method <code>get_status_display</code> itself</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRAC WIKI FORMAT IN A DJANGO PYTHON WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>The below links shows a snippet which imports trac markup and makes a django template filter from it</p><br/><br/><p><a href="http://www.djangosnippets.org/snippets/1047/" rel="nofollow">http://www.djangosnippets.org/snippets/1047/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AIL F IN A WEBBROWS
    </pattern>
    <template>
<![CDATA[<p>First create a python script that monitors the log file for changes. If you only need this for debugging - testing purposes, then it is an overkill to use Django or another web framework. It is very easy to implement Http Web server functionality using sockets. Whenever an Http GET request is coming, serve only the difference from the different request. In order to achieve this you need to store in memory the status of every request coming (e.g.number of last line in the file).</p><br/><br/><p>The jQuery part is actually quite easy. Set up a timer with setTimeout function. Something like this will do:</p><br/><br/><pre><code>function doUpdate() {<br/>  $.ajax({type: "GET", url : tailServiceUrl,<br/>          success: function (data) {<br/>             if (data.length &gt; 4)<br/>             {<br/>                // Data are assumed to be in HTML format<br/>                // Return something like &lt;p/&gt; in case of no updates<br/>                $("#logOutputDiv").append(data);<br/>             }<br/>             setTimeout("doUpdate()", 2000);<br/>           }});<br/>}<br/><br/>setTimeout("doUpdate()", 2000);<br/></code></pre><br/><br/><p>You can also create callbacks for error and timeout to report a problem with the server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL PROCESS FOR DJANGO ON MY WSGI APACH
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIDaemonProcess" rel="nofollow"><code>WSGIDaemonProcess</code></a> directive to put the app in daemon mode and specify the number of daemon processes and threads.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL HASH FRAG FROM A DJANGO REQUEST OBJECT
    </pattern>
    <template>
<![CDATA[<p>This is not sent to the server, by definition.  From <a href="http://www.w3.org/DesignIssues/Fragment.html" rel="nofollow">URI References: Fragment Identifiers on URIs </a>:</p><br/><br/><blockquote><br/>  <p>"The HTTP engine cannot make any assumptions about it.  The server is not even given it."</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIM DATA ON WEBPAG WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>So the page must perform periodic <a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow">jQuery.ajax</a> calls with a <code>url</code> parameter set to a server's URL where the latest up-to-data information (possibly just as an incremental delta from the last instant for which the client has info -- the client can send that instant as a query parameter in the Ajax call) is served, ideally in JSON form.  The callback at the completion of the async request can schedule the next ajax calls for a few seconds in the future, and then repaint the graph.</p><br/><br/><p>The fact that, server-side, you're using Django, doesn't seem all that crucial -- the server just needs to format a bunch of data as JSON and send it back, after all.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.djangoproject.com/wiki/DjangoResources" rel="nofollow">http://code.djangoproject.com/wiki/DjangoResources</a></p><br/><br/><p>Any of this helpful?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2006 MYSQL SERVER HA GONE AWAY ) IN WSGI DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>show variables like 'wait_timeout';</code></p><br/><br/><p>this is the setting will throw back the "mysql gone away" error<br/><br/>set it to a very large value to prevent it "gone away" <br/><br/>or simple re-ping the mysql connection after certain period</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO I WANT TO INSERT A DATABAS RECORD BY SEND MYSELF AN EMAIL
    </pattern>
    <template>
<![CDATA[<p>If I were to implement this, I'd use a scheduler and a job to be scheduled.</p><br/><br/><p>That job would connect to the mail server (be it POP3 or IMAP) and parse the unread messages (or messages unread by the job). Based on that I would insert that record.</p><br/><br/><p>You'd get 2 types of records that way. A list of mail message ids which have been processed (so you don't reprocess mails) and  a list of tasks.</p><br/><br/><p>Disadvantage is that it takes some time before you see the task, as the job only executes every X minutes, or seconds.</p><br/><br/><p>If that is not good enough I'd go for a permanent IMAP connection, but you'd have to implement more error handling; you don't just retry automatically every X minutes.</p><br/><br/><p>Googling for Django +scheduler will get you started.</p><br/><br/><p>also have a look at <a href="http://stackoverflow.com/questions/573618/django-set-up-a-scheduled-job">this StackOverflow thread</a>, no need to reinvent the wheel :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER IMPERSON BY ADMIN
    </pattern>
    <template>
<![CDATA[<p>I solved this with a simple middleware. It also handles redirects (that is, the GET parameter is preserved during a redirect). Here it is:</p><br/><br/><pre><code>class ImpersonateMiddleware(object):<br/>    def process_request(self, request):<br/>        if request.user.is_superuser and "__impersonate" in request.GET:<br/>            request.user = models.User.objects.get(id=int(request.GET["__impersonate"]))<br/><br/>    def process_response(self, request, response):<br/>        if request.user.is_superuser and "__impersonate" in request.GET:<br/>            if isinstance(response, http.HttpResponseRedirect):<br/>                location = response["Location"]<br/>                if "?" in location:<br/>                    location += "&amp;"<br/>                else:<br/>                    location += "?"<br/>                location += "__impersonate=%s" % request.GET["__impersonate"]<br/>                response["Location"] = location<br/>        return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON EGG IN BUILDOUT ENVIRON INCLUD DATA FILE
    </pattern>
    <template>
<![CDATA[<p>It sounds like you need to make use of the <a href="http://docs.python.org/distutils/setupscript.html#installing-package-data" rel="nofollow">package_data keyword argument</a> in your setup.py file, so distutils knows those files should be installed with your package.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON AND LINK ENCRYPT
    </pattern>
    <template>
<![CDATA[<p>There are no encryption algorithms, per se, built in to Python.  However, you might want to look at the <a href="http://www.dlitz.net/software/pycrypto/" rel="nofollow">Python Cryptography Toolkit</a> (PyCrypt).  I've only tinkered with it, but it's referenced in Python's documentation on <a href="http://docs.python.org/library/crypto.html" rel="nofollow">cryptographic services</a>.  Here's an example of how you could encrypt a string with AES using PyCrypt:</p><br/><br/><pre><code>from Crypto.Cipher import AES<br/>from urllib import quote<br/><br/># Note that for AES the key length must be either 16, 24, or 32 bytes<br/>encryption_obj = AES.new('abcdefghijklmnop')<br/>plain = "Testing"<br/><br/># The plaintext must be a multiple of 16 bytes (for AES), so here we pad it<br/># with spaces if necessary.<br/>mismatch = len(plain) % 16<br/>if mismatch != 0:<br/>  padding = (16 - mismatch) * ' '<br/>  plain += padding<br/><br/>ciph = encryption_obj.encrypt(plain)<br/><br/># Finally, to make the encrypted string safe to use in a URL we quote it<br/>quoted_ciph = quote(ciph)<br/></code></pre><br/><br/><p>You would then make this part of your URL, perhaps as part of a GET request.</p><br/><br/><p>To decrypt, just reverse the process; assuming that <code>encryption_obj</code> is created as above, and that you've retrieved the relevant part of the URL, this would do it:</p><br/><br/><pre><code>from urllib import unquote<br/><br/># We've already created encryption_object as shown above<br/><br/>ciph = unquote(quoted_ciph)<br/>plain = encryption_obj.decrypt(ciph)<br/></code></pre><br/><br/><p>You also might consider a different approach: one simple method would be to hash the primary key (with a salt, if you wish) and store the hash and pk in your database.  Give the user the hash as part of their link, and when they return and present the hash, look up the corresponding pk and return the appropriate object.  (If you want to go this route, check out the built-in library <a href="http://docs.python.org/library/hashlib.html#module-hashlib" rel="nofollow">hashlib</a>.)</p><br/><br/><p>As an example, you'd have something like this defined in models.py:</p><br/><br/><pre><code>class Pk_lookup(models.Model):<br/>  # since we're using sha256, set the max_length of this field to 32<br/>  hashed_pk = models.CharField(primary_key=True, max_length=32)<br/>  key = models.IntegerField()<br/></code></pre><br/><br/><p>And you'd generate the hash in a view using something like the following:</p><br/><br/><pre><code>import hashlib<br/>import Pk_lookup<br/><br/>hash = hashlib.sha256()<br/>hash.update(str(pk)) # pk has been defined previously<br/>pk_digest = hash.digest()<br/><br/>lookup = Pk_lookup(hashed_pk=pk_digest,key=pk)<br/>lookup.save()<br/></code></pre><br/><br/><p>Note that you'd have to quote this version as well; if you prefer, you can use <code>hexdigest()</code> instead of <code>digest</code> (you wouldn't have to quote the resulting string), but you'll have to adjust the length of the field to 64.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEV SERVER CORRECTLI SERV SVG
    </pattern>
    <template>
<![CDATA[<p>I don't have Django available to test this at the moment but it looks like the static server uses the <a href="http://docs.python.org/dev/library/mimetypes.html">mimetypes library</a> to determine the content type (specifically guess_type()).</p><br/><br/><p>With a little bit a Googling, I came across <a href="http://moinmo.in/MacroMarket/EmbedObject">some code</a> that you could probably throw in your settings.py to add support for the svg content type:</p><br/><br/><pre><code>import mimetypes<br/><br/>mimetypes.add_type("image/svg+xml", ".svg", True)<br/>mimetypes.add_type("image/svg+xml", ".svgz", True)<br/></code></pre><br/><br/><p>There's also this <a href="http://pythonguy.wordpress.com/2008/02/06/content-type-for-pylons-static-content/">blog post</a> specific to Pylons but it mentions a similar issue. He specifies that the MIME types are stored in "/etc/mime.types" and that SVG is missing because it's not an official MIME type. He may be right, since I can't find a MIME-type for SVG anywhere on the <a href="http://www.iana.org/assignments/media-types/">IANA</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER TO DELET THEIR OWN COMMENT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you want to mark the comment as deleted, just as <code>django.contrib.comments.views.moderation.delete()</code> does:</p><br/><br/><pre><code>from django.contrib.auth.decorators import login_required<br/>from django.contrib.comments.models import Comment<br/>from django.shortcuts import get_object_or_404<br/>from django.conf import settings<br/>from django.contrib import comments<br/><br/>@login_required<br/>def delete_own_comment(request, message_id):<br/>    comment = get_object_or_404(comments.get_model(), pk=message_id,<br/>            site__pk=settings.SITE_ID)<br/>    if comment.user == request.user:<br/>        comment.is_removed = True<br/>        comment.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALID MAKE REQUIR CONDIT
    </pattern>
    <template>
<![CDATA[<p>This is done with the <code>clean</code> method on the form. You need to set <code>foo_date</code> and <code>foo_time</code> to <code>required=False</code>, though, because <code>clean</code> is only called after every field has been validated (see also the <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#cleaning-and-validating-fields-that-depend-on-each-other" rel="nofollow">documentation</a>).</p><br/><br/><pre><code>class FooForm(forms.Form)<br/>    # your field definitions<br/><br/>    def clean(self):<br/>        data = self.cleaned_data<br/>        if data.get('foo_timestamp', None) or (data.get('foo_date', None) and data.get('foo_time', None)):<br/>            return data<br/>        else:<br/>            raise forms.ValidationError('Provide either a date and time or a timestamp')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO POLL OF DATABAS HA MEMORI LEAK
    </pattern>
    <template>
<![CDATA[<p>You need to reset list of queries, that Django keeps for debugging purpose. Normally it is cleared after evert request, but since you don't have requests you need to do this manually.</p><br/><br/><p>See "Debugging Django memory leak with TrackRefs and Guppy" by Mikko Ohtamaa:</p><br/><br/><blockquote><br/>  <p>Django keeps track of all queries for<br/>  debugging purposes<br/>  (connection.queries). This list is<br/>  reseted at the end of HTTP request.<br/>  But in standalone mode, there are no<br/>  requests. So you need to manually<br/>  reset to queries list after each<br/>  working cycle</p><br/>  <br/>  <p>More:<br/>  <a href="http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/" rel="nofollow">http://blog.mfabrik.com/2008/03/07/debugging-django-memory-leak-with-trackrefs-and-guppy/</a></p><br/></blockquote><br/><br/><p>and also <a href="http://docs.djangoproject.com/en/dev/faq/models/#why-is-django-leaking-memory" rel="nofollow">"Why is Django leaking memory?" in Django FAQ</a> (it talks both about setting <code>DEBUG</code> to <code>False</code>, which is always important, and about clearing the list of queries using <code>db.reset_queries()</code>, important in applications like yours)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I18N COMMON CAUS FOR TRANSLAT NOT APPEAR
    </pattern>
    <template>
<![CDATA[<p>Maybe the translated strings are marked as <code>fuzzy</code>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST SAV BE RAIS TWICE DURE THE SAVE OF A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Apparently, <a href="http://stackoverflow.com/questions/1801249/import-twice-when-run-test">Python is sensitive to the way you import modules</a>. In my case, it wasn't an issue with any of import code inside my blog application but an issue with the INSTALLED_APPS configuration, which I assume is used by Django to do an initial import.</p><br/><br/><p>Inside my blog application I was using imports such as:</p><br/><br/><pre><code>from blog.models import *<br/></code></pre><br/><br/><p>My settings.py was configured as:</p><br/><br/><pre><code>INSTALLED_APPS = (<br/>    'django.contrib.admin',<br/>    'django.contrib.auth',<br/>    ...snip...<br/>    'sorl.thumbnail',<br/>    'mysite.blog',<br/>)<br/></code></pre><br/><br/><p>The "mysite" prefix was added because I originally had import path issues when deploying the site. Later I fixed this issue (so it acted the same as the development server) by adding multiple paths in my WSGI script.</p><br/><br/><p>Removing the "mysite" prefix from the settings.py fixed the issue:</p><br/><br/><pre><code>INSTALLED_APPS = (<br/>    'django.contrib.admin',<br/>    'django.contrib.auth',<br/>    ...snip...<br/>    'sorl.thumbnail',<br/>    'blog',<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MUST SEE CONFER VIDEO FOR PYTHON DJANGO DEVELOP
    </pattern>
    <template>
<![CDATA[<p><a href="http://pycon.blip.tv/" rel="nofollow">blip.tv's pycon channel</a> has all talks from Pycon 2009 and (recently concluded) 2010 -- <strong>seriously</strong> good stuff!  Pick your talks from the <a href="http://pycon.blip.tv/posts?view=archive&amp;nsfw=dc" rel="nofollow">"episodes archive"</a> pages.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERYSET WITH YEAR ( DATE ) 2010
    </pattern>
    <template>
<![CDATA[<p>You can achieve this without using raw SQL. Use the built in <code>__</code> mechanism instead (see the <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#retrieving-specific-objects-with-filters" rel="nofollow">documentation</a> for more details). Something like this:</p><br/><br/><pre><code>MyOrder.objects.filter(order_date__year = 2010)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWO LIST IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It's possible to do</p><br/><br/><pre><code>{% for ab in mylist %}<br/>    {{ab.0}}<br/>    {{ab.1}}<br/>{% endfor %}<br/></code></pre><br/><br/><p>but you cannot make a call to <code>zip</code> within the <code>for</code> structure. You'll have to store the zipped list in another variable first, then iterate over it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT QUERYSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can do this with a custom model manager and override the <code>get_query_set</code> function to always filter canceled=False.</p><br/><br/><pre><code>class CustomManager(models.Manager):<br/>    def get_query_set(self):<br/>        return super(CustomManager, self).get_query_set().filter(canceled=False)<br/><br/>class MyModel(models.Model):<br/>    # Blah blah<br/>    objects = CustomManager()<br/></code></pre><br/><br/><p>Then when calling <code>MyModel.objects.all()</code> it will always exclude canceled objects. Here is a blog post I found helpful on the subject. <a href="http://www.b-list.org/weblog/2006/aug/18/django-tips-using-properties-models-and-managers/" rel="nofollow">http://www.b-list.org/weblog/2006/aug/18/django-tips-using-properties-models-and-managers/</a></p><br/><br/><p>EDIT:<br/>Perhaps a better approach with a custom manager would be to attach it to another property, other than objects, such as:</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    # Blah blah<br/>    active = CustomManager()<br/></code></pre><br/><br/><p>And in your views your queries would look like <code>MyModel.active.all()</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY QUERI
    </pattern>
    <template>
<![CDATA[<p>First of all, don't use <code>id</code> in the names, because it is confusing. That field isn't the ID, it is the object itself. (If you have a field <code>ref</code> it automatically creates a field <code>ref_id</code>)</p><br/><br/><pre><code>options.objects.filter(header=a_header)<br/></code></pre><br/><br/><p>You query it like any value, where some header instance is the value you are filtering on.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMSET MANAGEMENT FORM VALID ERROR
    </pattern>
    <template>
<![CDATA[<p>To avoid this error simply wrap your formset POST bounding in a try/except block like so.</p><br/><br/><pre><code>from django.core.exceptions import ValidationError # add this to your imports<br/><br/>if request.method == 'POST':<br/>   try:<br/>      delblogformset = delblog(request.POST)<br/>   except ValidationError<br/>      delblogformset = None<br/>   if delblogformset and delblogformset.is_valid():<br/>      delblogformset.save()<br/>          return HttpResponseRedirect('/home')<br/></code></pre><br/><br/><p>The POST request from your <code>blogform</code> lacks the 'ManagementForm' hidden input that is required for your <code>delblogformset</code> and hence the validation error is thrown. We wrap in a try/except block because we know that if <code>ValidationError</code> has been raised than the POST was meant for your <code>blogform</code> and not <code>delblogformset</code>.</p><br/><br/><p>For more information see django docs: <a href="http://docs.djangoproject.com/en/dev/topics/forms/formsets/#understanding-the-managementform" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/forms/formsets/#understanding-the-managementform</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT SEARCH FOR DJANGO MYSQL NOT SO BAD ( VS SPHINX XAPIAN )
    </pattern>
    <template>
<![CDATA[<p>I haven't tested Xapian but I did a presentation last year comparing fulltext solutions:<br/><a href="http://www.slideshare.net/billkarwin/practical-full-text-search-with-my-sql" rel="nofollow">http://www.slideshare.net/billkarwin/practical-full-text-search-with-my-sql</a></p><br/><br/><p>Sphinx is the fastest at searches.  But it's hard to index data that comes in incrementally, because adding data to an index is about as expensive as creating the whole index from scratch.</p><br/><br/><p>So some people maintain two Sphinx indexes: one large index with archived data, and one small index with recent data.  Periodically (e.g. weekly) they merge the recent index into the archived index (merging two indexes is less expensive), and truncate the small index to prepare for the new week.  This works great for something like a forum, but not as good for a wiki.</p><br/><br/><p>You might also check out <a href="http://lucene.apache.org/solr/" rel="nofollow">Apache Solr</a>.  This is a wrapper for Lucene, and it makes using Lucene a lot easier and yet more featureful.  I didn't know about Solr when I designed that presentation.</p><br/><br/><p>The Washington Times is an example of a project that uses Solr together with Django: </p><br/><br/><ul><br/><li><a href="http://www.screeley.com/djangosolr/" rel="nofollow">http://www.screeley.com/djangosolr/</a></li><br/><li><a href="http://www.chrisumbel.com/article/django_solr" rel="nofollow">http://www.chrisumbel.com/article/django_solr</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOCOMPLET ON TEXTFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>In your form, specify the widget you want to use for the field, and add an <code>attrs</code> dictionary on that widget. For example (straight from the <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.Widget.attrs" rel="nofollow">django documentation</a>):</p><br/><br/><pre><code>class CommentForm(forms.Form):<br/>    name = forms.CharField(<br/>                widget=forms.TextInput(attrs={'class':'special'}))<br/>    url = forms.URLField()<br/>    comment = forms.CharField(<br/>               widget=forms.TextInput(attrs={'size':'40'}))<br/></code></pre><br/><br/><p>Just add <code>'autocomplete'='off'</code> to the attrs dict.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT MODELS.PI VERSU APP MODELS.PI
    </pattern>
    <template>
<![CDATA[<p>There shouldn't be any reason to have "project level models" (or "project level views" for that matter). You just need to split the functionality into separate apps.</p><br/><br/><p>Let's say you are designing an intranet website for a school. You would have one app that deals with students' accounts, and another app generating timetables, and yet another one for an internal message board, etc.. Every app defines its own models (there are no "project level models"), but apps can import each others models (so message board posts can have a ForeignKey field pointing at student from the "students" app).</p><br/><br/><p>See also <a href="http://www.youtube.com/watch?v=A-S0tqpPga4" rel="nofollow">James Bennett's "writing reusable Django applications" presentation</a> from DjangoCon 2008.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMCACH SUPPORT CONSIST HASH BINARI PROTOCOL
    </pattern>
    <template>
<![CDATA[<p>Looking at the <code>_get_server</code> method on python-memcached v1.45, it seems it doesn't use consistent hashing, but a simple <code>hash % len(buckets)</code>.</p><br/><br/><p>Same goes for binary protocol, python-memcache uses, as far as I can see in the source, only text commands.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TUTORI SAY I HAVE N T SET DATABASE ENGIN SET YET... BUT I HAVE
    </pattern>
    <template>
<![CDATA[<p>It looks like you are using an earlier version of Django. That way of setting database configuration is from Django 1.2, but the error you are getting is from 1.1. If you are using version 1.1, use <a href="http://docs.djangoproject.com/en/1.1/intro/tutorial01/" rel="nofollow">this version of the tutorial</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENFORC UNIQU UPLOAD FILE NAME USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Use uuid. To tie that into your model see <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField.upload_to" rel="nofollow">Django documentation</a> for  FileField upload_to.</p><br/><br/><p>For example in your models.py define the following function:</p><br/><br/><pre><code>import uuid<br/>def get_file_path(instance, filename):<br/>    ext = filename.split('.')[-1]<br/>    filename = "%s.%s" % (uuid.uuid4(), ext)<br/>    return os.path.join('uploads/logos', filename)<br/></code></pre><br/><br/><p>Then, when defining your FileField/ImageField, specify get_file_path as the upload_to value.</p><br/><br/><pre><code>file = models.FileField(upload_to=get_file_path,<br/>                        null=True,<br/>                        blank=True,<br/>                        verbose_name=_(u'Contact list'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT FACTORI IN DJANGO SQLIT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>The solution in sqlite is to change<br/>  the text_factory to something like:<br/>  lambda x: unicode(x, "utf-8",<br/>  "ignore")</p><br/>  <br/>  <p>However, I don't know how to tell the Django model driver this.</p><br/></blockquote><br/><br/><p>Have you tried</p><br/><br/><pre><code>from django.db import connection<br/>connection.connection.text_factory = lambda x: unicode(x, "utf-8", "ignore")<br/></code></pre><br/><br/><p>before running any queries?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GEOCOD AN ADDRESS ON FORM SUBMISS
    </pattern>
    <template>
<![CDATA[<p>You can override the model's save method. I geocode the data before saving. This is using googleapi, but it can be modified accordingly.</p><br/><br/><pre><code>import urllib<br/><br/>def save(self):<br/>    location = "%s, %s, %s, %s" % (self.address, self.city, self.state, self.zip)<br/><br/>    if not self.latitude or not self.longitude:<br/>        latlng = self.geocode(location)<br/>        latlng = latlng.split(',')<br/>        self.latitude = latlng[0]<br/>        self.longitude = latlng[1]<br/><br/>    super(Marker, self).save()<br/><br/>def geocode(self, location):<br/>    output = "csv"<br/>    location = urllib.quote_plus(location)<br/>    request = "http://maps.google.com/maps/geo?q=%s&amp;output=%s&amp;key=%s" % (location, output, settings.GOOGLE_API_KEY)<br/>    data = urllib.urlopen(request).read()<br/>    dlist = data.split(',')<br/>    if dlist[0] == '200':<br/>        return "%s,%s" % (dlist[2], dlist[3])<br/>    else:<br/>        return ','<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER MODEL IN DJANGO UNIT TEST
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.python.org/dev/library/unittest.html#unittest.TestCase.setUp"><code>setUp</code></a> and <a href="http://docs.python.org/dev/library/unittest.html#unittest.TestCase.tearDown"><code>tearDown</code></a> methods on Unittests are called before and after each test case. Define <a href="http://docs.python.org/dev/library/unittest.html#unittest.TestCase.tearDown"><code>tearDown</code></a> method which deletes the created user.</p><br/><br/><pre><code>class MyTesting(unittest.TestCase):<br/>    def setUp(self):<br/>        self.u1 = User.objects.create(username='user1')<br/>        self.up1 = UserProfile.objects.create(user=self.u1)<br/><br/>    def testA(self):<br/>        ...<br/><br/>    def tearDown(self):<br/>        self.up1.delete()<br/>        self.u1.delete()<br/></code></pre><br/><br/><p>I would also advise to <a href="http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users">create user profiles</a> using <a href="http://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.post_save"><code>post_save</code></a> signal unless you really want to create user profile manually for each user.</p><br/><br/><p><strong>Follow-up</strong> on delete comment:</p><br/><br/><p>From <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#deleting-objects">Django docs</a>:</p><br/><br/><blockquote><br/>  <p>When Django deletes an object, it<br/>  emulates the behavior of the SQL<br/>  constraint ON DELETE CASCADE -- in<br/>  other words, any objects which had<br/>  <strong>foreign keys pointing at the object to<br/>  be deleted</strong> will be deleted along with<br/>  it.</p><br/></blockquote><br/><br/><p>In your case, user profile is pointing to user so you should delete the user first to delete the profile at the same time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT CASCAD ON DELET
    </pattern>
    <template>
<![CDATA[<p>In Django version 1.3 there is a on_delete parameter which determinates "ondelete" action, for example:</p><br/><br/><pre><code>def get_sentinel_user():<br/>    return User.objects.get_or_create(username='deleted')[0]<br/><br/>class MyModel(models.Model):<br/>    user = models.ForeignKey(User, on_delete=models.SET(get_sentinel_user))<br/></code></pre><br/><br/><p>So maybe try:</p><br/><br/><pre><code>class thread(models.Model):<br/>     message = models.ForeignKey(message, on_delete=models.CASCADE)<br/>     ...<br/></code></pre><br/><br/><p>source <a href="http://docs.djangoproject.com/en/1.3/ref/models/fields/" rel="nofollow">http://docs.djangoproject.com/en/1.3/ref/models/fields/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING AS A KEYWORD ARGUMENT
    </pattern>
    <template>
<![CDATA[<pre><code>d = Image.objects.filter(**{'image__endswith': "jpg"})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO ENCRYPT DATABAS FIELD DJANGO
    </pattern>
    <template>
<![CDATA[<p>Yeah. Tell whoever told you to get real. Makes no / little sense. If it is about the stored values - enterprise edition 2008 can store encrypted DB files.</p><br/><br/><p>Otherwise, if you really need to (with all disadvantages) just encrypt them and store them as byte fields.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FREE ONLIN PYTHON TUTORI AND REFER FOR AN EXPERIENC PROGRAMM
    </pattern>
    <template>
<![CDATA[<p>Actually, the standard documentation is almost perfect these days for an already experienced programmer. The tutorial is fairly comprehensive and concice and the Module Index + the Language Reference are excellent for reference. The other resources mentioned in previous answers are good too but the standard documentation alone has kept me quite happy for years. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE ENVIRON FOR DJANGO DEVELOP AND DEPLOY ( NGINX GUNICORN GIT SOUTH FABR )
    </pattern>
    <template>
<![CDATA[<p>Here you are..<a href="https://github.com/jacobian/django-deployment-workshop" rel="nofollow">https://github.com/jacobian/django-deployment-workshop</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CK DJANGO ADMIN HOOK FOR LOGIN LOGOUT
    </pattern>
    <template>
<![CDATA[<p>I was also looking for an answer to this and ended up going another way. You can use your own views for login and logout, which perform some action and then call the auth views. For login:</p><br/><br/><pre><code>def login(request, *args, **kwargs):<br/>    from django.contrib.auth.forms import AuthenticationForm<br/>    if request.method == 'POST':<br/>        form = AuthenticationForm(data=request.POST)<br/>        if form.is_valid():<br/>            # login successful<br/>            do_something()<br/>    from django.contrib.auth.views import login as authlogin<br/>    return authlogin(request, *args, **kwargs)<br/></code></pre><br/><br/><p>And for logout:</p><br/><br/><pre><code>def logout(request, *args, **kwargs):<br/>    do_something() <br/>    from django.contrib.auth.views import logout as authlogout<br/>    return authlogout(request, *args, **kwargs)<br/></code></pre><br/><br/><p>You can do whatever processing you like in your custom views in place of the do_something placeholders, such as emitting signals, logging log-in and log-out times, etc. </p><br/><br/><p>Finally, don't forget to update your <code>urls.py</code> to point to your custom views.</p><br/><br/><p>I'm not sure how a custom auth backend can handle logout events, as i eventually gave up on that and tried this instead. Additionally, this approach has the advantage of making available the <code>request</code> object instead of just the user.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON OBJECT IN SCRIPT TAG
    </pattern>
    <template>
<![CDATA[<p>If you are using XHTML, you would be able to use entity references (<code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;amp;</code>) to escape any string you want within <code>&lt;script&gt;</code>. You would <em>not</em> want to use a <code>&lt;![CDATA[...]]&gt;</code> section, because the sequence "<code>]]&gt;</code>" can't be expressed within a CDATA section, and you would have to change the script to express <code>]]&gt;</code>.</p><br/><br/><p>But you're probably not using XHTML. If you're using regular HTML, the <code>&lt;script&gt;</code> tag acts somewhat like a CDATA section in XML, except that it has even more pitfalls. It ends with <code>&lt;/script&gt;</code>. There are also arcane rules to allow <code>&lt;!-- document.write("&lt;script&gt;...&lt;/script&gt;") --&gt;</code> (the comments and <code>&lt;script&gt;</code> opening tag must both be present for <code>&lt;/script&gt;</code> to be passed through). The compromise that the HTML5 editors adopted for future browsers is described in <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#script-data-state" rel="nofollow">HTML 5 tokenization</a> and <a href="http://wiki.whatwg.org/wiki/CDATA_Escapes" rel="nofollow">CDATA Escapes</a></p><br/><br/><p>I think the takeaway is that you must prevent <code>&lt;/script&gt;</code> from occurring in your JSON, and to be safe you should also avoid <code>&lt;script&gt;</code>, <code>&lt;!--</code>, and <code>--&gt;</code> to prevent runaway comments or script tags. I think it's easiest just to replace <code>&lt;</code> with <code>\u003c</code> and <code>--&gt;</code> with <code>--\&gt;</code> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREDIT CARD PAYMENT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>As mentioned in the previous answer, you need a <a href="http://en.wikipedia.org/wiki/Merchant_account" rel="nofollow">merchant account</a> and a <a href="http://en.wikipedia.org/wiki/Payment_gateway" rel="nofollow">payment gateway</a>.</p><br/><br/><p>I'd recommend <a href="http://www.braintreepaymentsolutions.com/" rel="nofollow">BrainTree</a> if you're processing enough payments that they'll accept you. They act as both if you want them to.  They also have a Python API for processing payments.  It will be much easier to set up.  I don't know if they accept customers from outside of the US.</p><br/><br/><p><a href="https://www.paypal.com/" rel="nofollow">PayPal</a> also offers a solution that allows you to process credit card payments without users having to go to the PayPal site.  It's called website payments pro, but I think it's only available in the US and the UK.</p><br/><br/><p>Otherwise, look at <a href="http://www.authorize.net/" rel="nofollow">Authorize.Net</a> as a gateway (or shop around) and speak with you bank about a merchant account.</p><br/><br/><p>Nothing is built into Django or Python for this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT TERNARI OPER
    </pattern>
    <template>
<![CDATA[<p>Why would you need a ternary operator within a template? <code>{% if %}</code> and <code>{% else %}</code> are all you need.</p><br/><br/><p>Or you could try the <code>firstof</code> tag:</p><br/><br/><pre><code>{% firstof var1 var2 var3 %}<br/></code></pre><br/><br/><p>which outputs the first one of var1, var2 or var3 which evaluates to a True value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PICKL DJANGO REQUEST OBJECT
    </pattern>
    <template>
<![CDATA[<p>Generally, you cannot pickle HTTP requests objects for any web server. Pickling process does not pickle on the object itself, but all its references.</p><br/><br/><p>The usual web server design pattern is to have each HTTP request running its own thread. There must be a connection between the thread and HTTP request. Thus, the HTTP object is tied to the life cycle of web server and cannot be taken out of the web server context.</p><br/><br/><p>What you probably want to do is to pickle the contents of HTTP request object and re-create requests using this content as a payload. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON ( DJANGO ) EXPERI PROFESSIONALI COMPAR TO RUBI ON RAIL
    </pattern>
    <template>
<![CDATA[<p>My experience is, that the more languages and/or frameworks you know, the easier it is to learn a new language. So if you have pretty good experience in programming it shouldn't be a big problem. </p><br/><br/><p>Python and Ruby are both dynamic and completely object oriented Languages. Just the syntax is a little bit different. i.e. where python uses indention two mark blocks of code, ruby uses <code>{|begin|then|do|...</code> and <code>}|end</code> to mark the beginning and end of a block.</p><br/><br/><p>As far as I know Django is a little bit more low level like <a href="http://www.merbivore.com/" rel="nofollow">merb</a> or <a href="http://www.sinatrarb.com/" rel="nofollow">sinatra</a>. But Django embraces the MVC style. So there you must not learn something new.</p><br/><br/><p>But to really know how quickly you can learn RoR is just trying, it can be fun. Just try it out in some freetime. IMHO it can be very easy to learn, especially for someone experienced with other MVC frameworks with similar languages.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM.SAV STEP BY STEP
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>self.instance.user = user </p><br/></blockquote><br/><br/><p>Save the user argument into the self.instance object's user attribute</p><br/><br/><blockquote><br/>  <p>post = super(ProductAddForm, self).save(*args, **kwargs)</p><br/></blockquote><br/><br/><p>Invoke the superclass save method to get a resulting object.</p><br/><br/><blockquote><br/>  <p>post.save()</p><br/></blockquote><br/><br/><p>Save the resulting object.  This may be needless, or it may be essential, depending on the arguments to <code>save</code>.  </p><br/><br/><p>See <a href="http://docs.djangoproject.com/en/1.2/topics/forms/modelforms/#the-save-method" rel="nofollow">http://docs.djangoproject.com/en/1.2/topics/forms/modelforms/#the-save-method</a>.  If commit is False, then the <code>post</code> object has not been saved to the database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODELCHOICEFIELD TO SHOW USER FULL NAME RATHER THAN USERNAM
    </pattern>
    <template>
<![CDATA[<p>You can setup a custom <code>ModelChoiceField</code> that will return whatever label you'd like.</p><br/><br/><p>Place something like this within a fields.py or wherever applicable.</p><br/><br/><pre><code>class UserModelChoiceField(ModelChoiceField):<br/>    def label_from_instance(self, obj):<br/>         return obj.get_full_name()<br/></code></pre><br/><br/><p>Then when creating your form, simply use that field</p><br/><br/><pre><code> UserModelChoiceField(queryset=User.objects.filter(is_staff=False), required = False)<br/></code></pre><br/><br/><p>More info can be found <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERFLOW CLONE USE PYTHON
    </pattern>
    <template>
<![CDATA[<p>I wouldn't develop an other clone of SO. There exist alreday a real good one: <a href="http://www.osqa.net/" rel="nofollow">OSQA</a> (written in Python/Django, under GPL)</p><br/><br/><p>It supports allmost every feature of stackoverflow (Q/A, Badges, reputaion, tags, registration...)</p><br/><br/><p>Have a look at the <a href="http://meta.osqa.net/" rel="nofollow">example</a></p><br/><br/><blockquote><br/>  <p>Would experimenting/using Django be<br/>  the most efficient way to go about<br/>  implementing my project?</p><br/></blockquote><br/><br/><p>A good starting point is the Tutorial. And as jbochi said: <a href="http://stackoverflow.com/questions/1969159/my-path-to-learn-python-django">"The best kind of learning is learning by doing"</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I was having the exact same issue - and Blue Peppers' answer got me on the right track. Adding a RequestContext to your form view fixes the problem.</p><br/><br/><pre><code>from django.template import RequestContext<br/></code></pre><br/><br/><p>and:</p><br/><br/><pre><code>def register(request):<br/>if request.method == 'POST':<br/>    form = UserCreationForm(request.POST)<br/>    if form.is_valid():<br/>        new_user = form.save()<br/>        return HttpResponseRedirect("/books/")<br/>else:<br/>    form = UserCreationForm()<br/>c = {'form': form}<br/>return render_to_response("registration/register.html", c, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>This fixed it for me.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DJANGO BOOK FOR JAVA DEVELOP
    </pattern>
    <template>
<![CDATA[<p>Try Google's Python Class <a href="http://code.google.com/edu/languages/google-python-class/" rel="nofollow">http://code.google.com/edu/languages/google-python-class/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE A DARK PYCHARM SCHEMA FILE
    </pattern>
    <template>
<![CDATA[<p>I just found this wonderful theme :</p><br/><br/><p><a href="http://github.com/nek4life/pycharm-twilight" rel="nofollow">http://github.com/nek4life/pycharm-twilight</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITEM IN LIST WITH 2MILLION ITEM PYTHON
    </pattern>
    <template>
<![CDATA[<p>Put both collections into frozensets.</p><br/><br/><p>little performance test:</p><br/><br/><pre><code>import random<br/>from timeit import Timer<br/><br/>def random_strings(size):<br/>    alpha = 'abcdefghijklmnopqrstuvwxyz'<br/>    min = 3<br/>    max = 8<br/>    strings = []<br/>    for count in xrange(1, size):<br/>        current = ''<br/>        for x in random.sample(alpha, random.randint(min,max)):<br/>            current += x  <br/>        strings.append(current)<br/>    return strings<br/><br/>string_list_1 = random_strings(10000)<br/>string_list_2 = random_strings(10000)<br/><br/>def string_test():<br/>    common = filter(lambda x: x in string_list_2, string_list_1)<br/>    return common<br/><br/>def set_test():<br/>    string_set_1 = frozenset(string_list_1)<br/>    string_set_2 = frozenset(string_list_2)<br/>    common = string_set_1 &amp; string_set_2<br/>    return common<br/><br/>string_timer = Timer("__main__.string_test()", "import __main__")<br/>set_timer = Timer("__main__.set_test()", "import __main__")<br/>print string_timer.timeit(10)<br/># 22.6108954005<br/>print set_timer.timeit(10)<br/>#  0.0226439453<br/></code></pre><br/><br/><p>As you can see, set is exponentially faster. Should perform better than dictionary, too.</p><br/><br/><p>Of important note is that I included the time necessary to make the sets. This overhead will affect your performance, too, but with the exception of having one set that is much much smaller than the other, you'll net a large gain.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SET IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Let's say in your <code>settings.py</code> file you have:</p><br/><br/><pre><code>SITE_URL='www.mydomain.tld/somewhere/'<br/>SITE_NAME='My site'<br/></code></pre><br/><br/><p><strong>If you need that in just one or two views:</strong></p><br/><br/><pre><code>from django.shortcuts import render_to_response<br/>from django.conf import settings<br/><br/>def my_view(request, ...):<br/>    response_dict = {<br/>        'site_name': settings.SITE_NAME,<br/>        'site_url': settings.SITE_URL,<br/>    }<br/>    ...<br/>    return render_to_response('my_template_dir/my_template.html', response_dict)<br/></code></pre><br/><br/><p><strong>If you need to access these across a lot of apps and/or views, you can write a context processor to save code:</strong></p><br/><br/><p>James has a tutorial on this <br/><a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/" rel="nofollow">online</a>.</p><br/><br/><p>Some useful information on the when and if of context processors is available on this very site <br/><a href="http://stackoverflow.com/questions/831301/when-is-it-appropriate-to-use-django-context-processors">here</a>.</p><br/><br/><p>Inside your <code>my_context_processors.py</code> file you would:</p><br/><br/><pre><code>from django.conf import settings<br/><br/>def some_context_processor(request):<br/>    my_dict = {<br/>        'site_url': settings.SITE_URL,<br/>        'site_name': settings.SITE_NAME,<br/>    }<br/><br/>    return my_dict<br/></code></pre><br/><br/><p>Back in your <code>settings.py</code>, activate it by doing:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    ...<br/><br/>    # yours<br/>    'my_context_processors.some_context_processor',<br/>)<br/></code></pre><br/><br/><p>In your <code>views.py</code>, make a view use it like so:</p><br/><br/><pre><code>from django.shortcuts import render_to_response<br/>from django.template import RequestContext<br/><br/>def my_view(request, ...):  <br/>    response_dict = RequestContext(request)<br/>    ...<br/>    # you can still still add variables that specific only to this view<br/>    response_dict['some_var_only_in_this_view'] = 42<br/>    ...<br/>    return render_to_response('my_template_dir/my_template.html', response_dict)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I SELECT 100 RANDOM RECORD FROM THE DATABAS
    </pattern>
    <template>
<![CDATA[<pre><code>Content.objects.all().order_by('?')[:100]<br/></code></pre><br/><br/><p>See the <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by-fields" rel="nofollow">order_by docs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON V. 2.7 WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>From <a href="http://docs.djangoproject.com/en/1.2/faq/install/" rel="nofollow">Django's FAQ</a>:</p><br/><br/><blockquote><br/>  <p>Currently, Django itself officially supports any version of Python from 2.4 through 2.7, inclusive. </p><br/></blockquote><br/><br/><p>The Django Book (2nd edition) is written for Django version 1.0, while the latest release of Django is version 1.2.1, hence the difference.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CYTHON WITH DJANGO. DOE IT MAKE SENS
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Is it possible to optimize speed of a mission critical application developed in Django with Cython</p><br/></blockquote><br/><br/><p>It's doubtful.  </p><br/><br/><p>Most of a web application response time is the non-HTML elements that must be downloaded separately.  The usual rule of thumb is 8 static files per HTML page.  (.CSS, .JS, images, etc.)  </p><br/><br/><p>Since none of that static content comes from Django, most of your web application's time-line is Apache (or Nginx or something outside Django).</p><br/><br/><p>When looking at just the time to produce the HTML, you'll find that most of the time is spent waiting for the database (even if it's in-memory SQLite, you'll see that the database tends to dominate the timeline)</p><br/><br/><p>When you're through making Apache and the database go fast, then -- and only then -- you can consider the Python elements.</p><br/><br/><p>Bottom Line.  Don't waste any of your time on making Django and Python go fast.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK IS THE MOST FRIENDLI FOR SHARE HOST ENVIRON
    </pattern>
    <template>
<![CDATA[<p><strong>Django</strong> is just fine on shared hosting. I'm using a couple of home-cooked web apps based on Django, running on my BlueHost account without trouble.</p><br/><br/><p>What you need, basically, is to install your own version of Python (<a href="http://eli.thegreenplace.net/2008/10/20/installing-python-25-on-bluehost/" rel="nofollow">here's my guide</a> for 2.5 which should work similarly for newer versions), whichever you want, then install Django on top of it. Next, with tools like <code>fcgi</code> you can easily redirect any URL that points to your hosting to your Django app. Google for details.</p><br/><br/><p>P.S. if you're interested in this approach, ask me specific questions in the comments and I'll try to provide more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANNOT GROUP BY MONTH
    </pattern>
    <template>
<![CDATA[<p>If you're on PostgreSQL, the following might work:</p><br/><br/><pre><code>Link.objects.extra(select={'month': 'extract( month from pub_date )'}).values('month').annotate(dcount=Count('pub_date'))<br/></code></pre><br/><br/><p>I'm not sure how portable <code>extract</code> is across other databases.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST GET CALL TWICE WHEN USE JQUERI DJANGO AND GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>The problem is almost certainly that you are requesting the url <code>/xhrtest</code>, without a final slash. By default, Django will redirect that request to <code>/xhrtest/</code> - with a final slash - and that redirection will be a GET, not a POST.</p><br/><br/><p>For more info, see the <a href="http://docs.djangoproject.com/en/dev/ref/settings/?from=olddocs#append-slash" rel="nofollow"><code>APPEND_SLASH</code></a> setting that configures this behavior and <a href="http://code.djangoproject.com/browser/django/trunk/django/middleware/common.py#L55" rel="nofollow"><code>CommonMiddleware</code></a> module that uses it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REST CLIENT SERV EXAMPL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Well, first of all you can use <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a>, as @Tudorizer already mentioned.</p><br/><br/><p>But then again, as I see it (and I might be wrong!), REST is more of a set of design guidelines, rather than a concrete API. What it essentially says is that the interaction with your service should not be based on 'things you can do' (typical RPC-style methods), but rather 'things, you can act on in predictable ways, organized in a certain way' (the 'resource' entity and http verbs).</p><br/><br/><p>That being said, you don't need anything extra to write REST-style services using django.</p><br/><br/><p>Consider the following:</p><br/><br/><pre><code># urlconf<br/>from django.conf.urls.defaults import patterns, url<br/>urlpatterns = patterns('',<br/>    url(r'^tickets$', 'myapp.views.tickets', name='tickets'),<br/>    url(r'^ticket/(?P&lt;id&gt;\d+)$', 'myapp.views.tickets', name='ticket'),<br/>    url(r'^ticket$', 'myapp.views.tickets', name='ticket'),<br/>)<br/><br/># views<br/>def tickets(request):<br/>    tickets = Ticket.objects.all()<br/>    return render_to_response('tickets.html', {'tickets':tickets})<br/><br/>def ticket(request, id=None):<br/>    if id is not None:<br/>        ticket = get_object_or_404(Ticket, id=id)<br/>    if request.method == 'POST':<br/>        # create or update ticket here<br/>    else:<br/>        # just render the ticket (GET)<br/>    ...<br/></code></pre><br/><br/><p>... and so on.</p><br/><br/><p>What matters is how your service is exposed to its user, not the library/toolkit/framework it uses.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PER OBJECT PERMISS TO DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>I would simply add a method to each model <code>isOwndedBy(user)</code>, and it is upto the model to decide if it is owned by that user or not. In most case <code>isOwndedBy</code> can be a generic function in a base model class and you can tweak it in special cases. e.g.</p><br/><br/><pre><code>class RentalPhoto(BaseModel):<br/>    def isOwnedBy(self, user):<br/>        return self.rental.isOwnedBy(user)<br/></code></pre><br/><br/><p>This is generic enough and being explicit you will have full control how things behave.</p><br/><br/><p>To add new permission you can add that to your models e.g.</p><br/><br/><pre><code>class Rental(models.Model):<br/>    # ...<br/>    class Meta:<br/>        permissions = (<br/>            ("can_edit_any", "Can edit any rentals"),<br/>        )<br/></code></pre><br/><br/><p>I think instead of adding two permission for <code>any</code> and <code>own</code>, you should add only <code>own</code> permission , so each object already has <code>can_edit</code> which you can treat as user can edit only his object, and if user has permission can_edit_any than only he is allowed to edit all</p><br/><br/><p>Using this we can extend auth by adding a custom backend e.g. </p><br/><br/><pre><code>class PerObjectBackend(ModelBackend):<br/><br/>    def has_perm(self, user_obj, perm, obj=None):<br/>        allowed = ModelBackend.has_perm(self, user_obj, perm)<br/>        if perm.find('any') &gt;=0 :<br/>            return allowed<br/><br/>        if perm.find('edit') &gt;=0 or perm.find('delete') &gt;=0:<br/>            if obj is None:<br/>                raise Exception("Perm '%s' needs an object"%perm)<br/>            if not obj.isOwnedBy(user_obj):<br/>                return False<br/><br/>        return allowed<br/></code></pre><br/><br/><p>This is a very quick implemenation, in reality you can extend permission objects to check if it needs and object or not e.g. <code>permission.is_per_object</code> instead of doing crude string search but that should also work if you have standard names</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN LOGIN GIVE ME 403 CSRF ERROR
    </pattern>
    <template>
<![CDATA[<p>1) Do you have <code>'django.middleware.csrf.CsrfViewMiddleware'</code> in your <code>settings.MIDDLEWARE_CLASSES</code> ?</p><br/><br/><p>2) Are you sure you've always been on 1.2.2? That only came out last night...  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PISTON MATUR ENOUGH
    </pattern>
    <template>
<![CDATA[<p>I am currently using it and it's good enough for my needs, which are fairly simple (mostly just an easy way to set up a read-only API for model data). I do have a couple of criticisms:</p><br/><br/><ol><br/><li><p>It doesn't seem that jespern, the code's creator, is doing much in response to <a href="http://bitbucket.org/jespern/django-piston/issues?sort=-id">issues posted to bitbucket</a>. Possibly an unfair criticism, and activity in the <a href="http://groups.google.com/group/django-piston">django-piston Google Group</a>. Still it's frustrating to post an issue and encounter zero response whatsoever.</p></li><br/><li><p>It appears there are some inconsistencies or errors in the coding. For example, <a href="http://bitbucket.org/jespern/django-piston/issue/156/resource_uri-and-get_resource_uri_template">this issue</a> that I posted. (I may pursue it further in the group).</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND PYTHON + UWSGI
    </pattern>
    <template>
<![CDATA[<p>It will be very hard to give help to you if you do not post the commandline used :)</p><br/><br/><p>By the way, look at this:</p><br/><br/><p><a href="http://projects.unbit.it/uwsgi/wiki/Example" rel="nofollow">http://projects.unbit.it/uwsgi/wiki/Example</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEST
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>change the testloader to reuse the same test db every time and apply migrations when needed</p><br/></blockquote><br/><br/><p>(1) I don't see anything wrong in writing your own test runner that merely truncates the tables instead of dropping and creating the database. This is djangoic in that it solves a specific problem. There is a <a href="http://code.djangoproject.com/ticket/11627" rel="nofollow">ticket</a> open for allowing grouping of test cases into test suites. Once it is fixed you should be able to group your test cases into suites for easier management. You can also inspect the patch attached to the ticket and see if it will suit your purpose. </p><br/><br/><p>(2) As Ned <a href="http://stackoverflow.com/questions/3799061/speeding-up-django-testing/3799122#3799122">suggested</a> you can use an in memory database. This depends to a large extent on your data model and queries being portable across databases. </p><br/><br/><p>(3) If you haven't already try to reorganize your test cases. In my experience not all test classes need to sub class <code>django.test.TestCase</code>. Find out those test classes that can do with sub classing <code>unittest.TestCase</code>. This will speed up things a <em>little</em> bit.</p><br/><br/><p>(4) Reorganize fixtures. Move common fixtures to a single file and load it before the test run rather than inside each test class (using <code>fixtures = [...]</code>). </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOSE ABIL TO SEND POST REQUEST AFTER 2 AJAX UPDAT
    </pattern>
    <template>
<![CDATA[<p>First of all, you're doing something slightly weird. You use a jQuery-plugin which is supposed to handle form submission over ajax and repopulate the fields. Still, on success, you replace all the HTML of your form with HTML from the server, negating its work.</p><br/><br/><p>This breaks your calendar/time widgets, as you initialize the widgets on page load, telling them to act on some page elements, which you later replace. </p><br/><br/><p>But this doesn't by itself break the form submission.</p><br/><br/><p>Firstly, you don't need a plugin for attaching events "live" if you stop replacing the form HTML. Secondly, you don't really need a plugin for that anyway as it seems the built-in <a href="http://api.jquery.com/live/" rel="nofollow"><code>live()</code></a> method in jQuery should do the job (that is, if you actually do need this functionality). Thirdly, if you use plugins and they don't seem to be working properly, update to the latest version. The version you're using doesn't support the <code>html()</code> method in jQuery. </p><br/><br/><p>The livequery-plugin does its magic by overriding any jQuery-methods which might update the DOM. So when the programmer calls, f.ex, <code>append()</code>, it intercepts the call, calls <code>append()</code> for you, and then checks the document for new or disappeared elements matching your provided selector. The version you're using is not aware of <code>html()</code> and therefore does not intercept it.</p><br/><br/><p>So it works the first time as you initiate a DOM-check on page load. When that result is returned, the event is actually attached to the new submit-button because the calls to <code>html()</code> to set the new form and completion-message internally calls intercepted methods. Therefore, the second submission works as desired. But when the second call comes back, a jQuery cache is used internally, not calling any intercepted methods. So the event doesn't get attached to the submit-button, making it act as a regular form submission button. </p><br/><br/><p>To fix, stop using live-attaching for event-listening if there's not a non-apparent need for it. If there is, use the built in one or at least update your livequery plugin. Also, don't replace the whole form HTML. Again, if there's a non-apparent reason, re-initialize you calendar widget each time after setting the HTML.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECIM TO JSON
    </pattern>
    <template>
<![CDATA[<p>What you can do is extend the JSONDecoder class to provide a custom serializer for the Decimal type, similar to the example in this document: <a href="http://docs.python.org/py3k/library/json.html" rel="nofollow">http://docs.python.org/py3k/library/json.html</a></p><br/><br/><pre><code>&gt;&gt;&gt; import json<br/>&gt;&gt;&gt; class DecimalEncoder(json.JSONEncoder):<br/>...     def default(self, obj):<br/>...         if isinstance(obj, Decimal):<br/>...             return "%.2f" % obj<br/>...         return json.JSONEncoder.default(self, obj)<br/>...<br/></code></pre><br/><br/><p>That's a nonworking example of how to do it, hopefully a good starting point for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL DJANGO THROUGH KWARG
    </pattern>
    <template>
<![CDATA[<p>As long as the PK is the same, the existing row will be overwritten.</p><br/><br/><pre><code>obj = Object(index=id, **fields)<br/>obj.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS. EXPLICIT REL IMPORT OF PYTHON MODUL
    </pattern>
    <template>
<![CDATA[<p>Absolute imports. From PEP 8:</p><br/><br/><blockquote><br/>  <p>Relative imports for intra-package imports are highly<br/>  discouraged.<br/>        Always use the absolute package path for all imports.<br/>        Even now that PEP 328 [7] is fully implemented in Python 2.5,<br/>        its style of explicit relative imports is actively discouraged;<br/>        absolute imports are more portable and usually more readable.</p><br/></blockquote><br/><br/><p>Explicit relative imports are a nice language feature (I guess), but they're not nearly as explicit as absolute imports. The more readable form is:</p><br/><br/><pre><code>import A.A<br/>import A.B.B<br/></code></pre><br/><br/><p>especially if you import several different namespaces. If you look at some well written projects/tutorials that include imports from within packages, they usually follow this style.</p><br/><br/><p>The few extra keystrokes you take to be more explicit will save others (and perhaps you) plenty of time in the future when they're trying to figure out your namespace (especially if you migrate to 3.x, in which some of the package names have changed).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET STORAG ENGIN DEFAULT CHARSET
    </pattern>
    <template>
<![CDATA[<p>I don't think you can change storage engines on a table-by-table basis, but you can do it on a database-by-database basis.  This, of course, means that InnoDB foreign key constraints, for example, can't apply to foreign keys to MyISAM tables.</p><br/><br/><p>So you need to declare two "databases", which may very well be on the same server:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'django.db.backends.mysql',<br/>        #...<br/>    }<br/>    'innodb': {<br/>        'ENGINE': 'django.db.backends.mysql',<br/>        #...<br/>        'OPTIONS': { 'init_command': 'SET storage_engine=INNODB;' }<br/>    }<br/>}<br/></code></pre><br/><br/><p>And you'll just need to apply <code>using('innodb')</code> to querysets for tables in InnoDB land.</p><br/><br/><p>As for UTF-8, again, I think you need to do this at the database level.  I don't think <code>syncdb</code> creates the database for you, just the tables.  You should create the database manually anyway, so you can have privileges set right before running <code>syncdb</code>.  The database creation command you want is:</p><br/><br/><pre><code>CREATE DATABASE django CHARACTER SET utf8;<br/></code></pre><br/><br/><hr><br/><br/><p>That said, I usually recommend that people create two django users in the database: one for database schema work ("admin") and one for everything else (with different passwords):</p><br/><br/><pre><code>CREATE DATABASE django CHARACTER SET utf8;<br/>CREATE USER 'django_site'@'localhost' IDENTIFIED BY 'password';<br/>GRANT SELECT, INSERT, UPDATE, DELETE ON django.* TO django_site;<br/>CREATE USER 'django_admin'@'localhost' IDENTIFIED BY 'password';<br/>GRANT SELECT, INSERT, UPDATE, DELETE ON django.* TO django_admin;<br/>GRANT CREATE, DROP, ALTER, INDEX, LOCK TABLES ON django.* TO django_admin;<br/>FLUSH PRIVILEGES;<br/></code></pre><br/><br/><p>(Note that this needs to be done for each database.)</p><br/><br/><p>For this to work, you need to modify <code>manage.py</code>:</p><br/><br/><pre><code>import sys<br/>if len(sys.argv) &gt;= 2 and sys.argv[1] in ["syncdb", "dbshell", "migrate"]:<br/>    os.environ['DJANGO_ACCESS'] = "ADMIN"<br/></code></pre><br/><br/><p>Then in your <code>settings.py</code>, use the environment variable to pick the right settings.  Make sure the site (i.e. non-admin) user is the default.</p><br/><br/><p>(Additionally, I don't store the database setup, <code>SECRET_KEY</code>, or anything else sensitive in <code>settings.py</code> because my Django project is stored in Mercurial; I have <code>settings.py</code> pull all that in from an external file accessible only by Django's user and the server admins.  I'll leave the "how" as an exercise for the reader... because I detailed some of it in answers to others' questions, and I'm too lazy to look it up right now.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON DJANGO
    </pattern>
    <template>
<![CDATA[<p>No. </p><br/><br/><p>Django is a <a href="http://www.python.org/" rel="nofollow">Python</a> <a href="http://en.wikipedia.org/wiki/Software_framework" rel="nofollow">framework</a>, Wordpress is a <a href="http://www.php.net/" rel="nofollow">PHP</a> <a href="http://en.wikipedia.org/wiki/Content_management_system" rel="nofollow">CMS</a>. </p><br/><br/><p>It's like asking if you can plug a Ford motor on a white poney.</p><br/><br/><p>However, you can install both on the same machine, and make them share data. But it requires a professional knowledge of the topic and time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON ON WINDOW NO HIGHLIGHT OR AUTO COMPLET
    </pattern>
    <template>
<![CDATA[<p>You need to install <a href="http://pypi.python.org/pypi/pyreadline" rel="nofollow">PyReadline</a>,<br/>documentation is <a href="http://packages.python.org/pyreadline/introduction.html" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAN YOU ACCESS AN OBJECT OR DICTIONARI INTERCHANG
    </pattern>
    <template>
<![CDATA[<p>You could use a <a href="http://pypi.python.org/pypi/bunch/1.0.0" rel="nofollow">Bunch class</a>, which transforms the dictionary into something that accepts dot notation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAIT FOR DJANGO TO START SUPPORT PYTHON 3
    </pattern>
    <template>
<![CDATA[<p>No. Don't wait. </p><br/><br/><p>Why? <strong>Pretty much all django libraries are written for Python 2.x</strong>, and if you ever plan on using any of them with Python 3 with the next major release of Django then you'll be waiting not 1 but 3-4 years when everyone starts converting their code.</p><br/><br/><p>In this time, you could have already mastered django and could have worked and launched many sites, could've got a Django gig, etc. </p><br/><br/><p>Start immediately and don't postpone!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB FRAMEWORK OTHER THEN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There is a framework called <a href="http://pyjs.org/" rel="nofollow">Pyjamas</a> which is along the lines of Google Web Toolkit which was used to build Gmail. Seems to fit the bill for your AJAX requirements. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>For me, using code from <a href="http://kuhlit.blogspot.com/2010/12/ajax-uploads-in-django-with-little-help.html">Alex Kuhl</a>, <code>request.GET['qqfile']</code> had the filename and <code>request.read()</code> (in Django 1.3) returned the data.</p><br/><br/><p>request.FILES was only used in a scenario that hasn't yet happened for me.  I'm using ajax-upload to talk directly to Photologue, and my code looks something like this:</p><br/><br/><pre><code>def save_upload( uploaded, filename, raw_data ):<br/>    """<br/>    raw_data: if True, upfile is a HttpRequest object with raw post data<br/>    as the file, rather than a Django UploadedFile from request.FILES<br/>    """<br/>    try:<br/>        filename = os.path.normpath(os.path.join(IMAGE_UPLOAD_PATH, filename))<br/>        with BufferedWriter( FileIO( filename, "wb" ) ) as dest:<br/>            # if the "advanced" upload, read directly from the HTTP request<br/>            # with the Django 1.3 functionality<br/>            if raw_data:<br/>                (dirName, fileName) = os.path.split(filename)<br/>                (fileBaseName, fileExtension)=os.path.splitext(fileName)<br/>                #<br/>                # right here, if fileBaseName is less than n characters, might want to slap on a date just for fun<br/>                #<br/>                try:<br/>                    i_can_has_p = Photo.objects.get(title=fileBaseName)<br/>                    title = fileBaseName + "_" + str(datetime.datetime.now().strftime("%Y%m%dT%H%M%S"))<br/>                except Photo.DoesNotExist:<br/>                    title = fileBaseName<br/>                title_slug = slugify(title)<br/>                p = Photo(title=title, title_slug=title_slug)<br/>                p.image.save(filename,ContentFile(uploaded.read()))<br/>            # if not raw, it was a form upload so read in the normal Django chunks fashion<br/>            else:<br/>                # TODO: figure out when this gets called, make it work to save into a Photo like above<br/>                for c in uploaded.chunks( ):<br/>                    dest.write( c )<br/>    except IOError:<br/>        # could not open the file most likely<br/>        return False<br/>    return True<br/><br/>def ajax_upload( request ):<br/>  if request.method == "POST":<br/>      # AJAX Upload will pass the filename in the querystring if it is the "advanced" ajax upload<br/>      if request.is_ajax( ):<br/>          # the file is stored raw in the request<br/>          upload = request<br/>          is_raw = True<br/>          try:<br/>              filename = request.GET[ 'qqfile' ]<br/>          except KeyError:<br/>              return HttpResponseBadRequest( "AJAX request not valid" )<br/>      # not an ajax upload, so it was the "basic" iframe version with submission via form<br/>      else:<br/>          is_raw = False<br/>          if len( request.FILES ) == 1:<br/>              # FILES is a dictionary in Django but Ajax Upload gives the uploaded file an<br/>              # ID based on a random number, so it cannot be guessed here in the code.<br/>              # Rather than editing Ajax Upload to pass the ID in the querystring, note that<br/>              # each upload is a separate request so FILES should only have one entry.<br/>              # Thus, we can just grab the first (and only) value in the dict.<br/>              upload = request.FILES.values( )[ 0 ]<br/>          else:<br/>              raise Http404( "Bad Upload" )<br/>          filename = upload.name<br/><br/>  # save the file<br/>  success = save_upload( upload, filename, is_raw )<br/><br/>  # let Ajax Upload know whether we saved it or not<br/>  ret_json = { 'success': success, }<br/>  return HttpResponse( json.dumps( ret_json ) )<br/></code></pre><br/><br/><p>In my case, <code>ajax_upload</code> is the function called by ajax's <code>action:</code> parameter</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP RAIL OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Without experience in either one, with only two weeks to deliver a product, I would choose neither.  If you have limited time, you need to leverage what you already know.  It would take you two weeks just to get comfortable in either environment.  Rails and Django are both popular and make it easy to accomplish a lot with a little time because of the number of details that are done for you in the background, without you having to think about it.  If you don't know what those details are, you're not going to be able to leverage the power of either platform, and you're going to end up with a codebase that is a tangled mess of code that you don't need and is going to impact maintainability.</p><br/><br/><p>I do take issue @knutin's comment about the ease of deployment with Rails.  That might have been true a few years ago, but today a Rails app is pretty easy to deploy even on a naked server, and if you plan on deploying on heroku its even easier.  As far as I know there isn't a platform for django apps that offers anything like the scalability or ease of deployment that heroku and rails offers.</p><br/><br/><p>if you're dead set on doing one or the other, I'd recommend rails with the use of formtastic for generating your CRUD forms.  Formtastic offers far more flexibility than the built-in Rails scaffold generators do, so you can go back and make things better while still using them.</p><br/><br/><p>Lastly, if you're determined to use something despite a learning curve, I've heard a lot of good things about <a href="http://hobocentral.net/" rel="nofollow">hobo</a> though I haven't yet used it on a project.  You may find it easier to get started with than straight-up Rails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MESSAG RESID IN THE CONTROL OR MODEL FOR A WEB SITE WEB APP
    </pattern>
    <template>
<![CDATA[<p>If I understand your question, you are asking whether or not you should hard-code a string value into your code. In compiled languages, you often use a reference to a string, instead of entering the actual string. ala:</p><br/><br/><pre><code>message.success(request, message_resource.success )<br/></code></pre><br/><br/><p>This gives you the freedom to change the string value without re-compiling the code, and has a performance benefit in some instances.</p><br/><br/><p>Because <strong>Python</strong> is dynamic this really isn't required, but depending on the size of the project, may be beneficial. </p><br/><br/><p>Imagine a situation where the software is used by people speaking different languages, you could detect the required language somewhere else in your code and initialize <code>message_resource.success</code>, as well as any other strings, to be in said language.</p><br/><br/><p>here is a simple example:</p><br/><br/><p>german.py</p><br/><br/><pre><code># german language messages<br/>success = "Sie folgten!"<br/>failure = "Sie fallen aus!"<br/></code></pre><br/><br/><p>english.py</p><br/><br/><pre><code>#english language messages<br/>success = "You succeeded!"<br/>failure = "You fail!"<br/></code></pre><br/><br/><p>main.py</p><br/><br/><pre><code># main<br/><br/># import english language<br/>message_resource = __import__('english');<br/><br/>print message_resource.success<br/>print message_resource.failure<br/><br/># import german language<br/>message_resource = __import__('german');<br/><br/>print message_resource.success<br/>print message_resource.failure<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN A 401 UNAUTHOR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Make a function to do it for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOUTH WITH DJANGO AUDIT LOG
    </pattern>
    <template>
<![CDATA[<p>Despite using the steps in @WoLpH's answer, I still couldn't create the migration. I had to modify the audit_log/models/fields.py file. Here's how my LastUserField field looks like:</p><br/><br/><pre><code>class LastUserField(models.ForeignKey):<br/>    """ <br/>    A field that keeps the last user that saved an instance<br/>    of a model. None will be the value for AnonymousUser.<br/>    """<br/><br/>    def __init__(self, **kwargs):<br/>        kwargs.pop('null', None)<br/>        kwargs.pop('to', None)<br/>        super(LastUserField, self).__init__(User, null = True, **kwargs)<br/><br/>    def contribute_to_class(self, cls, name):<br/>        super(LastUserField, self).contribute_to_class(cls, name)<br/>        registry = registration.FieldRegistry(self.__class__)<br/>        registry.add_field(cls, self)<br/></code></pre><br/><br/><p>The following was added to my models.py file (which didn't work) before I had to resort to doing this:</p><br/><br/><pre><code>rules = [((fields.LastUserField,),<br/>    [],    <br/>    {   <br/>        'to': ['rel.to', {'default': User}],<br/>        'null': ['null', {'default': True}],<br/>    },)]<br/><br/># Add the rules for the 'LastUserField'<br/>add_introspection_rules(rules, ['^audit_log\.models\.fields\.LastUserField'])<br/></code></pre><br/><br/><p>Any suggestions on what I could do to avoid this hackery?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL FROM MODUL IMPORT
    </pattern>
    <template>
<![CDATA[<p>As we discussed in the comments, the problem is not with the code, but the way you are updating the source. python caches modules in <code>sys.modules</code>. You can reload individual modules using the <code>reload</code> function, but for many changes it's best to reload the entire shell. In many cases it looked as though the changes had propagated because the error messages seemed to have changed, this is because python doesn't cache the source code of the file, so when it references code, it shows you the newest version. Hopefully now, you can apply the other answers with more success.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .AGGREG ( ) ON A VALU INTRODUC USE .EXTRA ( SELECT ... ) IN A DJANGO QUERI
    </pattern>
    <template>
<![CDATA[<p>You could use a custom aggregate function to produce your query:</p><br/><br/><pre><code>WEEK_FUNC = 'STRFTIME("%%%%W", %s)' # use 'WEEK(%s)' for mysql<br/><br/>class WeekCountAggregate(models.sql.aggregates.Aggregate):<br/>    is_ordinal = True<br/>    sql_function = 'WEEK' # unused<br/>    sql_template = "COUNT(%s)" % (WEEK_FUNC.replace('%%', '%%%%') % '%(field)s')<br/><br/>class WeekCount(models.aggregates.Aggregate):<br/>    name = 'Week'<br/>    def add_to_query(self, query, alias, col, source, is_summary):<br/>        query.aggregates[alias] = WeekCountAggregate(col, source=source, <br/>            is_summary=is_summary, **self.extra)<br/><br/><br/>&gt;&gt;&gt; game_objects.extra(select={'week': WEEK_FUNC % '"games_game"."date"'}).values('week').annotate(count=WeekCount('pk'))<br/></code></pre><br/><br/><p>But as this API is undocumented and already requires bits of raw SQL, you might be better off using a <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/" rel="nofollow">raw query</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASYNCHRON PROCESS
    </pattern>
    <template>
<![CDATA[<p>Celery would be perfect for this.</p><br/><br/><p>Since what you're doing is relatively simple (read: you don't need complex rules about how tasks should be routed), you could probably get away with using the Redis backend, which means you don't need to setup/configure RabbitMQ (which, in my experience, is more difficult).</p><br/><br/><p>I use Redis with the most a dev build of Celery, and here are the relevant bits of my config:</p><br/><br/><pre><br/># Use redis as a queue<br/>BROKER_BACKEND = "kombu.transport.pyredis.Transport"<br/>BROKER_HOST = "localhost"<br/>BROKER_PORT = 6379<br/>BROKER_VHOST = "0"<br/><br/># Store results in redis<br/>CELERY_RESULT_BACKEND = "redis"<br/>REDIS_HOST = "localhost"<br/>REDIS_PORT = 6379<br/>REDIS_DB = "0"<br/></pre><br/><br/><p>I'm also using <code>django-celery</code>, which makes the integration with Django happy.</p><br/><br/><p>Comment if you need any more specific advice.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YPIC .NET DDD ARCHITECTUR VS DJANGO RAIL PRACTIC
    </pattern>
    <template>
<![CDATA[<p>Nice, a lot of discussion already. Here's my opinion on the matter:</p><br/><br/><p>Usually it's far easier to access the domain model straight for your forms. It's one of those things that give coding in Rails (I don't know Django, but I'm guessing it's the same) a huge productivity boost. There is hardly any coding need: have a database table, build some html and a simple controller in the middle and you're done. Because there is hardly any code involved, you can change faster, that's why it works well in Agile environments.</p><br/><br/><p>But, there is a time when this falls short. Sometimes, your application is too complex to make this work properly. That's when you can add ViewModels, Presenters, Facades, or whatever you want to call them. There is nothing stopping you from doing this in Rails or Django. In fact, Rails 3 introduced ActiveModel as a set of mixins to make every object work as easy with forms as when dealing with ActiveRecord.</p><br/><br/><p>So the question isn't why are Rails and Django not doing it, but when should I use it? Calling DDD overengineering isn't true either. It's about doing "just enough" to solve the problem that you have. Keep the amount of code and complexity as low as possible, and you will be easier to maintain.</p><br/><br/><p>I would agree that there are certainly lessons to be learned from Java/.NET. Usually they have gotten the design pattern thing worked out nicely. But saying that Rubyists and Pythonistas didn't do enough big projects is not true. The power comes in recognizing when you can get away with a simple solution.</p><br/><br/><p>I do think Java programmers (I have no experience with .NET programmers) tend to overengineer things. Maybe it's the frameworks they use. It seems to try to force the programmer to do it "The Right Way", thus making it overly complex.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO LOG TO CONSOL UNDER RUNSERV LOG TO FILE UNDER APACH
    </pattern>
    <template>
<![CDATA[<p>Text printed to stderr will show up in httpd's error log when running under mod_wsgi. You can either use <code>print</code> directly, or use <code>logging</code> instead.</p><br/><br/><pre><code>print &gt;&gt;sys.stderr, 'Goodbye, cruel world!'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER PERMISS TO CERTAIN VIEW
    </pattern>
    <template>
<![CDATA[<p>Users that cannot add or change etc. a certain model, will not be able to see it in the admin.</p><br/><br/><p>If we are talking about your custom created views then you could create something which checks a user for a permission and returns a 404 if they do not have that permission. Permissions are linked to models and a group can be assigned various permissions.</p><br/><br/><p>You can add a permission to a model like this:</p><br/><br/><pre><code># myproject/myapp/models.py<br/><br/>class MyModel(models.Model):<br/>    class Meta:<br/>        permissions = (<br/>            ('permission_code', 'Friendly permission description'),<br/>        )<br/></code></pre><br/><br/><p>Then you can check a if a user has permission like this:</p><br/><br/><pre><code>@user_passes_test(lambda u: u.has_perm('myapp.permission_code'))<br/>def some_view(request):<br/>    # ...<br/></code></pre><br/><br/><p>Using permissions you can then easily add or remove them from users and groups simply using the admin interface.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADD A DB INDEX TO THI DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Unless specified otherwise, an index will be created for a <code>ForeignKey</code>.  Relevant source code:</p><br/><br/><pre><code>class ForeignKey(RelatedField, Field):<br/>    # snip<br/>    def __init__(self, to, to_field=None, rel_class=ManyToOneRel, **kwargs):<br/>        # snip<br/>        if 'db_index' not in kwargs:<br/>            kwargs['db_index'] = True<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEXT STEP FOR MOVE FROM APPENGIN TO FULL DJANGO
    </pattern>
    <template>
<![CDATA[<p>First up, you can benefit by doing some RoR work by learning a new language. However, I don't know if that'll be entirely beneficial to you right now since you still are learning. I'd stick with Python and Django (or AppEngine) for the moment, until you can grasp some of the more advance concepts. Then, by all means, learning new languages will be fantastic.</p><br/><br/><p>As for moving to Django from AppEngine. There isn't a whole lot that's different. The way you define models is similar, but has different types for the definition. As you mentioned, hosting is another consideration.</p><br/><br/><p>There should be plenty of hosting options (mod_wsgi is what you're after) based on Apache. Django in particular has seen quite a bit of popularity, and hosting usually springs up for popular frameworks.</p><br/><br/><p>I don't think you'll need to know too much sysadmin stuff. This will all depend on the kind of hosting you can find. Same goes for the database. Hosting providers usually offer databases preconfigured so you shouldn't need to worry about that too much.</p><br/><br/><p>Django, along with many other frameworks, provide an ORM (Object Relational Mapper) which abstracts away having to write SQL, by calling methods on objects and accessing their properties. I'd advise learning a little bit of SQL to understand it at a bare minimum though.</p><br/><br/><p>The <a href="http://docs.djangoproject.com/en/dev/intro/tutorial01/" rel="nofollow">Django tutorial</a> is excellent! If you decide to go the Django route, I'd highly recommend working through the entire thing. A development server comes bundled, so you can try out your work instantly without worrying about a provider. Once you have something you want to share with the world, you can worry about hosting then.</p><br/><br/><p>I started off using Windows for Django development and it was quite easy. The amount of command line work you need to do is minimal. Really. Not something you need to worry about, as the tutorial covers all 4 or so commands you need to know.</p><br/><br/><p><a href="http://djangohosting.org/" rel="nofollow">Django hosting</a> provides links to hosting providers, though I'm not sure how up to date that list is.</p><br/><br/><p>Getting started in Django is pretty simple. Once you want to host it, there's a bit more work involved - but that can come later. The friction is minimal. Follow the tutorial, it will take you through running the server, setting up the database (a free one comes bundled), and coding your first app.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ANDROID EMUL FROM PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>I still haven't gotten around to properly solving this problem, but using subprocess.Popen allows me to perform commands on the emulator afterwards:</p><br/><br/><pre><code>print 'Starting emulator...'<br/>subprocess.Popen(['emulator', '-avd', 'testavd'])<br/>os.system('adb wait-for-device')<br/>os.system('Perform whatever adb commands you need')<br/></code></pre><br/><br/><p>It's worth noting that this is using the django development server, which has been started using sudo, so obviously this is far from ideal.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I18N SETLANG NOT CHANG SESSION DATA DJANGO LANGUAG
    </pattern>
    <template>
<![CDATA[<p>I've investigated this a bit and here's some things to check:</p><br/><br/><p>1- Add this line in your /friend/invite/ associated view to ensure the set_lang view is working correctly.</p><br/><br/><pre><code>print request.LANGUAGE_CODE<br/></code></pre><br/><br/><p>If it does not output 'tl', it's probably because you're missing django locale files for your language since they are in your settings file. These files should be located under django/conf/locale/tl. There's more than one files in there and these won't be generated by the makemessages command.</p><br/><br/><p>2- If it does output 'tl', that must mean you have a tl folder in django code tree. Then I would try and make it work with a supported language first. When trying to make your example work, I wasn't able to get tagalog either. By switching to another supported language, french in my case, I've been able to troubleshoot my problems.</p><br/><br/><p>3- It would help to have the template to render /friend/invite/ view so we can see what you're translating. In my test I used a django string to avoid having to generate my own messages. I did what the documentation says and copied from english to use in tagalog. I then modified one of the strings in there. The problem is, django uses a binary file generated from the text one so only modifying the text version would still display django strings in english even if under tagalog. I discovered that when instead of using english as a basis, I used the french versions to put under tagalog.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI USE IN A LARG DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>So what I actually ended up doing is building something that you can 'wrap' a QuerySet in. It works by making a deepcopy of the QuerySet, using the slice syntax--e.g., <code>some_queryset[15:45]</code>--but then it makes another deepcopy of the original QuerySet when the slice has been completely iterated through. This means that only the set of Objects returned in 'this' particular slice are stored in memory.</p><br/><br/><pre><code>class MemorySavingQuerysetIterator(object):<br/><br/>    def __init__(self,queryset,max_obj_num=1000):<br/>        self._base_queryset = queryset<br/>        self._generator = self._setup()<br/>        self.max_obj_num = max_obj_num<br/><br/>    def _setup(self):<br/>        for i in xrange(0,self._base_queryset.count(),self.max_obj_num):<br/>            # By making a copy of of the queryset and using that to actually access<br/>            # the objects we ensure that there are only 'max_obj_num' objects in<br/>            # memory at any given time<br/>            smaller_queryset = copy.deepcopy(self._base_queryset)[i:i+self.max_obj_num]<br/>            logger.debug('Grabbing next %s objects from DB' % self.max_obj_num)<br/>            for obj in smaller_queryset.iterator():<br/>                yield obj<br/><br/>    def __iter__(self):<br/>        return self<br/><br/>    def next(self):<br/>        return self._generator.next()<br/></code></pre><br/><br/><p>So instead of...</p><br/><br/><pre><code>for obj in SomeObject.objects.filter(foo='bar'): &lt;-- Something that returns *a lot* of Objects<br/>    do_something(obj);<br/></code></pre><br/><br/><p>You would do...</p><br/><br/><pre><code>for obj in MemorySavingQuerysetIterator(in SomeObject.objects.filter(foo='bar')):<br/>    do_something(obj);<br/></code></pre><br/><br/><p>Please note that the intention of this is to <em>save memory</em> in your <em>Python interpreter</em>. It essentially does this by making <strong>more</strong> database queries. Usually people are trying to do the exact opposite of that--i.e., minimize database queries as much as possible without regards to memory usage. Hopefully somebody will find this useful though.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE RENDER TO RESPONS AND SET COOKI
    </pattern>
    <template>
<![CDATA[<p>Yes, not a problem. The principle is exactly the same.</p><br/><br/><pre><code>response = render_to_response(template_name, locals(), context-etc..)<br/>response.set_cookie("favorite_color",request.GET["favorite_color"])<br/>return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN AND RAWQUERYSET
    </pattern>
    <template>
<![CDATA[<p>I managed to achieve it using the following:</p><br/><br/><pre><code>paginator = Paginator(files, 12)<br/>paginator._count = len(list(files))<br/></code></pre><br/><br/><p>The code in django.core.paginator.py:</p><br/><br/><ul><br/><li>checks for whether _count is set</li><br/><li>if not then tries to run .count() which doesn't exist</li><br/><li>if not then tries plain len</li><br/></ul><br/><br/><p>len on a raw_queryset doesn't work but converting the actual paginator object to a list works find for me in Django 1.3</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN MEDIA PREFIX URL ISSU
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/ref/settings/#admin-media-prefix" rel="nofollow"><code>ADMIN_MEDIA_PREFIX</code></a> is meant to be an absolute URL prefix, it has nothing to do with the <code>MEDIA_URL</code> - both can point to completely different points. Admittedly, the (bad) choice of "_PREFIX" in the name somewhat suggests that.</p><br/><br/><p>So, instead of <code>{{ MEDIA_URL }}{{ADMIN_MEDIA_PREFIX}}css/base.css</code> it must be <code>{% admin_media_prefix %}css/base.css</code>. And then you have to ensure that the web server serves the admin media files on '/admin-media/'.</p><br/><br/><p>Note that I used the <code>admin_media_prefix</code> tag above, which needs <code>{% load adminmedia %}</code> at the beginning of the template. The regular media context processor only gives you the MEDIA_URL variable, unfortunately.</p><br/><br/><p>In order to override the vanilla admin media serving, try something like this in your URLconf:</p><br/><br/><pre><code># A handy helper function I always use for site-relative paths<br/>def fromRelativePath(*relativeComponents):<br/>    return os.path.join(os.path.dirname(__file__), *relativeComponents).replace("\\","/")<br/><br/>[...]<br/><br/>url("^admin-media/(?P&lt;path&gt;.*)$",<br/>    "django.views.static.serve",<br/>    {"document_root": fromRelativePath("media", "admin-media")})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER AN ORDER DICTIONARI IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<pre><code>return render_to_response('results.html',<br/>    {'data': sorted(results_dict.iteritems())})<br/><br/>{% for key, value in data %}<br/>    &lt;tr&gt;<br/>        &lt;td&gt; {{ key }}: &lt;/td&gt; &lt;td&gt; {{ value }} &lt;/td&gt;<br/>    &lt;/tr&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A MODEL HA CHANG BEFOR CALL SAVE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.activestate.com/pypm/django-dirtyfields/" rel="nofollow">http://code.activestate.com/pypm/django-dirtyfields/</a></p><br/><br/><p>Tracks dirty/changed fields on a django model instance.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLASK BOTTL PROJECT ORGAN
    </pattern>
    <template>
<![CDATA[<p>I don't have any experience with Bottle, but take a look at the <a href="http://flask.pocoo.org/docs/patterns/packages/" rel="nofollow">Flask docs</a> on larger applications.  My Flask apps all use multiple Flask <a href="http://flask.pocoo.org/docs/api/#module-objects" rel="nofollow"><code>Module</code></a> objects as that page recommends, one per Python module, and it seems to work just fine.</p><br/><br/><p>One thing that's nice about the <code>Module</code> objects is that you can customize dispatch on each one to create URL routing "domains" in your app.  So for example, I'm trying to ape a Windows app in some of my code so I have a <code>CaseInsensitiveModule</code> that does case-insensitive dispatch, and I rigged up a <code>RemoteModule</code> to turn HTTP requests into Python methods using the Flask/Werkzeug routing system.</p><br/><br/><p>(Note that in current Flask versions, <code>Module</code>s are now <code>Blueprint</code>s.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER SCHEME FOR A DJANGO PRODUCT SERVER
    </pattern>
    <template>
<![CDATA[<p>I like having regular users on a system:</p><br/><br/><ul><br/><li><p>multiple admins show up in sudo logs -- there's nothing quite like asking a specific person <em>why</em> they made a specific change.</p></li><br/><li><p>not all tasks require admin privileges, but admin-level mistakes can be more costly to repair</p></li><br/><li><p>it is easier to manage the <code>~/.ssh/authorized_keys</code> if each file contains only keys from a specific user -- if you get four or five different users in the file, it's harder to manage. Small point :) but it is so easy to write <code>cat ~/.ssh/id_rsa.pub | ssh user@remotehost "cat - &gt; ~/.ssh/authorized_keys"</code> -- if one must use <code>&gt;&gt;</code> instead, it's precarious. :)</p></li><br/></ul><br/><br/><p>But you're right, you can do all your work as root and not bother with regular user accounts.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADEQU SCAFFOLD FOR DJANGO ( A LA RUBI ON RAIL )
    </pattern>
    <template>
<![CDATA[<p>I've looked and not yet found something for Django quite like the Rails Generate command. Django has a bit of a different philosophy. It gives you tools to make doing things easily but doesn't actually do it for you (except the admin interface). In the grand scheme of things, I think this is OK. When I use rails' scaffolding I'm not able to often keep much of the auto-generated stuff. When I do, the django admin interface would probably also have worked and given me more functionality.</p><br/><br/><p>Instead, what I suggest is reading through the <a href="http://docs.djangoproject.com/en/1.2/intro/tutorial04/">Django tutorial step 4</a>, which introduces generic views, and then <a href="http://djangobook.com/en/2.0/chapter07/">chapter 7 of the Django book</a> which introduces forms. You have to be patient on chapter 7 because the authors think you want to know the minute details of the hard-way before they teach you the easy way. (try searching the page for the phrase django.forms)</p><br/><br/><p>In the end the amount of work you have to do between rails and django is equivalent, and maybe slightly less with Django. However you don't have one command to automatically give you boilerplate code to use as a foundation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUID TO USE AJAX IN A DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Using Ajax in Django is just like any other web request that comes to your Django application. You need to route the request to your controller which has to provide some HTML to jQuery's Ajax handler, that is, <code>X function(data){}</code>.</p><br/><br/><p>For more understanding, see <em><a href="http://webcloud.se/log/AJAX-in-Django-with-jQuery/" rel="nofollow">Ajax in Django with jQuery</a></em>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM DECOR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think you don't even have to write your own decorator for this as django has this decorator already included. It's called <code>user_passes_test</code> (<a href="http://docs.djangoproject.com/en/1.0/topics/auth/#limiting-access-to-logged-in-users-that-pass-a-test" rel="nofollow">decorators.user_passes_test()</a>)</p><br/><br/><p>There's even a snippet that extends this decorator and which should be pretty appropriate for your use case: <a href="http://djangosnippets.org/snippets/1703/" rel="nofollow">http://djangosnippets.org/snippets/1703/</a></p><br/><br/><p>If you really want to write your own decorator then there's a lot of good documentation on the net.</p><br/><br/><ul><br/><li><a href="http://bradmontgomery.blogspot.com/2009/04/restricting-access-by-group-in-django.html" rel="nofollow">http://bradmontgomery.blogspot.com/2009/04/restricting-access-by-group-in-django.html</a></li><br/><li><a href="http://www.djangofoo.com/253/writing-django-decorators" rel="nofollow">http://www.djangofoo.com/253/writing-django-decorators</a></li><br/><li><a href="http://uswaretech.com/blog/2009/06/understanding-decorators" rel="nofollow">http://uswaretech.com/blog/2009/06/understanding-decorators</a></li><br/></ul><br/><br/><p>An well, just put your decorator in a module on your path and you can import it from any other module.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN DEBUG DJANGO S MANAGE.PI FROM ECLIPS
    </pattern>
    <template>
<![CDATA[<p>Seems like lack of --noreload causes this effect. Weird.</p><br/><br/><p>EDIT: First I thought it was the working directory of the project.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO V RAIL QUESTION WHICH IS BETTER FOR COMPLEX WEBAPP
    </pattern>
    <template>
<![CDATA[<p>I'm going to warn you up-front that I'm a Django developer that keeps modest tabs on Rails' development and I've never had to develop or maintain a complex Rails application, so I'm going to focus on the strengths of Django and what I know about Rails' design philosophy, so I welcome experienced Rails users to challenge and correct any wrong assumptions I'm about to make.</p><br/><br/><h3>Which one is better for quick and maintainable development of complex webapps?</h3><br/><br/><p>Django has a fantastic layer of modularization that is implemented through Django apps. Your project is nothing more than a Django instance composed of a root URL configuration and a settings file, that serve the main purpose of hooking Django apps into your instance.</p><br/><br/><p>Django apps themselves are Python packages, that are by Django's design, meant to be packaged for distribution completely independent of a Django instance and that was initially why I picked up Django. They encapsulate all of the discrete components (models, templates, URL patterns, views, forms, etc.) necessary for providing a certain feature (this app supports user registration; that app provides user authentication; this one is for managing user profiles; this one servers static pages dynamically from the database; this app can take any image, convert it to an RGB JPEG, resize it and upload it to a local path, S3 or to some FTP server) and your encouraged to have a lot of different Django applications to simplify your application structure.</p><br/><br/><p>To put it bluntly, in Rails it would be as if your application is solely composed of separate Rails plugins. The Rails architecture encourages people to have a huge <code>app/</code> structure, where all of the components for a feature are kept separate and collocated together with similar components from other features, and distribute 3rd party code together with their Rails application in <code>vendors/</code>, whereas Django enforces Django apps to be shoulder-to-shoulder top-level packages, be they your instance specific apps or 3rd party apps, that can be independently redistributed and reused across several Django instances in the same environment, wholly encapsulating data fixtures, their own templates, static media, translations, test code, models, views and controllers and their intermediary components.</p><br/><br/><p>For instance, take a look at the repository of these two big projects, <a href="https://github.com/mozilla/zamboni/tree/master/apps" rel="nofollow">Zamboni</a> and <a href="https://github.com/edavis10/redmine" rel="nofollow">Redmine</a>. All of Zamboni's <a href="https://github.com/mozilla/zamboni/tree/master/apps" rel="nofollow">application code</a> resides within several dozen Django apps and just by reading the package (folder) names of each, you can see it's obvious that they document where certain parts (features) of the Web application are located and all the code pertaining to that feature is encapsulated within the app. Compare that with <a href="https://github.com/edavis10/redmine/tree/master/app" rel="nofollow">Redmine</a>, where a feature's components are kept separate and mixed with other components in predefined directories. You have to do a lot of navigation within and across different directories when your exploring or developing Redmine's Wiki feature and that makes it harder to get a holistic view on everything the Wiki feature provides. </p><br/><br/><p>This is just my personal opinion that Django has a better architectural premise for developing and maintaining large code bases.</p><br/><br/><h3>Is there a perception that Rails apps are more beautiful than Django apps?</h3><br/><br/><p>As far as I can tell, personal preferences aside, both have a clean architectural design. If you follow the conventions and employ the same patterns as your framework does for solving similar problems, your apps should both look and feel beautiful to other framework developers.</p><br/><br/><p>So this in part also answers the point people said about the difficult learning curve of Rails, which I believe holds true for Django just as well. Both have a difficult learning curve in that it takes time to understand the basic philosophy and designs of your framework to design and develop beautiful applications that go with, not against the framework. By beautiful I mean that it becomes very natural to discover where a certain feature is implemented, or more discretely, it's data, presentation and behavior and that it's very obvious where new features should be added and how they interact with existing components.</p><br/><br/><p>But until you don't have a well founded understanding of your framework to fully appreciate it, you'll most likely take up on novel approaches that extensively configure and customize the framework experience for other developers. I think the only newbie mistake you can make in Rails and Django is to do something that works, but has a very fragile and unintuitive design, something that either goes against documented and proven approaches in an unfashionable manner or otherwise ignores basic framework principles.</p><br/><br/><h3>Is one easier to deploy than the other?</h3><br/><br/><p>No, both provide tools for easy packaging and deployment. There are a lot of Ruby and Python Web servers out there in the wild that make deployment a breeze, although I can see most people still deploy their apps for Apache, which is a whole lot of bang for something that's likely to be used solely for instancing and interfacing with your Rails or Django app, so I understand where some of the pain is coming from. </p><br/><br/><h3>Which has better database libraries/ORM?</h3><br/><br/><p>Rails and Django diverge on their perception of the database schema. Rails takes your existing schema and maps it to application logic, while Django takes your existing application logic and maps it to a schema. Both have never prevented anyone from building complex applications.</p><br/><br/><p>In Rails, your models bubble up from the schema, while in Django your schema bubbles up from the models. I haven't found this mentioned anywhere, but it's very reminiscent of the naked objects pattern, i.e. domain object attributes are not just dumb data holders. The models API facilitates a complete understanding of your data, because each model field is an instance of a complex, reusable and customizable field class that provides the business logic and the presentation for the data. Effectively, Django models can provide complex inheritance scenarios, their schema, manage impedance mismatch and provide the presentation for populating model data through HTML forms and an administrative backend.</p><br/><br/><p>The scaffolding in Rails is pretty much a throwaway, it's there to provide the basic CRUD until your provide your own complex presentation and behavior. Django has the admin that introspects your model and dynamically provides an elaborate interface for managing your model data that can be extensively customized through <code>ModelAdmin</code> objects. Even though you'll never provide non-staff users with access to the admin backend and will always have to design CRUD access within your Web site front presentation for other community users, you'll always use it to provide access to your data for users with elevated permissions. Basically, you can describe a model with a few lines and have a full-fledged, production ready interface for managing your domain objects.</p><br/><br/><p>The models are the focal point for any data, presentation and behavior triad and make it very easy to develop complex applications. Truth be told, since Django's models are more explicit, it makes it that much harder to customize the assumptions an application has about it's model data. This is never a problem until you start working with 3rd party Django apps, because once they ship a model that says a city's name can only be 72 characters long, your stuck with that. Django is shipping class based generic controllers in the current preview release that's due for a public release shortly, which should provide a much cleaner interface for customizing model interaction at the level of the controller. This should quickly streamline how people can extend and override the logic of 3rd party apps to abstract the assumptions about model data.</p><br/><br/><h3>Conclusion</h3><br/><br/><p>Frankly, I just can't see how you can go wrong with either. Rails is indisputably the more popular choice in the wider developer community right now, but I'd believe it should be a purely personal choice which of the two you take, based on the amount of joy you get as a developer from one over the other. At this point, their design and feature set is mature enough to make it possible to do anything you need with both, regardless of how you accomplish it. </p><br/><br/><p>That would perhaps only leave you with having to judge the human resource and 3rd party solution pool. Though you can find more Python developers than Ruby developers, you'll surely find more Rails developers than Django developers. Django has picked up enough interest by now that you can find a Django application for anything you need, something Rails has been more established with; as far as languages go, you'll also find a native solution for anything you need in Ruby, something Python is more established with. I think you safely exclude native and framework 3rd party solutions out of the equation when making your choice.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON FORK CONFUS
    </pattern>
    <template>
<![CDATA[<p>Well finally tracked that down. Must learn to view sources earlier, as the issue proved not to be that serious. Well, jQuery always appends "; charset=utf-8" to the end of the request. On the other hand Piston assumes that the MIME type matches exactly the registered name. In other case it raises BAD_REQUEST. One minor correction inside utils.py, and everything works again as expected.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEBUG TOOLBAR ONLI WORK FOR ADMIN SECTION
    </pattern>
    <template>
<![CDATA[<p>Debug toolbar requires that there's at least a closing &lt;/body> tag in the response HTML.</p><br/><br/><p><a href="https://github.com/django-debug-toolbar/django-debug-toolbar/blob/master/debug_toolbar/middleware.py#L46" rel="nofollow">https://github.com/django-debug-toolbar/django-debug-toolbar/blob/master/debug_toolbar/middleware.py#L46</a></p><br/><br/><p><a href="https://github.com/django-debug-toolbar/django-debug-toolbar/blob/master/debug_toolbar/middleware.py#L121" rel="nofollow">https://github.com/django-debug-toolbar/django-debug-toolbar/blob/master/debug_toolbar/middleware.py#L121</a></p><br/><br/><p>This tag can be changed by changing <code>settings.DEBUG_TOOLBAR_CONFIG['TAG']</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.1 TO DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>What you are looking for is posts explaining in much more detail each feature. <a href="http://djangoadvent.com/" rel="nofollow">Djangoadvent</a> did has it for 1.2.</p><br/><br/><p>By the time 1.3 came out, many of these people who wrote these posts last time around, got busy with their (new founded) startups (via YC'11)!</p><br/><br/><p>You can refer the release notes tho':</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/releases/1.3/" rel="nofollow">Django 1.3 release notes</a></p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/releases/1.2/" rel="nofollow">Django 1.2 release notes</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIT HOW DO I CONFIGUR A HOOK TO RUN A SERVER SID COMMAND AFTER A COMMIT IS ACCEPT
    </pattern>
    <template>
<![CDATA[<p>Sure thing!</p><br/><br/><p>Add a script called <code>post-receive</code> to the server side git repository in the <code>.git/hooks/</code> directory. </p><br/><br/><p>Make sure that the file is executable.</p><br/><br/><p>Call makemessages from the script.</p><br/><br/><p>Done! (I think...)</p><br/><br/><p>You'll find some example scripts in the directory already, with most available hooks.</p><br/><br/><p>Have a look at <a href="http://progit.org/book/ch7-3.html" rel="nofollow">the progit book</a> if you need more.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL APP BROKEN LINE MAXIMUM LINE LENGTH ( AND HOW TO CHANG IT )
    </pattern>
    <template>
<![CDATA[<p>You might be able to get your email client to not break on the 78 character soft limit by creating an EmailMessage object and passing in headers={'format': 'flowed'}  Like so:</p><br/><br/><pre><code>from django.core.mail import EmailMessage<br/><br/>def send_letter(request):<br/>    the_text = 'this is a test of a really long line that has more words that could possibly fit in a single column of text.'<br/>    email = EmailMessage(<br/>        subject='some_subject', <br/>        body=the_text, <br/>        from_email='me@test.com', <br/>        to=['me@test.com'],<br/>        headers={'format': 'flowed'})<br/><br/>    email.send()<br/></code></pre><br/><br/><p>If this doesn't work, try using a non-debug smtp setup to send the file to an actual email client that renders the email according to rules defined in the email header.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON 3 AND DJANGO WITH APACH
    </pattern>
    <template>
<![CDATA[<p>That's because Django and mod_python do not support Python 3. You'll want to use Python 2.x instead. Also, you don't want to use mod_python, you want to use mod_wsgi. This is mentioned in the <a href="http://docs.djangoproject.com/en/1.3/faq/install/#can-i-use-django-with-python-3" rel="nofollow">FAQ</a> and other places in the documentation.</p><br/><br/><p>If you want to write Python 3 WSGI apps try <a href="http://projects.unbit.it/uwsgi/wiki/RunOnPython3k" rel="nofollow">uwsgi</a>. I prefer nginx &amp; uwsgi myself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.STRPTIM ( ) THROW DOE NOT MATCH FORMAT ERROR
    </pattern>
    <template>
<![CDATA[<p>Try <code>%d/%b/%Y:%H:%M:%S</code> instead - <code>%y</code> right now means 11.</p><br/><br/><p>You can "debug" datetime formats easily using <code>date</code> (on the shell and not on python, I mean, assuming you're running GNU/Linux or similar):</p><br/><br/><pre><code>date '+%d/%b/%Y:%H:%M:%S'<br/>05/May/2011:09:00:41<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHI ARE DJANGO MODEL FIELD CLASS ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>No, for the same reason as this:</p><br/><br/><pre><code>&gt;&gt;&gt; class Foo(object):<br/>...     bar = 'Foo attribute'<br/>...<br/>&gt;&gt;&gt; f = Foo()<br/>&gt;&gt;&gt; f.bar<br/>'Foo attribute'<br/>&gt;&gt;&gt; Foo.bar<br/>'Foo attribute'<br/>&gt;&gt;&gt; f.bar = 'instance attribute'<br/>&gt;&gt;&gt; f.bar<br/>'instance attribute'<br/>&gt;&gt;&gt; Foo.bar<br/>'Foo attribute'<br/></code></pre><br/><br/><p>When you assign an attribute to an object, a class attribute of the same name will be "eclipsed" by the object's. On attribute lookup, however, if the object in question does not define said attribute, the class one will be returned, instead.</p><br/><br/><p>In Django, those class attributes are used by the ORM layer to generate the mechanism that translates to SQL queries and operations (deep, metaclass magic going on behind-the-scenes).</p><br/><br/><p><em>edit</em>: To answer your question--</p><br/><br/><p>To understand that, you need to understand a little bit about Python's <a href="http://docs.python.org/reference/datamodel.html" rel="nofollow">data model</a>. Essentially, both classes and objects have namespaces. This is apparent if you peek into their special <code>__dict__</code>attribute:</p><br/><br/><pre><code>&gt;&gt;&gt; print Foo.__dict__<br/>{'__dict__': &lt;attribute '__dict__' of 'Foo' objects&gt;, '__weakref__': &lt;attribute<br/>'__weakref__' of 'Foo' objects&gt;, '__module__': '__main__', 'bar': 'Foo attribute<br/>', '__doc__': None}<br/>&gt;&gt;&gt; f = Foo()<br/>&gt;&gt;&gt; print f.__dict__<br/>{}<br/></code></pre><br/><br/><p>When the object <code>f</code> is first created, it has an empty namespace. When you do a lookup, <code>f.bar</code>, this namespace (really, a dictionary) is looked up. Since there is no <code>'bar'</code> attribute found there, <code>f</code>'s class, <code>Foo</code>, is looked up. We find <code>'bar': 'Foo attribute'</code> there. So that's what's going to be returned:</p><br/><br/><pre><code>&gt;&gt;&gt; f.bar<br/>'Foo attribute'<br/></code></pre><br/><br/><p>Now, when you assign an attribute value to an object, and said attribute name does not yet exist in its namespace, it is created:</p><br/><br/><pre><code>&gt;&gt;&gt; f.bar = 'instance attribute'<br/>&gt;&gt;&gt; print f.__dict__<br/>{'bar': 'instance attribute'}<br/>&gt;&gt;&gt; f.bar<br/>'instance attribute'<br/></code></pre><br/><br/><p>Now, you know what happens the next time <code>f.bar</code> is looked up! <code>f.__dict__['bar']</code> exists and will be returned before we even look at <code>Foo</code>'s namespace.</p><br/><br/><p>Of course, if your intent is to always access and manipulate a class' attribute instead of the instance's, you'd need to use the class' name.</p><br/><br/><pre><code>&gt;&gt;&gt; Foo.bar<br/>'Foo attribute'<br/>&gt;&gt;&gt; Foo.__dict__['bar']<br/>'Foo attribute'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMON NAME FOR A PYTZ TIMEZON EG. EST EDT FOR AMERICA NEW YORK
    </pattern>
    <template>
<![CDATA[<p>Can you use <code>pytz.timezone._tzname</code>?</p><br/><br/><pre><code>&gt;&gt;&gt; import pytz as tz<br/>&gt;&gt;&gt; CT = tz.timezone('America/Chicago')<br/>&gt;&gt;&gt; CT.zone<br/>'America/Chicago'<br/>&gt;&gt;&gt; CT._tzname<br/>'CST'<br/>&gt;&gt;&gt; ET = tz.timezone('America/New_York')<br/>&gt;&gt;&gt; ET._tzname<br/>'EST'<br/>&gt;&gt;&gt;<br/></code></pre><br/><br/><h2>EDIT</h2><br/><br/><p>If you need this derived from a <code>datetime</code> object localized with <code>pytz</code>...</p><br/><br/><pre><code>&gt;&gt;&gt; import pytz as tz<br/>&gt;&gt;&gt; CT = tz.timezone('America/Chicago')<br/>&gt;&gt;&gt; from datetime import datetime as dt<br/>&gt;&gt;&gt; iday = dt(2010, 7, 4, 0, 1, 1)<br/>&gt;&gt;&gt; bar = CT.localize(iday)<br/>&gt;&gt;&gt; bar.tzname()<br/>'CDT'<br/>&gt;&gt;&gt; christmas = dt(2010, 12, 25, 0, 1, 1)<br/>&gt;&gt;&gt; foo = CT.localize(christmas)<br/>&gt;&gt;&gt; foo.tzname()<br/>'CST'<br/>&gt;&gt;&gt; <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRM FEATUR TO A DJANGO WEBSIT
    </pattern>
    <template>
<![CDATA[<p>I think <a href="https://bitbucket.org/jdriscoll/django-addressbook/wiki/Home" rel="nofollow"><code>django-addressbook</code></a> or <a href="http://code.google.com/p/django-crm/source/checkout" rel="nofollow"><code>django-crm</code></a> might be good starting points. If you come up with something great, open source it :) </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO VARIABL IN A CSS FILE
    </pattern>
    <template>
<![CDATA[<p>You basically have two options:</p><br/><br/><ol><br/><li><p>Serve your CSS dynamically, with an entry in urls.py, etc., just as if it were an HTML page.  Your template file will simply be CSS instead of HTML, but will use normal Django template syntax, etc.</p></li><br/><li><p>Shortcut: Reference your background image with a relative path.  This may or may not be possible for your environment, but it's a convenient way of having a static CSS file reference different paths depending on where it's hosted.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INNODB PROBLEM WITH OLD SESSION AND TRANSACT
    </pattern>
    <template>
<![CDATA[<p>Your <code>create()</code> command commits the transaction for the current shell, but doesn't do anything to the transaction in the second shell.</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/db/transactions/" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/db/transactions/</a></p><br/><br/><p>Your second thread that can't see what's done in the first because it is in a transaction of its own. Transactions isolate the database so that when a transaction is committed, everything happens at a single point in time, including select statements. This is the <code>A</code> in <a href="http://en.wikipedia.org/wiki/ACID" rel="nofollow"><code>ACID</code></a>. Try running</p><br/><br/><pre><code>from django.db import transaction; transaction.commit()<br/></code></pre><br/><br/><p>in the second shell. That should commit the current transaction and start a new one. You can also use <code>transaction.rollback()</code> to acheive the same thing if you haven't modified anything in the db in the current shell.</p><br/><br/><p>Edit Edit:</p><br/><br/><p>You may need to grab your specific db connection to make this work. Try this:</p><br/><br/><pre><code>import django.db<br/>django.db.connection._commit() <br/></code></pre><br/><br/><p>More information about this problem here:</p><br/><br/><p><a href="http://groups.google.com/group/django-users/msg/55fa3724d2754013" rel="nofollow">http://groups.google.com/group/django-users/msg/55fa3724d2754013</a></p><br/><br/><p>The relevant bit is:</p><br/><br/><pre><br/>If you want script1.py (using an InnoDB table) to see committed updates from <br/>other transactions you can change the transaction isolation level like so: <br/><br/>from django.db import connection <br/>connection.cursor().execute('set transaction isolation level read <br/>committed') <br/><br/>Alternatively you can enable the database's version of auto-commit, which <br/>"commits" queries as well as updates, so that each new query by script1 will <br/>be in its own transaction: <br/><br/>connection.cursor().execute('set autocommit=1') <br/>Either one allows script1 to see script2's updates. <br/></pre><br/><br/><p><strong>So, the tl;dr is that you need to set your InnoDB transaction isolation to <code>READ-COMMITTED</code>.</strong></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND DJANGO TASTYPI
    </pattern>
    <template>
<![CDATA[<p>I added XS_SHARING_ALLOWED_HEADERS to the middleware and that solved the problem.</p><br/><br/><p><a href="https://gist.github.com/1164697" rel="nofollow">https://gist.github.com/1164697</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB FRAMEWORK FOR SMALL TEAM
    </pattern>
    <template>
<![CDATA[<p>I think most of the big frameworks will fit your requirements so maybe you might look at it from the perspective of the app you are writing. How much do you want to work "out of the box". Will you need user management? Will you need an admin panel etc.</p><br/><br/><p>I use Django and it's great when you don't want to rewrite a lot of boilerplate. It can be a bit tedious at times trying to bend it to do what you want, but once you get your head around it's intricacies , you can get things done very quickly. </p><br/><br/><p>With Django anyway:</p><br/><br/><ul><br/><li><p>MVC (Strict or not)</p><br/><br/><p><strong>Not MVC, but similar</strong> > <a href="http://www.djangobook.com/en/2.0/chapter05/#cn16" rel="nofollow">http://www.djangobook.com/en/2.0/chapter05/#cn16</a></p></li><br/><li><p>Small Team (2-3 people included one designer)</p><br/><br/><p><strong>not sure how the framework will effect this, but yes, it's quick to develop on your own or with a team via version control</strong></p></li><br/><li><p>Fun to use</p><br/><br/><p><strong>well there's a lot of great documentation, so less time is spent pulling your hair out, and you can get going very quickly which is nice</strong></p></li><br/><li><p>REST support</p><br/><br/><p><strong>Yes, as a library:</strong> > <a href="https://bitbucket.org/jesperndjjango-piston/wiki/Home" rel="nofollow">https://bitbucket.org/jesperndjjango-piston/wiki/Home</a></p></li><br/><li><p>Multilevel caching (DB query, page cache)</p><br/><br/><p><strong>Yep</strong> > <a href="https://docs.djangoproject.com/en/dev/topics/cache/?from=olddocs" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/cache/?from=olddocs</a></p></li><br/><li><p>Nginx Support (X-Accel-Redirect File Download)</p><br/><br/><p><strong>Again, not sure this is relevant, but yes. I use nginx with UWSGI and it's very quick</strong></p></li><br/><li><p>Heavy traffic (1,200,000 ~ views)</p><br/><br/><p><strong>Yes</strong> > <a href="http://stackoverflow.com/questions/886221/does-django-scale">Does Django Scale?</a></p></li><br/><li><p>Urls rewriting (Multi-domains support not only subdomain)</p><br/><br/><p><strong>Not sure about this</strong></p></li><br/><li><p>Not a problem if it's not hype</p><br/><br/><p><strong>It's no node-js, but again, lots of really good documentation</strong></p></li><br/><li><p>Not a problem if there is no plugins</p><br/><br/><p><strong>There are .... my god there are</strong></p></li><br/><li><p>Either SQL or NOSQL (can be fun to try NOSQL)</p><br/><br/><p><strong>SQL out of the box, but NOSQL is supported</strong> > <a href="http://www.allbuttonspressed.com/projects/django-nonrel" rel="nofollow">http://www.allbuttonspressed.com/projects/django-nonrel</a></p></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON RAW SQL WITH MULTIPL TABL
    </pattern>
    <template>
<![CDATA[<ol><br/><li>This works. Don't know why it didn't before :( From Dennis Baker's comment: </li><br/></ol><br/><br/><p>You do NOT need to have a model with all the fields in it, you just need the first model and fields from that. You do need to have the fields with unique names and as far as I know you should use "tablename.field as fieldname" to make sure you have all unique fields. I've done some fairly complex queries with 5+ tables this way and always tie them back to a single model. -</p><br/><br/><p>2 . Another solution is to use a cursor. However, a cursor has to be changed from a list of tuples to a list of dictionaries. I'm sure there are cleaner ways using iterators, but this function works. It takes a string, which is the raw sql query, and returns a list which can be rendered and used in a template.</p><br/><br/><pre><code>from django.db import connection, transaction<br/><br/>def sql_select(sql):<br/>    cursor = connection.cursor()<br/>    cursor.execute(sql)<br/>    results = cursor.fetchall()<br/>    list = []<br/>    i = 0<br/>    for row in results:<br/>        dict = {} <br/>        field = 0<br/>        while True:<br/>           try:<br/>                dict[cursor.description[field][0]] = str(results[i][field])<br/>                field = field +1<br/>            except IndexError as e:<br/>                break<br/>        i = i + 1<br/>        list.append(dict) <br/>    return list  <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATH IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You can use the <a href="https://docs.djangoproject.com/en/1.3/ref/templates/builtins/#add"><code>add</code></a> filter:</p><br/><br/><pre><code>{{ object.article.rating_score|add:"-100" }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COUCHAPP A REALIST SUBSTITUT FOR A WEB FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>As it stands, a CouchApp essentially require you to use AJAX for the entire application. Generally speaking, that's poor for user experience, as you are downloading the skeleton markup, running JS, usually hitting the server again, and then adding more markup dynamically. (as opposed to just downloading the finished markup up front) In addition, caching data is a different beast on the browser than it is on a server. Also, SEO is much more difficult when you have AJAX-only content. </p><br/><br/><p><strong>Basically, all of the reasons you see people going against AJAX-only (ie. obtrusive JavaScript) web applications, will all hold up in this context.</strong></p><br/><br/><p>On the other hand, you would be able to replicate the entire application (as well as all the relevent data) to any node that is running CouchDB. I could see mobile versions of your application running only the CouchApp while offline, since a full web server stack wouldn't necessarily be available to you. In addition, it's easy to get up and running with a CouchApp, as opposed to learning a framework like Rails, Django or Express.js.</p><br/><br/><p>I have high-hopes for CouchApps becoming a complete web application solution eventually, as I am a huge fan of CouchDB as a database. However, right now it just isn't feasible for me because of the heavy reliance upon obtrusive JavaScript.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E LIK SOLUT FOR DJANGO ADMIN WHERE ADMIN CONTAIN FOREIGNKEY TO OTHER MODEL
    </pattern>
    <template>
<![CDATA[<p>Completing @John's <a href="http://stackoverflow.com/questions/6419248/inline-like-solution-for-django-admin-where-admin-contains-foreignkey-to-other-mo/6419907#6419907">answer</a> from above - define what you would like to see on the your changelist:</p><br/><br/><pre><code>return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (<br/>                     reverse('admin:applabel_customer_change', (self.customer.id,)),<br/>                     self.customer.name # add more stuff here<br/>             )<br/></code></pre><br/><br/><p>And to add this to the change form, see: <a href="http://stackoverflow.com/questions/6239966/add-custom-html-between-two-model-fields-in-django-admins-change-form/6343271#6343271">Add custom html between two model fields in Django admin&#39;s change_form</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LDAP OS X 10.6 AND PYTHON 2.6
    </pattern>
    <template>
<![CDATA[<p>The problem and solution are documented <a href="http://projects.skurfer.com/posts/2011/python_ldap_lion/" rel="nofollow">here</a>.</p><br/><br/><p>Summary: The 10.7.{0,1} system tools and headers are all from OpenLDAP 2.4.x while the libraries are from OpenLDAP 2.2.0. The solution is to build the OpenLDAP libs to match the system headers and link python-ldap with those.</p><br/><br/><p>All credit goes to <a href="http://www.skurfer.com/" rel="nofollow">Rob McBroom</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APPLIC PLACE IN SUBFOLD
    </pattern>
    <template>
<![CDATA[<p>You need both these files under your app folder:</p><br/><br/><pre><code>__init__.py<br/>models.py<br/></code></pre><br/><br/><p>They can be empty. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE SAVE METHOD BE CALL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>No <code>save()</code> does not need to be called after <code>create()</code>.</p><br/><br/><p>from the <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#create" rel="nofollow">docs</a> for create:</p><br/><br/><blockquote><br/>  <p>A convenience method for creating an object and saving it all in one step</p><br/></blockquote><br/><br/><p>its to be used in place of creating an object the normal way then saving with object.save()</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI NOT RETURN ALL OF LARG TEXT FIELD
    </pattern>
    <template>
<![CDATA[<p>I know little of *nix connectivity to SQL Server, but simple googling suggests that the issue is related to <a href="http://freetds.schemamania.org/index.html" rel="nofollow">FreeTDS</a> configuration:</p><br/><br/><ol><br/><li>A related question on SO: <a href="http://stackoverflow.com/questions/5635036/data-ended-at-64512-characters-mssql-php-opensuse-apache2">Data ended at 64512 characters - MSSQL // PHP // OPENSuSE // APACHE2</a>.</li><br/><li>Another Q&amp;A extracted from <a href="http://freetds.schemamania.org/faq.html#textdata" rel="nofollow">here</a>:</li><br/></ol><br/><br/><blockquote><br/>  <p>My text data are being truncated or are causing my client to break.</p><br/>  <br/>  <p>The text data type is different from char and varchar types. The<br/>  maximum data length of a text column is governed by the textsize<br/>  connection option. Microsoft claims in their documentation to use a<br/>  default textsize of 4000 characters, but in fact their implementation<br/>  is inconsistent. Sometimes text columns are returned with a size of 4<br/>  GB!</p><br/>  <br/>  <p>The best solution is to make sure you set the textsize option to a<br/>  reasonable value when establishing a connection. For example:</p><br/></blockquote><br/><br/><pre><code>1&gt; set textsize 10000 <br/>2&gt; go <br/></code></pre><br/><br/><blockquote><br/>  <p>See also the text size option in freetds.conf.</p><br/></blockquote><br/><br/><hr><br/><br/><p>And just a side note: you seem to be using rather outdated version of <a href="http://code.google.com/p/pymssql/" rel="nofollow"><code>pymssql</code></a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT AND TEST IF A VARIABL IS NULL OR EMPTI STRING
    </pattern>
    <template>
<![CDATA[<pre><code>{% if lesson.assignment and lesson.assignment.strip %}<br/></code></pre><br/><br/><p>The <code>.strip</code> calls <code>str.strip()</code> so you can handle whitespace-only strings as empty, while the preceding check makes sure we weed out <code>None</code> first (which would not have the <code>.strip()</code> method)</p><br/><br/><p>Proof that it works (in <code>./manage.py shell</code>):</p><br/><br/><pre><code>&gt;&gt;&gt; import django<br/>&gt;&gt;&gt; from django.template import Template, Context<br/>&gt;&gt;&gt; t = Template("{% if x and x.strip %}OK{% else %}Empty{% endif %}")<br/>&gt;&gt;&gt; t.render(Context({"x": "ola"}))<br/>u'OK'<br/>&gt;&gt;&gt; t.render(Context({"x": "   "}))<br/>u'Empty'<br/>&gt;&gt;&gt; t.render(Context({"x": ""}))<br/>u'Empty'<br/>&gt;&gt;&gt; t.render(Context({"x": None}))<br/>u'Empty'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT FROM DJANGO TO JAVASCRIPT DOM
    </pattern>
    <template>
<![CDATA[<p>Ok, I found the solution!</p><br/><br/><p>Mostly it was because of not quoting the results. When Javascript was trying to parse the object this wasn't recognized as string.</p><br/><br/><p>So, first step is:</p><br/><br/><pre><code>var js_list = {{django_list}}; <br/></code></pre><br/><br/><p>changed to:</p><br/><br/><pre><code>var js_list = "{{django_list}}";<br/></code></pre><br/><br/><p>After this I realized that Django was escaping characters so I had to replace them like this:</p><br/><br/><pre><code> var myJSONList = (("{{json_list}}").replace(/&amp;(l|g|quo)t;/g, function(a,b){<br/>                return {<br/>                    l   : '&lt;',<br/>                    g   : '&gt;',<br/>                    quo : '"'<br/>                }[b];<br/>            }));<br/><br/> myData = JSON.parse( myJSONList );<br/></code></pre><br/><br/><p><strong>Note: I tried to avoid escaping characters from Django using this</strong>:</p><br/><br/><pre><code>var js_list = "{{json_list|safe}}"; <br/></code></pre><br/><br/><p>But this doesn't work because it gets confused with the quotes.</p><br/><br/><p>Finally I found a way to avoid the logic on the backend of converting to JSON before sending it to Javascript:      </p><br/><br/><pre><code>var myDjangoList = (("{{django_list |safe}}").replace(/&amp;(l|g|quo)t;/g, function(a,b){<br/>            return {<br/>                l   : '&lt;',<br/>                g   : '&gt;',<br/>                quo : '"'<br/>            }[b];<br/>        }));<br/><br/>myDjangoList = myDjangoList.replace(/u'/g, '\'')<br/>myDjangoList = myDjangoList.replace(/'/g, '\"')<br/><br/>myData = JSON.parse( myDjangoList );<br/></code></pre><br/><br/><p>I'm sure this can be improved, I let this to you ;)</p><br/><br/><p>Thanks for your answers</p><br/><br/><p>Hope it helps to someone else!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HANDL MULTIPL MEMCACH SERVER
    </pattern>
    <template>
<![CDATA[<p>It's the actual memcached client who does the sharding. Django only passes the configuration from <code>settings.CACHES</code> to the client. </p><br/><br/><p>The order of the servers doesn't matter*, but (at least for python-memcached) you can specify a 'weight' for each of the servers:</p><br/><br/><pre><code>CACHES = {<br/>    'default': {<br/>        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',<br/>        'LOCATION': [<br/>                ('cache1.example.org:11211', 1),<br/>                ('cache2.example.org:11211', 10),<br/>            ],<br/>}<br/></code></pre><br/><br/><p>I think that a quick look at <code>memcache.py</code> (from python-memcached) and especially  <code>memcached.Client._get_server</code> should answer the rest of your questions:</p><br/><br/><pre><code>def _get_server(self, key):<br/>    if isinstance(key, tuple):<br/>        serverhash, key = key<br/>    else:<br/>        serverhash = serverHashFunction(key)<br/><br/>    for i in range(Client._SERVER_RETRIES):<br/>        server = self.buckets[serverhash % len(self.buckets)]<br/>        if server.connect():<br/>            #print "(using server %s)" % server,<br/>            return server, key<br/>        serverhash = serverHashFunction(str(serverhash) + str(i))<br/>    return None, None<br/></code></pre><br/><br/><p>I would expect that the other memcached clients are implemented in a similar way.</p><br/><br/><hr><br/><br/><p><strong>Clarification by @Apreche:</strong> The order of servers does matter in one case. If you have multiple web servers, and you want them all to put the same keys on the same memcached servers, you need to configure them with the same server list in the same order with the same weights</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBSTRACT TWO DATETIME.TIM VALU IN DJANGO TEMPLATE AND HOW TO FORMAT A DURAT AS HOUR MINUT
    </pattern>
    <template>
<![CDATA[<p>I don't see where is the problem, apart in case the end-time would be later than 24 hours after the start-time.</p><br/><br/><p>Suppose that start-time is  9:00:00 and end-time is 13:00:00<br><br/>If these times were taken on August 15, 9:00:00 and August 17, 13:00:00 , there would be no sense to try to obtain the time delta between them without knowing the days 15 and 17.</p><br/><br/><p>Hence there are two cases: </p><br/><br/><ul><br/><li><p>either the start time and end time may be really separated by more than 24 hours , then as it has already been said, you must move to the use of datetime's objects</p></li><br/><li><p>either there is always less than 24 hours between the start-time and the end-time, then the problem is simple.</p></li><br/></ul><br/><br/><p>==========================</p><br/><br/><p>Let us examine the second case.</p><br/><br/><p>If<br><br/>start-time 11:30:00<br><br/>end-time.. 12:35:00<br><br/>The end is evidently <em>1 hour 5 minutes</em> after the start</p><br/><br/><p>If<br><br/>start-time 11:30:00<br><br/>end-time.. 10:35:00<br><br/>The end can't be before the start in the same morning, then the end is in fact in the morning of the next day after the day in which is the start, that is to say 24 hours later.</p><br/><br/><p>The same reasoning applies when the start is in the afternoon and the end time is apparently before the start time in the same day, in afternoon or morning: end time is in fact in the the next day, morning or afternoon, it depends but it's still 24 hours later.</p><br/><br/><h3>1)</h3><br/><br/><p>So a little function, that need only the attributes of the times is sufficient to deduct the time difference:</p><br/><br/><pre><code>def difft(start,end):<br/>    a,b,c,d = start.hour, start.minute, start.second, start.microsecond<br/>    w,x,y,z = end.hour, end.minute, end.second, end.microsecond<br/>    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000<br/>    return delt + 1440 if delt&lt;0 else delt<br/></code></pre><br/><br/><p>The following code is only for a better display of the result:</p><br/><br/><p>from datetime import time</p><br/><br/><pre><code>def difft(start,end):<br/>    a,b,c,d = start.hour, start.minute, start.second, start.microsecond<br/>    w,x,y,z = end.hour, end.minute, end.second, end.microsecond<br/>    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000<br/><br/>    D = '%sh %smn %ss %sms - %sh %smn %ss %sms == '<br/>    ft = '%s + 1440 = %s  (1440 = 24x60mn)'<br/>    return D % (w,x,y,z,a,b,c,d) +( ft % (delt, delt+1440) if delt&lt;0 else str(delt))<br/><br/><br/>print difft(time(11,30,0),time(12,35,0))<br/>print difft(time(11,30,0),time(10,35,0))<br/>print<br/>print difft(time(20,40,0),time(22,41,0))<br/>print difft(time(20,40,0),time(18,41,0))<br/></code></pre><br/><br/><p>result</p><br/><br/><pre><code>12h 35mn 0s 0ms - 11h 30mn 0s 0ms == 65.0<br/>10h 35mn 0s 0ms - 11h 30mn 0s 0ms == -55.0 + 1440 = 1385.0  (1440 = 24x60mn)<br/><br/>22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 121.0<br/>18h 41mn 0s 0ms - 20h 40mn 0s 0ms == -119.0 + 1440 = 1321.0  (1440 = 24x60mn)<br/></code></pre><br/><br/><h3>2)</h3><br/><br/><p>To obtain the durations in a more readable format:</p><br/><br/><pre><code>def difft2(start,end):<br/>    a,b,c,d = start.hour, start.minute, start.second, start.microsecond<br/>    w,x,y,z = end.hour, end.minute, end.second, end.microsecond<br/>    delt = (w-a)*60 + (x-b) + (y-c)/60. + (z-d)/60000000.<br/>    if delt &lt; 0:<br/>        delt += 1440<br/><br/>    hh,rem = divmod(delt,60)<br/>    hh = int(hh)<br/>    mm = int(rem)<br/>    rem = (rem - mm)*60<br/>    ss = int(rem)<br/>    ms = (rem - ss)*1000000<br/>    ms = int(ms)<br/><br/>    SS = '%sh %smn %ss %sms - %sh %smn %ss %sms == %sh %smn %ss %sms'<br/>    return SS % (w,x,y,z,a,b,c,d,hh,mm,ss,ms)<br/><br/><br/><br/>print difft2(time(11,30,0),time(12,35,45,478129))<br/>print difft2(time(11,30,45,11),time(10,35,45,12))<br/>print<br/>print difft2(time(20,40,0),time(22,41,0))<br/>print difft2(time(20,40,0),time(18,41,0))<br/></code></pre><br/><br/><p>result</p><br/><br/><pre><code>12h 35mn 45s 478129ms - 11h 30mn 0s 0ms == 1h 5mn 45s 478128ms<br/>10h 35mn 45s 12ms - 11h 30mn 45s 11ms == 23h 5mn 0s 1ms<br/><br/>22h 41mn 0s 0ms - 20h 40mn 0s 0ms == 2h 1mn 0s 0ms<br/>18h 41mn 0s 0ms - 20h 40mn 0s 0ms == 22h 1mn 0s 0ms<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRON LIK SCRIPT ON DJANGO
    </pattern>
    <template>
<![CDATA[<p>You use celery.</p><br/><br/><p><a href="http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html" rel="nofollow">http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECRET KEY
    </pattern>
    <template>
<![CDATA[<p>It is used for making hashes.  Look:</p><br/><br/><pre><code>&gt;grep -Inr SECRET_KEY *<br/>conf/global_settings.py:255:SECRET_KEY = ''<br/>conf/project_template/settings.py:61:SECRET_KEY = ''<br/>contrib/auth/tokens.py:54:        hash = sha_constructor(settings.SECRET_KEY + unicode(user.id) +<br/>contrib/comments/forms.py:86:        info = (content_type, object_pk, timestamp, settings.SECRET_KEY)<br/>contrib/formtools/utils.py:15:    order, pickles the result with the SECRET_KEY setting, then takes an md5<br/>contrib/formtools/utils.py:32:    data.append(settings.SECRET_KEY)<br/>contrib/messages/storage/cookie.py:112:        SECRET_KEY, modified to make it unique for the present purpose.<br/>contrib/messages/storage/cookie.py:114:        key = 'django.contrib.messages' + settings.SECRET_KEY<br/>contrib/sessions/backends/base.py:89:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()<br/>contrib/sessions/backends/base.py:95:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:<br/>contrib/sessions/backends/base.py:134:        # Use settings.SECRET_KEY as added salt.<br/>contrib/sessions/backends/base.py:143:                       settings.SECRET_KEY)).hexdigest()<br/>contrib/sessions/models.py:16:        pickled_md5 = md5_constructor(pickled + settings.SECRET_KEY).hexdigest()<br/>contrib/sessions/models.py:59:        if md5_constructor(pickled + settings.SECRET_KEY).hexdigest() != tamper_check:<br/>core/management/commands/startproject.py:32:        # Create a random SECRET_KEY hash, and put it in the main settings.<br/>core/management/commands/startproject.py:37:        settings_contents = re.sub(r"(?&lt;=SECRET_KEY = ')'", secret_key + "'", settings_contents)<br/>middleware/csrf.py:38:                % (randrange(0, _MAX_CSRF_KEY), settings.SECRET_KEY)).hexdigest()<br/>middleware/csrf.py:41:    return md5_constructor(settings.SECRET_KEY + session_id).hexdigest()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MICROFRAMEWORK LIKE FLASK OFFER LESS SECUR PROTECT THAT DJANGO
    </pattern>
    <template>
<![CDATA[<p>The sword cuts both ways. Flask and other microframeworks offer less of a built-in security framework, but they also lack automatically-built management consoles and other niceties that can introduce security concerns of their own. However, if you're using a microframework, you are going to have to take into account more of the low-level security concerns--there's no "default" library for authentication and authorization, for example. </p><br/><br/><p>Fundamentally, there's no difference in the security models <em>required</em> for each product. After all, they're both using the same medium. It's just a tradeoff: the risks of low-level complexity versus the risks of high-level complexity.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME PKG RESOURC
    </pattern>
    <template>
<![CDATA[<p>It sounds like you have something dodgy in your requirements.txt, check for traces of anything package-related like distribute.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SEND EMAIL IN THE BACKGROUND
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://celeryproject.org/" rel="nofollow">celery</a> as a task queue and <a href="http://pypi.python.org/pypi/django-celery-email" rel="nofollow">django-celery-email</a> which is an Django e-mail backend that dispatches e-mail sending to a celery task.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT STOP PROCESS TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You could use <a href="http://jinja.pocoo.org" rel="nofollow">jinaj2</a> for templating that view (or the whole project), it supports <code>if</code>/<code>elif</code>/<code>else</code> branching:</p><br/><br/><pre><code>{% if data.some_state %}<br/>    Display some markup<br/>{% elif data.some_state_2 %}<br/>    State 2 different view<br/>{% elif data.process_data %}<br/>    Display some list of data<br/>{% endif %}<br/></code></pre><br/><br/><p>There are a couple different packages which it easy use jinja2 in a django project, I've used both <a href="https://github.com/coffin/coffin" rel="nofollow">coffin</a> and <a href="http://github.com/syrusakbary/djinja" rel="nofollow">djinja</a> for this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ULOR IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You need <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#divisibleby" rel="nofollow">divisibleby</a>, a built-in django filter.</p><br/><br/><pre><code>{% for p in posts %}<br/>    &lt;div class="post width1 height2 column {% if forloop.counter0|divisibleby:4 %}first{% endif %}}"&gt;<br/>        &lt;div class="preview"&gt;<br/><br/>        &lt;/div&gt;<br/>        &lt;div class="overlay"&gt;<br/><br/>        &lt;/div&gt;<br/>        &lt;h2&gt;p.title&lt;/h2&gt;<br/>    &lt;/div&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER QUERYSET IN FOR EVERI ITEM IN LIST
    </pattern>
    <template>
<![CDATA[<p><strong>Summary:</strong></p><br/><br/><p>One option is, as said by jpic and sgallen in the comments, to add <code>.filter()</code> for each category. Each additional <code>filter</code> adds more joins which should not be a problem for small set of categories.</p><br/><br/><p>There is <a href="https://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">aggregation</a> <a href="http://groups.google.com/group/django-users/msg/0659acee8c128f20" rel="nofollow">approach</a>. This query would be shorter and perhaps quicker for a large set of categories.</p><br/><br/><p>And you also have an option to come up with your <a href="https://docs.djangoproject.com/en/dev/topics/db/sql/" rel="nofollow">custom queries</a>.</p><br/><br/><hr><br/><br/><p><strong>Some examples</strong></p><br/><br/><p>Test setup:</p><br/><br/><pre><code>class Photo(models.Model):<br/>    tags = models.ManyToManyField('Tag')<br/><br/>class Tag(models.Model):<br/>    name = models.CharField(max_length=50)<br/><br/>    def __unicode__(self):<br/>        return self.name<br/><br/>In [2]: t1 = Tag.objects.create(name='holiday')<br/>In [3]: t2 = Tag.objects.create(name='summer')<br/>In [4]: p = Photo.objects.create()<br/>In [5]: p.tags.add(t1)<br/>In [6]: p.tags.add(t2)<br/>In [7]: p.tags.all()<br/>Out[7]: [&lt;Tag: holiday&gt;, &lt;Tag: summer&gt;]<br/></code></pre><br/><br/><h2>Using <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships" rel="nofollow">chained filters</a> approach:</h2><br/><br/><pre><code>In [8]: Photo.objects.filter(tags=t1).filter(tags=t2)<br/>Out[8]: [&lt;Photo: Photo object&gt;]<br/></code></pre><br/><br/><p>Resulting query:</p><br/><br/><pre><code>In [17]: print Photo.objects.filter(tags=t1).filter(tags=t2).query<br/>SELECT "test_photo"."id"<br/>FROM "test_photo"<br/>INNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")<br/>INNER JOIN "test_photo_tags" T4 ON ("test_photo"."id" = T4."photo_id")<br/>WHERE ("test_photo_tags"."tag_id" = 3  AND T4."tag_id" = 4 )<br/></code></pre><br/><br/><p>Note that each <code>filter</code> adds more <code>JOINS</code> to the query.</p><br/><br/><h2>Using <a href="https://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">annotation</a> <a href="http://groups.google.com/group/django-users/msg/0659acee8c128f20" rel="nofollow">approach</a>:</h2><br/><br/><pre><code>In [29]: from django.db.models import Count<br/>In [30]: Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2)<br/>Out[30]: [&lt;Photo: Photo object&gt;]<br/></code></pre><br/><br/><p>Resulting query:</p><br/><br/><pre><code>In [32]: print Photo.objects.filter(tags__in=[t1, t2]).annotate(num_tags=Count('tags')).filter(num_tags=2).query<br/>SELECT "test_photo"."id", COUNT("test_photo_tags"."tag_id") AS "num_tags"<br/>FROM "test_photo"<br/>LEFT OUTER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")<br/>WHERE ("test_photo_tags"."tag_id" IN (3, 4))<br/>GROUP BY "test_photo"."id", "test_photo"."id"<br/>HAVING COUNT("test_photo_tags"."tag_id") = 2<br/></code></pre><br/><br/><h2><code>AND</code>ed <code>Q</code> objects would not work:</h2><br/><br/><pre><code>In [9]: from django.db.models import Q<br/>In [10]: Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer'))<br/>Out[10]: []<br/>In [11]: from operator import and_<br/>In [12]: Photo.objects.filter(reduce(and_, [Q(tags__name='holiday'), Q(tags__name='summer')]))<br/>Out[12]: []<br/></code></pre><br/><br/><p>Resulting query:</p><br/><br/><pre><code>In [25]: print Photo.objects.filter(Q(tags__name='holiday') &amp; Q(tags__name='summer')).query<br/>SELECT "test_photo"."id"<br/>FROM "test_photo"<br/>INNER JOIN "test_photo_tags" ON ("test_photo"."id" = "test_photo_tags"."photo_id")<br/>INNER JOIN "test_tag" ON ("test_photo_tags"."tag_id" = "test_tag"."id")<br/>WHERE ("test_tag"."name" = holiday  AND "test_tag"."name" = summer )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER STATIST FOR MULTIPL VIEW
    </pattern>
    <template>
<![CDATA[<p>The simplest way is to include <code>django.contrib.auth.context_processors.auth</code> to the <code>TEMPLATE_CONTEXT_PROCESSORS</code> configuration in your <code>settings.py</code>. As described <a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django-contrib-auth-context-processors-auth" rel="nofollow">in the docs</a> it wil add a <code>user</code> and <code>perms</code> variable in your template context which gives you direct access to the current user.</p><br/><br/><p>Not that the default configuration for <code>TEMPLATE_CONTEXT_PROCESSORS</code> is this (in Django 1.3):</p><br/><br/><pre><code>("django.contrib.auth.context_processors.auth",<br/>"django.core.context_processors.debug",<br/>"django.core.context_processors.i18n",<br/>"django.core.context_processors.media",<br/>"django.core.context_processors.static",<br/>"django.contrib.messages.context_processors.messages")<br/></code></pre><br/><br/><p>So the context processor should already be active und you should be able to access the <code>user</code> variable in you templates without returning it in the view.</p><br/><br/><p>In your views, you can simply use the <a href="https://docs.djangoproject.com/en/1.3/topics/http/shortcuts/#render" rel="nofollow"><code>render</code></a> shortcut which will take care of creating the RequestContext instance that is needed:</p><br/><br/><pre><code>from django.shortcuts import render<br/><br/>def my_view(request):<br/>    return render(request, 'template.html' )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECOR FOR A VIEW IN DJANGO EXECUT ORDER
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Now, the decorators in Python work inside out</p><br/></blockquote><br/><br/><p>Well i guess that depends on your definition of inside out. in your case you want <code>login_required</code> to execute first, and so it should be the "outermost" (top) decorator</p><br/><br/><p>as you noted, your last example works, and is indeed the correct way to do this</p><br/><br/><p><strong>edit</strong></p><br/><br/><p>maybe the confusion is with how (these particular) decorators work</p><br/><br/><p><code>login_required(original_view)</code> returns a new view, which first checks if you are logged in, and then calls original_view</p><br/><br/><p>so </p><br/><br/><pre><code>login_required(<br/>    active_required(<br/>        my_view<br/>    )<br/>)<br/><br/>first checks if you are logged in, then<br/>    first(second) checks if you are active, then<br/>        runs my_vew<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GOOD STARTER PROJECT
    </pattern>
    <template>
<![CDATA[<p>If you want to use payment processing you should probably make a store of some sort .</p><br/><br/><p>I for one have a kikstarter/rockethub clone project queued in my want-to-do projects list .<br/>But you should try thinking at something that you would use and isn't out there at the moment , something that would solve some needs of yours , that way you kill 2 birds with one stone .</p><br/><br/><p>Or try making the old book store webapp but use Facebook/Twitter/Google etc ... API's <br/>and add html5 functionality to the site ... the possibilities are endless .</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW CONTENT WITH HYDE
    </pattern>
    <template>
<![CDATA[<p>Hyde does not have commands to create new files. You can create the file in your favorite editor and save it in the correct directory.</p><br/><br/><p>For example, if you want a blog post with this url:<br/><a href="http://localhost:8080/blog/2012/01/05/a-new-post" rel="nofollow">http://localhost:8080/blog/2012/01/05/a-new-post</a>,</p><br/><br/><p>you have do the following:</p><br/><br/><ol><br/><li>Create the directory <code>blog/2010/01/05</code> under your content folder</li><br/><li>Use a text editor to create your post</li><br/><li>Save the file in the directory you created in step 1</li><br/><li>When you do <code>hyde gen</code> and <code>hyde serve</code> - you will see the file show up in that url</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV WA CREAT WITH NO SITE PACKAG
    </pattern>
    <template>
<![CDATA[<p>There's a file in <code>&lt;env&gt;/lib/pythonX.X/</code> called <code>no-global-site-packages.txt</code> when you create a virtual environment with <code>--no-site-packages</code>.</p><br/><br/><p>Just tried this with virtualenv 1.7:</p><br/><br/><pre><code>% virtualenv --no-site-packages env.without<br/>% virtualenv --system-site-packages env.with<br/><br/>% find env.without | sed 's/env.without//' &gt; files.without<br/>% find env.with | sed 's/env.with//' &gt; files.with<br/><br/>% diff files.with*<br/>230a231<br/>&gt; /lib/python3.2/no-global-site-packages.txt<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT LANGUAG IN CSS FILE CORRECTLI
    </pattern>
    <template>
<![CDATA[<p>Is the generated stylesheet being served with the correct mime type? If not, the browser might not interpret it as CSS.</p><br/><br/><p>I can't remember if <code>render_to_response</code> accepts <code>content_type='text/css</code> as an argument, but there is a way to set it if Django isn't already using the correct mime type.</p><br/><br/><p><strong>Edit:</strong> as <a href="http://stackoverflow.com/questions/9285408/django-using-template-language-in-css-files-correctly/9285565#comment11708999_9285565">@TommasoBarbugli pointed out</a>, you want the <code>mimetype</code> argument for <code>render_to_response</code>.</p><br/><br/><p>(Firefox's Firebug add-on, or the Web Inspector in Chrome/Safari, should be able to show you the stylesheet's mime type.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV RECOMMEND FOR DJANGO PRODUCT SERVER
    </pattern>
    <template>
<![CDATA[<p>I would do it that way if you ever think you'll run more than one project on the webserver. As soon as you have two projects you run the risk of a future upgrade of any python package breaking the other site.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODIFI
    </pattern>
    <template>
<![CDATA[<p>The 'r' indicates a raw string, which alters the escaping behavior. This is useful for regular expressions to make them easier to read. The 'u' indicates that it is a Unicode string. They're called <strong><a href="http://docs.python.org/reference/lexical_analysis.html#strings" rel="nofollow">string literal prefixes</a></strong>.</p><br/><br/><p>From the docs:</p><br/><br/><blockquote><br/>  <p>String literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and use different rules for interpreting backslash escape sequences. A prefix of 'u' or 'U' makes the string a Unicode string. Unicode strings use the Unicode character set as defined by the Unicode Consortium and ISO 10646. Some additional escape sequences, described below, are available in Unicode strings. A prefix of 'b' or 'B' is ignored in Python 2; it indicates that the literal should become a bytes literal in Python 3 (e.g. when code is automatically converted with 2to3). A 'u' or 'b' prefix may be followed by an 'r' prefix.</p><br/>  <br/>  <p>Unless an 'r' or 'R' prefix is present, escape sequences in strings are interpreted according to rules similar to those used by Standard C.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA CORRECT IN DJANGO ( BUT THI IS N T DJANGO SPECIF )
    </pattern>
    <template>
<![CDATA[<p>Adding on to <a href="http://stackoverflow.com/a/9956936/344821">VascoP's answer</a> (I'd make this a cmoment but there's a little too much code in it), you could store his <code>replace_dic</code> in the database so that you can add corrections through e.g. the Django admin, without having to change any code. This might look like:</p><br/><br/><pre><code>class ComposerCorrection(models.Model):<br/>    wrong_name = models.CharField(max_length=100, unique=True)<br/>    canonical_name = models.CharField(max_length=100)<br/><br/>def correct_name(name):<br/>    try:<br/>        return ComposerCorrection.objects.get(wrong_name=name).canonical_name<br/>    except ComposerCorrection.DoesNotExist:<br/>        return name<br/></code></pre><br/><br/><p>Then you can put <code>correct_name</code> in the <code>save()</code> method of <code>Composer</code> (or as a pre-save signal), and also add VascoP's <code>correctComposer</code> function as a post-save signal for <code>ComposerCorrection</code> objects, so that adding a new one will fix the database without having to do anything else.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP DJANGO WITH WSGI AND APACH
    </pattern>
    <template>
<![CDATA[<p>What happens if you remove the <code>Alias /</code> directive?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRINT URL OF VIEW WITHOUT HARDCOD THE URL
    </pattern>
    <template>
<![CDATA[<p>You can use <code>get_absolute_url</code>, but that will only work for a particular object.  Since your object hasn't been created yet, it won't work in this case.</p><br/><br/><p>You want to use <a href="http://www.djangoproject.com/documentation/url_dispatch/#naming-url-patterns" rel="nofollow">named URL patterns</a>.  Here's a quick intro:</p><br/><br/><p>Change the line in your urls.py to:</p><br/><br/><pre><code>(r'^manage/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}, "create-product"),<br/></code></pre><br/><br/><p>Then, in your template you use this to display the URL:</p><br/><br/><pre><code>{% url create-product %}<br/></code></pre><br/><br/><p>You can do some more powerful things with named URL patterns, they're very handy.  Note that they are only in the development version (and also 1.0).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BIG INTEG FIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>SQLite won't complain <em>ever</em>.  it uses 'manifest typing', that is, the values have type, not the columns.  It lets you store bigtext on a smallint collumn, or whatever you want!  (except if you define an integer primary key, where it uses a 64-bit integer).</p><br/><br/><p>that's a very convenient feature, but it makes a SQLite bad choice for developing if you're going to deploy with a different engine.</p><br/><br/><p>for using a BIGINT, you'd have to create a custom field class.  unfortunately, that part has changed on Django 1.0, so you'd have to rewrite it if/when you update.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST A DJANGO DATABAS SCHEMA
    </pattern>
    <template>
<![CDATA[<p>What we did was override the default test_runner so that it wouldn't create a new database to test against.  This way, it runs the test against whatever our current local database looks like.  But be very careful if you use this method because any changes to data you make in your tests will be permanent.  I made sure that all our tests restores any changes back to their original state, and keep our pristine version of our database on the server and backed up.</p><br/><br/><p>So to do this you need to copy the run_test method from django.test.simple to a location in your project -- I put mine in myproject/test/test_runner.py</p><br/><br/><p>Then make the following changes to that method:</p><br/><br/><pre><code>// change<br/>old_name = settings.DATABASE_NAME<br/>from django.db import connection<br/>connection.creation.create_test_db(verbosity, autoclobber=not interactive)<br/>result = unittest.TextTestRunner(verbosity=verbosity).run(suite)<br/>connection.creation.destroy_test_db(old_name, verbosity)<br/><br/>// to:<br/>result = unittest.TextTestRunner(verbosity=verbosity).run(suite)<br/></code></pre><br/><br/><p>Make sure to do all the necessary imports at the top and then in your settings file set the setting:</p><br/><br/><pre><code>TEST_RUNNER = 'myproject.test.test_runner.run_tests'<br/></code></pre><br/><br/><p>Now when you run ./manage.py test Django will run the tests against the current state of your database rather than creating a new version based on your current model definitions.</p><br/><br/><p>Another thing you can do is create a copy of your database locally, and then do a check in your new run_test() method like this:</p><br/><br/><pre><code>if settings.DATABASE_NAME != 'my_test_db': <br/>    sys.exit("You cannot run tests using the %s database. Please switch DATABASE_NAME to my_test_db in settings.py" % settings.DATABASE_NAME)<br/></code></pre><br/><br/><p>That way there's no danger of running tests against your main database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN SITE NOT DISPLAY MANYTOMANYFIELD RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I've tried adding the TechInline class to the inlines list, but that causes a</p><br/>  <br/>  <p>'TechInLine' not defined</p><br/></blockquote><br/><br/><p>Is that a straight copy-paste? It looks like you just made a typo -- try <code>TechInline</code> instead of <code>TechInLine</code>.</p><br/><br/><p>If your syncdb didn't create the proper table, you can do it manually. Execute this command:</p><br/><br/><pre><code>python manage.py sqlreset &lt;myapp&gt;<br/></code></pre><br/><br/><p>And look for the definition for the <code>projects_project_techs</code> table. Copy and paste it into the client for your database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFIN WHICH FIELD IN THE MODEL ARE EDIT IN THE ADMIN APP
    </pattern>
    <template>
<![CDATA[<p>For this particular case you can override your save method to slugify (it's built-in method, look at django source) the title and store it in slug field. Also from there you can easily check if this slug is indeed unique and change it somehow if it's not.</p><br/><br/><p>Consider this example:</p><br/><br/><pre><code>def save(self):<br/>    from django.template.defaultfilters import slugify<br/><br/>    if not self.slug:<br/>        self.slug = slugify(self.title)<br/><br/>    super(Your_Model_Name,self).save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP EQUIVAL IN ASP.NET MVC
    </pattern>
    <template>
<![CDATA[<p>Django doesn't follow the traditional MVC pattern, since they advocate that in the Web world, their MTV is more suitable. In the overall, I prefer Django over Rails because of the django apps. You can do almost the same in RoR with the Rails vendor plugins, but it's not the same.</p><br/><br/><p>ASP.NET follows RoR structure, and therefor you don't have the reusable apps. If you check the folder structure in a MVC project, you don't even find the RoR's Plugin folder, so I bet you should do it VisualStudio-Like.</p><br/><br/><p>Create a reusable app, as a separated project, include references for that project in your main one, and in your Route file, just redirect to the other project's controllers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITHOUT ACTION
    </pattern>
    <template>
<![CDATA[<p>Having an action of an empty string in most browsers points the form at the URL the browser currently has loaded, which is the script that served the form in the first place.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FEATUR DIFFERENTI RAIL DJANGO
    </pattern>
    <template>
<![CDATA[<p>My experience/opinion is that Rails is much more flexible and has a more diverse ecosystem and is developing faster  while Django is more stable, slower changing, better documented.</p><br/><br/><p>Rails has a huge advantage for integration with other systems via JRuby.  You can give rails access to the entire Java ecosystem and run it on the JVM.  </p><br/><br/><p>Django might be able to take advantage of .Net via IronPython (I don't know anything about this other than that IronPython exists - while IronRuby is only on the way but not here yet)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COLUMN USER ID ERROR IN DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>You'll have to show your models to get real help, but it looks like your Idea table doesn't have a user_id column?  Did you modify the SQL table structure?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN INTERFAC DOE NOT USE SUBCLASS S UNICODE ( )
    </pattern>
    <template>
<![CDATA[<p>ForeignKey(Animal) is just that, a foreign key reference to a row in the Animal table. There's nothing in the underlying SQL schema that indicates that the table is being used as a superclass, so you get back an Animal object.</p><br/><br/><p>To work around this:</p><br/><br/><p>First, you want the base class to be non-abstract. This is necessary for the ForeignKey anyway, and also ensures that Dog and Cat will have disjunct primary key sets.</p><br/><br/><p>Now, Django implements inheritance using a OneToOneField. Because of this, <strong>an instance of a base class that has a subclass instance gets a reference to that instance, named appropriately.</strong> This means you can do:</p><br/><br/><pre><code>class Animal(models.Model):<br/>    def __unicode__(self):<br/>        if hasattr(self, 'dog'):<br/>            return self.dog.__unicode__()<br/>        elif hasattr(self, 'cat'):<br/>            return self.cat.__unicode__()<br/>        else:<br/>            return 'Animal'<br/></code></pre><br/><br/><p>This also answers your question to Ber about a <strong>unicode</strong>() that's dependent on other subclass attributes. You're actually calling the appropriate method on the subclass instance now.</p><br/><br/><p>Now, this does suggest that, since Django's already looking for subclass instances behind the scenes, the code could just go all the way and return a Cat or Dog instance instead of an Animal. You'll have to take up that question with the devs. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPAMBOT ARE CLUTTER MY LOG FILE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Um, perhaps, use <a href="http://linuxcommand.org/man_pages/logrotate8.html" rel="nofollow">logrotate</a> to rotate and compress the logs periodically, if it isn't being done already.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIS A VALIDATIONERROR ON A DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>django channel in IRC saved me here.  The problem was that the URLField.clean() does two things I wasn't expecting:</p><br/><br/><ol><br/><li>If no URL scheme is present (eg, http://) the method prepends 'http://' to the url</li><br/><li>the method also appends a trailing slash.</li><br/></ol><br/><br/><p>The results are returned and stored in the form's cleaned_data.  So I was checking <code>cleaned_data['url']</code> expecting something like <code>example.com</code> and actually getting <code>http://example.com/</code>.  Suffice to say, changing my <code>clean_url()</code> method to the following works:</p><br/><br/><pre><code>def clean_url(self):<br/>        url = self.cleaned_data['url']        <br/>        bits = urlparse(url)<br/>        dom = bits[1]<br/>        try:<br/>            site=Site.objects.get(domain__iexact=dom)<br/>        except Site.DoesNotExist:<br/>            return dom<br/>        raise forms.ValidationError(u'That domain is already taken.  Please choose another')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONCRET CLASS OF A DJANGO MODEL BASECLASS
    </pattern>
    <template>
<![CDATA[<p>Django implements model inheritance with a OneToOneField between the parent model's table and the child model's table.  When you do <code>Base.object.all()</code>, Django is querying just the Base table, and so has no way of knowing what the child table is.  Therefore, unfortunately, it's not possible to go directly to the child model instance without additional queries.</p><br/><br/><p>This <a href="http://www.djangosnippets.org/snippets/1031/">snippet</a> shows a common method of adding a ContentType field to the base model:</p><br/><br/><pre><code>from django.contrib.contenttypes.models import ContentType<br/><br/>class Base(models.Model):<br/><br/>    content_type = models.ForeignKey(ContentType,editable=False,null=True)<br/><br/>    def save(self):<br/>        if(not self.content_type):<br/>            self.content_type = ContentType.objects.get_for_model(self.__class__)<br/>        self.save_base()<br/><br/>    def as_leaf_class(self):<br/>        content_type = self.content_type<br/>        model = content_type.model_class()<br/>        if(model == Base):<br/>            return self<br/>        return model.objects.get(id=self.id)<br/></code></pre><br/><br/><p>You can then say <code>if Base.content_type.model_class()</code> to determine the type.</p><br/><br/><p><a href="http://www.djangosnippets.org/snippets/1034/">Here</a> is another snippet that adds a custom manager into the mix.</p><br/><br/><p>As you can see, both of these solutions have the potential to be extremely expensive.  If you have a large number of instances, using the as_leaf_class() method will require one query on each item.</p><br/><br/><p>Instead, if you have a known set of child models, simply query each model separately and aggregate the instances into one list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AD MIDDLEWAR TO APPENGIN S WEBAPP FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>It's easy: You create the WSGI application as per normal, then wrap that application in your WSGI middleware before executing it.</p><br/><br/><p>See <a href="http://github.com/Arachnid/bloog/blob/bb777426376d298765d5dee5b88f53964cc6b5f3/main.py#L71" rel="nofollow">this code</a> from Bloog to see how firepython is added as middleware.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHANG A FIELD LABEL IN THE DJANGO ADMIN APPLIC
    </pattern>
    <template>
<![CDATA[<p>the <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#verbose-field-names" rel="nofollow">verbose name</a> of the field is the (optional) first parameter at field construction.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A WEB LANGUAG
    </pattern>
    <template>
<![CDATA[<p>For self-directed learning, PHP is actually kind of hard to beat.  It's forgiving in the sense that the language is flexible and straitforward.  The library is easy to learn and even easier to search through.  Being able to mix code and markup can speed learning as well.</p><br/><br/><p>In the long term though, there's not much else PHP has to offer.  Java, Python, C# all offer better designed languages and more consistent libraries at the cost of slightly more layers of abstraction.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN TODAY AND NOW BUTTON SHOW UP IN SAFARI
    </pattern>
    <template>
<![CDATA[<p>I think you have to look at what is different between your firefox configuration and safary config</p><br/><br/><p>Off the top of my head:</p><br/><br/><ul><br/><li><p>One could be configured to use a proxy (messing with the trafic) the other not. Make sure the configuration is the same in both.</p></li><br/><li><p>Safari could have cached the error clear the cache before testing again.</p></li><br/><li><p>Try to access the gif files directly from the browser (by inputting the full url of the images) and run wireshark on the wire comparing both GET requests and responses. Something WILL be different that will help you to track the problem.</p></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WIDGET HTML ID
    </pattern>
    <template>
<![CDATA[<p>For your use case, you can find the <code>id</code> attribute in the <code>attrs</code> argument that is passed to <code>render()</code>. It is a good idea to check for its existence before trying to use it:</p><br/><br/><pre><code>def render(self, name, value, attrs=None):<br/>  # ...<br/>  if attrs and 'id' in attrs:<br/>    # Use attrs['id']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU TO USE FOR FASTCGI MAXREQUEST MAXSPAR MINSPAR MAXCHILDREN
    </pattern>
    <template>
<![CDATA[<p>Let's start with the definition</p><br/><br/><pre><br/>    maxrequests: How many requests does a child server before being killed <br/>                 and a new one forked<br/>    maxspare   : Maximum number of spare processes to keep running<br/>    minspare   : Minimum number of spare processes to prefork<br/>    maxchildren: Hard limit number of processes in prefork mode<br/></pre><br/><br/><p>This means that you'll have at most <em>maxchildren</em> processes running at any given time in your webserver, each running for <em>maxrequests</em> requests. At server start you'll get <em>minspare</em> processes, which will keep growing until <em>maxspare</em> (or <em>maxchildren</em>) if more requests are coming.</p><br/><br/><p>So, <em>minspare</em> lets you say how many concurrent requests are you expecting at a minimum (important to avoid the process creation if you start with one, it's good to start at, say 10), and <em>maxspare</em> lets you say how many concurrent requests will your server attend to at most (without compromising it's expected response time and so on. Needs a stress test to validate). And <em>maxrequests</em> is talking about the lifetime of each child, in case they cannot run forever due to any kind of constraint.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS TO DJANGO LABEL TAG ( ) OUTPUT
    </pattern>
    <template>
<![CDATA[<p>A <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags" rel="nofollow">custom template tag</a> seems to be the solution. A custom filter would also do, although it can be less elegant. But you would need to fall back to custom form rendering in both cases.</p><br/><br/><p>If this is a task of high importance; I'd create a Mixin that allows me to annotate the form fields with label classes and supplies form rendering methods using those classes. So that the following code works:</p><br/><br/><pre><code>{{ form.as_table_with_label_classes }}<br/></code></pre><br/><br/><p>But I'd like to ask; Do you really need a class on the label tag? I mean HTML design-wise. It is absolutely necessary to <em>add</em> a class in there? Couldn't it be solved with some CSS like:</p><br/><br/><pre><code>encapsulating_selector label {<br/>    some-attr: some-value;<br/>}<br/></code></pre><br/><br/><p>I sometimes use <a href="http://jquery.com" rel="nofollow">jQuery</a> for such cases where; <em>it will improve the page if it works, but it won't be a disaster if it doesn't</em>. And keep the HTML source as lean as possible.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE RANG WHEN ONE RANG HA A RANG OF START DATE
    </pattern>
    <template>
<![CDATA[<p>The problem is simpler than it may seem at first glance, as the user is not directly specifying an end date in their criteria.</p><br/><br/><pre><code>SELECT * FROM periods p<br/>WHERE p.range_start &gt;= @min_start<br/>AND   p.range_start &lt;= @max_start<br/>AND   DATE_ADD(p.range_start, INTERVAL @duration DAY) &lt;= p.range_end<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL MAP INTEGR
    </pattern>
    <template>
<![CDATA[<p>Google Maps API isn't that hard to learn (+ has good documentation), just try for yourself, there is <a href="http://code.google.com/apis/ajax/playground/" rel="nofollow">excellent playground</a> with many examples ready.</p><br/><br/><p>As a side note, being web application developer you should already get your hands dirty with javascript (see <a href="http://www.b-list.org/weblog/2006/jul/02/django-and-ajax/" rel="nofollow">this really old but not outdated post</a> by James Bennett).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OF COUNT WITH GROUP BY
    </pattern>
    <template>
<![CDATA[<p>If you are using Django 1.1 beta (trunk):</p><br/><br/><pre><code>Player.objects.values('player_type').order_by().annotate(Count('player_type'))<br/></code></pre><br/><br/><ul><br/><li><code>values('player_type')</code> - for inclusion only <code>player_type</code> field into <code>GROUP BY</code> clause.</li><br/><li><code>order_by()</code> - for exclusion possible default ordering that can cause not needed fields inclusion in <code>SELECT</code> and <code>GROUP BY</code>.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI JOIN QUERI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This can be done in Django, but you will need to restructure your models a little bit differently:</p><br/><br/><pre><code>class Product(models.Model):<br/>    name = models.CharField(max_length=50)<br/>    product_rank = models.OneToOneField('ProductRank')<br/><br/>class ProductRank(models.Model):<br/>    rank = models.IntegerField(default=0)<br/></code></pre><br/><br/><p>Now, when fetching Product objects, you can following the one-to-one relationship in one query using the <a href="http://docs.djangoproject.com/en/1.0/ref/models/querysets/#id4" rel="nofollow">select_related()</a> method:</p><br/><br/><pre><code>Product.objects.filter([...]).select_related()<br/></code></pre><br/><br/><p>This will produce one query that fetches product ranks using a join:</p><br/><br/><pre><code>SELECT "example_product"."id", "example_product"."name", "example_product"."product_rank_id", "example_productrank"."id", "example_productrank"."rank" FROM "example_product" INNER JOIN "example_productrank" ON ("example_product"."product_rank_id" = "example_productrank"."id")<br/></code></pre><br/><br/><p>I had to move the relationship field between Product and ProductRank to the Product model because it looks like select_related() follows foreign keys in one direction only.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INLIN FORMSET MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I discovered my problem, and it's embarrassing.</p><br/><br/><p>In the parent model form I had <code>exclude = ('...',)</code> in the Meta class, and one of the excluded fields was critical for the relations in the inline_formsets.  So, I've removed the excludes and ignoring those fields in the template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEVELOP PROVID A TRULI FLEXIBL 3 LAYER ARCHITECTUR
    </pattern>
    <template>
<![CDATA[<p>You seem to be saying that choosing Django would prevent you from using a more heterogenous solution later.  This isn't the case.  Django provides a number of interesting connections between the layers, and using Django for all the layers lets you take advantage of those connections.  For example, using the Django ORM means that you get the great Django admin app almost for free.</p><br/><br/><p>You can choose to use a different ORM within Django, you just won't get the admin app (or generic views, for example) along with it.  So a different ORM takes you a step backward from full Django top-to-bottom, but it isn't a step backward from other heterogenous solutions, because those solutions didn't give you intra-layer goodness the admin app in the first place.</p><br/><br/><p>Django shouldn't be criticized for not providing a flexible architecture: it's as flexible as any other solution, you just forgo some of the Django benefits if you choose to swap out a layer.</p><br/><br/><p>If you choose to start with Django, you can use the Django ORM now, and then later, if you need to switch, you can change over to SQLalchemy.  That will be no more difficult than starting with SQLalchemy now and later moving to some other ORM solution.</p><br/><br/><p>You haven't said why you anticipate needing to swap out layers.  It will be a painful process no matter what, because there is necessarily much code that relies on the behavior of whichever toolset and library you're currently using.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MISS TRANSLAT OF SOME STRINGS. ANI IDEA WHI
    </pattern>
    <template>
<![CDATA[<p>Ugh.  Django, you're killing me.</p><br/><br/><p>Here's what was happening:</p><br/><br/><p><a href="http://blog.e-shell.org/124" rel="nofollow">http://blog.e-shell.org/124</a></p><br/><br/><p>For some reason only Django knows, it decided to decorate some of my translations with the comment '# fuzzy'.  It seems to have chosen which ones to mark randomly.</p><br/><br/><p>Anyway, #fuzzy means this: "don't translate this, even though here's the translation:"</p><br/><br/><p>I'll leave this here in case some other poor soul comes across it in the future.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DID YOU MEAN QUERI
    </pattern>
    <template>
<![CDATA[<p>djangos orm doesnt have this behavior out-of-box, but there are several projects that integrate django w/ search services like: </p><br/><br/><ul><br/><li>sphinx (<a href="http://code.google.com/p/django-sphinx/" rel="nofollow">django-sphinx</a>)</li><br/><li>solr, a lightweight version of lucene (<a href="http://code.google.com/p/djangosearch/" rel="nofollow">djangosearch</a>)</li><br/><li>lucene (<a href="http://code.google.com/p/django-search-lucene/" rel="nofollow">django-search-lucene</a>)</li><br/></ul><br/><br/><p>i cant speak to how well options #2 and #3, but ive used django-sphinx quite a lot, and am very happy with the results. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI PYTHON CODE TO ITER OVER A CONTAIN
    </pattern>
    <template>
<![CDATA[<pre><code>results = [(getattr(obj, field.attname), obj.pk) for obj in queryset or []]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON METHOD ( SIGNATUR AND CONTENT ) IN CODE
    </pattern>
    <template>
<![CDATA[<p>Python code behaves like this for functions defined in scope of methods.<br/>Use this instead:</p><br/><br/><pre><code>for image_name in image_fields:<br/>    print "image name is: ", image_name<br/>    setattr(new_form, 'clean_' + image_name, <br/>            lambda self, iname=image_name: self._clean_photo(iname))<br/></code></pre><br/><br/><p>The usage of default keyword argument makes Python remember it at the time of lambda function creation rather than at the time of its calling (when it would always take the last image).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE DJANGO ORM TO QUERI THI MANY TO MANI EXAMPL
    </pattern>
    <template>
<![CDATA[<p>You should be able to do:</p><br/><br/><pre><code>books = Book.objects.filter(authorbook__author_id=1)<br/></code></pre><br/><br/><p>to get a QuerySet of Book objects matching your author_id restriction.</p><br/><br/><p>The nice thing about Django is you can cook this up and play around with it in the shell.  You may also find <br/><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/queries/#spanning-multi-valued-relationships</a><br/>to be useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ARRAY IN DJANGO TO A TEMPLAT AND USE IT WITH JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Try using <code>{{ array1|safe }}</code> and see if that makes any difference.  I haven't tested this, so I hope I don't get too downvoted if this is incorrect...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S CONTRIB APPLIC OR BUILD MY OWN
    </pattern>
    <template>
<![CDATA[<p>It all depends. We had a need for something that was 98% similar to contrib.flatpages. We could have monkeypatched it, but we decided that the code was so straightforward that we would just copy and fork it. It worked out fine.</p><br/><br/><p>Doing this with contrib.auth, on the other hand, might be a bad move given its interaction with contrib.admin &amp; contrib.session.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAILS DJANGO ASP WEBSIT SHOULD HAVE BEEN WRITTEN IN C + +
    </pattern>
    <template>
<![CDATA[<p>The problem with the article you link to is that the author clearly doesn't really know what he's talking about when he asks where the "bottleneck" is; the fact that someone has more web servers than database servers doesn't mean "the database can't be where the problem is". What's generally meant by "the database is the bottleneck" is the same thing that's been learned by everyone who ever does run-time profiling of a web application.</p><br/><br/><p>Consider an application which takes half a second to return a full response. Suppose you sit down and profile it, and find that that half second of processing time breaks down as follows:</p><br/><br/><ul><br/><li>Parsing incoming request: 50ms</li><br/><li>Querying database: 350ms</li><br/><li>Rendering HTML for response: 50ms</li><br/><li>Sending response back out: 50ms</li><br/></ul><br/><br/><p>If you saw a breakdown like that, where database queries constitute 70% of the actual running time of the application, you'd rightly conclude that the database is the bottleneck. And that's exactly what most people find when they <em>do</em> profile their applications (and, generally, the database so completely dominates the processing time that the choice of language for the rest of the processing doesn't make any difference anyone will notice).</p><br/><br/><p>The number of database servers involved turns out not to matter too much; the famous quote here is that people like the author of the post you've linked are the types who hear that it takes one woman nine months to have a baby, and assume that nine women working together could do it in one month. In database terms: if a given query takes 100ms to execute on a given DB, then adding more DB servers isn't going to make any one of them be able to execute that query any faster. The reason for adding more database servers is to be able to handle more concurrent requests and keep your DB from getting overloaded, not to make isolated requests go any faster.</p><br/><br/><p>And from there you go into the usual dance of scaling an application: caching to cut down on the total time spent retrieving data or rendering responses, load-balancing to increase the number of concurrent requests you can serve, sharding and more advanced database-design schemes to keep from bogging down under load, etc., etc.</p><br/><br/><p>But, you'll note, none of this has anything whatsoever to do with the programming language in use because, once again, the amount of time spent or saved by other factors grossly outweighs the amount of time gained or lost by a "fast" or a "slow" language (and, of course, there's really no such thing; so much depends on the problem domain and the skill of the programmer that you just can't have a meaningful general comparison).</p><br/><br/><p>Anyway, this is getting kind of long and rambling, so I'll just wrap it up with a general guideline: if you see someone arguing that "you should build in Language X because it runs faster", it's a dead giveaway that they don't really know anything about real-world performance or scaling. Because, after all, if it just came down to "write in the fastest language", they'd be recommending that we all use assembly :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APP PATTERN EQUIVAL IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>The Django implementation of <em>apps</em> is closely tied to Django operation as a framework - I mean plugging application using Django url mapping features (for mapping urls to view functions) and Django application component discovery (for discovering models and admin configuration). There is no such mechanisms in WebApp (I guess you think of WebApp <em>framework</em> when you refer to AppEngine, which is rather <em>platform</em>) itself - you have to write them by yourself then persuade people to write such applications in a way that will work with your <em>url plugger</em> and <em>component discovery</em> after plugging app to the rest of site code.</p><br/><br/><p>There are generic <em>pluggable modules</em>, ready to use with AppEngine, like sharded counters or GAE utilities library, but they do not provide such level of functionality like Django apps (django-registration for example). I thing this comes from much greater freedom of design (basically, on GAE you can model your app after Django layout or after any other you might think of) and lack of widely used conventions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO ADDRESS PERMISS
    </pattern>
    <template>
<![CDATA[<p><code>Permission</code> (which lives in <code>django.contrib.auth.models</code>) is a database object. You'll be able to see all of them with <code>Permission.objects.all()</code>. They are created automatically by a post-sync signal for each model (and <a href="http://docs.djangoproject.com/en/dev/topics/auth/#id1" rel="nofollow">as the docs mention</a>, you can also define your own).</p><br/><br/><p>To assign the permissions to a User, you will first have to get the <code>Permission</code> objects (using <code>Permission.objects.get(*args)</code>), and then you can add it to the User with <code>User.user_permissions.add(permission)</code> as you mentioned.</p><br/><br/><p>Alternatively, and the easier way if you can do this, is just to use the Django admin site. In the detail page for each user, there is a section relating to permissions. I'm guessing you aren't using these permissions outside of the admin, so that's the only area they will affect. If you want all of your users to have all permissions, you can make them superusers by setting the <code>is_superuser</code> flag on each User to <code>True</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DUPLIC OF FORM INPUT ELEMENT ID IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You need to use form prefixes, as documented <a href="http://docs.djangoproject.com/en/dev/ref/forms/api/#prefixes-for-forms" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM FOREIGN KEY IN HIDDEN FIELD
    </pattern>
    <template>
<![CDATA[<p>I suspect that the <code>__unicode__</code> method for the Profile model instance, or the <code>repr</code> thereof is set to return a value other than <code>self.id</code>. For example, I just set this up:</p><br/><br/><pre><code># models.py<br/>class Profile(models.Model):<br/>    name = models.CharField('profile name', max_length=10)<br/><br/>    def __unicode__(self):<br/>        return u'%d' % self.id<br/><br/>class Plan(models.Model):<br/>    name = models.CharField('plan name', max_length=10)<br/>    profile = models.ForeignKey(Profile, related_name='profiles')<br/><br/>    def __unicode__(self):<br/>        return self.name<br/><br/><br/># forms.py<br/>class PlanForm(forms.ModelForm):<br/>    profile = forms.ModelChoiceField(queryset=Profile.objects.all(),<br/>            widget=forms.HiddenInput())<br/><br/>    class Meta:<br/>        model = Plan<br/><br/># views.py<br/>def add_plan(request):<br/><br/>    if request.method == 'POST':<br/>        return HttpResponse(request.POST['profile'])<br/><br/><br/>    profile = Profile.objects.all()[0]<br/>    form = PlanForm(initial={'profile':profile})<br/>    return render_to_response('add_plan.html',<br/>            {<br/>                'form':form,<br/>            },<br/>            context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>With that, I see PlanForm.profile rendered thus in the template:</p><br/><br/><pre><code>&lt;input type="hidden" name="profile" value="1" id="id_profile" /&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM NEWBI QUESTION
    </pattern>
    <template>
<![CDATA[<p>Yeah I have to agree the documentation and examples are really lacking here. The is no out of the box solution for the case you are describing because it goes three layers deep: quiz->question->answer.</p><br/><br/><p>Django has <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#inline-formsets" rel="nofollow">model inline formsets</a> which solve the problem for two layers deep. What you will need to do to generate the form you want is:</p><br/><br/><ol><br/><li>Load up a quiz form (just a label text box from your model)</li><br/><li>Load a an question formset: QuestionFormSet(queryset=Question.objects.filter(quiz=quiz))</li><br/><li>For each question load up a answer formset in much the same way you load up the question formset</li><br/><li>Make sure you save everything in the right order: quiz->question->answer, since each lower level needs the foreign key of the item above it</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL INHERITANCE. HIDE OR REMOV FIELD
    </pattern>
    <template>
<![CDATA[<p>If you are inheriting the model then it is probably not wise to attempt to hide or disable any existing fields.  The best thing you could probably do is exactly what you suggested: override <code>save()</code> and handle your logic in there. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN OF DATE BAS GENER VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Date based generic views don't have pagination. It seems you can't add pagination via wrapping them as well since they return rendered result.</p><br/><br/><p>I would simply write my own view in this case. You can check out generic views' code as well, but most of it will probably be unneeded in your case.</p><br/><br/><p>Since your question is a valid one, and looking at the code; I wonder why they didn't decouple queryset generation as separate functions. You could just use them and render as you wish then.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPROV THI REGIST VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You don't even need this code, but I think the style:</p><br/><br/><pre><code>pk = None<br/>try: pk = User.objects.filter(username=username)[0].pk<br/>except: pass<br/></code></pre><br/><br/><p>is more naturally written like:</p><br/><br/><pre><code>try:<br/>    user = User.objects.get(username=username)<br/>except User.DoesNotExist:<br/>    user = None<br/></code></pre><br/><br/><p>and then in your admin notify template use <code>{{ user.id }}</code> instead of <code>{{ pk }}</code>.</p><br/><br/><p>But, like I said, you don't need that code at all because you already have a user object from your call to <code>authenticate()</code>.</p><br/><br/><p>Generally in Python, it's considered poor practice to have the exception handler in a try/except block be empty.  In other words, always capture a specific exception such as <code>User.DoesNotExist</code> for this case.</p><br/><br/><p>It's also poor practice to have many lines inside the <code>try</code> part of the try/except block.  It is better form to code this way:</p><br/><br/><pre><code>try:<br/>    ... a line of code that can generate exceptions to be handled ...<br/>except SomeException:<br/>    ... handle this particular exception ...<br/>else:<br/>    ... the rest of the code to execute if there were no exceptions ...<br/></code></pre><br/><br/><p>A final, minor, recommendation is to not send the email directly in your view because this won't scale if your site starts to see heavy registration requests.   It is better add in the <a href="http://code.google.com/p/django-mailer/" rel="nofollow">django-mailer</a> app to offload the work into a queue handled by another process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NI ONE KNOW OF AN RTF REPORT GENER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There is <a href="http://pypi.python.org/pypi/PyRTF/0.45" rel="nofollow">PyRTF</a> but it hasn't been updated in a while.</p><br/><br/><p>If that doesn't work and you are willing to do some hacking then I can also point you to the <a href="http://www.gramps-project.org/wiki/index.php?title=Main%5FPage" rel="nofollow">GRAMPS Project</a> that has an RTF report generator (look in gramps/docgen/RTFDoc.py).  This code is very specific to their genealogy reporting needs, but it is clean and decently documented so could make a good starting point.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB FRAMEWORK SECUR
    </pattern>
    <template>
<![CDATA[<p>I've built several sites using Django and one storefront using Satchmo.  There is no difference in security between closed and open source frameworks since all the security related information is unique to your installation.</p><br/><br/><p>For example, the "secret code" in your settings.py file is uniquely generated when you start your project.  Its up to you to salt user passwords and to guard your encryption keys, the same as you would on <em>any</em> platform.</p><br/><br/><p>Something to note about Django is that out of the box, all form input is validated and "marked safe" via a sanitation process.  You can access a form's sanitized data via its <code>cleaned_data</code> dictionary.</p><br/><br/><p>Additionally, all templates are auto-escaped HTML so the risk of injection attacks or cross-site scripting are virtually nil.</p><br/><br/><p>Finally, the models offer an additional security layer and validation should any rogue data get through.</p><br/><br/><p>And as for Satchmo, its e-commerce gateways to paypal, visa, etc. are accepted by said companies and use their APIs so they're as secure as any other payment gateway.  Naturally, you need to be running an encrypted HTTPS connection to do credit card payments, but that is required universally and has nothing to do with the framework you use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PLUGIN FOR DREAMWEAV
    </pattern>
    <template>
<![CDATA[<p>I remember looking for a plugin too, but came across <a href="http://www.djangobook.com/en/beta/chapter04/" rel="nofollow">this</a> stumbling block:</p><br/><br/><blockquote><br/>  <p><strong>Designers are assumed to be comfortable with HTML code</strong>. The template system isn't designed so that templates necessarily are displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe of a limitation and wouldn't allow the syntax to be as nice as it is. Django expects template authors are comfortable editing HTML directly.</p><br/></blockquote><br/><br/><p>That being said, I found a <a href="http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&amp;loc=en%5Fus&amp;extid=1557518" rel="nofollow">Dreamweaver extension</a> whilst having another quick look, so give it a try and let us know how it goes!  From experience, the Eclipse solution offered by Paolo works very nicely, and the <a href="http://www.activestate.com/komodo/" rel="nofollow">Komodo</a> <a href="http://code.google.com/p/django-komodo-kit/wiki/ActiveState" rel="nofollow">plugins</a> look great, too.  I know you are looking for a graphical editor, but <a href="http://code.djangoproject.com/wiki/Emacs" rel="nofollow">emacs</a> does a very nice job ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL SET FOREIGN KEY TO A FIELD OF ANOTH MODEL
    </pattern>
    <template>
<![CDATA[<p>Yes and no. The FK relationship is described at the class level, and mirrors the FK association in the database, so you can't add extra information directly in the FK parameter.</p><br/><br/><p>Instead, I'd recommend having a string that holds the field name on the other table:</p><br/><br/><pre><code>class ValidationRule(models.Model):<br/>    other = models.ForeignKey(OtherModel)<br/>    other_field = models.CharField(max_length=256)<br/></code></pre><br/><br/><p>This way, you can obtain the field with:</p><br/><br/><pre><code>v = ValidationRule.objects.get(id=1)<br/>field = getattr(v, v.other_field)<br/></code></pre><br/><br/><p>Note that if you're using Many-to-Many fields (rather than a One-to-Many), there's built-in support for creating custom intermediary tables to hold meta data with the <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ManyToManyField.through" rel="nofollow">through</a> option.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND MAIL ( ) COMMAND NOT WORK IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I have a Django project on Webfaction right now that is properly sending emails. The only difference between your settings and mine is that I did not specify <code>EMAIL_PORT</code> or <code>EMAIL_USE_TLS</code>. Try it out without those settings and let Django use the default it has and see if it works.</p><br/><br/><p>For reference's sake, <a href="http://docs.djangoproject.com/en/dev/ref/settings/#email-port" rel="nofollow">the default settings</a> are:</p><br/><br/><pre><code>EMAIL_PORT = 25<br/>EMAIL_USE_TLS = False<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NSTANTDJANGO BE USE RATHER THAN THE NORMAL INSTAL
    </pattern>
    <template>
<![CDATA[<p>It is, of course, possible to use InstantDjango for development. InstantDjango uses SQLite3, which is a perfectly reasonable relational database for embedded or light/sometimes-moderate use. The whole purpose of django is that the ORM layer gives you database portability.</p><br/><br/><p>That said, I would not use InstantDjango for deployment in a halfway-serious web app. SQLite just does not scale anywhere near as far as Apache (etc) with MySQL/Postgres. In some cases, the way that SQLite handles data types (or, rather, glosses over data types) can lead to issues with a django app that is subsequently deployed with MySQL/Postgres... if you develop using SQLite, always test with your actual deployment environment before going live.</p><br/><br/><p>You've asked a number of questions on SO in the last couple days about deploying Django with one or the other of the major relational database packages (<a href="http://stackoverflow.com/questions/738433/getting-started-with-django-instant-django">http://stackoverflow.com/questions/738433/getting-started-with-django-instant-django</a> ; <a href="http://stackoverflow.com/questions/719431/is-it-me-or-are-rails-and-django-difficult-to-install-on-windows">http://stackoverflow.com/questions/719431/is-it-me-or-are-rails-and-django-difficult-to-install-on-windows</a> ). I suspect the reason you've not had many answers, and therefore feel the need to keep asking the same question with different phrasing, is that we need more specific examples of the errors you're having. </p><br/><br/><p>Plenty of folks install Django with MySQL, Postgres, and other databases, every day on Windows and *nix systems. If you give us the exact details of which non-SQLite database you're trying to use, the way you've installed it, how your settings for that database are configured in django, and the error messages you're getting, we will have a better shot at helping you. </p><br/><br/><p>If you're still having trouble based on the answers you've had, perhaps you can turn to a professional system administrator and/or DBA you know to show you the ropes with installing and configuring this kind of software.</p><br/><br/><p>Until that time, by all means, start developing using InstantDjango and SQLite. It will not have to be thrown away for vastly re-written when you migrate to a different relational database, and will help you make forward-progress with the framework that can only bolster your knowledge for understanding how to deploy it in production.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL HOW TO FILTER OUT DUPLIC VALU BY PK AFTER THE FACT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Is there a quick and easy way to do this? I'm considering using a dict instead of a list with the id as the key.</p><br/></blockquote><br/><br/><p>That's exactly what I would do if you were locked into your current structure of making several queries.  Then a simply <code>dictionary.values()</code> will return your list back.</p><br/><br/><p>If you have a little more flexibility, why not use <code>Q</code> objects?  Instead of actually making the queries, store each query in a <code>Q</code> object and use a bitwise or ("|") to execute a single query.  This will achieve your goal and save database hits.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects">Django Q objects</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND IN A DJANGO FILTER
    </pattern>
    <template>
<![CDATA[<pre><code>mymodel.objects.filter(first_name__icontains="Foo", first_name__icontains="Bar")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIME SENSIT APPLIC IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>In the link you provided, the author somewhat rejects the idea of adding additional parameters to your methods for the sake of unit testing, but in some cases I think you can justify this as just an extension of your business logic.  In my opinion, it's a form of inversion of control that can make your model more flexible and possibly even more expressive.  For example:</p><br/><br/><pre><code>def is_expired(self, check_date=None):<br/>    _check_date = check_date or datetime.utcnow()<br/>    return self.create_date + timedelta(days=15) &lt; _check_date<br/></code></pre><br/><br/><p>Essentially this allows my unit test to supply its own date/time for the purpose of validating my logic.  </p><br/><br/><p>The argument in the referenced blog seems to be that this mucks up the API.  However, I have encountered situations in which <em>production</em> use cases called for supplanting current date/time with an alternate value.  In other words, the inversion of control approach eventually became a necessary part of my application.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CACH CAN IT BE DONE PRE EMPT
    </pattern>
    <template>
<![CDATA[<p>So you want to schedule something to run at a regular interval?  At the cost of some CPU time, you can use <a href="http://code.google.com/p/django-cron/wiki/Install" rel="nofollow">this simple app</a>.</p><br/><br/><p>Alternatively, if you can use it, the <a href="http://www.thesitewizard.com/general/set-cron-job.shtml" rel="nofollow">cron job</a> for every 5 minutes is:</p><br/><br/><pre><code>*/5 * * * * /path/to/project/refresh_cache.py<br/></code></pre><br/><br/><p>Web hosts provide different ways of setting these up.  For cPanel, use the Cron Manager.  For Google App Engine, use <a href="http://code.google.com/appengine/docs/python/config/cron.html" rel="nofollow"><code>cron.yaml</code></a>.  For all of these, you'll need to <a href="http://superjared.com/entry/django-and-crontab-best-friends/" rel="nofollow">set up the environment</a> in <code>refresh_cache.py</code> first.</p><br/><br/><p>By the way, responding to a user's request is considered lazy caching.  This is pre-emptive caching.  And don't forget to cache long enough for the page to be recreated!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRETTI CODE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could use <a href="http://pygments.org" rel="nofollow">Pygments</a> to do the syntax highlighting and get HTML to display.</p><br/><br/><p>Example code :</p><br/><br/><pre><code>from pygments import highlight<br/>from pygments.lexers import PythonLexer<br/>from pygments.formatters import HtmlFormatter<br/><br/>highlighted = highlight('# Some Python code', PythonLexer(), HtmlFormatter())<br/></code></pre><br/><br/><p>Also see the <a href="http://pygments.org/docs/" rel="nofollow">official documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH GWT
    </pattern>
    <template>
<![CDATA[<p>If you want to create a new model, both in GWT and in Django, the easiest way to generate code is to start from a very simple model definition, e.g.</p><br/><br/><pre><code>classname<br/>attribute1 type1<br/>attribute2 type2<br/></code></pre><br/><br/><p>Parsing that with a little Python is very easy, and so is generating code for both Django and GWT once you parsed the above-like lines. Customization for both Django and GWT will take only a little more work. Taking foreign keys into account is more complicated. Don't forget a tiny little generated method to serialize the objects, e.g. in JSON format.</p><br/><br/><p>The first reflex I had was to use introspection in Python, but then I ran into trouble when introspecting foreign key fields in django models. Maybe I should take a look at the code of the django-docs project (available at google code).</p><br/><br/><p>Finally, to speed up your GWT+Django development, you can use a http proxy servlet in hosted mode, so that you don't need to compile your GWT stuff every time you want to run your GWT front end with a Django back end. The servlet on <a href="http://www.servletsuite.com/servlets/httpproxy.htm" rel="nofollow">http://www.servletsuite.com/servlets/httpproxy.htm</a> will probably do the trick.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONVERT A WORD DOCUMENT INTO VERI SIMPL HTML IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>A good solution involves uploading into Google Docs and exporting the html version from it. (There must be an api for that?)</p><br/><br/><p>It does so many "clean ups"; <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">Beautiful Soup</a> down the road can be used to make any further changes, as appropriate. It is the most powerful and elegant html parsing library on the planet.</p><br/><br/><p>This is a known standard for Journalist companies.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM IN DJANGO AND LXML
    </pattern>
    <template>
<![CDATA[<p>"\x85why hello there!" is not a utf-8 encoded string. You should try decoding the webpage before passing it to lxml. Check what encoding it uses by looking at the http headers when you fetch the page maybe you find the problem there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON IN A WEB SERVER
    </pattern>
    <template>
<![CDATA[<p><a href="http://werkzeug.pocoo.org/" rel="nofollow">Werkzeug</a> is a great little python tool (werkzeug) that works with mod_wsgi for creating simple apps that dont need database backends with CMS's, such as calculators ..  They've even got a nifty <a href="http://werkzeug.pocoo.org/wiki30/" rel="nofollow">screencast</a> where they create a simple wiki in 30 minutes.  </p><br/><br/><p>You can always add something like SQLAlchemy/FormAlchemy later on if you eventually do want to have a ORM and CMS.</p><br/><br/><p>Avoid mod_python tho, it's got a pretty big memory footprint and it's actually a bit harder to install and set up than mod_wsgi, in my opinion.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRODUCT READI SERVER TO SERV DJANGO ON WIN32
    </pattern>
    <template>
<![CDATA[<p><a href="http://cherrypy.org" rel="nofollow">cherrypy</a> includes a good server. <a href="http://lincolnloop.com/blog/2008/mar/25/serving-django-cherrypy/" rel="nofollow">Here</a>'s how you set it up to work with django and some benchmarks.</p><br/><br/><p><a href="http://twistedmatrix.com/trac/wiki/TwistedWeb" rel="nofollow">twisted.web</a> has <a href="http://wsgi.org" rel="nofollow">wsgi</a> support and that could be used to run your django application. <a href="http://blog.dreid.org/2009/03/twisted-django-it-wont-burn-down-your.html" rel="nofollow">Here</a>'s how you do it.</p><br/><br/><p>In fact any <a href="http://wsgi.org" rel="nofollow">wsgi</a> server will do. Here's one more example, this time using <a href="http://pypi.python.org/pypi/Spawning" rel="nofollow">spawning</a>:</p><br/><br/><pre><code>$ spawn --factory=spawning.django_factory.config_factory mysite.settings<br/></code></pre><br/><br/><p>And for using <a href="http://pythonpaste.org/" rel="nofollow">paste</a>, the info is gathered <a href="http://pythonpaste.org/djangopaste/" rel="nofollow">here</a>.</p><br/><br/><p>Of course, you could use apache with <a href="http://code.google.com/p/modwsgi/" rel="nofollow">mod_wsgi</a>. It would be just another wsgi server. <a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango" rel="nofollow">Here</a> are the setup instructions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      X DAY AGO TEMPLAT FILTER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Have a look at the <a href="http://docs.djangoproject.com/en/1.0/ref/templates/builtins/#timesince" rel="nofollow">timesince</a> template filter. It's builtin.</p><br/><br/><p>The following returns a humanized diff between now and <code>comment_date</code> (e.g. <code>'8 hours'</code>):</p><br/><br/><pre><code>{{ comment_date|timesince }}<br/></code></pre><br/><br/><p>The following returns a humanized diff between <code>question_date</code> and <code>comment_date</code>:</p><br/><br/><pre><code>{{ comment_date|timesince:question_date }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE STATE FOR A LONG RUN PROCESS INVOK FROM DJANGO
    </pattern>
    <template>
<![CDATA[<p>We do this by having a "Request" table in the database.</p><br/><br/><p>When the upload arrives, we create the uploaded File object, and create a Request.</p><br/><br/><p>We start the background batch processor.</p><br/><br/><p>We return a 200 "we're working on it" page -- it shows the Requests and their status.</p><br/><br/><p>Our batch processor uses the Django ORM.  When it finishes, it updates the Request object.  We can (but don't) send an email notification.  Mostly, we just update the status so that the user can log in again and see that processing has completed.</p><br/><br/><p><hr /></p><br/><br/><p>Batch Server Architecture notes.</p><br/><br/><p>It's a WSGI server that waits on a port for a batch processing request.  The request is a REST POST with an ID number; the batch processor looks this up in the database and processes it.</p><br/><br/><p>The server is started automagically by our REST interface.  If it isn't running, we spawn it.  This makes a user transaction appear slow, but, oh well.  It's not supposed to crash.  </p><br/><br/><p>Also, we have a simple crontab to check that it's running.  At most, it will be down for 30 minutes between "are you alive?" checks.  We don't have a formal startup script (we run under Apache with mod_wsgi), but we may create a "restart" script that touches the WSGI file and then does a POST to a URL that does a health-check (and starts the batch processor).</p><br/><br/><p>When the batch server starts, there may be unprocessed requests for which it has never gotten a POST.  So, the default startup is to pull ALL work out of the Request queue -- assuming it may have missed something.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COLOR CERTAIN THING IN EMAC
    </pattern>
    <template>
<![CDATA[<p>You could use dedicated modes like <a href="http://code.djangoproject.com/wiki/Emacs" rel="nofollow">django-mode</a> or <a href="http://www.emacswiki.org/emacs/MuMaMo" rel="nofollow">MuMaMo</a>.</p><br/><br/><p>If you want something very basic, and assuming you're editing in <code>html-mode</code>, you could try the following:</p><br/><br/><pre><code>(defun django-highlight-comments ()<br/>  (interactive "p")<br/>  (highlight-regexp "{%.*?%}" 'hi-orange))<br/>(add-hook 'html-mode-hook 'django-highlight-comments)<br/></code></pre><br/><br/><p>(Just add the above lines to your <code>.emacs</code> or <code>init.el</code>, and eval it or restart emacs).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERLOAD INIT FOR CUSTOM FORM
    </pattern>
    <template>
<![CDATA[<p>You can dynamically modify your form by using the <code>self.fields</code> dict. Something like this may work for you:</p><br/><br/><pre><code>class TicketForm(forms.Form):<br/><br/>  Type = Type.GetTicketTypeField()<br/><br/>  def __init__(self, ticket, *args, **kwargs):<br/>    super(TicketForm, self).__init__(*args, **kwargs)<br/>    self.fields['state'] = State.GetTicketStateField(ticket.Type)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM DROP DOWN LIST FROM DATABAS
    </pattern>
    <template>
<![CDATA[<p>The 3 things you mention being common, make, model, year, would be the 3 input values.  When given to the server, an object containing the details would be returned to the calling page.  That page would parse the object details (using javscript), and update the UI to display them to the user.</p><br/><br/><p>From the Django side, there needs to be the facilities to take the 3 inputs, and return the output.  From the client-side, there needs to be the facilities to pass the 3 inputs to the server, and then appropriately parse the server's response.</p><br/><br/><p>There is a REST api framework for Django that makes it rather easy to add the "api" mentioned above -- <a href="http://bitbucket.org/jespern/django-piston/">Piston</a>.  Using Piston, you'd simply need to make a URL for that resource, and then add a handler to process it.  (you'll still need to skim the Piston documentation, but this should give you an idea of what it looks like)</p><br/><br/><pre><code>urls.py:<br/>vehicle_details = Resource(handler=VehicleDetails)<br/>url(r'^vehicle/(?&lt;make&gt;.*)/(?&lt;model&gt;.*)/(?&lt;year\d{2,4}/(?P&lt;emitter_format&gt;[a-z]{1,4}), vehicle_details, name='vehicle_details'),<br/><br/>handler.py:<br/>class VehicleDetails(BaseHandler):<br/>    methods_allowed = ('GET',)<br/>    model = Vehicles  #whatever your Django vehicle model is<br/><br/>    def read(self, request, *args, **kwargs):<br/>        # code to query the DB and select the options<br/>        # self.model.objects.filter()...            <br/>        # Build a custom object or something to return<br/><br/>        return custom_object<br/></code></pre><br/><br/><p>This simply sets up the url www.yoursite.com/vehicle/[make]/[model]/[year]/json to return a custom data object in JSON for jquery to parse.</p><br/><br/><p>On the client side, you could use jquery to setup an event (bind) so that when all 3 drop downs have a value selected, it will execute a $.get() to the api URL.  When it gets this result back, it passes it into the Jquery JSON parser, and gives the custom object, as a javascript object.  That object could then be used to populate more drop down menus.</p><br/><br/><p>(Big warning, I just wrote the following off the top of my head, so it's not meant to be copy and pasted.  It's just for the general idea.)</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt;<br/><br/>    // On document load<br/>    $(function() {<br/>        $('#dropdown_make').bind('change', checkForValues());<br/>        $('#dropdown_model').bind('change', checkForValues());<br/>        $('#dropdown_year').bind('change', checkForValues());<br/>    });<br/><br/>    function checkForValues() {<br/>        if ($('#dropdown_make').val() &amp;&amp; $('#dropdown_model').val() &amp;&amp; $('#dropdown_year').val())<br/>            updateOptions();        <br/>    }<br/><br/>    function updateOptions() {<br/>        url = '/vehicle/';<br/>        url += $('#dropdown_make').val() + '/';<br/>        url += $('#dropdown_model').val() + '/';<br/>        url += $('#dropdown_year').val() + '/';<br/>        url += 'json/';<br/>        $.get(url, function(){<br/>            // Custom data object will be returned here<br/>        })<br/>    }<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON CALLBACK DOE NOT WORK EVEN WITH VALID JSON AND SEEM TO BE USE OPTION REQUEST NOT GET
    </pattern>
    <template>
<![CDATA[<p>I think you have a cross-subdomain issue, <code>sub.domain.tld</code> and  <code>domain.ltd</code> are not the same.</p><br/><br/><p>I recommend you to install <a href="http://getfirebug.com/" rel="nofollow">Firebug</a> and check if your code is throwing an <em>Permission denied</em> Exception when the request starts, if it's the case, go for JSONP...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.NOW ( ) IN DJANGO APPLIC GOE BAD
    </pattern>
    <template>
<![CDATA[<p>I found that putting wsgi in daemon mode works. Not sure why, but it did. Seems like some of the newly created processes gets the time screwed up.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT DJANGO USER MODEL TO FIT MY NEED
    </pattern>
    <template>
<![CDATA[<p>Rather than modify the User class directly or do subclassing, you can also just repurpose the existing fields.  </p><br/><br/><p>For one site I used the "first_name" field as the "publicly displayed name" of a user and stuff a slugified version of that into the "username" field (for use in URLs).  I wrote a custom auth backend to allow people to log in using their "public name" or their email address, and I enforce the uniqueness of both of those at registration time.  This plays nicely with other reusable apps and doesn't introduce extra tables or queries.</p><br/><br/><p>For another site I didn't want usernames at all, just unique emails.  In order to satisfy Django's need for a unique username, I just hashed the email address and used that as the username (you have to base64-encode the hash to squeeze it under 30 characters).  Custom auth backend to allow login with email.</p><br/><br/><p>If backwards-compatibility weren't an issue, there are a lot of improvements I'd love to see made to django.contrib.auth and the User model to make them more flexible.  But there's quite a lot you can do inside the current constraints with a little creativity.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM FOREIGNKEY IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Here is how I do it:</p><br/><br/><pre><code>from django.contrib.contenttypes.models import ContentType<br/>from django.contrib.contenttypes import generic<br/><br/><br/>class Photo(models.Model):<br/>    picture = models.ImageField(null=True, upload_to='./images/')<br/>    caption = models.CharField(_("Optional caption"),max_length=100,null=True, blank=True)<br/><br/>    content_type = models.ForeignKey(ContentType)<br/>    object_id = models.PositiveIntegerField()<br/>    content_object = generic.GenericForeignKey('content_type', 'object_id')<br/><br/>class Article(models.Model):<br/>    ....<br/>    images     = generic.GenericRelation(Photo)<br/></code></pre><br/><br/><p>You would add smthg like </p><br/><br/><pre><code>    content_type = models.ForeignKey(ContentType)<br/>    object_id = models.PositiveIntegerField()<br/>    content_object = generic.GenericForeignKey('content_type', 'object_id')<br/></code></pre><br/><br/><p>to Faves<br/>and <em>generic.GenericRelation(Faves)</em> to Article and Cast</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/" rel="nofollow">contenttypes docs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENSUR DATABAS CHANG CAN BE EASILI MOVE OVER DVC USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>For getting your schema changes up to the server, just use South carefully. If you modify any table they might have data in, make sure you write both a schema migration and as necessary a data migration to preserve the sense of their data.</p><br/><br/><p>For getting their updated data back down to you (which doesn't seem critical, but might be nice to work with up-to-date test data as you're developing), I generally just use Django fixtures and the dumpdata and loaddata commands. It's easy enough to dump a fixture and commit it to your repo, then a loaddata on your end.</p><br/><br/><p>You could try using git hooks to automate some of this, but if you want automation I do recommend trying something like Fabric instead. Much of this stuff doesn't need to be run every single time you push/pull (in particular, I usually wouldn't want to dump a new data fixture that frequently).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL IMAG IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>You can extend the Admin interface pretty easily using Javascript. There's a <a href="http://www.arnebrodowski.de/blog/507-Add-and-remove-Django-Admin-Inlines-with-JavaScript.html" rel="nofollow">good article</a> on doing exactly what you want with a bit of jQuery magic.</p><br/><br/><p>You would just have to throw all of his code into one Javascript file and then include the following in your admin.py:</p><br/><br/><pre><code>class Photo(admin.ModelAdmin):<br/>    class Media:<br/>        js = ('jquery.js', 'inlines.js',)<br/></code></pre><br/><br/><p>Looking at his source, you would also have to dynamically add the link to add more inlines using Javascript, but that's pretty easy to do:</p><br/><br/><pre><code>$(document).ready(function(){<br/>    // Note the name passed in is the model's name, all lower case<br/>    $('div.last-related').after('&lt;div&gt;&lt;a class="add" href="#" onclick="return add_inline_form(\'photos\')"&gt;');<br/>});<br/></code></pre><br/><br/><p>You probably need to do some styling to make it all look right, but that should get you started in the right direction.</p><br/><br/><p>Also, since you're in <code>inline</code> land, check out the <a href="http://www.djangosnippets.org/snippets/1053/" rel="nofollow">inline sort snippet</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER BY TIME IN A DATE TIME FIELD
    </pattern>
    <template>
<![CDATA[<p>You could filter in python instead using the db's mechanisms:</p><br/><br/><pre><code>for e in Entry.objects.all():<br/>   if i.entered.hour&gt;= 9 and i.entered.hour &lt; 17 :# or break down to minutes/seconds<br/>        list.append(e)<br/></code></pre><br/><br/><p>but both solutions are ugly, i think.</p><br/><br/><p>Steve, you have to decide, what is less ugly for you:</p><br/><br/><ul><br/><li>processsing a lot of data in a for-loop,</li><br/><li>or use .extra(..) and by-passing the orm-system</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANONYM USER THE SAME FUNCTION AS REGIST ONE
    </pattern>
    <template>
<![CDATA[<p>I haven't done this before but from reading your description I would simply create a user object when someone needs to do something that requires it.  You then send the user a cookie which links to this user object, so if someone comes back (without clearing their cookies) they get the same skeleton user object.</p><br/><br/><p>This means that you can use your current code with minimal changes and when they want to migrate to a full registered user you can just populate the skeleton user object with their details.</p><br/><br/><p>If you wanted to keep your DB tidy-ish you could add a task that deletes all skeleton Users that haven't been used in say the last 30 days.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR WHEN INSERT INTO MYSQL
    </pattern>
    <template>
<![CDATA[<p>You basically need to ensure proper a string encoding. E.g. the string you provide to django is not UTF-8 encoded and therefore some characters can't be resolved.</p><br/><br/><p>Some helpful advice on how to find the encoding of the requested page can be found here: <a href="http://stackoverflow.com/questions/1020892/python-urllib2-read-to-unicode">http://stackoverflow.com/questions/1020892/python-urllib2-read-to-unicode</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT AN OBJECT S MEMBER USE A DICT
    </pattern>
    <template>
<![CDATA[<p>You can use the setattr function to dynamically set attributes:</p><br/><br/><pre><code>for key,value in request.GET.items():<br/>    setattr(foo, key, value)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT FORLOOP.COUNT QUESTION
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#cycle" rel="nofollow">cycle tag</a> is designed for this type of problem:</p><br/><br/><pre><code>{% for field in form %}<br/>    &lt;li class="{% cycle 'thiscolor' 'thatcolor' %}"&gt;{{ field }}&lt;/li&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID IN ADMIN WITH INLIN FORMSET AND MODEL FORM
    </pattern>
    <template>
<![CDATA[<p>In the inline formset, <code>self.instance</code> should refer to the parent object, ie the OrderedList.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALLOW LINE BREAK FROM TEXTAREA INPUT
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#linebreaks" rel="nofollow">found it</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV WORDPRESS BLOG FROM SUBDIRECTORI WITH DJANGO AND WSGI
    </pattern>
    <template>
<![CDATA[<p>You can disable Phusion Passenger for specific locations in the Passenger app using the following code:</p><br/><br/><pre><code>&lt;VirtualHost *:80&gt;<br/>    ServerName www.foo.com<br/>    DocumentRoot /apps/foo/public<br/>    &lt;Directory /apps/foo/public/wordpress&gt;<br/>        PassengerEnabled off<br/>        AllowOverride all      # &lt;-- Makes Wordpress's .htaccess file work.<br/>    &lt;/Directory&gt;<br/>&lt;/VirtualHost&gt;<br/></code></pre><br/><br/><p>For more tricks, check out the Phusion Passenger <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#_passengerenabled_lt_on_off_gt" rel="nofollow">documentation</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI BE WRITTEN ON A SINGL LINE
    </pattern>
    <template>
<![CDATA[<pre><code>errs = dict((f.auto_id, f.errors) for f in form if f.errors)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORTERROR AT NO MATTER WHAT I DO
    </pattern>
    <template>
<![CDATA[<p>Your <code>urls.py</code> is wrong; you should consider reading <a href="http://docs.djangoproject.com/en/dev/intro/tutorial03/#intro-tutorial03" rel="nofollow">this</a> and <a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#topics-http-urls" rel="nofollow">this</a>.</p><br/><br/><p>You don't include a function; you include a module.  You name a function, <code>mecore.views.index</code>.  You only include entire modules <code>include('mecore.views')</code>.</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/><br/># Uncomment the next two lines to enable the admin:<br/>from django.contrib import admin<br/>admin.autodiscover()<br/><br/>urlpatterns = patterns('',<br/>    # Example:<br/>    # (r'^****/', include('****.foo.urls')),<br/><br/>    # Uncomment the admin/doc line below and add 'django.contrib.admindocs' <br/>    # to INSTALLED_APPS to enable admin documentation:<br/>    # (r'^admin/doc/', include('django.contrib.admindocs.urls')),<br/><br/>    # Uncomment the next line to enable the admin:<br/>    (r'^admin/', include(admin.site.urls)),<br/>    (r'^test/', 'mecore.views.test'),<br/>    (r'^', 'mecore.views.index')<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THAT START USE RAIL OR DJANGO BUT SWITCH TO ENTERPRIS SOLUT
    </pattern>
    <template>
<![CDATA[<p>Twitter started out as a pure ruby on rails application iirc but later moved their backend to a system written in Scala running on a JVM</p><br/><br/><p><a href="http://www.artima.com/scalazine/articles/twitter%5Fon%5Fscala.html" rel="nofollow">More Info</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TO USE REMOT MYSQL SERVER
    </pattern>
    <template>
<![CDATA[<p>I finally got MySQLdb compiled without installing MySQL server in my MacOSX.</p><br/><br/><p>The steps:</p><br/><br/><ol><br/><li>Download appropriate MySQL package (tar) not install version and unpack</li><br/><li>Download MySQLdb wrapper from <a href="http://sourceforge.net/projects/mysql-python/files/" rel="nofollow">MySQL Python bindings</a></li><br/><li>Unpack MySQLdb</li><br/><li>Edit site.cfg to point to mysql_config into the directory you have downloaded</li><br/><li>Follow the instructions in MySQLdb (essentially build &amp; install)</li><br/><li>Copy the file libmysqlclient_r.15.dylib from your 'mysql/lib' folder to /usr/local/mysql/lib (assuming you have choosen threadsafe version)</li><br/><li>Now you are ready to use MySQLdb with any MySQL server</li><br/><li>You can test the installation using: python >>> import MySQLdb</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PER SESS TRANSACT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Multiple, concurrent, session-scale transactions will generally lead to deadlocks or worse (worse == livelock, long delays while locks are held by another session.)</p><br/><br/><p>This design is not the best policy, which is why Django discourages it.</p><br/><br/><p>The better solution is the following.</p><br/><br/><ol><br/><li><p>Design a <strong>Memento</strong> class that records the user's change.  This could be a saved copy of their form input.  You may need to record additional information if the state changes are  complex.  Otherwise, a copy of the form input may be enough.</p></li><br/><li><p>Accumulate the sequence of <strong>Memento</strong> objects in their session.  Note that each step in the transaction will involve fetches from the data and validation to see if the chain of mementos will still "work".  Sometimes they won't work because someone else changed something in this chain of mementos.  What now?</p></li><br/><li><p>When you present the 'ready to commit?' page, you've replayed the sequence of <strong>Mementos</strong> and are pretty sure they'll work.  When the submit "Commit", you have to replay the <strong>Mementos</strong> one last time, hoping they're still going to work.  If they do, great.  If they don't, someone changed something, and you're back at step 2: what now?</p></li><br/></ol><br/><br/><p>This seems complex.</p><br/><br/><p>Yes, it does.  However it does not hold any locks, allowing blistering speed and little opportunity for deadlock.  The transaction is confined to the "Commit" view function which actually applies the sequence of <strong>Mementos</strong> to the database, saves the results, and does a final commit to end the transaction.</p><br/><br/><p>The alternative -- holding locks while the user steps out for a quick cup of coffee on step n-1 out of n -- is unworkable.</p><br/><br/><p>For more information on <strong>Memento</strong>, see <a href="http://en.wikipedia.org/wiki/Memento%5Fpattern" rel="nofollow">this</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FREQUENT SHOULD PYTHON DECOR BE USE
    </pattern>
    <template>
<![CDATA[<p>Decorators are fine in their place and definitely not to be avoided -- when appropriate;-). I see your question as meaning essentially "OK so when <em>are</em> they appropriate"?</p><br/><br/><p>Adding some prefix and/or postfix code around some but not all methods of some classes is a good example. Were it all methods, a <em>class</em> decorator to wrap all methods would be better than repeating <code>@thisonetoo</code> endlessly;-). If it's once in a blue moon then it's not worth refactoring out to wrappers (decorators or otherwise). In the middle, there's a large ground where decorators are quite suitable indeed.</p><br/><br/><p>It boils down to one of the golden rules of programming -- DRY, for Don't Repeat Yourself. When you see your code becoming repetitious, you should refactor the repetition out -- and decorators are an excellent tool for that, although they're far from the only one (auxiliary methods and functions, custom metaclasses, generators and other iterators, context managers... <em>many</em> of the features we added to Python over the last few years can best be thought of as DRY-helpers, easier and smoother ways to factor out this or that frequent form of repetition!).</p><br/><br/><p>If there's no repetition, there's no real call for refactoring, hence (in particular) no real need for decorators -- in such cases, YAGNI (Y'Ain't Gonna Need It) can trump DRY;-).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PSYCOPG2 EXECUT ANI OF MY SQL FUNCTION ( INDEXERROR TUPL INDEX OUT OF RANG )
    </pattern>
    <template>
<![CDATA[<p>By default psycopg2 identifies argument placeholders using the <code>%</code> symbol (usually you'd have <code>%s</code> in the string). </p><br/><br/><p>So, if you use <code>cursor.execute('... %s, %s ...', (arg1, arg2))</code> then those <code>%s</code> get turned into the values of arg1 and arg2 respectively.</p><br/><br/><p>But since you call: <code>cursor.execute(sql_function_above)</code>, without extra arguments, and your SQL includes <code>%</code> signs the library is trying to find the 2nd argument passed into the function -- which is out of range, hence an IndexError.</p><br/><br/><p>Solution: Instead of using <code>%</code>, write <code>%%</code> in your SQL variable. This gets translated into a literal <code>%</code> before it's sent to PostgreSQL.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SIGNAL FOR RAIL
    </pattern>
    <template>
<![CDATA[<p>I think a closer equivalent than Rails' Observer is the <a href="http://ruby-doc.org/stdlib/libdoc/observer/rdoc/index.html" rel="nofollow">standard Ruby Observable module</a>. It lets you add a list of observers to an object and the object can then send notifications to the observers when it changes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL INHERIT AND FOREIGN KEY
    </pattern>
    <template>
<![CDATA[<p>From the <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#one-to-one-relationships" rel="nofollow">Django Docs</a>:</p><br/><br/><blockquote><br/>  <p>For example, if you were building a<br/>  database of "places", you would build<br/>  pretty standard stuff such as address,<br/>  phone number, etc. in the database.<br/>  Then, if you wanted to build a<br/>  database of restaurants on top of the<br/>  places, instead of repeating yourself<br/>  and replicating those fields in the<br/>  Restaurant model, you could make<br/>  Restaurant have a OneToOneField to<br/>  Place (because a restaurant "is a"<br/>  place; in fact, to handle this you'd<br/>  typically use inheritance, which<br/>  involves an implicit one-to-one<br/>  relation).</p><br/></blockquote><br/><br/><p>Normally, you would just have <code>Restaurant</code> inherit from <code>Place</code>. Sadly, you need what I consider a hack: making a one-to-one reference from subclass to superclass (<code>Restaurant</code> to <code>Place</code>)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATPOTLIB IMAG AS STRING
    </pattern>
    <template>
<![CDATA[<p>Django's <code>HttpResponse</code> object supports file-like API and you can pass a file-object to savefig.</p><br/><br/><pre><code>response = HttpResponse(mimetype="image/png")<br/># create your image as usual, e.g. pylab.plot(...)<br/>pylab.savefig(response, format="png")<br/>return response<br/></code></pre><br/><br/><p>Hence, you can return the image directly in the <code>HttpResponse</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THOUGHT TIP AND TRICK OR PEANUT ON MOVE FROM WORDPRESS TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django and wordpress cannot be compared, because, like it is said in django docs: "Django is a thing that you use to create things like wordpress".</p><br/><br/><p>If you would like to compare the speed:</p><br/><br/><p>Wordpress is really slow engine. One     of the slowest. Sometime it needs to     make 30 hits to database to show only    one page. <br/>      In django it completely depends    on how you white your app.       You     can make it slow, fast, or             whatever, depending on your skills       and functionality that you wish to       receive.</p><br/><br/><p>So, your question can't be answered, because you must decide whether you are whilling to make your new blog from scratch or not. If you are, then Django would be a great choice. If not, stay on the wordpress, or try a different engine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECIM NUMBER IN A DJANGO URL PATTERN
    </pattern>
    <template>
<![CDATA[<p>It can be something like</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>   (r'^item/value/(?P&lt;value&gt;\d+\.\d{2})/$', 'myapp.views.byvalue'),<br/>   ... more urls<br/>)<br/></code></pre><br/><br/><p>url should not start with slash.</p><br/><br/><p>in views you can have function:</p><br/><br/><pre><code>def byvalue(request,value='0.99'):<br/>    try:<br/>        value = float(value)<br/>    except:<br/>        ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INHERIT FROM AND OVERRID THE DJANGO MODEL CLASS TO CREAT A LISTOFSTRINGSFIELD
    </pattern>
    <template>
<![CDATA[<p>What you have described sounds to me really similar to the tags.<br /><br/>So, why not using <a href="http://code.google.com/p/django-tagging/" rel="nofollow">django tagging</a>?<br /><br/>It works like a charm, you can install it independently from your application and its API is quite easy to use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You should ALWAYS validate your form on the server side, client side validation is but a convenience for the user only.</p><br/><br/><p>That being said, Django forms has a variable form.errors which shows if certain form fields were incorrect.</p><br/><br/><p>{{ form.name_of_field.errors }} can give you each individual error of each field that's incorrectly filled out. See more here:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/forms/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/forms/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHEMA IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It's a bit more complicated then fancy then tricky escaping. Have a look at Ticket <a href="http://code.djangoproject.com/ticket/6148" rel="nofollow">#6148</a> in Django for perhaps a solution or at least a patch. It does some minor changes deep in the django.db core but it will hopefully be officially included in django.<br/>After that it's just a matter of saying</p><br/><br/><pre><code>db_schema = 'whatever_schema'<br/></code></pre><br/><br/><p>in the Meta class or for a global change set</p><br/><br/><pre><code>DATABASE_SCHEMA = 'default_schema_name'<br/></code></pre><br/><br/><p>in settings.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE FOR A CUSTOM DJANGO 404 PAGE
    </pattern>
    <template>
<![CDATA[<p>You need to override the default view handler for the 404 error. Here is the documentation on how to create your own custom 404 view function:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/views/#customizing-error-views">http://docs.djangoproject.com/en/dev/topics/http/views/#customizing-error-views</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIDDLEWAR FOR BOTH DJANGO AND PYLON
    </pattern>
    <template>
<![CDATA[<p>Pylons uses standard WSGI middleware. If you deploy Django via WSGI, you can also use WSGI middleware at that point. You can't, however, currently use WSGI middleware via the standard Django MIDDLEWARE_CLASSES option in settings.py.</p><br/><br/><p>That said, there is currently a Google Summer of Code project to enable the use of WSGI middleware in Django itself. I haven't been following the status of this project, but the code is available in the <a href="http://code.djangoproject.com/browser/django/branches/soc2009/http-wsgi-improvements" rel="nofollow">Http WSGI improvements branch</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHEDUL SEND OF EMAIL WITH DJANGO MAIL
    </pattern>
    <template>
<![CDATA[<p>You can just add another clause to the conditionals under your message processing loop (you will also need to import datetime at the top of your file):</p><br/><br/><pre><code>         for message in prioritize():<br/>            if DontSendEntry.objects.has_address(message.to_address):<br/>                logging.info("skipping email to %s as on don't send list " % message.to_address)<br/>                MessageLog.objects.log(message, 2) # @@@ avoid using literal result code<br/>                message.delete()<br/>                dont_send += 1<br/>            elif message.when_to_send &gt; datetime.datetime.now():<br/>                continue<br/>            else:<br/>                try:<br/>                  ... the rest of your code ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT EXTERN LIBRARI WITHIN DJANGO TEMPLAT TAG LIBRARI
    </pattern>
    <template>
<![CDATA[<p>This looks like one of those annoying relative path issues - solved in Python 2.6 and higher (where you can do import ..feedparser etc) but often a bit tricky on older versions. One cheap and cheerful way to fix this could be just to move feedparser.py in to your templatetags directory, as a sibling to twitterfeed.py</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIK FRAMEWORK ON RUBI
    </pattern>
    <template>
<![CDATA[<p>Try merb, merb-slices, and datamapper is probably the closest you can get in ruby.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ER FRAMEWORK THAN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://pylonshq.com/" rel="nofollow">Pylons</a> is pretty easy to set up - there's a command that generates the skeleton code for your application and you can write your code with no configuration other than the port number you want it to listen on.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND FCGI LOG QUESTION
    </pattern>
    <template>
<![CDATA[<p>As Alex stated, logging is thread-safe, but the standard handlers cannot be safely used to log from multiple processes into a single file.</p><br/><br/><p><a href="http://pypi.python.org/pypi/ConcurrentLogHandler/0.8.2" rel="nofollow">ConcurrentLogHandler</a> uses file locking to allow for logging from within multiple processes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE DJANGO SNIPPET DUMPSCRIPT
    </pattern>
    <template>
<![CDATA[<p>Just put the snippet in <code>{appname}/management/commands/</code>, where <code>{appname}</code> is the name of an installed app. Each Python module in that directory will be auto-discovered and registered as a command that can be executed as an action when you run <code>manage.py</code>.</p><br/><br/><p>You'll need to put an empty <code>__init__.py</code> in both <code>{appname}/management/</code> and <code>{appname}/management/commands/</code> for this to work, if those files don't already exist.</p><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands" rel="nofollow">the docs</a> for more on writing custom commands (obviously in your case, the command is already written).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OF RAIL MIGRAT OR DJANGO S SOUTH IN PYLON AND TG2
    </pattern>
    <template>
<![CDATA[<p>As Santi said, it doesn't have its own, but some of the ones available for SQLAlchemy should work:</p><br/><br/><p><a href="http://code.google.com/p/sqlalchemy-migrate/" rel="nofollow">sqlalchemy-migrate</a> which is also used by <a href="http://code.google.com/p/tesla-pylons-elixir/wiki/Migrations" rel="nofollow">tesla-pylons-elixir</a> as a way to get better integration with Pylons.</p><br/><br/><p><a href="http://trac.ollix.org/miruku/" rel="nofollow">miruku</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN MODIFI CLASS AND USE TYPE ( )
    </pattern>
    <template>
<![CDATA[<p>Lennart's hypothesis is correct: a metaclass is indeed the culprit. No need to guess, just look at <a href="http://code.djangoproject.com/browser/django/trunk/django/forms/forms.py" rel="nofollow">the sources</a>: the metaclass is <code>DeclarativeFieldsMetaclass</code> currently at line 53 of that file, and adds attributes <code>base_fields</code> and possibly <code>media</code> based on what attributes the class has at creation time. At line 329 ff you see:</p><br/><br/><pre><code>class Form(BaseForm):<br/>    "A collection of Fields, plus their associated data."<br/>    # This is a separate class from BaseForm in order to abstract the way<br/>    # self.fields is specified. This class (Form) is the one that does the<br/>    # fancy metaclass stuff purely for the semantic sugar -- it allows one<br/>    # to define a form using declarative syntax.<br/>    # BaseForm itself has no way of designating self.fields.<br/>    __metaclass__ = DeclarativeFieldsMetaclass<br/></code></pre><br/><br/><p>This implies there's some fragility in creating a new class with base <code>type</code> -- the supplied black magic might or might not carry through!  A more solid approach is to use the type of <code>EmployeeForm</code> which will pick up any metaclass that may be involved -- i.e.:</p><br/><br/><pre><code>return type(EmployeeForm)('EmployeeForm', (forms.Form, ), EmployeeForm.__dict__)<br/></code></pre><br/><br/><p>(no need to copy that <code>__dict__</code>, btw). The difference is subtle but important: rather than using directly <code>type</code>'s 3-args form, we use the 1-arg form to pick up the type (i.e., the metaclass) of the form class, then call THAT metaclass in the 3-args form.</p><br/><br/><p>Blackly magicallish indeed, but then that's the downside of frameworks which do such use of "fancy metaclass stuff purely for the semantic sugar" &amp;c: you're in clover as long as you want to do exactly what the framework supports, but to get out of that support even a little bit may require countervailing wizardry (which goes some way towards explaining why often I'd rather use a lightweight, transparent setup, such as werkzeug, rather than a framework that ladles magic upon me like Rails or Django do: my mastery of deep black magic does NOT mean I'm happy to have to USE it in plain production code... but, that's another discussion;-).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF MIDDLEWAR CHANG CSRF TOKEN OUTPUT ( FROM XHTML TO HTML )
    </pattern>
    <template>
<![CDATA[<p>You have to go and edit django.template.defaulttags.py: At line 48 there is the output of the tag, and you may change it as you wish.  </p><br/><br/><p>Please note that this is a development feature, and as such, subject to change - updating Django will likely remove your change!.<br><br/>Also, please take the time to go <a href="http://code.djangoproject.com/query" rel="nofollow">look for a ticket</a> about this particular problem: the solution I proposed will likely fix your problem, but I think that an "official" fix would be a lot nicer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE TEMPLATE DEBUG FLAG IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Assuming you haven't set <code>TEMPLATE_CONTEXT_PREPROCESSORS</code> to some other value in <code>settings.py</code>, Django will automatically load the <code>debug</code> context preprocessor (as noted <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#id1" rel="nofollow">here</a>). This means that you will have access to a variable called <code>debug</code> in your templates <em>if</em> <code>settings.DEBUG</code> is true <em>and</em> your local machine's IP address (which can simply be 127.0.0.1) is set in the variable <code>settings.INTERNAL_IPS</code> (which is described <a href="http://docs.djangoproject.com/en/dev/ref/settings/#internal-ips" rel="nofollow">here</a>). <code>settings.INTERNAL_IPS</code> is a tuple or list of IP addresses that Django should recognize as "internal".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MVC PATTERN FOR NON DATABAS DRIVEN MODEL
    </pattern>
    <template>
<![CDATA[<p>Your <code>models.py</code> can be (and sometimes is) empty.  You are not obligated to have a model which maps to a database.  </p><br/><br/><p>You should still have a <code>models.py</code> file, to make Django's admin happy.  The <code>models.py</code> file name is important, and it's easier to have an empty file than to try and change the file expected by various admin commands.</p><br/><br/><p>The "model" -- in general -- does not have to map to a database.  The "model" -- as a general component of MVC design -- can be anything.</p><br/><br/><p>You can -- and often do -- define your own "model" module that your views use.  Just don't call it <code>models.py</code> because it will confuse Django admin.  Call it something meaningful to your application:  <code>foo.py</code>.  This <code>foo.py</code> manipulates the real things that underpin your application -- not necessarily a Django <code>Model.model</code> subclass.</p><br/><br/><p>Django MVC does not require a database mapping.  It does explicitly expect that the module named <code>models.py</code> has a database mapping in it.  So, use an empty <code>models.py</code> if you have no actual database mapping.</p><br/><br/><p>Your <code>views.py</code> can use</p><br/><br/><pre><code>import foo<br/><br/>def index( request ):<br/>    objects = foo.somelistofobjects()<br/>    *etc.*<br/></code></pre><br/><br/><p>Django allows you to easily work with no database mapping.  Your model can easily be anything.  Just don't call it <code>models.py</code>.</p><br/><br/><p><hr /></p><br/><br/><p><strong>Edit</strong>.</p><br/><br/><p>Are Views registered with Models?  No.</p><br/><br/><p>On update to the Model by the Controller the Views get notified?  No.</p><br/><br/><p>Is the Model strictly the data respresentation as this is really MVP?  Yes.</p><br/><br/><p>Read the Django docs.  It's simple.</p><br/><br/><p>Web Request -> URL mapping -> View function -> Template -> Response.</p><br/><br/><p>The model can be used by the view function.  The model can be a database mapping, or it can be any other thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING TO DATE DATE TO UNIX TIMESTAMP
    </pattern>
    <template>
<![CDATA[<p>You need the <code>strptime</code> method. If you're on Python 2.5 or higher, this is a method on <code>datetime</code>, otherwise you have to use a combination of the <code>time</code> and <code>datetime</code> modules to achieve this.</p><br/><br/><p>Python 2.5 up:</p><br/><br/><pre><code>from datetime import datetime<br/>dt = datetime.strptime(s, "%d/%m/%Y-%H:%M:%S")<br/></code></pre><br/><br/><p>below 2.5:</p><br/><br/><pre><code>from datetime import datetime<br/>from time import strptime<br/>dt = datetime(*strptime(s, "%d/%m/%Y-%H:%M:%S")[0:6])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BY DJANGO S CLAIM TO MVC WHAT IS IT EXACTLI
    </pattern>
    <template>
<![CDATA[<p>Django's developers have a slightly non-traditional view on the MVC paradigm. They actually address this question in their FAQs, which you can read <a href="http://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names" rel="nofollow">here</a>. In their own words:</p><br/><br/><blockquote><br/>  <p>In our interpretation of MVC, the "view" describes the data that gets presented to the user. It's not necessarily how the data looks, but which data is presented. The view describes which data you see, not how you see it. It's a subtle distinction.</p><br/>  <br/>  <p>So, in our case, a "view" is the Python callback function for a particular URL, because that callback function describes which data is presented.</p><br/>  <br/>  <p>Furthermore, it's sensible to separate content from presentation - which is where templates come in. In Django, a "view" describes which data is presented, but a view normally delegates to a template, which describes how the data is presented.</p><br/>  <br/>  <p>Where does the "controller" fit in, then? In Django's case, it's probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEST DJANGO SELECT
    </pattern>
    <template>
<![CDATA[<p>As pccardune says, you get the relevant users like this:</p><br/><br/><pre><code>friendships = Friendship.objects.filter(from_friend=some_user)<br/></code></pre><br/><br/><p>But in fact you can pass this directly into your next query:</p><br/><br/><pre><code>second_select = Whatever.objects.filter(friend__in=friendships)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE AN ASYNCHRON FUNCTION CALL FROM PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Rather than trying to manage this via subprocesses or threads, I recommend you separate it out completely. There are two approaches: the first is to set a flag in a database table somewhere, and have a cron job running regularly that checks the flag and performs the required operation.</p><br/><br/><p>The second option is to use a message queue. Your file upload process sends a message on the queue, and a separate listener receives the message and does what's needed. I've used RabbitMQ for this sort of thing, but others are available.</p><br/><br/><p>Either way, your user doesn't have to wait for the process to finish, and you don't have to worry about managing subprocesses.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE FOR OBJECT IN DJANGO BETWEEN REQUEST
    </pattern>
    <template>
<![CDATA[<p>In a production WSGI environment, you would probably have multiple worker processes serving requests at the same time. These worker processes would be recycled from time to time, meaning local memory objects would be lost.</p><br/><br/><p>But if you really need this (and make sure you do), I suggest you look into Django's <a href="http://docs.djangoproject.com/en/dev/topics/cache/" rel="nofollow">caching framework</a>, check out local-memory caching. Also, have a look at <a href="http://docs.djangoproject.com/en/dev/topics/http/sessions/" rel="nofollow">sessions</a>.</p><br/><br/><p>But even the local-memory caching uses serialization (with <code>pickle</code>). It is easy to implement local-memory cache without serialization by implementing a custom cache back-end (see <a href="http://docs.djangoproject.com/en/dev/topics/cache/#using-a-custom-cache-backend" rel="nofollow">the docs</a>). You could use the code in <code>locmem.py</code> as a starting point to create a cache without serialization.</p><br/><br/><p>But I suspect you are doing a bit of premature optimization here?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIT REPO FOR PROJECT SKELETON
    </pattern>
    <template>
<![CDATA[<p>I finally decided to have seperate public branches as skeletons then use private submodules to host private code.</p><br/><br/><p>this solution looks powerful and secure enough for me.</p><br/><br/><p>thanks for suggestions</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TUR LOAD WORK WITH LOADDATA BUT FAIL SILENT IN UNIT TEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Your TestCase should be an instance of django.test.TestCase, not unittest.TestCase</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERWRIT GETATTRIBUTE FOR AN INSTANC
    </pattern>
    <template>
<![CDATA[<p>I believe <em>method-wrapper</em> is a wrapper around a method written in C. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIF IF CONDIT TEMPLATETAG WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Easiest way is to create a filter.</p><br/><br/><pre><code>@register.filter<br/>def is_favourite_of(object, user):<br/>    return Favourite.objects.is_favourite(user, object)<br/></code></pre><br/><br/><p>and in the template:</p><br/><br/><pre><code>{% if restaurant|is_favourite_of:user %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INHERIT HOW TO HAVE ONE METHOD FOR ALL SUBCLASS
    </pattern>
    <template>
<![CDATA[<p>See my answer to the same question <a href="http://stackoverflow.com/questions/929029/how-do-i-access-the-child-classes-of-an-object-in-django-without-knowing-the-name/929982#929982">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO CLEAR ALL THE MEMCACH KEY AND VALU
    </pattern>
    <template>
<![CDATA[<pre><code>cache._cache.flush_all()<br/></code></pre><br/><br/><p>Also see this ticket, it has a patch (that I haven't tested) to flush any type of cache backend: <a href="http://code.djangoproject.com/ticket/11503" rel="nofollow">http://code.djangoproject.com/ticket/11503</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAV IN DJANGO TO UPDAT INSTANC IMMEDI
    </pattern>
    <template>
<![CDATA[<p>When you find yourself using a post_save signal to update an object of the sender class, chances are you should be overriding the save method instead. In your case, the model definition would look like:</p><br/><br/><pre><code>class Test(models.Model):<br/>    title = models.CharField('title', max_length=200)<br/>    blah = models.CharField('blah', max_length=200)<br/><br/>    def save(self, force_insert=False, force_update=False):<br/>        if not self.blah:<br/>            self.blah = 'hello'<br/>        super(Test, self).save(force_insert, force_update)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE PSYCO WITH DJANGO MAKE ANI SENS
    </pattern>
    <template>
<![CDATA[<p>First, as gribbler and Ibrahim mentioned, your process won't die unless you are using pure CGI... which you shouldn't be using.</p><br/><br/><p>Secondly, the bottleneck in most web apps are database queries, for which Psyco won't help.</p><br/><br/><p>If you happen to have a some logic that is computationally intensive it can certainly make sense to use Psyco or Cython.  In fact I read a report somewhere (sorry it's been a while so can't find a link now) by someone who was doing some complex calculations and had great results compiling their entire <code>views.py</code> with Cython.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHAIN SELECT
    </pattern>
    <template>
<![CDATA[<p>I tried this and it works --- In the widgets.py file of django-smart-selects code, simply copy the section that deals with rendering javascript and delete it from the file. Remove the line that concatenates this (now deleted) javascript to the output.</p><br/><br/><p>For your formsets, do the complete rendering yourself. That is, in your template don't just do {{ form }} or {{ formset }} or whatever, but explicitly lay out all individual fields by doing {{ form.field }} in a {% for form in formset.forms %} loop.</p><br/><br/><p>Paste the javascript code that you copied over from widgets.py and customize it with the IDs in the javascript with {{ form.field.html_name }}</p><br/><br/><p>Write in your own customized urls in the javascript, following the pattern in the code.</p><br/><br/><p>Voila!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STREAM DYNAM GENER XML OUTPUT THROUGH AN HTTPRESPONS
    </pattern>
    <template>
<![CDATA[<p>About middlewares "breaking" streaming:</p><br/><br/><p>CommonMiddleware will try to consume the whole iterator <em>if</em> you set <code>USE_ETAGS = True</code> in settings. But in modern Django (1.1) there's a better way to do conditional get than CommonMiddleware + ConditionalGetMiddleware -- <a href="http://docs.djangoproject.com/en/dev/topics/conditional-view-processing/#topics-conditional-processing" rel="nofollow"><code>condition</code> decorator</a>. Use that and your streaming will stream okay :-)</p><br/><br/><p>Another thing that will try to consume the iterator is GzipMiddleware. If you want to use it you can avoid gzipping your streaming responses by turning it into a decorator and applying to individual views instead of globally.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECOR INSTANC METHOD IN PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>def decorate_method(f):<br/>  def wrapper(self, name, value, attrs):<br/>    self.attrs = attrs<br/>    return f(self, name, value, attrs)<br/>  return wrapper<br/><br/>def decorate_class(c):<br/>  for n in dir(c):<br/>    f = getattr(c, n)<br/>    if hasattr(f, 'im_func'):<br/>      setattr(c, n, decorate_method(f.im_func))<br/></code></pre><br/><br/><p>You'll probably need some other test to skip methods with a different signature, but, apart from that, <code>decorate_class(whatever)</code> should do what you want on any given class <code>whatever</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDECODEERROR WITH DJANGO S REQUEST.FIL
    </pattern>
    <template>
<![CDATA[<p>Django has some <a href="http://docs.djangoproject.com/en/dev/ref/unicode/#conversion-functions">utilities</a> that handle this (smart_unicode, force_unicode, smart_str).  Generally you just need smart_unicode.</p><br/><br/><pre><code>from django.utils.encoding import smart_unicode<br/>def view(request):<br/>    body = u""  <br/>    for filename, f in request.FILES.items():<br/>        body = body + 'Filename: ' + filename + '\n' + smart_unicode(f.read()) + '\n'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SID HIGHSCOR FOR A JAVASCRIPT WRITTEN GAME
    </pattern>
    <template>
<![CDATA[<p>1.) Any CGI script that can talk to a database and understand JSON, or other format of your choice, will do the work.</p><br/><br/><p>However, if you're familiar with Django, building your server on top of Django would be the most simple, in the sense of what you have to learn and how much application code you have to write. Seemingly simple CGI script can turn out rather complex if you write it from scratch.</p><br/><br/><p>I found <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a> to be a handy Django app to quickly write a REST-style API server. It supports JSON so it should be easy to interface with your JavaScript game.</p><br/><br/><p>2.) The most casual cracker will go for a <a href="http://en.wikipedia.org/wiki/Replay_attack" rel="nofollow">replay attack</a> and its variants: peek at the page source and execute a JavaScript function, intercept HTTP requests and resend it (should be easy with a Firefox add-on like Tamper Data).</p><br/><br/><p>To counteract the former, you can obfuscate the source code and HTTP body;</p><br/><br/><ul><br/><li>Minify the JavaScript code</li><br/><li>Encode the message you send to the server with Base64 or other encoding algorithm</li><br/></ul><br/><br/><p>The latter can be prevented by requiring all update requests to include an one-time password ("session token" in the <a href="http://en.wikipedia.org/wiki/Replay_attack" rel="nofollow">Wikipedia article</a>) that was recently acquired from the server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DD ANOTH IN DJANGO ADMIN SCREEN
    </pattern>
    <template>
<![CDATA[<p>Have you considered instead using CSS to simply not show the button?  Maybe that's a little too hacky.</p><br/><br/><p>This is untested, but I'm thinking...</p><br/><br/><h2>no-addanother-button.css</h2><br/><br/><pre><code>#_addanother { display: none }<br/></code></pre><br/><br/><h2>admin.py</h2><br/><br/><pre><code>class YourAdmin(admin.ModelAdmin):<br/>    # ...<br/>    class Media:<br/>        # edit this path to wherever<br/>        css = { 'all' : ('css/no-addanother-button.css',) }<br/></code></pre><br/><br/><p>Django Doc for doing this -- <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#modeladmin-media-definitions" rel="nofollow">Media as a static definition</a></p><br/><br/><p><strong>Note/Edit:</strong> The documentation says the files will be prepended with the MEDIA_URL but in my experimentation it isn't.  Your mileage may vary.</p><br/><br/><p>If you find this is the case for you, there's a quick fix for this...</p><br/><br/><pre><code>class YourAdmin(admin.ModelAdmin):<br/>    # ...<br/>    class Media:<br/>        from django.conf import settings<br/>        media_url = getattr(settings, 'MEDIA_URL', '/media/')<br/>        # edit this path to wherever<br/>        css = { 'all' : (media_url+'css/no-addanother-button.css',) }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDIT OF MANYTOMANI RELAT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You need to change your model structure a bit. As you recognise, the quantity doesn't belong on the Product model - it belongs on the <em>relationship</em> between Product and Invoice. </p><br/><br/><p>To do this in Django, you can use a <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#extra-fields-on-many-to-many-relationships">ManyToMany relationship with a <code>through</code> table</a>:</p><br/><br/><pre><code>class Product(models.Model):<br/>    ...<br/><br/>class ProductQuantity(models.Model):<br/>    product = models.ForeignKey('Product')<br/>    invoice = models.ForeignKey('Invoice')<br/>    quantity = models.IntegerField()<br/><br/>class Invoice(models.Model):<br/>    ...<br/>    products = models.ManyToManyField(Product, through=ProductQuantity)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RE IS A DJANGO OPTION FOR MOODL
    </pattern>
    <template>
<![CDATA[<p>I cannot think of any and Google apparently thinks the same.</p><br/><br/><p><a href="http://moodle.org/mod/forum/discuss.php?d=56831" rel="nofollow">This guy</a> asked the question on the Moodle forums in 2006 (link requires login) but he received no answer, yet :)</p><br/><br/><p>Recently, a bug in Moodle has been fixed <a href="http://bugs.moodle.org/browse/MDL-18182" rel="nofollow">allowing authentication from a Django DB</a>.</p><br/><br/><p>Sorry I cannot help more.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL LIST TO JSON
    </pattern>
    <template>
<![CDATA[<p>You can use pure Python to do it:</p><br/><br/><pre><code>import json<br/>list = [1, 2, (3, 4)] # Note that the 3rd element is a tuple (3, 4)<br/>json.dumps(list) # '[1, 2, [3, 4]]'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2 FIELD THAT MAY NOT HAVE THE SAME VALU
    </pattern>
    <template>
<![CDATA[<p>In Django, you can use "unique_together" in your model.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/options/#unique-together" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/options/#unique-together</a></p><br/><br/><p>unique_together = (("owner", "taker"),)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIM AND TIMEZON
    </pattern>
    <template>
<![CDATA[<p>You will need your users to specify their timezone in their user profile. This can then be used to calculate local times correctly.</p><br/><br/><p>Check out <a href="http://opensourcehacker.com/2008/06/30/relativity-of-time-shortcomings-in-python-datetime-and-workaround/" rel="nofollow">Relativity of time - shortcomings in Python datetime, and workaround</a> for some good information (and concrete examples).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLACE TO PUT EXTRA STARTUP CODE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I would put them in settings.py. In the past, I have put system checks like this:</p><br/><br/><pre><code>try:<br/>    from local_settings import *<br/>except ImportError:<br/>    print "Missing %s" % os.path.join(PROJECT_ROOT, "local_settings.py")<br/><br/>if DEBUG:<br/>    for p in [PROJECT_ROOT, MEDIA_ROOT, THEME_DIR, ADMIN_MEDIA_ROOT] + list(TEMPLATE_DIRS):<br/>        p = os.path.normpath(p)<br/>        if not os.path.exists(p):<br/>            print "Missing path: %s" % p<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM JS TO A DJANGO ADMIN FIELD
    </pattern>
    <template>
<![CDATA[<p>There are several ways of doing this. You already mentioned some yourself.</p><br/><br/><p>An option would be to override the template for the save page in your admin and add the needed code to the template. The needed media, Javascript, Css, etc, could be added using an inner Media class in your ModelAdmin class. This media class has two different attributes, a tuple with css stylesheets and a tuple with javascript files</p><br/><br/><p>I think for myself, that the best option in this case would be a custom address picker widget as you already mention in the your list of ways you don't want to do it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIQU FOREIGN KEY IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#in" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#in</a></p><br/><br/><pre><code>Farm.objects.filter(tree__in=TreeQuerySet)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPUL A DATABAS FOR TEST PURPOS
    </pattern>
    <template>
<![CDATA[<p>Check this app </p><br/><br/><p><a href="http://code.google.com/p/django-dilla/" rel="nofollow">http://code.google.com/p/django-dilla/</a></p><br/><br/><p>Let's say you wrote your blog application (oh yeah, your favorite!) in Django. Unit tests went fine, and everything runs extremely fast, even those ORM-generated ultra-long queries. You've added several categorized posts and it's still stable as a rock. You're quite sure the app is efficient and ready to for live deployment. Right? Wrong. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYEXCELER TO GENER DYNAM EXCEL FILE WITH DJANGO. ENSUR UNIQU TEMPORARI FILENAM
    </pattern>
    <template>
<![CDATA[<p>pyExcelerator is unmaintained, but it has a fork, <a href="http://pypi.python.org/pypi/xlwt" rel="nofollow">xlwt</a>, which is maintained and has more features, including allowing you to save to any file-like object. This includes saving straight to a Django <code>HttpResponse</code>:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>import xlwt<br/><br/>def my_view(request):<br/>    response = HttpResponse(mimetype="application/ms-excel")<br/>    response['Content-Disposition'] = 'attachment; filename="foo.xls"'<br/>    wb = xlwt.Workbook()<br/>    wb.save(response)<br/>    return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I am assuming that <code>pub_date</code> is a <code>django.db.models.DateField</code>, which means you can treat it as a <code>datetime.date</code> object.</p><br/><br/><p>If you convert them to the same type (either <code>datetime.datetime</code> or <code>datetime.date</code>) and  subtract one from the other, you will get an instance of <code>datetime.timedelta</code>.</p><br/><br/><p>As you are using <code>datetime.datetime.now()</code>, if your <code>pub_date</code> is simply a date rather than a datetime, you may as well use <code>ds = datetime.date.today()</code> instead:</p><br/><br/><pre><code>&gt;&gt;&gt; ds = datetime.date.today()<br/>&gt;&gt;&gt; dd = datetime.date(2009, 12, 9)<br/>&gt;&gt;&gt; ds - dd<br/>datetime.timedelta(2) # 2 days ago<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG SIZE IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>The right place to do this is during form validation.<br><br/>A quick example (will edit/integrate with more info later):</p><br/><br/><pre><code>from django.core.files.images import get_image_dimensions<br/>class myForm(forms.ModelForm):<br/>   class Meta:<br/>       model = myModel<br/>   def clean_picture(self):<br/>       picture = self.cleaned_data.get("picture")<br/>       if not picture:<br/>           raise forms.ValidationError("No image!")<br/>       else:<br/>           w, h = get_image_dimensions(picture)<br/>           if w != 100:<br/>               raise forms.ValidationError("The image is %i pixel wide. It's supposed to be 100px" % w)<br/>           if h != 200:<br/>               raise forms.ValidationError("The image is %i pixel high. It's supposed to be 200px" % h)<br/>       return picture<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GAE PYTHON OPTIM DJANGO FILTER FOR LANGUAG SUPPORT
    </pattern>
    <template>
<![CDATA[<p>Have you considered switching to standard gettext methods? Gettext is a widely spread approach for internationalization and very well embedded in the Python (and the Django) world.</p><br/><br/><p>Some links:</p><br/><br/><ul><br/><li><p><a href="http://docs.python.org/library/gettext.html" rel="nofollow">Python's gettext module</a></p></li><br/><li><p><a href="http://docs.djangoproject.com/en/dev/topics/i18n/" rel="nofollow">Django's support for gettext with special attention to unicode</a></p></li><br/><li><p><a href="http://www.poedit.net/" rel="nofollow">PoEdit, an editor for .po-files produced by pygettext</a></p></li><br/></ul><br/><br/><p>Your template would then look like this:</p><br/><br/><pre><code>{% load i18n %}<br/>&lt;h1&gt;{% trans "Header of my Collection" %}&lt;/h1&gt;<br/></code></pre><br/><br/><p>The files for translations can be generated by manage.py:</p><br/><br/><pre><code>manage.py makemessages -l fr<br/></code></pre><br/><br/><p>for generating french (fr) messages, for example.</p><br/><br/><p>Gettext is quite performant, so I doubt that you will experience a significant slow-down with this approach compared to your storage of the translation table in memcache. And what's more, it let's you work with "real" messages instead of abstract dictionary keys, which is, at least in my experience, ways better, if you have to read and understand the code (or if you have to find and change a certain message).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ZIPCOD BY PROXIM IN DJANGO WITH THE SPHERIC LAW OF COSIN
    </pattern>
    <template>
<![CDATA[<p>It's possible the execute <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/" title="raw SQL queries in Django">raw SQL queries in Django</a>.</p><br/><br/><p>My suggestion is, write the query to pull a list of IDs (which it looks like you're doing now), then use the IDs to pull the associated models (in a regular, non-raw-SQL Django query). Try to keep your SQL as dialect-independent as possible, so that you won't have to worry about one more thing if you ever have to switch databases.</p><br/><br/><p>To clarify, here's an example of how to do it:</p><br/><br/><pre><code>def get_models_within_25 (self):<br/>    from django.db import connection, transaction<br/>    cursor = connection.cursor()<br/><br/>    cursor.execute("SELECT id, ( <br/>        3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * <br/>        cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * <br/>        sin( radians( lat ) ) ) )<br/>        AS distance FROM stores HAVING distance &lt; 25<br/>        ORDER BY distance LIMIT 0 , 20;")<br/>    ids = [row[0] for row in cursor.fetchall()]<br/><br/>    return MyModel.filter(id__in=ids)<br/></code></pre><br/><br/><p>As a disclaimer, I can't vouch for this code, as it's been a few months since I've written any Django, but it should be along the right lines.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SAY I HAVE N T SET DATABASE ENGIN YET
    </pattern>
    <template>
<![CDATA[<p>That's probably because you're running tests directly, i.e. just <code>python testfile.py</code>. This way you effectively bypass all Django mechanisms and use Model classes directly.<br/>The downside is, the DB backend isn't set up automatically (by Django, which loads <code>settings.py</code> and connects to the appropriate DB), hence the error you're experiencing.<br/>I suppose there is a workaround around this problem, but it requires knowledge of internal Django workings for sure.</p><br/><br/><p>What you should do, instead, is launch your test via Django's testing framework (<a href="http://docs.djangoproject.com/en/dev/topics/testing/" rel="nofollow">check out the documentation</a>). It will take care of setting the DB connection properly, etc. There are also snazzy features like test fixtures. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT SLICE REVERS ORDER
    </pattern>
    <template>
<![CDATA[<p>Django's database queries are evaluated lazily, so the result of <code>thread.comment_set.all</code> is a QuerySet, not a list. A QuerySet supports many list-like functions, but not negative slicing, so the indexing error is not coming from the template filter itself. (If you're curious, slices on QuerySet objects get translated into a <code>limit</code> clause on the SQL statement, which is why you can't use a negative number).</p><br/><br/><p>In general, Django encourages a strict decoupling of templates and models; the <code>views.py</code> module is the glue where you do any work that requires knowledge of database models and queryset methods to translate your model data into simple variables and structures for the template. </p><br/><br/><p>Running a related query on a model from a template is not something you typically see in a Django template, and there's a good reason for this. Right now, it may seem very simple to slice the last three elements from the comment_set. Keep in mind, though, that the database will not return results in any guaranteed order. This means that, in addition to your slice, you now also need to add an order_by clause; there's simply no way to express this in a template, nor should there be. Better to think of the view as the translation between your model and the template, and let such database-facing work be done there, rather than embedded in HTML.</p><br/><br/><p>In this case, I would encourage you to pass an ordered slice to your template from the view:</p><br/><br/><pre><code># take first three sorted descending<br/>comments = thread.comment_set.order_by('-something')[:3]<br/><br/>context = Context({'comments':comments})<br/>return HttpResponse(tmplt.render(context))<br/></code></pre><br/><br/><p>If you must do the slicing in the template, and you really don't care about sorting the results, pass a list to the template. The <code>slice</code> filter will happily do negative slicing:</p><br/><br/><pre><code>comments = list(thread.comment_set.all())<br/>context = Context('comments':comments)<br/></code></pre><br/><br/><p>In the template:</p><br/><br/><pre><code>{% for comment in comments|slice:"-3:" %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOT LOOKUP IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I think the problem is that you are expecting <code>ndx</code> to be evaluated when that simply never happens.  Have you tried this:</p><br/><br/><pre><code>{{ test.0.bar }}<br/></code></pre><br/><br/><p>I think that will do what you're looking for.</p><br/><br/><blockquote><br/>  <p>Are there goblins with this approach...?</p><br/></blockquote><br/><br/><p>Sort of, but they aren't the ones you're talking about, and I don't think it's because of nesting, or at least, <em>it doesn't get worse after you get one level deep</em>.  What I mean by this is that all lookup parameters are literals.  There's no way to change that.  So while you might be able to develop custom template tags and pass them literals or variables to evaluate, you're really out of luck if you want to directly access some member of a variable based on the evaluated value of another value.  (You could possibly write a template tag for this, but it won't work in all desired situations and is possibly more complicated than it's worth.)</p><br/><br/><p>For whatever it's worth, this looks like a pretty intentional facet of the templating language.  I invite you to consider how the accessor should know whether <code>{{ foo.bar }}</code> should be read as <code>foo[bar]</code> or <code>foo['bar']</code>.  It doesn't seem possible to make a meaningful judgment without complicating the syntax and that's something that django's template design is adamant about avoiding.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUSPICI OPER DJANGO
    </pattern>
    <template>
<![CDATA[<p>Well, a little grepping around in the code shows that there may be a deeper error message that got homogenized along the way.</p><br/><br/><p>in django/core/files/storage.py, line 210 (this is in 1.1.1) we have:</p><br/><br/><pre><code>def path(self, name):<br/>    try:<br/>        path = safe_join(self.location, name)<br/>    except ValueError:<br/>        raise SuspiciousOperation("Attempted access to '%s' denied." % name)<br/>    return smart_str(os.path.normpath(path))<br/></code></pre><br/><br/><p>So the error has to be coming out of safe_join().</p><br/><br/><p>In django/utils/_os.py, we have the following. Note the ValueError it throws on the third to last line:</p><br/><br/><p>===========================</p><br/><br/><pre><code>def safe_join(base, *paths):<br/>    """<br/>    Joins one or more path components to the base path component intelligently.<br/>    Returns a normalized, absolute version of the final path.<br/><br/>    The final path must be located inside of the base path component (otherwise<br/>    a ValueError is raised).<br/>    """<br/>    # We need to use normcase to ensure we don't false-negative on case<br/>    # insensitive operating systems (like Windows).<br/>    base = force_unicode(base)<br/>    paths = [force_unicode(p) for p in paths]<br/>    final_path = normcase(abspathu(join(base, *paths)))<br/>    base_path = normcase(abspathu(base))<br/>    base_path_len = len(base_path)<br/>    # Ensure final_path starts with base_path and that the next character after<br/>    # the final path is os.sep (or nothing, in which case final_path must be<br/>    # equal to base_path).<br/>    if not final_path.startswith(base_path) \<br/>       or final_path[base_path_len:base_path_len+1] not in ('', sep):<br/>        raise ValueError('the joined path is located outside of the base path'<br/>                         ' component')<br/>    return final_path<br/></code></pre><br/><br/><p>==================</p><br/><br/><p>Hmmm, "The joined path is located outside of the base path component". Now there are a couple of calls to abspathu() in there (which is defined just above this routine and is different for NT than for other OSes). abspathu() converts all non-absolute paths to absolute by tacking on os.cwdu(), the current working directory.</p><br/><br/><p>Question: By any chance do you have a symlink (symbolic link) to your media directory? In other words, it's not a direct child of the project directory? I don't know if this is a valid question, it just popped out of my head.</p><br/><br/><p>Question: What <em>are</em> the values of <code>self.location</code> and <code>name</code> that are being passed to safe_join()?</p><br/><br/><p>Wild-ass-guess: is <code>self.location</code> empty?</p><br/><br/><p>Another wild-ass-guess: did MEDIA_ROOT somehow get changed to <code>/media/</code>?</p><br/><br/><p>If you have your own copy of Django installed (it's not hard to do), trying putting some print statements in these routines and then run it as the development server. The print output will go to the console.</p><br/><br/><p><strong>Update:</strong> Hmmm. You said "2) The values for self.location and name are: /home/tsoporan/site/media and /media/albums/anthem-for-the-underdog/30103635.jpg"</p><br/><br/><p>Does the following path make any sense? </p><br/><br/><pre><code>"/home/tsoporan/site/media/media/albums/anthem-for-the-underdog"<br/></code></pre><br/><br/><p>Note the .../media/media/... in there.</p><br/><br/><p>Also, what OS is this? Django rev?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLICKABL LINK TO A FIELD IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Define a custom method in your LawyerAdmin class that returns the link as HTML:</p><br/><br/><pre><code>def show_firm_url(self, obj):<br/>    return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (obj.firm_url, obj.firm_url)<br/>show_firm_url.allow_tags = True<br/></code></pre><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list%5Fdisplay" rel="nofollow">the documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL FOR ONE OBJECT
    </pattern>
    <template>
<![CDATA[<p>How about just massaging what you get back from serializers.serialize?  It is not that hard to trim off the square brackets from the front and back of the result.</p><br/><br/><pre><code>job = Job.objects.get(pk=1)<br/>array_result = serializers.serialize('json', [job], ensure_ascii=False)<br/>just_object_result = array_result[1:-1]<br/></code></pre><br/><br/><p>Not a fancy answer but it will give you just the object in json notation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DO IN DJANGO CODE
    </pattern>
    <template>
<![CDATA[<p>If you look in the import statements, you'll find that they tied _ to a function that turns stuff into unicode and localizes it by writing:</p><br/><br/><pre><code>from django.utils.translation import ugettext_lazy as _<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YSTACK WHOOSH INDEX GENER ERROR
    </pattern>
    <template>
<![CDATA[<p>It seems like there are two problems you're running into.</p><br/><br/><p>The first is the one that's generating that <code>TypeError</code>. It occurs while Haystack is searching through each app you have listed in <code>INSTALLED_APPS</code> for a search_indexes.py (since you're auto-registering). I'm not sure exactly what the problem is, but I'd start by doing a search through your project for <code>from list</code> and double-checking your code. I haven't encountered that exception before, but if that's happening in code you wrote you should post any relevant sections in your question</p><br/><br/><p>I believe the reason you get the same error with or without the search_indexes.py file is because it never reaches the point of trying to execute the code in that file.</p><br/><br/><p>That said, there should be more happening in that file (which is the second problem). You have to create an index class (that inherits from haystack.indexes.SearchIndex) and register that with the model. See <a href="http://haystacksearch.org/docs/tutorial.html#configuration" rel="nofollow">this section of the documentation</a> for instructions and an example.</p><br/><br/><p>I'd also ask this question in the <a href="http://groups.google.com/group/django-haystack" rel="nofollow">django-haystack Google Group</a> since the author and other users of haystack will see it there and they tend to be extremely helpful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSERT A NEW EVENT FOR NON PRIMARI CALENDAR USE PYTHON GDATA
    </pattern>
    <template>
<![CDATA[<p>Ok, i found the url in <em>a_calendar.content.src</em> it show like "http://www.google.com/calendar/feeds/"+id+"/private/full"</p><br/><br/><pre><code>def addEvent(calendar_service):<br/>    event = gdata.calendar.CalendarEventEntry()<br/>    event.content = atom.Content(text='Tennis with John 30.12.2009 15:00-16:00')<br/>    event.quick_add = gdata.calendar.QuickAdd(value='true')<br/>    feed = calendar_service.GetOwnCalendarsFeed()<br/>    calurl=[a_calendar.content.src for i, a_calendar in enumerate(feed.entry)]<br/>    new_event = calendar_service.InsertEvent(event, calurl[1]) #calurl[1] select the 2. cal of own's cals<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CONTAIN A LOT OF INIT .PI
    </pattern>
    <template>
<![CDATA[<p>Python doesn't take every subdirectory of every directory in <code>sys.path</code> to necessarily be a <em>package</em>: only those with a file called <code>__init__.py</code>. Consider the following shell session:</p><br/><br/><pre><code>$ mkdir adir<br/>$ echo 'print "hello world"' &gt; adir/helo.py<br/>$ python -c 'import adir.helo'<br/>Traceback (most recent call last):<br/>  File "&lt;string&gt;", line 1, in &lt;module&gt;<br/>ImportError: No module named adir.helo<br/>$ touch adir/__init__.py<br/>$ python -c 'import adir.helo'<br/>hello world<br/></code></pre><br/><br/><p>See? With just directory <code>adir</code> and module <code>helo.py</code> in it, the attempt to <code>import adir.helo</code> fails. If <code>__init__.py</code> also exists in <code>adir</code>, <strong>then</strong> Python knows that <code>adir</code> is a package, and therefore the import succeeds.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WO N T SHOW IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Do you have your apps in the INSTALLED_APPS section in settings.py? <br/>Make sure it has your apps listed there. My section reads</p><br/><br/><pre><code>INSTALLED_APPS = (<br/>'django.contrib.auth',<br/>'django.contrib.contenttypes',<br/>'django.contrib.sessions',<br/>'django.contrib.admin',<br/>'django.contrib.sites',<br/>'squick.items',<br/>'cowsite.search',<br/>'cowsite.posts',<br/></code></pre><br/><br/><p>)</p><br/><br/><p>for instance. I'm pretty sure for security, they won't show up in the admin unless they are in installed apps. I think I had this same issue, where I couldn't get cowsite to show up in the admin.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-index-page" rel="nofollow">The Django docs</a> say about the admin page: "By default, it displays all the apps in INSTALLED_APPS that have been registered with the admin application, in alphabetical order"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHEDUL A TASK TO EXECUT AT A SPECIF TIME USE CELERI
    </pattern>
    <template>
<![CDATA[<p>The recently released version 1.0.3 supports this now, thanks to Patrick Altman!</p><br/><br/><p>Example:</p><br/><br/><pre><code>from celery.task.schedules import crontab<br/>from celery.decorators import periodic_task<br/><br/>@periodic_task(run_every=crontab(hour=7, minute=30, day_of_week="mon"))<br/>def every_monday_morning():<br/>    print("This runs every Monday morning at 7:30a.m.")<br/></code></pre><br/><br/><p>See the changelog for more information:</p><br/><br/><p><a href="http://celeryproject.org/docs/changelog.html" rel="nofollow">http://celeryproject.org/docs/changelog.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SORT DICT IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>try this: <a href="http://www.bhphp.com/blog4.php/2009/08/17/django-templates-and-dictionaries" rel="nofollow">http://www.bhphp.com/blog4.php/2009/08/17/django-templates-and-dictionaries</a></p><br/><br/><p>a custom template filter will do the trick.</p><br/><br/><pre><code>from django import template<br/>register = template.Library()<br/><br/>def dict_get(value, arg):<br/>    #custom template tag used like so:<br/>    #{{dictionary|dict_get:var}}<br/>    #where dictionary is duh a dictionary and var is a variable representing<br/>    #one of it's keys<br/><br/>    return value[arg]<br/><br/>register.filter('dict_get',dict_get)<br/></code></pre><br/><br/><p>more on custom template filters: <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags</a></p><br/><br/><p>in your example you'd do:</p><br/><br/><pre><code>{% for employee, dependents in company_dict|company %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODULAR DJANGO SETTINGS.PI
    </pattern>
    <template>
<![CDATA[<p>You might be interested in <a href="http://code.djangoproject.com/wiki/SplitSettings#UsingalistofconffilesTransifex" rel="nofollow">this solution</a>; uses execfile() to load a series of settings files in order, where each file has full access to settings from previously-loaded files, to update, modify, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICT BY VARIABL IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>There's no builtin way to do that, you'd need to write a simple template filter to do this: <a href="http://code.djangoproject.com/ticket/3371" rel="nofollow">http://code.djangoproject.com/ticket/3371</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMILAR TO RAKE ROUT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Have found <a href="http://code.google.com/p/django-command-extensions/" rel="nofollow">http://code.google.com/p/django-command-extensions/</a>:</p><br/><br/><pre><code>$ ./manage.py show_urls<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KNOW IF JOB HAVE BEEN AR PERFORM CRONTAB
    </pattern>
    <template>
<![CDATA[<p>First, I would probably configure cron to mail yourself any output by using <code>MAILTO</code>:</p><br/><br/><p>In /etc/crontab:</p><br/><br/><pre><code>MAILTO=username<br/></code></pre><br/><br/><p>Second, I usually add something to my script that (almost) cannot possibly fail, like the following:</p><br/><br/><pre><code>#!/bin/sh<br/>echo "$0 ran on 'date +%c'" &gt;&gt; /tmp/crontab_test.log<br/><br/># ... rest of program<br/></code></pre><br/><br/><p>If you're calling a python script directly from cron, you could do something similar or create a wrapper shell script.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT EXACTLI ARE SIGNAL GOOD FOR
    </pattern>
    <template>
<![CDATA[<p>Django Signals are a way to perform an action <code>A</code> in response to an event <code>E</code>.</p><br/><br/><p>In a unreal world you can avoid using signals by modifying the code where the event <code>E</code> occurs and appending the code to perform the action <code>A</code>.</p><br/><br/><p>The problem is that doing so you loose maintainability, readability and a lot of other software engineering adjectives :)</p><br/><br/><p>Signals allow you to do the same thing indipendently from where or how the event <code>E</code> occurs and so doing so in a clever way that allow maintanability, readability, etc...</p><br/><br/><p>Yes, I think that saying that Signals are useful to enable <strong>decoupling</strong> is really true.</p><br/><br/><p>(You also mentioned multi threading. If you did so because you think signals are good because they are executed concurrently and so quickly... Well... I don't know if they are concurrently executed but anyway I really don't think this is the point for what django signals are useful for)</p><br/><br/><p>An example of a good way of taking advantage of Signals is about the fact that when you want to store other information to an user in django you have to use Userprofiles.<br/>In this case, the <a href="http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users" rel="nofollow">documentation itself</a>, tell you that it may be convenient to register a signal in response to any creation of new users just to add to the new created users an empty user profile.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM ERROR FOR AJAX REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Wow, it's been a year since I've seen this thread. Well, with the advent of Django 1.3 and the magical, undocumented class-based views, it's become more easy to extent Django's view related functionality. My project which makes heavy use of Django's class-based generic CRUS views need AJAX and JSON functionality. I've added an example of how I've modified Django's update view to support AJAX and return AJAX responses in the JSON format. Have a look:</p><br/><br/><pre><code>def errors_to_json(errors):<br/>    """<br/>    Convert a Form error list to JSON::<br/>    """<br/>    return dict(<br/>            (k, map(unicode, v))<br/>            for (k,v) in errors.iteritems()<br/>        )<br/><br/>class HybridUpdateView(UpdateView):<br/>    """<br/>    Custom update generic view that speaks JSON<br/>    """<br/>    def form_valid(self, form, *args, **kwargs):<br/>        """<br/>        The Form is valid<br/>        """<br/>        form.save()<br/><br/>        self.message = _("Validation passed. Form Saved.")<br/>        self.data = None<br/>        self.success = True<br/><br/>        payload = {'success': self.success, 'message': self.message, 'data':self.data}<br/><br/>        if self.request.is_ajax():<br/>            return HttpResponse(json.dumps(payload),<br/>                content_type='application/json',<br/>            )<br/>        else:<br/>            return super(HybridUpdateView, self).form_valid(<br/>                form, *args, **kwargs<br/>            )<br/><br/>    def form_invalid(self, form, *args, **kwargs):<br/>        """<br/>        The Form is invalid<br/>        """<br/>        #form.save()<br/><br/>        self.message = _("Validation failed.")<br/>        self.data = errors_to_json(form.errors)<br/>        self.success = False<br/><br/>        payload = {'success': self.success, 'message': self.message, 'data':self.data}<br/><br/>        if self.request.is_ajax():<br/>            return HttpResponse(json.dumps(payload),<br/>                content_type='application/json',<br/>            )<br/>        else:<br/>            return super(HybridUpdateView, self).form_invalid(<br/>                form, *args, **kwargs<br/>            )<br/></code></pre><br/><br/><p>The response JSON contains three fields - <code>message</code> (which is a human readable message), <code>data</code> (which is this case would be the list of form errors) and <code>success</code> (which is either <code>true</code> or <code>false</code>, indicating whether the request was successful or not respectively.). This is very easy to handle in jQuery client-side. A sample response looks like:</p><br/><br/><pre><code>Content-Type: application/json<br/><br/>{"message": "Validation failed.", "data": {"host": ["This field is required."]}, "success": false}<br/></code></pre><br/><br/><p>This is just an example of how I serialized the form errors to JSON and implemented it in a class-based generic view but can be cannibalized to work with regular style views as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRUNCAT TABL USE DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>The closest you'll get with the ORM is <code>Book.objects.all().delete()</code>.</p><br/><br/><p>There are differences though: truncate will likely be faster, but the ORM will also chase down foreign key references and delete objects in other tables.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR DRUPAL WHICH ONE SHOULD I USE THAT SUIT BEST MY NEED
    </pattern>
    <template>
<![CDATA[<p>I've built several sites on Drupal and Django, my conclusion is: if you need to create something similar to the standard drupal (or Ubercart) feature-set, you don't have much time for development, and you don't expect hight load pressure on a site - you should pick Drupal.</p><br/><br/><p>But if you do need to create something more or less custom (no drupal modules already available) you should go with Django - it is quicker and more pleasurable to implement custom complex features using Django. For example if my goal is to implement a second stackoverflow, I'll prefer Django because it will be extremely complicated to implement this badge-based rating system with Drupal. </p><br/><br/><p>P.S.<br/>Studying Python (and Django) is an investment in your future, I think. You'll never be able to implement something similar to DropBox using drupal and php, although it could be implemented with java - but java is not so good from development speed perspective.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING TO LIST IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Use the <code>split</code> method.  Example:</p><br/><br/><pre><code>&gt;&gt;&gt; "0,1,2".split(",")<br/>['0', '1', '2']<br/></code></pre><br/><br/><p>Or even,</p><br/><br/><pre><code>&gt;&gt;&gt; [int(x) for x in "0,1,2".split(",")]<br/>[0, 1, 2]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOWNLOAD THE DJANGO DOCUMENT
    </pattern>
    <template>
<![CDATA[<p>Django's documentation is built using <a href="http://sphinx.pocoo.org/index.html" rel="nofollow">Sphinx</a> and <a href="http://code.djangoproject.com/browser/django/trunk/docs" rel="nofollow">included in their source tree</a>.</p><br/><br/><p>From a checked-out copy of Django's source, just run <code>make</code> in the docs directory.  You can find instructions for getting the source here: <a href="http://www.djangoproject.com/download/" rel="nofollow">http://www.djangoproject.com/download/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INPUT ELEMENT ERROR CSS CLASS
    </pattern>
    <template>
<![CDATA[<p>This can be done completely through your template.</p><br/><br/><p>You build the form template for each form field that you want to test you can use the following example construct</p><br/><br/><pre><code>&lt;input type="text" class="reg-txt{% if form.fieldname.errors %} errors{% endif %}"/&gt;<br/></code></pre><br/><br/><p>This lets you provide the interface you want without modifying the view &amp; django form code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO A QUERI STRING URL CONTAIN NON ASCII CHARACT IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>HttpResponseRedirect(((u'/page/?title=' + query_string).encode('utf-8'))<br/></code></pre><br/><br/><p>is the first thing to try (since UTF8 is the only popular encoding that can handle all Unicode characters).  That should definitely get rid of the exception you're observing -- the issue then moves to ensuring the handler for <code>/page</code> can properly deal with UTF-8 encoded queries (presumably by decoding them back into Unicode).  However, that part is not, strictly speaking, germane to this specific question you're asking!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON USE ALL PROCESSOR IN THREAD MODE
    </pattern>
    <template>
<![CDATA[<p>Will Python use all processors in thread mode?  No.</p><br/><br/><p>Python won't use all available processors; is this Python behavior normal? Yes, it's normal because of the GIL.</p><br/><br/><p>For a discussion see <a href="http://mail.python.org/pipermail/python-3000/2007-May/007414.html" rel="nofollow">http://mail.python.org/pipermail/python-3000/2007-May/007414.html</a>.</p><br/><br/><p>You may find that having a couple (or 4) of threads per core/process can still improve performance if there is some blocking, for example waiting for a response from the database would cause that process to block other connections otherwise.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HERE ITER OVER A DICTIONARI IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>To iterate a dictionary wouldn't you need:</p><br/><br/><pre><code>&lt;h4&gt;Statistics&lt;/h4&gt;<br/>&lt;ul&gt;<br/> {% for key, value in manor_stats.get_fields.items %}<br/> &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;<br/> {% endfor %}<br/>&lt;/ul&gt;<br/></code></pre><br/><br/><p>But I'd suggest retrieving the dictionary from the function first:</p><br/><br/><p>Views.py:</p><br/><br/><pre><code>    manor_stats = Manors.objects.get(structidx__exact=id).get_fields()<br/>    return render_to_response('template.html', { 'place' : place, 'manor_stats' : manor_stats }, context_instance = RequestContext(request))<br/></code></pre><br/><br/><p>And then:</p><br/><br/><pre><code>&lt;h4&gt;Statistics&lt;/h4&gt;<br/>&lt;ul&gt;<br/> {% for key, value in manor_stats.items %}<br/> &lt;li&gt; {{ key }}: {{ value }}&lt;/li&gt;<br/> {% endfor %}<br/>&lt;/ul&gt;<br/></code></pre><br/><br/><p>But only because I'm not that familiar with how much dereferencing the templating system can do. Seeing as you know how to deference it you're saving the effort of having the renderer work it out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URLSAF BASE64 DECOD WITH DECRYPT
    </pattern>
    <template>
<![CDATA[<p>The problem is that b64decode quite explicitly can only take bytes (a string), not unicode.</p><br/><br/><pre><code>&gt;&gt;&gt; import base64<br/>&gt;&gt;&gt; test = "Hi, I'm a string"<br/>&gt;&gt;&gt; enc = base64.urlsafe_b64encode(test)<br/>&gt;&gt;&gt; enc<br/>'SGksIEknbSBhIHN0cmluZw=='<br/>&gt;&gt;&gt; uenc = unicode(enc)<br/>&gt;&gt;&gt; base64.urlsafe_b64decode(enc)<br/>"Hi, I'm a string"<br/>&gt;&gt;&gt; base64.urlsafe_b64decode(uenc)<br/>Traceback (most recent call last):<br/>...<br/>TypeError: character mapping must return integer, None or unicode<br/></code></pre><br/><br/><p>Since you know that your data only contains ASCII data (that's what base64encode will return), it should be safe to encode your unicode code points as UTF-8 bytes, those bytes will be equivalent to the ASCII you expected.</p><br/><br/><pre><code>&gt;&gt;&gt; base64.urlsafe_b64decode(uenc.encode("utf-8"))<br/>"Hi, I'm a string"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSTAL PYTHON SITE PACKAG
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://tools.assembla.com/yolk/" rel="nofollow">yolk</a>.</p><br/><br/><blockquote><br/>  <p>Yolk is a Python command-line tool and library for obtaining information about packages installed by setuptools, easy_install and distutils (Python 2.5) and for querying PyPI (Python Package Index a.k.a. The Cheese Shop).</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO WITHOUT SMTP SERVER. LIKE PHP MAIL ( ) FUNCTION DOE
    </pattern>
    <template>
<![CDATA[<p>PHP uses sendmail on UNIX system to send emails. I guess at some point when you set up the system, this is, sendmail is configured.</p><br/><br/><p>There is an <a href="http://pypi.python.org/pypi/sendmail/" rel="nofollow">API to sendmail</a> for Python, maybe it helps you. But there is a SMTP server involved in any case ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON FORK FROM A GIT REPO CREAT WITH GIT SVN
    </pattern>
    <template>
<![CDATA[<p>The idea is:</p><br/><br/><ul><br/><li>whatever Git branch is the direct result of a <code>git svn rebase</code> should not be rebased: its history must be kept as originally imported, in order to make successful dcommit</li><br/><li>any other Git branch (not directly linked to a SVN branch) can be merged/rebased at will.</li><br/></ul><br/><br/><p>See also <a href="http://stackoverflow.com/questions/3322105/easy-merging-in-svn-using-git-svn/3322302#3322302">Easy merging in svn using git-svn</a>.</p><br/><br/><p>So if the branches affected by merge/rebase in various Django repo are not the ones involved with dcommit (to sync back to a SVN repo), it should be fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONSTRUCT A DJANGO REVERSE URL USE QUERI ARG
    </pattern>
    <template>
<![CDATA[<p>Your regular expresion has no place holders (that's why you are getting NoReverseMatch):</p><br/><br/><pre><code>url(r'^depict$', cyclops.django.depict, name="cyclops-depict"),<br/></code></pre><br/><br/><p>You could do it like this:</p><br/><br/><pre><code>{% url cyclops-depict %}?smiles=CO&amp;width=200&amp;height=200<br/></code></pre><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#what-the-urlconf-searches-against" rel="nofollow">URLconf search does not include GET or POST parameters</a></p><br/><br/><p>Or if you wish to use {% url %} tag you should restructure your url pattern to something like </p><br/><br/><pre><code>r'^depict/(?P&lt;width&gt;\d+)/(?P&lt;height&gt;\d+)/(?P&lt;smiles&gt;\w+)$' <br/></code></pre><br/><br/><p>then you could do something like </p><br/><br/><pre><code>{% url cyclops-depict 200 200 "CO" %}<br/></code></pre><br/><br/><hr><br/><br/><p><strong>Follow-up:</strong></p><br/><br/><p>Simple example for custom tag:</p><br/><br/><pre><code>from django.core.urlresolvers import reverse<br/>from django import template<br/>register = template.Library()<br/><br/>@register.tag(name="myurl")<br/>def myurl(parser, token):<br/>    tokens = token.split_contents()<br/>    return MyUrlNode(tokens[1:])<br/><br/>class MyUrlNode(template.Node):<br/>    def __init__(self, tokens):<br/>        self.tokens = tokens<br/>    def render(self, context):<br/>        url = reverse('cyclops-depict')<br/>        qs = '&amp;'.join([t for t in self.tokens])<br/>        return '?'.join((url,qs))<br/></code></pre><br/><br/><p>You could use this tag in your templates like so:</p><br/><br/><pre><code>{% myurl width=200 height=200 name=SomeName %}<br/></code></pre><br/><br/><p>and hopefully it should output something like</p><br/><br/><pre><code>/depict?width=200&amp;height=200&amp;name=SomeName<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO SERIAL DICT OBJECT TO JSON
    </pattern>
    <template>
<![CDATA[<p>Also, since you seem to be using Python 2.6, you could just use the <code>json</code> module directly:</p><br/><br/><pre><code>import json<br/>data = json.dumps({'a': 1})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI IN PYTHON. HOW TO ITER OVER THE LINE AND SAVE THEM EFFICI WITH A 2MILLION LINE FILE
    </pattern>
    <template>
<![CDATA[<p>Make sure that Django's DEBUG setting is set to False</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM DEAL WITH MYSQL BIT ( 1 ) FIELD
    </pattern>
    <template>
<![CDATA[<p>I guess that only way is to subclass, say, BooleanField, and override to_python/get_prep_value functions, so the field works seamlessly with django and<br/>your db.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT MATCH QUERI DOE NOT EXIST WHEN I CAN SEE IT IN THE DATABAS
    </pattern>
    <template>
<![CDATA[<p>Try</p><br/><br/><pre><code>a = Staff.objects.get(NameFirst=u'"ANDREA"')<br/></code></pre><br/><br/><p>The <code>u</code> tells Python/Django it's a Unicode string, not a plain old <code>str</code>, and in your <code>s[0].NameFirst</code> sample, it's showing the value as containing double quotes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD TO USE DJANGO 1.1 ON APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Yes, Django 1.1 is well-supported on Google App Engine.  You'll need to do your own installation thereof locally, to enable it in the GAE SDK -- but it's already there for you on the App Engine production servers, see <a href="http://code.google.com/appengine/docs/python/tools/libraries.html#Django" rel="nofollow">the docs</a> -- just do</p><br/><br/><pre><code>import os<br/>os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'<br/><br/>from google.appengine.dist import use_library<br/>use_library('django', '1.1')<br/></code></pre><br/><br/><p><strong>Edit</strong>: Django is by far the leading web app framework for Python, and its popularity is surely well-deserved.  However, personally, I use it only when I "have to" (mostly to get collaborators and make them comfy on a project's technology stack) -- maybe because what I tend to develop server-side are more "web services/apps" than "sites" (the UI part I'd rather leave to the browser, with Dojo, jQuery, or Google Closure!-), I find Django too "heavy" for my tastes.  I'd rather have <a href="http://werkzeug.pocoo.org/" rel="nofollow">Werkzeug</a>, or <a href="http://code.google.com/p/tipfy/" rel="nofollow">tipfy</a> -- the latest and greatest super-light Wekzeug-based App Engine - specialized framework!-) -- I love e.g. tipfy's ability to use Jinja2 and/or Mako in lieu of Django's templates, the simple and flexible authentication and session schemes, and the debugger -- in addition to all the luscious, light-weight flexibility of Werkzeug and Webapp.  But, hey, that's a very subjective opinion of mine!-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEVER WAY OF BUILD A TAG CLOUD PYTHON
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://www.acm.org/crossroads/xrds13-4/natural_language.html" rel="nofollow">NLTK</a>, and in particular its <strong>Stopwords corpus</strong>:</p><br/><br/><blockquote><br/>  <p>Besides regular content words, there<br/>  is another class of words called stop<br/>  words that perform important<br/>  grammatical functions, but are<br/>  unlikely to be interesting by<br/>  themselves. These include<br/>  prepositions, complementizers, and<br/>  determiners. NLTK comes bundled with<br/>  the Stopwords corpus, a list of 2400<br/>  stop words across 11 different<br/>  languages (including English).</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL AN APP ON GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Regarding point 1, there's really no need to go to such lengths: Simply use unicode key names. They'll be encoded as UTF-8 in the datastore for you.</p><br/><br/><p>Regarding point 3, there are many ways to handle language detection. Certainly accept_language should be part of it, and you'll find <a href="http://pythonpaste.org/webob/reference.html#accept-headers" rel="nofollow">webob's accept_language support</a> particularly useful here (hopefully Django or your framework-of-choice has something similar). It's quite often the case, however, that a user's browser's language configuration isn't correct, so you'll want to make sure there's some way for the user to override the detected language - for example, with a link on each page to change the language, setting a preference cookie.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE MAKO OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django. Because it takes care for all bits and pieces (url mapping, request object handling etc) and hides the DB access from you as well. If you want you can use SQLite DB so no need for MysQL or other "proper" DBs. If you were using just template engine you'd have to take care of HTTP layer yourself. And the DB stuff as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VARIABL NAME IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can create a dictionary, set the parameters and pass this to the function by <a href="http://docs.python.org/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow">unpacking the dictionary as keyword arguments</a>:</p><br/><br/><pre><code>field_name = funct()<br/>params = {field_name + '__lte': arg1,       # field_name should still contain string<br/>          'some_other_field_name': arg2}<br/><br/>locations = Locations.objects.filter(**params)<br/><br/># is the same as (assuming field_name = 'some_name'):<br/># Locations.objects.filter(some_name__lte=arg1, some_other_field_name=arg2)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE ACCENT CHARACT COME FROM A WEB SERVIC INTO A DATABAS
    </pattern>
    <template>
<![CDATA[<p>The fault is already in the string you pass to json.loads(). \u00c3 is "A tilde" and \00a9 is the copyright sign. Correct for é would be \u00e9.</p><br/><br/><p>Probably the string has been encoded in UTF-8 by the sender and decoded as ISO-8859-1 by the receiver.</p><br/><br/><p>For example, if you run the following Python script:</p><br/><br/><pre><code># -*- encoding: utf-8 -*-<br/><br/>import json<br/><br/>data = {'name': u'André'}<br/>print('data: {0}'.format(repr(data)))<br/><br/>code = json.dumps(data)<br/>print('code: {0}'.format(repr(code)))<br/><br/>conv = json.loads(code)<br/>print('conv: {0}'.format(repr(conv)))<br/><br/>name = conv['name']<br/>print(u'Name is {0}'.format(name))<br/></code></pre><br/><br/><p>The output should look like:</p><br/><br/><pre><code>data: {'name': u'Andr\xe9'}<br/>code: '{"name": "Andr\\u00e9"}'<br/>conv: {u'name': u'Andr\xe9'}<br/>Name is André<br/></code></pre><br/><br/><p>Managing unicode in Python 2.x can sometimes become a nuisance. Unfortunately, Django does not yet support Python 3.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOMAT HTML SANIT WHEN PUT HTML TO TEMPLAT HOW TO STOP IT
    </pattern>
    <template>
<![CDATA[<p>Use the safe filter:</p><br/><br/><pre><code>{{ myvariable|safe }}<br/></code></pre><br/><br/><p>If you need large parts of your template treated like this (that is, if you find yourself using <code>|safe</code> over and over), you can disable the autoescaping whole-sale:</p><br/><br/><pre><code>{% autoescape off %}<br/>blah {{myvariable}} blah {{myothervariable}}<br/>{% endautoescape %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM FIELD FROM MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p>You also can take a look to django.forms.models.fields_for_model<br/>That should give you a dictionary of fields, and then you can add the fields of the form</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST VIEW RAIS ATTRIBUT ERROR FUNCTION OBJECT HA NO ATTRIBUT CLONE
    </pattern>
    <template>
<![CDATA[<p>The <code>_clone</code> errors are a red herring caused by you passing a function as an argument to a generic view where a <code>QuerySet</code> is expected. The version of your code which passes <code>News.published.all()</code> to the generic views is correct, as generic views will try to clone the QuerySet they are given, to avoid caching the first lot of data they query for (hence the error when you pass in a function).</p><br/><br/><p>Your problem seems to be that your custom <code>get_query_set</code> method is returning a <code>QuerySet</code> filtered based on the current date and time when the method was called.</p><br/><br/><p>I can't see anything in the documentation about <code>filter</code> arguments being callable, but I did find <a href="http://code.djangoproject.com/ticket/11629" rel="nofollow">this ticket which suggests that <code>filter</code> can take callable arguments</a>, so try changing your manager to pass in the function to be called to get the current date/time, rather than calling it immediately:</p><br/><br/><pre><code>class PublishedNewsManager(models.Manager):<br/>    def get_query_set(self):<br/>        return super(PublishedNewsManager, self).get_query_set() \<br/>                    .filter(is_published=True) \<br/>                    .filter(pub_date__lte=datetime.datetime.now)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SMTP AND SECUR PASSWORD AUTHENT
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://code.google.com/p/python-ntlm" rel="nofollow">python-ntlm project</a> is a working implementation of NTLM authentication for urllib2. There is a patch floating around in the tracker that allows <a href="http://code.google.com/p/python-ntlm/issues/detail?id=14" rel="nofollow">integration with smtplib</a>.</p><br/><br/><p>I would install python-ntlm, then fork smtplib inside your Django project (making sure it gets imported through smtplib) and then patch either smtplib (to always use ntlm authentication) or django (to use python-ntlm).</p><br/><br/><p>This will get the work done.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DOUBL ENCOD A UNICOD ( UTF 8 ) STRING
    </pattern>
    <template>
<![CDATA[<p>This does seem like a case of double-encoding; I don't have much experience with Python, but try adjusting the MySQL connection settings as per the advice at <a href="http://tahpot.blogspot.com/2005/06/mysql-and-python-and-unicode.html" rel="nofollow">http://tahpot.blogspot.com/2005/06/mysql-and-python-and-unicode.html</a></p><br/><br/><p>What I'm guessing is happening is that the connection is latin1, so MySQL tries to encode the string again before storage to the UTF-8 field. The code there, specifically this bit:</p><br/><br/><blockquote><br/>  <p>EDIT: With Python when establishing a<br/>  database connection add the following<br/>  flag: init_command='SET NAMES utf8'.</p><br/>  <br/>  <p>In addition set the following in<br/>  MySQL's my.cnf: default-character-set<br/>  = utf8</p><br/></blockquote><br/><br/><p>is probably what you want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FACEBOOK EVENT WITH NEW GRAPH API
    </pattern>
    <template>
<![CDATA[<p>Check here:<br/><a href="http://developers.facebook.com/docs/api#publishing" rel="nofollow">http://developers.facebook.com/docs/api#publishing</a></p><br/><br/><p>Make a POST call to /PROFILE_ID/events with the required informations. Unfortunately they don't have all the possible arguments listed, but they can be found in the REST API docs under <a href="https://developers.facebook.com/docs/reference/rest/events.create/" rel="nofollow">Events.create</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECK FOR ANI EXIST FOR A QUERI
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://docs.djangoproject.com/en/1.1/ref/models/querysets/#count" rel="nofollow"><code>count()</code></a>:</p><br/><br/><pre><code>sc=scorm.objects.filter(Header__id=qp.id)<br/><br/>if sc.count() &gt; 0:<br/>   ...<br/></code></pre><br/><br/><p>The advantage over e.g. <code>len()</code> is, that the QuerySet is not yet evaluated:</p><br/><br/><blockquote><br/>  <p><code>count()</code> performs a <code>SELECT COUNT(*)</code> behind the scenes, so you should always use <code>count()</code>  rather than loading all of the record into Python objects and calling <code>len()</code>  on the result.</p><br/></blockquote><br/><br/><p>Having this in mind, <a href="http://docs.djangoproject.com/en/1.1/ref/models/querysets/#id1" rel="nofollow"><strong>When QuerySets are evaluated</strong></a> can be worth reading.</p><br/><br/><hr><br/><br/><p>If you use <code>get()</code>, e.g. <code>scorm.objects.get(pk=someid)</code>, and the object does not exists, a <code>DoesNotExist</code> exception is raised:</p><br/><br/><pre><code>from django.core.exceptions import ObjectDoesNotExist<br/>try:<br/>    sc = scorm.objects.get(pk=someid)<br/>except ObjectDoesNotExist:<br/>    print ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAILSCAST FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are some screencasts in the <a href="http://code.djangoproject.com/wiki/DjangoScreencasts" rel="nofollow">django documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIGRAT A DJANGO DB FROM SQLITE TO MYSQL
    </pattern>
    <template>
<![CDATA[<p>Execute:</p><br/><br/><pre><code>python manage.py dumpdata &gt; datadump.json<br/></code></pre><br/><br/><p>Next, change your settings.py to the mysql database.</p><br/><br/><p>Finally:</p><br/><br/><pre><code>python manage.py loaddata datadump.json<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWIST S GETPAG AS URLOPEN
    </pattern>
    <template>
<![CDATA[<p>The thing to realize about non-blocking operations (which you seem to explicitly want) is that you can't really write sequential code with them. The operations don't block because they don't wait for a result. They start the operation and return control to your function. So, <code>getPage</code> doesn't return a file-like object you can read from like <code>urllib.urlopen</code> does. And even if it did, you couldn't read from it until the data was available (or it would block.) And so you can't call <code>len()</code> on it, since that needs to read all the data first (which would block.)</p><br/><br/><p>The way to deal with non-blocking operations in Twisted is through <code>Deferreds</code>, which are objects for managing callbacks. <code>getPage</code> returns a <code>Deferred</code>, which means "you will get this result later". You can't do anything with the result until you get it, so you add <em>callbacks</em> to the <code>Deferred</code>, and the <code>Deferred</code> will call these callbacks when the result <em>is</em> available. That callback can then do what you want it to:</p><br/><br/><pre><code>def web_request(request)<br/>    def callback(data):<br/>        HttpResponse(len(data))<br/>    d = getPage("http://www.example.org")<br/>    d.addCallback(callback)<br/>    return d<br/></code></pre><br/><br/><p>An additional problem with your example is that your <code>web_request</code> function itself is blocking. What do you want to do while you wait for the result of <code>getPage</code> to become available? Do something else within <code>web_request</code>, or just wait? Or do you want to turn <code>web_request</code> itself non-blocking? If so, how do you want to produce the result? (The obvious choice in Twisted is to return another <code>Deferred</code> -- or even the same one as <code>getPage</code> returns, as in the example above. This may not always be appropriate if you're writing code in another framework, though.)</p><br/><br/><p>There <em>is</em> a way to write sequential code using <code>Deferreds</code>, although it's somewhat restrictive, harder to debug, and core Twisted people cry when you use it: <code>twisted.internet.defer.inlineCallbacks</code>. It uses the new generator feature in Python 2.5 where you can send data into a generator, and the code would look somewhat like this:</p><br/><br/><pre><code>@defer.inlineCallbacks<br/>def web_request(request)<br/>    data = yield getPage("http://www.example.org")<br/>    HttpResponse(len(data))<br/></code></pre><br/><br/><p>Like the example that explicitly returned the <code>d</code> Deferred, this'll only work if the caller expects <code>web_request</code> to be non-blocking -- the <code>defer.inlineCallbacks</code> decorator turns the generator into a function that returns a <code>Deferred</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHP ECHO SOMETH EXIT ( ) WITH PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Put this in your view function:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>return HttpResponse(str(var))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR TIMESTAMP FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You have to convert your date to an instance of <code>datetime.datetime</code> class. Easiest way to do it for your case is:</p><br/><br/><pre><code>import datetime<br/><br/>#<br/># This creates new instace of 'datetime.datetime' from a string according to<br/># the pattern given as the second argument.<br/>#<br/>start = datetime.datetime.strptime(s_date, '%Y%m%d')<br/>end = datetime.datetime.strptime(e_date, '%Y%m%d')<br/><br/># And now the query you want. Mind that you cannot use 'and' keyword<br/># inside .filter() function. Fortunately .filter() automatically ANDs<br/># all criteria you provide.<br/>Activity.objects.filter(timestamp__gte=start, timestamp__lte=end)<br/></code></pre><br/><br/><p>Enjoy!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TO LET USER LOGIN TO MY SITE USE THEIR GOOGL CREDENTI
    </pattern>
    <template>
<![CDATA[<p>This is what I was looking for:</p><br/><br/><p><a href="http://www.linuxuser.at/how-i-finally-got-openid-and-django-working-together" rel="nofollow">http://www.linuxuser.at/how-i-finally-got-openid-and-django-working-together</a></p><br/><br/><p>Thanks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUT A PROCESS IN BACKGROUND USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've used <a href="http://www.lag.net/paramiko/" rel="nofollow">paramiko</a> to put the process in background for localhost/remote hots..,</p><br/><br/><pre><code>ssh = paramiko.SSHClient()<br/>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br/>ssh.connect(host,user,pwd,port,.......)<br/><br/>si, so, se = ssh.exec_command('nohup' + cmd + '&amp;')<br/>so.read()<br/>se.read()<br/></code></pre><br/><br/><p>has resolved the issue....</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBTRACT TWO DATE IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can just subtract the dates directly, which will yield a <code>datetime.timedelta</code> object:</p><br/><br/><pre><code>dt = weight_now.weight_date - weight_then.weight_date<br/></code></pre><br/><br/><p>A <code>timedelta</code> object has fields for days, seconds, and microseconds. From there, you can just do the appropriate math. For example:</p><br/><br/><pre><code>hours = dt.seconds / 60 / 60    # Returns number of hours between dates<br/>weeks = dt.days / 7             # number of weeks between dates<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL IS THERE A SHORTCUT FOR SEE IF A RECORD EXIST
    </pattern>
    <template>
<![CDATA[<p>Dont' use len() on the result, you should use <code>People.objects.filter(Name='Fred').count()</code>. According to the django documentation, </p><br/><br/><blockquote><br/>  <p>count() performs a SELECT COUNT(*)<br/>  behind the scenes, so you should<br/>  always use count() rather than loading<br/>  all of the record into Python objects<br/>  and calling len() on the result<br/>  (unless you need to load the objects<br/>  into memory anyway, in which case<br/>  len() will be faster).</p><br/></blockquote><br/><br/><p>source: <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.QuerySet.count" rel="nofollow">Django docs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PYTHON HOW DO I SET THE MEMCACH TO INFINIT TIME
    </pattern>
    <template>
<![CDATA[<pre><code>def _get_memcache_timeout(self, timeout):<br/>    """<br/>    Memcached deals with long (&gt; 30 days) timeouts in a special<br/>    way. Call this function to obtain a safe value for your timeout.<br/>    """<br/>    timeout = timeout or self.default_timeout<br/>    if timeout &gt; 2592000: # 60*60*24*30, 30 days<br/>        # See http://code.google.com/p/memcached/wiki/FAQ<br/>        # "You can set expire times up to 30 days in the future. After that<br/>        # memcached interprets it as a date, and will expire the item after<br/>        # said date. This is a simple (but obscure) mechanic."<br/>        #<br/>        # This means that we have to switch to absolute timestamps.<br/>        timeout += int(time.time())<br/>    return timeout<br/></code></pre><br/><br/><p>And from the <a href="http://code.google.com/p/memcached/wiki/FAQ#What_are_the_limits_on_setting_expire_time?_%28why_is_there_a_30_d" rel="nofollow">FAQ</a>:</p><br/><br/><blockquote><br/>  <p>What are the limits on setting expire time? (why is there a 30 day limit?)</p><br/>  <br/>  <p>You can set expire times up to 30 days in the future. After that memcached interprets it as a date, and will expire the item after said date. This is a simple (but obscure) mechanic.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITHOUT SET UP DATABAS TABL ( DECLAR LIKE DJANGO )
    </pattern>
    <template>
<![CDATA[<p>If you hate on Migrations, try going NoSQL. No migrations!</p><br/><br/><p>So you'd just add properties to your document when you need them. In your code, handle the fact that they may not exist and bam! </p><br/><br/><p>I took the following model definition (notice you don't inherit form activerecord) from a blog <a href="http://blog.wekeroad.com/2010/05/19/no-sql-in-the-wild" rel="nofollow">about tekpub</a> Also recommend the <a href="http://herdingcode.com/?p=234" rel="nofollow">Herding Code podcast</a></p><br/><br/><pre><code>class Production<br/><br/>  include MongoMapper::Document<br/><br/>  key :title, String, :required =&gt; true<br/>  key :slug, String, :unique =&gt; true, :required =&gt; true, :index =&gt; true<br/>  key :description, String<br/>  key :notes, String<br/>  key :price, BigDecimal, :numeric =&gt; true<br/>  key :released_at, Date, :default =&gt; Date.today<br/>  key :default_height, String, :default =&gt; '600'<br/>  key :default_width, String, :default =&gt; '1000'<br/>  key :quotes, String<br/><br/>  #royalty info<br/>  key :producers, String<br/><br/>  timestamps!<br/>end<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRI TO FORMAT CURRENC WITH PYTHON ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>On the production server, try</p><br/><br/><pre><code>locale.setlocale( locale.LC_ALL, 'en_CA.UTF-8' )<br/></code></pre><br/><br/><p>instead of</p><br/><br/><pre><code>locale.setlocale( locale.LC_ALL, '' )<br/></code></pre><br/><br/><p>When you use <code>''</code>, the locale is set to the user's default (usually specified by the <code>LANG</code> environment variable). On the production server, that appears to be 'C', while as a test user it appears to be 'en_CA.UTF-8'.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HELLO WORLD WEBSIT FOR DJANGO OR ( I VE INSTAL DJANGO NOW WHAT )
    </pattern>
    <template>
<![CDATA[<p>Next step? The (free, online and excellent) <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">Django book</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARS JSON IN MY TEMPLAT USE JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Okay, I solved my problem and would like to answer my own question. I figured it would be better for the other users here.</p><br/><br/><p>First, get the file here: <a href="http://www.JSON.org/json_parse.js" rel="nofollow">http://www.JSON.org/json_parse.js</a></p><br/><br/><pre><code>var geodata = json_parse("{{geodata|escapejs}}");<br/></code></pre><br/><br/><p>I just used escapejs: <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#escapejs" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/builtins/#escapejs</a></p><br/><br/><p>EDIT: Thanks to Ignacio Vazquez-Abrams. It was him that helped me in #python Freenode. Should have credited him when I made this post. I didn't know he was in Stackoverflow.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO VIEW VARIABL INSID TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>In order to have access to a variable in a template, it needs to be in the the context used to render that template. My guess is you aren't passing a context dictionary to the template when you render it.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render-to-response" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render-to-response</a></p><br/><br/><p>The "dictionary" referenced there is a dictionary that contains all the variables you want to have available in the context. For example:</p><br/><br/><pre><code>return render_to_response('your_template.html', {'h': h})<br/></code></pre><br/><br/><p>As far as the "no error" error goes... That's the default setting for an invalid template variable. You can change that in the project's settings if you'd like.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/settings/#template-string-if-invalid" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/settings/#template-string-if-invalid</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERYSET FILTER + ORDER BI + LIMIT
    </pattern>
    <template>
<![CDATA[<p>Your slice syntax is wrong. The value after the colon is not the count of elements to get, but the index of the end of the slice. Using 'median' on its own without a colon, as you do in your second example, would work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AJAX TAB WITH SELENIUM
    </pattern>
    <template>
<![CDATA[<p>This could be a few things. It could be that Selenium is having trouble clicking the anchor but I actually haven't heard of that trouble and it sounds less likely. It sounds like the click() method returns OK, it doesn't give you "element not found", right? When you do the click the jquery tab javascript just isn't doing what's expected. In my experience this usually comes down to the same issue -- since Selenium executes very quickly, when javascript is rendering portions of the page and effecting the DOM continuously sometimes when Selenium goes to interact with dynamically generated parts of the page (say to click this tab), the piece it's interacting with depends on some other piece that actually hasn't fully loaded yet. It's probably microseconds away from fully loading in fact, but selenium is too fast. You already understand this of course, you have the right idea with the wait_for condition looking for the tabs to be loaded. My guess would be it's probably just not long enough. You have to find some evaluation to make that says the whole UI tabs thing is loaded and rendered. Does the tabs API have some callbacks you can add to set a "done loading" variable or does it expose a variable like that? Barring figuring out what the proper expression is to find the point in time when the UI tabs are actually ready to be clicked, which possibly could be tricky, you can resort to outright pauses to make sure the part of the page is ready to go before you interact with it. I see no problem in sleep(2), or even sleep(5), etc. in the code if it's necessary to get it to work. One way you can test that this is really what's going on is by firing up the scenario in the interactive interpreter (gotta love Python, beats the pants off of doing this in Java). Paste the code in line by line to get to the trouble point, or comment out the selenium.stop() call in your teardown method and any test code after the trouble point, so it leaves the selenium window open and exits. Then instantiate a selenium object in the interactive interpretter and hijack the open session:</p><br/><br/><pre><code>selenium = selenium("localhost", 4444, "*chrome", "http://localhost:8000/")<br/>selenium.sessionId = "0asdd234234023424foo" #Get this from the Se window<br/></code></pre><br/><br/><p>...to get interactive control of the window. Then you can see about making the <code>selenium.click()</code> or make <code>selenium.get_eval('...js...')</code> calls to investigate the javascript landscape at that point in time. My guess is when you do this, the <code>click()</code> will actually work fine when you type it in, because by the time you get the session loaded and get around to typing in <code>selenium.click('blah_tab_locator')</code>, the tab guts will all be loaded and ready to go. It's just that when Python is making the calls it does it way too fast for the browser when there are these dynamic renderings going on. If the click works fine when you do it manually through selenium like this, then you know it's a timing issue. Find that proper wait_for_condition or condescend to a python <code>sleep()</code>. Otherwise, if the click continues to not work when you do this, then it's probably a problem with the locator being used. The tab UI has a click or a mouseup or a focus or some kind of event handler on some part of the tab structure, maybe it's just about finding the right part of the tab to click or the right event to fire. If it isn't that then it perhaps could be as you mention some kind of strange interaction between Selenium and Jquery UI, but that would surprise me and I'd be curious to know. Poke around with get_eval() to see what's going on in the javascript if so. It sounds like a timing issue to me though. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LL IN ONE DJANGO PYTHON EDITOR
    </pattern>
    <template>
<![CDATA[<p>If your familiar with eclipse, by all means try Pydev first. I was the opposite, I was/am a Python developer who switched to Java. There was no real difference between using Eclipse for Java and Eclipse for Python (Pydev), you still get inline docs, debugging, code completion, the whole bit. You also get a lot of great stuff along with it like subversive, mylyn, aptana, etc. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROLLBACK TRANSACT IN SAVE METHOD
    </pattern>
    <template>
<![CDATA[<p>Why not simply do:</p><br/><br/><pre><code>@transaction.commit_manually<br/>def save(self, *args, **kwargs):<br/>    try:<br/>        super(self.__class__, self).save(*args, **kwargs)<br/>        self.qa.vote_down_count += 1<br/>        self.qa.save()<br/>    except:<br/>        transaction.rollback()<br/>        raise<br/>    else:<br/>        transaction.commit()<br/></code></pre><br/><br/><p>This is how <a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/" rel="nofollow">the docs</a> imply to do it, though they say to do this in your view function, so you might not need the <code>@transaction.commit_manually</code> on the <code>save()</code> method, instead putting it on the view.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ER THROUGH A LARG DJANGO QUERYSET CONSUM MASSIV AMOUNT OF MEMORI
    </pattern>
    <template>
<![CDATA[<p>Nate C was close, but not quite.</p><br/><br/><p>From <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#when-querysets-are-evaluated" rel="nofollow">the docs</a>:</p><br/><br/><blockquote><br/>  <p>You can evaluate a QuerySet in the following ways:</p><br/>  <br/>  <ul><br/>  <li><p>Iteration. A QuerySet is iterable, and it executes its database query the first time you iterate over it. For example, this will print the headline of all entries in the database:</p><br/><br/><pre><code>for e in Entry.objects.all():<br/>    print e.headline<br/></code></pre></li><br/>  </ul><br/></blockquote><br/><br/><p>So your ten million rows are retrieved, all at once, when you first enter that loop and get the iterating form of the queryset.  The wait you experience is Django loading the database rows and creating objects for each one, before returning something you can actually iterate over.  Then you have everything in memory, and the results come spilling out.</p><br/><br/><p>From my reading of the docs, <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#iterator" rel="nofollow"><code>iterator()</code></a> does nothing more than bypass QuerySet's internal caching mechanisms.  I think it might make sense for it to a do a one-by-one thing, but that would conversely require ten-million individual hits on your database.  Maybe not all that desirable.</p><br/><br/><p>Iterating over large datasets efficiently is something we still haven't gotten quite right, but there are some snippets out there you might find useful for your purposes:</p><br/><br/><ul><br/><li><a href="http://djangosnippets.org/snippets/1949/" rel="nofollow">Memory Efficient Django QuerySet iterator</a></li><br/><li><a href="http://djangosnippets.org/snippets/1170/" rel="nofollow">batch querysets</a></li><br/><li><a href="http://djangosnippets.org/snippets/1400/" rel="nofollow">QuerySet Foreach</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UWSGI + DJANGO VIA NGINX UWSGI SETTINGS SPAWN
    </pattern>
    <template>
<![CDATA[<p>Launchd on OSX</p><br/><br/><p>Upstart/init on the unices.</p><br/><br/><p>uwsgi also has its own process manager, so you can just run that as well.</p><br/><br/><p>Tuning:</p><br/><br/><p>Check the <a href="http://lists.unbit.it/cgi-bin/mailman/listinfo/uwsgi" rel="nofollow">mailing list</a>, for advice on your particular requirements.  Uwsgi is amazing, it is a complete deploy solution. </p><br/><br/><p>Nginx above 0.8.40 will build the uwsgi bindings by default, Build nginx, build uwsgi and you are golden.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD DJANGO 1.2 S CSRF TOKEN IN A JAVASCRIPT GENER HTML FORM
    </pattern>
    <template>
<![CDATA[<p>Another option would be to adapt the cookie/header based solution shown in <a href="http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow" title="Django Docs">the Django docs</a> with Ext - preferable if you have a lot of templates and don't want to change every single one.</p><br/><br/><p>Just drop the following snippet in your overrides.js (or wherever you put global modifications):</p><br/><br/><pre><code>Ext.Ajax.on('beforerequest', function (conn, options) {<br/>   if (!(/^http:.*/.test(options.url) || /^https:.*/.test(options.url))) {<br/>     if (typeof(options.headers) == "undefined") {<br/>       options.headers = {'X-CSRFToken': Ext.util.Cookies.get('csrftoken')};<br/>     } else {<br/>       options.headers.extend({'X-CSRFToken': Ext.util.Cookies.get('csrftoken')});<br/>     }                        <br/>   }<br/>}, this);<br/></code></pre><br/><br/><p><em>(edit: Ext already has cookie reading function, no need to duplicate it)</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSTANC OF DJANGO ON A SINGL DOMAIN
    </pattern>
    <template>
<![CDATA[<p>I've been in situations where I couldn't use subdomains, and the way to handle this with Django is pretty simple actually.</p><br/><br/><p>Pretty much everything in your settings file will be just like a regular Django app, with the exception of making sure these settings include your project path:</p><br/><br/><pre><code>MEDIA_URL = 'http://192.168.0.1/gallery/media/'<br/>ADMIN_MEDIA_PREFIX = '/gallery/admin_media/'<br/>SESSION_COOKIE_PATH = '/gallery'<br/>LOGIN_REDIRECT_URL = '/gallery/'<br/>LOGIN_URL = '/gallery/accounts/login/'<br/>LOGOUT_URL = '/gallery/accounts/logout/'<br/></code></pre><br/><br/><p>The SESSION_COOKIE_PATH is critical to prevent all your apps on the same domain from rewriting each others cookies.</p><br/><br/><p>The above instructions should cover the Django side, but there's still more work to do on the web server side.  For example, if you use apache+mod_wsgi you'll need to make sure each project has their own wsgi script that is loaded like this:</p><br/><br/><pre><code>WSGIScriptAlias /gallery /path/to/gallery/apache/gallery.wsgi<br/>Alias /gallery/media /path/to/gallery/media<br/>Alias /gallery/admin_media /path/to/gallery/venv/lib/python2.6/site-packages/django/contrib/admin/media<br/></code></pre><br/><br/><p>etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You might be able to get rid of the <code>if/else</code> tag, and use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#yesno" rel="nofollow"><code>yesno</code></a> filter instead.</p><br/><br/><p>In the view:</p><br/><br/><pre><code>x = True<br/>y = False<br/>z = None<br/></code></pre><br/><br/><p>In the template:</p><br/><br/><pre><code>{{ x|yesno:"true","false","none" }}<br/>{{ y|yesno:"true","false","none" }}    <br/>{{ z|yesno:"true","false","none" }}    <br/></code></pre><br/><br/><p>Result:</p><br/><br/><pre><code>true<br/>false<br/>none<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SQLITE3 DATABAS FROM A .TXT FILE WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p>So assuming your <code>models.py</code> looks something like this:</p><br/><br/><pre><code>class Representative(models.Model):<br/>    parliament = models.CharField(max_length=128)<br/>    name = models.CharField(max_length=128)<br/>    country = models.CharField(max_length=128)<br/>    party_group = models.CharField(max_length=128)<br/>    national_party = models.CharField(max_length=128)<br/>    position = models.CharField(max_length=128)<br/></code></pre><br/><br/><p>You can then run <code>python manage.py shell</code> and execute the following:</p><br/><br/><pre><code>import csv<br/>from your_app.models import Representative<br/># If you're using different field names, change this list accordingly.<br/># The order must also match the column order in the CSV file.<br/>fields = ['parliament', 'name', 'country', 'party_group', 'national_party', 'position']<br/>for row in csv.reader(open('your_file.csv')):<br/>    Representative.objects.create(**dict(zip(fields, row)))<br/></code></pre><br/><br/><p>And you're done.</p><br/><br/><p><strong>Addendum (edit)</strong></p><br/><br/><p>Per Thomas's request, here's an explanation of what <code>**dict(zip(fields,row))</code> does:</p><br/><br/><p>So initially, <code>fields</code> contains a list of field names that we defined, and <code>row</code> contains a list of values that represents the current row in the CSV file.</p><br/><br/><pre><code>fields = ['parliament', 'name', 'country', ...]<br/>row = ['7', 'Marta Andreasen', 'United Kingdom', ...]<br/></code></pre><br/><br/><p>What <code>zip()</code> does is it combines two lists into one list of pairs of items from both lists (like a zipper); i.e. <code>zip(['a','b,'c'], ['A','B','C'])</code> will return <code>[('a','A'), ('b','B'), ('c','C')]</code>. So in our case:</p><br/><br/><pre><code>&gt;&gt;&gt; zip(fields, row)<br/>[('parliament', '7'), ('name', 'Marta Andreasen'), ('country', 'United Kingdom'), ...]<br/></code></pre><br/><br/><p>The <code>dict()</code> function simply converts the list of pairs into a dictionary.</p><br/><br/><pre><code>&gt;&gt;&gt; dict(zip(fields, row))<br/>{'parliament': '7', 'name': 'Marta Andreasen', 'country': 'United Kingdom', ...}<br/></code></pre><br/><br/><p>The <code>**</code> is a way of converting a dictionary into a keyword argument list for a function. So <code>function(**{'key': 'value'})</code> is the equivalent of <code>function(key='value')</code>. So in out example, calling <code>create(**dict(zip(field, row)))</code> is the equivalent of:</p><br/><br/><pre><code>create(parliament='7', name='Marta Andreasen', country='United Kingdom', ...)<br/></code></pre><br/><br/><p>Hope this clears things up.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC METHOD ON A DJANGO MODEL CLASS DURE A SOUTH MIGRAT
    </pattern>
    <template>
<![CDATA[<p>You can't use methods from models.py in south migrations. The reason is that in the future models.py will evolve and sooner or later you will delete those methods, then migration will be broken.</p><br/><br/><p>You should put all code needed by migration in migration file itself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATPLOTLIB INTERACT PLOT ON A WEB SERVER
    </pattern>
    <template>
<![CDATA[<p>If you're looking for flash-like interactivity in a web application, matplotlib probably isn't what you're looking for.  It's fine for rendering a static image to serve out in a web app, though. (and is amazingly flexible)</p><br/><br/><p>However, there's been a lot of recent development on making matplotlib more oriented toward web interactivity.  Take a look at the new HTML5/Canvas backend. <a href="http://code.google.com/p/mplh5canvas/" rel="nofollow">http://code.google.com/p/mplh5canvas/</a>  It's not quite finished yet, but it's worth playing around with, anyway.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LL I NEED THE IDENT URL OPENID
    </pattern>
    <template>
<![CDATA[<p>All you need to bind to a user account is the "Claimed Identifier" which is what the sample URL you provided is called.  OpenID 1.x and 2.0 have a handful of URLs it deals with, including "openid.identity" and "openid.claimed_id" values.  It is <em>very</em> important that you're reading from the property that gives you <code>openid.claimed_id</code> rather than <code>openid.identity</code> when storing the value with the user account.  In the case of Google as you showed, the same value is put into both parameters so it's hard to know for sure whether you're getting the right thing from the OpenID library you're using.  </p><br/><br/><p>Just review what Django offers to you, and if you see anything that looks like claimed_id, use that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTRIBUTEERROR MODUL OBJECT HA NO ATTRIBUT GETSTATE SHOW UP WHEN I USE EASY INSTAL
    </pattern>
    <template>
<![CDATA[<p>Try <a href="http://code.activestate.com/lists/python-distutils-sig/13989/" rel="nofollow">http://code.activestate.com/lists/python-distutils-sig/13989/</a>: the gist is "reinstall setuptools".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHANG ID ATTRIBUT IN HTML
    </pattern>
    <template>
<![CDATA[<p>From a purely JavaScript persepctive, the simplest and best way of changing the body's ID is </p><br/><br/><pre><code>document.body.id = "collection";<br/></code></pre><br/><br/><p>However, you may be better off using a class to avoid any potential conflict of your ID with any other ID in the page. Giving the body an ID doesn't seem terribly useful given that there is only one <code>&lt;body&gt;</code> element in the page and it can be referenced via <code>document.body</code> in JavaScript and <code>body</code> in CSS.</p><br/><br/><p>If you want to change an element in the page without reloading the whole page then JavaScript is your only option. If the change is vital to the functionality of your page, you should also provide a non-JavaScript fallback.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF CONTENTTYP AND MIMETYP
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Why we use 2 different naming for<br/>  (almost the same) thing? Is<br/>  "Content-Type" just a name used in<br/>  browser requests, and with very little<br/>  use outside it?</p><br/>  <br/>  <p>What's the main difference between the<br/>  each one, and when is right to call<br/>  something mimetype as opposed to<br/>  content-type ? Am i being pitty and<br/>  grammar nazi?</p><br/></blockquote><br/><br/><p>The reason isn't only backward compatibility, and I'm afraid the usually excellent Django documentation is a bit hand-wavy about it. <a href="http://en.wikipedia.org/wiki/MIME" rel="nofollow">MIME</a> (it's really worth reading at least the Wikipedia entry) has its origin in extending internet mail, and specifically SMTP. From there, the MIME and MIME-inspired extension design has found its way into a lot of other protocols (such as HTTP here), and is still being used when new kinds of metadata or data need to be transmitted in an existing protocol. There are dozens of RFCs that discuss MIME used for a plethora of purposes.</p><br/><br/><p>Specifically, <code>Content-Type:</code> is one among several MIME headers. "Mimetype" does indeed sound obsolete, but a reference to MIME itself isn't. Call that part backward-compatibility, if you will.</p><br/><br/><p>[BTW, this is purely a terminology problem which has nothing whatsoever to do with grammar. Filing every usage question under "grammar" is a pet peeve of mine. Grrrr.]</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS REFERENC MEDIA IN STATIC FILE ( DJANGO DEV 1.3 STATIC FILE )
    </pattern>
    <template>
<![CDATA[<p>You said you had trouble with relative paths, but I don't understand exactly what you meant.</p><br/><br/><p>I ran into the same issue, and I've used relative paths to solve it. The only thing to keep in mind is that when deploying the images need to (obviously) remain in the same path relative to the CSS files.</p><br/><br/><p><strong>My setup in a nutshell:</strong></p><br/><br/><p><em>Note</em> I'm still using django-staticfiles with Django 1.2, but it should work similarly for Django 1.3</p><br/><br/><pre><code>STATIC_URL = "/site_media/static/"<br/>STATIC_ROOT = os.path.join(PROJECT_ROOT, "site_media", "static")<br/>STATICFILES_DIRS = (<br/>    os.path.join(PROJECT_ROOT, "static_media"),<br/>)<br/></code></pre><br/><br/><p>Then I serve the CSS from <code>{{ STATIC_URL }}css/style.css</code> which references images at <code>../images/logo.png</code>.</p><br/><br/><p>and my project looks like this:</p><br/><br/><pre><code>project_dir<br/>  ...<br/>  stuff<br/>  static_media<br/>    ...<br/>    css<br/>    images<br/></code></pre><br/><br/><p>Let me know if you have any questions, and I'll clarify.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI SELECT DISTINCT BY FIELD PAIR
    </pattern>
    <template>
<![CDATA[<p><strong>Update 2</strong>: </p><br/><br/><p>(After reading OP's comments) I suggest adding a new model to track the latest submission. Call it <code>LatestSubmission</code>. </p><br/><br/><pre><code>class LatestSubmission(models.Model):<br/>    user = models.ForeignKey(User)     <br/>    problem = models.ForeignKey(Problem)<br/>    submission = models.ForeignKey(Submission)<br/></code></pre><br/><br/><p>You can then either </p><br/><br/><ol><br/><li>override <code>Submission.save()</code> to create/update the entry in <code>LatestSubmission</code> every time an user posts a new solution for a Problem</li><br/><li>attach a function that does the same to a suitable <a href="http://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow">signal</a>. </li><br/></ol><br/><br/><p>such that <code>LatestSubmission</code> will contain one row per problem-user-submission combination pointing to the latest submission for the problem by each user. Once you have this in place you can fire a single query:</p><br/><br/><pre><code>LatestSubmission.objects.all().order_by('problem')<br/></code></pre><br/><br/><p><strong>Update</strong>: </p><br/><br/><p>Since the OP has posted sample code, the solution can now be changed as follows:</p><br/><br/><pre><code>for user in User.objects.all(): # Get all users<br/>    user.submission_set.latest('time') # Pick the latest submission based on time.<br/></code></pre><br/><br/><p><strong>Original Answer</strong></p><br/><br/><p>In the absence of any date/time based criteria for deciding which is "older" or "newer", you can use the primary key (<code>id</code>) of <code>Submission</code> to "neglect the old ones". </p><br/><br/><pre><code>for user in User.objects.all(): # Get all users<br/>    user.submission_set.latest('id') # Pick the latest submission by each user.<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM CSS
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>However, serving CSS as a view seems like it would cause a significant amount of overhead in a file that is constantly requested, so this is probably not a good solution.</p><br/></blockquote><br/><br/><p>And what if you would generate that CSS once?</p><br/><br/><ol><br/><li>Default CSS is: <code>/common/css.css</code></li><br/><li>Member customize CSS, now <code>&lt;link /&gt;</code> elements points to <code>/user-specific/123.css?ts=123123123</code>. <code>123</code> is of course an identifier of the member, and <code>ts</code> parameter contains a timestamp - a date of last CSS modification</li><br/><li>Make sure that your CSS generator sets proper HTTP headers responsible for client-side caching</li><br/><li>User browser request a CSS file - server replies whit simple <code>304 Not Modified</code> header - there is no need for any script execution or contents download </li><br/><li>When member modifies his CSS then you just update <code>ts</code> - once again just a single request is needed</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BORT A RUN TASK IN CELERI WITHIN DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>apply_async</code> returns an <code>AsyncResult</code> instance, or in this case an <code>AbortableAsyncResult</code>. Save the <code>task_id</code> and use that to instantiate a new <code>AbortableAsyncResult</code> later, making sure you supply the backend optional argument if you're not using the <code>default_backend</code>.</p><br/><br/><pre><code>abortable_async_result = AsyncBoot.apply_async(args=[name], name=name, connect_timeout=3)<br/>myTaskId = abortable_async_result.task_id<br/></code></pre><br/><br/><p>Later:</p><br/><br/><pre><code>abortable_async_result = AbortableAsyncResult(myTaskId)<br/>abortable_async_result.abort()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD FILE NOT IN MEDIA ROOT PATH IS GIVE ME SUSPICIOUSOPER ERROR
    </pattern>
    <template>
<![CDATA[<p>Yes <a href="http://docs.djangoproject.com/en/dev/topics/files/#the-built-in-filesystem-storage-class" rel="nofollow">there is a way</a>:</p><br/><br/><p>From docs:</p><br/><br/><blockquote><br/>  <p>For example, the following code will<br/>  store uploaded files under<br/>  /media/photos regardless of what your<br/>  MEDIA_ROOT setting is:</p><br/></blockquote><br/><br/><pre><code>from django.db import models<br/>from django.core.files.storage import FileSystemStorage<br/><br/>fs = FileSystemStorage(location='/media/photos')<br/><br/>class Car(models.Model):<br/>    ...<br/>    photo = models.ImageField(storage=fs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESET GLOBAL VARIABL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>If you read a variable, Python looks for it in the entire scope chain. This mean that:</p><br/><br/><pre><code>GLOB_VAR = "Some string"<br/><br/>def some_fun():<br/>    print GLOB_VAR<br/></code></pre><br/><br/><p>will print <code>Some string</code></p><br/><br/><p>Now, if you write to a variable, Python looks for it in the local scope, and if it cannot find a variable with the name you gave at the local level, then it creates one.</p><br/><br/><p>This means that in your example, you have created a variable named <code>SOME_VARIABLE</code> local to your <code>some_fun</code> function, instead of updating the global <code>SOME_VARIABLE</code>. This is a classic python gotcha.</p><br/><br/><p>If you want to write to your global, you have to explicitly tell Python that you are talking about a global variable that already exists. To do so, you need to use the <code>global</code> keyword. So, the following:</p><br/><br/><pre><code>GLOB_VAR = "Some string"<br/><br/>def some_fun():<br/>    global GLOB_VAR<br/>    GLOB_VAR = "Some other string"<br/><br/>some_fun()<br/>print GLOB_VAR<br/></code></pre><br/><br/><p>will print <code>Some other string</code>.</p><br/><br/><p>Note: <em>I see it as a way of encouraging people to keep global variables read-only, or at least to think about what they're doing</em>.</p><br/><br/><p>The behaviour is the same (just a bit more surprising) when you try to read first and then write to a global. The following:</p><br/><br/><pre><code>GLOB_VAR = False<br/><br/>def some_fun():<br/>    if GLOB_VAR:<br/>        GLOB_VAR = False<br/><br/>some_fun()<br/></code></pre><br/><br/><p>will raise:</p><br/><br/><pre><code>Traceback (most recent call last):<br/>  File "t.py", line 7, in &lt;module&gt;<br/>    some_fun()<br/>  File "t.py", line 4, in some_fun<br/>    if GLOB_VAR:<br/>UnboundLocalError: local variable 'GLOB_VAR' referenced before assignment<br/></code></pre><br/><br/><p>because since we will modify <code>GLOB_VAR</code>, it is considered a local variable.</p><br/><br/><p><em>Update</em>: <a href="http://stackoverflow.com/users/8206/eli-bendersky">Ely Bendersky</a> has a related <a href="http://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python/" rel="nofollow">in-depth post</a> about this that is worth a read for more formal details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUBLISH TO A FACEBOOK PAGE WALL WITH GRAPH API
    </pattern>
    <template>
<![CDATA[<p>If your fan page allows wall posts from any user in its settings, your app should be able to just post to <code>&lt;page_id&gt;/feed</code></p><br/><br/><p>If you are fan page admin and want to post on fan page's wall on behalf of the page itself (without showing your name), then read about it <a href="http://developers.facebook.com/docs/api#impersonation" rel="nofollow">here</a> or in more details <a href="http://www.sergiy.ca/post-on-facebook-app-wall-and-fan-page-wall-as-admin/" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A WEB FRAMEWORK IS N T CONVENI TO USE
    </pattern>
    <template>
<![CDATA[<p>I like the <a href="http://en.wikipedia.org/wiki/Web_framework" rel="nofollow">wikipedia description</a>:</p><br/><br/><blockquote><br/>  <p>The framework aims to alleviate the<br/>  overhead associated with common<br/>  activities performed in Web<br/>  development. For example, many<br/>  frameworks provide libraries for<br/>  database access, templating frameworks<br/>  and session management...</p><br/></blockquote><br/><br/><p>Basically if you <strong>don't</strong> need all of the above, you don't need a framework.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REDEFIN FUNCTION IN PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>import module1<br/>import unittest<br/><br/>class MyTest(unittest.TestCase):<br/>    def setUp(self):<br/>        # Replace othermod.function with our own mock<br/>        self.old_func1 = module1.func1<br/>        module1.func1 = self.my_new_func1<br/><br/>    def tearDown(self):<br/>        module1.func1 = self.old_func1<br/><br/>    def my_new_func1(self, x):<br/>        """A mock othermod.function just for our tests."""<br/>        return True<br/><br/>    def test_func1(self):<br/>        module1.func1("arg1")<br/></code></pre><br/><br/><p>Lots of mocking libraries provide tools for doing this sort of mocking, you should investigate them as you will likely get a good deal of help from them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INMEMORYUPLOADEDFIL OBJECT TO DISK
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/2806586/reading-file-data-during-forms-clean-method/2806655#2806655">This</a> is similar question, it might help.</p><br/><br/><pre><code>import os<br/>from django.core.files.storage import default_storage<br/>from django.core.files.base import ContentFile<br/>from django.conf import settings<br/><br/>data = request.FILES['image'] # or self.files['image'] in your form<br/><br/>path = default_storage.save('tmp/somename.mp3', ContentFile(data.read()))<br/>tmp_file = os.path.join(settings.MEDIA_ROOT, path)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SMART LOOP LIST CREATION IN PYTHON FOR DJANGO CHOIC FIELD
    </pattern>
    <template>
<![CDATA[<pre><code>In [17]: from datetime import datetime<br/><br/>In [18]: tuple((str(n), str(n)) for n in range(1995, datetime.now().year + 1))<br/>Out[18]:<br/>(('1995', '1995'),<br/> ('1996', '1996'),<br/> ('1997', '1997'),<br/> ('1998', '1998'),<br/> ('1999', '1999'),<br/> ('2000', '2000'),<br/> ('2001', '2001'),<br/> ('2002', '2002'),<br/> ('2003', '2003'),<br/> ('2004', '2004'),<br/> ('2005', '2005'),<br/> ('2006', '2006'),<br/> ('2007', '2007'),<br/> ('2008', '2008'),<br/> ('2009', '2009'),<br/> ('2010', '2010'))<br/><br/>In [19]: import calendar<br/><br/>In [20]: tuple((m, m) for m in calendar.month_abbr[1:])<br/>Out[20]:<br/>(('Jan', 'Jan'),<br/> ('Feb', 'Feb'),<br/> ('Mar', 'Mar'),<br/> ('Apr', 'Apr'),<br/> ('May', 'May'),<br/> ('Jun', 'Jun'),<br/> ('Jul', 'Jul'),<br/> ('Aug', 'Aug'),<br/> ('Sep', 'Sep'),<br/> ('Oct', 'Oct'),<br/> ('Nov', 'Nov'),<br/> ('Dec', 'Dec'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPRESSOR AND CLEVERCSS WITH ABSOLUT URL PATH
    </pattern>
    <template>
<![CDATA[<p>I can't speak to django-compressor specifically; but I have been dealing with finding a good automatic compression solution for the CSS and JS files of my Django-powered web applications. I'm currently using django-static. It's been really easy to set up and use, IMO. I was running into some issues running django-compress (different from django-compressor) when I decided to give django-static a try. So far it's been great. Might be worth checking out. It can be found here: <a href="http://github.com/peterbe/django-static" rel="nofollow">http://github.com/peterbe/django-static</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/appengine/" rel="nofollow">Google App Engine</a> is an infrastructure on which you can "build and host apps."  Though not a web app framework itself, it does provide a simple web app framework called <a href="http://code.google.com/appengine/docs/python/tools/webapp/" rel="nofollow">webapp</a> (partially built onto of another framework <a href="http://pythonpaste.org/webob/" rel="nofollow">WebOb</a>).</p><br/><br/><p>There are numerous, detailed posts on choosing a Python-based web app framework:</p><br/><br/><ul><br/><li>A similar SO question: <a href="http://stackoverflow.com/questions/702179/django-vs-other-python-web-frameworks">Django vs other python web frameworks</a></li><br/><li><a href="http://wiki.python.org/moin/WebFrameworks" rel="nofollow">List of Python-based frameworks with short descriptions</a></li><br/><li>You can learn a lot about what makes up a web framework and what options are available in Nick Johnson's excellent series which starts with <a href="http://blog.notdot.net/2010/01/Writing-your-own-webapp-framework-for-App-Engine" rel="nofollow">Writing your own web framework for App Engine</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT DIRECTORI STRUCTUR AND THE PYTHON PATH
    </pattern>
    <template>
<![CDATA[<p>You can put the following in your <code>settings.py</code> to add your <code>appsfolder</code> to your <code>PYTHONPATH</code>:</p><br/><br/><pre><code>import os<br/>import sys<br/><br/>PROJECT_ROOT = os.path.dirname(__file__)<br/>sys.path.insert(0, os.path.join(PROJECT_ROOT, 'appsfolder'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIM MODEL GENER USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can try to read this <a href="http://code.djangoproject.com/wiki/DynamicModels" rel="nofollow">http://code.djangoproject.com/wiki/DynamicModels</a></p><br/><br/><p>Here is example how to create python model class:</p><br/><br/><pre><code>Person = type('Person', (models.Model,), {<br/>    'first_name': models.CharField(max_length=255),<br/>    'last_name': models.CharField(max_length=255),<br/>})<br/></code></pre><br/><br/><p>You can also read about python meta classes:<br><br/> - <a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a><br><br/> - <a href="http://www.ibm.com/developerworks/linux/library/l-pymeta.html" rel="nofollow">http://www.ibm.com/developerworks/linux/library/l-pymeta.html</a><br><br/> - <a href="http://gnosis.cx/publish/programming/metaclass_1.html" rel="nofollow">http://gnosis.cx/publish/programming/metaclass_1.html</a>  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AM DO AJAX WITH DJANGO NOW LOOK FOR ADVICES COM
    </pattern>
    <template>
<![CDATA[<p>Nothing wrong with the Django code but you may want it to work for non javascript clients as well and use valid HTML:</p><br/><br/><pre><code>&lt;ul&gt;<br/>{% for item in items %}<br/>    &lt;li&gt;&lt;a href="{{ item.get_absolute_url }}"&gt;{{ item.name }}&lt;/a&gt;&lt;/li&gt;<br/>{% endfor %}<br/>&lt;ul&gt;<br/><br/>$("a").click(function(){<br/>    // I just reuse the url attribute from the element clicked<br/>    // li does not have an url attribute<br/>    var url = $(this).attr('href');<br/>    $.getJSON(url, function(data) {<br/>        if (data.success) {<br/>            $("#details").html(data.html);<br/>        } else {<br/>            $("#details").html("Something went wrong");<br/>        }<br/>    });<br/>    return false;<br/>});<br/><br/>def details(request, item_id):<br/>    item = Items.objects.get(pk=item_id)<br/>    # Just render a view with the details, and return the view<br/>    if request.is_ajax():<br/>        html = render_to_string("items/_details.html", {'item': item})<br/>        return HttResponse(simplejson.dumps({'success': True, 'html': html}), mimetype="application/json")<br/>    else:<br/>        #non ajax request rendering complete html<br/>        return render_to_response("items/detail.html", {'item': item})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EPAR AJAX REQUEST FROM NORMAL PAGE VIEW
    </pattern>
    <template>
<![CDATA[<p>Check <code>request.is_ajax()</code> and delegate wherever you need. Sample handler:</p><br/><br/><pre><code>def view_something(request):<br/>    if request.is_ajax():<br/>       # ajax<br/>    else<br/>       # not<br/></code></pre><br/><br/><p>You can now call different functions (in different files) for the two cases.</p><br/><br/><p>If you want to be fancier, use a decorator for the handler that will dispatch ajaxy requests elsewhere:</p><br/><br/><pre><code>def reroute_ajaxy(ajax_handler):<br/>    def wrap(f):<br/>        def decorate(*args, **kwargs):<br/>            if args[0].is_ajax():<br/>                return ajax_handler(args)<br/>            else:<br/>                return f(*args, **kwargs)<br/>        return decorate<br/>    return wrap<br/><br/>def score_ajax_handler(request):<br/>    print "score ajax handler"<br/><br/><br/>@reroute_ajaxy(score_ajax_handler)<br/>def score_handler(request):<br/>    print "score handler"<br/></code></pre><br/><br/><p>And some mock testing to exercise it:</p><br/><br/><pre><code>class ReqMock:<br/>    def __init__(self, ajax=False):<br/>        self.ajax = ajax<br/>    def is_ajax(self):<br/>        return self.ajax<br/><br/><br/>score_handler(ReqMock(True))<br/>score_handler(ReqMock(False))<br/></code></pre><br/><br/><p>Produces:</p><br/><br/><pre><code>score ajax handler<br/>score handler<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT CLASS PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can create classes on the fly by calling the <code>type</code> built-in, passing appropriate arguments along, like:</p><br/><br/><pre><code>CommentForm = type("CommentForm", (Form,), { <br/>    'name': forms.CharField(),<br/>    ...<br/>})<br/></code></pre><br/><br/><p>It works with new-style classes. I am not sure, whether this would also work with old-style classes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH GIT
    </pattern>
    <template>
<![CDATA[<p>An option you should consider is using <a href="http://pypi.python.org/pypi/pip" rel="nofollow"><code>pip</code></a> in conjunction with <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow"><code>virtualenv</code></a> to install your packages especially as pip has the option to <a href="http://www.pip-installer.org/en/latest/requirement-format.html" rel="nofollow">directly install certain branches or tags</a> from a git repository.<br/>That way you can use one requirements file to handle all your dependencies, your own packages and apps by other people. (See <a href="http://bartek.im/blog/2010/07/13/django-environment.html" rel="nofollow">this post</a> for the big picture.)</p><br/><br/><p>And to handle your static media I'd prefer to use Django's builtin <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">staticfiles app</a> instead of symlinking several dirs, as it seems cleaner and easier to manage.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO OVERRID UNIQUE TOGETH ERROR MESSAG
    </pattern>
    <template>
<![CDATA[<p>If what sebpiq is true( since i do not check source code), then there is one possible solution you can do, but it is the hard way...</p><br/><br/><p>You can define a validation rule in your form, <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#form-inheritance" rel="nofollow">as it described here</a></p><br/><br/><p>You can see <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#cleaning-and-validating-fields-that-depend-on-each-other" rel="nofollow">examples</a> of validation with more than one field, so by using this method, you can define a unique together check before standard django unique check executed...</p><br/><br/><p>Or the worst one, you can do a validation in your view before you try to save the objects...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UTC DATETIM TO USER S LOCAL DATE AND TIME
    </pattern>
    <template>
<![CDATA[<p>This is more a Python question, than a GAE one, unless GAE has some infrastructure to facilitate this (I've made a quick scan but haven't found any reference).</p><br/><br/><p>Basically, you want to store date/times in UTC timezone (e.g. use datetime.datetime.utcnow) along with user timezones, which you can either try to extract from user IPs (using GeoDjango, if avaiable on GAE, or pygeoip; you need some geolocation db like: <a href="http://www.maxmind.com/app/geolitecity" rel="nofollow">http://www.maxmind.com/app/geolitecity</a>), or to explicitly ask users about it - which has the advantage that you can ask for a descriptive timezone name, like "Europe/Warsaw". If you ask for just UTC+2, then you loose any indication of DST shifts.</p><br/><br/><p>Then, you can shift from utc to the desired timezone using e.g. <a href="http://pytz.sourceforge.net/" rel="nofollow">pytz</a>:</p><br/><br/><pre><code>import pytz<br/>local_tz = pytz.timezone(timezone_name)<br/>return timestamp_utc.replace(tzinfo=pytz.utc).astimezone(local_tz).replace(tzinfo=None)<br/></code></pre><br/><br/><p>-- where <code>timestamp_utc</code> is utc datetime that you want to convert, and timezone_name is the mentioned "Europe/Warsaw".</p><br/><br/><p>(Note that I don't know which of these works in GAE, but at least you will know what to look for)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST OF ALL INSTAL APPLIC IN DJANGO AND THEIR ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>If you want all models, try:</p><br/><br/><pre><code>from django.db.models import get_models<br/><br/>for model in get_models():<br/>   # Do something with your model here<br/>   print model.__name__, [x.name for x in model._meta.fields]<br/></code></pre><br/><br/><p>Or something like that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRODUCTION SAF WAY TO MEASUR TIME SPENT IN PRODUCT W PYTHON
    </pattern>
    <template>
<![CDATA[<p>Yes, it's perfectly possible. E.g. use some magic switch in URL, like "?profile-me" which triggers profiling in Django middleware. </p><br/><br/><p>There are a number of snippets on the Internet, like this one: <a href="http://djangosnippets.org/snippets/70/" rel="nofollow">http://djangosnippets.org/snippets/70/</a> or modules like this one: <a href="http://code.google.com/p/django-profiling/" rel="nofollow">http://code.google.com/p/django-profiling/</a> - but I haven't used any of them so I cannot recommend anything. </p><br/><br/><p>Anyway, the approach they take is similar to what I do - i.e. use Python <a href="http://docs.python.org/library/hotshot.html" rel="nofollow">Hotshot</a> profiler module in a middleware that wraps your view. For the MySQL part, you can just use <a href="http://docs.djangoproject.com/en/dev/faq/models/#how-can-i-see-the-raw-sql-queries-django-is-running" rel="nofollow">connection.queries</a> form Django.</p><br/><br/><p>The nice thing about Hotshot is that its output can be browsed using Kcachegrind like here: <a href="http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/" rel="nofollow">http://www.rkblog.rk.edu.pl/w/p/django-profiling-hotshot-and-kcachegrind/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTHENT OPTION DO YOU HAVE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There's one correct way to <a href="http://docs.djangoproject.com/en/dev/topics/auth/#how-to-log-a-user-in" rel="nofollow">log a user in</a>, but there are <a href="http://docs.djangoproject.com/en/dev/topics/auth/#other-authentication-sources" rel="nofollow">many, may, many potential authdbs</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      . OVERWRIT SAVE FOR MODEL
    </pattern>
    <template>
<![CDATA[<p>Some thouths:</p><br/><br/><pre><code>class Model(model.Model):<br/>    _image=models.ImageField(upload_to='folder')<br/>    thumb=models.ImageField(upload_to='folder')<br/>    description=models.CharField()<br/><br/>    def set_image(self, val):<br/>        self._image = val<br/>        self._image_changed = True<br/><br/>        # Or put whole logic in here<br/>        small = rescale_image(self.image,width=100,height=100)<br/>        self.image_small=SimpleUploadedFile(name,small_pic)<br/><br/>    def get_image(self):<br/>        return self._image<br/><br/>    image = property(get_image, set_image)<br/><br/>    # this is not needed if small_image is created at set_image<br/>    def save(self, *args, **kwargs):<br/>        if getattr(self, '_image_changed', True):<br/>            small=rescale_image(self.image,width=100,height=100)<br/>            self.image_small=SimpleUploadedFile(name,small_pic)<br/>        super(Model, self).save(*args, **kwargs)<br/></code></pre><br/><br/><p>Not sure if it would play nice with all pseudo-auto django tools (Example: ModelForm, contrib.admin etc).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OMIT LAST ELEMENT IN COMMA SEPAR LIST
    </pattern>
    <template>
<![CDATA[<pre><code>for tag in tags.split(",") if tag.strip()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL VALU FROM CHECKBOX IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>request.POST.getlist('recommendations')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT IS RELATED NAM FOR AND HOW DO I CREAT SHARE COLUMN TO USE ACROSS PROJECT
    </pattern>
    <template>
<![CDATA[<p>Try this:  </p><br/><br/><pre><code>class AbstractClass(models.Model):<br/>    created_at=models.DateField("Created at")<br/>    created_by=models.ForeignKey(User, db_column="created_by", related_name="poll_user_created_by")<br/>    updated_at=models.DateTimeField("Updated at")<br/>    updated_by=models.ForeignKey(User, db_column="updated_by", null=True, related_name="poll_user_updated_by")<br/>    class Meta:<br/>        abstract = True<br/></code></pre><br/><br/><p>And then use it as base for other models:</p><br/><br/><pre><code>class Poll(AbstractClass):<br/>    question=models.CharField(max_length=300)<br/>    start_poll_at=models.DateTimeField(null=True)<br/>    end_poll_at=models.DateTimeField(null=True)<br/>    is_active=models.BooleanField(default=True)<br/></code></pre><br/><br/><p>This is the django documentation about this: <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes">http://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I CHANG THI FIELD IS REQUIRED. TO NAME IS REQUIR
    </pattern>
    <template>
<![CDATA[<p>An easy way to specify simple "required" validation messages is to pass the field the error_messages argument.</p><br/><br/><pre><code>name = forms.CharField(error_messages={'required': 'Your Name is Required'}) <br/></code></pre><br/><br/><p>Check the docs for which keys can be specified per field:<br/><a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#django.forms.Field.error_messages" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/forms/fields/#django.forms.Field.error_messages</a></p><br/><br/><p>For anything else, you're going to need real form validation which means you'd be writing error messages anyways!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A RIA WITH DJANGO WHAT TECHNOLOG STACK
    </pattern>
    <template>
<![CDATA[<p>For RIA you need to use some client technology in your templates.</p><br/><br/><p>See at <a href="http://dojotoolkit.org/" rel="nofollow">Dojo</a> or <a href="http://www.sencha.com/products/js/" rel="nofollow">ExtJs</a>.<br/>ExtJs docs have example of Web Desktop app, but this library is not free for commercial project. I like more Dojo, and it is free.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM TEMPLAT TAG WHICH ACCEPT A BOOLEAN PARAMET
    </pattern>
    <template>
<![CDATA[<p>I came up against this problem a while ago, and arrived at the conclusion that using 1 and 0 was the simplest solution.</p><br/><br/><p>However an idea might be to add a context processor which adds <code>True</code> and <code>False</code> to the template context using respective names:</p><br/><br/><pre><code># projectname/appname/context_processors.py<br/><br/>def booleans():<br/>    return {<br/>        'True': True,<br/>        'False': False,<br/>    }<br/></code></pre><br/><br/><p>Then obviously you would need to add that context processor in your Django settings file:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS += {<br/>    'projectname.appname.context_processors.booleans',<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CAN YOU ADD A METHOD TO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>You need to add methods to the <code>QuerySet</code> which you eventually end up with. So you need to create and use a <code>QuerySet</code> subclass which has the methods you define wherever you want this functionality.</p><br/><br/><p>I found this tutorial which explains how to do it and reasons why you might want to:</p><br/><br/><p><a href="http://adam.gomaa.us/blog/2009/feb/16/subclassing-django-querysets/index.html" rel="nofollow">http://adam.gomaa.us/blog/2009/feb/16/subclassing-django-querysets/index.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK FOR A TRADE SITE
    </pattern>
    <template>
<![CDATA[<p>Django's ORM is really pretty solid. One thing I'd definitely look into is <a href="http://code.google.com/p/django-tagging/" rel="nofollow">django-tagging</a>, as it's a pretty robust tagging solution, and looks like it'll be able to handle a lot of the tagging stuff you need. Definitely check out the 'UsefulTips' link under Documentation if you decide to use django-tagging.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAGEMENTFORM DATA IS MISS ... FORMSET WILL NOT VALIDATE. WHI
    </pattern>
    <template>
<![CDATA[<p>Your problem is here:</p><br/><br/><pre><code>       if request.method=='POST':<br/>            if 'add_department' in request.POST:<br/>                cp = request.POST.copy()<br/>                cp['department-TOTAL_FORMS'] = int(cp['department-TOTAL_FORMS'])+ 1<br/>                new_department = AddDepartmentFormSet(cp, prefix='department', instance=provider_obj)<br/>            elif 'submit' in request.POST:<br/>                formset = AddDepartmentFormSet(request.POST, instance=provider_obj)<br/>                instances = formset.save(commit=False)<br/>                for instance in instances:<br/>                    instance.provider = provider_obj<br/>                    instance.save()<br/>                return HttpResponse("Departments have been added")<br/>        else:<br/>            new_department = AddDepartmentFormSet(prefix='department', instance=provider_obj)<br/></code></pre><br/><br/><p>If there is no POST you pass a prefix of 'department'. If 'add_department' is in the POST you pass the prefix of 'department'. However when 'submit' is in the POST you do not pass the prefix. Without the prefix the formset cannot find the proper data in the POST. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNI FORM HELPER AND CSRF TAG OVER POST
    </pattern>
    <template>
<![CDATA[<p>Have you checked the source? It should already be there. The uni_form template tag should include it automatically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APP THAT CAN HANDL GROUP AND PERMISS
    </pattern>
    <template>
<![CDATA[<p>Three permissions are generated per model <a href="http://docs.djangoproject.com/en/dev/topics/auth/#default-permissions" rel="nofollow">by default</a>, but you <em>can</em> <a href="http://docs.djangoproject.com/en/dev/topics/auth/#custom-permissions" rel="nofollow">define additional permissions</a> that you can use for other purposes. From there, the <a href="http://docs.djangoproject.com/en/dev/topics/auth/#the-permission-required-decorator" rel="nofollow">permissions decorator</a> can handle authorization.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOD WSGI ERROR FORBIDDEN YOU DO N T HAVE PERMISS TO ACCESS ON THI SERVER
    </pattern>
    <template>
<![CDATA[<p>The second directory block doesn't match where you have your WSGI script file installed. It is very bad practice though to stick the WSGI script file in a location where source code or other sensitive files exist, ie., same directory or sub directory. Instead you should stick it in a sub directory of its own. Thus:</p><br/><br/><pre><code>WSGIScriptAlias / /home/wong2/Code/python/django2/atest/apache/setting.wsgi<br/>&lt;Directory "/home/wong2/Code/python/django2/atest/apache"&gt;<br/>    Order allow,deny<br/>    Allow from all<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>So, create 'apache' subdirectory under 'atest'. Move 'setting.wsgi' into that 'apache' subdirectory and change config to above.</p><br/><br/><p>Your problem also may be caused by restrictive permisions on your home directory as Apache cannot see inside.</p><br/><br/><p>Go watch:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations" rel="nofollow">http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations</a></p><br/><br/><p>as it explains these permissions problems as well as issues like where to stick your code and the WSGI script file.</p><br/><br/><p>Also read:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango" rel="nofollow">http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN.PI AND VIRTUALENV PROBLEM
    </pattern>
    <template>
<![CDATA[<p>This is because your windows has associated <code>.py</code> extension with the globally installed <code>python.exe</code>. Therefore when you type <code>django-admin.py</code>, even though you're in a virtualenv, the global python is invoked, and it in turn finds your global django installation in its own site-packages. Try <code>python django-admin.py</code> to circumvent the association.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INJECT PDB TO FAIL PYTHON SCRIPT
    </pattern>
    <template>
<![CDATA[<p>This Python Recipe will install a debugger that starts on uncaught exceptions:</p><br/><br/><p><a href="http://code.activestate.com/recipes/65287-automatically-start-the-debugger-on-an-exception/" rel="nofollow">http://code.activestate.com/recipes/65287-automatically-start-the-debugger-on-an-exception/</a></p><br/><br/><p>The gist of it is to install an exception hook in sys.excepthook that calls pdb.pm() when called (though it's slightly more complicated than that).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM BUTTON IN ADMIN CHANGE FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can override <code>admin/change_form.html</code>. Copy the version in <code>contrib.admin.templates</code> into your project. Mine is <code>myproject/templates/admin/change_form.html</code>, but you could use <code>/myproject/myapp/templates/admin/change_form.html</code>.</p><br/><br/><p>Next, edit the copy and change the two references to the existing template tag, <code>{% submit_row %}</code>, to point to your own template tag, <code>{% my_template_tag %}</code>.</p><br/><br/><p>Base your template tag on the <code>contrib.admin</code>'s <code>{% submit_row %}</code>, but edit the HTML template to contain any extra buttons you want to display.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PDF RESPONS FROM STDOUT WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>You should open your sub command like so:</p><br/><br/><pre><code>popen = Popen(command_args, stdout=PIPE, stderr=PIPE)<br/>body_contents = popen.stdout().read()<br/>popen.terminate()<br/>popen.wait()<br/>r = HttpResponse(body_contents, mimetype='application/pdf')<br/></code></pre><br/><br/><p>Some things to be careful of:</p><br/><br/><ol><br/><li>If your popen'd command writes to STDERR it may deadlock. You can solve this by using the communicate() function on the Popen object.</li><br/><li>You should try/finally this to make sure to always terminate() and wait().</li><br/><li>This loads the whole PDF into the memory of your python process, you may want to stream the bytes from the command to the outgoing socket.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RABBITMQ NOT PERSIST MESSAG ON A DURABL QUEUE
    </pattern>
    <template>
<![CDATA[<p>To find out the messages <code>delivery_mode</code> you can consume it and look at the message properties:</p><br/><br/><pre><code>&gt;&gt;&gt; from tasks import add<br/>&gt;&gt;&gt; add.delay(2, 2)<br/><br/>&gt;&gt;&gt; from celery import current_app<br/>&gt;&gt;&gt; conn = current_app.broker_connection()<br/>&gt;&gt;&gt; consumer = current_app.amqp.get_task_consumer(conn)<br/><br/>&gt;&gt;&gt; messages = []<br/>&gt;&gt;&gt; def callback(body, message):<br/>...     messages.append(message)<br/>&gt;&gt;&gt; consumer.register_callback(callback)<br/>&gt;&gt;&gt; consumer.consume()<br/><br/>&gt;&gt;&gt; conn.drain_events(timeout=1)<br/><br/>&gt;&gt;&gt; messages[0].properties<br/>&gt;&gt;&gt; messages[0].properties<br/>{'application_headers': {}, 'delivery_mode': 2, 'content_encoding': u'binary',    'content_type': u'application/x-python-serialize'}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH AMAZON S DATABAS SIMPLEDB
    </pattern>
    <template>
<![CDATA[<p>It doesn't look like there's any way to use Django's ORM with SimpleDB at the moment, unless you want to write all the code yourself. I'd suggest interfacing with SimpleDB using normal Python code (which would get called by your views or however you wish to do it).</p><br/><br/><p>To do this, use <a href="http://code.google.com/p/boto/" rel="nofollow">boto</a>. It's mature, stable and well-documented -- I used it quite successfully in a Django project I recently undertook.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADD CONSTANT FOR EACH OF THE CHOIC IN A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Carl Meyer's <a href="https://github.com/carljm/django-model-utils" rel="nofollow">django-model-utils</a> library has an excellent solution for this - the Choices class, which allows you to declare a list of choices with access via human-readable attributes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL SETTINGS.PI FILE
    </pattern>
    <template>
<![CDATA[<p>django-admin.py / manage.py both accept a --settings=mysite.settings option.  In development you could explicitly specify --settings=dev_settings.py.  You can also set the DJANGO_SETTINGS_MODULE environment variable in your apache configuration.</p><br/><br/><p>Personally, I simply don't check in settings.py.  Instead I check in multiple settings files (dev_settings, prod_settings, etc) and symbolically link them to settings.py as desired.  This way if I simply checkout my application it won't be runnable until I think about which settings file is appropriate and actually put that settings file in place.</p><br/><br/><p>Another suggestion I've heard but I don't particularly like is having a settings.py that dynamically imports a dev_settings.py if it exists.  While this may be more convenient I'd be concerned that it's harder to read settings.py and know what the settings will actually be without also looking for overriding values in a dev_settings.py file that may or may not exist.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE PERFORM OF A DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p><a href="http://pycheesecake.org/wiki/PythonTestingToolsTaxonomy" rel="nofollow">pycheesecake.org</a> provides a good source of testing tools for python.</p><br/><br/><p>You might also want to checkout <a href="https://github.com/gregmuellegger/django-autofixture" rel="nofollow">django-autofixture</a>, a nice tool for inserting randomly generated data into the database, and <a href="https://github.com/sorl/django-mockups" rel="nofollow">django-mockups</a>, which is a fork from django-autofixture.</p><br/><br/><p>Here is a sample usage of django-autofixture:</p><br/><br/><pre><code>django-admin.py loadtestdata [options] app.Model:# [app.Model:# ...]<br/></code></pre><br/><br/><p>You just supply the app name, model and the number of objects that you want to create.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAPLIB AND OAUTH FOR CONNECT WITH GMAIL
    </pattern>
    <template>
<![CDATA[<p>Here's an example using the <a href="https://github.com/simplegeo/python-oauth2" rel="nofollow"><code>oauth2</code> module</a> to authenticate using oauth, taken from the readme:</p><br/><br/><pre><code>import oauth2 as oauth<br/>import oauth2.clients.imap as imaplib<br/><br/># Set up your Consumer and Token as per usual. Just like any other<br/># three-legged OAuth request.<br/>consumer = oauth.Consumer('your_consumer_key', 'your_consumer_secret')<br/>token = oauth.Token('your_users_3_legged_token', <br/>    'your_users_3_legged_token_secret')<br/><br/># Setup the URL according to Google's XOAUTH implementation. Be sure<br/># to replace the email here with the appropriate email address that<br/># you wish to access.<br/>url = "https://mail.google.com/mail/b/your_users_email@gmail.com/imap/"<br/><br/>conn = imaplib.IMAP4_SSL('imap.googlemail.com')<br/>conn.debug = 4 <br/><br/># This is the only thing in the API for impaplib.IMAP4_SSL that has <br/># changed. You now authenticate with the URL, consumer, and token.<br/>conn.authenticate(url, consumer, token)<br/><br/># Once authenticated everything from the impalib.IMAP4_SSL class will <br/># work as per usual without any modification to your code.<br/>conn.select('INBOX')<br/>print conn.list()<br/></code></pre><br/><br/><p>Quite a bit cleaner than using <code>xoauth</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BETWEEN DJANGO AND RAW PYTHON
    </pattern>
    <template>
<![CDATA[<p>Django IS plain Python. So the execution time of each like statement or expression will be the same. What needs to be understood, is that many many components are put together to offer several advantages when developing for the web:</p><br/><br/><ul><br/><li>Removal of common tasks into libraries (auth, data access, templating, routing)</li><br/><li>Correctness of algorithms (cookies/sessions, crypto)</li><br/><li>Decreased custom code (due to libraries) which directly influences bug count, dev time etc</li><br/><li>Following conventions leads to improved team work, and the ability to understand code</li><br/><li>Plug-ability; Create or find new functionality blocks that can be used with minimal integration cost</li><br/><li>Documentation and help; many people understand the tech and are able to help (StackOverflow?)</li><br/></ul><br/><br/><p>Now, if you were to write your own site from scratch, you'd need to implement at least several components yourself. You also lose most of the above benefits unless you spend an extraordinary amount of time developing your site. Django, and other web frameworks for every other language, are designed to provide the common stuff, and let you get straight to work on business requirements.</p><br/><br/><p>If you ever banged out custom session code and data access code in PHP before the rise of web frameworks, you won't even think of the performance cost associated with a framework that makes your job interesting and eas(y)ier.</p><br/><br/><p>Now, that said, Django ships with a LOT of components. It is designed in such a way that most of the time, they won't affect you. Still, a surprising amount of code is executed for each request. If you build out a site with Django, and the performance just doesn't cut it, you can feel free to remove all the bits you don't need. Or, you can use a 'slim' python framework. </p><br/><br/><p>Really, just use Django. It is quite awesome. It powers many sites millions times larger than anything you (or I) will build. There are ways to improve performance significantly, like utilizing caching, rather than optimizing a loop over custom Middleware.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION BETWEEN PLAY FRAMEWORK AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>as stated by mandubian the best option is to have a central service that provides authentication tokens that all applications recognize and use to authenticate the user. And example of such a service is <a href="http://www.jasig.org/cas" rel="nofollow">CAS</a>, if as you say you are not experienced with SSO I would read about it to get the grasp of how it should work.</p><br/><br/><p>Just a warning: authentication and authorization is a critical part of an application, even more of a web application. I would advise against implementing your own solution, you will probably end up hacked and with problems (unless the apps are inside an intranet, the risks exist but are more forgiving usually). Try to use an existing solution like <a href="http://www.jasig.org/cas" rel="nofollow">CAS</a> or <a href="http://www.josso.org/confluence/display/JOSSO1/JOSSO+-+Java+Open+Single+Sign-On+Project+Home" rel="nofollow">JOSSO</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN FILTER ON MANY TO MANI FIELD
    </pattern>
    <template>
<![CDATA[<p>I believe in a case like this, you could make a trivial <code>through</code> model for your M2M relation, and then use the normal syntax to follow the (now explicit) <code>ForeignKey</code>s.  Something like:</p><br/><br/><pre><code>class Address(models.Model):<br/>    blah<br/><br/>class MemberData(models.Model):<br/>    user = models.ForeignKey(User)<br/>    addresses = models.ManyToManyField(Address,through='MemberAddress')<br/><br/>class MemberAddress(models.Model):<br/>    member = models.ForeignKey(MemberData)<br/>    address = models.ForeignKey(Address)<br/></code></pre><br/><br/><p>and in the admin:</p><br/><br/><pre><code>class AddressAdmin(admin.ModelAdmin):<br/>    model = Address<br/>    list_filter = ['memberaddress_set__member__user']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE PIL IN DJANGO APP ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>I've answered this before <a href="http://stackoverflow.com/questions/4011705/python-the-imagingft-c-module-is-not-installed/4011715#4011715">here</a></p><br/><br/><p>Just install pre-compiled binaries for Windows (for your python version) from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIDIMENSION ARRAY FROM A POST REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is related with <a href="http://stackoverflow.com/questions/4899143/django-reconstruct-structured-parameters-sent-via-post">that question</a>. As stated there, I made special library for Django/Python to handle multidimensional arrays sent through requests. You can find it on GitHub <a href="https://github.com/bernii/querystring-parser" rel="nofollow">here</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL APP ENGIN ( PYTHON DJANGO ) WEBSIT WITH OPEN SOURC
    </pattern>
    <template>
<![CDATA[<p>A nice variety of example projects:</p><br/><br/><p><a href="http://code.google.com/p/google-app-engine-samples/" rel="nofollow">http://code.google.com/p/google-app-engine-samples/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND UNICOD UTF 8 IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>ោ (U+17C4 KHMER VOWEL SIGN OO) and ា (U+17B6 KHMER VOWEL SIGN AA) are not letters, they're combining marks, so they don't match \w.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BASIC HTTP ACCESS AUTHENT IN DJANGO TEST FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>Here's how I did it:</p><br/><br/><pre><code>from django.test import Client<br/>import base64<br/>auth_headers = {<br/>    'HTTP_AUTHORIZATION': 'Basic ' + base64.b64encode('username:password'),<br/>}<br/>c = Client()<br/>response = c.get('/my-protected-url/', **auth_headers)<br/></code></pre><br/><br/><p>Note: You will also need to create a user.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .POST WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I usually refer a file with this content to every page I want to be able to make AJAX requests:</p><br/><br/><pre><code>if (!$)<br/>    var $ = django.jQuery;<br/><br/>$('html').ajaxSend(function(event, xhr, settings) {<br/>    function getCookie(name) {<br/>        var cookieValue = null;<br/>        if (document.cookie &amp;&amp; document.cookie != '') {<br/>            var cookies = document.cookie.split(';');<br/>            for (var i = 0; i &lt; cookies.length; i++) {<br/>                var cookie = $.trim(cookies[i]);<br/>                // Does this cookie string begin with the name we want?<br/>                if (cookie.substring(0, name.length + 1) == (name + '=')) {<br/>                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));<br/>                    break;<br/>                }<br/>            }<br/>        }<br/>        return cookieValue;<br/>    }<br/>    if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {<br/>        // Only send the token to relative URLs i.e. locally.<br/>        xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND XML POST DATA FROM AN IO APP TO A DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Since you control both sides, I'd drop the complexity of xml encoding the data and use RestKit or some other framework that makes it easy to communicate with Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SANIT FORM DATA
    </pattern>
    <template>
<![CDATA[<p>Django comes with a template filter called <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#striptags">striptags</a>, which you can use in a template:</p><br/><br/><pre><code>value|striptags<br/></code></pre><br/><br/><p>It uses the function <code>strip_tags</code> which lives in <code>django.utils.html</code>. You can utilize it also to clean your form data:</p><br/><br/><pre><code>from django.utils.html import strip_tags<br/>message = strip_tags(form.cleaned_data['message'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXIST SOLUT FOR DYNAM FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Sounds like what you want is a Javascript Data Grid widget. The Ext JS toolkit has a nice example, something like this:</p><br/><br/><p><a href="http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/cell-editing.html" rel="nofollow">http://dev.sencha.com/deploy/ext-4.0.0/examples/grid/cell-editing.html</a></p><br/><br/><p>Now note this has nothing to do with Django, these things can be deployed by any web server or application server. </p><br/><br/><p>Of course implementing this on a Django server just means making sure your server is serving the Javascript, and that you've written any Ajax calls correctly. But thats the next step.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EIGN KEY IN TASTYPI
    </pattern>
    <template>
<![CDATA[<p>The final answer for my problem is the answer from @manji and @dlrust combined:</p><br/><br/><p>"change <code>urlpatterns</code> value to <code>urlpatterns = patterns('', (r'^api/', include(api.urls)),)</code>"</p><br/><br/><p>and, after that, "define an authorization in your Meta for the resource".</p><br/><br/><p>Hope it's useful for somebody else as it was for me :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REST SERVER WITH DJANGO FOR DOJO S JSONRESTSTOR WHICH TOOL FOR THE JOB
    </pattern>
    <template>
<![CDATA[<p>I'd take a look at piston, tastypie and django-rest-framework, honestly they're mostly pretty similar, I'd just take a run through the docs and see which you think fits the bill.</p><br/><br/><p>I don't <em>think</em> any of those will natively support the Range pagination you mention it's probably something you'd need to deal with yourself.</p><br/><br/><p>Piston is the daddy, tho not being actively maintained ATM, that's not necessarily and issue as it pretty much does what you want anyway. Tastypie's advantages are that it has a great community behind it, and is well documented. django-rest-framework has the admin style API browser, plenty of examples in the docs, and a growing community. django-rest-interface is perfectly decent AFAIK, but I don't know of any community effort behind it ATM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLACE TO CLEAR CACH WHEN RESTART DJANGO SERVER
    </pattern>
    <template>
<![CDATA[<p>It's bad practice to put code in <code>settings.py</code> other than assignments. It's better suited as a management command:</p><br/><br/><pre><code>from django.core.management.base import BaseCommand<br/>from django.core.cache import cache<br/><br/>class Command(BaseCommand):<br/>    def handle(self, *args, **kwargs):<br/>        cache.clear()<br/>        self.stdout.write('Cleared cache\n')<br/></code></pre><br/><br/><p>Which you can add to your project by sticking it in <code>someapp/management/commands</code>. For instance you could create a new app called <code>utils</code> and add that to your <code>INSTALLED_APPS</code> and the directory structure would look like this:</p><br/><br/><pre><code>utils<br/>├── __init__.py<br/>└── management<br/>    ├── __init__.py<br/>    └── commands<br/>        ├── __init__.py<br/>        └── clearcache.py<br/></code></pre><br/><br/><p>You can now clear cache by doing <code>./manage.py clearcache</code>. If you want to run clearcache every time you runserver you can just write a shell alias to do that:</p><br/><br/><pre><code>alias runserver='./manage.py clearcache &amp;&amp; ./manage.py runserver'<br/></code></pre><br/><br/><p>Alternately I think you can write it as a stand-alone script and <a href="http://docs.djangoproject.com/en/1.3/topics/settings/">configure the settings it requires by hand</a>:</p><br/><br/><pre><code>from django.conf import settings<br/><br/># obviously change CACHES to your settings<br/>CACHES = {<br/>    'default': {<br/>        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',<br/>        'LOCATION': 'unique-snowflake'<br/>    }<br/>}<br/><br/>settings.configure(CACHES=CACHES) # include any other settings you might need<br/><br/>from django.core.cache import cache<br/>cache.clear()<br/></code></pre><br/><br/><p>Writing your stand-alone script like this will prevent circular imports, and allow you to import it from your settings.py. Although there is no guarantee that settings.py will be imported only once, so in general I'd avoid this. It'd be nice if the signal framework could fire off an event once every time the app is started, after settings are loaded for stuff like this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHOW USER THAT UPLOAD IS IN PROGRESS
    </pattern>
    <template>
<![CDATA[<p>This post: <a href="http://kuhlit.blogspot.com/2011/04/ajax-file-uploads-and-csrf-in-django-13.html" rel="nofollow">http://kuhlit.blogspot.com/2011/04/ajax-file-uploads-and-csrf-in-django-13.html</a> discusses how to implement an upload progress bar for Django 1.3. I think a progress bar would be preferable, although if you wanted to do something simple, you could just show a dialog with javascript saying, "HEY I'M UPLOADING HERE". </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY CODE FROM MY CENTRAL GIT REPO TO MY PRODUCT SERVER
    </pattern>
    <template>
<![CDATA[<p>The first question you must solve is your project structure. Usually the difference between development and the production environment is setting.py and url.py. So why you firstly separate those? :) For example you can have one main settings.py where you define all the default settings which are in common. Then at the end of the file you just import the settings_dev.py and settting_prod.py for exemple:</p><br/><br/><pre><code>try:<br/>    from settings_prod import *<br/>except ImportError:<br/>    pass<br/><br/>try:<br/>    from settings_dev import *<br/>except ImportError:<br/>    pass<br/></code></pre><br/><br/><p>Then simply you can overload all the setting you want and have custom settings of the project (for example installed apps). The same logic you can use for urls.py file.</p><br/><br/><p>Then you can simply ignore adding the *_dev files to repo and on the server side you can just checkout the code from repo and restart http server. To automatize this for now I can't give the right name of app to use. Sometimes simple python script could be solution like: watching if the file datetime changed and if yes, just run restart command for http.</p><br/><br/><p>Hope that helped.</p><br/><br/><p>Ignas</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT ERROR NO MODUL NAME CORE.MANAG
    </pattern>
    <template>
<![CDATA[<p>As known this was a path issue.</p><br/><br/><p>the base of my custom packages shared a name with a directory set in a /etc/profile. The packages were in a different location however for the webserver. So I removed the offending entries from my $PYTHONPATH and was good to go!</p><br/><br/><p>Thanks for the help.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BIZARR ERROR IMPORT SET IN DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I got this error:</p><br/>  <br/>  <p>Error: Can't find the file 'settings.py' in the directory containing 'manage.py'. It appears you've customized things. You'll have to run django-admin.py, passing it your settings module. (If the file settings.py does indeed exist, it's causing an ImportError somehow.)</p><br/></blockquote><br/><br/><p>The <code>manage.py</code> script prints that warning whenever an import error occurs, so if your <code>settings.py</code> module imports stuff and <em>that</em> causes an import error, <code>manage.py</code> will still print that warning.</p><br/><br/><p>One way to diagnose would be to (temporarily) change <code>manage.py</code> from</p><br/><br/><pre><code>#!/usr/bin/env python<br/>from django.core.management import execute_manager<br/>try:<br/>    import settings # Assumed to be in the same directory.<br/>except ImportError:<br/>    import sys<br/>    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)<br/>    sys.exit(1)<br/><br/>if __name__ == "__main__":<br/>    execute_manager(settings)<br/></code></pre><br/><br/><p>to</p><br/><br/><pre><code>#!/usr/bin/env python<br/>from django.core.management import execute_manager<br/>import settings # Assumed to be in the same directory.<br/><br/>if __name__ == "__main__":<br/>    execute_manager(settings)<br/></code></pre><br/><br/><p>and see the stack trace that is printed when running <code>$ python manage.py runserver</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON STRING IN GOOGL VISUAL API EXAMPL
    </pattern>
    <template>
<![CDATA[<p>Unfortunately I can't comment so this isn't exactly a full answer, but could you try eval'ing the JSON before trying to use it for the chart?</p><br/><br/><pre><code>var json_table = new google.visualization.Table(document.getElementById('dataview'));<br/>var evalledData = eval("("+data+")");<br/>var json_data = new google.visualization.DataTable(evalledData, 0.6);<br/>json_table.draw(json_data, {showRowNumber: true});<br/></code></pre><br/><br/><p>I think that may have solved this problem for me in the past; it may not be the safest way to go about it, but you could at least try it for testing.</p><br/><br/><p>Alternatively, perhaps play with simplejson to dump your json string from the python instead of just returning the gviz string?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOUTH FROM A DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Remove <code>'south'</code> from INSTALLED_APPS, remove <code>south_migrations</code> table from DB.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL DEFAULT VALU FOR COLUMN
    </pattern>
    <template>
<![CDATA[<p>Note that the <code>default</code> parameter can also take a callable object: <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#default" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/models/fields/#default</a>. That is certainly a behavior that cannot be reproduced in SQL! So it would not be possible for Django to generate SQL for every possible case. It looks like for the sake of simplicity and consistency they have chosen not to generate SQL for any case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALL SAVE ON A QUERYSET OBJECT QUERYSET OBJECT HA NO ATTRIBUT SAVE
    </pattern>
    <template>
<![CDATA[<p>You'll want to use the <code>update</code> method since you're dealing with multiple objects:</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#updating-multiple-objects-at-once" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/db/queries/#updating-multiple-objects-at-once</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX + DJANGO CSRF
    </pattern>
    <template>
<![CDATA[<p>There is a method explained here: <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax</a></p><br/><br/><p>It consists of adding a X-CSRFToken header on each ajax request.</p><br/><br/><p>This is done by hooking in the jQuery.ajaxSend event, so everything is done automatically (you just have to copy and past their code, and run it once before the first ajax request you make).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS VIEW GENER VIEW ETC
    </pattern>
    <template>
<![CDATA[<p>There are in my opinion two cases for necessity of class-based(-generic)-views:</p><br/><br/><ul><br/><li>You really need generic functionality in your views and a little bit extra.</li><br/><li>You write a resusable Django app and want to make it possible that others can extend your views.</li><br/></ul><br/><br/><p>For anything else use what you feel most comfortable with. As you said you basically good to go with extending from <code>TemplateView</code> and overwriting respective methods, though you could also use a function-based approach (and have to deal with render template calls by yourself). That's up to you in the end.</p><br/><br/><p><strong>EDIT</strong>: One other advantage of class based views is that it lets you separate your code according to the <code>request.method</code> in a more cleaner manner and even returns <code>405 Method Not Allowed</code> response codes when the wrong method is used. So you don't have to deal with lines like <code>if request.method=='POST'</code> or <code>if request.method=='GET'</code> at all and just extend a <code>post</code> or <code>get</code> method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO GIVE ME THI VIOLAT NOT NUL CONSTRAINT ERROR
    </pattern>
    <template>
<![CDATA[<p>You're excluding <code>postal_code</code>, which will cause the model form to skip over the field later on during the save attempt. I've had a similar problem, and had to trace through django code to figure out the behaviour. It's worth doing by the way.</p><br/><br/><p>What you want to do instead, is set the widget used for the postal_code field instead of excluding then including.</p><br/><br/><pre><code>class AddressForm(ModelForm):<br/>    class Meta:<br/>        model = Address<br/>        widgets = {<br/>            'postal_code': CharField(max_length=10),<br/>        }<br/></code></pre><br/><br/><p>That should allow the modelform to validate the field correctly and save it. I excluded the rest of your form for brevity.</p><br/><br/><p>Edit:</p><br/><br/><p>Attempting to use a CharField for a ForeignKey is fraught with horrible in a ModelForm. Instead, convert it to a regular form. You already appear to be defining most of your fields anyway. Then the reliance is on you to validate that fields are valid, and are members of the database already. Create a save method that behaves like the ModelForm save method, and away you go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGERFIELD WITH CHOIC OPTION ( HOW TO CREAT 0 10 INTEG OPTION )
    </pattern>
    <template>
<![CDATA[<p>Use a Python list comprehension:</p><br/><br/><pre><code>CHOICES = [(i,i) for i in range(10)]<br/></code></pre><br/><br/><p>This will result in:</p><br/><br/><pre><code>[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIMARI KEY SPECIFI IN MYSQL DATABAS
    </pattern>
    <template>
<![CDATA[<p>It's a composite primary key. Try executing this:</p><br/><br/><pre><code>show create table mytable;<br/></code></pre><br/><br/><p>It should show you the definition of the composite key.</p><br/><br/><p>This is nothing "unusual" from a mysql perspective.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRING OF URL IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<pre><code>&lt;a href="sameLink/?{{ request.GET.urlencode }}"&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS TERRIBL SLOW ON MAC OS X LION
    </pattern>
    <template>
<![CDATA[<p>OK, so to answer my own question, I found out it was actually just bad default settings for the MySQL installation. I ran over this script called <a href="http://mysqltuner.pl/mysqltuner.pl" rel="nofollow" title="MySQLTuner">MySQLTuner</a> and it showed me some variables I should change. After following it's recommendations the tests finish in normal times again.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU IN LIST
    </pattern>
    <template>
<![CDATA[<p>You can't create arbitrary lists in the Django templating system. You need to pass the created list via your view. See <a href="http://stackoverflow.com/questions/4395230/building-a-list-in-django-templates">This question</a> for a detailed discussion.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RICH JAVASCRIPT APPLIC WITH DJANGO
    </pattern>
    <template>
<![CDATA[<h2>Rich applications: heavy client side, somewhat light server side</h2><br/><br/><p>I think, you should take a look at JavaScript frameworks that implement some sort of model-view-controller pattern on the client side (if you haven't done it already).</p><br/><br/><p>Here is a quote from a <a href="http://news.ycombinator.com/item?id=1788381" rel="nofollow">discussion</a> about one of these frameworks, <a href="http://documentcloud.github.com/backbone/" rel="nofollow">backbone.js</a>. I think it's relevant to your question about management of javascript libraries.</p><br/><br/><blockquote><br/>  <p>&lt;...> if you have an application with a lot of JavaScript interactivity, or a single-page application where the entire interface is driven from JavaScript (this is the case for us), then it helps to structure your client-side code with a little more oomph than just jQuery provides.</p><br/>  <br/>  <p>Taken to the extreme, in our case, the DocumentCloud workspace is effectively an empty body tag, and all of the HTML rendering and interesting logic happens in JavaScript models and views -- you never have to refresh the page. The server-side Rails code becomes smaller and less complicated, essentially delegated to performing validations and authentication and serving JSON to the client. Think GMail, or New Twitter, or 280 Slides...</p><br/></blockquote><br/><br/><p>Yes, Rails were mentioned, but wait, architecture stays the same if you're using Django (or Flask, or any web framework at all):</p><br/><br/><ul><br/><li><p>Server side implements the API. It basically provides, accepts, validates serialized data.</p><br/><br/><p><code>piston</code> or <a href="http://toastdriven.github.com/django-tastypie/" rel="nofollow"><code>django-tastypie</code></a> are good for this, for instance.</p></li><br/><li><p>Client side makes necessary AJAX requests to retrieve the data, displays views of the data, renders templates, makes requests to save the data, etc.</p><br/><br/><p>For example, Backbone.js provides, among everything else, a Model prototype. You can extend it (or subclass, if you're using CoffeeScript) and tie to your server-side model by providing an url of the corresponding <code>tastypie</code> resource. After this, you need not bother about synchronization: you just do <code>my_model.save()</code>, and <code>Backbone.sync</code> behind the scenes will make AJAX request and update server model instance.</p></li><br/></ul><br/><br/><h2>Organizing files in client-side application</h2><br/><br/><p>I've recently started to use <a href="http://brunchwithcoffee.com/" rel="nofollow">brunch</a>. It basically provides a skeleton for the rich application, combining CoffeeScript as better JavaScript, <code>backbone.js</code> for MVC classes, <code>eco</code> for javascript templating, <code>stylus</code> as css preprocessor, and other good things (and providing convenient command-line interface: <code>brunch watch</code>, <code>brunch build</code>). I suggest to take a look on how files in brunch projects are organized.</p><br/><br/><h2>Keeping separate projects</h2><br/><br/><p>Django at the moment doesn't make it easy to manage heavy client side application. You need to figure out yourself how, say, you should organize libraries.</p><br/><br/><p>At the same time, many building tools that minimize and optimize scripts and stylesheets (like <code>requirejs</code>) are somewhat hard to integrate into the usual Django project development workflow. And you most probably will need one of these tools, if you plan to create rich javascript app.</p><br/><br/><p>Creating an app inside your project is an option, but, I think, it would complicate things a bit. You already have two more or less separate apps, so why not go ahead and separate concerns further-just work with two actually separate projects? One project would be Django-based for server side, and another, for example, <code>brunch</code>-based, for client side.</p><br/><br/><p>We started doing this with our latest project, and I personally think that makes things more manageable and easier to work with.</p><br/><br/><p><strong>Update:</strong> I think <a href="http://devblog.supportbee.com/2011/08/10/the-pros-and-cons-of-developing-a-complete-javascript-ui/" rel="nofollow">this post</a> does pretty good job on summing up pros and cons of keeping projects separate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT AND DELET CALL USE DJANGO TASTYPI
    </pattern>
    <template>
<![CDATA[<p>Two clicks into your link I found <a href="http://readthedocs.org/docs/django-tastypie/en/latest/resources.html?highlight=put_list#put_list" rel="nofollow">put_list</a></p><br/><br/><p>Immediately below that are post and delete methods. You need to spend more time looking at the docs.</p><br/><br/><p>Take a look at the examples at <a href="http://django-tastypie.readthedocs.org/en/latest/cookbook.html" rel="nofollow">http://django-tastypie.readthedocs.org/en/latest/cookbook.html</a></p><br/><br/><p>Also, try some general Django tutorials, as they should also provide you with relevant information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO RUNSERV TO SHOW ME DEPRECATIONWARN AND OTHER USE MESSAG
    </pattern>
    <template>
<![CDATA[<p>The runserver command ignores the verbosity option: <a href="https://code.djangoproject.com/ticket/15132" rel="nofollow">https://code.djangoproject.com/ticket/15132</a></p><br/><br/><p>I'd recommend setting up a logger and directing the output to stderr: <a href="https://docs.djangoproject.com/en/1.3/topics/logging/" rel="nofollow">https://docs.djangoproject.com/en/1.3/topics/logging/</a></p><br/><br/><p>For example:</p><br/><br/><pre><code>import logging<br/>logger = logging.getLogger('django')   # Django's catch-all logger<br/>hdlr = logging.StreamHandler()   # Logs to stderr by default<br/>formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')<br/>hdlr.setFormatter(formatter)<br/>logger.addHandler(hdlr) <br/>logger.setLevel(logging.WARNING)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BINARI OR BLOB MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p>I have been dealing with this same issue, writing a pdf to a mediumblob field in mysql and retrieving via django. I have set the mysql field type to a mediumblob and the django field type to textfield. I have used a queryset and httpresponse to view the PDF objects in a browser (but not directly in django).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONNECT COULD BE MADE BECAUS THE TARGET MACHIN ACTIV REFUS IT ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>I managed to find out what the problem was (no thanks to the error message). As it turns out, I needed to set up my e-mail server:</p><br/><br/><blockquote><br/>  <p>Note that in order to send e-mail using send_mail(), your server must be configured to send mail, and Django must be told about your outbound e-mail server. See <a href="http://docs.djangoproject.com/en/dev/topics/email/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/email/</a> for the specifics.</p><br/></blockquote><br/><br/><p>I guess I thought little of what was meant by it, but I was pointed in the direction of <a href="http://sontek.net/using-gmail-to-send-e-mails-from-django" rel="nofollow">this</a> guide, and things eventually started to click.</p><br/><br/><p>Thanks to <em>everyone</em> for chiming in with their advice. That is one useless error message, and I can only assume the people who helped me out only knew the answer because they had experienced the exact same thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACTUAL IS PYMYSQL AND HOW IT DIFFER FROM MYSQLDB AND HOW CAN IT AFFECT ON MY DJANGO DEPLOY
    </pattern>
    <template>
<![CDATA[<p>Both pmysql and MySQLdb are both database connectors for Python, libraries to enable Python programs to talk to a MySQL server.</p><br/><br/><p>You would normally never upload core Django files when deploying an app. If Django is working fine on your deployment server, you definitely don't need to change anything there. The DB driver is a step or two below the ORM even, and certainly none of the code you have written depends on which of these is in use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECUR TEMPLAT ENGIN IN JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.stringtemplate.org/" rel="nofollow">StringTemplate</a> is what you are looking for.</p><br/><br/><blockquote><br/>  <p>Its distinguishing characteristic is<br/>  that it <a href="http://www.cs.usfca.edu/~parrt/papers/mvc.templates.pdf" rel="nofollow">strictly enforces model-view<br/>  separation</a> unlike other engines.<br/>  Strict separation makes websites and<br/>  code generators more flexible and<br/>  maintainable; <strong>it also provides an<br/>  excellent defense against malicious<br/>  template authors</strong></p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET OR CR RAIS DUPLIC ENTRI WITH TOGETHER UNIQU
    </pattern>
    <template>
<![CDATA[<p>It appears your problem is with there being more columns you're not including in your <code>get_or_create</code>, see i.e. <a href="http://www.mail-archive.com/django-updates@googlegroups.com/msg19447.html" rel="nofollow">this thread</a> on a Django mailing list.</p><br/><br/><p>You need to use the <code>defaults</code> parameter of <code>get_or_create</code> as described in the <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#get-or-create" rel="nofollow">docs</a>, or specify values for all columns, for <code>get_or_create</code> to match correctly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      20 CODE IN URL ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>I believe the template engine is doing what you are asking it to do.</p><br/><br/><pre><code>href="{{STATIC_URL}} /stati/css/default.css"<br/></code></pre><br/><br/><p>correctly translates to </p><br/><br/><pre><code>/static/ /stati/css/default.css<br/></code></pre><br/><br/><p>Try </p><br/><br/><pre><code>href="{{STATIC_URL}}css/default.css"<br/></code></pre><br/><br/><p>in base.html if what you are after is </p><br/><br/><pre><code>/static/css/default.css<br/></code></pre><br/><br/><p>Can't account for why home.html would work correctly though. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERSION STRING ( X.Y.Z ) IN MYSQL
    </pattern>
    <template>
<![CDATA[<p>Finally, I found another way to sort version strings.</p><br/><br/><p>I just justify the string before storing into de database in a way it is sortable.<br/>As I am using the python Django framework, I just have created a VersionField that 'encode' the version string while storing and 'decode' it while reading, so that it is totally transparent for the application :</p><br/><br/><p>Here my code :</p><br/><br/><pre><code>The justify function :<br/><br/>def vjust(str,level=5,delim='.',bitsize=6,fillchar=' '):<br/>    """<br/>    1.12 becomes : 1.    12<br/>    1.1  becomes : 1.     1<br/>    """<br/>    nb = str.count(delim)<br/>    if nb &lt; level:<br/>        str += (level-nb) * delim<br/>    return delim.join([ v.rjust(bitsize,fillchar) for v in str.split(delim)[:level+1] ])<br/><br/>The django VersionField :<br/><br/>class VersionField(models.CharField) :<br/><br/>    description = 'Field to store version strings ("a.b.c.d") in a way it is sortable'<br/><br/>    __metaclass__ = models.SubfieldBase<br/><br/>    def get_prep_value(self, value):<br/>        return vjust(value,fillchar=' ')<br/><br/>    def to_python(self, value):<br/>        return re.sub('\.+$','',value.replace(' ',''))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INLIN CSS IN DJANGO AVOID
    </pattern>
    <template>
<![CDATA[<p>Since it's a calculated value, you would use inline CSS. Inline CSS is there for a reason: CSS that isn't reusable across multiple elements/pages/websites.</p><br/><br/><p>Since you can't calculate from a CSS file, clearly it makes sense to use inline CSS here.</p><br/><br/><p>P.S. I am doing almost the exact same thing in a Django template, except mine is to center an image vertically and horizontally, and I have to use the image's actual proportions to calculate the centering CSS, so I can't use a class either.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ECHNOLOG STACK FOR BUILD A WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>It will come down to what you are comfortable with as you go along -- don't lock in your combination too early.  I believe you've listed a very usable stack.  I don't have any experience with Sencha ExtJS, but the rest is solid stuff.  Django is a beautiful thing, and even if you don't have Python experience it is really easy (and fun!) to learn. </p><br/><br/><p>But as you go you will find some things don't <em>feel</em> right just because of your background, or because of the way it fits with other pieces of your stack, and may find something more suited to your situation.</p><br/><br/><p>I've actually come to the conclusion that these days, the pieces available for a web stack are so well evolved and so well explored that you (almost) can't go wrong -- what is <em>far</em> more important is the application design.  People tend to get wrapped up in technology decisions and lose focus on the app itself.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VARIABL REFERENC BEFOR ASSIGN
    </pattern>
    <template>
<![CDATA[<p>This is what is happening:</p><br/><br/><ol><br/><li>The <code>if</code> block is not being entered.</li><br/><li>The <code>form</code> variable is not defined.</li><br/><li>You then attempt to refer to the <code>form</code> variable in the <code>return</code> statement.</li><br/></ol><br/><br/><p>As to how to fix it, that's really for you to decide. What the fix is depends on what you want your code to do in case the request method is not <code>POST</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHELL NO MODUL NAME SET
    </pattern>
    <template>
<![CDATA[<p>This can happen if your root directory name is the same as the name of one of your apps. For example here I have a directory called <code>bar</code> containing a Django project with an app also called <code>bar</code>:</p><br/><br/><pre class="lang-bsh prettyprint-override"><code>Simons-MacBook-Pro ~/temp<br/>$ cd bar<br/><br/>Simons-MacBook-Pro ~/temp/bar<br/>$ ./manage.py shell<br/>Error: Could not import settings 'bar.settings' (Is it on sys.path?): No module named settings<br/><br/>Simons-MacBook-Pro ~/temp/bar<br/>$ ls -l<br/>total 48<br/>-rw-r--r--  1 simon  staff     0 25 Oct 10:46 __init__.py<br/>-rw-r--r--  1 simon  staff   130 25 Oct 10:46 __init__.pyc<br/>drwxr-xr-x  7 simon  staff   238 25 Oct 10:46 bar<br/>-rwxr-xr-x  1 simon  staff   503 25 Oct 10:46 manage.py<br/>-rw-r--r--  1 simon  staff  5025 25 Oct 10:46 settings.py<br/>-rw-r--r--  1 simon  staff  2658 25 Oct 10:46 settings.pyc<br/>-rw-r--r--  1 simon  staff   556 25 Oct 10:46 urls.py<br/></code></pre><br/><br/><p>Changing the root directory's name to <code>foo</code> (or anything else other than <code>bar</code>) solves the problem:</p><br/><br/><pre class="lang-bsh prettyprint-override"><code>Simons-MacBook-Pro ~/temp/bar<br/>$ cd ..<br/><br/>Simons-MacBook-Pro ~/temp<br/>$ mv bar foo<br/><br/>Simons-MacBook-Pro ~/temp<br/>$ cd foo<br/><br/>Simons-MacBook-Pro ~/temp/foo<br/>$ ./manage.py shell<br/>Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) <br/>[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin<br/>Type "help", "copyright", "credits" or "license" for more information.<br/>(InteractiveConsole)<br/>&gt;&gt;&gt; <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN UN DECOR PHONE NUMBER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Just one other solution:</p><br/><br/><pre><code>n.phone = "%c%c%c-%c%c%c-%c%c%c%c" % tuple(map(ord, n.phone))<br/></code></pre><br/><br/><p>or</p><br/><br/><pre><code>n.phone = "%s%s%s-%s%s%s-%s%s%s%s" % tuple(n.phone)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT DISPLAY MODEL VERBOSE NAM OBJECT
    </pattern>
    <template>
<![CDATA[<p>For accessing it in your template, you've probably noticed by now that Django doesn't let you use underscore prefixes to access attributes from templates. Thus, the easiest way to access the verbose name for any given object without having to create a model method on each model would be to just create a template tag:</p><br/><br/><pre><code>@register.simple_tag <br/>def get_verbose_name(object): <br/>    return object._meta.verbose_name<br/></code></pre><br/><br/><p>Unrelated, but you have a bug in your template, in that you are trying to access the _meta attribute on a queryset instead of an object. So your title line should instead look something like:</p><br/><br/><pre><code>{% with objs|first as obj %}<br/>    &lt;div class="title"&gt;{% get_verbose_name obj %}&lt;/div&gt;<br/>{% endwith %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INJECT ON DJANGO APP
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection" rel="nofollow">Take a look at the Django documentation</a>; it may be useful.</p><br/><br/><blockquote><br/>  <p>By using Django's querysets, the resulting SQL will be properly<br/>  escaped by the underlying database driver. However, Django also gives<br/>  developers power to write raw queries or execute custom sql. These<br/>  capabilities should be used sparingly and you should always be careful<br/>  to properly escape any parameters that the user can control. In<br/>  addition, you should exercise caution when using extra().</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM TWITTER DATE TO PYTHON DATETIM DATE
    </pattern>
    <template>
<![CDATA[<p>Writing something like this should convert a twitter date to a timestamp.</p><br/><br/><pre><code>ts = time.strftime('%Y-%m-%d %H:%M:%S', time.strptime(tweet['created_at'],'%a %b %d %H:%M:%S +0000 %Y'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET NEXT ID TO WRITE TO
    </pattern>
    <template>
<![CDATA[<p>When you define your table, the PostgreSQL equivalent to 'auto_increment' is:</p><br/><br/><pre><code>CREATE TABLE foo (<br/>    id    SERIAL,<br/>    ...<br/>);<br/></code></pre><br/><br/><p>If your table is already created (as I suspect it is), you can add this manually:</p><br/><br/><pre><code>CREATE SEQUENCE foo_id_seq;<br/>ALTER TABLE foo ALTER COLUMN id SET DEFAULT nextval('foo_id_seq');<br/></code></pre><br/><br/><p>Note that if you want to stick with the default name that Pg <em>would have given you</em> use the following format for your sequence name:</p><br/><br/><pre><code>&lt;table name&gt;_&lt;column name&gt;_seq<br/></code></pre><br/><br/><p>Thus in my example, <code>foo_id_seq</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIRST 50 WORD OF A TEXT FIELD IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>From <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#truncatewords" rel="nofollow">the documentation</a>:</p><br/><br/><pre><code>{{ news.description|truncatewords:50 }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A PASSWORD FIELD TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>Here is what I did to get things working. I created a custom authentication backend. Note: I'm using the email address as the username.  </p><br/><br/><p>Here is my code:</p><br/><br/><pre><code>from django.db.models import get_model<br/>from django.contrib.auth.models import User<br/>from hashlib import sha1<br/><br/>class MyUserAuthBackend(object):<br/><br/>    def check_legacy_password(self, db_password, supplied_password):<br/>        return constant_time_compare(sha1(supplied_password).hexdigest(), db_password)<br/><br/><br/>    def authenticate(self, username=None, password=None):<br/>        """ Authenticate a user based on email address as the user name. """<br/>        try:<br/>            user = User.objects.get(email=username)<br/><br/>            if '$' not in user.password:<br/>                if self.check_legacy_password(user.password, password):<br/>                    user.set_password(password)<br/>                    user.save()<br/>                    return user<br/>                else:<br/>                    return None<br/><br/>            else:<br/>                if user.check_password(password):<br/>                    return user<br/><br/>        except User.DoesNotExist:<br/>            return None<br/><br/><br/>    def get_user(self, user_id):<br/>        """ Get a User object from the user_id. """<br/>        try:<br/>            return User.objects.get(pk=user_id)<br/>        except User.DoesNotExist:<br/>            return None<br/></code></pre><br/><br/><p>Then I added the following to settings.py:</p><br/><br/><pre><code>AUTHENTICATION_BACKENDS = (<br/>    'my_website.my_app.my_file.MyUserAuthBackend',<br/>)<br/></code></pre><br/><br/><p>The suggestion from @Dougal appears to be for the next release of Django and was not available for me (I'm using 1.3.1). However, it seems like it will be a better solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A THREE WAY CIRCULAR REFER IN SQL ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>Like <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#module-django.db.models.fields.related" rel="nofollow">the docs</a> say, you can use a string to specify the app and model to use in a relation.</p><br/><br/><blockquote><br/>  <p>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MPTT ORDER
    </pattern>
    <template>
<![CDATA[<p>When defining the model you can specify the ordering with "order_insertion_by".</p><br/><br/><p>So something like this:</p><br/><br/><pre><code>class Category(MPTTModel):<br/>    name = models.CharField()<br/>    parent = models.ForeignKey("self", blank=True, null=True, <br/>             related_name="sub_category")<br/><br/>    class MPTTMeta:<br/>        order_insertion_by = ['name']<br/></code></pre><br/><br/><p>Then you can rebuild your database with <code>Category.tree.rebuild()</code> which should respect the ordering specified.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX LOAD MORE PAGIN WITH GROUP
    </pattern>
    <template>
<![CDATA[<p>Why don't you consider adjusting your view logic to limit based on the number of days, rather than the number of messages? This way you can offer a way to control the amount of data returned, but you won't have to rework your presentation layer to use client-side templating or do anything "hackish."</p><br/><br/><p>Alternatively, if this is not an option, the most straightforward and manageable approach seems to be handling all of your grouping on the client-side (e.g., JavaScript templating).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ORM GET OR CR WITH MULTIPL DATABAS
    </pattern>
    <template>
<![CDATA[<p><code>using</code> is a method on the <code>MyModel.objects</code> manager, so you can do </p><br/><br/><pre><code>MyModel.objects.using('my_non_default_database').get_or_create(name="Bob")<br/></code></pre><br/><br/><p>If you have a MyModel instance, you can use the using keyword to specify the database to save to. The <a href="https://docs.djangoproject.com/en/dev/topics/db/multi-db/#selecting-a-database-for-save" rel="nofollow">django docs</a> point out some gotchas.</p><br/><br/><pre><code>my_model = MyModel(name="Bob")<br/>my_model.save(using='my_non_default_database')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD REPLAC FOR PSYCO ( PYTHON C COMPIL )
    </pattern>
    <template>
<![CDATA[<p>You could try using <a href="http://pypy.org/" rel="nofollow">PyPy</a>, which is an implementation of Python in Python. It is a replacement for the standard CPython implementation and boasts large speed increases.</p><br/><br/><p>From its website:</p><br/><br/><blockquote><br/>  <p><strong>Speed:</strong> thanks to its Just-in-Time compiler, Python programs often run<br/>  faster on PyPy. </p><br/>  <br/>  <p><strong>Memory usage:</strong> large, memory-hungry Python programs might end up taking less space than they do in CPython. </p><br/>  <br/>  <p><strong>Compatibility:</strong> PyPy is highly compatible with existing<br/>  python code. It supports ctypes and can run popular python libraries<br/>  like twisted and django.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CLASSONLYMETHOD AND PYTHON CLASSMETHOD
    </pattern>
    <template>
<![CDATA[<p>The best explanation may be the source code itself :</p><br/><br/><pre><code>class classonlymethod(classmethod):<br/>    def __get__(self, instance, owner):<br/>        if instance is not None:<br/>            raise AttributeError("This method is available only on the view class.")<br/>        return super(classonlymethod, self).__get__(instance, owner)<br/></code></pre><br/><br/><p>The difference is that a <code>classmethod</code> can be called on an instance, having the same effect than calling it on the class, but the <code>classonlymethod</code> can only be called on the class.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EASIEST WAY TO MIGRAT A DJANGO PROJECT FROM MYSQL TO POSTGRESQL
    </pattern>
    <template>
<![CDATA[<p>There are several converters for it, for example this one in Ruby: <a href="https://github.com/maxlapshin/mysql2postgres" rel="nofollow">https://github.com/maxlapshin/mysql2postgres</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN AJAX FUNCTION THAT WILL LOAD HTML INTO TWO DIFFER DIV
    </pattern>
    <template>
<![CDATA[<p>Include jquery library in the head of your page.</p><br/><br/><p>Then, this will do the job :</p><br/><br/><pre><code>$(document).ready(function(){   <br/>    $.get("friend_reviews.html",function(data){     <br/>            $('#load-friends').html(data);<br/>      });<br/>    $.get("global_reviews.html",function(data){     <br/>            $('#load-global').html(data);<br/>      });<br/>});<br/></code></pre><br/><br/><p>If you want to do it by clicking on the link then you can use following</p><br/><br/><pre><code>// html<br/>&lt;a id="load-more"&gt;Load More&lt;/a&gt; <br/><br/>// Javascript<br/>$(document).ready(function(){<br/>    $('#load-more').click(function(){<br/>    $.get("friend_reviews.html",function(data){     <br/>            $('#load-friends').html(data);<br/>      });<br/>    $.get("global_reviews.html",function(data){     <br/>            $('#load-global').html(data);<br/>      });<br/>                                   });<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM AND BOOTSTRAP CSS CLASS AND DIV
    </pattern>
    <template>
<![CDATA[<p>You could check out <a href="https://github.com/tzangms/django-bootstrap-form" rel="nofollow">https://github.com/tzangms/django-bootstrap-form</a> and/or <a href="https://github.com/earle/django-bootstrap" rel="nofollow">https://github.com/earle/django-bootstrap</a></p><br/><br/><p>Do let us know which one you end up using and why!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DATE TIME SET TO MIDNIGHT
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>import datetime<br/>pub = lastItem.pub_date<br/>end_date = datetime.datetime(pub.year, pub.month, pub.day)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CSRF TOKEN
    </pattern>
    <template>
<![CDATA[<p>You are not passing the csrf token with <strong>POST</strong>. Try doing what I have done in <em>data</em>. That is to fetch the csrf token (or your own method) and pass it in your arguments.</p><br/><br/><pre><code>                $.ajax({<br/>                        url : url,<br/>                        type: "POST",<br/>                        data : {csrfmiddlewaretoken: document.getElementsByName('csrfmiddlewaretoken')[0].value},<br/>                        dataType : "json",<br/>                        success: function( data ){<br/>                            // do something<br/>                        }<br/>                    });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL ON MAC OS X LION 10.7.2 WITH PIP INSTAL
    </pattern>
    <template>
<![CDATA[<p>Are you sure you have actually run the Xcode installer (usually found in <code>/Applications</code>)?  Downloading it from the Mac App Store doesn't automatically run the installer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL INSTAL WITH PIP DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>You get this error if PIL is compiled without jpeg support. I also got this when the destination directory was not writeable.</p><br/><br/><p>Once PIL has compiled, if you read </p><br/><br/><blockquote><br/>  <p>JPEG support not available</p><br/></blockquote><br/><br/><p>the library for handling JPEG files, or part of it, is missing. Fix this just installing the library (in my case it was libjpeg62-dev) and run pip again, maybe inside a virtualenv. If this is not enough, probably your system has some more quirk. Look at <a href="http://ubuntuforums.org/showthread.php?t=1751455" rel="nofollow">this post</a> (ubuntuforums) for the fix.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FABRIC SUDO U
    </pattern>
    <template>
<![CDATA[<p>Judging from the <a href="http://docs.fabfile.org/en/1.3.3/api/core/operations.html?highlight=sudo#fabric.operations.sudo">documentation</a>:</p><br/><br/><pre><code>sudo('python manage.py collectstatic --noinput', user='www-data')<br/></code></pre><br/><br/><p>HTH!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ZIPEXTFIL TO DJANGO FILE
    </pattern>
    <template>
<![CDATA[<p>Without knowing to much about Django, i can tell you to take a look at the "io" package.<br/>You could do something like:</p><br/><br/><pre><code>from zipfile import ZipFile<br/>from io import StringIO<br/>zname,zipextfile = 'zipcontainer.zip', 'file_in_archive'<br/>istream = ZipFile(zname).open(zipextfile)<br/>ostream = StringIO(istream.read())<br/></code></pre><br/><br/><p>And then do whatever you would like to do with your "virtual" ostream Stream/File.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM OF DJANGO DB QUERI
    </pattern>
    <template>
<![CDATA[<p>If <a href="https://docs.djangoproject.com/en/dev/topics/cache/#the-low-level-cache-api" rel="nofollow">caching</a> is acceptable it always should be used. Something like:</p><br/><br/><pre><code>from django.core.cache import cache<br/><br/>cached = cache.get('temp_entries')<br/>if cached:<br/>    result = cached <br/>else:<br/>    result = Temp_entry.objects.filter(sensor=49).order_by('dateTime').reverse().values_list()[:300]<br/>    cache.set('temp_entries', result, 60*20)  # 20 min<br/></code></pre><br/><br/><p>Also you can set <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#db-index" rel="nofollow">db_indexes</a> for the appropriate columns</p><br/><br/><pre><code>class Temp_entry(models.Model):<br/>    dateTime = models.IntegerField(db_index=True) #datetime<br/>    sensor = models.IntegerField(db_index=True)   # id of sensor<br/>    temp = models.IntegerField()     # temp as temp in Kelvin * 100<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM FIELD S NAME ATTR
    </pattern>
    <template>
<![CDATA[<p>This is a pretty horrible abuse of the API, but there is a form method called <code>add_prefix</code> that is called to determine what the HTML name of each field should be, taking into account the form's prefix if any. You could override that so that it looks up the field name in a dictionary somewhere and returns the name you want - not forgetting to preserve the existing prefix behaviour:</p><br/><br/><pre><code>FIELD_NAME_MAPPING = {<br/>    'field1': 'html_field1',<br/>    'field2': 'html_field2'<br/>}<br/><br/>class MyForm(forms.ModelForm):<br/>    def add_prefix(self, field_name):<br/>        # look up field name; return original if not found<br/>        field_name = FIELD_NAME_MAPPING.get(field_name, field_name)<br/>        return super(MyForm, self).add_prefix(field_name)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEARN DJANGO WITHOUT INITI KNOWLEDG OF PYTHON POSSIBL
    </pattern>
    <template>
<![CDATA[<p>No.  You'll be writing Python code.  In Python.   You'll have to learn Python.</p><br/><br/><p>A little bit of your project will be CSS, JavaScript and HTML with template tags inserted.</p><br/><br/><p>Most of your project will be Python.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK DOE YOUTUB USE
    </pattern>
    <template>
<![CDATA[<p>Presumably this is their stack - </p><br/><br/><ol><br/><li><a href="http://www.apache.org/" rel="nofollow">Apache</a></li><br/><li><a href="http://python.org/" rel="nofollow">Python</a></li><br/><li><a href="http://www.suse.com/" rel="nofollow">Linux Suse</a></li><br/><li><a href="http://www.mysql.com/" rel="nofollow">MySQL</a></li><br/><li><a href="http://psyco.sourceforge.net/" rel="nofollow">Psyco</a> - dynamic python-C compiler</li><br/><li><a href="http://www.lighttpd.net/" rel="nofollow">lighttpd</a> - for video instead of apache</li><br/></ol><br/><br/><p>According to <a href="http://highscalability.com/youtube-architecture" rel="nofollow">them</a>. But most of these companies keep it a secret what exactly they use. Even to date its not clear what kind of webservers Google uses...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST NO DATA IN TEMPORARI DATABAS FILE
    </pattern>
    <template>
<![CDATA[<p>I found a way, but as I also messed with hdparm (with -F or -W 0/1), i don't know if it will work for you. I did reboot and re-try to make sure thought. Also, this test does <strong>not</strong> have SpatiaLite but as you said this is probably irrelevant.</p><br/><br/><p>Anyway, we need 2 screens to reproduce this, <strong>screen0 runs the tests</strong> and <strong>screen1 is an sh shell</strong> to work with will screen0's process is paused.</p><br/><br/><p><strong>Start the test</strong> (screen0):</p><br/><br/><pre><code>&gt;&gt;&gt; ./manage.py test testapp<br/>Creating test database for alias 'default'...<br/>Destroying old test database 'default'...<br/>Type 'yes' if you would like to try deleting the test database 'db_test.sqlite', or 'no' to cancel: yes<br/>--Return--<br/>None<br/>&gt; /home/jpic/testproject/testapp/tests.py(16)testSomething()<br/>     14 <br/>     15     def testSomething(self):<br/>---&gt; 16         import ipdb; ipdb.set_trace()<br/></code></pre><br/><br/><p><strong>Check the size of the created test database file</strong>, (screen1):</p><br/><br/><pre><code>&lt;&lt;&lt; 18:00.39 Mon Feb 20 2012!~/testproject <br/>&lt;&lt;&lt; jpic@germaine!10004 env<br/>&gt;&gt;&gt; ls -l db_test.sqlite<br/>-rw-r--r-- 1 jpic jpic 49152 2012-02-20 18:00 db_test.sqlite<br/></code></pre><br/><br/><p><strong>Run PRAGMA SYNCHRONOUS sql command from python</strong> (screen0):</p><br/><br/><pre><code>ipdb&gt; from django.db import connection; cursor = connection.cursor()<br/>ipdb&gt; cursor.execute("PRAGMA SYNCHRONOUS")<br/>&lt;django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x294f348&gt;<br/>ipdb&gt; <br/></code></pre><br/><br/><p><strong>Check if the size of the database file increased</strong> (screen1):</p><br/><br/><pre><code>&lt;&lt;&lt; 18:00.42 Mon Feb 20 2012!~/testproject <br/>&lt;&lt;&lt; jpic@germaine!10005 env<br/>&gt;&gt;&gt; ls -l db_test.sqlite<br/>-rw-r--r-- 1 jpic jpic 272384 2012-02-20 18:00 db_test.sqlite<br/></code></pre><br/><br/><p><strong>Data has been written to the file.</strong> </p><br/><br/><p>It doesn't make much sense to me because apparently <code>PRAGMA SYNCHRONOUS</code> alone <strong><a href="http://www.sqlite.org/pragma.html#pragma_synchronous" rel="nofollow">should just query for the value</a></strong> (in my case: 2/FULL). But in practicee, it writes to disk. Note that if you haven't 2 (FULL) then you should set it to 2: <code>PRAGMA SYNCHRONOUS 2</code>.</p><br/><br/><p>Now, I can't say <strong>what</strong> was written (was it fully written ?) because I can't get my hands on the test database: if i run <code>sqlite db_test.sqlite</code> in screen1 to get a client on the test database: I can't run any command (nor a select, nor a .dump) because "SQL error: database is locked". But, I guess that's your problem now B)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL RECURS IMPORT HOW TO RESOLV
    </pattern>
    <template>
<![CDATA[<p>Two ways:</p><br/><br/><ol><br/><li>To import a model inside a method (as @YujiTomita suggested).</li><br/><li><p>To use <code>get_model</code> function from <code>django.db.models</code> which is designed for lazy model imports.:</p><br/><br/><pre><code>project_phase = get_model('core', 'project_phase')<br/></code></pre></li><br/></ol><br/><br/><p>I prefer the second one, but both methods are ok.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN A DJANGO PROJECT ON AW
    </pattern>
    <template>
<![CDATA[<p>It depends on your configuration. We are using the following stack for our environment on Rackspace, but you can setup the same thing on AWS with EC2 instances.</p><br/><br/><ul><br/><li>Ubuntu 11.04</li><br/><li>Varnish (in memory cache) to avoid disk seeks</li><br/><li>NginX to server static content</li><br/><li>Apache to server dynamic content (MOD-WSGI)</li><br/><li>Python 2.7.2 with Django</li><br/><li>Jenkins for our continuous builds</li><br/><li>GIT for version control </li><br/><li>Fabric for the deployment.</li><br/></ul><br/><br/><p>So the way it works is that a GIT push to the origin repository is being polled by Jenkins. Jenkins then pulls the changes down from the origin. Builds a Python Egg, runs Unit tests, uses Fabric to deploy this egg to the environments necessary and reloads the Apache config to make sure the forked Apache processes are picking up the new Python egg.</p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR NO MODUL NAME DJANGO
    </pattern>
    <template>
<![CDATA[<p>To check your path, you can use the following code:</p><br/><br/><pre><code>import sys<br/>print sys.path<br/></code></pre><br/><br/><p>If you already know where django is installed, it should be easy to test if the desired directory is in your path with <code>directory in sys.path</code>.</p><br/><br/><p>Regarding where your <code>PYTHONPATH</code> is defined. Note that it's an environment variable, so you can check its value (if defined) with: <code>echo $PYTHONPATH</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT SERV DJANGO ADMIN STATIC FILE
    </pattern>
    <template>
<![CDATA[<p>I think you should change:</p><br/><br/><pre><code>Alias /media/ "/usr/lib/python2.6/site-packages/django/contrib/admin/media"<br/></code></pre><br/><br/><p>to:</p><br/><br/><pre><code>Alias /static/admin/ "/usr/lib/python2.6/site-packages/django/contrib/admin/media"<br/></code></pre><br/><br/><p>Because you have:</p><br/><br/><pre><code>ADMIN_MEDIA_PREFIX = '/static/admin/'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLASK OR RUBI ON RAIL FOR A VERI BIG PROJECT
    </pattern>
    <template>
<![CDATA[<ul><br/><li>Start with what you know that best.</li><br/><li>Micro frameworks are going to be a pain for very large projects</li><br/><li>Jinja is a nice template engine and can make life simpler, I am not<br/>sure if it has huge advantage over Django's templates.  But if you are familar with Jinja go for it.</li><br/><li>It looks like you don't like Django ORM api.  If you have the time and budget to<br/>learn and understand the internals of the Django or Rails they are<br/>definitely a good choice.</li><br/><li>I would advice to keep the variable to minimum. If you are dealing<br/>with a large project, you need to time to deal with business logic<br/>and infrastructure should be least of your concerns.</li><br/><li>I think major issue is not about the frameworks, your ability to<br/>deliver the features on time.  And both frameworks give the tools to<br/>do that.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPORTLAB USE DRAW OBJECT TO CREAT PDF AND RETURN VIA HTTPRESPONS
    </pattern>
    <template>
<![CDATA[<p>it turns out there is a function in renderPDF:</p><br/><br/><p>renderPDF.draw(drawing, canvas, x, y)<br/>which can render drawing() object in the given canvas.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINK TO DJANGO ADMIN PAGE
    </pattern>
    <template>
<![CDATA[<p>There are many ways to store the last visited non-admin url in request.session. For example, a middleware:</p><br/><br/><pre><code>import re<br/><br/>class LastSiteUrl(object):<br/>    def is_admin_url(self, url):<br/>        return re.search('^(http:\/\/.*){0,1}\/admin\/', url) is not None<br/><br/>    def process_request(self, request):<br/>        if self.is_admin_url(request.path) and \<br/>            not self.is_admin_url(request.META['HTTP_REFERER']):<br/>            request.session['last_site_url'] = request.META['HTTP_REFERER']<br/></code></pre><br/><br/><p>Then override the template:</p><br/><br/><ol><br/><li><p><strong>Store the last non admin url in request.session</strong>, e.g. put the above class in <code>yourproject/middleware.py</code>, add to <code>settings.MIDDLEWARE_CLASSES</code>: <code>middleware.LastSiteUrl</code></p></li><br/><li><p><strong>Prepare the admin base site template for overriding</strong>, copy <code>django/contrib/admin/templates/admin/base_site.html</code> to <code>yourproject/templates/admin/base_site.html</code></p></li><br/><li><p><strong>Link to request.session.last_site_url</strong>, e.g. in <code>yourproject/templates/admin/base_site.html</code>, find <code>{% block branding %}</code>, before the H1 tag of this block, add an HTML link to <code>{{ request.session.last_site_url }}</code>.</p></li><br/></ol><br/><br/><p>It should look like that:</p><br/><br/><pre><code>{% block branding %}<br/>    {% if request.session.last_site_url %}<br/>        &lt;a href="{{ request.session.last_site_url }}"&gt;back to site&lt;/a&gt;<br/>    {% endif %}<br/>    &lt;h1 id="site-name"&gt;{% trans 'Django administration' %}&lt;/h1&gt;<br/>{% endblock %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DYNAM IMAG IN A WEB PAGE USE POST
    </pattern>
    <template>
<![CDATA[<p>Store the text somewhere (e.g. a database) and then pass through the primary key.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N AUTO NOW DATETIMEFIELD IN A PARENT MODEL W DJANGO
    </pattern>
    <template>
<![CDATA[<p>You would also need to then save the message.  Then it that should work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA TO AN EXIST MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You will want to wire your URL to the Django <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-create-update-create-object">create_object generic view</a>, and pass it either "model" (the model you want to create) or "form_class" (a customized <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#topics-forms-modelforms">ModelForm</a> class).  There are a number of <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-create-update-create-object">other arguments</a> you can also pass to override default behaviors.</p><br/><br/><p>Sample URLconf for the simplest case:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from django.views.generic.create_update import create_object<br/><br/>from my_products_app.models import Product<br/><br/>urlpatterns = patterns('',<br/>    url(r'^admin/products/add/$', create_object, {'model': Product}))<br/></code></pre><br/><br/><p>Your template will get the context variable "form", which you just need to wrap in a &lt;form> tag and add a submit button.  The simplest working template (by default should go in "my_products_app/product_form.html"):</p><br/><br/><pre><code>&lt;form action="." method="POST"&gt;<br/>  {{ form }}<br/>  &lt;input type="submit" name="submit" value="add"&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Note that your Product model must have a get_absolute_url method, or else you must pass in the post_save_redirect parameter to the view.  Otherwise it won't know where to redirect to after save.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXIST LIBRARI FOR WEB APP SIGN UP SIGN IN MANAG PASSWORD
    </pattern>
    <template>
<![CDATA[<p>Django has a standard User data model which is used extensively by Django applications.  There are also many apps available to ease user management, such as <a href="http://www.bitbucket.org/ubernostrum/django-registration/wiki/Home" rel="nofollow">django-registration</a>.</p><br/><br/><p>Rails has many more options than Django, but has no standard User model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND SUBMIT A DYNAM NUMBER OF OBJECT IN A FORM WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/topics/forms/formsets/" rel="nofollow">Formsets</a>!</p><br/><br/><p>Also, the equivalent for forms generated directly models are <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#id1" rel="nofollow">model formsets</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON ENCOD STRING USE JQUERI
    </pattern>
    <template>
<![CDATA[<p>Looks like <a href="http://www.json.org/json2.js" rel="nofollow">JSON.parse</a> will do it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT AND THEN HIDE A JQUERI TIME ENTRI USE TWO ONREADI ( ) HANDLER AND IT LEAD TO CRITIC ERROR IN IE7 AND FIREFOX
    </pattern>
    <template>
<![CDATA[<p>In the second ready handler, include a call to ".show()" before calling timeEntry, then ".hide()" it again afterwards.</p><br/><br/><p>That said, it seems odd that timeEntry would care if it was visible or not. It really shouldn't matter, so I would guess it's a bug in timeEntry.</p><br/><br/><p>EDIT: If you don't know in the second handler if it should be hidden or not, just query the state of the element before hand with "$(id).is(':hidden')" and behave accordingly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRA DATA IN THE DJANGO SERIAL RESPONS
    </pattern>
    <template>
<![CDATA[<p>I found out that the simplest thing was to not use the serializer at all. I dont know why I didnt think of this before, but i just used a generic object list view and changed the mimetype to text/javascript and made a JSON template insted of a html template.</p><br/><br/><p>Very simple, and that way i managed to get all the data i wanted into the JSON response. This way you can add everything that you can add to a html template into a JSON response, even paginating.</p><br/><br/><p>Example extraction of the view i created:</p><br/><br/><p><code><br/>    return object_list(request, queryset=object_list, template_name='search/results.js', template_object_name='result', paginate_by=12, mimetype='text/javascript')<br/></code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A METHOD WITHIN A DJANGO MODEL TO RETRIEV RELAT OBJECT
    </pattern>
    <template>
<![CDATA[<p>You get this for free:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects</a></p><br/><br/><p>By default, you can access a Manager which gives you access to related items through a <code>RELATEDCLASSNAME_set</code> attribute:</p><br/><br/><pre><code>some_foo.bar_set.all()<br/></code></pre><br/><br/><p>Or you can use the <code>related_name</code> argument to <code>ForeignKey</code> to specify the attribute which should hold the reverse relationship Manager:</p><br/><br/><pre><code>class Foo(models.Model):<br/>     name = models.CharField()<br/><br/>class Bar(models.Model):<br/>     title = models.CharField()<br/>     foo = models.ForeignKey(Foo, related_name='bars')<br/><br/>...<br/><br/>some_foo.bars.all()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV STATIC WEB PAGE FROM WITHIN A DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Have you looked at <a href="http://docs.djangoproject.com/en/dev/ref/contrib/flatpages/#ref-contrib-flatpages" rel="nofollow">flat pages</a> in Django?  It probably does everything you're looking for.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A TAG WITHIN A URL TEMPLATETAG IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Maybe you could try passing the final URL to the template, instead?</p><br/><br/><p>Something like this:</p><br/><br/><pre><code>from django.core.urlresolvers import reverse<br/><br/>def home_page_view(request):<br/>    NUP={"HOMEPAGE": reverse('named-url-pattern-string-for-my-home-page-view')}    <br/>    variables = RequestContext(request, {'NUP':NUP})<br/>    return render_to_response('home_page.html', variables)<br/></code></pre><br/><br/><p>Then in the template, the <code>NUP.HOMEPAGE</code> should the the url itself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERRID VERBOSE NAM FOR AUTOFIELD WITHOUT DROP THE MODEL
    </pattern>
    <template>
<![CDATA[<p>Hmm... and what about explicitly write <em>id</em> field in the model definition? Like this for example:</p><br/><br/><pre><code>class Entry(models.Model):<br/>   id = models.AutoField(verbose_name="custom name")<br/>   # and other fields...<br/></code></pre><br/><br/><p>It doesn't require any underlying database changes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DO AUTO ADMIN FOR MY PHP APP S EXIST SCHEMA
    </pattern>
    <template>
<![CDATA[<p>You can create django site that is linked to an existing database by using manage.py's <a href="http://docs.djangoproject.com/en/dev/ref/django-admin/#inspectdb" rel="nofollow">inspectdb</a> command, and then add admin functionality to the resulting models.</p><br/><br/><p>I haven't tried this, but I used inspectdb output to access some phpbb tables via Django and it seems to work fine.</p><br/><br/><p>You can encouncer problems if the app's own admin interface does more than simple CRUD (such as updating denormalized fields in other tables and so on). It may be less pain to improve current admin interface than to reproduce these things in the new one (not to mention what would happen if you needed to change their logic in the future).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMUL A MAIL LIST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.apps.ietf.org/rfc/rfc2919.html" rel="nofollow">RFC 2919</a> has some info and more references on this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTHENT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Logged in twice is ambiguous over HTTP.  There's no "disconnecting" signal that's sent.  You can frustrate people if you're not careful.</p><br/><br/><p>If I shut down my browser and drop the cookies -- accidentally -- I might be prevented from logging in again.  </p><br/><br/><p>How would the server know it was me trying to re-login vs. me trying to login twice?  </p><br/><br/><p>You can try things like checking the IP address.  And what if the accidental disconnect was my router crashing, releasing my DHCP lease?  Now I'm trying to re-login, but I have a new address and no established cookie.  I'm not trying to create a second session, I'm  just trying to get back on after my current session got disconnected.</p><br/><br/><p>the point is that there's no well-established rule for "single session" that can be installed in a framework. You have to make up a rule appropriate to your application and figure out how to enforce it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      8 LATIN 1 CONVERS ISSU PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Your first error 'chr() arg not in range(256)' probably means you have underflowed the value, because chr cannot take negative numbers. I don't know what the encryption algorithm is supposed to do when the inputcounter + 33 is more than the actual character representation, you'll have to check what to do in that case.</p><br/><br/><p>About the second error. you must decode() and not encode() a regular string object to get a proper representation of your data. encode() takes a unicode object (those starting with u') and generates a regular string to be output or written to a file. decode() takes a string object and generate a unicode object with the corresponding code points. This is done with the unicode() call when generated from a string object, you could also call a.decode('latin-1') instead.</p><br/><br/><pre><code>&gt;&gt;&gt; a = '\222\222\223\225'<br/>&gt;&gt;&gt; u = unicode(a,'latin-1')<br/>&gt;&gt;&gt; u<br/>u'\x92\x92\x93\x95'<br/>&gt;&gt;&gt; print u.encode('utf-8')<br/>ÂÂÂÂ<br/>&gt;&gt;&gt; print u.encode('utf-16')<br/>ÿþ<br/>&gt;&gt;&gt; print u.encode('latin-1')<br/><br/>&gt;&gt;&gt; for c in u:<br/>...   print chr(ord(c) - 3 - 0 -30)<br/>...<br/>q<br/>q<br/>r<br/>t<br/>&gt;&gt;&gt; for c in u:<br/>...   print chr(ord(c) - 3 -200 -30)<br/>...<br/>Traceback (most recent call last):<br/>  File "&lt;stdin&gt;", line 2, in &lt;module&gt;<br/>ValueError: chr() arg not in range(256)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM HOW TO NOT VALID
    </pattern>
    <template>
<![CDATA[<p>Form constructor has <code>initial</code> param that allows to provide default values for fields.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( OR FORMSET ) TO HANDL MULTIPL TABL ROW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>"At first, I thought this was what formsets were for, but I can't see any way to automatically iterate over the contents of a database table to produce items to go in the form, if you see what I mean."</p><br/><br/><p>You need to get a queryset.  And you need to provide that queryset to your form as initial data.  See <a href="http://docs.djangoproject.com/en/dev/topics/forms/formsets/#using-initial-data-with-a-formset" rel="nofollow">using initial data with a formset</a> for the code.</p><br/><br/><pre><code>initial = [ list of { dictionaries }, one per form ]<br/></code></pre><br/><br/><p>Interestingly, this is a direct feature of the model API through the <code>values</code> method of a queryset.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY ACCESS IN SAVE ( ) FUNCTION
    </pattern>
    <template>
<![CDATA[<p>You should be able to do something like the following:</p><br/><br/><pre><code>def save(self, **kwargs):<br/>    super(Publisher, self).save(**kwargs)<br/><br/>    for item in self.item_set.all():<br/>        item.code = "%s - whatever" % item.code<br/></code></pre><br/><br/><p>I don't really like what you're doing here, this isn't a good way to relate <code>Item</code> to <code>Publisher</code>.  What is it you're after in the end?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRIVIAL CUSTOM FIELD TYPE IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>I'd do this with a subclass of Django's PositiveIntegerField:</p><br/><br/><pre><code>from django.db import models<br/><br/>class Card(object):<br/>    """The ''Card'' class you described."""<br/>    ...<br/><br/>class CardField(models.PositiveIntegerField):<br/>    __metaclass__ = models.SubfieldBase<br/><br/>    def get_db_prep_value(self, value):<br/>        """Return the ''int'' equivalent of ''value''."""<br/>        if value is None: return None<br/>        try:<br/>            int_value = value.as_number()<br/>        except AttributeError:<br/>            int_value = int(value)<br/>        return int_value<br/><br/>    def to_python(self, value):<br/>        """Return the ''Card'' equivalent of ''value''."""<br/>        if value is None or isinstance(value, Card):<br/>            return value<br/>        return Card(int(value))<br/></code></pre><br/><br/><p>The <code>get_db_prep_value</code> method is responsible for converting <code>value</code> into something suitable for interacting with the database, in this case either an <code>int</code> or <code>None</code>.</p><br/><br/><p>The <code>to_python</code> method does the reverse, converting <code>value</code> into a <code>Card</code>.  Just like before, you'll need to handle the possibility of <code>None</code> as a value.  Using the <code>SubfieldBase</code> ensures that <code>to_python</code> is called every time a value is assigned to the field.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILMSTRIP IMAG IN PYTHON FROM A FOLDER OF IMAG
    </pattern>
    <template>
<![CDATA[<p>Here is a function that wraps <strong>the contact sheet</strong> function <a href="http://stackoverflow.com/users/10661/slott">S.Lott</a> mentioned.</p><br/><br/><pre><code>#!/usr/bin/env python<br/><br/>import os, os.path<br/>from contactsheet import make_contact_sheet<br/><br/>def make_film_strip(fnames,<br/>                   (photow,photoh),<br/>                   (marl,mart,marr,marb),<br/>                   padding):<br/>    return make_contact_sheet(fnames,<br/>                              (1, len(fnames)),<br/>                              (photow,photoh),<br/>                              (marl,mart,marr,marb),<br/>                              padding)<br/></code></pre><br/><br/><p>It is assuming the <a href="http://code.activestate.com/recipes/412982/" rel="nofollow">recipe</a> is saved as <code>contactsheet.py</code>. Usage is:</p><br/><br/><pre><code>fstrip = filmstrip.make_film_strip(filmstrip.fnames, (120, 120), (0,0,0,0), 0)<br/>fstrip.save('/path/to/file.format')<br/></code></pre><br/><br/><p>Tested.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMBER OF RECORD THAT REFER A PARTICULAR FOREIGN KEY IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>Comments.objects.filter(post=post).count()<br/></code></pre><br/><br/><p>or:</p><br/><br/><pre><code>post.comment_set.count()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML PAGE WHICH RENDER PROPERLI IN WINDOW WHILE STAY IN LINUX
    </pattern>
    <template>
<![CDATA[<p>You could use a virtual machine to host your Windows installation, if you have a Windows license (which I'm guessing you do by the fact you reboot into Windows), and the RAM to keep a virtualized instance of XP or whatever Windows you use to test.</p><br/><br/><p>Using VMWare or VirtualBox you could set up a shared folder so both the virtual instance and Linux can look at the same file to test the website locally.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N AJAX CALLBACK REALIZ THAT A USER S AUTHENT SESSION HA TIME OUT
    </pattern>
    <template>
<![CDATA[<p>One way would be to have a script that just pings a page to see whether or not it's still logged in, but this would increase the number of AJAX requests you'd have to do.</p><br/><br/><p>Another option is to have the <code>complete</code> function of <code>$.ajax()</code> check the HTTP status code on the XMLHttpRequest object that is passed in:</p><br/><br/><pre><code>$.ajax({..., complete = function(xhr, textStatus){<br/>    if(xhr.status &gt; 300 &amp;&amp; xhr.status &lt; 400) //you got a redirect<br/>        window.location.href = '/login/';<br/>    ...<br/>    }, ...);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY FIELD IN A DJANGO FORM READ ONLI AND STILL ENABL THE FORM TO BE SUBMIT
    </pattern>
    <template>
<![CDATA[<p>I don't know the Django or Python syntax, however, an input field of type="hidden" might be what you're looking for.  If you wanted to still display the value using a disabled field, you could do that too, and rely on the hidden field for the actual value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOFTWAR FOR INTRANET CM DJANGO OR JOOMLA
    </pattern>
    <template>
<![CDATA[<p>Django isn't a CMS. If you want to build an application then you'd use Django (by the sound of your post you understand that though). If you just want to be able to edit/store content and have permissions for your users - a CMS would be the way to go. I really don't know anything about Joomla though. It should be easy enough to mock up a hack to do whatever authentication you need - even if that's just a POST directly to the server.</p><br/><br/><p>Django will take a long time to get up to the point where you're using it for the purposes you mention. The admin interface will need to be used (or you're building a CMS from scratch) - which means creating models to model the content you already own. Then you have to customise each model page, and 'plug in' whatever authentication system you want.</p><br/><br/><p>Lot of work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER IMAG FIELD ONTO A MODELFORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You don't have to use the Image class. As <a href="http://stackoverflow.com/users/30300/dzpm">DZPM</a> suggested, convert the image field to an ImageField. You also need to make some changes to the view.</p><br/><br/><p>Instead of using an upload handler, you can create a Image object with the uploaded data and attach the Image object to the Room object.</p><br/><br/><p>To save the Image object you need to do something like this in the view:</p><br/><br/><pre><code>from django.core.files.base import ContentFile<br/><br/>if request.FILES.has_key('image_1'):<br/>    image_obj = Image()<br/>    image_obj.file.save(request.FILES['image_1'].name,\<br/>                        ContentFile(request.FILES['image_1'].read()))<br/>    image_obj.save()<br/>    room_obj.image_set.create(image_obj)<br/>    room_obj.save()<br/></code></pre><br/><br/><p>Also, I think instead of the GenericRelation, you should use a ManyToManyField, in which case the syntax for adding an Image to a Room will change slightly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NULL DATE IN MYSQL DJANGO
    </pattern>
    <template>
<![CDATA[<p>When MySQL is running in <a href="http://dev.mysql.com/doc/refman/5.1/en/server-sql-mode.html#sqlmode%5Fallow%5Finvalid%5Fdates" rel="nofollow">ALLOW_INVALID_DATES</a> mode it doesn't perform any validation checking on the input so you can store invalid dates. This is an extension to standard SQL and because Django is cross-database compatible it doesn't support this. Also, Django converts dates into Python date objects which also don't support partial dates.</p><br/><br/><p>Your best bet is to either split the column in to three or to store the date as text and process it yourself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHAIN VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<ol><br/><li>Write a wrapper which uses the URL to look up the appropriate flat page object.</li><br/><li>From your wrapper, call (and return the response from) the contact form view, passing the flat page in the <code>extra_context</code> argument (which is there for, among other things, precisely this sort of use case).</li><br/><li>There is no third step.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SINGL CHILD ROW BASE ON A MAX VALU USE DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>Django 1.1 (currently beta) adds <a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">aggregation</a> support to the database API. Your query can be done like this:</p><br/><br/><pre><code>from django.db.models import Max, F<br/><br/>Contract.objects.annotate(max_price=Max('market__contract__current_price')).filter(current_price=F('max_price')).select_related()<br/></code></pre><br/><br/><p>This generates the following SQL query:</p><br/><br/><pre><code>SELECT contract.id, contract.name, contract.market_id, contract.current_price, MAX(T3.current_price) AS max_price, market.id, market.name<br/>FROM contract LEFT OUTER JOIN market ON (contract.market_id = market.id) LEFT OUTER JOIN contract T3 ON (market.id = T3.market_id)<br/>GROUP BY contract.id, contract.name, contract.market_id, contract.current_price, market.id, market.name<br/>HAVING contract.current_price =  MAX(T3.current_price)<br/></code></pre><br/><br/><p>The API uses an extra join instead of a subquery (like your query does). It is difficult to tell which query is faster, especially without knowing the database system. I suggest that you do some benchmarks and decide.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OF GROOVY GRAIL FOR JAVA
    </pattern>
    <template>
<![CDATA[<p><a href="http://wiki.python.org/jython/DjangoOnJython" rel="nofollow">http://wiki.python.org/jython/DjangoOnJython</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BINARYFIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>I'm assuming if you were writing raw SQL you'd be using a Postgres bytea or a MySQL VARBINARY. There's a <a href="http://code.djangoproject.com/ticket/2417" rel="nofollow">ticket with a patch</a> (marked "needs testing") that purportedly makes a field like this (Ticket 2417: Support for binary type fields (aka: bytea in postgres and VARBINARY in mysql)).  </p><br/><br/><p>Otherwise, you could probably try your hand at writing a <a href="http://docs.djangoproject.com/en/dev/howto/custom-model-fields/" rel="nofollow">custom field type</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH UNSAV MANY TO MANI RELAT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think that using django forms may be the answer, as outlined in <a href="http://docs.djangoproject.com/en/dev/topics/forms/modelforms/" rel="nofollow">this</a> documentation (search for m2m...).</p><br/><br/><p>Edited to add some explanation for other people who might have the same problem:</p><br/><br/><p>say you have a model like this:</p><br/><br/><pre><code>from django.db import models<br/>from django.forms import ModelForm<br/><br/>class Foo(models.Model):<br/>    name = models.CharField(max_length = 30)<br/><br/>class Bar(models.Model):<br/>      foos = models.ManyToManyField(Foo)<br/><br/>  def __unicode__(self):<br/>      return " ".join([x.name for x in foos])<br/></code></pre><br/><br/><p>then you cannot call unicode() on an unsaved Bar object. If you do want to print things out before they will be saved, you have to do this:</p><br/><br/><pre><code>class BarForm(ModelForm):<br/>    class Meta:<br/>        model = Bar<br/><br/>def example():      <br/>    f1 = Foo(name = 'sue')<br/>    f1.save()<br/>    f2 = foo(name = 'wendy')<br/>    f2.save()<br/>    bf = BarForm({'foos' : [f1.id, f2.id]})<br/>    b = bf.save(commit = false)<br/>    # unfortunately, unicode(b) doesn't work before it is saved properly,<br/>    # so we need to do it this way: <br/>    if(not bf.is_valid()):<br/>        print bf.errors<br/>    else:<br/>        for (key, value) in bf.cleaned_data.items():<br/>            print key + " =&gt; " + str(value)<br/></code></pre><br/><br/><p>So, in this case, you have to have saved Foo objects (which you might validate before saving those, using their own form), and before saving the models with many to many keys, you can validate those as well. All without the need to save data too early and mess up the database or dealing with transactions...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE FOR FLEX + PYTHON RUBI WITHOUT A WEB FRAMEWORK ( DJANGO RAIL )
    </pattern>
    <template>
<![CDATA[<p>You can still code against WSGI directly in Python.  If that's the route you want to go, <a href="http://www.python.org/dev/peps/pep-0333/" rel="nofollow">PEP 333</a> is about the only way to go.</p><br/><br/><p>With that said, doing so is a good learning experience, but WSGI wasn't really intended to be used directly.  You don't have to use a full-stack framework like Django if you don't want to.  If you want something more light-weight, might I suggest <a href="http://www.cherrypy.org/" rel="nofollow">CherryPy</a> or <a href="http://webpy.org/" rel="nofollow">web.py</a>?  They're a lot more light-weight than Django is.</p><br/><br/><p>There are other options aside from WSGI, but they'll pretty much all have about the same caveats.  In other words, it can be done, but usually isn't recommended.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ME OR ARE RAIL AND DJANGO DIFFICULT TO INSTAL ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>Yes.  RoR and Django were difficult to install on Vista.</p><br/><br/><p>I apologize for not having specifics, but here's a general recount of my problem and how I overcame it.  Maybe there is something here for you.</p><br/><br/><p>For Python: Your Vista install may have a pre-existing path variable for Python that interferes.  For example, on my HP computer, HP has Python from the factory.  The HP Python path pointed to the HP Python, not the latest that I download for Django.  Check Control Panel-->System-->Advanced System Settings-->Advanced Tab-->Environment Variables-->System Variables, then check what the "PATH" is.  I changed that path to my fresh install of Python, and then everything worked.</p><br/><br/><p>For RoR:  Are you using the one click installer?  I forgot the specifics, but I know right-clicking the 1-Click Installer file and "Run as Administrator" was one of the tricks.</p><br/><br/><p>For RoR and Django:  Consider NOT using MySQL and Postgres, at this time.  Using the default SQLite that comes with the Ruby/Python installers should keep you happy at this stage of the game.  SQLite is good enough for tinkering and doesn't use as many resources as a full stack database.</p><br/><br/><p>Good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE FORMAT FOR AGGREG CALCUL FROM DATABAS WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Run the following in your MySQL database, to create a forwarding function.</p><br/><br/><pre><code>delimiter //<br/><br/>create function strftime ( d date, format varchar(255) )   <br/>   RETURNS varchar(64)<br/>   LANGUAGE SQL<br/>   DETERMINISTIC<br/>   COMMENT 'synonym for date_format'<br/>   return date_format(d, format) ;<br/>//<br/>delimiter ;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI MADE REPEAT INEFFICI
    </pattern>
    <template>
<![CDATA[<p>Does Client 1 have 2 Pets and Client 2 have 1 Pet?</p><br/><br/><p>If so, that would indicate to me that <code>Pet.full_name</code> or something else you're doing in the Pet display loop is trying to access its related Client's details. Django's ORM doesn't use an <a href="http://martinfowler.com/eaaCatalog/identityMap.html" rel="nofollow">identity map</a>, so accessing the Client foreign key from any of your Pet objects would require hitting the database again to retrieve that Client.</p><br/><br/><p>P.S. <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4" rel="nofollow"><code>select_related</code></a> won't have any effect on the data you're using in this scenario as it only follows foreign-key relationships, but the pet-to-client relationship is many-to-one.</p><br/><br/><p><strong>Update:</strong> if you want to avoid having to change the logic in <code>Pet.full_name</code> or having to perform said logic in the template instead for this case, you could alter the way you get a handle on each Client's Pets in order to prefill the ForeignKey cache with for each Pet with its Client:</p><br/><br/><pre><code>class Client(models.Model):<br/>    # ...<br/>    def get_pets(self):<br/>        for pet in self.pets.all():<br/>            setattr(pet, '_client_cache', self)<br/>            yield pet<br/></code></pre><br/><br/><p>...where the <code>'client'</code> part of <code>'_client_cache'</code> is whatever attribute name is used in the Pet class for the ForeignKey to the Pet's Client. This takes advantage of the way Django implements access to ForeignKey-related objects using its <code>SingleRelatedObjectDescriptor</code> class, which looks for this cache attribute before querying the database.</p><br/><br/><p>Resulting template usage:</p><br/><br/><pre><code>{% for pet in client.get_pets %}<br/>...<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE FOR DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>you should be using many-to-many relations as described here:<br/><a href="http://www.djangoproject.com/documentation/models/many_to_many/" rel="nofollow">http://www.djangoproject.com/documentation/models/many_to_many/</a></p><br/><br/><p>Like:</p><br/><br/><pre><code>class Pathology(models.Model):<br/>    pathology = models.CharField(max_length=100)<br/>    publications = models.ManyToManyField(Publication)<br/><br/>class Publication(models.Model):<br/>    pubtitle = models.TextField()<br/></code></pre><br/><br/><p>Then</p><br/><br/><pre><code>def pathology(request):<br/>    pathology_id = request.POST['pathology_id'] <br/>    p = get_object_or_404(Pathology, pk=pathology_id)<br/>    publications = p.publications.all()<br/>    return render_to_response('my_template.html',<br/>                              {'publications':publications},<br/>                              context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>Hope this works, haven't tested it, but you get the idea.</p><br/><br/><p>edit: </p><br/><br/><p>You can also use select_related() if there is no possibility to rename tables and use django's buildin support.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYAMF DJANGO AND PYTHON S PROPERTI FEATUR
    </pattern>
    <template>
<![CDATA[<p>I just received the following response from PyAMF's lead developer.  It's definitely a bug:</p><br/><br/><blockquote><br/>  <p>This is a bug in the way the Django<br/>  adapter handles non models.fields.*<br/>  properties.</p><br/>  <br/>  <p>If I do:</p><br/></blockquote><br/><br/><pre><code>import pyamf<br/><br/>class Book(object):    <br/>def _get_number_of_odd_pages(self):<br/>  return 52<br/><br/>numberOfOddPages = property(_get_number_of_odd_pages)<br/><br/>pyamf.register_class(Book, 'Book')<br/><br/>encoded = pyamf.encode(Book()).getvalue() <br/>print pyamf.decode(encoded).next().numberOfOddPages<br/></code></pre><br/><br/><blockquote><br/>  <p>Then i get the correct values of 52.</p><br/>  <br/>  <p>I have created <a href="http://pyamf.org/ticket/480" rel="nofollow">a ticket</a> for this <br/>  and will look into getting a patch a<br/>  little later.</p><br/>  <br/>  <p>Cheers,</p><br/>  <br/>  <p>Nick</p><br/></blockquote><br/><br/><p><strong>UPDATE</strong>: Nick has fixed this bug and it will be released in PyAMF 0.4.1 (which should be released this weekend).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I NOT DISPATCH A SIGNAL
    </pattern>
    <template>
<![CDATA[<p>A quick and dirty solution would be:</p><br/><br/><pre><code>from django.db.models.signals import post_save<br/>from somewhere_in_my_app import my_post_save_handler<br/><br/>post_save.disconnect(my_post_save_handler)<br/>instance.save()<br/>post_save.connect(my_post_save_handler)<br/></code></pre><br/><br/><p>But otherwise i strongly recommend moving your logic into the <code>save()</code> method of your model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUSPICIOUSOPER ERROR WHILE DELET UPLOAD FILE
    </pattern>
    <template>
<![CDATA[<p>What is your <code>MEDIA_ROOT</code> in <code>settings.py</code>? From the back-trace, it seems you have set your <code>MEDIA_ROOT</code> to <code>/static/</code>.</p><br/><br/><p>This error is coming since Django is trying to access <code>/static/</code> to which it has no access. Put an absolute pathname for <code>MEDIA_ROOT</code> like <code>C:/Documents/static/</code> and give full permissions to Django to access that directory.</p><br/><br/><p>That should solve your problem.</p><br/><br/><p><strong>Addendum</strong>: Since your <code>MEDIA_ROOT</code> seems to be OK, I am guessing that you are using <code>MEDIA_URL</code> for deleting the file instead of <code>MEDIA_ROOT</code>. Indeed, from the error it seems that Django was trying to access the <code>/static/files/8.nzb</code> and was denied access. Clearly, <code>/static/</code> is your <code>MEDIA_URL</code> and not your <code>MEDIA_ROOT</code>. The model methods should never try accessing the files using the <code>MEDIA_URL</code>. I am sure a review of your code will spot the error.</p><br/><br/><p><strong>Update</strong>: I skimmed your code and it seems you are setting <code>File.nzb</code> to <code>%(1)sfiles/%(2)s.nzb' % {'1': settings.MEDIA_URL, '2': self.pk}</code> which uses its <code>MEDIA_URL</code> and then in the <code>delete()</code> method you are calling the <code>delete()</code> method of the super-class of <code>File</code> as <code>super(File, self).delete()</code> which is obviously wrong as it will try deleting <code>File.nzb</code> and will try accessing the file through the <code>MEDIA_URL</code>. Fixing that will get rid of the error. I will leave the exact solution as an exercise to you :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIK FRAMEWORK
    </pattern>
    <template>
<![CDATA[<p>If you're only looking for an alternative because of the hosting aspect of it, I suggest you simply find suitable hosting as opposed to throwing away the framework you like.</p><br/><br/><p>If you are looking for a good Django host, I HIGHLY recommend <a href="http://www.webfaction.com" rel="nofollow">Webfaction</a>.</p><br/><br/><p>If they're not your cup of tea, check out <a href="http://www.djangofriendly.com" rel="nofollow">djangofriendly.com</a>, which has a huge list of good Django hosts.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL GIVE STR OBJECT HA NO ATTRIBUT META ERROR
    </pattern>
    <template>
<![CDATA[<p>Take a look at the following:</p><br/><br/><pre><code>objects= Session.objects.aggregate(Max('date'), Min('date'))<br/>print [ type[o] for o in objects ]<br/>result =  serializers.serialize("json", objects, ensure_ascii=False)<br/></code></pre><br/><br/><p>You might want to just run the above in interactive Python as an experiment.</p><br/><br/><p>What type are your objects?  Is that type serializable?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN INLIN FOREIGN KEY ISSU
    </pattern>
    <template>
<![CDATA[<p>You can't do <a href="http://code.djangoproject.com/ticket/9025" rel="nofollow">"nested" inlines</a> in the Django admin (i.e. you can't have a Quiz with inline Questions, with each inline Question having inline Answers).  So you'll need to lower your sights to just having inline Questions (then if you navigate to view a single Question, it could have inline Answers).</p><br/><br/><p>So your models are fine, but your admin code should look like this:</p><br/><br/><pre><code>class QuestionInline(admin.TabularInline):<br/>    model = Question<br/>    extra = 20<br/><br/>class AnswerInline(admin.TabularInline):<br/>    model = Answer<br/>    extra = 4<br/><br/>class QuestionAdmin(admin.ModelAdmin):<br/>    inlines = [AnswerInline]<br/><br/>class AnswerAdmin(admin.ModelAdmin):<br/>    pass<br/><br/>class QuizAdmin(admin.ModelAdmin):<br/>    inlines = [QuestionInline]<br/></code></pre><br/><br/><p>It doesn't make sense for AnswerAdmin to have an AnswerInline, or QuestionAdmin to have a QuestionInline (unless these were models with a self-referential foreign key).  And QuizAdmin can't have an AnswerInline, because Answer has no foreign key to Quiz.</p><br/><br/><p>If Django did support nested inlines, the logical syntax would be for QuestionInline to accept an "inlines" attribute, which you'd set to [AnswerInline].  But it doesn't.</p><br/><br/><p>Also note that "extra = 20" means you'll have 20 blank Question forms at the bottom of every Quiz, every time you load it up (even if it already has 20 actual Questions).  Maybe that's what you want - makes for a long page, but makes it easy to add lots of questions at once.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EAS EXECUT RAW SQL WITH DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>Since the issue is "manually converting query results into objects," the simplest solution is often to see if your custom SQL can fit into an ORM .extra() call rather than being a pure-SQL query.  Often it can, and then you let the ORM do all the work of building up objects as usual.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LABEL AND TRANSLAT MODEL DESIGN
    </pattern>
    <template>
<![CDATA[<p>I'd much prefer to add a field per language than a new model instance per language.  It does require schema alteration when you add a new language, but that isn't hard, and how often do you expect to add languages?  In the meantime, it'll give you better database performance (no added joins or indexes) and you don't have to muck up your query logic with translation stuff; keep it all in the templates where it belongs.</p><br/><br/><p>Even better, use a reusable app like <a href="http://code.google.com/p/django-transmeta/" rel="nofollow">django-transmeta</a> or <a href="http://code.google.com/p/django-modeltranslation/" rel="nofollow">django-modeltranslation</a> that makes this stupid simple and almost completely transparent.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CUSTOM AUTHENT BACKEND NEED TO TAKE A PASSWORD
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://docs.djangoproject.com/en/dev/topics/auth/" rel="nofollow">Django docs</a> say this:</p><br/><br/><blockquote><br/>  <p>Either way, authenticate should check<br/>  the credentials it gets, and it should<br/>  return a User object that matches<br/>  those credentials, if the credentials<br/>  are valid. If they're not valid, it<br/>  should return None.</p><br/></blockquote><br/><br/><p>The 'Either way' refers to whether the authenticate() method takes a username/password combination, or just a token. Your scenario falls between those two, so I'd think that the 'best' answer would be to write your authenticate() to take a username and a login key, and return the right User or None as appropriate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN A SCRIPT FROM ADMIN
    </pattern>
    <template>
<![CDATA[<p>But a link has to go to a URL, so I think what you mean is you want to have a view function that is only visible in the admin interface, and that view function runs a script?</p><br/><br/><p>If so, override <code>admin/base_site.html</code> template with something this simple:</p><br/><br/><pre><code>{% extends "admin/base.html" %}<br/>{% block nav-global %}<br/>  &lt;p&gt;&lt;a href="{% url your-named-url %}"&gt;Do Something&lt;/a&gt;&lt;/p&gt;<br/>{% endblock %}<br/></code></pre><br/><br/><p>This (should) put the link at the top of the admin interface.</p><br/><br/><p>Add your url with named pattern to your urls.py</p><br/><br/><p>Then just make a normal django view and at the top of the view check to make sure the user is superuser like this:</p><br/><br/><pre><code>if not request.user.is_staff:<br/>    return Http404<br/></code></pre><br/><br/><p>That will prevent unauthorized people from accessing this view.</p><br/><br/><p>Next, in your view after the above code, just run the script.</p><br/><br/><p>Do that with Python's subprocess module, for example:</p><br/><br/><pre><code>from subprocess import call<br/>retcode = call(["/full/path/myscript.py", "arg1"])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM.CLEANED DATA IN NULL MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p>No, it doesn't. If you want to assign NULL, use Python's <code>None</code>. Otherwise Django will try to parse a number from the string and that fails for the empty string. </p><br/><br/><p>You can use the <code>or</code> construct to achieve this:</p><br/><br/><pre><code>my_model.width = form.cleaned_data['width'] or None<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS PRIMARI KEY IN MODELS.FILEFIELD ( UPLOAD TO ) LOCAT
    </pattern>
    <template>
<![CDATA[<p>It seems you'll need to pre-generate your <code>File</code> models with empty file fields first. Then pick up one and save it with the given file object.</p><br/><br/><p>You can have a custom manager method like this;</p><br/><br/><pre><code>def create_with_pk(self):<br/>    instance = self.create()<br/>    instance.save()     # probably this line is unneeded<br/>    return instance<br/></code></pre><br/><br/><p>But this will be troublesome if either of your fields is required. Because you are initially creating a null object, you can't enforce required fields on the model level.</p><br/><br/><h3>EDIT</h3><br/><br/><p><code>create_with_pk</code> is supposed to be a <a href="http://docs.djangoproject.com/en/dev/topics/db/managers/#adding-extra-manager-methods" rel="nofollow">custom manager method</a>, in your code it is just a regular method. Hence <code>self</code> is meaningless. It is all properly <a href="http://docs.djangoproject.com/en/dev/topics/db/managers/" rel="nofollow">documented</a> with examples.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY DJANGO ON APACH
    </pattern>
    <template>
<![CDATA[<p>The problem is that you are importing your app ("main") as if it lives directly on the Python path, and your URLconf ("therap.urls") as if it lives within a "therap" module on the Python path.  This can only work if both "D:/therap" and "D:/therap/therap" are BOTH on the Python path (which runserver does for you automatically to "make things easy"; though it ends up just delaying the confusion until deployment time).  You can emulate runserver's behavior by using the following line in your Apache config:</p><br/><br/><pre><code>PythonPath "['D:/therap', 'D:/therap/therap'] + sys.path"<br/></code></pre><br/><br/><p>It probably makes more sense to standardize your references so your Python path only need include one or the other.  The usual way (at least the way I see referenced more often) would be to put "D:\therap" on the Python path and qualify your app as "therap.main" instead of just "main".  Personally, I take the opposite approach and it works just fine: put "D:\therap\therap" on your Python path and set ROOT_URLCONF to "urls" instead of "therap.urls".  The advantage of this is that if in future you want to make your "main" app reusable and move it out of the particular project, your references to it aren't tied to the project name "therap" (though with an app named "main" it doesn't sound like you're thinking in terms of reusable apps anyway).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISTINCT YEAR AND MONTH FOR DJANGO ARCHIV PAGE
    </pattern>
    <template>
<![CDATA[<p>This will give you a list of unique posting dates:</p><br/><br/><pre><code>Posts.objects.filter(draft=False).dates('post_date','month',order='DESC')<br/></code></pre><br/><br/><p>Of course you might not need the draft filter, and change 'post_date' to your field name, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFER TEMPLAT NAME IN DJANGO GENER VIEW
    </pattern>
    <template>
<![CDATA[<p>Use the dict() constructor:</p><br/><br/><pre><code>infodict = {<br/>    'queryset': Post.objects.all(),<br/>    'date_field': 'date',<br/>    'template_name': 'index.html',<br/>    'template_object_name': 'latest_post_list',<br/>}<br/><br/>urlpatterns = patterns('django.views.generic.date_based',<br/>    url(r'^gindex/$', 'archive_index', dict(infodict, template_name='gindex.html')),<br/>    url(r'^hindex/$', 'archive_index', dict(infodict, template_name='hindex.html')),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL.OBJECT.GET PRE SAV FUNCTION WEIRD
    </pattern>
    <template>
<![CDATA[<p>S.Lott is correct... use <code>save()</code>, as you've already acknowledged that you have started doing.</p><br/><br/><p>As for the signal question, I can honestly see nothing wrong with your code. I've even run it locally myself with success. Are you sure that you're representing it properly in the question? Or that instance2 isn't already an existing database object (perhaps a goof in your test code)?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NVP API WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>There is nothing forcing you to meet PCI Compliance and use SSL, but you should anyway to limit your liability and inspire a little customer trust. </p><br/><br/><p>I thought I read something on the <a href="http://satchmoproject.com" rel="nofollow">Satchmo</a> Developer's Google group about a person implementing PayPal NVP and having a patch.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ISSU IN MYSQL RESPONS WITH MYSQLDB IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This certainly seems autocommit/table locking - related.</p><br/><br/><p>If mysqldb implements the dbapi2 spec it will probably have a connection running as one single continuous transaction. When you say: <code>'running in autocommit mode'</code>: do you mean MySQL itself or the mysqldb module? Or Django?</p><br/><br/><p><em>Not intermittently commiting perfectly explains the behaviour you are getting:</em></p><br/><br/><p><strong>i)</strong> a connection implemented as one single transaction in mysqldb (by default, probably)</p><br/><br/><p><strong>ii)</strong> not opening/closing connections only when needed but (re)using one (or more) persistent database connections (my guess, could be Django-architecture-inherited).</p><br/><br/><p><strong>ii)</strong> your selects ('reads') cause a 'simple read lock' on a table (which means other connections can still 'read' this table but connections wanting to 'write data' can't (immediately) because this lock prevents them from getting an 'exclusive lock' (needed 'for writing') on this table. The writing is thus postponed indefinitely (until it can get a (short) exclusive lock on the table for writing - when you close the connection or manually commit).</p><br/><br/><p>I'd do the following in your case:</p><br/><br/><ul><br/><li>find out which table locks are on your database during the scenario above</li><br/><li><a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/" rel="nofollow">read about Django and transactions here</a>. A quick skim suggests using standard Django functionality implicitely causes commits. This means sending handcrafted SQL maybe won't (insert, update...).</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHOIC OF MODELMULTIPLECHOICEFIELD
    </pattern>
    <template>
<![CDATA[<p>Form objects don't have their fields as attributes, you need to look in the "fields" attribute, which is a dictionary:</p><br/><br/><pre><code>self.fields['author'].queryset = choices<br/></code></pre><br/><br/><p>If you want to fully understand what's going on here, you might be interested in <a href="http://stackoverflow.com/questions/500650/django-model-question-newbie/501362#501362">this answer</a> - it's about Models, but Forms work similarly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DAEMON THAT ACCEPT ZIP FILE FOR PROCESS
    </pattern>
    <template>
<![CDATA[<p>i opted to use a combination of celery (<a href="http://ask.github.com/celery/introduction.html" rel="nofollow">http://ask.github.com/celery/introduction.html</a>), rabbitmq, and a simple django view to handle uploads. the workflow looks like this:</p><br/><br/><ol><br/><li>django view accepts, stores upload</li><br/><li>a celery <code>Task</code> is dispatched to process the upload. all work is done inside the <code>Task</code>.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON MODUL
    </pattern>
    <template>
<![CDATA[<p>PYTHONPATH may only be set when you run from the shell, you can set path programatically from python using</p><br/><br/><pre><code>import sys<br/>sys.path.append('/home/myuser/lib/python')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RSS FEED WRONG DOMAIN
    </pattern>
    <template>
<![CDATA[<p>May be it's coming from environment variables? Try:</p><br/><br/><pre><code>export | grep your.mistery.domain<br/></code></pre><br/><br/><p>see if that comes up with anything, do that as the same user under which you are running your Django apps.</p><br/><br/><p>You know you can always implement your item_link() method which would return the URL that you want, see documentation <a href="http://docs.djangoproject.com/en/dev/ref/contrib/syndication/?from=olddocs#feed-classes" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODIFI SYS.PATH FROM .HTACCESS TO ALLOW MOD PYTHON TO SEE DJANGO
    </pattern>
    <template>
<![CDATA[<p>According to <a href="http://code.djangoproject.com/ticket/2255" rel="nofollow">ticket #2255</a> for Django, you need admin access to httpd.conf in order to use Django with mod_python, and this is not going to change, so you may be dead in the water.  To answer the basic question of how to modify <code>sys.path</code> from <code>.htaccess</code>, you can use the <a href="http://www.modpython.org/live/current/doc-html/dir-other-pp.html" rel="nofollow">PythonPath</a> directive in <code>.htaccess</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COVER IN A DJANGO INTRODUCT TALK
    </pattern>
    <template>
<![CDATA[<p>I just did this last week.</p><br/><br/><p>I think it helps to provide some context for Django.  View the architecture fro the outside in.  Apache - mod_wsgi - Django - template presentation - view function - model.</p><br/><br/><p>I think it helps to look at an HTTP request's life cycle from browser to Apache to mod_wsgi to Django to the URL mapping to the view function to the template rendering.</p><br/><br/><p>I think that Python language features should be minimized.  It's an easy language and can be discussed as side-bars.</p><br/><br/><p>Don't forget to briefly (very briefly) mention the essential features of Django -- url mapping, template rendering, ORM, application structuring, built-in admin pages.</p><br/><br/><p>I think that the real heart of the presentation should follow the Django tutorial style.</p><br/><br/><ol><br/><li><p>Look at models first.  Cover just enough Python syntax and semantics to explain what the code sample means.</p></li><br/><li><p>Look at URL mapping and view functions next.  Keep these short.  Focus on built-in master-detail views since they're so simple.</p></li><br/><li><p>Look at template code last.  Be sure to differential Django templates (which do very little) from JSP pages or PHP (which do too much.)</p></li><br/></ol><br/><br/><p>I think it's important to not waste much time on Python-isms.  The language can spark useless debates on multiple-inheritance, compile-time type checking and the like.</p><br/><br/><p>I think it's important to dwell on the Django unittest features.  Those are wonderful.  We use them heavily.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WAY FOR LET USER EDIT RICH CONTENT
    </pattern>
    <template>
<![CDATA[<p><strong>Use one of the existing rich-text editors</strong></p><br/><br/><p>The lightest weight would be to use something at the js level like DojoEditor: </p><br/><br/><p><a href="http://code.djangoproject.com/wiki/AddDojoEditor" rel="nofollow">http://code.djangoproject.com/wiki/AddDojoEditor</a></p><br/><br/><p>See also this thread: </p><br/><br/><p><a href="http://stackoverflow.com/questions/329963/replace-textarea-with-rich-text-editor-in-django-admin">http://stackoverflow.com/questions/329963/replace-textarea-with-rich-text-editor-in-django-admin</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT ITER THROUGH LIST
    </pattern>
    <template>
<![CDATA[<p>Do you need <code>i</code> to be an index? If not, see if the following code does what you're after:</p><br/><br/><pre><code>&lt;div id="right_pod"&gt;<br/>{% for i in c %}<br/>    &lt;div class="user_pod"&gt;<br/>        {{ i.0.from_user }}<br/>    &lt;/div&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIM TO STRING IN PYTHON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Try using the built-in Django <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#date" rel="nofollow">date format filter</a> instead:</p><br/><br/><pre><code>{{ item.date|date:"Y M d" }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOUND BOX OF A GEODJANGO MULTIPOLYGON OBJECT
    </pattern>
    <template>
<![CDATA[<p>Use the <code>extent</code> property: <a href="http://geodjango.org/docs/geos.html#extent" rel="nofollow">http://geodjango.org/docs/geos.html#extent</a>.  It returns a 4-tuple comprising the lower left and upper right coordinates, respectively.</p><br/><br/><p>You can also use the <code>envelope</code> property if you want a <code>Polygon</code> object representation of the bounding box.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM CREAT PHANTOM ALIA IN SQL JOIN
    </pattern>
    <template>
<![CDATA[<p>I think this may be a symptom of:</p><br/><br/><p><a href="http://code.djangoproject.com/ticket/9188" rel="nofollow">http://code.djangoproject.com/ticket/9188</a></p><br/><br/><p>which was fixed as of django revision 9589, I think.  Now how to figure out which revision I'm working from...</p><br/><br/><p><hr /></p><br/><br/><p>Confirmed.  When I implemented the change referenced in the ticket above:</p><br/><br/><p><a href="http://code.djangoproject.com/changeset/9589" rel="nofollow">http://code.djangoproject.com/changeset/9589</a></p><br/><br/><p>my error went away.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERYSET FILTER FOR ALL VALU FROM A MANYTOMANYFIELD
    </pattern>
    <template>
<![CDATA[<p>I don't have a dataset handy to test this, but I think it should work:</p><br/><br/><pre><code>Basket.objects.annotate(num_fruits=Count('fruits')).filter(num_fruits=len(Fruit.objects.all()))<br/></code></pre><br/><br/><p>It annotates every basket object with the count of related fruits and filters out those baskets that have a fruit count that equals the total amount of fruits.</p><br/><br/><p>Note: you need Django 1.1 for this to work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI READI EVENT NOT FIRE
    </pattern>
    <template>
<![CDATA[<p>It could be due to the missing <code>&lt;/script&gt;</code> end tag for the jQuery script inclusion line. For example:</p><br/><br/><pre><code>&lt;script type="text/javascript" src="/site_media/js/jquery-1.3.2.js"&gt;&lt;/script&gt;<br/></code></pre><br/><br/><p>According to the note in the HTML specification for the <code>SCRIPT</code> element <a href="http://www.w3.org/TR/REC-html40/interact/scripts.html#h-18.2.1" rel="nofollow">here</a>, both the start and end tags are required.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONSUM XML FROM REST WEB SERVIC USE DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>ElementTree is provided as part of the standard Python libs. ElementTree is pure python, and cElementTree is the faster C implementation:</p><br/><br/><pre><code># Try to use the C implementation first, falling back to python<br/>try:<br/>    from xml.etree import cElementTree as ElementTree<br/>except ImportError, e:<br/>    from xml.etree import ElementTree<br/></code></pre><br/><br/><p>Here's an example usage, where I'm consuming xml from a RESTful web service:</p><br/><br/><pre><code>def find(*args, **kwargs):<br/>    """Find a book in the collection specified"""<br/><br/>    search_args = [('access_key', api_key),]<br/>    if not is_valid_collection(kwargs['collection']):<br/>        return None<br/>    kwargs.pop('collection')<br/>    for key in kwargs:<br/>        # Only the first keword is honored<br/>        if kwargs[key]:<br/>            search_args.append(('index1', key))<br/>            search_args.append(('value1', kwargs[key]))<br/>            break<br/><br/>    url = urllib.basejoin(api_url, '%s.xml' % 'books')<br/>    data = urllib.urlencode(search_args)<br/>    req = urllib2.urlopen(url, data)<br/>    rdata = []<br/>    chunk = 'xx'<br/>    while chunk:<br/>        chunk = req.read()<br/>        if chunk:<br/>            rdata.append(chunk)<br/>    tree = ElementTree.fromstring(''.join(rdata))<br/>    results = []<br/>    for i, elem in enumerate(tree.getiterator('BookData')):<br/>        results.append(<br/>               {'isbn': elem.get('isbn'),<br/>                'isbn13': elem.get('isbn13'),<br/>                'title': elem.find('Title').text,<br/>                'author': elem.find('AuthorsText').text,<br/>                'publisher': elem.find('PublisherText').text,}<br/>             )<br/>    return results<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM FIELD USE SELECTDATEWIDGET
    </pattern>
    <template>
<![CDATA[<p>The real problem was that SelectDateWidget can't be referenced this way. Changing the code to reference it differently solved my problem:</p><br/><br/><pre><code>from django.forms import extras<br/>...<br/>    DOB = forms.DateField(widget=extras.SelectDateWidget)<br/></code></pre><br/><br/><p>This seems to be a limitation that you can't reference package.package.Class from an imported package. The solution imports extras so the reference is just package.Class.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHARACT SET WITH MYSQL WEIRD
    </pattern>
    <template>
<![CDATA[<p>It appears your database is defaulted to latin1_swedish_ci, and therefore cannot accept all utf8 characters.  You need to change the configuration of the MySQL database tables to use utf8_general_ci.  A good blogpost about this (with links to a tool) can be found at <a href="http://www.mysqlperformanceblog.com/2009/03/17/converting-character-sets/" rel="nofollow">MySQL Performance Blog</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROCESS IN GAE
    </pattern>
    <template>
<![CDATA[<p>Without using a third-party system, I think currently your only option is to use the <a href="http://code.google.com/appengine/docs/python/config/cron.html" rel="nofollow">cron functionality</a>.</p><br/><br/><p>You'd still be bound by the usual GAE script-execution-time limitations, but it wouldn't happen on a page load.</p><br/><br/><p>There is plans for background processing, see <a href="http://code.google.com/p/googleappengine/issues/detail?id=6" rel="nofollow">this App Engine issue #6</a>, and this <a href="http://googleappengine.blogspot.com/2009/02/roadmap-update.html" rel="nofollow">roadmap update</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO
    </pattern>
    <template>
<![CDATA[<p>It just needs to support Python 2.3 or later (but not 3.0, yet), preferably with <code>mod_wsgi</code> support (although it also works with <a href="http://code.djangoproject.com/wiki/ServerArrangements" rel="nofollow">a bunch of other options</a>, if required).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT INCLUD
    </pattern>
    <template>
<![CDATA[<p>Generally, using <code>include</code>s is not the answer with Django templates. Let me answer your question on several fronts.</p><br/><br/><p>First, let me address the sidebar.</p><br/><br/><ul><br/><li><p><strong>Are nearly all the common pages going to be using that sidebar?</strong> Put it in <code>Base</code>. Don't override those sidebar blocks (i.e. don't write them at all in your <code>Story_*</code> templates).</p></li><br/><li><p><strong>Is this sidebar unique to the <code>Story_*</code> templates?</strong> Make another template called, say, <code>Story_base</code> and extend that. This is akin to making an abstract superclass in Java. (Answer was in my head, but wording was mercilessly <a href="http://stackoverflow.com/questions/849463/django-template-includes/849530#849530" rel="nofollow" title="jpwatts's answer">ripped off</a> from jpwatts.)</p></li><br/></ul><br/><br/><p>Next, let me address template inheritance. Say you have a template named <code>Story_list</code> that extends <code>Base</code>. At this point, after just putting <code>{% extends "Base" %}</code>, <code>Story_list</code> <em>is exactly</em> <code>Base</code>. Anything else you put in <code>Story_list</code> is ignored, because the template is already complete. The only thing you can do now is <em>override</em> blocks that have been defined in <code>Base</code>.</p><br/><br/><p>Finally, let me address <code>include</code>s. Try to always avoid them. Other templating engines, such as PHP, seem to encourage using <code>include</code>s. However, this can lead to less manageable templates in the long run. It's slightly harder to glance at an included snippet and immediately ascertain its place in your template hierarchy. They're also harder to refactor into the template hierarchy, especially if you include them at several levels (once in <code>Base</code>, twice in <code>Story_base</code>, once in some of the <code>Story_*</code>, etc.).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KEYERROR INSID DJANGO MODEL CLASS INIT
    </pattern>
    <template>
<![CDATA[<p>There's no reason to write your own <code>__init__</code> for Django model classes.  I think you'll be a lot happier without it.  </p><br/><br/><p>Almost anything you think you want to do in <code>__init__</code> can be better done in <code>save</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPOS AN OR QUERI FILTER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Maybe it's better to use sql IN statement.</p><br/><br/><pre><code>Article.objects.filter(id__in=[1, 2, 3])<br/></code></pre><br/><br/><p>See <a href="http://docs.djangoproject.com/en/1.0/ref/models/querysets/#in">queryset api reference</a>.</p><br/><br/><p>If you really need to make queries with dynamic logic, you can do something like this (ugly + not tested):</p><br/><br/><pre><code>query = Q(field=1)<br/>for cond in (2, 3):<br/>    query = query | Q(field=cond)<br/>Article.objects.filter(query)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD PICKL DATA TO DJANGO FILEFIELD
    </pattern>
    <template>
<![CDATA[<p>Marty Alchin has a section on this in Pro Django, which is (conveniently) <a href="http://books.google.com/books?id=lJwOcsZq5g4C&amp;pg=PA83&amp;lpg=PA83&amp;dq=Python+pickle+Django&amp;source=bl&amp;ots=b0Pwei4rD5&amp;sig=38s3WQkpS13OCUpJyZAgqTN5t2Y&amp;hl=en&amp;ei=HnFUSpGoCsK2jAfE0-mNCQ&amp;sa=X&amp;oi=book%5Fresult&amp;ct=result&amp;resnum=4" rel="nofollow">available to read free on Google Books</a> :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF THE CORE CONCEPTU DIFFER BETWEEN C # AND PYTHON
    </pattern>
    <template>
<![CDATA[<p>" I understand that Python is dynamically typed, whereas C# is strongly-typed. "</p><br/><br/><p>This is weirdly wrong.</p><br/><br/><ol><br/><li><p>Python is strongly typed.  A list or integer or dictionary is always of the given type.  The object's type cannot be changed.</p></li><br/><li><p>Python variables are not strongly typed.  Indeed, Python variables are just labels on objects.  Variables are not declared; hence the description of Python as "dynamic".  </p></li><br/><li><p>C# is statically typed.  The variables are declared to the compiler to be of a specific type.  The code is generated based on certain knowledge about the variables use at run-time.</p></li><br/></ol><br/><br/><p>Python is "interpreted" -- things are done at run-time -- little is assumed.  [Technically, the Python source is compiled into byte code and the byte code is interpreted.  Some folks think this is an important distinction.]</p><br/><br/><p>C# is compiled -- the compiler generates code based on the declared assumptions.</p><br/><br/><p><hr /></p><br/><br/><p><strong>What conceptual obstacles should I watch out for when attempting to learn Python?</strong></p><br/><br/><p>None.  If you insist that Python <em>should</em> be like something else; or you insist that something else is <em>more intuitive</em> then you've polluted your own thinking with inappropriate concepts.</p><br/><br/><p>No programming language has obstacles.  We bring our own obstacles when we impose things on the language.</p><br/><br/><p><strong>Are there concepts for which no analog exists in Python?</strong></p><br/><br/><p>Since Python has object-oriented, procedural and functional elements, you'd be hard-pressed to find something missing from Python.</p><br/><br/><p><strong>How important is object-oriented analysis?</strong></p><br/><br/><p>OO analysis helps all phases of software development -- even if you aren't doing an OO implementation.  This is unrelated to Python and should be a separate question.</p><br/><br/><p><strong>I need to get up to speed in about 2 weeks time (ridiculous maybe?)</strong></p><br/><br/><p>Perhaps not.  If you start with a fresh, open mind, then Python can be learned in a week or so of diligent work.</p><br/><br/><p>If, on the other hand, you compare and contrast Python with C#, it can take you years to get past your C# bias and learn Python.  Don't translate C# to Python.  Don't translate Python to C#.  </p><br/><br/><p>Don't go to the well with a full bucket.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO SAFE UNICOD IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>What is the original encoding? I'm assuming "cp1252", from <a href="http://stackoverflow.com/questions/873419/converting-to-safe-unicode-in-python/873450#873450">pixelbeat's</a> answer. In that case, you can do</p><br/><br/><pre><code>&gt;&gt;&gt; orig # Byte string, encoded in cp1252<br/>'Fabulous home on one of Decatur\x92s most' <br/><br/>&gt;&gt;&gt; uni = orig.decode('cp1252')<br/>&gt;&gt;&gt; uni # Unicode string<br/>u'Fabulous home on one of Decatur\u2019s most'<br/><br/>&gt;&gt;&gt; s = uni.encode('utf8')  <br/>&gt;&gt;&gt; s # Correct byte string encoded in utf-8<br/>'Fabulous home on one of Decatur\xe2\x80\x99s most'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERS ERROR IN GOOGL APP ENGIN DJANGO PATCH
    </pattern>
    <template>
<![CDATA[<p>I could not find a proper answer to my question. Anyways I solved the problem temporarily by reinstalling the Django framework and the app engine SDK.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HIDDEN AUTOFIELD IN DJANGO FORMSET
    </pattern>
    <template>
<![CDATA[<p>Okay, none of the approaches above worked for me. I solved this issue from the template side, finally.</p><br/><br/><ul><br/><li><p>There is a ticket filed (<a href="http://code.djangoproject.com/ticket/10427" rel="nofollow">http://code.djangoproject.com/ticket/10427</a>), which adds a "value" option to a template variable for a form. For instance, it allows,</p><br/><br/><p>{{form.locid.value}}</p></li><br/></ul><br/><br/><p>to be shown. This is available as a patch, which can be installed in the SVN version of django using "patch -p0 file.patch"</p><br/><br/><ul><br/><li><p>Remember, the {{form.locid.value}} variable will be used <strong>in conjunction</strong> with the invisible form - otherwise, the submit and save operations for the formset will crash.</p></li><br/><li><p>This is <em>Not</em> the same as {{form.locid.data}} - as is explained in the ticket referred to above.</p></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM
    </pattern>
    <template>
<![CDATA[<p>The Django book covers this issue in <a href="http://www.djangobook.com/en/1.0/chapter05/" rel="nofollow">Chapter 5</a>, near the end of the chapter (or bottom of the page, in the web edition). Basically, the rules are:</p><br/><br/><ul><br/><li>When <em>adding</em> a field, first add it to the database manually (using, e.g., <code>ALTER TABLE</code>) and then add the field to the model. (You can use <code>manage.py sqlall</code> to see what SQL statement to execute.)</li><br/><li>When removing a field, remove it from your model and then execute the appropriate SQL statement to remove the column (e.g., an <code>ALTER TABLE</code> command), and any join tables that were created.</li><br/><li>Renaming a field is basically a combination of adding/removing fields, as well as copying data.</li><br/></ul><br/><br/><p>So to answer your question, in Django's case, no, the ORM  will <em>not</em> handle modifications for you -- but they're not that hard to do. See that chapter of the book (linked above) for more info.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT CHANG MODEL FIELD
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; type(Person.objects.all())<br/>&lt;class 'django.db.models.query.QuerySet'&gt;<br/><br/>&gt;&gt;&gt; pa = Person.objects.all() # Not evaluated yet - lazy<br/>&gt;&gt;&gt; type(pa)<br/>&lt;class 'django.db.models.query.QuerySet'&gt;<br/></code></pre><br/><br/><p>DB queried to give you a Person object</p><br/><br/><pre><code>&gt;&gt;&gt; pa[2]<br/></code></pre><br/><br/><p>DB queried again to give you yet another Person object. </p><br/><br/><pre><code>&gt;&gt;&gt; pa[2].first_name = "Blah"<br/></code></pre><br/><br/><p>Let's call this instance PersonObject1 that resides in memory. So it's equivalent to something like this:</p><br/><br/><pre><code>&gt;&gt;&gt; PersonObject1.first_name = "Blah"<br/></code></pre><br/><br/><p>Now let's do this:</p><br/><br/><pre><code>&gt;&gt;&gt; pa[2].save()<br/></code></pre><br/><br/><p>The pa[2] again queries a db an returns Another instance of person object, say PersonObject2 for example. Which will be unchanged! So it's equvivalent to calling something like:</p><br/><br/><pre><code>PersonObject2.save()<br/></code></pre><br/><br/><p>But this has nothing to do with PersonObject1.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM TEMPLAT FILTER REGEX PROBLEM
    </pattern>
    <template>
<![CDATA[<p>If your string contains other text in addition to the wiki-link, your filter won't work because you are using <code>re.match</code> instead of <code>re.search</code>. <code>re.match</code> matches at the beginning of the string. <code>re.search</code> matches anywhere in the string. See <a href="http://docs.python.org/library/re.html#matching-vs-searching" rel="nofollow">matching vs. searching</a>.</p><br/><br/><p>Also, your regex uses the greedy <code>*</code>, so it won't work if one line contains multiple wiki-links. Use <code>*?</code> instead to make it non-greedy:</p><br/><br/><pre><code>re.search(r'\[\[(.*?)\|(.*?)\]\]', value)<br/></code></pre><br/><br/><p>Edit:</p><br/><br/><p>As for tips on how to fix your code, I suggest that you use <a href="http://docs.python.org/library/re.html#re.sub" rel="nofollow"><code>re.sub</code> with a callback</a>. The advantages are:</p><br/><br/><ul><br/><li>It works correctly if you have multiple wiki-links in the same line.</li><br/><li>One pass over the string is enough. You don't need a pass to find wiki-links, and another one to do the replacement.</li><br/></ul><br/><br/><p>Here is a sketch of the implmentation:</p><br/><br/><pre><code>import re<br/><br/>WIKILINK_RE = re.compile(r'\[\[(.*?)\|(.*?)\]\]')<br/><br/>def wikilink(value):<br/>  def wikilink_sub_callback(match_obj):<br/>    alias = match_obj.group(1).strip()<br/>    text = match_obj.group(2).strip()<br/>    if(alias exists in Page):<br/>      class_attr = ''<br/>    else:<br/>      class_attr = ' class="redlink"'<br/>    return '&lt;a href="%s"%s&gt;%s&lt;/a&gt;' % (alias, class_attr, text)<br/><br/>  return WIKILINK_RE.sub(wikilink_sub_callback, value)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON IMPORT
    </pattern>
    <template>
<![CDATA[<p>Python imports can import two different kinds of things: modules and objects.</p><br/><br/><pre><code>import x<br/></code></pre><br/><br/><p>Imports an entire module named <code>x</code>.</p><br/><br/><pre><code>import x.y<br/></code></pre><br/><br/><p>Imports a module named <code>y</code> and it's container <code>x</code>.  You refer to <code>x.y</code>.  </p><br/><br/><p>When you created it, however, you created this directory structure</p><br/><br/><pre><code>x<br/>    __init__.py<br/>    y.py<br/></code></pre><br/><br/><p>When you add to the import statement, you identify specific objects to pull from the module and move into the global namespace</p><br/><br/><pre><code>import x # the module as a whole<br/>x.a # Must pick items out of the module<br/>x.b<br/><br/>from x import a, b # two things lifted out of the module<br/>a # items are global<br/>b<br/></code></pre><br/><br/><p>If helloworld is a package (a directory, with an <code>__init__.py</code> file), it typically doesn't contain any objects.</p><br/><br/><pre><code>from x import y # isn't sensible<br/>import x.y # importing a whole module.<br/></code></pre><br/><br/><p>Sometimes, you will have objects defined in the <code>__init__.py</code> file.</p><br/><br/><p>Generally, use "from module import x" to pick specific objects out of a module.</p><br/><br/><p>Use <code>import module</code> to import an entire module.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT PICK UP CHANG TO INSTALLED APP IN SETTINGS.PI
    </pattern>
    <template>
<![CDATA[<p>The answer, it turns out, is that I'm a moron. I'd done this:</p><br/><br/><p>In <code>settings.py</code>:</p><br/><br/><pre><code>...<br/>INSTALLED_APPS = (<br/>    ...<br/>)<br/>...<br/><br/>from localsettings import *<br/></code></pre><br/><br/><p>In <code>localsettings.py</code></p><br/><br/><pre><code>...<br/>INSTALLED_APPS = (<br/>    ...<br/>)<br/>...<br/></code></pre><br/><br/><p>I'd created <code>localsettings.py</code> from <code>settings.py</code>, to contain things only relevant to the current location of the project (like database settings), and forgot to delete the <code>INSTALLED_APPS</code> section.</p><br/><br/><p>Apologies for doing such a flagrantly stupid thing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM FROM MODEL ( A LA DJANGO MODELFORM ) IN OBJECTIVE C
    </pattern>
    <template>
<![CDATA[<p>I'm working on the same problem now, in my case I have a complex set of models that are coming from WSDL, and there's a LOT of form elements that can change from time to time. I definitely do not want to be doing the forms by hand in code or in IB.</p><br/><br/><p>Objective-C is a fully dynamic language and you can definitely do what you want to do in a fully dynamic fashion. Assuming that your models are Core Data models, you can find all of the properties using something like [[myCoreDataObject entity] propertiesByName]. You can then iterate through these properties automatically creating the appropriate form fields depending on their types.</p><br/><br/><p>You would then create a subclass of for example UITableViewController which you pass an NSManagedObject to, and it will automatically create a form which matches the model object.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM TEMPLAT DESIGN CLASS
    </pattern>
    <template>
<![CDATA[<p>If you just need all labels to have a particular class, the best way would be to change the markup and CSS slightly. Put a <code>&lt;div&gt;</code> with your class around the form:</p><br/><br/><pre><code>&lt;div class="field-title"&gt;<br/>    {{ form.as_p }}<br/>&lt;/div&gt;<br/></code></pre><br/><br/><p>and make the CSS definition as follows: </p><br/><br/><pre><code>div.field-title label {<br/>    ...<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + JQUERI EXPAND AJAX DIV
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.jquery.com/Ajax/load" rel="nofollow">jQuery.load</a> does exactly that:</p><br/><br/><pre><code>$("div#my-container").load("/url/to/content/ #content-id")<br/></code></pre><br/><br/><p>this fetches the content from <code>/url/to/content/</code>, filters it by <code>#content-id</code> and injects the result into <code>div#my-container</code>.</p><br/><br/><p>edit: there's really nothing Django-specific about this, since it's all client-side. But if you insist...</p><br/><br/><p><code>templates/base.html</code></p><br/><br/><pre><code>&lt;html&gt;<br/>    &lt;head&gt;<br/>        &lt;title&gt;My funky example&lt;/title&gt;<br/>        &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"&gt;&lt;/script&gt;<br/>        {% block extrahead %}{% endblock %}<br/>    &lt;/head&gt;<br/>    &lt;body&gt;<br/>        {% block content %}{% endblock %}<br/>    &lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/><br/><p><code>templates/page.html</code></p><br/><br/><pre><code>{% extends "base.html" %}<br/>{% block extrahead %}<br/>    &lt;script type="text/javascript"&gt;<br/>        $(function(){<br/>            $('a.extendable').click(function(){<br/>                $(this).after($('&lt;div class="external-content"&gt;&lt;/div&gt;').load($(this).attr('href') + ' #content'));<br/>                return false;<br/>            });<br/>        });<br/>    &lt;/script&gt;<br/>{% endblock extrahead %}<br/>{% block content %}<br/>    &lt;p&gt;Hi! &lt;a href="/external/content/a/" class="extendable"&gt;Click here&lt;/a&gt; and wait for something funny to happen!&lt;/p&gt;<br/>    &lt;p&gt;&lt;a href="/external/content/b/" class="extendable"&gt;This link&lt;/a&gt; is cool, too!&lt;/p&gt;<br/>{% endblock content %}<br/></code></pre><br/><br/><p><code>templates/a.html</code></p><br/><br/><pre><code>{% extends "base.html" %}<br/>{% block content %}<br/>    &lt;div id="content"&gt;so long and thanks for all the fish&lt;/div&gt;<br/>{% endblock %}<br/></code></pre><br/><br/><p><code>templates/b.html</code></p><br/><br/><pre><code>{% extends "base.html" %}<br/>{% block content %}<br/>    &lt;div id="content"&gt;Don't panic&lt;/div&gt;<br/>{% endblock %}<br/></code></pre><br/><br/><p><code>urls.py</code></p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>urlpatterns = patterns('django.views.generic.simple',<br/>    (r'^$',                    'direct_to_template', {'template': 'page.html'}),<br/>    (r'^external/content/a/$', 'direct_to_template', {'template': 'a.html'}),<br/>    (r'^external/content/b/$', 'direct_to_template', {'template': 'b.html'}),<br/>)<br/></code></pre><br/><br/><p>You can download all the code <a href="http://uploading.com/files/ZQ4BPB6J/ajaxy.zip.html" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BY A COMPUT VALU IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you need to do the sorting in the database (because you have lots of records, and need to e.g. paginate them), the only real option is to turn reputation into a denormalized field.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STUCK ON OFFICI DJANGO TUTORI
    </pattern>
    <template>
<![CDATA[<p>You have three underscores before "unicode__" on the Choice class, it should be only two like in your Poll class, like this:</p><br/><br/><pre><code>def __unicode__(self):<br/>    return u'%s' % self.choice<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTHENT USE AUTH.VIEW
    </pattern>
    <template>
<![CDATA[<p>I think the best solution to this problem is to use a "flash"-type session-based messaging system.  There are several floating around: <a href="http://djangoflash.destaquenet.com/" rel="nofollow">django-flash</a> seems really nice, I use <a href="http://code.google.com/p/django-session-messages/" rel="nofollow">django-session-messages</a> which is very simple.  Hopefully by the time we get to Django 1.2 this'll be baked-in.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR CREAT A UNIQU VALID KEY NUMB
    </pattern>
    <template>
<![CDATA[<p>As other posters mentioned, you are looking for a GUID, of which the most popular implemntation UUID (see <a href="http://en.wikipedia.org/wiki/Universally%5FUnique%5FIdentifier" rel="nofollow">here</a>) . Django extensions (see <a href="http://code.google.com/p/django-command-extensions/" rel="nofollow">here</a>) offer a UUID field just for this purpose.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AGNOST LINK ANI OBJECT MODEL FROM ANOTH DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>django-tagging uses Django's <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/" rel="nofollow">contenttypes</a> framework.  The docs do a much better job of explaining it than I can, but the simplest description of it would be "generic foreign key that can point to any other model."</p><br/><br/><p>This may be what you are looking for, but from your description it also sounds like you want to do something very similar to some other existing projects:</p><br/><br/><ul><br/><li><p><strong><a href="http://pypi.python.org/pypi/django-flatblocks/0.3.1" rel="nofollow">django-flatblocks</a></strong> ("... acts like django.contrib.flatpages but for parts of a page; like an editable help box you want show alongside the main content.")</p></li><br/><li><p><strong><a href="http://bitbucket.org/hakanw/django-better-chunks/wiki/Home" rel="nofollow">django-better-chunks</a></strong> ("Think of it as flatpages for small bits of reusable content you might want to insert into your templates and manage from the admin interface.")</p></li><br/></ul><br/><br/><p>and so on.  If these are similar then they'll make a good starting point for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KWARG TO A CLASS
    </pattern>
    <template>
<![CDATA[<p>That's because you're unpacking kwargs to the super constructor.<br/>Try to put this before calling super:</p><br/><br/><pre><code>if kwargs.has_key('bases_queryset'):<br/>    bases_queryset = kwargs['bases_queryset']<br/>    del kwargs['bases_queryset']<br/></code></pre><br/><br/><p>but it's not an ideal solution...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF VISITOR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You might want to look into something like <a href="http://code.google.com/p/django-tracking/" rel="nofollow">django-tracking</a> for this.</p><br/><br/><blockquote><br/>  <p>django-tracking is a simple attempt at<br/>  keeping track of visitors to<br/>  Django-powered Web sites. It also<br/>  offers basic blacklisting<br/>  capabilities.</p><br/></blockquote><br/><br/><p><strong>Edit</strong>: As for your updated question... [Answer redacted after being corrected by muhuk]</p><br/><br/><p>Alternatively, I liked the response to this question: <a href="http://stackoverflow.com/questions/978333/how-do-i-find-out-total-number-of-sessions-created-i-e-number-of-logged-in-users">How do I find out total number of sessions created i.e. number of logged in users?</a></p><br/><br/><p>You might want to try that instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AUTO ADMIN TERMINOLOG
    </pattern>
    <template>
<![CDATA[<p>You can define <code>verbose_name</code> and <code>verbose_name_plural</code> in your model's inner <code>Meta</code> class to override the values used there. See <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#verbose-name-plural" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/options/#verbose-name-plural</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEBUG INFORM WHEN USE AJAX CALL
    </pattern>
    <template>
<![CDATA[<p>You can inspect the contents of the response returned to your jQuery ajax call.   Using a tool like Firebug can make this pretty easy.</p><br/><br/><p>Django will still return the debug page, it's just that it is responding to the ajax call rather than a regular browser request.</p><br/><br/><p>It's often a good technique to get your stuff working with regular requests, and then "ajaxify" them only once you are sure the server side code is working.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS ATTRIBUT INHERIT
    </pattern>
    <template>
<![CDATA[<p>Inheritance applies <em>after</em> the class's body executes. In the class body, you can use <code>lgrAdminObject.fields</code> -- you sure you want to alter the superclass's attribute rather than making a copy of it first, though? Seems peculiar... I'd start with a copy:</p><br/><br/><pre><code>class Photos(lgrAdminObject):<br/>    fields = list(lgrAdminObject.fields)<br/></code></pre><br/><br/><p>before continuing with alterations.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS A SUBBED CLASS MODEL FROM WITHIN THE SUPER CLASS MODEL IN THE DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>I am assuming that all ArticleBase instances are instances of ArticleBase subclasses.</p><br/><br/><p>One solution is to store the subclass name in ArticleBase and some methods that return the subclass or subclass object based on that information.  As multi-table inheritance defines a property on the parent instance to access a child instance, this is all pretty straight forward.</p><br/><br/><pre><code>from django.db import models<br/><br/>class ArticleBase(models.Model):<br/>    title = models.CharField()<br/>    author = models.CharField()<br/>    # Store the actual class name.<br/>    class_name = models.CharField()<br/><br/>    # Define save to make sure class_name is set.<br/>    def save(self, *args, **kwargs):<br/>        self.class_name = self.__class__.__name__<br/>        super(ArticleBase, self).save(*args, **kwargs)<br/><br/>    # Multi-table inheritance defines an attribute to fetch the child<br/>    # from a parent instance given the lower case subclass name.<br/>    def get_child(self):<br/>        return getattr(self, self.class_name.lower())<br/><br/>    # If indeed you really need the class.<br/>    def get_child_class(self):<br/>        return self.get_child().__class__<br/><br/>    # Check the type against a subclass name or a subclass.<br/>    # For instance, 'if article.child_is(News):'<br/>    # or 'if article.child_is("News"):'.<br/>    def child_is(self, cls):<br/>        if isinstance(cls, basestring):<br/>            return cls.lower() == self.class_name.lower()<br/>        else:<br/>            return self.get_child_class()  == cls<br/><br/>class Review(ArticleBase):<br/>    rating = models.IntegerField()<br/><br/>class News(ArticleBase):<br/>    source = models.CharField()<br/></code></pre><br/><br/><p>This is by no means the only way to go about this.  It is, however, a pretty simple and straight forward solution.  The excellent contrib contenttypes app and the generic module which leverages it offer a wealth of ways to do this, well, generically.</p><br/><br/><p>It could be useful to have the following in ArticleBase:</p><br/><br/><pre><code>def __unicode__(self)<br/>    return self.get_child().__unicode__()<br/></code></pre><br/><br/><p>In that case, be aware that failure to define <code>__unicode__</code> in the subclasses, or calling <code>__unicode__</code> on an instance of ArticleBase (one that has not been subclassed) would lead to an infinite recursion.  Thus the admonition below re sanity checking (for instance, preventing just such an instantiation of ArticleBase directly).</p><br/><br/><p><strong>Disclaimer:</strong></p><br/><br/><p>This code is untested, I'm sure I've got a typo or two in there, but the basic concept should be sound.  Production level code should probably have some sanity checking to intercept usage errors.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL NAME CLASH
    </pattern>
    <template>
<![CDATA[<p>The problem is that both Satchmo and Pinax have a Contact model with a ForeignKey to User.  Django tries to add a "contact_set" reverse relationship attribute to User for each of those ForeignKeys, so there is a clash.</p><br/><br/><p>The solution is to add something like related_name="pinax_contact_set" as an argument to the ForeignKey in Pinax's Contact model, or similarly in the Satchmo Contact model.  That will require editing the source directly for one or the other.  You might be able to find a way to do it via monkeypatching, but I'd expect that to be tricky.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBSERV PATTERN
    </pattern>
    <template>
<![CDATA[<p>There is nothing wrong with running (limited) code in the class definition:</p><br/><br/><pre><code>class X(object):<br/>  print("Loading X")<br/></code></pre><br/><br/><p>However, you can not refer to X because it is not yet fully defined.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROW COUNT FROM ANOTH TABL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>When creating a <code>foreign_key</code>, the other model gets a manager that returns all instances of the first model (see <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#following-relationships-backward" rel="nofollow">navigating backward</a>)<br/>In your case, it would be named "<code>subscription_set</code>".</p><br/><br/><p>In addition, Django allows for virtual fields in models, called "Model Methods", that are not connected to database data, but are implemented as methods of the model (see <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#id4" rel="nofollow">model methods</a>)</p><br/><br/><p>Putting all together, you can have something like this:</p><br/><br/><pre><code>class HardwareNode(models.Model):<br/>    ip_address = models.CharField(max_length=15)<br/>    port = models.IntegerField()<br/>    location = models.CharField(max_length=50)<br/>    hostname = models.CharField(max_length=30)<br/>    subscription_count = lambda(self: self.subscription_set.count())<br/></code></pre><br/><br/><p>And then, include subscription_count in the list of fields to be listed in the admin panel.</p><br/><br/><p>Note: as usual, I did not check this code, and it may even not run as it is, but it should give some idea on how to work on your problem; moreover, I have used a lambda just for brevity but usually I think it would be a better option (style, maintenability, etc.) to use a named one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO DO CONDIT FORMAT
    </pattern>
    <template>
<![CDATA[<p>I'm a big fan of putting ALL "business" logic in the view function and ALL presentation in the templates/CSS.</p><br/><br/><p>Option 1 is ideal.  You return a list of pairs: ( date, state ), where the state is the class name ("past", "present", "future").</p><br/><br/><p>Your template then uses the state information as the class for a <code>&lt;span&gt;</code>.  Your CSS then provides the color coding for that span.</p><br/><br/><p>You are now free to change the rules without breaking the template.  You can change the CSS without touching HTML or Python code.</p><br/><br/><pre><code>{% for date,state in the_date_list %}<br/>    &lt;span class="{{state}}"&gt;date&lt;/span&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OFFICI TUTORI FOR THE ABSOLUT BEGINN ABSOLUT FAIL
    </pattern>
    <template>
<![CDATA[<p>You overlooked this paragraph in the 4. part of the tutorial:</p><br/><br/><blockquote><br/>  <p>In previous parts of the tutorial, the templates have been provided with a context that contains the poll and <code>latest_poll_list</code> context variables. However, the generic views provide the variables <code>object</code> and <code>object_list</code> as context. Therefore, you need to change your templates to match the new context variables. Go through your templates, and modify any reference to <code>latest_poll_list</code> to <code>object_list</code>, and change any reference to <code>poll</code> to <code>object</code>.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROFIL IN IPYTHON AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't know about ipythonrc, but if you only need the models, you could use <a href="http://code.google.com/p/django-command-extensions/" rel="nofollow"><code>django-extensions</code></a>. After you install it, you've got a plethora of new managment commands, including <code>shell_plus</code>, which will open a ipython session and autoload all your models:</p><br/><br/><pre><code>python manage.py shell_plus<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GEODJANGO + POSTGI GPL
    </pattern>
    <template>
<![CDATA[<p>Disclaimer: the following is my opinion and not intended to be legal advice -- consult a licensed attorney for that.</p><br/><br/><p>In general, using psycopg2/PostGIS with your GeoDjango project does not make it subject to the GPLv2.  I'll speak about PostGIS since others have already addressed the question as it relates to psycopg2.</p><br/><br/><p>Unlike the other geospatial libraries that it uses, GeoDjango does not 'link' to PostGIS.  PostgreSQL is what is linked to the PostGIS library (<code>liblwgeom.so</code>), and in doing exposes a wide selection of SQL functions.  GeoDjango calls the SQL functions and uses their output to do what it does.  Let's examine term 0 of the GPLv2:</p><br/><br/><blockquote><br/>  <p>This License applies to any program<br/>  or other work which contains a notice<br/>  placed by the copyright holder saying<br/>  it may be distributed under the terms<br/>  of this General Public License.  The<br/>  "Program", below, refers to any such<br/>  program or work, and a "work based on<br/>  the Program" means either the Program<br/>  or any derivative work under copyright<br/>  law: that is to say, a work containing<br/>  the Program or a portion of it, either<br/>  verbatim or with modifications and/or<br/>  translated into another language. </p><br/>  <br/>  <p>...</p><br/>  <br/>  <p>Activities other than copying,<br/>  distribution and modification are not<br/>  covered by this License; they are<br/>  outside its scope.  The act of running<br/>  the Program is not restricted, and the<br/>  output from the Program is covered<br/>  only if its contents constitute a work<br/>  based on the Program (independent of<br/>  having been made by running the<br/>  Program). Whether that is true depends<br/>  on what the Program does.</p><br/></blockquote><br/><br/><p>Because GeoDjango is just running PostGIS (by calling its public SQL API functions), and the output of PostGIS is geospatial data and/or numeric values (not source code based on PostGIS) it's clear to me that GeoDjango (or an app built with it) is not covered by the GPL because it is not copying, modifying, distributing, nor a derivative work of GPL code.</p><br/><br/><p>Notice I said "in general" at the beginning.  If you are <em>distributing</em> your GeoDjango application <em>including</em> psycopg2 and PostGIS, then your code may be subject to the GPL.  For web applications this is typically not a problem, because the code is almost never distributed to others like traditional shrink-wrapped software.  The code is running on your server, and the only thing your distributing is output of your program (e.g., HTML) to the users (sidebar: this is why I avoid GPL-licensed JavaScript libraries like the plague).  This is how Google can keep their heavily-modified Linux kernel to themselves, because their modifications never leave the servers at Google.</p><br/><br/><p>Bottom-line: if you are actually selling/distributing a GeoDjango application to end-users (they get a copy of the application), then <em>do not</em> include the GPL-licensed prerequisites to avoid triggering the licensing requirements on your proprietary code.  In other words, install those libraries on-site so that you cannot be considered to be "distributing" GPL source/object code with your closed-source application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON BAS WEBSHOP SOFTWAR
    </pattern>
    <template>
<![CDATA[<p>Satchmo is a great project, mature, and used in live ecommerce sites.</p><br/><br/><p>The other up-and-coming Django ecommerce app that looks like it will be strong competition for Satchmo is <a href="http://www.getlfs.com/start" rel="nofollow">Lightning Fast Shop</a>.  I haven't used it, but I've looked over the code a few times and like its style.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANI TEMPLAT RENDER AND PERFORM ISSU
    </pattern>
    <template>
<![CDATA[<p>I assume <code>mymodel_obj_list</code> is a QuerySet.  You're accessing a foreign key field inside the loop, which means, by default, Django will look up each object's refby one at a time, when you access it.  If you're displaying a lot of rows, this is extremely slow.</p><br/><br/><p>Call select_related on the QuerySet, to pull in all of these foreign key fields in advance.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER AN ITERTOOL CHAIN ( ) RESULT
    </pattern>
    <template>
<![CDATA[<pre><code>import operator<br/><br/>ourtags = sorted(ourtags, key=operator.attrgetter('date_added'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOCUMENT LOCAL SET UP
    </pattern>
    <template>
<![CDATA[<p>Install <a href="http://sphinx.pocoo.org/" rel="nofollow">sphinx</a>.</p><br/><br/><pre><code>$ easy_install -U Sphinx<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEED RANDOM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Call <code>random.seed()</code> rarely if at all.</p><br/><br/><p>To be random, you must allow the random number generator to run without touching the seed.  The sequence of numbers is what's random.  If you change the seed, you start a new sequence.  The seed values may not be very random, leading to problems.  </p><br/><br/><p>Depending on how many numbers you need, you can consider resetting the seed from <code>/dev/random</code> periodically.</p><br/><br/><p>You should try to reset the seed just before you've used up the previous seed.  You don't get the full 32 bits of randomness, so you might want to reset the seed after generating 2**28 numbers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BORDER IN PISA
    </pattern>
    <template>
<![CDATA[<p>I forgot to update this question after I got the answer....the CSS should be in the HTML page that'll be used by pisa.  Apparently external CSS stylesheets don't work.  Hope this will someday help someone else</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND REPLAC FROM A LIST OF TUPL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You could consider using <code>re.sub</code>:</p><br/><br/><pre><code>import re<br/>REPLACEMENTS = dict([('find1', 'replace1'),<br/>                     ('find2', 'replace2'),<br/>                     ('find3', 'replace3')])<br/><br/>def replacer(m):<br/>    return REPLACEMENTS[m.group(0)]<br/><br/>x = 'find1, find2, find3'<br/>r = re.compile('|'.join(REPLACEMENTS.keys()))<br/>print r.sub(replacer, x)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N EVENT HANDLER IN A DJANGO FORM INPUT FIELD
    </pattern>
    <template>
<![CDATA[<p>If you are looking for automating this process, you can create a custom widget for the field. In the widget class you will define a render method in such a way that it will also return the event binding code. </p><br/><br/><pre><code>class CustomWidget(forms.TextInput):<br/><br/>    class Media:<br/>        #js here<br/>        js = ('js/my_js.js',)<br/><br/>    def render(self, name, value, attrs = None)<br/>         output = super(CustomWidget, self).render(name, value, attrs)<br/>         #do what you want to do here<br/>         output += ...<br/>         return output<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH MOD WSGI
    </pattern>
    <template>
<![CDATA[<p>You have:</p><br/><br/><pre><code>WSGIScriptAlias / /C:/Users/Marcos/Documents/mysite/apache/django.wsgi<br/></code></pre><br/><br/><p>That is wrong as RHS is not a valid Windows pathname. Use:</p><br/><br/><pre><code>WSGIScriptAlias / C:/Users/Marcos/Documents/mysite/apache/django.wsgi<br/></code></pre><br/><br/><p>That is, no leading slash before the Windows drive specifier.</p><br/><br/><p>Other than that, follow the mod_wsgi documentation others have pointed out.</p><br/><br/><p><hr /></p><br/><br/><p>Poster edited question to change what now would appear to be a typo in the post and not a problem with his configuration.</p><br/><br/><p>If that is the case, next causes for a 403 are as follows.</p><br/><br/><p>First is that you need to also have:</p><br/><br/><pre><code>&lt;Directory C:/Users/Marcos/Documents/mysite/apache&gt;<br/>Order deny,allow<br/>Allow from all<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>If you don't have that then Apache isn't being granted rights to serve a script from that directory and so will return FORBIDDEN (403).</p><br/><br/><p>Second is that you do have that, but don't acknowledge that you do, and that that directory or the WSGI script file is not readable by the user that the Apache service runs as under Windows.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERSEMATCH EXCEPT HELP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Try using:</p><br/><br/><pre><code>return HttpResponseRedirect(reverse('poll_results', kwargs={'object_id': p.id}))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHORTCUT FOR VARIABL CHECK AND ASSIGN
    </pattern>
    <template>
<![CDATA[<p>Assuming you want to leave myVariable untouched to its previous value in the "not exist" case,</p><br/><br/><pre><code>myVariable = testVariable or myVariable<br/></code></pre><br/><br/><p>deals with the first case, and</p><br/><br/><pre><code>myVariable = request.POST.get('query', myVariable)<br/></code></pre><br/><br/><p>deals with the second one. Neither has much to do with "exist", though (which is hardly a Python concept;-): the first one is about true or false, the second one about presence or absence of a key in a collection.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .. JOIN QUERI
    </pattern>
    <template>
<![CDATA[<p>If you're using models, the select_related method will return the object for any foreign keys you have set up (up to a limit you specify) within that model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEWS ARCHIV IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>An excellent place to start is the book <a href="http://www.apress.com/book/view/9781430219385" rel="nofollow">Practical Django Projects</a> by James Bennett.  Among other things, it guides you through the development of a web blog with multiple time-based views (by month, etc) that should serve you well as the basis for your application.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL GENER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Selects value '1' under the alias (column name) 'a' for each entry of table (or view) 'auth_user' if condition auth_user.id=2 holds.</p><br/><br/><p>In other words: it returns a single field ('a') with the value '1' for all users with id=2</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT A CROSSTAB SQL QUERI WITH DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>You can do this in the template as follows (assuming you are passing line_items to your template and also assuming store.name is a unique property):</p><br/><br/><pre><code>{% regroup line_items by store.name as store_items %}<br/>{% for store in store_items %}    <br/>  &lt;tr&gt;<br/>    &lt;td&gt;{{ store.grouper }}&lt;/td&gt;<br/>    {% for item in store.list %}<br/>      &lt;td&gt;{{ item.count }}&lt;/td&gt;<br/>    {% endfor %}<br/>  &lt;/tr&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>This would work if all stores have the same inventory, otherwise you'll need to fill the gaps in the view (returning 0's for missing inventory items, for example)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANI TEMPLAT QUESTION
    </pattern>
    <template>
<![CDATA[<p>From what I can see, I think you've got a small syntax error:</p><br/><br/><pre><code>{% photo.image %}<br/></code></pre><br/><br/><p>should instead be:</p><br/><br/><pre><code>{{ photo.image }}<br/></code></pre><br/><br/><p>The <code>{% %}</code> notation is used for django template tags. Variables, on the other hand, are expressed with the <code>{{ }}</code> notation.</p><br/><br/><p>To make it dynamic, you can take advantage of the fact that your <code>Photo</code> model has a foreign key to <code>Recipe</code>. This means that there will be a reverse relation from the <code>Recipe</code> instance you've loaded using the slug back to the set of photos:</p><br/><br/><pre><code>def details(request, slug='0'):<br/>    p = get_object_or_404(Recipe, slug=slug)<br/>    photos = p.photo_set.all()<br/></code></pre><br/><br/><p>Hopefully that will work for you. Glad to see you're enjoying working with Django!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTREM SLOW
    </pattern>
    <template>
<![CDATA[<p>I've posted <a href="http://serverfault.com/questions/47112/django-site-performance-problem">this question</a> on serverfault maybe it will help you. </p><br/><br/><p>If you are serving big static files - those will slow down response.</p><br/><br/><p>This will be the case in any mode if your mod_python or development server process big static files like images, client scripts, etc.</p><br/><br/><p>You want to configure the production server to handle those files directly - i.e. bypassing the modules.</p><br/><br/><p>btw, mod_wsgi is nowadays the preferred way to run django in the production environment.</p><br/><br/><p>If you have issues with system services or hardware then you might get some clues from <a href="http://www.cyberciti.biz/faq/linux-log-files-location-and-how-do-i-view-logs-files/" rel="nofollow">log messages</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORDPRESS BLOG PULL CONTENT FROM DJANGO PAGE
    </pattern>
    <template>
<![CDATA[<p>You can do this by outputting the content in Django as usuall and then making a Wordpress plugin with code for downloading it from Django's URL</p><br/><br/><blockquote><br/>  <p>readfile("http://yourdomain/your/django/view")</p><br/></blockquote><br/><br/><p>But it's <strong>a really bad idea</strong>. If you just want to use the wordpress theme port it to Django. This strange PHP/Python hybrid will be a nightmare to maintain, especially if at any point you decide to add more features or make it more dynamic.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS LIBRARI DIAGRAM FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>In the app django_extensions on google code.<br/>There is <a href="http://code.google.com/p/django-command-extensions/wiki/GraphModels" rel="nofollow">GraphModels</a> command</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPTI FIELD FALLBACK
    </pattern>
    <template>
<![CDATA[<p>There are two options here. The first is to create a method to look it up dynamically, but use the <code>property</code> decorator so that other code can still use straight attribute access.</p><br/><br/><pre><code>class MyModel(models.Model):<br/>    _first_name = models.CharField(max_length=100, db_column='first_name')<br/><br/>    @property<br/>    def first_name(self):<br/>        return self._first_name or self.user.first_name<br/><br/>    @first_name.setter<br/>    def first_name(self, value):<br/>       self._first_name = value<br/></code></pre><br/><br/><p>This will always refer to the latest value of first_name, even if the related User is changed. You can get/set the property exactly as you would an attribute: <code>myinstance.first_name = 'daniel'</code></p><br/><br/><p>The other option is to override the model's <code>save()</code> method so that it does the lookup when you save:</p><br/><br/><pre><code>def save(self, *args, **kwargs):<br/>    if not self.first_name:<br/>        self.first_name = self.user.first_name<br/>    # now call the default save() method<br/>    super(MyModel, self).save(*args, **kwargs)<br/></code></pre><br/><br/><p>This way you don't have to change your db, but it is only refreshed on save - so if the related User object is changed but this object isn't, it will refer to the old User value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENGIN NEEDINDEXERROR THE BUILT IN INDIC ARE NOT EFFICI ENOUGH FOR THI QUERI AND YOUR DATA. PLEAS ADD A COMPOSIT INDEX FOR THI QUERI
    </pattern>
    <template>
<![CDATA[<p>The general procedure recommended to fix <code>NeedIndexError</code> occurrences is <a href="http://groups.google.com/group/google-appengine/msg/36bf21bab219c376" rel="nofollow">this one</a>. I expect the composite index may not have been built on your development depending on the amount and structure of the data (which can change depending on <code>var1</code> value) but turns out to be needed (to avoid aborting the query for efficiency reasons, as the error msg hints and Nick confirms in this comment) when running on the actual store.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KOMODO EDIT CODE COMPLET FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>By sure Django is on your python path and Komodo should pick it up. Alternatively you can add the location of Django to where Komodo looks for its autocomplete.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO INCLUD INLIN MODEL FIELD IN THE LIST DISPLAY
    </pattern>
    <template>
<![CDATA[<p>You've mentioned the only solution - creating a callable. There's currently no other way to do it, and yes this does mean you can't sort by that column. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX FORMAT CONVENT
    </pattern>
    <template>
<![CDATA[<p>I do both. Sometimes I have short template snippets that I <code>{% include %}</code> in the big page template.  It is often more DRY to render these and return the html to insert into the DOM (since the code is already set-up) than to have to write JS to do it (again). Other times, I just generate some JSON and inject that into the DOM.</p><br/><br/><p>Shortly, you can mix and match for the situation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON IS THERE A SIMPL WAY TO CONVERT PHP STYLE BRACKET POST KEY TO MULTIDIMENSION DICT
    </pattern>
    <template>
<![CDATA[<p>I made a little parser in python to handle multidimensional dicts, you can find it at <a href="https://github.com/bernii/querystring-parser" rel="nofollow">https://github.com/bernii/querystring-parser</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO GAE
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/p/approcket/" rel="nofollow">approcket</a> can mysql⇌gae or gae builtin remote api from google </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RELAT TO REVERS FUNCTION AND KWARG
    </pattern>
    <template>
<![CDATA[<p>Didn't you look at the <a href="http://code.djangoproject.com/browser/django/trunk/django/core/urlresolvers.py#L305" rel="nofollow">signature</a>,</p><br/><br/><pre><code>def reverse(viewname, urlconf=None, args=None, kwargs=None, <br/>                      prefix=None, current_app=None):<br/></code></pre><br/><br/><p>takes no <code>**kwargs</code> at all.</p><br/><br/><pre><code>kwargs={"year":2009,"month":9}<br/>reverse("name",**kwargs)<br/></code></pre><br/><br/><p>means </p><br/><br/><pre><code>reverse("name", year=2009, month=9)<br/></code></pre><br/><br/><p>which is completely different from </p><br/><br/><pre><code>reverse("name",kwargs={"year":2009,"month":9})<br/></code></pre><br/><br/><p>When a function actually does take <code>**kwargs</code>, both ways to call it are the same. But that's not the case here. Reverse would have look like this to take <code>**kwargs</code>:</p><br/><br/><pre><code>def reverse(viewname, urlconf=None, prefix=None, <br/>                      current_app=None, *args, **kwargs):<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RANK WITHIN DJANGO ORM OR SQL
    </pattern>
    <template>
<![CDATA[<p>To get the ranking of the user:</p><br/><br/><pre><code>(SELECT * FROM (<br/>  SELECT<br/>    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,<br/>    Id,<br/>    Username,<br/>    Score, karma<br/>  FROM Players <br/>) AS players_ranked_by_score<br/>where Id = id_of_user <br/></code></pre><br/><br/><p>Where id_of_user is the parameter containing the id of the current player. To get the neighboring players <strong>and</strong> the current user:</p><br/><br/><pre><code>(SELECT * FROM (<br/>  SELECT<br/>    RANK() OVER (ORDER BY Score desc ,Karma desc) AS ranking,<br/>    Id,<br/>    Username,<br/>    Score, karma<br/>  FROM Players <br/>) AS all_players_ranked<br/>where ranking &gt;= player_ranking - 2 and ranking &lt;= player_ranking + 2;<br/></code></pre><br/><br/><p>Where player_ranking is the ranking obtained from the query above.</p><br/><br/><p>Hope it helps!</p><br/><br/><p><strong>Update</strong>: MySQL does not have a rank() function (MS SQL, Oracle, Postgres have one). I looked around and I got this link explaining how to do ranking in MySQL: <a href="http://www.artfulsoftware.com/infotree/queries.php?&amp;bw=1024#460" rel="nofollow">http://www.artfulsoftware.com/infotree/queries.php?&amp;bw=1024#460</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL REFACTOR AND MIGRAT
    </pattern>
    <template>
<![CDATA[<p>Have you looked at using a migration tool such as <a href="http://south.aeracode.org/" rel="nofollow">South</a> or <a href="http://code.google.com/p/django-evolution/" rel="nofollow">django-evolution</a>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REUSEABL APP
    </pattern>
    <template>
<![CDATA[<p>James Bennett's <a href="http://rads.stackoverflow.com/amzn/click/1430219386" rel="nofollow">Practical Django Projects</a> does a pretty good job of covering those topics in general and even includes a chapter specifically on "Writing Reusable Django Applications" that goes through an example of splitting one of the example projects in the book out into its own app.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID USERNAM AND PASSWORD DURE DJANGO AUTHENT
    </pattern>
    <template>
<![CDATA[<p>This is not a function of the backend simply the authentication form. Just rewrite the form to display the errors you want for each field. Write a login view that use your new form and make that the default login url. (Actually I just saw in a recent commit of Django you can now pass a custom form to the login view, so this is even easier to accomplish). This should take about 5 minutes of effort. Everything you need is in django.contrib.auth.</p><br/><br/><p>To clarify here is the current form:</p><br/><br/><pre><code>class AuthenticationForm(forms.Form):<br/>    """<br/>    Base class for authenticating users. Extend this to get a form that accepts<br/>    username/password logins.<br/>    """<br/>    username = forms.CharField(label=_("Username"), max_length=30)<br/>    password = forms.CharField(label=_("Password"), widget=forms.PasswordInput)<br/><br/>    def __init__(self, request=None, *args, **kwargs):<br/>        """<br/>        If request is passed in, the form will validate that cookies are<br/>        enabled. Note that the request (a HttpRequest object) must have set a<br/>        cookie with the key TEST_COOKIE_NAME and value TEST_COOKIE_VALUE before<br/>        running this validation.<br/>        """<br/>        self.request = request<br/>        self.user_cache = None<br/>        super(AuthenticationForm, self).__init__(*args, **kwargs)<br/><br/>    def clean(self):<br/>        username = self.cleaned_data.get('username')<br/>        password = self.cleaned_data.get('password')<br/><br/>        if username and password:<br/>            self.user_cache = authenticate(username=username, password=password)<br/>            if self.user_cache is None:<br/>                raise forms.ValidationError(_("Please enter a correct username and password. Note that both fields are case-sensitive."))<br/>            elif not self.user_cache.is_active:<br/>                raise forms.ValidationError(_("This account is inactive."))<br/><br/>        # TODO: determine whether this should move to its own method.<br/>        if self.request:<br/>            if not self.request.session.test_cookie_worked():<br/>                raise forms.ValidationError(_("Your Web browser doesn't appear to have cookies enabled. Cookies are required for logging in."))<br/><br/>        return self.cleaned_data<br/><br/>    def get_user_id(self):<br/>        if self.user_cache:<br/>            return self.user_cache.id<br/>        return None<br/><br/>    def get_user(self):<br/>        return self.user_cache<br/></code></pre><br/><br/><p>Add:</p><br/><br/><pre><code>def clean_username(self):<br/>    username = self.cleaned_data['username']<br/>    try:<br/>        User.objects.get(username=username)<br/>    except User.DoesNotExist:<br/>        raise forms.ValidationError("The username you have entered does not exist.")<br/>    return username<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERHEAD OF A ROUND TRIP TO MYSQL
    </pattern>
    <template>
<![CDATA[<p>There are some ways to reduce the query volume.</p><br/><br/><ol><br/><li><p>Use <code>.filter()</code> and <code>.all()</code> to get a bunch of things; pick and choose in the view function (or template via <code>{%if%}</code>).  Python can process a batch of rows faster than MySQL.  </p><br/><br/><p>"But I could send too much to the template".   True, but you'll execute fewer SQL requests.  Measure to see which is better.</p><br/><br/><p>This is what you used to do when you wrote SQL.  It's not wrong -- it doesn't break the ORM -- but it optimizes the underlying DB work and puts the processing into the view function and the template.</p></li><br/><li><p>Avoid query navigation in the template.  When you do {{foo.bar.baz.quux}}, SQL is used to get the <code>bar</code> associated with <code>foo</code>, then the <code>baz</code> associated with the <code>bar</code>, then the <code>quux</code> associated with <code>baz</code>.  You may be able to reduce this query business with some careful <code>.filter()</code> and Python processing to assemble a useful tuple in the view function.</p><br/><br/><p>Again, this was something you used to do when you hand-crafted SQL.  In this case, you gather larger batches of ORM-managed objects in the view function and do your filtering in Python instead of via a lot of individual ORM requests. </p><br/><br/><p>This doesn't break the ORM.  It changes the usage profile from lots of little queries to a few bigger queries.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW CAN I GET PERMALINK TO WORK WITH THROWAWAY SLUG
    </pattern>
    <template>
<![CDATA[<p>One thing to check for, because I also ran into this problem:</p><br/><br/><pre><code>(?P&lt;name_slug&gt;\w+)<br/></code></pre><br/><br/><p>Is slugify adding hyphens anywhere?  If so the regex won't match, hypens are a non-word character.  To fix use <code>[\w-]+</code> or similar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPORARI FIELD TO A MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can define a foreign key to non-materialized django model which stores the info you require.</p><br/><br/><p>To do so, in the new model to which foreign key (or a OnetoOne Key) is defined, just place</p><br/><br/><pre><code>class _meta:<br/>    managed = False<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND IGNOR ALL FILE THAT HAVE AN EXTENS FROM A GIT REPOSITORI
    </pattern>
    <template>
<![CDATA[<p>Plenty of ways to remove them:</p><br/><br/><pre><code>git ls-files | grep '\.pwc$' | xargs git rm<br/><br/>find . -name *.pwc | xargs git rm<br/></code></pre><br/><br/><p>Note: If you haven't committed them, just use <code>rm</code>, not <code>git rm</code>.</p><br/><br/><p>To ignore them in the future, simply add *.pwc to the .gitignore. (If you don't have one, create a file named .gitignore at the top level of your repository, and just add a single line saying "*.pwc")</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR DJANGO FOR LIFERAY
    </pattern>
    <template>
<![CDATA[<p>Liferay is written in 100% Java. </p><br/><br/><p>I don't know if there even exist a portlet in Python/Django. There is a Ruby/Rails bridge for Liferay Portlets <a href="http://rails-portlet.rubyforge.org/" rel="nofollow">http://rails-portlet.rubyforge.org/</a> , but I would definitely go for Java.</p><br/><br/><p>(Liferay) Portlets are based on Java Standards (JSR-268, JSR-186) so Java is the way to go. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV FOR DJANGO DEVELOP ON WINDOWS
    </pattern>
    <template>
<![CDATA[<p>site.cfg in the same dir as setup.py was looking for the wrong regsitry key, at the end of the file is </p><br/><br/><pre><code># The Windows registry key for MySQL.<br/># This has to be set for Windows builds to work.<br/># Only change this if you have a different version.<br/>registry_key = SOFTWARE\MySQL AB\MySQL Server 5.0<br/></code></pre><br/><br/><p>I dipped into the registry and found HKEY_LOCAL_MACHINE\SOFTWARE\MySQL AB\ and saw i had 5.1 instead,</p><br/><br/><p>reporting another error now, but this question is solved at least ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL USE MYSQL FUNCTION
    </pattern>
    <template>
<![CDATA[<p>I would define a <a href="http://docs.djangoproject.com/en/dev/howto/custom-model-fields/" rel="nofollow">custom modelfield</a> for the column you want encrypted/decrypted. Override the <code>to_python</code> method to run the decryption when the model is loaded, and <code>get_db_prep_value</code> to run the encryption on saving.</p><br/><br/><p>Remember to set the field's metaclass to <code>models.SubfieldBase</code> otherwise these methods won't be called.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIVAT DOWNLOAD AREA WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>So, searching I found <a href="http://groups.google.com/group/django-users/browse%5Fthread/thread/92a97bee7ab168b5" rel="nofollow">this</a> discussion thread.</p><br/><br/><p>There were three things said you might be interested in.</p><br/><br/><p>First there is the mod_python <a href="http://docs.djangoproject.com/en/dev/howto/apache-auth/" rel="nofollow">method</a><br /><br/>Then there is the mod_wsgi <a href="http://code.google.com/p/modwsgi/wiki/AccessControlMechanisms" rel="nofollow">method</a></p><br/><br/><p>Both of which don't seem all that great.</p><br/><br/><p>Better is the X-Sendfile header which isn't fully standard, but works at least within apache, and lighttpd.</p><br/><br/><p>kibbitzing from <a href="http://john.guen.in/past/2007/4/17/send%5Ffiles%5Ffaster%5Fwith%5Fxsendfile/" rel="nofollow">here</a>, we have the following.</p><br/><br/><pre><code>@login_required<br/>def serve_file(request, context):<br/>    if &lt;check if they have access to the file&gt;:<br/>        filename = "/var/www/myfile.xyz" <br/>        response = HttpResponse(mimetype='application/force-download') <br/>        response['Content-Disposition']='attachment;filename="%s"'%filename<br/>        response["X-Sendfile"] = filename<br/>        response['Content-length'] = os.stat("debug.py").st_size<br/>        return response<br/>    return &lt;error state&gt;<br/></code></pre><br/><br/><p>and that should be almost exactly what you want. Just make sure you turn on X-Sendfile support in whatever you happen to be using.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A USER LIST USE A USERPROFIL FIELD IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>You may want to take a look in to using a custom manager for the <code>admin_objects</code> of your model.</p><br/><br/><pre><code>class UserAdminManager(models.AdminManager):<br/>"""<br/>Custom manager for the User model.<br/>"""<br/>def get_query_set(self):<br/>    """<br/>    Overwrites the get_query_set to only return Users in the queue.<br/>    """<br/>    return super(UserAdminManager, self).get_query_set().filter(userprofile__queue=True)<br/></code></pre><br/><br/><p>By overwriting the <code>get_query_set</code> method you can filter the results. Then just assign this to the <code>admin_objects</code> property of your <code>User</code> model.</p><br/><br/><pre><code>admin_objects = UserAdminManager()<br/></code></pre><br/><br/><p>Some of the property names in my example may be wrong, as I don't know your model setup, but hopefully you get the idea.</p><br/><br/><p>You can research this further by checking out the django docs and searching for "custom managers".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO MODEL DEFIN A IP RANG WITH TWO INT FIELD ( IP MASK )
    </pattern>
    <template>
<![CDATA[<p>The QuerySet API in Django 1.0 now includes the 'extra' method, described <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra" rel="nofollow">here</a> in the Django docs. The extra method allows you to pass custom WHERE clauses to your QuerySet, which should allow you to use the bitwise comparison you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO IMAG IN JAVASCRIPT OR PYTHON
    </pattern>
    <template>
<![CDATA[<p>Here is code:</p><br/><br/><p><a href="http://github.com/AdamN/python-webkit2png/" rel="nofollow">http://github.com/AdamN/python-webkit2png/</a></p><br/><br/><p>It requires webkit, xvfb (or X) and Qt4, and works best on Ubuntu.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTOMAT REBUILD THE SPHINX INDEX UNDER DJANGO SPHINX
    </pattern>
    <template>
<![CDATA[<p>There are basically two primary strategies for building search indexes:</p><br/><br/><ol><br/><li>Indexer <strong>internal</strong> to a database server, which indexes on the fly as records are inserted or deleted.</li><br/><li>Indexer <strong>external</strong> to the database (which may or may not be a RDMS which is why I leave off the word server), which indexes periodically.</li><br/></ol><br/><br/><p>The first strategy has the obvious advantage of being closer to real-time but possibly a huge disadvantage in performance.  Most database servers with internal indexers have performance problems (or else missing features), see for example Jeff Atwood discussing performance problems in SQL Server 2008 in his blog post about <a href="http://blog.stackoverflow.com/2008/10/adde-a-second-server/" rel="nofollow">adding a second server for stackoverflow</a>.</p><br/><br/><p>The second strategy isn't as real-time but generally has best performance,  Unfortunately this also means, because it isn't built-in, it has to be invoked externally somehow.</p><br/><br/><p>Obviously you have no choice with <a href="http://www.sphinxsearch.com/" rel="nofollow">Sphinx</a>, it being an external indexer.   You must invoke the sphinx indexer from cron or some other scheduling mechanism.</p><br/><br/><p>To speed up indexing just run it often from cron.  If that causes performance issues then you need to implement a <a href="http://www.sphinxsearch.com/docs/current.html#live-updates" rel="nofollow">live-update strategy</a> which involves indexing new records very frequently into a delta index and then periodically merging the delta index into the primary index.  This would be done external to Django so it doesn't affect anything in <a href="http://github.com/dcramer/django-sphinx" rel="nofollow">django-sphinx</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ICALENDAR EMAIL ATTACH WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>As stated before, there is <a href="http://vobject.skyhouseconsulting.com/">vobject</a>, that is working fine (I have used it recently). </p><br/><br/><p>You can find good information about ical, vobject and django in this blog post : </p><br/><br/><p><a href="http://blog.thescoop.org/archives/2007/07/31/django-ical-and-vobject/">http://blog.thescoop.org/archives/2007/07/31/django-ical-and-vobject/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO VIEW WITH DECOR
    </pattern>
    <template>
<![CDATA[<p>Three more ways to do it, though you'll need to use your own urlconf for these:</p><br/><br/><ol><br/><li><p>Add the decorator to the view directly in the urlconf:</p><br/><br/><pre><code>...<br/>(regexp, decorator(view)),<br/>...<br/></code></pre><br/><br/><p>You need to import the view and the decorator into the urlconf though, which is why I don't like this one. I prefer to have as few imports in my urls.py's as possible.</p></li><br/><li><p>Import the view into an <code>&lt;app&gt;/views.py</code> and add the decorator there:</p><br/><br/><pre><code>import view<br/><br/><br/>view = decorator(view)<br/></code></pre><br/><br/><p>Pretty much like Vinay's method though more explicit since you need an urlconf for it.</p></li><br/><li><p>Wrap the view in a new view:</p><br/><br/><pre><code>import view<br/><br/><br/>@decorator<br/>def wrapperview(request, *args, **kwargs):<br/>    ... other stuff ...<br/>    return view(request, *args, **kwargs)<br/></code></pre><br/><br/><p>The last one is very handy when you need to change generic views. This is what I often end up doing anyway.</p></li><br/></ol><br/><br/><p>Whenever you use an urlconf, order of patterns matter, so you might need to shuffle around on which pattern gets called first.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIMIT AN SQL QUERI TO BE NONDESTRUCT
    </pattern>
    <template>
<![CDATA[<p>Connect with a user that has only been granted SELECT permissions. Situations like this is why permissions exist in the first place.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL FILE IN DJANGO THROUGH ONE FORM FIELD
    </pattern>
    <template>
<![CDATA[<p><a href="https://github.com/tstone/django-uploadify" rel="nofollow">https://github.com/tstone/django-uploadify</a> is a reusable Django app that integrates <a href="http://uploadify.com" rel="nofollow">http://uploadify.com</a>.</p><br/><br/><p>From Uploadify's website: </p><br/><br/><blockquote><br/>  <p>Uploadify is a jQuery plugin that integrates a fully-customizable multiple file upload utility on your website.  It uses a mixture of Javascript, ActionScript, and any server-side language to dynamically create an instance over any DOM element on a page.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAFE PYTHON HTML TEXT FORMAT ( ALA TEXTIL )
    </pattern>
    <template>
<![CDATA[<p>If you're using Django, you could try safe markdown:</p><br/><br/><pre><code>{% load markup %}<br/><br/>{{ foo|markdown:"safe" }}<br/></code></pre><br/><br/><p>You'll need to have markdown installed, and <code>django.contrib.markup</code> in your <code>settings.py</code> apps.</p><br/><br/><p>If you want to sanitize HTML on save, I've had good luck using feedparser's sanitize (<a href="http://www.feedparser.org/" rel="nofollow">http://www.feedparser.org/</a>). </p><br/><br/><pre><code>import feedparser<br/><br/>body = feedparser._sanitizeHTML(body, 'utf8')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INPUT STRING WITHOUT USE THE DJANGO FORM CLASS
    </pattern>
    <template>
<![CDATA[<p>Django Form models aren't just about rendering forms, they're more about processing and sanitizing form (GET/POST) input, which <em>is</em> what you want to do. When the POST or GET data from your AJAX request reaches your server it's essentially indistinguishable from form data. I would advocate creating a Form model that is a <em>model of your AJAX request</em>. </p><br/><br/><p>Think of an example POST:</p><br/><br/><pre><code>POST /login.jsp HTTP/1.1<br/>Host: www.mysite.com<br/>User-Agent: Mozilla/4.0<br/>Content-Length: 27<br/>Content-Type: application/x-www-form-urlencoded<br/><br/>userid=joe&amp;password=guessme<br/></code></pre><br/><br/><p>That could have come from an AJAX request OR a form, by the time it hits your server it doesn't really matter! Sure they're called Form models because that's usually where GET or POST data comes from, but it doesn't <em>have</em> to be from a form :)</p><br/><br/><p>If you create a Form model to represent your AJAX request you get all the hooks and sanitization that come with it and it's all a little more "django-esque". </p><br/><br/><p><strong>Update</strong> regarding your comment:</p><br/><br/><p>I imagine you'd have multiple form classes. Obviously I don't know how your system is designed, but I'll provide what advice I can.</p><br/><br/><p>Like you said, you'll be using this to sanitize your data so you'll want to define your Form classes based on the data you're sending. For example, if I have an AJAX request that submits a comment with Name, Email and CommentBody data that would be one Form class. If I have another AJAX request that posts a new article that sends Title, Author and ArticleBody that would be another Form class.</p><br/><br/><p>Not all your AJAX requests will necessarily need a Form, if you have an AJAX call that votes up a comment you probably wouldn't treat that as a form, since (I'm guessing) you wouldn't need to sanitize any data.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORDPRESS IN A DJANGO SUBDIRECTORI
    </pattern>
    <template>
<![CDATA[<pre><code>AddHandler fastcgi-script .fcgi<br/>RewriteEngine On<br/>RewriteRule ^(/media.*)$ /$1 [QSA,PT]<br/>RewriteRule ^(/adminmedia.*)$ /$1 [QSA, PT]<br/>RewriteCond %{REQUEST_FILENAME} !-f<br/>RewriteCond %{REQUEST_URI} !^/blog(/.*)?$<br/>RewriteRule ^(.*)$ dispatch.fcgi/$1 [QSA,L]<br/></code></pre><br/><br/><p>See that extra <code>RewriteCond</code>? Basically says "if the request is <strong>not</strong> <code>/blog</code> or <code>/blog/whatever</code>, <em>then</em> rewrite requests to <code>dispatch.fcgi</code></p><br/><br/><p>In your WordPress <code>.htaccess</code> inside <code>/blog</code>, you should add the line <code>RewriteBase /blog/</code> right after the <code>RewriteEngine On</code> statement.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT CONTAIN DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>The correct way to do this would be:</p><br/><br/><pre><code>from django.utils import simplejson<br/>from django.core import serializers<br/>from django.db.models.query import QuerySet<br/><br/>class HandleQuerySets(simplejson.JSONEncoder):<br/>     """ simplejson.JSONEncoder extension: handle querysets """<br/>     def default(self, obj):<br/>         if isinstance(obj, QuerySet):<br/>             return serializers.serialize("python", obj, ensure_ascii=False)<br/>         return simplejson.JSONEncoder.default(self, obj)<br/></code></pre><br/><br/><p>Because <code>serializers.serialize("json", [...])</code> returns a string ; if you ask for the <code>python</code> serializer, you get a dictionnary, and json encodes whatever is returned by your encoder's <code>default</code> method. Look at the <a href="http://docs.python.org/library/json.html#module-json" rel="nofollow">json documentation</a> for details.</p><br/><br/><p>You will have to handle more types in your encoder class (such as datetime objects), but you get the idea.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REST WEBSERVIC WITH PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>There is also <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">piston</a>, which is a Django framework for creating RESTful APIs.  It has a slight learning curve, but nicely fits into Django.  </p><br/><br/><p>If you want something more lightweight, Simon Willison has very <a href="http://www.djangosnippets.org/snippets/1071/" rel="nofollow">nice snippet</a> that I have used previously that nicely models the HTTP methods:</p><br/><br/><pre><code>class ArticleView(RestView):<br/><br/>    def GET(request, article_id):<br/>        return render_to_response("article.html", {<br/>            'article': get_object_or_404(Article, pk = article_id),<br/>        })<br/><br/>    def POST(request, article_id):<br/>        # Example logic only; should be using django.forms instead<br/>        article = get_object_or_404(Article, pk = article_id)<br/>        article.headline = request.POST['new_headline']<br/>        article.body = request.POST['new_body']<br/>        article.save()<br/>        return HttpResponseRedirect(request.path)<br/></code></pre><br/><br/><p>Jacob Kaplan-Moss has a nice article on <a href="http://jacobian.org/writing/rest-worst-practices/" rel="nofollow">Worst Practices in REST</a> that can help guide you away from some common pitfalls.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD FROM DIFFER PYTHON FILE
    </pattern>
    <template>
<![CDATA[<p>Python has module level and class level methods. In this concept a "module" is a very special class that you get by using <code>import</code> instead of <code>Name()</code>. Try</p><br/><br/><pre><code>from Example1.views import adder as otherAdder<br/></code></pre><br/><br/><p>to get access to the module level method. Now you can call <code>otherAdder()</code> and it will execute the code in the other module. Note that the method will be executed in the context of <code>Example1.views</code>, i.e. when it references things, it will look there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPEED FOR MYSQL TABL CREATION IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I have found that using sqlite as a replacement makes my unit tests much faster. I'm also removing southdb, as this slows down table creation too.</p><br/><br/><pre><code>if len(sys.argv) &gt; 1 and sys.argv[1] == 'test':<br/>    DATABASES = {<br/>        'default': {<br/>            'ENGINE': 'django.db.backends.sqlite3',<br/>            'NAME': ':memory',<br/>            'USER': '',<br/>            'PASSWORD': '',<br/>            'HOST': '',<br/>            'PORT': '',<br/>        }<br/>    }<br/>    INSTALLED_APPS = tuple([x for x in INSTALLED_APPS if x != 'south'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEKIT FUNCTION
    </pattern>
    <template>
<![CDATA[<p>ImageKit can generate the image sizes you need, but you'll have to use your own JS and/or CSS to handle the rollover effect on the client side.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO GENER AN ADMIN PANEL WITHOUT MODEL
    </pattern>
    <template>
<![CDATA[<p>I think there might be a simpler way than writing custom ORMS to get the admin integration you want. I used it in an app that allows managing Webfaction email accounts via their Control Panel API.</p><br/><br/><p>Take a look at models.py, admin.py and urls.py here: <a href="http://code.google.com/p/django-webfaction/" rel="nofollow">django-webfaction</a></p><br/><br/><p>To create an entry on the admin index page use a dummy model that has managed=False</p><br/><br/><p>Register that model with the admin.</p><br/><br/><p>You can then intercept the admin urls and direct them to your own views. </p><br/><br/><p>This makes sense if the add/edit/delete actions the admin provides make sense for your app. Otherwise you are better off overriding the admin index or changelist templates to include your own custom actions</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR WITH ARGUMENT ( ) AND KEYWORD ARGUMENT NOT FOUND
    </pattern>
    <template>
<![CDATA[<p>There are 3 things I can think of off the top of my head:</p><br/><br/><ol><br/><li>Just used <a href="http://docs.djangoproject.com/en/dev/topics/http/urls/#naming-url-patterns">named urls</a>, it's more robust and maintainable anyway</li><br/><li><p>Try using <code>django.core.urlresolvers.reverse</code> at the command line for a (possibly) better error</p><br/><br/><pre><code>&gt;&gt;&gt; from django.core.urlresolvers import reverse<br/>&gt;&gt;&gt; reverse('products.views.filter_by_led')<br/></code></pre></li><br/><li><p>Check to see if you have more than one url that points to that view</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESTRUCTUREDTEXT TO ADD A CLASS TO EVERI HTML P TAG
    </pattern>
    <template>
<![CDATA[<p>You don't say why you want to add a class to every paragraph, but it might be easier to take a different approach.  For example, if you are trying to style the paragraphs, you can use a different CSS technique to select all the paragraphs in the output:</p><br/><br/><p>CSS:</p><br/><br/><pre><code>div.resttext p {<br/>    /* all the styling you want... */<br/>}<br/></code></pre><br/><br/><p>HTML:</p><br/><br/><pre><code>&lt;div class='resttext'&gt;<br/>&lt;p&gt;Blah&lt;/p&gt;<br/>&lt;p&gt;Bloo&lt;/p&gt;<br/>&lt;/div&gt;<br/></code></pre><br/><br/><p>Update: since you are trying to use hyphenator.js, I would suggest using its <code>selectorfunction</code> setting to select the elements differently:</p><br/><br/><pre><code>Hyphenator.config({<br/>    selectorfunction: function () {<br/>        /* Use jQuery to find all the REST p tags. */<br/>        return $('div.resttext p');<br/>        }<br/>    });<br/>Hyphenator.run();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ARGUMENT TO A DECOR
    </pattern>
    <template>
<![CDATA[<p>I hope <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845" rel="nofollow">this</a> article by Bruce Eckel helps.</p><br/><br/><p><strong>Upd:</strong><br/>According to the article your code will look like this:</p><br/><br/><pre><code>class no_share(object):<br/>    def __init__(self, arg1):<br/>        self.arg1 = arg1<br/><br/>    def __call__(self, f):<br/>        """Don't let them in if it's shared"""<br/><br/>        # Do something with the argument passed to the decorator.<br/>        print 'Decorator arguments:', self.arg1<br/><br/>        def wrapped_f(request, *args, **kwargs):<br/>            if kwargs.get('shared', True):<br/>                from django.http import Http404<br/>                raise Http404('not availiable for sharing')<br/>            f(request, *args, **kwargs)            <br/>        return wrapped_f<br/></code></pre><br/><br/><p>to be used as desired:</p><br/><br/><pre><code>@no_share('prefs')<br/>def prefs(request, [...])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.1.1 HOW SHOULD I STORE AN EMPTI IP ADDRESS USE POSTGRESQL
    </pattern>
    <template>
<![CDATA[<p>If you can convince the devs to accept one of the patches, I'd say just run a patched copy of Django until the patched version lands. If not, then it might be less headache to just use a sentinel value, as you suggested, even though it is a hack. You might also just use a regular <code>CharField</code> instead of an <code>IPAddressField</code>, but then you get stuck having to maintain validation logic on your own.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.1 COMMENT RENDER COMMENT FORM RETURN TEMPLATESYNTAXERROR
    </pattern>
    <template>
<![CDATA[<p>I had the same exact problem, render_comment_form template tag was triggering it.</p><br/><br/><p>The issue is certainly with your URL config, you had it set the same way i did:</p><br/><br/><pre><code>(r'^comments/$', include('django.contrib.comments.urls'))<br/></code></pre><br/><br/><p><strong>The correct way is to remove the '$' after 'comments/':</strong></p><br/><br/><pre><code>(r'^comments/', include('django.contrib.comments.urls'))<br/></code></pre><br/><br/><p>Otherwise django can't properly include all necessary urls under the path comments/...</p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RABBITMQ GIVE A ACCESS REFUS LOGIN REFUS FOR USER ERROR WHEN ATTEMPT TO FOLLOW THE CELERI TUTORI
    </pattern>
    <template>
<![CDATA[<p>Are you running django?<br/>If so, then try this:</p><br/><br/><pre><code>&gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection<br/>&gt;&gt;&gt; c = DjangoBrokerConnection()<br/>&gt;&gt;&gt; c.connection<br/></code></pre><br/><br/><p>Does it give the same thing?<br/>Are you sure you're connecting to the right hostname, and that the username and password has access to the virtual host?</p><br/><br/><p>UPDATE:</p><br/><br/><pre><code>&gt;&gt;&gt; from carrot.connection import DjangoBrokerConnection<br/>&gt;&gt;&gt; c = DjangoBrokerConnection()<br/>&gt;&gt;&gt; for n in ("host", "userid", "password", "virtual_host", "ssl"):<br/>...     print("%s -&gt; %s" % (n, repr(getattr(c, n, None))))<br/></code></pre><br/><br/><p>UPDATE: You have to do the above before running c.connection, as the connection is established lazily in carrot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQLDB FOR DJANGO ( JYTHON )
    </pattern>
    <template>
<![CDATA[<p>MySQLdb is the CPython MySQL library, so it won't work with Jython.</p><br/><br/><p>You'll want to use zxJDBC to connect to MySQL from Jython:<br/><a href="http://jython.org/Project/userguide.html#database-connectivity-in-jython" rel="nofollow">http://jython.org/Project/userguide.html#database-connectivity-in-jython</a></p><br/><br/><p>You'll need to add the MySQL jdbc jar to your classpath</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TAG COUNT AND ORDER TOP TAG ( IS THERE A CLEANER SOLUT TO MINE )
    </pattern>
    <template>
<![CDATA[<p>Django's <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#regroup" rel="nofollow"><code>{% regroup %}</code></a> template tag might be useful for this. Assuming <code>tags</code> is in the context of your template:</p><br/><br/><pre><code>{% regroup tags|dictsort:"count" by count as sorted_tags %}<br/>...<br/>{% for count in sorted_tags %}<br/>...<br/>    {% for tag in count %}<br/>    ...<br/>    {% endfor %}<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( WSGI ) AND WORDPRESS COEXIST IN APACH VIRTUALHOST
    </pattern>
    <template>
<![CDATA[<p>Replace:</p><br/><br/><pre><code>DocumentRoot /var/empty<br/></code></pre><br/><br/><p>with:</p><br/><br/><pre><code>DocumentRoot /home/zach/projects/python/myproject/wordpress<br/></code></pre><br/><br/><p>Remove:</p><br/><br/><pre><code>Alias / /home/zach/projects/python/myproject/wordpress/<br/></code></pre><br/><br/><p>Replace:</p><br/><br/><pre><code>WSGIScriptAlias /accounts /home/zach/projects/python/myproject/app/privio.wsgi<br/>WSGIScriptAlias /studio /home/zach/projects/python/myproject/app/privio.wsgi<br/></code></pre><br/><br/><p>with:</p><br/><br/><pre><code>WSGIScriptAliasMatch ^(/(accounts|studio)) /home/zach/projects/python/myproject/app/privio.wsgi$1<br/></code></pre><br/><br/><p>In other words, use DocumentRoot to refer to wordpress that needs to be at root of site and not Alias directive.</p><br/><br/><p>The WSGIScriptAliasMatch is so Django itself thinks it is still mounted at root site even though only nominated sub URLs of it are actually passed through. This simplifies things for urls.py.</p><br/><br/><p>Note that the $1 at end of WSGI script path is important, so don't leave it off.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAD SUCCESS GET DJANGO TO SEND EMAIL WHEN HOST ON DREAMHOST
    </pattern>
    <template>
<![CDATA[<p>As proposed by S.Mark, you can use gmail. Here is what you need in your settings.py</p><br/><br/><pre><code>ADMINS = (<br/>    ('Your Name', 'your_name@email.com'),<br/>)<br/><br/>EMAIL_HOST = 'smtp.gmail.com'<br/>EMAIL_PORT = 587<br/>EMAIL_HOST_PASSWORD = 'password'<br/>EMAIL_HOST_USER = 'gmail_account'<br/>EMAIL_SUBJECT_PREFIX = 'something'<br/>EMAIL_USE_TLS = True<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO RESPONS GIVE TEMPLATEDOESNOTEXIST
    </pattern>
    <template>
<![CDATA[<p>It seems like Django will only load templates if they're in a directory you define in <code>TEMPLATE_DIRS</code>, even if they exist elsewhere.</p><br/><br/><p>Try this in settings.py:</p><br/><br/><pre><code>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))<br/># Other settings...<br/>TEMPLATE_DIRS = (<br/>    os.path.join(PROJECT_ROOT, "templates"),<br/>)<br/></code></pre><br/><br/><p>and then in the view:</p><br/><br/><pre><code>return render_to_response("payment.html", self.context, RequestContext(self.request))<br/># or<br/>return render_to_response("subdir/payment.html", self.context, RequestContext(self.request))<br/></code></pre><br/><br/><p>This would render either <code>E:\path\to\project\templates\payment.html</code> or <code>E:\path\to\project\templates\subdir\payment.html</code>. The point is that they're inside of the directory we specified in settings.py.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADD COMMON DATE AD DATE MODIFI TO MANI MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Since you're new to Django, you might find the Django Command Extensions useful:</p><br/><br/><p><a href="http://code.google.com/p/django-command-extensions/" rel="nofollow">http://code.google.com/p/django-command-extensions/</a></p><br/><br/><p>... which conveniently includes a TimeStampedModel which you can derive your Models from:</p><br/><br/><p><a href="http://code.google.com/p/django-command-extensions/wiki/ModelExtensions" rel="nofollow">http://code.google.com/p/django-command-extensions/wiki/ModelExtensions</a></p><br/><br/><blockquote><br/>  <p>An abstract base class model that provides self-managed "created" and "modified" fields. </p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHAT S WRONG WITH MY SIMPL AJAX EXPERI
    </pattern>
    <template>
<![CDATA[<p>jQuery 1.4 won't parse invalid JSON. As Alex Gaynor mentioned, your JSON is invalid, since it's using single quotes, rather than double quotes.</p><br/><br/><p>Writing JSON by hand is silly. Use a library to convert python datatypes to JSON. Again, as Alex mentioned, Django ships simplejson for you already. Alternatively, if you're using Python2.6 or later, json is part of the standard library <a href="http://docs.python.org/library/json.html" rel="nofollow">http://docs.python.org/library/json.html</a></p><br/><br/><pre><code>from django.http import HttpResponse<br/>from django.utils import simplejson<br/><br/>def test(request):<br/>    if request.is_ajax(): <br/>        post_text = request.POST.get("post_data")<br/>        response_dict = {'response_text': '"+post_text+" recieved.'}<br/>        return HttpResponse(simplejson.dumps(response_dict), mimetype="application/json")<br/>    else:<br/>        return render_to_response('test.html', {},context_instance =RequestContext(request))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON VIA A FORM ELEMENT
    </pattern>
    <template>
<![CDATA[<p>Of course django sees the string "Object object". That's excatly what jQuery writes into the input field. And what subsequently gets submitted. (<a href="http://jsbin.com/imusu" rel="nofollow">Demo</a>)</p><br/><br/><p>The <code>swf_json</code> parameter is an object to javascript. If you want to submit it as string I suggest slightly modifying the swf so that it passes a string to your function instead of an json object. Assuming you construct your json via string concatenation just add extra quotation marks at the end and beginning before calling <code>submitForm</code></p><br/><br/><p>Instead of </p><br/><br/><pre><code>{<br/>  "firstName": "John",<br/>  "lastName": "Smith"<br/>} //json object<br/></code></pre><br/><br/><p>try this</p><br/><br/><pre><code>'{<br/>  "firstName": "John",<br/>  "lastName": "Smith"<br/>}' //string<br/></code></pre><br/><br/><hr><br/><br/><p>If I remember correctly <a href="http://www.json.org/json2.js" rel="nofollow">http://www.json.org/json2.js</a> allows conversion between json and strings</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND EMAIL
    </pattern>
    <template>
<![CDATA[<p>There are several good mail-sending functions in the <code>django.core.mail</code> module.</p><br/><br/><p>For a tutorial please see <a href="http://docs.djangoproject.com/en/dev/topics/email/" rel="nofollow">Sending e-mail</a>:</p><br/><br/><blockquote><br/>  <p>Although Python makes sending e-mail<br/>  relatively easy via the smtplib<br/>  library, Django provides a couple of<br/>  light wrappers over it. These wrappers<br/>  are provided to make sending e-mail<br/>  extra quick, to make it easy to test<br/>  e-mail sending during development, and<br/>  to provide support for platforms that<br/>  can't use SMTP.</p><br/></blockquote><br/><br/><p>The simplest function that would most likely suit your purposes is the <a href="http://docs.djangoproject.com/en/dev/topics/email/#send-mail" rel="nofollow"><code>send_mail</code></a> function:</p><br/><br/><pre><code>send_mail(<br/>    subject, <br/>    message, <br/>    from_email, <br/>    recipient_list, <br/>    fail_silently=False, <br/>    auth_user=None, <br/>    auth_password=None, <br/>    connection=None)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.1 FORMWIZARD DYNAM EXTEND FORM
    </pattern>
    <template>
<![CDATA[<p>Spender,</p><br/><br/><p>At least at the moment I don't know a way of merging multiple forms onto one page in a FormWizard.  In django 1.2 you will be able to include FormSets as steps in FormWizards (as per <a href="http://code.djangoproject.com/ticket/11112" rel="nofollow">this ticket</a>) but those only deal with multiple copies of identical forms, not compilations of many forms.  But there is a way to do what you ask:</p><br/><br/><pre><code>from django.contrib.formtools.wizard import FormWizard<br/>from django import forms<br/><br/>class SubjectForm(forms.Form):<br/>    subjects = forms.MultipleChoiceField(choices = (('language', 'language'), <br/>    													('sport','sport')))<br/><br/>class RelatedQForm(forms.Form):<br/>    """Overload the __init__ operator to take a list of forms as the first input and generate the <br/>    fields that way."""<br/>    def __init__(self, interested_subjects, *args, **kwargs):<br/>    	super(RelatedQForm, self).__init__(*args, **kwargs)<br/>    	for sub in interested_subjects:<br/>    		self.field[sub] = forms.CharField(label = "What do you think about %s" % subject)<br/><br/>class SubjectWizard(FormWizard):<br/>    def done(self, request, form_list):<br/>    	process_form_list(form_list)<br/><br/>    def process_step(self, request, form, step):<br/>    	if step == 1:<br/>    		chosen_subs = form.cleaned_data['subjects']<br/>    		self.form_list[1] = RelatedQForm(chosen_subs)<br/></code></pre><br/><br/><p>With this code you instantiate your FormWizard as you normally would in the view and then let the wizard class take care of everything behind the scenes.</p><br/><br/><p>The general idea is to overload the <strong>init</strong> class of a "RelatedQForm" to dynamically alter the fields.  This code snippet was taken from <a href="http://www.b-list.org/weblog/2008/nov/09/dynamic-forms/" rel="nofollow">here</a>.  You can make the processing within the <strong>init</strong> operator as complex as you'd like, read "include the fields from your forms as if-elif blocks inside the for-loop" ... you could probably even figure out a way to strip the fields from your current forms programatically, I'd have to see them to figure it out though.</p><br/><br/><p>Your "process_form_list" function will need to loop over the fields using something like:</p><br/><br/><pre><code>for field, val in form.cleaned_data.items():<br/>    do_stuff<br/></code></pre><br/><br/><p>Hope this gets you on your way :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FACEBOOK FEED DATETIM IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Use <code>entries[i].updated_parsed</code> instead of <code>entries[i].updated</code>, and <code>feedparser</code> will return a parsed 9-tuple for you. (<a href="http://feedparser.org/docs/date-parsing.html" rel="nofollow">Documentation</a>)</p><br/><br/><p>Then build a <code>datetime</code> object and pass it to Django or format to a string by yourself.</p><br/><br/><p>There is a similar question <a href="http://stackoverflow.com/questions/225274/parsing-different-date-formats-from-feedparser-in-python">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UTF 8 ENOUGH FOR ALL COMMON LANGUAG
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Looks like some european language characters cannot be stored in UTF-8?</p><br/></blockquote><br/><br/><p>Not true. UTF-8 can store <em>any</em> character set without limitations except maybe for Klingon. UTF-8 is your one stop shop for internationalization. If you have problems with characters, they are most likely to be encoding problems, or missing support for that character range in the font you're using to display the data with (Extremely unlikely for a european language character though, but common e.g. when viewing indian sites on an european computer. See also <a href="http://stackoverflow.com/questions/1778492/unicode-support-in-web-standard-fonts">this question</a>)</p><br/><br/><p>If a non-western character set can't be rendered, it could be that the user's built in font does not have that range of UTF-8 covered. </p><br/><br/><p><strong>Update:</strong> Klingon it is indeed not part of <a href="http://en.wikipedia.org/wiki/Unicode" rel="nofollow"><strong>official UTF-8</strong></a>: </p><br/><br/><blockquote><br/>  <p>Some modern invented scripts which have not yet been included in Unicode (e.g., Tengwar) or which do not qualify for inclusion in Unicode due to lack of real-world use (e.g., Klingon) are listed in the ConScript Unicode Registry, along with unofficial but widely-used Private Use Area code assignments.</p><br/></blockquote><br/><br/><p>However, there is a <a href="http://en.wikipedia.org/wiki/ConScript_Unicode_Registry" rel="nofollow">volunteer project</a> that has inofficially assigned code points F8D0-F8FF in the private area to Klingon. <a href="http://www.evertype.com/standards/csur/klingon.html" rel="nofollow"><strong>Gallery of Klingon characters</strong></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL DUMP BEFOR RUN DJANGO TEST
    </pattern>
    <template>
<![CDATA[<p>You may need to look into defining a custom test runner. There's some info here: <a href="http://docs.djangoproject.com/en/dev/topics/testing/#using-different-testing-frameworks" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/testing/#using-different-testing-frameworks</a></p><br/><br/><p>Basically I think you can just copy the default test runner from django.test.simple.run_tests and then modify it to suit your needs.</p><br/><br/><p>I've not done this before, but from my understanding that would be the way to customize this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON CUSTOM RESPONS REPRESENT
    </pattern>
    <template>
<![CDATA[<p>You can return custom format by returning a Python dictionary. Here is an example on one of my app. I hope it helps.</p><br/><br/><pre><code>from models import *<br/>from piston.handler import BaseHandler<br/>from django.http import Http404<br/><br/>class ZipCodeHandler(BaseHandler):<br/>    methods_allowed = ('GET',)<br/><br/>    def read(self, request, zip_code):<br/>        try:<br/>            points = DeliveryPoint.objects.filter(zip_code=zip_code).order_by("name")<br/>            dps = []<br/>            for p in points:<br/>                name = p.name if (len(p.name)&lt;=16) else p.name[:16]+"..."<br/>                dps.append({'name': name, 'zone': p.zone, 'price': p.price})<br/>            return {'length':len(dps), 'dps':dps}    <br/>        except Exception, e:<br/>            return {'length':0, "error":e}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IT PRINT FUNNI CHARACT UNICOD PROBLEM
    </pattern>
    <template>
<![CDATA[<p>It's an encoding problem. Most likely your form or the output page is not UTF-8 encoded.</p><br/><br/><p>This article is <em>very</em> good reading on the issue: <a href="http://www.joelonsoftware.com/articles/Unicode.html" rel="nofollow">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a></p><br/><br/><p>You need to check the encoding of</p><br/><br/><ul><br/><li>the HTML page where the user input the word</li><br/><li>the HTML page you are using to output the word</li><br/><li>the multi-byte ability of the functions you use to work with the string (though that probably isn't a problem in Python)</li><br/></ul><br/><br/><p>If the search is going to apply to a data base, you will need to check the encoding of the database connection, as well as the encoding of your tables and columns.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE WITH MOD WSGI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It is not sufficient for just the directory '/home/mart/programmation/python/django/martfiles/media' containing static files to be readable and searchable. The user that Apache runs as must have read and potentially search access, to all parent directories of it back up to root directory. Since home directories on many systems are 'rwx------' this would deny Apache access irrespective of the Deny/Allow directives in Apache configuration.</p><br/><br/><p>Suggest you place the Django project and static files outside of your home account somewhere and relax the file system permissions as necessary.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI IN MY DJANGO URL ( .JSON .XML )
    </pattern>
    <template>
<![CDATA[<p>to add to @ziang's answer, if you really want to emulate file extensions you could just write the regular expression that way. <code>r'^test\.(?P&lt;extension&gt;(json)|(xml))$'</code></p><br/><br/><p>EDIT: I will add that it's certainly more RESTful to provide the expected return content type as a parameter.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUBI ON RAIL EQUIVAL TO PINAX
    </pattern>
    <template>
<![CDATA[<p>maybe you also want to take a look at the following entry on stackoverflow that has a similar topic: <a href="http://stackoverflow.com/questions/2072546/social-network-in-rails-which-framework/2076824#2076824">http://stackoverflow.com/questions/2072546/social-network-in-rails-which-framework/2076824#2076824</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT IMAG THUMBNAIL ( USE DJANGO )
    </pattern>
    <template>
<![CDATA[<p>You don't have to use Django to serve the static content directly.  Simply have your server route 404 requests for your images folder to a Django view, where it splits apart the filename and generates the appropriate thumbnail, before redirecting back to the original URL (which hopefully will no longer be a 404).</p><br/><br/><p>As for the other answer's django-imagekit suggestion, I'm not sure it does anything to let you <em>dynamically</em> generate image thumbs based on URL, but I certainly do recommend using it for all the features it does have.</p><br/><br/><p><strong>Edit:</strong></p><br/><br/><p>As for the actual URL structure, I feel a more typical <code>/images/filename-120x45.jpg</code> would allow you to more easily filter out 404 requests that have nothing to do with dynamic thumbnail generation. Say, for instance, that there are tons of 404 errors for <code>/images/original_size_image.jpg</code>. You wouldn't want those being routed to Django, and you could only match filenames of that format with regex. <strong>[end edit]</strong></p><br/><br/><p>You have to be careful though about letting anybody aware of this feature spam your Django app. They could potentially kill it with an infinite number of image size and filename combinations at their fingertips. You would need to figure how to put upper limits on these requests, like redirecting back to a 404 if either dimension is larger than the original, or even figuring out how to cap requests for multiple dimensions of the same image. Maybe this was what you were you getting at when mentioning "locking" though.</p><br/><br/><p>As an aside, I see you've tagged Apache but I would really like to recommend that you serve static content through something like <a href="http://wiki.nginx.org/Main" rel="nofollow">Nginx</a>. You could maybe negate the extra overhead of the dynamic image requests if you use a static file server that isn't complete crap at serving static files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WAY TO DO A QUERI THAT SPAN SEVER TABL
    </pattern>
    <template>
<![CDATA[<p>I would use:</p><br/><br/><pre><code>Recommendation.objects.filter(user__publication_set__subscriber=request.user).select_related()<br/></code></pre><br/><br/><p>That will get you all the Recommendation objects as you requested, and the select_related will load all the related User and Content objects into memory so that subsequent access of them won't hit the DB again.</p><br/><br/><p>How you'd contruct this query really has a lot to do with your handling of the returned data afterwards though. It may be more or less efficient to go one way vs. another based on what you do with it.<img src="http://sonicloft.net/im/52" alt="alt text"></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHICH VERSION OF PYTHON MOD PYTHON USE
    </pattern>
    <template>
<![CDATA[<p>You would have to rebuild mod_python against your python2.6 installation. Since mod_python loads python as a library the version is fixed at compile time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO QUICKLI EDIT MY WEBSIT
    </pattern>
    <template>
<![CDATA[<p>As an alternative to installing a CMS on your server, you might be interested in a service like <a href="http://www.cushycms.com/" rel="nofollow">CushyCMS</a>.  It allows you to specify what parts of your page are editable by setting an appropriate class in each editable <code>div</code> tag.  Then to edit the contents of those <code>div</code> blocks, you log in to the CushyCMS site and make your changes right there.  CushyCMS connects via FTP to the server for you and updates the HTML page.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERP IN DJANGO WHERE DO I START
    </pattern>
    <template>
<![CDATA[<p>There's a <a href="http://djangobook.com/" rel="nofollow">Django Book</a> It's an awsome introductory material.</p><br/><br/><p>Like @pace says (vote up!) the django tutorial is fine too (although the rest of the documentation assumes you have all the time of the world to comprehend it)</p><br/><br/><p>But my recommendation is take a look at python first. Not too deep, but enough to know what are they talking about in the django community. Take a look to the <a href="http://diveintopython.org/" rel="nofollow">Dive Into Python site</a> and gt a grip on python.</p><br/><br/><p>There are some great books around too. Like <a href="http://rads.stackoverflow.com/amzn/click/143021936X" rel="nofollow">The Definitive Guide to Django</a>, <a href="http://rads.stackoverflow.com/amzn/click/1430219386" rel="nofollow">the Practical Django Project</a> and <a href="http://rads.stackoverflow.com/amzn/click/1430210478" rel="nofollow">Pro Django</a> (I'm kind of a book freak so i bought them three XD)</p><br/><br/><p>I think you should enjoy programming, not suffer it, I enjoy programming in Python and Django. The best thing about Django is that they have solution for common cases in wev developing, like manage the site and users, report of objects in the databases, details on every object in the database. And in the most cases you don't have to worry about SQL at all.<br/>See if it fits you :) Happy Programming!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DB PERMISS WITH DJANGO UNIT TEST
    </pattern>
    <template>
<![CDATA[<p>Don't force Django to do something unnatural.</p><br/><br/><ol><br/><li><p>Allow it to create the test schema.  It's a good thing.</p></li><br/><li><p>From your existing schema, do an <code>unload</code> to create .JSON dump files of the data.  These files are your "fixtures".  These fixtures are used by Django to populate the test database.  This is The Greatest Testing Tool Ever.  Once you get your fixtures squared away, this really does work well.</p></li><br/><li><p>Put your fixture files into <code>fixtures</code> directories within each app package.  </p></li><br/><li><p>Update your unit tests to name the various fixtures files that are required for that test case.</p></li><br/></ol><br/><br/><p>This -- in effect -- tests with an existing schema.  It rebuilds, reloads and tests in a virgin database so you can be absolutely sure that it works without destroying (or even touching) live data.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INVIT EMAIL ON POST SAV OR ALL AT ONC IN DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>If this is live application and user experience is important, then I suggest you avoid sending anything email-related in post_save handlers, or even in views.</p><br/><br/><p>Reasons are: SMTP can go down, network connection can go down, network can be up but speed can be that of a snail etc. In each of those cases either your program breaks, or user waits and waits and waits... which is not good for business.</p><br/><br/><p>The solution is to write/buy/find separate email dispatcher that is able to handle all such situations gently, alert administrator in case of trouble, switch SMTP gates on the fly, additionally it could trace bounce-back etc.</p><br/><br/><p>Then, in your post_save handler, you only add something like this:</p><br/><br/><pre><code>   email_dispatcher.add_to_queue(my_email)<br/></code></pre><br/><br/><p>Regarding ready-made solutions - quick scan of code.google com resulted in <a href="http://code.google.com/p/django-mailer/" rel="nofollow">http://code.google.com/p/django-mailer/</a> but I haven't used it so cannot make recommendation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV STATIC MEDIA DURE DJANGO DEVELOP WHI NOT MEDIA ROOT
    </pattern>
    <template>
<![CDATA[<p>In a production situation you will want your media to be served from your front end web server (Apache, Nginx or the like) to avoid extra load on the Django/Python process. The MEDIA_URL and MEDIA_ROOT are usually used for this.</p><br/><br/><p>Running the built in Development server you will need to set the correct url in your url.py file - I normally use something like this:</p><br/><br/><pre><code>from django.conf import settings<br/><br/>urlpatterns += patterns('',<br/>    (r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),<br/>)<br/></code></pre><br/><br/><p>Which picks up the MEDIA_ROOT from  your settings file meaning that it works for development and live.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.FETCH IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think the code you would have to write would be like this: (EDIT)</p><br/><br/><pre><code>def get_value(param1,param2):<br/>    return "value %s - %s " % (str(param1),str(param2))<br/><br/>def fetch(key,val_function,**kwargs)<br/>    val = cache.get(key)<br/>    if not val:<br/>        val = val_function(**kwargs)<br/>        cache.set(key,val)<br/>    return val<br/></code></pre><br/><br/><p>and you would call it like this:</p><br/><br/><pre><code>fetch('key',get_value,param1='first',param2='second')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I INTEGR A 304 IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There's extensive description in Django documentation: <a href="http://docs.djangoproject.com/en/1.1/topics/conditional-view-processing/#topics-conditional-processing" rel="nofollow">Conditional view processing</a></p><br/><br/><p>Following tools are particularly useful:</p><br/><br/><ol><br/><li><code>@last_modified</code> and <code>@etag</code> view decorators.  You supply them with a function to compute the value from request and everything else is done automatically.</li><br/><li><code>django.middleware.http.ConditionalGetMiddleware</code> -- it generates required ETag and returns 304 if there's a cache hit, but this still takes server time to generate full HTML and only network time is saved.  Still very good for one-line configuration change.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIEC OF CODE IN EVERI VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Look at the <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/decorators.py" rel="nofollow">source code for django.contrib.auth decorators</a>. They do exactly what you want, but for the built-in Django authentication system (<a href="http://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.decorators.login_required" rel="nofollow">see the documentation</a>). It shouldn't be hard to do something similar for your authentication system.</p><br/><br/><p>BTW, why don't you use the built-in auth? You can use it with custom authentication backends...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM FIELD ON FORM VALID ERROR
    </pattern>
    <template>
<![CDATA[<p>If you need extra validation using more than one field from a form, override the .clean() method. But if it's just for one field, you can create a clean_field_name() method.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/1.1/ref/forms/validation/#ref-forms-validation" rel="nofollow">http://docs.djangoproject.com/en/1.1/ref/forms/validation/#ref-forms-validation</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL AND STRINGIO
    </pattern>
    <template>
<![CDATA[<p>Unfortunately file-likes from network functions such as <code>urllib2.urlopen()</code> don't support all the necessary methods, so you'll need to read the data into a <code>StringIO</code> or <code>cStringIO</code> in order to be able to pass them to <code>Image.open()</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEVELOP SERVER FASTER AT SERV STATIC MEDIA
    </pattern>
    <template>
<![CDATA[<p>Consider using <a href="http://code.google.com/p/modwsgi/" rel="nofollow"><code>mod_wsgi</code></a> instead, and having httpd handle the static media.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM DJANGO FORM FIELD THAT USE TWO INPUT S
    </pattern>
    <template>
<![CDATA[<p>Have a look at the <a href="http://code.djangoproject.com/browser/django/trunk/django/forms/extras/widgets.py" rel="nofollow">SelectDateWidget</a>. It splits the input of a date into three select boxes.</p><br/><br/><p>And the doc string says:</p><br/><br/><blockquote><br/>  <p>This also serves as an example of a Widget that has more than one HTML element and hence implements <code>value_from_datadict</code>.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GGREG SAVE ( ) S IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Actually this is easier to do then you think.  You can use "<a href="http://docs.djangoproject.com/en/dev/topics/db/transactions/" rel="nofollow">transactions</a>" in Django.  These "batch" database operations (specifically save, insert and delete) into one operation.  I've found the easiest one to use is <code>commit_on_success</code>.  Essentially you wrap your database save operations into a function and then use the <code>commit_on_success</code> decorator.</p><br/><br/><pre><code>from django.db.transaction import commit_on_success<br/><br/>@commit_on_success<br/>def lot_of_saves(queryset):<br/>    for item in queryset:<br/>        modify_item(item)<br/>        item.save()<br/></code></pre><br/><br/><p>This will have a huge speed increase.  You'll also get the benefit of having roll-backs if any of the items fail.  If you have millions of save operations then you may have to commit them in blocks using the <code>commit_manually</code> and <code>transaction.commit()</code> but I've rarely needed that.</p><br/><br/><p>Hope that helps,</p><br/><br/><p>Will</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS C # .NET WHAT ARE THE KEY DIFFER TO CONSID FOR USE ONE TO DEVELOP A LARG WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>".NET" is not a language. Perhaps it's Python vs. C# or Python/Django vs C#/ASP.NET (or pick whatever "webwork" you want; there are many, many different solutions for both Python and ".NET" and picking Django or MVC2 of the bat might severely limiting better viable options). As a counter to the Python vs. ".NET": There is <a href="http://ironpython.net/" rel="nofollow">IronPython</a> (Python "in .NET")</p><br/><br/><p>I would consider: <em>Developer comfort</em> with a language and, if they are equal in Python and ".NET", then I would consider turnaround times for development and choose the language/"webwork" that minimized this (again, it need not be previous constraints).</p><br/><br/><p>While unit/integration-testing is a must for any [sizable] project, I find that a <em>statically typed language</em> (C#/F#) can <em>greatly reduce</em> the number of "stupid bugs" relating to types.</p><br/><br/><p>Open up the playing field :-)</p><br/><br/><p><strong>Edit for comment:</strong></p><br/><br/><p>Then you're just comparing languages.</p><br/><br/><p>In which case, C# is a very boring imperative statically typed language with Single-Inheritance/Interface Class-Based OO (but a few more neat tricks than Java, which is just downright stone-age). This is <em>the same basic type of OO as Python has</em> and excluding the static/dynamic bit, <em>both languages are strongly typed</em> (the mechanics are different, but the end result is quite similar in the language spectrum). Actually, python has MI, but that seems less accepted in python as the use of the 'lambda' keyword and since python is dynamically typed there is no compile-time support for determining interface/type contracts (there are, however, some modules that try to provide this).</p><br/><br/><p><strong>If you can learn/know Python, then you can learn/known C#.</strong> It's not a paradigm shift. Some keywords here, braces there, need to say what type you mean there, a different base library... different environment (you have to fight some to get to a REPL, but it's doable in VS.) How developers like/learn/use it is another story. While I did call C# imperative before, it's nice to see the addition of some "functional-like" features such as LINQ/IEnumerable extensions and closures-without-delegates, even if the basic C# syntax is very procedural -- once again, pretty much like python (for-expressions, nested functions, statement/expression divide).</p><br/><br/><p>While the new 'dynamic' does blur the line (there is very rarely a good use for it -- in about all the same places one might have had to fall back to reflection in prior C# versions -- this isn't true, but the point is it's generally "the wrong way", except in the few cases when it just happens to be "the best/only way"), 'var' does not. That is, the type of a 'var' variable is <em>known at compile-time</em> and <em>has nothing to do with dynamic typing</em>; it is all type inference. Some language like F#/SML and Haskell have much, much more powerful type inference removing the need for "all those ugly type declarations" (although explicitly annotating allowed types or set of types can make intent more clear) while preserving static typing.</p><br/><br/><p>Personally, <em>everything else aside</em>, I would use a statically typed language. I'm not saying C# (and I'm definitely not saying Java!), but <strong>statically typed languages can push type errors to the top and require up-front explicit contracts</strong> (this is a big, big win for me). While you do miss out on some neat dynamic tricks, there is almost always a better way to perform the same action in the target language -- you just have to think in terms of that language and use a screwdriver for a screw and a hammer for a nail. E.g. don't expect to bring Python code relying on the (ab)use of local() or global() into C# as-is.</p><br/><br/><p>On the "down-side", most statically typed languages (C# here) require an explicit compile-first (but this isn't so bad as it makes pretty assemblies) and tools like the "REPL" aren't taken as first-class citizens (it is a first-class citizen in F#/VS2010). Also, if you have an essential library for Python/C# (and it isn't available in the other language), that may be a deciding factor as to why to choose one language over the other.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND WRITE A FILE USE PYTHON
    </pattern>
    <template>
<![CDATA[<p>The following code for read the content from a file </p><br/><br/><pre><code>handle=open('file','r+')<br/>var=handle.read();<br/>print var;<br/></code></pre><br/><br/><blockquote><br/>  <p>If you want to read a single line use<br/>  the readline(). If you want to read<br/>  the whole      lines in the file use<br/>  the readlines() also</p><br/></blockquote><br/><br/><p>The following code for write the content to the files </p><br/><br/><pre><code>handle1=open('file.txt','r+')<br/>handle1.write("I AM NEW FILE")<br/>handle1.close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECTS.GET ( )
    </pattern>
    <template>
<![CDATA[<p>You could create a shortcut like this (based on get_object_or_404):</p><br/><br/><pre><code>from django.shortcuts import _get_queryset<br/><br/>def get_object_or_none(klass, *args, **kwargs):<br/>  queryset = _get_queryset(klass)<br/>  try:<br/>    return queryset.get(*args, **kwargs)<br/>  except queryset.model.DoesNotExist:<br/>    return None<br/></code></pre><br/><br/><p>Not sure why this shortcut doesn't exist (perhaps someone with more django under their belt can explain) as it is a reasonably useful shortcut that I use from time to time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S FORM BRACKET TRICK IS TO DJANGO S
    </pattern>
    <template>
<![CDATA[<p>You could use <a href="http://code.djangoproject.com/browser/django/trunk/django/utils/datastructures.py#L365" rel="nofollow"><code>django.utils.datastructures.DotExpandedDict</code></a> with inputs named category.1, category.2 etc. to do something similar, but I don't really see why you would if you ever have to validate and redisplay the information you're receiving, when using a django.forms.Form will do everything for you - appropriate fields will call the <code>getlist</code> method for you and the <code>prefix</code> argument can be used to reuse the same form multiple times.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBCLASS DJANGO MODEL WITH INTEGR QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Basically what you're trying to do is to return the different child classes, while querying a shared base class. That is: you want the leaf classes. Check this snippet for a solution: <a href="http://www.djangosnippets.org/snippets/1034/" rel="nofollow">http://www.djangosnippets.org/snippets/1034/</a></p><br/><br/><p>Also be sure to check out the docs on Django's Contenttypes framework: <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/</a> It can be a bit confusing at first, but Contenttypes will solve additional problems you'll probably face when using non-abstract base classes with Django's ORM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND TEARDOWN TEMPORARI DJANGO DB FOR UNIT TEST
    </pattern>
    <template>
<![CDATA[<p>Cracked it. I now have one python file completely independent of any django app that can run unit tests with a test database:</p><br/><br/><pre><code>#!/usr/bin/env python<br/>"""Run a unit test and return result.<br/><br/>This can be used with 'hg bisect'.<br/>It is assumed that this file resides in the same dir as settings.py<br/><br/>"""<br/><br/>import os<br/>from os.path import abspath, dirname<br/>import sys<br/>import unittest<br/><br/># Set up django<br/>project_dir = abspath(dirname(dirname(__file__)))<br/>sys.path.insert(0, project_dir)<br/>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'<br/><br/>from django.db import connection<br/>from django.test import TestCase<br/>from django.test.utils import setup_test_environment, teardown_test_environment<br/><br/>from myproject import settings<br/>from myproject.myapp.models import MyModel<br/><br/><br/>class MyTestCase(TestCase):<br/><br/>    def test_something(self):<br/>        # A failed assertion will make unittest.main() return non-zero<br/>        # which if used with 'hg bisect' will mark the revision as bad<br/>        self.assertEqual(0, len(MyModel.objects.all())) # and so on<br/><br/><br/>if '__main__' == __name__:<br/>    try:<br/>        setup_test_environment()<br/>        settings.DEBUG = False    <br/>        verbosity = 0<br/>        old_database_name = settings.DATABASE_NAME<br/>        connection.creation.create_test_db(verbosity)<br/>        unittest.main()<br/>    finally:<br/>        connection.creation.destroy_test_db(old_database_name, verbosity)<br/>        teardown_test_environment()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RNADO OR DJANGO WORK WITH CGI
    </pattern>
    <template>
<![CDATA[<p><a href="http://trac.saddi.com/flup" rel="nofollow">flup</a> provides a CGI-to-WSGI adapter, but you really should consider using something like FastCGI instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK THAT WILL REDUC NUMBER OF LINE OF CODE
    </pattern>
    <template>
<![CDATA[<p>I think you can answer this question yourself with this way: <strong>Do the get started project</strong>.</p><br/><br/><p>In my case was: <code>django/python</code>, why?, see the <a href="http://docs.djangoproject.com/en/1.1/intro/tutorial01/#intro-tutorial01" rel="nofollow">get started project</a>, will take a 1 or 2 hours to understand/develop/deploy, and not python knowledge required, just a hyperactive open mind.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FINANCI APP WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I started to use python-money in an application a couple years ago, but had to abandon it due to some problem.  I apologize for forgetting the exact problem, but I do remember for our use case it didn't make sense anyway... we just needed decimal fields.</p><br/><br/><p>I'd also be wary of django-cashflow not having any activity for 2 years, although the project is small enough it should be easy enough to fix any problems yourself.</p><br/><br/><p>For existing Django accounting apps I would suggest enhancing, or at least looking at, <a href="https://secure.caktusgroup.com/projects/minibooks/wiki" rel="nofollow">minibooks</a>. NOTE: the license is AGPL v3 which could make it unusable for your environment.</p><br/><br/><p>Another road to travel would be to investigate porting <a href="http://www.openerp.com/" rel="nofollow">OpenERP</a> (also GPL IIRC) from Python/GTK to Django.  <a href="http://www.tryton.org/en/" rel="nofollow">Tryton</a> might also be a starting point, it's GPL3 and IIRC a fork of OpenERP.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TESTCAS TEST ORDER
    </pattern>
    <template>
<![CDATA[<p>As far as I know, there is no way to order tests other than rename them. Could you explain why you need to run test cases in the specific order? In unit testing it usually considered as bad practice since it means that your cases are not independent.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPTION FOR GOOGL APP ENGIN DATASTOR AND EXTERN DATABAS
    </pattern>
    <template>
<![CDATA[<p>Google Apps' <a href="http://code.google.com/securedataconnector/" rel="nofollow">Secure Data Connector</a> (SDC) is designed for this kind of tasks -- indeed, it even works when the "other database" lives behind a firewall (a common case for enterprise data), and for other Google Apps (Docs, Spreadsheets, ...) as well as App Engine.</p><br/><br/><p>As <a href="http://code.google.com/securedataconnector/docs/1.0/overview.html" rel="nofollow">the docs</a> summarize things, the flow is:</p><br/><br/><ol><br/><li><p>Google Apps forwards authorized data<br/>requests from users who are within<br/>the Google Apps domain to the Google<br/>tunnel protocol servers.</p></li><br/><li><p>The tunnel servers validate that a<br/>user is authorized to make the<br/>request to the specified resource.<br/>Google tunnel servers are connected<br/>by an encrypted tunnel to SDC, which<br/>runs within a company's internal<br/>network.</p></li><br/><li><p>The tunnel protocol allows SDC to<br/>connect to a Google tunnel server,<br/>authenticate, and encrypt the data<br/>that flows across the Internet.</p></li><br/><li><p>SDC uses resource rules to validate<br/>if a user is authorized to make a<br/>request to a specified resource.</p></li><br/><li><p>An optional intranet firewall can be<br/>used to provide extra network<br/>security.</p></li><br/><li><p>SDC performs a network request to<br/>the specified resource or services.</p></li><br/><li><p>The service validates the signed<br/>request, checks the credentials, and<br/>if the user is authorized, returns<br/>the data.</p></li><br/></ol><br/><br/><p>If you don't have to worry about firewalls, and have no security worries whatsoever, you can simplify things (as Daniel's answer suggests) by just using <code>urlfetch</code> directly (no tunnels, no validation, no encryption, no filtering, ...) -- but your worry about "the data being shared is sensitive data such as login details" suggests that this is not the case.</p><br/><br/><p>It's not a problem of XML vs other formats -- the problem is that sensitive data should not travel "in clear" over unprotected channels, nor be made available to all and sundry, and it's often nicer to have specialized infrastructure deal with encryption, filtering, and authorization problems, as the SDC does, rather than having to code all of this (and make it totally secure and locked-down) in your own app or specialized infrastructure middleware. For these purposes, the SDC can be very helpful, even if you only need a fraction of its functionality.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM IN DJANGO VS. PHP DOCTRIN
    </pattern>
    <template>
<![CDATA[<p>The Django ORM does everything I want it to do. I've found it to be easier to use and more straight-forward than Doctrine.  Sorry that I can't help with an in-depth comparison.</p><br/><br/><p>If you find the Django ORM is missing a feature you'd like to have, check out <a href="http://www.sqlalchemy.org/" rel="nofollow">SQL Alchemy</a>. It can easily be used with Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FABRIC ERROR
    </pattern>
    <template>
<![CDATA[<pre><code>def install_site():<br/>    "Add the virtualhost file to apache"<br/>    require('release', provided_by=[deploy, setup])<br/><br/>    with cd('%(path)s/releases/%(release)s/%(release)s' % env):<br/>        sudo('cp %(project_name)s/%(virtualhost_path)s/%(project_domain)s '<br/>                 '/etc/apache2/sites-available/%(project_domain)s' % env)<br/>    with cd('/etc/apache2/sites-available'):<br/>         sudo('a2ensite %(project_domain)s' % env) <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNEXPLAIN DJANGO ERROR. DIAGNOSI ANYON
    </pattern>
    <template>
<![CDATA[<p>I have come across similar errors a number of times. They have been the result of python not being able to find the django or project files in the path. This is exceptionally annoying when django gets installed or referenced to one version of python when you have multiple python installs on the machine. It may help to explicitly choose which python version you are using, ie <code>python2.5 manage.py runserver</code> or <code>python2.6 manage.py runserver</code>.</p><br/><br/><p>Make sure you have your project in your PYTHONPATH.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO WRITE USER AND PROFIL HANDL IN BEST WAY
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>users should be able to register and authenticate</p><br/></blockquote><br/><br/><p><code>django.contrib.auth</code> is the module you want.  Be sure to check the docs for <a href="http://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login">custom login forms.</a></p><br/><br/><blockquote><br/>  <p>every user should have profile (or model with all required fields)</p><br/></blockquote><br/><br/><p>You need to set <code>settings.AUTH_PROFILE_MODULE</code>, as noted by others.</p><br/><br/><p>Information about setting up the user profile model is available for <a href="http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users">the latest version</a>, <a href="http://docs.djangoproject.com/en/1.1/topics/auth/#storing-additional-information-about-users">1.1</a>, and <a href="http://docs.djangoproject.com/en/1.0/topics/auth/#storing-additional-information-about-users">1.0</a>.  It hasn't been dropped.</p><br/><br/><blockquote><br/>  <p>users dont need django builtin admin panel, but they need to edit their profiles/models via simple web form</p><br/></blockquote><br/><br/><p>You can create a form and view just like you would for any other app; maybe make a "user control panel" app for handling these things.  Your views would then interact with the <code>django.contrib.auth.models.User</code> and <code>django.contrib.auth.models.Group</code> models.  You can set this up to do whatever you need.</p><br/><br/><p>EDIT: Responding to your questions-in-the-form-of-an-answer (paging Alex Trebek)...</p><br/><br/><blockquote><br/>  <p>The second version of djangobook, covering django 1.0 (that is way closer to 1.2 than 0.96) no longer has that information anywhere, what makes me highly confused - has anything changed? Is there other, better, more secure way to handle users and their profiles? Therefore this question asked.</p><br/></blockquote><br/><br/><p>I wouldn't recommend djangobook as a reference; it's out of date on this topic.  User profiles exist and I'm using them in my Django 1.1.1 site; I'm even populating them from NIS.</p><br/><br/><p>Please use the links I provided above.  They go directly to the <em>actual Django documentation</em> and are authoritative.</p><br/><br/><blockquote><br/>  <p>By the way, I forgot to ask, if the way you all refer to (that is AUTH_PROFILE_MODULE) will create automatically upon registration</p><br/></blockquote><br/><br/><p>Answered in the docs.</p><br/><br/><blockquote><br/>  <p>and require the profile to exist upon any action (user withoud existing, filled profile should not exists, this is why I was thinking about extending User model somehow)?</p><br/></blockquote><br/><br/><p>The profile needs to exist if <code>User.get_profile()</code> is called.</p><br/><br/><blockquote><br/>  <p>Will it get updated as well (people are mentioning 'signals' on various blogs related to this subject)?</p><br/></blockquote><br/><br/><p>It's like any other model: it only gets updated when you change the fields and call <code>save()</code>.</p><br/><br/><p>The <a href="http://docs.djangoproject.com/en/dev/topics/signals/">signal</a> part is how you hook in a function to create a profile for a new User:</p><br/><br/><pre><code>from django.db.models.signals import post_save<br/>from django.contrib.auth import User<br/>from myUserProfileApp import UserProfile<br/><br/>def make_user_profile(sender, **kwargs):<br/>    if 'created' not in kwargs or not kwargs['created']:<br/>        return<br/><br/>    # Assumes that the 'ForeignKey(User)' field in "UserProfile" is named "user".<br/>    profile = UserProfile(user=kwargs["instance"])<br/>    # Set anything else you need to in the profile, then...<br/>    profile.save()<br/><br/>post_save.connect(make_user_profile, sender=User, weak=False)<br/></code></pre><br/><br/><p>This only creates a new profile for a new User.  Existing Users need to have profiles manually added:</p><br/><br/><pre><code>$ ./manage.py shell<br/>&gt;&gt;&gt; from django.contrib.auth import User<br/>&gt;&gt;&gt; from myUserProfileApp import UserProfile<br/>&gt;&gt;&gt; for u in User.objects.all():<br/>...  UserProfile(user=u).save() # Add other params as needed.<br/>...<br/></code></pre><br/><br/><p>If you have some users with profiles and some without, you'll need to do a bit more work:</p><br/><br/><pre><code>&gt;&gt;&gt; for u in User.objects.all():<br/>...  try:<br/>...   UserProfile(user=u).save() # Add other params as needed.<br/>...  except:<br/>...   pass<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARTIAL DATE ( 2010 00 00 ) FROM MYSQL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>First, thanks for all your answers. None of them, as is, was a good solution for my problem, but, for your defense, I should add that I didn't give all the requirements. But each one help me think about my problem and some of your ideas are part of my final solution.</p><br/><br/><p>So my final solution, on the DB side, is to use a <em>varchar</em> field (limited to 10 chars) and storing the date in it, as a string, in the ISO format (YYYY-MM-DD) with <em>00</em> for month and day when there's no month and/or day (like a <em>date</em> field in MySQL). This way, this field can work with any databases, the data can be read, understand and edited directly and easily by a human using a simple client (like mysql client, phpmyadmin, etc.). That was a requirement. It can also be exported to Excel/CSV without any conversion, etc. The disadvantage is that the format is not enforce (except in Django). Someone could write <em>'not a date'</em> or do a mistake in the format and the DB will accept it (if you have an idea about this problem...).</p><br/><br/><p>This way it's also possible to do all of the <em>special</em> queries of a <em>date</em> field relatively easily. For queries with WHERE: &lt;, >, &lt;=, >= and = work directly. The IN and BETWEEN queries work directly also. For querying by day or month you just have to do it with EXTRACT (DAY|MONTH ...). Ordering work also directly. So I think it covers all the query needs and with mostly no complication.</p><br/><br/><p>On the Django side, I did 2 things. First, I have created a <code>PartialDate</code> object that look mostly like <code>datetime.date</code> but supporting date without month and/or day. Inside this object I use a datetime.datetime object to keep the date. I'm using the hours and minutes as flag that tell if the month and day are valid when they are set to 1. It's the same idea that <em>steveha</em> propose but with a different implementation (and only on the client side). Using a <code>datetime.datetime</code> object gives me a lot of nice features for working with dates (validation, comparaison, etc.).</p><br/><br/><p>Secondly, I have created a <code>PartialDateField</code> that mostly deal with the conversion between the <code>PartialDate</code> object and the database.</p><br/><br/><p>So far, it works pretty well (I have mostly finish my extensive unit tests).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CHANG THE FILE NAME OF UPLOAD FILE
    </pattern>
    <template>
<![CDATA[<p>How are you uploading the file?<br/>I assume with the FileField.</p><br/><br/><p>It appears that in the documentation for <a href="http://docs.djangoproject.com/en/1.1/ref/models/fields/#django.db.models.FileField.upload_to" rel="nofollow">FileField.upload_to</a> it says that the *upload_to* field, </p><br/><br/><blockquote><br/>  <p>may also be a callable, such as a<br/>  function, which will be called to<br/>  obtain the upload path, including the<br/>  filename. This callable must be able<br/>  to accept two arguments, and return a<br/>  Unix-style path (with forward slashes)<br/>  to be passed along to the storage<br/>  system. The two arguments that will be<br/>  passed are: </p><br/>  <br/>  <p>"<strong>instance</strong>": An instance of<br/>  the model where the FileField is<br/>  defined. More specifically, this is<br/>  the particular instance where the<br/>  current file is being attached.</p><br/>  <br/>  <p>"<strong>filename</strong>":The filename that was<br/>  originally given to the file. This may<br/>  or may not be taken into account when<br/>  determining the final destination<br/>  path.</p><br/></blockquote><br/><br/><p>So it looks like you just need to make a function to do your name hanlding and return the path.</p><br/><br/><pre><code>def update_filename(instance, filename):<br/>    path = "upload/path/"<br/>    format = instance.userid + instance.transaction_uuid + instance.file_extension<br/>    return os.path.join(path, format)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW CAN I GET A BLOCK FROM A TEMPLAT
    </pattern>
    <template>
<![CDATA[<pre><code>from django.template import Context<br/>from django.template.loader import get_template<br/>from django.template.loader_tags import BlockNode<br/><br/>t = get_template('template.html')<br/>for node in t:<br/>    if isinstance(node, BlockNode) and node.name == 'subject':<br/>        print node.render(Context())<br/></code></pre><br/><br/><p>This worked for me, using Django 1.1.1</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECEIV AJAX REQUEST USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think the problem is serializing the dictionary. When I tested your code, I edited it to look like this and it worked:</p><br/><br/><pre><code>from django.utils import simplejson<br/>def login_users(request):<br/>    print "garbage"<br/>    print request.GET['title']<br/>    return_dict = {'message': 'bla bla bla','code':324}<br/>    json = simplejson.dumps(return_dict)<br/>    return HttpResponse(json, mimetype="application/x-javascript")<br/></code></pre><br/><br/><p>Also make sure you are passing in a value for title in your GET query string. I ran into that as well (may need to be error checked). It helps if you use a tool like Firebug, or even the Webkit Inspector. That way you can view the HTML error pages that Django is returning from your XHR request.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO MODUL DENI FROM WITHIN GAE DEV SERVER
    </pattern>
    <template>
<![CDATA[<p>App Engine runs Python code in a sandbox, and only authorized standard library modules &amp; packages can be imported from your application.</p><br/><br/><p>as @mg has mentioned, if you want to allow for 3rd-party modules &amp; packages, you need to bundle them with your application. to do that specifically for feedparser, just drop the <code>feedparser.py</code> file into your top-level App Engine directory (where your <code>app.yaml</code>, <code>index.yaml</code>, and <code>main.py</code> are located).</p><br/><br/><p>(UPDATED Oct 2011) also keep in mind the hard limits:</p><br/><br/><ul><br/><li>max total number of files (app files and static files): 3,000 (upped to 10k in 1.5.5, Oct 2011)</li><br/><li>max size of an application or static file: 10MB (upped to 32MB in 1.5.5)</li><br/><li>max total size of all application and static files: 150MB</li><br/></ul><br/><br/><p>if you want to save on the total number of files, you can put a wad of <code>.py</code> files in a ZIP so you only pay for one file. although this article is slightly out-of-date -- recommending bundling of Django 1.0 which is now included -- the technique of bundling modules &amp; packages into ZIP files still apply:</p><br/><br/><p><a href="http://code.google.com/appengine/articles/django10_zipimport.html" rel="nofollow">http://code.google.com/appengine/articles/django10_zipimport.html</a></p><br/><br/><p>Official page in the docs which discusses the file limitations:</p><br/><br/><p><a href="http://code.google.com/appengine/docs/python/runtime.html#Pure_Python" rel="nofollow">http://code.google.com/appengine/docs/python/runtime.html#Pure_Python</a></p><br/><br/><p>(UPDATED Nov 2011): The link below features a list of whitelisted Python modules/packages with C code for 2.5. The Python 2.7 runtime frees up many restrictions so much so that the whitelist has become a blacklist. Here are the allowed/whitelisted 2.5 C modules as well as the disallowed/blacklisted 2.7 C modules:</p><br/><br/><p><a href="http://code.google.com/appengine/kb/libraries.html" rel="nofollow">http://code.google.com/appengine/kb/libraries.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( DAJAX JQUERI ) PLUGIN TO DISPLAY A CONSOL OF LIVE MESSAG
    </pattern>
    <template>
<![CDATA[<p>I you don't really need a plugin for something like this. It should be fairly simple to create something yourself.</p><br/><br/><p>Since the process is happening server side, you need to figure out when the server is done with a part, has some data to display etc. <code>setInterval</code> works just fine for that, with it you can ping your server every x seconds and handle the result. The code would look something like this:</p><br/><br/><pre><code>$(document).ready(function() {<br/>  function ping() {<br/>    $.getJSON('get/your/ajax', function(json) {<br/>      if (json.status === 'ready') {<br/>        // Do your thing, with the data sent.<br/>      };<br/>      else if (json.status === 'done') {<br/>        // Stop pinging server when you're done.<br/>        clearInterval(interval)<br/>      }<br/>    });<br/>  };<br/>  interval = setInterval('ping()', 2000);<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCDB NOT MAKE TABL FOR MY APP
    </pattern>
    <template>
<![CDATA[<p>I'd ber that the SomeModel model you mention above (not necessarily MyUser) has got a problem with it which means it can't be imported by loaddata. If not SomeModel, then a model in the same models.py that SomeModel is defined in. </p><br/><br/><p>Have you tried <code>./manage.py validate</code> ? Even if that says all models are fine, sometimes if there's an error in a models.py of an an app, the entire app becomes 'invisible' to manage.py. I can't say I know <em>why</em> this is the case, but seems to ring a bell.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYDEV AND DJANGO AUTOCOMPLET NOT DETECT DJANGO
    </pattern>
    <template>
<![CDATA[<p>You might need to set the editor code completion settings. They are under:</p><br/><br/><p><code>Window-&gt;Preferences-&gt;PyDev-&gt;Editor-&gt;Code Completion</code></p><br/><br/><p>You might also need to add the Django install or your Django project to your path. You can set this under:</p><br/><br/><p><code>Window-&gt;Preferences-&gt;PyDev-&gt;Interpreter - Python</code></p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAVE DATA FROM FORM IN DB
    </pattern>
    <template>
<![CDATA[<p>I found the solution! Rewrote only code in view.py as follows:</p><br/><br/><pre><code>def cost(request, offset):<br/>    if request.method == 'POST':<br/>        project = Project.objects.get(title=offset)<br/>        date = request.POST.get('date', '')<br/>        cost = request.POST.get('cost', '')<br/>        cost_obj = Cost(project=project, date=date, cost=cost)<br/>        cost_obj.save()<br/>        return HttpResponseRedirect('/')<br/></code></pre><br/><br/><p>Rest of the code is not changed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESERI
    </pattern>
    <template>
<![CDATA[<p>You need to use <code>response.content</code> rather than just <code>response</code> in your call to <code>deserialize</code>. The response object is an instance of HttpResponse, but has an attribute of <code>content</code> which contains the actual JSON in this case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I OBJECTS.GET BUT RETURN NONE WHEN NOTH IS FOUND
    </pattern>
    <template>
<![CDATA[<p>There is no 'built in' way to do this. Django will raise the DoesNotExist exception every time.<br/>The idiomatic way to handle this in python is to wrap it in a try catch:</p><br/><br/><pre><code>try:<br/>   x = SomeModel.objects.get(foo='bar')<br/>except SomeModel.DoesNotExist:<br/>   x = None<br/></code></pre><br/><br/><p>What I did do, is to sublcass models.Manager, create a <code>safe_get</code> like the code above and use that manager for my models. That way you can write: SomeModel.objects.safe_get(foo='bar')</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN S MAIN PAGE DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can use template hierarchy like:</p><br/><br/><p><b>index.html</b></p><br/><br/><pre><br/>...<br/>{% block content %}<br/>...<br/>{% block mycontent %}My custom text{% endblock %}<br/>...<br/>{% endblock %}<br/></pre><br/><br/><p><b>app_index.html</b></p><br/><br/><pre><br/>...<br/>    {% block mycontent %}{% endblock %}<br/>..<br/></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CTIVATE EMAIL WITH DJANGO REGISTR
    </pattern>
    <template>
<![CDATA[<p>django-registration uses the following code, internally, to handle sending emails:</p><br/><br/><pre><code>send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [self.user.email])<br/></code></pre><br/><br/><p>If you want to work, you will have to specify the value DEFAULT_FROM_EMAIL in your settings.py.</p><br/><br/><p>Also, note the following:</p><br/><br/><blockquote><br/>  <p>Mail is sent using the SMTP host and<br/>  port specified in the EMAIL_HOST  and<br/>  EMAIL_PORT  settings. The<br/>  EMAIL_HOST_USER  and<br/>  EMAIL_HOST_PASSWORD  settings, if set,<br/>  are used to authenticate to the SMTP<br/>  server, and the EMAIL_USE_TLS  setting<br/>  controls whether a secure connection<br/>  is used.</p><br/></blockquote><br/><br/><p>So, to give an example, here's what I've used in a settings.py file to use a gmail account:</p><br/><br/><pre><code>EMAIL_HOST = 'smtp.gmail.com'<br/>EMAIL_PORT = 465<br/>EMAIL_USE_TLS = True<br/><br/>EMAIL_HOST_USER = 'my@gmail.com'<br/>EMAIL_HOST_PASSWORD = 'my_emails_password'<br/></code></pre><br/><br/><p>django-registration should then be able to send emails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO URLS.PI SYSTEM BE TURN INTO PYLON S ROUT
    </pattern>
    <template>
<![CDATA[<p>Could you be  more specific? </p><br/><br/><p>If you want to adapt a django urlconf to routes at runtime it would be really tricky if not impossible and would require having a django settings.py present and an env variable pointing to it.</p><br/><br/><p>Otherwise translating a django urlconf to routes manually is doable. Routes is as flexible as django urlconfs when it comes to defining urlpatterns.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATTRIBUT ERROR MODUL OBJECT HA NO ATTRIBUT IS USABLE
    </pattern>
    <template>
<![CDATA[<p>It looks like Django is looking for a usable template loader, but is finding something in <code>settings.TEMPLATE_LOADERS</code> that isn't honoring the template loader function protocol (described briefly <a href="http://www.djangobook.com/en/2.0/chapter09/" rel="nofollow">here</a>.)</p><br/><br/><p>Is it possible that one of your recent changes was to either <code>settings.TEMPLATE_LOADERS</code> or to a custom template loader? If the latter, your template function needs an <code>is_usable</code> attribute, presumably set to <code>True</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSIT FROM PHP TO PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Can i do everything in Django as in PHP?</p><br/></blockquote><br/><br/><p>Always</p><br/><br/><blockquote><br/>  <p>Is Django a "big" hit in web development as PHP?</p><br/></blockquote><br/><br/><p>Only time will tell.</p><br/><br/><blockquote><br/>  <p>With PHP, PHP and Mysql are VERY closely related, is there a close relation between Django and Mysql?</p><br/></blockquote><br/><br/><p>Django supports several RDBMS interfaces.  MySQL is popular, so is SQLite and Postgres.</p><br/><br/><blockquote><br/>  <p>In PHP, you can easily switch between HTML, CSS, PHP all in one script.</p><br/></blockquote><br/><br/><p>That doesn't really apply at all to Django.</p><br/><br/><blockquote><br/>  <p>Or how do I incorporate HTML, CSS, javascript along with Python?</p><br/></blockquote><br/><br/><p>Actually do the Django tutorial.  You'll see how the presentation (via HTML created by templates) and the processing (via Python view functions) fit together.  It's not like PHP.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE BROWSER FROM REDIRECT WHEN A REDIRECT RESPONS IS SENT VIA AJAX
    </pattern>
    <template>
<![CDATA[<p>This is as far not possible. FF and IE are behaving correctly as per the W3 specification. </p><br/><br/><p>Here's an extract of chapter 4.6.4 of the <a href="http://www.w3.org/TR/XMLHttpRequest" rel="nofollow">W3 <code>XMLHttpRequest</code> specification</a>:</p><br/><br/><blockquote><br/>  <h2><a href="http://www.w3.org/TR/XMLHttpRequest/#infrastructure-for-the-send-method" rel="nofollow">4.6.4. Infrastructure for the send() method</a></h2><br/>  <br/>  <ul><br/>  <li><p>If the response is an HTTP redirect</p><br/>  <br/>  <p>If the redirect does not violate security (it is <a href="http://www.w3.org/TR/XMLHttpRequest/#same-origin" rel="nofollow">same origin</a> for instance), infinite loop precautions, and the scheme is supported, <strong>transparently follow the redirect</strong> while observing the <a href="http://www.w3.org/TR/XMLHttpRequest/#same-origin-request-event-rules" rel="nofollow">same-origin request event rules</a>.</p></li><br/>  </ul><br/></blockquote><br/><br/><p>A HTTP redirect basically instructs the client side to fire a brand new HTTP GET request to the given location. Your best bet is to instead do a <strong>server-side</strong> <em>include</em> or <em>forward</em> to the desired resource.</p><br/><br/><p>Alternatively you can also let it instead return some JSON which should notify your jQuery code in some callback function that it should re-fire a new ajaxical request on the URL as returned by the JSON.</p><br/><br/><p>It's however a future consideration to add a property to disable following redirects. Here's another extract:</p><br/><br/><blockquote><br/>  <h2><a href="http://www.w3.org/TR/XMLHttpRequest/#notcovered" rel="nofollow">Not in this Specification</a></h2><br/>  <br/>  <p>This specification does not include the following features which are being considered for a future version of this specification: </p><br/>  <br/>  <ul><br/>  <li>Property to disable following redirects; </li><br/>  </ul><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQLDB SSL CONNECT
    </pattern>
    <template>
<![CDATA[<p>Found the answer. OPTIONS should look like this:</p><br/><br/><pre><code>'OPTIONS': {'ssl': {'ca':'/path/to/cert.pem',},},<br/></code></pre><br/><br/><p>Make sure you keep the commas, parsing seemed to fail otherwise? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIEW ON DJANGO BOOK VS DJANGO TUTORI
    </pattern>
    <template>
<![CDATA[<p>As a course of action I'd suggest:</p><br/><br/><ol><br/><li><p><a href="http://docs.djangoproject.com/en/dev/intro/" rel="nofollow">Getting started</a> (Django docs) - this consists of an overview plus a four step process to create a web application. Stick with this. Implement it. </p></li><br/><li><p>Basically that's it. Now you know, which parts of the framework are clear to you, and which are still fuzzy. Pick a topic, e.g. model queries or template inheritance. Read about them in both the django docs and in the django book. </p></li><br/><li><p>Now that you feel a little more confident, start your own app. Once you run into issues (and you will), both the django docs and the book will be helpful. Your questions will be more specific, the documentation, which might seem a little cryptic in the beginning, will (hopefully) just give you the right answer (at least it was my impression most of the time).</p></li><br/></ol><br/><br/><p>In my experience the django docs and the django book are excellent sources, which I consult, when I run into an issue. I'd also suggest, that you check out this page for some django tips: </p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/tagged?tagnames=django&amp;sort=votes&amp;pagesize=50">http://stackoverflow.com/questions/tagged?tagnames=django&amp;sort=votes&amp;pagesize=50</a></li><br/></ul><br/><br/><p>Note: Django is RAD-y framework. You can start building apps really fast and you'll have small turnaround times. This means that you'll also discover your weaker spots faster, which in turn will help you to gain experience at a higher pace.</p><br/><br/><p>Note II: I witnessed experienced Java developers writing their first django app within hours after they discovered it (even without an extensive knowledge of python). Their weak spots were mainly the project directory layout, deployment and a certain adherence to Java idioms, which just don't look good in python.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHANG SESSION VARIABL THROUGH AJAX IN IE
    </pattern>
    <template>
<![CDATA[<p>I had the same problem, but with Pylons, what I did was create a middleware that set the following configuration in my response headers.</p><br/><br/><pre><code>headers["Cache-Control"] = "no-cache"<br/>headers["Pragma"] = "no-cache"<br/>headers["Expires"] = -<br/></code></pre><br/><br/><p><a href="http://stackoverflow.com/questions/2439987/disable-browser-caching-in-pylons">Here</a> is a description on what this does.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FIND MY ADMIN MEDIA FILE ONC I LEAV THE BUILT IN RUNSERV
    </pattern>
    <template>
<![CDATA[<p>When I look into the source code of Django, I find out the reason.</p><br/><br/><p>Somewhere in the <code>django.core.management.commands.runserver</code> module, a <code>WSGIHandler</code> object is <br/>wrapped inside an <code>AdminMediaHandler</code>.</p><br/><br/><p>According to the document, <code>AdminMediaHandler</code> is a </p><br/><br/><blockquote><br/>  <p>WSGI middleware that intercepts calls<br/>  to the admin media directory, as<br/>      defined by the ADMIN_MEDIA_PREFIX setting, and serves those images.<br/>      Use this ONLY LOCALLY, for development! This hasn't been tested<br/>  for<br/>      security and is not super efficient.</p><br/></blockquote><br/><br/><p>And that's why the admin media files can only be found automatically when I was using the test server.</p><br/><br/><p>Now I just go ahead and set up the admin media url mapping manually :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PITFAL OF GENER JSON IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>While it's hard to say definitively whether this method has any pitfalls, it's the method we use in production as you control everything that is serialized, even if the underlying model is changed.  We've been running a high traffic application in for almost two years using this method.</p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URLNAM TO URL TAG IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>The built-in <code>url</code> tag cannot do this. However <a href="http://github.com/ulope/django-reversetag" rel="nofollow">django-reversetag</a> does exactly this (and more).</p><br/><br/><p>According to the readme, the <code>reverse</code> tag provided by this code provides:</p><br/><br/><ul><br/><li>Consistent syntax ("string literals" and variables)</li><br/><li>Ability to reverse view names stored in context variables</li><br/><li>Partial reversing</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITYERROR WHEN SAVE USER WITH USERNAM EMAIL
    </pattern>
    <template>
<![CDATA[<p>I'd catch MySQLdb error in this <strong>init</strong> file of registration backend, since it is first to cause problems :</p><br/><br/><p>import MySQLdb</p><br/><br/><pre><code>(...)<br/>    new_user = None<br/>    try:    <br/>        new_user = RegistrationProfile.objects.create_inactive_user(username, email, password, site)<br/>    except MySQLdb.IntegrityError:<br/>        pass<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIC ENGIN MAXIMUM NUMBER OF STATIC FILE
    </pattern>
    <template>
<![CDATA[<p>Welcome to Stack Overflow!</p><br/><br/><p>One of the limitations in App Engine is that you cannot write directly to the filesystem from your app. Static files would be things like HTML, CSS, javascript and images that are global to your application, and get uploaded manually when you deploy. They are uploaded to and served from different servers than the ones that handle dynamic content.</p><br/><br/><p>Since you can't write to the filesystem from your app, files uploaded by users must be saved to the datastore as blobs. These are not considered static files. As others have mentioned, you can use S3 or the Blobstore API, however both of these require billing. With the free quotas, each entity can be up to 1MB, and each HTTP request and response can be up to 10MB. Using standard entities with a BlobProperty, you can easily store and serve dynamically uploaded files up to 1MB, or 10MB if you want to get fancy and store your blob in slices across multiple entities.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN INTERMITT RETURN 404 ON MODEL EDIT
    </pattern>
    <template>
<![CDATA[<p>I had this same problem.  The solution for me was to move my calls to <code>admin.site.register()</code> to <code>admin.py</code>.  With DEBUG set to false, your models are lazily loaded, so the registration calls don't always get made.  Apparently <code>admin.py</code> is always loaded at init time, however.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST A FORM WITH A CAPTCHA FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Here's the way I got around it. Import the model that actually holds Captcha info:</p><br/><br/><pre><code>from captcha.models import CaptchaStore<br/></code></pre><br/><br/><p>First, I check that the test captcha table is empty:</p><br/><br/><pre><code>captcha_count = CaptchaStore.objects.count()<br/>self.failUnlessEqual(captcha_count, 0)<br/></code></pre><br/><br/><p>After loading the page (in this case, it's a registration page), check that there's a new captcha object instance:</p><br/><br/><pre><code>captcha_count = CaptchaStore.objects.count()<br/>self.failUnlessEqual(captcha_count, 1)<br/></code></pre><br/><br/><p>Then, I retrieve the captcha instance data and POST that with the form. In my case, the POST expects 'captcha_0' to contain the hashkey, and 'captcha_1' to contain the response.</p><br/><br/><pre><code>captcha = CaptchaStore.objects.all()[0]<br/>registration_data = { # other registration data here<br/>                     'captcha_0': captcha.hashkey,<br/>                     'captcha_1': captcha.response }<br/></code></pre><br/><br/><p>You may need to tweak this a little if you start with CaptchaStore instances before you run this test. Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO F ( ) OBJECT WITH STRING CONCATEN
    </pattern>
    <template>
<![CDATA[<p>What's happening is that Django is passing the '+' through to SQL - but SQL doesn't allow the use of '+' for concatenation, so it tries to add numerically. If you use an integer in place of 'a string', it does work in the sense that it adds the integer value of <code>my_other_field</code> to your variable.</p><br/><br/><p>It's debatable whether this is a bug. The <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#query-expressions" rel="nofollow">documentation for <code>F()</code> objects</a> in lookup queries states:</p><br/><br/><blockquote><br/>  <p>Django supports the use of addition, subtraction, multiplication, division and modulo arithmetic with <code>F()</code> objects</p><br/></blockquote><br/><br/><p>so it could be argued that you shouldn't be trying to use it to update with strings. But that's certainly not documented, and the error message 'Incorrect DOUBLE value' is not very helpful. I'll open a ticket.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LANGUAG CODE
    </pattern>
    <template>
<![CDATA[<p>Wiki: </p><br/><br/><p><a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes" rel="nofollow">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR CREAT A WIKI LIK WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>There's an industry standard there.  If it was me and I was called upon to write a technical requirements document for a new Wiki, I'd start with the <a href="http://en.wikipedia.org/wiki/Category%3aWikipedia_features" rel="nofollow">features page</a> of Wikipedia.  Then, I'd attempt to use the tools in a dev operation, determining the strengths and weaknesses of the implementation.  Wikipedia is built for the masses, so there's certainly improvements you can make on the interface and layout that will better suit your needs if you choose to go this route.</p><br/><br/><p>Documentation and a roadmap is key to less factoring in development (regardless of language)  If you go in without a plan, you'll inevitably cause yourself headaches and require yourself to go back to refactor.  It's always better to build with a goal in mind and stick to a quality plan.  Obviously, we all know in this industry that the other key is to realize that often those plans are well intentioned but woefully short, so those of us who are most able and willing to adapt are going to be the most likely to succeed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE CUSTOM RAW SQL INSERT WITH EXECUTEMANI AND MYSQL
    </pattern>
    <template>
<![CDATA[<p>Here's a solution that actually uses executemany() !</p><br/><br/><p>Basically the idea in the example <a href="http://www.smipple.net/snippet/adige/kinterbasdb%20executemany" rel="nofollow">here</a> will work.</p><br/><br/><p>But note that in Django, you need to use the %s placeholder rather than the question mark.</p><br/><br/><p>Also, you will want to manage your transactions.  I'll not get into that here as there is plenty of documentation available.</p><br/><br/><pre><code>from django.db import connection,transaction<br/>cursor = connection.cursor()<br/><br/><br/><br/>query=''' INSERT INTO table_name <br/>        (var1,var2,var3) <br/>        VALUES (%s,%s,%s) '''<br/><br/><br/>queryList=buildQueryList() <br/><br/>#here buildQueryList() represents some function to populate<br/>#the list with multiple records<br/>#in the tuple format (value1,value2,value3).<br/><br/><br/>cursor.executemany(query,queryList)<br/><br/>transaction.commit()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID OF EMAIL IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>Here is part of django.core.validators you may find interesting :)</p><br/><br/><pre><code>class EmailValidator(RegexValidator):<br/><br/>    def __call__(self, value):<br/>        try:<br/>            super(EmailValidator, self).__call__(value)<br/>        except ValidationError, e:<br/>            # Trivial case failed. Try for possible IDN domain-part<br/>            if value and u'@' in value:<br/>                parts = value.split(u'@')<br/>                domain_part = parts[-1]<br/>                try:<br/>                    parts[-1] = parts[-1].encode('idna')<br/>                except UnicodeError:<br/>                    raise e<br/>                super(EmailValidator, self).__call__(u'@'.join(parts))<br/>            else:<br/>                raise<br/><br/>email_re = re.compile(<br/>    r"(^[-!#$%&amp;'*+/=?^_'{}|~0-9A-Z]+(\.[-!#$%&amp;'*+/=?^_'{}|~0-9A-Z]+)*"  # dot-atom<br/>    r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-011\013\014\016-\177])*"' # quoted-string<br/>    r')@(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?$', re.IGNORECASE)  # domain<br/>validate_email = EmailValidator(email_re, _(u'Enter a valid e-mail address.'), 'invalid')<br/></code></pre><br/><br/><p>so if you don't want to use forms and form fields, you can import <code>email_re</code> and use it in your function, or even better - import <code>validate_email</code> and use it, catching possible <code>ValidationError</code>.</p><br/><br/><pre><code>def validateEmail( email ):<br/>    from django.core.validators import validate_email<br/>    from django.core.exceptions import ValidationError<br/>    try:<br/>        validate_email( email )<br/>        return True<br/>    except ValidationError:<br/>        return False<br/></code></pre><br/><br/><p>And here is <a href="http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html" rel="nofollow">Mail::RFC822::Address regexp</a> used in PERL, if you really need to be that paranoid.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEARN DJANGO FOR A PYTHON BEGINN
    </pattern>
    <template>
<![CDATA[<p>Yes, you can. I started learning Django with very little Python knowledge too. As long as you have another language behind your belt, preferably a web based one (as you do), I don't think you're biting off too much at once.</p><br/><br/><p>Python's a pretty easy language to pick up too. Just have to get used to the significant white space and lack of semi-colons :P</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEARCH ENGIN WRITTEN WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p>I believe you'd be happy with <a href="http://bitbucket.org/mchaput/whoosh/wiki/Home" rel="nofollow">whoosh</a>, possibly "fronted" by <a href="http://haystacksearch.org/" rel="nofollow">Haystack</a> which is a neat way to support any of several search engines in Django (but the other underlying engines it supports are not "pure Python"... <code>whoosh</code> <em>is</em>).</p><br/><br/><p>I believe both whoosh and haystack support Unicode, so, in particular, Chinese too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP RAILS DJANGO APPLIC USE NOSQL DATABAS LIKE CASSANDRA
    </pattern>
    <template>
<![CDATA[<p>Addressing the Rails part of your question.</p><br/><br/><p>I would say that it is definitely viable use Ruby on Rails with Cassandra so long as you are comfortable with giving up some of the ActiveRecord idioms you may have become accustomed to. But that is probably true to a great or lesser extent with any marriage of Rails and a NoSQL datastore. The closest thing to ActiveRecord that is emerging is the <a href="http://github.com/NZKoz/cassandra_object" rel="nofollow">Cassandra Object</a> gem but this is still a work in progress by the author's admission. The most stable interface seems to be the <a href="http://github.com/fauna/cassandra" rel="nofollow">Cassandra</a> gem but this is a relatively low level API.</p><br/><br/><p>If you are interested in Cassandra from a learning perspective or you have identified it as the best option for an application you are building then well and good. Assuming you select Rails and Cassandra you can rest assured that the support for these will only improve and probably quite quickly given the growing interest in NoSQL and in Cassandra in particular.</p><br/><br/><p>However if you have other options which would work and Cassandra is only one of them then I would enter some caveats. Firstly, Rails on Cassandra is an evolving entity so you may encounter instability or things you expect to work don't work at all or completely differently that you expect. Secondly, and related to this, is that there are very few Rails on Cassandra deployments out in the wild right now so getting support from forums this will be all the more difficult. You may end up on your own with something when you can't afford to be. You may end up having to roll up your sleeves and pitch in to help with supporting the code yourself, which may be no bad thing.</p><br/><br/><p>Personally, I would wait to see how this picture pans out before I'd go with Cassandra unless I felt that nothing else could do the job as well. If it's for learning then I'd say go ahead. Can be a lot of fun being at the bleeding edge of things like this.</p><br/><br/><p><strong>References</strong>:</p><br/><br/><ul><br/><li><a href="http://www.subelsky.com/2010/05/real-world-ruby-and-cassandra.html" rel="nofollow">Real world Ruby and Cassandra</a></li><br/><li><a href="http://blog.evanweaver.com/articles/2009/07/06/up-and-running-with-cassandra/" rel="nofollow">Up and running with Cassandra</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO OBJECT WITH A RANDOM PRIMARI KEY
    </pattern>
    <template>
<![CDATA[<p>Why not just encrypt the normal sequential ids instead? To someone who doesn't know the encryption key, the ids will seem just as random. You can write a wrapper that automatically decrypts the ID on the way to the DB, and encrypts it on the way from the DB.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THROUGH HTTPREQUEST POST VARIABL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p><code>request.POST</code> is a dictionary-like object containing all given HTTP POST parameters. </p><br/><br/><p>When you loop through request.POST, you only get the keys. To retrieve the keys and values together, use the iteritems method.</p><br/><br/><pre><code>def my_view(request):<br/>    # loop through keys<br/>    for key in request.POST:<br/>        value = request.POST['key']<br/>    # loop through keys and values<br/>    for key, value in request.POST.iteritems():<br/>        # do something<br/></code></pre><br/><br/><p>For more information see the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/" rel="nofollow">Django docs</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER GET LIST OF GROUP OR HOW TO CONVERT MULTIPLECHOICEFIELD TO CHOICEFIELD
    </pattern>
    <template>
<![CDATA[<p>it appears that it's that modelchoice would be wrong because current group in edit form will not be selected="Selected"</p><br/><br/><p>so this is solution FINALLY:</p><br/><br/><pre><code>groups = forms.ModelMultipleChoiceField( <br/>    queryset=None, <br/>    required=True, <br/>    widget=GroupsSelect,<br/>)<br/><br/> def __init__(self, *args, **kw):  <br/>    super(ModelForm, self).__init__(*args, **kw)<br/>    self.fields['groups'].queryset=Group.objects.filter(user=self.instance.id)<br/><br/>#view<br/>op = UserAttributes.objects.get(id=operator_id)<br/>form = SettingsOperatorsForm(instance=op)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAYSTACK WHOOSH REBUILD INDEX ERROR
    </pattern>
    <template>
<![CDATA[<p>I had the same problem just now. Did you try »update_index« instead of »rebuild_index«? That seemed to work for me ...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIN SITE AUTOMAT GET CURRENT USER
    </pattern>
    <template>
<![CDATA[<p>It <a href="http://www.b-list.org/weblog/2008/dec/24/admin/" rel="nofollow">can be done</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MATPLOTLIB MATSHOW LABEL
    </pattern>
    <template>
<![CDATA[<p>What's happening is that the xticks actually extend outside of the displayed figure when using matshow.  (I'm not quite sure exactly why this is. I've almost never used matshow, though.)  </p><br/><br/><p>To demonstrate this, look at the output of <code>ax.get_xticks()</code>. In your case, it's <code>array([-1.,  0.,  1.,  2.,  3.,  4.])</code>.  Therefore, when you set the xtick labels, "ABC" is at &lt;-1, -1>, and isn't displayed on the figure.</p><br/><br/><p>The easiest solution is just to prepend a blank label to your list of labels, e.g.</p><br/><br/><pre><code>ax.set_xticklabels(['']+alpha)<br/>ax.set_yticklabels(['']+alpha)<br/></code></pre><br/><br/><p>As a full example:</p><br/><br/><pre><code>import numpy as np<br/>import matplotlib.pyplot as plt<br/><br/>alpha = ['ABC', 'DEF', 'GHI', 'JKL']<br/><br/>data = np.random.random((4,4))<br/><br/>fig = plt.figure()<br/>ax = fig.add_subplot(111)<br/>cax = ax.matshow(data, interpolation='nearest')<br/>fig.colorbar(cax)<br/><br/>ax.set_xticklabels(['']+alpha)<br/>ax.set_yticklabels(['']+alpha)<br/><br/>plt.show()<br/></code></pre><br/><br/><p><img src="http://i.stack.imgur.com/fbKgh.png" alt="Matshow example"></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWO THING IN ONE HTTPRESPONS
    </pattern>
    <template>
<![CDATA[<p>When I'm serializing a collection of objects, I typically include the pagination information in the response body itself. If I had 50 objects that I wanted to serve up 10 per page, the JSON would look something like this:</p><br/><br/><pre><code>{<br/>    "count": 50,<br/>    "objects": [<br/>        {<br/>            ...<br/>        }<br/>    ],<br/>    "pages": {<br/>        "count": 5,<br/>        "current": "http://api.example.com/objects/?page=3",<br/>        "first": "http://api.example.com/objects/",<br/>        "last": "http://api.example.com/objects/?page=5",<br/>        "next": "http://api.example.com/objects/?page=4",<br/>        "previous": "http://api.example.com/objects/?page=2"<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT SYSTEM FOR DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>The Django templating system can be used for any text you like.  It's used for HTML most of the time, but it could also be used to create CSS.  The CSS reference in your HTML can be to a dynamic URL instead of to a static file, and the view function can create whatever context you like, then a .css template file can create your CSS.</p><br/><br/><p>If you have only a few different CSS possibilities, then you may be better served by creating them as static files, and using the HTML template to select the CSS file you want by writing a different CSS reference depending you your conditions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TMP FILE AFTER RETURN HTTPRESPONS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can use a NamedTemporaryFile:</p><br/><br/><pre><code>from django.core.files.temp import NamedTemporaryFile<br/>def send_file(request):<br/>    newfile = NamedTemporaryFile(suffix='.txt')<br/>    # save your data to newfile.name<br/>    wrapper = FileWrapper(newfile)<br/>    response = HttpResponse(wrapper, content_type=mime_type)<br/>    response['Content-Disposition'] = 'attachment; filename=%s' % os.path.basename(modelfile.name)<br/>    response['Content-Length'] = os.path.getsize(modelfile.name)<br/>    return response<br/></code></pre><br/><br/><p>temporary file should be deleted once the newfile object is evicted.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE REQUEST.US IN A PISTON CLASSMETHOD
    </pattern>
    <template>
<![CDATA[<p>I am not aware of the piston API, but how about using the thread locals middleware to access the request</p><br/><br/><p>add this to middleware</p><br/><br/><pre><code>try:                                                                    <br/>    from threading import local                                         <br/>except ImportError:                                                     <br/>    from django.utils._threading_local import local                     <br/><br/>_thread_locals = local()                                                <br/>def get_request():                                                <br/>    return getattr(_thread_locals, 'request', None)                       <br/><br/>class ThreadLocals(object):                                             <br/>    def process_request(self, request):                                 <br/>        _thread_locals.request = request<br/></code></pre><br/><br/><p>and update the settings with the ThreadLocals middleware</p><br/><br/><p>and wherever you want to access the request <code>import get_request</code> from middleware</p><br/><br/><p>if you want to just get the current user, modify the middleware to set only <code>request.user</code> in thread locals</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTIMPLEMENTEDERROR ONLI TEMPFILE.TEMPORARYFIL IS AVAIL FOR USE IN DJANGO ON GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>You need to update the settings.py file with the following to change the default Django behaviour:</p><br/><br/><pre><code># only use the memory file uploader, do not use the file system - not able to do so on<br/># google app engine<br/>FILE_UPLOAD_HANDLERS = ('django.core.files.uploadhandler.MemoryFileUploadHandler',)<br/>FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440 # the django default: 2.5MB<br/></code></pre><br/><br/><p>More info here:<a href="http://docs.djangoproject.com/en/dev/ref/settings/#std%3asetting-FILE_UPLOAD_MAX_MEMORY_SIZE" rel="nofollow">FILE_UPLOAD_MAX_MEMORY_SIZE</a> and <br/><a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs#upload-handlers" rel="nofollow">upload-handlers</a></p><br/><br/><p>If you are uploading images you will be restricted by the 1MB quotas for image transformation etc.. <a href="http://code.google.com/appengine/docs/python/images/overview.html#Quotas_and_Limits" rel="nofollow">Quotas_and_Limits</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      Z INDEX DJANGO
    </pattern>
    <template>
<![CDATA[<p>Looking through the django template tags I found a nice way of doing it <strong>{{ifchanged}}</strong>, its worth mentioning for future use.</p><br/><br/><p>My list of objects is passed to my template ordered alphabetically:</p><br/><br/><pre><code>Objects.get.all().order_by('title')<br/></code></pre><br/><br/><p>Then in my template i do :</p><br/><br/><pre><code># loop through all objects<br/>{% for obj in objs %}<br/>  #display the letter only when it changes<br/>  {% ifchanged obj.title.0 %}&lt;h1&gt;{{obj.title.0}}&lt;/h1&gt;{% endifchanged%}<br/>  # display the object<br/>  &lt;h2&gt;obj.title&lt;/h2&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>Its a very handy 1 line peice of code in the template. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RELAT MODEL IN PROFIL FORM USE DJANGO PROFIL
    </pattern>
    <template>
<![CDATA[<p>that's quite a contortion to cram two modelforms into the same form.  Choices:</p><br/><br/><ul><br/><li><p>Make your own view.  You could utilize the short-circuit, first-come-first-serve nature of django urls to pirate that one.</p></li><br/><li><p>Bring django-profiles into your own version control and hack it to your heart's content without the constraints of reusability.</p></li><br/><li><p>You can just create the one big form with your own save method and use django-profiles in place.  This would be more tedious than just being able to declare <code>fields = ('first_name', 'last_name', 'email')</code> and <code>exclude = ("user",)</code>.  <a href="https://bitbucket.org/ubernostrum/django-profiles/src/c21962558420/profiles/views.py#cl-41" rel="nofollow">See the docstrings</a></p></li><br/></ul><br/><br/><p>Depends on the project.  I would definitely be tempted to write my own.  There's not much to a profiles app and you may run into other places where you wish you had more control.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIX HANG WHEN SEND EMAIL
    </pattern>
    <template>
<![CDATA[<p>Your mail server isn't working fine. When you connect to it using <code>telnet</code>, you should see a welcome message along the lines of:</p><br/><br/><pre><code>220 your.server.name ESMTP Postfix<br/></code></pre><br/><br/><p>(You can check the greeting that you should be seeing by running <code>postconf smtpd_banner</code>.)</p><br/><br/><p>You don't get that, so the mail server isn't running properly. <code>send_mail</code> is probably hanging waiting for that initial message.</p><br/><br/><p>Restart Postfix, and look in the <code>/var/log/mail.*</code> log files; there may be a clue in there as to why it's not working.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE WITH MONTH NAME IN POLISH IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://babel.edgewall.org/wiki/ApiDocs/0.9/babel.dates" rel="nofollow">Babel</a>:</p><br/><br/><pre><code>&gt;&gt;&gt; import babel.dates<br/>&gt;&gt;&gt; import datetime<br/>&gt;&gt;&gt; now = datetime.datetime.now()<br/>&gt;&gt;&gt; print babel.dates.format_date(now, 'd MMMM yyyy', locale='pl_PL')<br/>6 września 2010<br/></code></pre><br/><br/><p><strong>Update:</strong> Incorporated Nathan Davis' comment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI PLUGIN FOR FORM VALID THAT WORK WELL WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I can't say specifically for Django, but The jquery Form plugin is the best one I've found in general.</p><br/><br/><p><a href="http://jquery.malsup.com/form/" rel="nofollow">http://jquery.malsup.com/form/</a></p><br/><br/><p>Doing a quick google only brings up one issue between the two - <a href="http://stackoverflow.com/questions/1882526/issue-with-django-form-when-submitted-using-jquery-form-plugin">Issue with Django form when submitted using jQuery form plugin</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAG YOUR FORK REUSABL APP ON DJANGO WITH GIT
    </pattern>
    <template>
<![CDATA[<p>Using virtualenv (or even better virtualenvwrapper) plus pip plus requiremens.txt will allow you to keep you environment clean.</p><br/><br/><p>requirement.txt allow you to use git repo as an app source, and even you can specify a specific version/tag/branch to use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AVOID THI RACE CONDIT IN PYTHON DJANGO MYSQL
    </pattern>
    <template>
<![CDATA[<p>This may be a good use case for <a href="http://en.wikipedia.org/wiki/Optimistic_concurrency_control" rel="nofollow">optimistic locking</a>. There's a few ways to do it:</p><br/><br/><ul><br/><li>You can have a version number, and you run your <code>UPDATE</code> queries so that it always includes the version number in the <code>WHERE</code> clause, and then check if any rows were changed.</li><br/><li>Include every value of the record (before the changes you made) in the <code>WHERE</code> clause, that way you can be sure that the record you are saving is exactly the same as when you read it.</li><br/></ul><br/><br/><p>How to implement optimistic locking in Django? Check out this question: <a href="http://stackoverflow.com/questions/320096/django-how-can-i-protect-against-concurrent-modification-of-data-base-entries">Django: How can I protect against concurrent modification of data base entries</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR DJANGO STYLE ROUT IN PERL
    </pattern>
    <template>
<![CDATA[<p>I think the Perl web framework with most Rails-like routing would be <a href="http://mojolicious.org/" rel="nofollow"><code>Mojolicious</code></a></p><br/><br/><p>The creator of <a href="http://mojolicious.org/" rel="nofollow"><code>Mojolicious</code></a> did write an excellent blog post called "Dispatchers for dummies" comparing the major Perl, Ruby &amp; Python web frameworks and highlighting what he believed were improvements he made with routing on <a href="http://mojolicious.org/" rel="nofollow"><code>Mojolicious</code></a>. </p><br/><br/><p>Unfortunately above post is no longer online :(   Instead you have to settle for the <a href="http://search.cpan.org/dist/Mojolicious/lib/Mojolicious/Guides/Routing.pod" rel="nofollow"><code>Mojolicious::Guides::Routing</code></a> documentation.  Here is a routing example from the docs:</p><br/><br/><pre><code>package MyApp;<br/>use base 'Mojolicious';<br/><br/>sub startup {<br/>    my $self = shift;<br/><br/>    # Router<br/>    my $r = $self-&gt;routes;<br/><br/>    # Route<br/>    $r-&gt;route('/welcome')-&gt;to(controller =&gt; 'foo', action =&gt; 'welcome');<br/>}<br/><br/>1;<br/></code></pre><br/><br/><p><br><br/>There are also other Perl frameworks which provide direct URL to action routing:</p><br/><br/><ul><br/><li><a href="http://jifty.org" rel="nofollow"><code>Jifty</code></a>   (uses a nice <a href="http://search.cpan.org/dist/Jifty/lib/Jifty/Dispatcher.pm" rel="nofollow">routing DSL</a>)</li><br/><li><a href="http://perldancer.org/" rel="nofollow"><code>Dancer</code></a> (Ruby <a href="http://www.sinatrarb.com/" rel="nofollow">Sinatra</a>-like)</li><br/><li><a href="http://search.cpan.org/dist/Mojolicious/lib/Mojolicious/Lite.pm" rel="nofollow"><code>Mojolicious::Lite</code></a> (ditto)</li><br/><li><a href="http://search.cpan.org/dist/Squatting/" rel="nofollow"><code>Squatting</code></a> (inspired by Ruby <a href="http://www.ruby-camping.com/" rel="nofollow">Camping</a>)</li><br/><li><a href="http://search.cpan.org/dist/Web-Simple/lib/Web/Simple.pm" rel="nofollow"><code>Web::Simple</code></a></li><br/></ul><br/><br/><p>A more complete list of <a href="http://www.perlfoundation.org/perl5/index.cgi?web_frameworks" rel="nofollow">Perl web frameworks</a> can be found on the <a href="http://www.perlfoundation.org/perl5/" rel="nofollow">Perl5 wiki</a></p><br/><br/><p><br><br/>And if you are framework adverse then take a look at <a href="http://plackperl.org/" rel="nofollow"><code>Plack</code></a> (<sup><sub>also see <a href="http://en.wikipedia.org/wiki/PSGI" rel="nofollow">PSGI</a> wikipedia)</sub></sup>.  This is same as <a href="http://rack.rubyforge.org/" rel="nofollow">Rack</a> on Ruby and <a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" rel="nofollow">WSGI</a> on Python.</p><br/><br/><p>Here is a quick and dirty example of Plack:</p><br/><br/><pre><code>use 5.012;<br/>use warnings;<br/><br/>my $app = sub {<br/>    my $env = shift;<br/><br/>    given ($env-&gt;{PATH_INFO}) {<br/><br/>        return [ 200, [ 'Content-Type' =&gt; 'text/plain' ], [ 'Hello Baz!' ] ]<br/>            when '/hello/baz';<br/><br/>        default {<br/>            return [ 200, [ 'Content-Type' =&gt; 'text/plain' ], [ 'Hello World' ]];<br/>        }<br/>    }<br/>}<br/></code></pre><br/><br/><p>Then use <code>plackup above_script.psgi</code> and away you go.</p><br/><br/><p>/I3az/</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM SUCCESS CALLBACK NOT BE CALL
    </pattern>
    <template>
<![CDATA[<p>In case anyone had a similar problem, here's the final javascript I ended up using:</p><br/><br/><pre><code>function upload_results_dialog($data_elem){<br/>    var $dialog_box = $("#ajax-dialog-box"),<br/>    data = $data_elem.attr("data");<br/>    $.ajax({<br/>        url: "../upload/" + data+ "/",<br/>        success: function(response){<br/>            $dialog_box.html(response);<br/>            $dialog_box.dialog("option",<br/>                {<br/>                    title: "Upload",<br/>                    height: 260,<br/>                    width: 450,<br/>                    buttons: {<br/>                        Cancel: function(){<br/>                            $(this).dialog('close');<br/>                        },<br/>                        Upload: function(){<br/>                            upload($(this));<br/>                        }<br/>                    }<br/>                }<br/>            );<br/>            $dialog_box.dialog('open');<br/>        }<br/>    });<br/>}<br/>function upload($dialog_box){<br/>    var $form = $dialog_box.find("form"),<br/>      iframe = $dialog_box.find("iframe"),<br/>      $html = $($iframe.contents()),<br/>      $iframe_form = $html.find("form");<br/>    $iframe_form.html($form.contents());<br/><br/>    //Set the onload function<br/>    $iframe.attr("onload","check_file_uploaded_valid()");<br/>    $iframe_form.submit();<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRES A MULTI SELECT FIELD FOR WEEKDAY IN A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>So, what you are looking for is a mechanism to allow for multi-select choices.</p><br/><br/><p>This question <a href="http://stackoverflow.com/questions/1711397/in-django-admin-can-we-have-a-multiple-select-based-on-choices">has been asked before.</a></p><br/><br/><p>I think that Adrian's answer - suggesting the use of a Multiselect widget on a custom form - is the closest you will get without creating a database table.</p><br/><br/><hr><br/><br/><p><em><strong>Edit after your comment:</em></strong></p><br/><br/><p>I see what you mean. Even though the mechanism proposed in the answer I point out above works UI wise, the database representation of a field with multiple values isn't normalized and is not supported by the MultipleChoiceField anyhow.</p><br/><br/><p>I started going down the path of trying a bitmask, but that will require a new custom field (MultipleChoiceBitmaskField?) that given a list of choices in a format like:</p><br/><br/><pre><code>days=['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']<br/>weekdays=([((lambda x:2**x)(days.index(weekday)), weekday) for weekday in days]<br/></code></pre><br/><br/><p>Would render a SelectMultiple widget and normalize to an integer that is the sum of the selected weekdays.</p><br/><br/><p>Problem is it is too late in my timezone to tackle that today. I might try my hand at it this weekend and post back here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WNTIM WHEN RELOAD MOD WSGI DAEMON
    </pattern>
    <template>
<![CDATA[<p>In daemon mode there is no concept of a graceful restart when WSGI script file is touched to force a download. That is, unlike Apache itself, which will start new Apache server child processes while waiting for old processes to finish up with current requests, for mod_wsgi daemon processes, the existing process must exit before a new one starts up.</p><br/><br/><p>The consequences of this are that mod_wsgi can't wait indefinitely for current requests to complete. If it did, then there is a risk that if all daemon processes are tied up waiting for current requests to finish, that clients would see a noticeable delay in being handled.</p><br/><br/><p>At the other end of the scale however, the daemon process can't be immediately killed as that would cause current requests to be interrupted.</p><br/><br/><p>A middle ground therefore exists. The daemon process will wait for requests to finish before exiting, but if they haven't completed within the shutdown period, then the daemon process will be forcibly quit and the active requests will be interrupted.</p><br/><br/><p>The period of this shutdown timeout defaults to 5 seconds. It can be overridden using the shutdown-timeout option to WSGIDaemonProcess directive, but due consideration should be given to the effects of changing it.</p><br/><br/><p>Thus, in respect of this specific issue, if you have long running requests still active when the first request comes in after you touched the WSGI script file, there is the risk that the active long requests will be interrupted.</p><br/><br/><p>The next notable thing you may see is that even if there are no long running requests and processes shutdown promptly, then it is still necessary to load up the WSGI application again within the new process. The time this takes will be seen as a delay in handling the request. How big that delay is will depend on the framework and your application. The worst offender as far as time taken to start up that I know of is TurboGears. Django somewhat better and the best as far as quick start up times being lightweight micro frameworks such as Flask.</p><br/><br/><p>Do note that any new requests which come in while these shutdown and startup delays occur should not be lost. This is because the HTTP listener socket has a certain depth and connections queue up in that waiting to be accepted. If the number of requests arriving is huge though and that queue fills up, then you will start to see connection refused errors in the browser.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLITE3 AD THOUSAND OF ROW
    </pattern>
    <template>
<![CDATA[<p>Are you using transactions ? SQLite will create a transaction for every <a href="http://docs.python.org/library/sqlite3.html" rel="nofollow">insert statement individually by default</a>, which slows things way down.</p><br/><br/><blockquote><br/>  <p>By default, the sqlite3 module opens<br/>  transactions implicitly before a Data<br/>  Modification Language (DML) statement<br/>  (i.e. INSERT/UPDATE/DELETE/REPLACE)</p><br/></blockquote><br/><br/><p>If you manually create one single transaction at the start and commit it at the end instead,  it will speed things up a lot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN HOW CAN I ADD THE GREEN PLU SIGN FOR MANY TO MANI FIELD IN CUSTOM ADMIN FORM
    </pattern>
    <template>
<![CDATA[<p>With the help from lazerscience and this <a href="https://groups.google.com/group/django-users/browse_thread/thread/5950235765d8e46a/c21bed1e9bdeab57?show_docid=c21bed1e9bdeab57" rel="nofollow">post</a> I ended up with the following.</p><br/><br/><p>The ModelAdmin:</p><br/><br/><pre><code>class GalleryAdmin(admin.ModelAdmin):<br/><br/>    form = GalleryForm<br/><br/>    def __init__(self, model, admin_site):<br/>        self.form.admin_site = admin_site <br/>        super(GalleryAdmin, self).__init__(model, admin_site)<br/></code></pre><br/><br/><p>And my form:</p><br/><br/><pre><code>class GalleryForm(ModelForm):<br/><br/>    photos = ThumbnailChoiceField(queryset=Photo.objects.all(), label='Photos', widget=MyWidget(), required=False)<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(GalleryForm, self).__init__(*args, **kwargs)<br/>        rel = ManyToOneRel(self.instance.photos.model, 'id') <br/>        self.fields['photos'].widget = RelatedFieldWidgetWrapper(self.fields['photos'].widget, rel, self.admin_site) <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO USE GETATTR ( OR OTHER METHOD ) TO CALL OBJECT THAT HA MULTIPL ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>You forgot to call the result.</p><br/><br/><pre><code>dbobject = mymodel.objects.all()<br/></code></pre><br/><br/><p>Accesses the method <code>mymodel.objects.all</code> and then calls it.</p><br/><br/><pre><code>ret = getattr(mymodel,'objects')<br/>self.dbobject = getattr(ret,'all')<br/></code></pre><br/><br/><p>accesses the method <code>mymodel.objects.all</code> but does not call it.</p><br/><br/><p>All you need is to change the last line to:</p><br/><br/><pre><code>self.dbobject = getattr(ret,'all')()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR PARS POST JSON MESSAG DJANGO GA
    </pattern>
    <template>
<![CDATA[<p>The first thing you need to remember when working with json is that AppEngine lives with python 2.5. This means json is not a standard part of python yet.</p><br/><br/><p>To solve that bit I found simplejson somewhere online and packed it together with my code. The API for built-in json and simplejson are essentially the same (or maybe I've just not noticed anything different) so just import it like so:</p><br/><br/><pre><code>import simplejson as json<br/></code></pre><br/><br/><p>And use it like you're used to.</p><br/><br/><p>Now, as for the QueryDict. Yes, what you're getting through is raw POST data, there is no logical reason for it to get parsed as json and play pretend that it's a normal query-based POST request. Honestly, I never thought django was even able of making this leap of judgement for us. So, to get to your data use something along these lines:</p><br/><br/><pre><code>data = json.loads(request.raw_post_data)<br/></code></pre><br/><br/><p>For reference of what django was expecting to see in the raw POST data check here: <a href="http://en.wikipedia.org/wiki/POST_(HTTP" rel="nofollow">http://en.wikipedia.org/wiki/POST_(HTTP</a>), specifically the bit about how application/x-www-form-urlencoded works.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO WEB DEVELOPMENT. ASP.NET OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've been an ASP.NET programmer for a few years, and I think it's pretty easy to get into. The downsides here are that Microsoft products (TFS in particular) are expensive. Of course, my experiences have been directly related to that -- I've never tried Python in any regard -- so I can only offer my perspectives as an ASP.NET programmer.</p><br/><br/><p>There are a lot of people who would (accurately) tell you that the page lifecycle in ASP.NET is a gigantic pain in the ass, and that's true too. I personally don't use the server-side part of ASP.NET very often anymore because juggling the lifecycle just leads to messy code and built-in obtuseness. That said, it's really easy to integrate ASP.NET WebServices with jQuery and JavaScript.</p><br/><br/><p>My experiences with IIS have been pretty good as well, although I can't speak to its problems in more complex environments.</p><br/><br/><p>I do love TFS, though. In particular, if you're working as a part of a team and need to get user bug reports or enhancement requests, there's a lot of great built-in integration. However, configuring and maintaining TFS is a full-time job in and of itself if you're a part of a development team in a corporation.</p><br/><br/><p>All that said, I'm not sure it makes much sense to limit yourself to two core languages and then ask about career opportunities. These are going to vary from place to place. I don't see many Python positions where I live, and there were a lot of MS/C#/ASP.NET positions available when I was looking for a job.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBQUERI USE QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Short answer: No. The <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none" rel="nofollow"><code>extra</code></a> method doesn't expect <em>querysets</em> to be passed in. </p><br/><br/><p>If you think about it a bit, it makes sense. Querysets are an abstraction used to represent the results of a fetch operation on the database and <code>extra</code> is a convenient way of attaching custom fields from the database to a queryset. Unless you change the fundamental nature of <code>extra</code> to mean "custom filtering with another queryset" this will not work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROTOTYP AJAX.REQUEST IN INTERNET EXPLOR 8 PROMPT FILE DOWNLOAD
    </pattern>
    <template>
<![CDATA[<p>This problem has been solved. Crazy issue here but it turns out that there was a javascript error that was preventing the script from executing and the standard form submit was occurring thru the browser thus returning AJAX code as a file download prompt. The form was designed in such a way that javascript-disabled browsers would still be able to use the form without ajax using a hidden input field with name "js". The javascript would blank the value of this field when submitting via AJAX to let server know the response should be JSON and not a full page refresh. Well, that part of the javascript that blanked the js field value processed normally but then the script errored out and thus the event.stop() javascript never executed. Resulting in the form being processed as a standard Submit button click, POST request through browser.</p><br/><br/><p>Note in the code above...</p><br/><br/><pre><code>askForm = $('askForm');<br/></code></pre><br/><br/><p>which clearly should be...</p><br/><br/><pre><code>var askForm = $('askForm');<br/></code></pre><br/><br/><p>Thanks to the browsers that allowed this syntax but it sent me on an IE8 wild goose chase as a result. Always learning.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYJAMA WITH PINAX + DJANGO
    </pattern>
    <template>
<![CDATA[<p>Pinax is a collection of django applications. There's nothing specific to integrating pinax and pyjamas more than it is specific to integrating django and pyjamas. So the <a href="http://pyjs.org/book/output/Bookreader.html#Rest%20of%20the%20World" rel="nofollow">pyjamas book</a> would be a good starting point.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XML FILE FROM MODEL DATA
    </pattern>
    <template>
<![CDATA[<p>You have two possible solutions here:</p><br/><br/><p><strong>1.</strong> </p><br/><br/><p>You can extend base django xml serializer(<code>django.core.serializers.xml_serializer.Serializer</code>) and modify it so it will return data in your structure. You could then run ex.</p><br/><br/><pre><code>YourSerializer('xml', myModel.objects.filter(instanceIwantTowrite), fields=('fieldName'))<br/></code></pre><br/><br/><p>and it will output data in your structure.</p><br/><br/><p><strong>2.</strong> </p><br/><br/><p>Write simple function that will render template with your data structure and return xml data in your format:</p><br/><br/><p>Python code</p><br/><br/><pre><code>from django.template.loader import render_to_string<br/><br/>def my_serialize(query_set):<br/>    xml = render_to_string('xml_template.xml', {'query_set': query_set})<br/><br/>    return xml<br/></code></pre><br/><br/><p>Template xml_template.xml</p><br/><br/><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br/>&lt;textFields&gt;<br/>     {% for object in query_set %}<br/>     &lt;textField id="{{ object.pk }}" text="{{ object.my_field }}" /&gt;<br/>     {% endfor %}<br/>&lt;/textFields&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI SQL IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>First, one of the outer joins appears to be a bad idea for this kind of thing.  Since you provided <strong>no</strong> information on your model, I can only guess. </p><br/><br/><p>Are you saying that you may not have a CARD for each user?  That makes some sense.</p><br/><br/><p>Are you also saying that some cards don't have card types?  That doesn't often make sense.  You haven't provided any details.  However, if a Card doesn't have a Card Type, I'll bet you have either problems elsewhere in your application, or you've chosen really poor names that don't provide the least clue as to   what these things mean.  You should fix the other parts of your application to assure that each card actually does have a card type.  Or you should fix your names to be meaningful.</p><br/><br/><p>Clearly, the ORM statement uses inner joins and your SQL uses outer joins.    What's the real question?  How to do outer joins correctly?<br/>If you take the time to search for [Django] and Left Outer Join, you'll see that the Raw SQL is a terrible idea.</p><br/><br/><p>Or is the real question how to do the sum correctly?  From your own answer it appears that the SQL is wrong and you're really having trouble with the sum.  If so, please clean up the SQL to be correct.</p><br/><br/><p>If the outer joins are part of the problem -- not just visual noise -- then you have to do something like this for an outer join with a sum.</p><br/><br/><pre><code>def user_profit():<br/>    for u in User.objects.all():<br/>        profit = sum[ t.price - t.cost<br/>            for c in u.card_set.all()<br/>                for t in c.cardtype_set.all() ]<br/>        yield user, profit<br/></code></pre><br/><br/><p>In your view function, you can then provide the value of function to the template to render the report.  Since it's a generator, no huge list is created in memory.  If you need to paginate, you can provide the generator to the paginator and everything works out reasonably well.</p><br/><br/><p>This is often of comparable speed to a complex raw SQL query with a lot of outer joins. </p><br/><br/><p>If, indeed, the card to card-type relationship is not actually optional, then you can shorten this, somewhat.  You still have an outer join to think about.</p><br/><br/><pre><code>def user_profit():<br/>    for u in User.objects.all():<br/>        profit = sum[ c.cardtype.price - c.cardtype.cost<br/>            for c in u.card_set.all() ]<br/>        yield user, profit<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL TO SCREENSHOT ( SCRIPT )
    </pattern>
    <template>
<![CDATA[<p>Why do you need a script when you can use a service from another site?<br><br/>Check for example what I am using: WebSnapr <a href="http://www.websnapr.com/" rel="nofollow">http://www.websnapr.com/</a><br><br/>Or check <a href="http://www.google.ro/search?ie=UTF-8&amp;q=website+thumbnail" rel="nofollow">http://www.google.ro/search?ie=UTF-8&amp;q=website+thumbnail</a> if something else fits your request.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIBGEOS C 1.DL CA N T BE LOAD BY PYTHON
    </pattern>
    <template>
<![CDATA[<p>Same issue here. Could you maybe be so kind as to share the correct DLL? If that indeed solves the problem. Or is installing OSGeo4W the only way?If so what installation procedure did you follow?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATE DIR VS INSTALLED APP
    </pattern>
    <template>
<![CDATA[<p>You can use templates in TEMPLATE_DIRS to either override templates coming from apps (by giving them the same name) or for templates that are relevant for more than one app (base.html comes to mind).</p><br/><br/><p>This works because of the order in which template loaders are set in TEMPLATE_LOADERS (filesystem before app_directories).</p><br/><br/><p>It's a good idea to organize your templates in the following way to avoid name collisions:</p><br/><br/><pre><code>&lt;project&gt;/<br/>    &lt;app1&gt;/templates/&lt;app1&gt;/<br/>        foo.html<br/>        bar.html<br/>    &lt;app2&gt;/templates/&lt;app2&gt;/<br/>        foo.html<br/>    templates/<br/>        &lt;app1&gt;/<br/>            foo.html<br/>        base.html<br/>        xyzzy.html<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORACL INTEGR ERROR WHEN SAVE ANI INSTANC TO DATABAS
    </pattern>
    <template>
<![CDATA[<p>There is a ticket open (<a href="http://code.djangoproject.com/ticket/1946" rel="nofollow">#1946</a>) to allow exactly that, overriding the default sequence name. But as it's not closed yet, I don't think there is a way without hacking.</p><br/><br/><p>I haven't used Oracle before, but a quick search suggests that it is possible to create aliases/synonyms for sequences. <code>manage.py sqlall &lt;app&gt;</code> should show you the sequence name Django is expecting. So you probably could just make this an alias for <code>SEQ_GET_NEW_ID</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW CONTENT WITH AJAX
    </pattern>
    <template>
<![CDATA[<p>If the content is simple, I would get JSON and build the HTML in jQuery. If it's complex, I would create a template and call render() on it on the server and return the HTML (which jQuery could either append to other content or replace existing content).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      404 PAGE DISPLAY FOR DEV WEB SERVER ( HTTP 127.0.0.1 8000 )
    </pattern>
    <template>
<![CDATA[<p>clearly you are not having any url that handles request to 'http://127.0.0.1:8000/'.</p><br/><br/><p>To see the admin page visit, 'http://127.0.0.1:8000/admin/'</p><br/><br/><p>When you have the admin urls</p><br/><br/><pre><code># (r'^admin/doc/', include('django.contrib.admindocs.urls')),<br/><br/># Uncomment the next line to enable the admin:<br/># (r'^admin/', include(admin.site.urls)),<br/></code></pre><br/><br/><p>commented and no other urls, django welcome page is shown by default at 'http://127.0.0.1:8000/'</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CA N T ACCESS DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>Append <code>/home/ygamretuta/dev/site1</code> to <code>sys.path</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CELERI CA N T FIND IMPORTLIB
    </pattern>
    <template>
<![CDATA[<p>importlib which was added in Python 2.7/3.1, I believe.  You can download a port for pyton 2.5 here:</p><br/><br/><ul><br/><li><a href="http://pypi.python.org/pypi/importlib/1.0.1">importlib 1.0.1 - Backport of importlib.import_module() from Python 2.7</a></li><br/></ul><br/><br/><p>Also check the <a href="http://github.com/ask/celery/blob/master/setup.cfg"><code>setup.cfg</code></a> for celery near the bottom and make sure all the other requirements are met (toward the bottom of the script).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANYFIELD IN A MODEL SET IT TO NULL
    </pattern>
    <template>
<![CDATA[<p>I don't think it is possible to set it to None - think about how M2M is implemented on the SQL layer (it is an intermidiate table, where can you write your "None" to?).</p><br/><br/><p>If you need a separate flag, why not introduce another column?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROPERLI FORMAT A STRINGIO OBJECT ( PYTHON AND DJANGO ) TO BE INSERT INTO AN DATABAS
    </pattern>
    <template>
<![CDATA[<p>There is no constraint requiring <code>get_db_prep_value</code> to return "printable" characters, or ASCII ones, or otherwise-constrained sets of characters: return any byte string that catches your fancy. You'll get a string in <code>to_python</code> and can make a file-like <code>StringIO</code> instance reading its data with <code>the_instance = StringIO.StringIO(value)</code> (of course you'll need to <code>import StringIO</code> at the top of your module).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GZIP JAVASCRIPT AND CSS FILE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Thanks everyone. </p><br/><br/><p>It seems that the GzipMiddleware in Django <strong>DOES</strong> compress CSS and JS. </p><br/><br/><p>I was using Google's Page Speed plugin for Firebug to profile my page and it seems that it was generating reports based on old copies (non-gzipped versions) of the CSSs and JSs in my local cache. These copies were there from the time before I enabled the Gzip middleware. I flushed the cache and it seems that the reports showed different results altogether.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON DISPLAY STATIC CONTENT
    </pattern>
    <template>
<![CDATA[<p>Maybe you have another application that uses 8000 port number. Did you tried using another port number?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Sounds like a polymorphic association.  Maybe you can solve your problem with Django's generic relations using the <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#generic-relations" rel="nofollow">ContentTypes</a> framework.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AJAX BOOK
    </pattern>
    <template>
<![CDATA[<p>I don't think there is a need to purchase any books. For learning django you may always refer to: <a href="http://docs.djangoproject.com/en/dev/" rel="nofollow">http://docs.djangoproject.com/en/dev/</a>.</p><br/><br/><p>You may look here for django implementation on google app engine using django-nonrel <a href="http://code.google.com/appengine/articles/django-nonrel.html" rel="nofollow">http://code.google.com/appengine/articles/django-nonrel.html</a>. This is a detailed tutorial how to host django on app engine: <a href="http://www.allbuttonspressed.com/projects/djangoappengine" rel="nofollow">http://www.allbuttonspressed.com/projects/djangoappengine</a>.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS FOREIGNKEY VALU WITHOUT HIT DATABAS
    </pattern>
    <template>
<![CDATA[<p>You can do something like this:</p><br/><br/><pre><code>pt_ids = Profile_Tag.objects.values_list('profile', flat=True)<br/></code></pre><br/><br/><p>This will return you list of IDs. For model instance, there's another way:</p><br/><br/><pre><code>pts = Profile_Tag.objects.all()<br/>for pt in pts:<br/>    print pt.profile_id<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL IN PYTHON NEG WITH REGARD TO SCALABL
    </pattern>
    <template>
<![CDATA[<p>Threadlocals aren't the most robust or secure way to do things - check out <a href="http://code.djangoproject.com/wiki/CookBookThreadlocalsAndUser" rel="nofollow">this note</a>, for instance. [ Though also see Glenn's comment, below ]</p><br/><br/><p>I suppose if you have coded cleanly, with the idea that you're putting stuff into a big global pot of info, accepting unguaranteed data consistency in those threaded locals and taking care to avoid race conditions, etc, etc, you might well be ok. </p><br/><br/><p>But, even with that in mind, there's still the 'magic'ness of threaded local vars, so documenting clearly what the heck is going on and any time a threadedlocal var is used might help you/future developers of the codebase down the line.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMILAR TO PYTHON DJANGO IN PHP
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.phpwact.org/php/mvc_frameworks" rel="nofollow">There are lots of MVC frameworks for PHP</a> - it's hard to say which of these are "similar to Django" because of the variance in featuresets (and most folks don't even really use all of what is available in Django).  But if you're just looking for a framework that uses the MVC paradigm, you now have  a handy list to look through as well as some Google-able phrases</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST GET PARAMET
    </pattern>
    <template>
<![CDATA[<p>You can use <code>[]</code> to extract values from a <code>QueryDict</code> object like you would any ordinary dictionary.</p><br/><br/><pre><code># HTTP POST variables<br/>request.POST['section'] # =&gt; [39]<br/>request.POST['MAINS'] # =&gt; [137]<br/><br/># HTTP GET variables<br/>request.GET['section'] # =&gt; [39]<br/>request.GET['MAINS'] # =&gt; [137]<br/><br/># HTTP POST and HTTP GET variables<br/>request.REQUEST['section'] # =&gt; [39]<br/>request.REQUEST['MAINS'] # =&gt; [137]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERS LOOKUP BY FOREIGNKEY
    </pattern>
    <template>
<![CDATA[<p>If the <code>ForeignKey</code> is, as you describe in <code>ModelB</code> and you do <code>mb = ModelB.objects.get(pk=prim_id)</code> then the look up for the <code>modela</code> attribute <strong>is not a reverse lookup</strong>. you simply access the related object via <code>mb.modela</code>!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WGSI PATH
    </pattern>
    <template>
<![CDATA[<p>I put the wsgi at same level than settings.py, and looks like this:</p><br/><br/><pre><code>import os<br/>import sys<br/><br/>sys.path.insert(0,os.sep.join(os.path.abspath(__file__).split(os.sep)[:-2]))<br/><br/><br/>os.environ['DJANGO_SETTINGS_MODULE'] = 'yourprojectname.settings'<br/><br/>import django.core.handlers.wsgi<br/>application = django.core.handlers.wsgi.WSGIHandler()<br/></code></pre><br/><br/><p>this is the apache conf file:</p><br/><br/><pre><code>NameVirtualHost *:80<br/>&lt;VirtualHost *:80&gt;<br/>    ServerAdmin webmaster@localhost<br/>    ServerName www.yourprojectname.com<br/>    Alias /media/ /home/diegueus9/workspace/yourprojectname/media/<br/><br/>    &lt;Directory /home/diegueus9/workspace/yourprojectname/media/&gt;<br/>        Order deny,allow<br/>        Allow from all<br/>    &lt;/Directory&gt;<br/><br/>    WSGIScriptReloading On<br/>    WSGIDaemonProcess yourprojectname <br/>    WSGIProcessGroup yourprojectname<br/>    WSGIApplicationGroup yourprojectname<br/>    WSGIPassAuthorization On<br/><br/>    WSGIScriptAlias / /home/diegueus9/workspace/yourprojectname/yourfile.wsgi<br/>    ErrorLog /var/log/apache2/yourprojectname-error.log<br/><br/>    # Possible values include: debug, info, notice, warn, error, crit,<br/>    # alert, emerg.<br/>    LogLevel debug<br/><br/>    CustomLog /var/log/apache2/yourprojectname-access.log combined<br/><br/>&lt;/VirtualHost&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN USE A CUSTOM WIDGET FOR ONE FIELD
    </pattern>
    <template>
<![CDATA[<p>After digging into the <a href="http://code.djangoproject.com/browser/django/trunk/django/contrib/admin" rel="nofollow">admin</a>, <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/fields/__init__.py" rel="nofollow">model field</a> and <a href="http://code.djangoproject.com/browser/django/trunk/django/forms/fields.py" rel="nofollow">form field</a> code, I believe the only way to carry out what I want is by creating a custom model field:</p><br/><br/><h2><code>models.py</code></h2><br/><br/><pre><code>from django.db import models<br/>from widgets import ApproveStopWidget<br/><br/>class ApproveStopModelField(models.DateTimeField):<br/>    pass<br/><br/>class Stop(models.model):<br/>    # Other fields<br/>    approve_ts = ApproveStopModelField('Approve place', null=True, blank=True)<br/></code></pre><br/><br/><h2><code>admin.py</code></h2><br/><br/><pre><code>from widgets import ApproveStopWidget<br/>from models import ApproveStopModelField<br/><br/>class StopAdmin(admin.ModelAdmin):<br/>    formfield_overrides = {<br/>        ApproveStopModelField: {'widget': ApproveStopWidget }<br/>    }<br/></code></pre><br/><br/><p>It gets the job done.</p><br/><br/><p>For the time being, I'll leave the question unanswered because I have the habit of missing the obvious. Perhaps some Django smartypants has a better solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DANGER CODE WHEN ALLOW USER MYSQL FILTER CREATION
    </pattern>
    <template>
<![CDATA[<p>Even if you allow fully freeform data into <code>filter()</code> and <code>exclude()</code>, there's no way to craft a dangerous query from them; the type of query is determined by the methods called, not the data passed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANUAL CREAT IMAGEFIELD IN MODEL FROM EXIST FILE ON SERVER
    </pattern>
    <template>
<![CDATA[<p>I'm marking this as answered, as this is the correct way to do this:</p><br/><br/><pre><code>image_model.image_field('path', File().read())<br/></code></pre><br/><br/><p><a href="http://stackoverflow.com/questions/1308386/programmatically-saving-image-to-django-imagefield">Programmatically saving image to Django ImageField</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH IRONPYTHON AND VS2010
    </pattern>
    <template>
<![CDATA[<p>Since MS is no longer officially working on IronPython, you may consider PyCharm.  I come from Asp.net and recently moved to Django and happen to use PyCharm and overall am happy with it.  Especially because I can work on the same code from my PC or Mac with it.  There were some gotches that got me for a bit with it, like it didn't come with Django it's a separate install (it's documented) just surprised me coming from VS.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIEW WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://webcloud.se/log/AJAX-in-Django-with-jQuery/" rel="nofollow">This article</a> seems to be quite a good tutorial on how to work with both ajax and regular requests. The <code>request</code> object has a method <code>is_ajax()</code> which will look for <code>HTTP_X_REQUESTED_WITH: XMLHttpRequest</code>. This will of course depend on these values being set correctly by the javascript sending the request.</p><br/><br/><p>From the article:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>from django.core import serializers<br/>from django.shortcuts import render_to_response<br/>from your_app.models import ExampleModel<br/><br/>def xhr_test(request, format):<br/>    obj = ExampleModel.objects.all()<br/>    if request.is_ajax():<br/>        data = serializers.serialize('json', obj)<br/>        return HttpResponse(data,'json')<br/>    else:<br/>        return render_to_response('template.html', {'obj':obj}, context=...)<br/></code></pre><br/><br/><p>Or, you could use <a href="https://bitbucket.org/jespern/django-piston/wiki/Documentation" rel="nofollow">django-piston</a> which is a RESTful framework for Django. I use this module in my project. You can define resources (sort of like views), and depending on either the mime-type or format passed to your url, it will emit either html, xml, or json. This will probably be the best way to go if every single view (or a large majority) need to be returned in different formats.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOD WSGI NGINX MYSQL OR POSTGR
    </pattern>
    <template>
<![CDATA[<p><strike>I use nginx because it's faster and I like how the configuration is set up. I have never run into any trouble using it so I can't see why one should rather use Apache + mod_wsgi.</p><br/><br/><p>Also, using fastcgi, you can restart your django site without restarting the whole nginx server, which I like.</strike></p><br/><br/><p>And Postgres because:</p><br/><br/><blockquote><br/>  <p>If you're not tied to any legacy system and have the freedom to choose a database back-end, we recommend PostgreSQL, which achives a fine balance between cost, features, speed and stability. (The Definitive Guide to Django, p. 15)</p><br/></blockquote><br/><br/><p>Copied from: <a href="http://stackoverflow.com/questions/585549/mysql-vs-postgresql-which-should-i-choose-for-my-django-project">MySQL vs PostgreSQL? Which should I choose for my Django project?</a></p><br/><br/><p><strong>EDIT:</strong></p><br/><br/><p>I now think that <strong>uwsgi</strong> running behind a load balancer (<strong>varnish</strong>) is the best solution. <strong>nginx</strong> can then be used to serve static content.</p><br/><br/><p>See "<strong>Varnish and nginx, the best way (0.9.8.4)</strong>" @ <a href="http://projects.unbit.it/uwsgi/wiki/Example" rel="nofollow">http://projects.unbit.it/uwsgi/wiki/Example</a></p><br/><br/><p>You can use <em>Emperor</em> ( <a href="http://projects.unbit.it/uwsgi/wiki/Emperor" rel="nofollow">http://projects.unbit.it/uwsgi/wiki/Emperor</a>) for managing apps in <strong>uwsgi</strong>. This will allow you to restart individual apps by simply <em>touching</em> their config files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + GOOGL FEDER LOGIN
    </pattern>
    <template>
<![CDATA[<p>I have managed to demistify the problem so here is the solution and I hope someone else can benefit from it:<br/>1) Google Account verification is not done against the google accounts server on every request to your application. For example:<br/>1.1 a user logs into your app using their gmail account<br/>1.2 the user also navigates to gmail.com where they check their email<br/>1.3 they log out of gmail<br/>1.4 they remain logged into your application and can use it fully<br/>This means you have to take care of session expiry on your end, Google account does not take care of it.</p><br/><br/><p>2) The core Python code I used is the following:</p><br/><br/><pre><code>from openid.consumer.consumer import Consumer, \<br/>    SUCCESS, CANCEL, FAILURE, SETUP_NEEDED<br/>from openid.consumer.discover import DiscoveryFailure<br/>from django.utils.encoding import smart_unicode<br/>from myapp.common.util.openid import DjangoOpenIDStore<br/><br/>def google_signin(request):<br/>    """ This is the view where the Google account login icon on your site points to, e.g. http://www.yourdomain.com/google-signin """<br/>    consumer = Consumer(request.session, DjangoOpenIDStore())<br/><br/>    # catch Google Apps domain that is referring, if any <br/>    _domain = None<br/>    if 'domain' in request.POST:<br/>        _domain = request.POST['domain']<br/>    elif 'domain' in request.GET:<br/>        _domain = request.GET['domain']<br/><br/>    try:<br/>        # two different endpoints depending on whether the using is using Google Account or Google Apps Account<br/>        if _domain:<br/>            auth_request = consumer.begin('https://www.google.com/accounts/o8/site-xrds?hd=%s' % _domain)<br/>        else:<br/>            auth_request = consumer.begin('https://www.google.com/accounts/o8/id')<br/>    except DiscoveryFailure as e:<br/>        return CustomError(request, "Google Accounts Error", "Google's OpenID endpoint is not available.")<br/><br/>    # add requests for additional account information required, in my case: email, first name &amp; last name<br/>    auth_request.addExtensionArg('http://openid.net/srv/ax/1.0', 'mode', 'fetch_request')<br/>    auth_request.addExtensionArg('http://openid.net/srv/ax/1.0', 'required', 'email,firstname,lastname')<br/>    auth_request.addExtensionArg('http://openid.net/srv/ax/1.0', 'type.email', 'http://schema.openid.net/contact/email')<br/>    auth_request.addExtensionArg('http://openid.net/srv/ax/1.0', 'type.firstname', 'http://axschema.org/namePerson/first')<br/>    auth_request.addExtensionArg('http://openid.net/srv/ax/1.0', 'type.lastname', 'http://axschema.org/namePerson/last')<br/><br/>    return redirect(auth_request.redirectURL('http://www.yourdomain.com', 'http://www.yourdomain.com/google-signin-response')))<br/><br/><br/>@transaction.commit_manually <br/>def google_signin_response(request):<br/>    """ Callback from Google Account service with login the status. Your url could be http://www.yourdomain.com/google-signin-response """<br/>    transaction.rollback() # required due to Django's transaction inconsistency between calls<br/>    oidconsumer = Consumer(request.session, DjangoOpenIDStore())<br/><br/>    # parse GET parameters submit them with the full url to consumer.complete<br/>    _params = dict((k,smart_unicode(v)) for k, v in request.GET.items())<br/>    info = oidconsumer.complete(_params, request.build_absolute_uri().split('?')[0])<br/>    display_identifier = info.getDisplayIdentifier()<br/><br/>    if info.status == FAILURE and display_identifier:<br/>        return CustomError(request, _("Google Login Error"), _("Verification of %(user)s failed: %(error_message)s") % {'user' : display_identifier, 'error_message' : info.message})<br/><br/>    elif info.status == SUCCESS:<br/>        try:<br/>            _email = info.message.args[('http://openid.net/srv/ax/1.0', 'value.email')]<br/>            _first_name = info.message.args[('http://openid.net/srv/ax/1.0', 'value.firstname')]<br/>            _last_name = info.message.args[('http://openid.net/srv/ax/1.0', 'value.lastname')]<br/>            try:<br/>                _user = User.objects.get(email__iexact=_email)<br/>            except ObjectDoesNotExist:<br/>                # create a new account if one does not exist with the authorized email yet and log that user in<br/>                _new_user = _new_account(_email, _first_name + ' ' + _last_name, _first_name, _last_name, p_account_status=1)<br/>                _login(request, _new_user, info.message.args[('http://specs.openid.net/auth/2.0', 'response_nonce')])<br/>                transaction.commit()<br/>                return redirect('home')<br/>            else:<br/>                # login existing user<br/>                _login(request, _user, info.message.args[('http://specs.openid.net/auth/2.0', 'response_nonce')])<br/>                transaction.commit()<br/>                return redirect('home')<br/>        except Exception as e:<br/>            transaction.rollback()<br/>            system_log_entry(e, request=request)<br/>            return CustomError(request, _("Login Unsuccessful"), "%s" % e)<br/><br/>    elif info.status == CANCEL:<br/>        return CustomError(request, _("Google Login Error"), _('Google account verification cancelled.'))<br/><br/>    elif info.status == SETUP_NEEDED:<br/>        if info.setup_url:<br/>            return CustomError(request, _("Google Login Setup Needed"), _('&lt;a href="%(url)s"&gt;Setup needed&lt;/a&gt;') % { 'url' : info.setup_url })<br/>        else:<br/>            # This means auth didn't succeed, but you're welcome to try<br/>            # non-immediate mode.<br/>            return CustomError(request, _("Google Login Setup Needed"), _('Setup needed'))<br/>    else:<br/>        # Either we don't understand the code or there is no<br/>        # openid_url included with the error. Give a generic<br/>        # failure message. The library should supply debug<br/>        # information in a log.<br/>        return CustomError(request, _("Google Login Error"), _('Google account verification failed for an unknown reason. Please try to create a manual account on Acquee.'))<br/><br/><br/>def get_url_host(request):<br/>    if request.is_secure():<br/>        protocol = 'https'<br/>    else:<br/>        protocol = 'http'<br/>    host = escape(get_host(request))<br/>    return '%s://%s' % (protocol, host)<br/></code></pre><br/><br/><p>3) an additional lib I created and imported above (myapp.common.util.openid) is a merge of a few existing Django openID libs so kudos to those guys:</p><br/><br/><pre><code>from django.db import models<br/>from django.conf import settings<br/>from django.utils.hashcompat import md5_constructor<br/><br/>from openid.store.interface import OpenIDStore<br/>import openid.store <br/>from openid.association import Association as OIDAssociation<br/>import time, base64<br/><br/>from myapp.common.db.accounts.models import Association, Nonce<br/><br/>class DjangoOpenIDStore(OpenIDStore):<br/>    """<br/>The Python openid library needs an OpenIDStore subclass to persist data<br/>related to OpenID authentications. This one uses our Django models.<br/>"""<br/><br/>    def storeAssociation(self, server_url, association):<br/>        assoc = Association(<br/>            server_url = server_url,<br/>            handle = association.handle,<br/>            secret = base64.encodestring(association.secret),<br/>            issued = association.issued,<br/>            lifetime = association.issued,<br/>            assoc_type = association.assoc_type<br/>        )<br/>        assoc.save()<br/><br/>    def getAssociation(self, server_url, handle=None):<br/>        assocs = []<br/>        if handle is not None:<br/>            assocs = Association.objects.filter(<br/>                server_url = server_url, handle = handle<br/>            )<br/>        else:<br/>            assocs = Association.objects.filter(<br/>                server_url = server_url<br/>            )<br/>        if not assocs:<br/>            return None<br/>        associations = []<br/>        for assoc in assocs:<br/>            association = OIDAssociation(<br/>                assoc.handle, base64.decodestring(assoc.secret), assoc.issued,<br/>                assoc.lifetime, assoc.assoc_type<br/>            )<br/>            if association.getExpiresIn() == 0:<br/>                self.removeAssociation(server_url, assoc.handle)<br/>            else:<br/>                associations.append((association.issued, association))<br/>        if not associations:<br/>            return None<br/>        return associations[-1][1]<br/><br/>    def removeAssociation(self, server_url, handle):<br/>        assocs = list(Association.objects.filter(<br/>            server_url = server_url, handle = handle<br/>        ))<br/>        assocs_exist = len(assocs) &gt; 0<br/>        for assoc in assocs:<br/>            assoc.delete()<br/>        return assocs_exist<br/><br/>    def useNonce(self, server_url, timestamp, salt):<br/>        # Has nonce expired?<br/>        if abs(timestamp - time.time()) &gt; openid.store.nonce.SKEW:<br/>            return False<br/>        try:<br/>            nonce = Nonce.objects.get(<br/>                server_url__exact = server_url,<br/>                timestamp__exact = timestamp,<br/>                salt__exact = salt<br/>            )<br/>        except Nonce.DoesNotExist:<br/>            nonce = Nonce.objects.create(<br/>                server_url = server_url,<br/>                timestamp = timestamp,<br/>                salt = salt<br/>            )<br/>            return True<br/>        nonce.delete()<br/>        return False<br/><br/>    def cleanupNonce(self):<br/>        Nonce.objects.filter(<br/>            timestamp__lt = (int(time.time()) - nonce.SKEW)<br/>        ).delete()<br/><br/>    def cleaupAssociations(self):<br/>        Association.objects.extra(<br/>            where=['issued + lifetimeint &lt; (%s)' % time.time()]<br/>        ).delete()<br/><br/>    def getAuthKey(self):<br/>        # Use first AUTH_KEY_LEN characters of md5 hash of SECRET_KEY<br/>        return md5_constructor.new(settings.SECRET_KEY).hexdigest()[:self.AUTH_KEY_LEN]<br/><br/>    def isDumb(self):<br/>        return False<br/></code></pre><br/><br/><p>4) and the model that is required in order to hold google account session identifiers and verified endpoints:</p><br/><br/><pre><code>class Nonce(models.Model):<br/>    """ Required for OpenID functionality """<br/>    server_url = models.CharField(max_length=255)<br/>    timestamp = models.IntegerField()<br/>    salt = models.CharField(max_length=40)<br/><br/>    def __unicode__(self):<br/>        return u"Nonce: %s for %s" % (self.salt, self.server_url)<br/><br/><br/>class Association(models.Model):<br/>    """ Required for OpenID functionality """<br/>    server_url = models.TextField(max_length=2047)<br/>    handle = models.CharField(max_length=255)<br/>    secret = models.TextField(max_length=255) # Stored base64 encoded<br/>    issued = models.IntegerField()<br/>    lifetime = models.IntegerField()<br/>    assoc_type = models.TextField(max_length=64)<br/><br/>    def __unicode__(self):<br/>        return u"Association: %s, %s" % (self.server_url, self.handle)<br/></code></pre><br/><br/><p>Good luck!<br/>Rok</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL FORM OBJECT HA NO ATTRIBUT CLEANED DATA
    </pattern>
    <template>
<![CDATA[<p>For some reason, you're re-instantiating the form after you check <code>is_valid()</code>. Forms only get a <code>cleaned_data</code> attribute when <code>is_valid()</code> has been called, and you haven't called it on this new, second instance.</p><br/><br/><p>Just get rid of the second <code>form = SearchForm(request.POST)</code> and all should be well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PINAX APP SHOULD I USE THERE ARE SO MANI AND I JUST WANT THE SIMPLEST ONE
    </pattern>
    <template>
<![CDATA[<p><a href="http://bitbucket.org/ubernostrum/django-profiles/wiki/Home" rel="nofollow">django-profile</a> may be of use in this case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE AN ARRAY OF STRING IN A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Make another model that holds a string with an optional order, give it a <code>ForeignKey</code> back to <code>myClass</code>, and store your array in there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGIREQUEST OBJECT IS NOT SUBSCRIPT
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/216972/in-python-what-does-it-mean-if-an-object-is-subscriptable-or-not">It means that WSGIRequest does not implement <code>__getitem__</code></a>. You are trying to treat the <code>HttpRequest</code> object like a dictionary but it's not. If you want to access this newUser variable use the POST object, which implements a dictionary-like interface:</p><br/><br/><pre><code>request.POST['newUser']<br/></code></pre><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.POST" rel="nofollow">You'd do well to peruse the Django docs in situations like this.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROCESS ANIM SPINNER DURE AJAX REQUEST
    </pattern>
    <template>
<![CDATA[<pre><code><br/>$.ajax({  <br/>            type: &quot;POST&quot;,  <br/>            url: &quot;/game-checkin&quot;,  <br/>            data: dataString,  <br/>            beforeSend: function() {<br/>                ... your initialization code here (so show loader) ...<br/>            },<br/>            complete: function() {<br/>                ... your finalization code here (hide loader) ...<br/>            },<br/>            success: function(badges) {  <br/>            $(&#39;#checkin-form&#39;).html(&quot;&lt;div id=&#39;message&#39;&gt;&lt;/div&gt;&lt;div id=&#39;badges&#39;&gt;&lt;/div&gt;&quot;);  <br/>            $(&#39;#message&#39;).html(&quot;&lt;h2&gt;&lt;img class=\&quot;check-mark\&quot; src=\&quot;/static/images/check-mark.png\&quot;/&gt;You are checked in!&lt;/h2&gt;&quot;);  <br/>            $.each(badges, function(i,badge) {<br/>              $(&#39;#badges&#39;).append(&quot;&lt;h2&gt;New Badge!&lt;/h2&gt;&lt;p&gt;&lt;img class=&#39;badge&#39; src=&#39;&quot;+badge.image_url+&quot;&#39;&gt;&lt;span class=&#39;badge-title&#39;&gt;&quot;+badge.name+&quot;&lt;/span&gt;&lt;/p&gt;&quot;);  <br/>});<br/></code></pre><br/><br/><p><a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow">http://api.jquery.com/jQuery.ajax/</a>:</p><br/><br/><blockquote><br/>  <p>Here are the callback hooks provided by $.ajax():</p><br/>  <br/>  <p>beforeSend callback is invoked; it receives the jqXHR object and the settings map as  parameters.<br/>  error callbacks are invoked, in the order they are registered, if the request fails. They receive the jqXHR, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: "abort", "timeout", "No Transport".<br/>  dataFilter callback is invoked immediately upon successful receipt of response data. It receives the returned data and the value of dataType, and must return the (possibly altered) data to pass on to success.<br/>  success callbacks are then invoked, in the order they are registered, if the request succeeds. They receive the returned data, a string containing the success code, and the jqXHR object.<br/>  complete callbacks fire, in the order they are registered, when the request finishes, whether in failure or success. They receive the jqXHR object, as well as a string containing the success or error code.</p><br/></blockquote><br/><br/><p>Note the beforeSend and complete method additions tot he code.</p><br/><br/><p>Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI ADMIN PROBLEM
    </pattern>
    <template>
<![CDATA[<p>The jQuery version included in Django's admin lives in a separate namespace.</p><br/><br/><p>So either replace each call of <code>$</code> in your script by <code>django.jQuery</code>, or make the <code>$</code> variable available in the scope by wrapping your code like this:</p><br/><br/><pre><code>(function($) {<br/>    $(document).ready(function() {<br/>        tinyMCE.init({mode: "textareas", theme: "advanced"});<br/>    });<br/>}(django.jQuery));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV USE GLOBAL PACKAG
    </pattern>
    <template>
<![CDATA[<p>The problem was with the file associations under windows. I was trying to syncdb via "manage.py syncdb" which used the default windows python installation. Using "python manage.py syncdb" used the correct python and environment. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      18N USE DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>Transifex was designed for pretty much this. It doesn't pull the strings from the project/app automatically yet, but it can be extended to do so if desired.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY DJANGO SITE IN HOST ( ALWAYSDATA ) CANT SHOW MY PAGE
    </pattern>
    <template>
<![CDATA[<p>I think that you need to point your subdomain to the right directory : <code>/example_project/public/</code> where your .htaccess and django.fcgi lives.</p><br/><br/><p>alwaysdata has a forum <a href="http://forum.alwaysdata.com/" rel="nofollow">http://forum.alwaysdata.com/</a> where you can ask question in english. The guys know their job very well and answer very quickly. </p><br/><br/><p>I hope it helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A RUBI ON RAIL DEVELOP SHOULD START LEARN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>The official tutorials for <a href="http://docs.python.org/tutorial/" rel="nofollow">Python</a> and <a href="http://docs.djangoproject.com/en/dev/intro/tutorial01/" rel="nofollow">Django</a> are both good. There are so many freely available books on Python. <a href="http://www.djangobook.com/" rel="nofollow">Django Book</a> (free) by it's creators is great if you are not satisfied with the tutorial.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LM IN PYTHON DJANGO RUBY RAILS PHP
    </pattern>
    <template>
<![CDATA[<p><a href="http://demo.ilias.de/" rel="nofollow">http://demo.ilias.de/</a> Check out this lms.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL INHERIT QUERI A CENTRAL TABL
    </pattern>
    <template>
<![CDATA[<p>I haven't used it, but this project looks like what you're looking for:<br><br/><a href="https://code.google.com/p/django-polymorphic-models/" rel="nofollow">https://code.google.com/p/django-polymorphic-models/</a></p><br/><br/><p>You can request LessonModule.objects.all() and then .downcast() each object automatically into a ProfileImage or a Note.</p><br/><br/><p>Or add the PolymorphicMetaclass to your LessonModule to always retrieve ProfileImage and Note objects from a queryset.</p><br/><br/><p>Note the cost of extra queries... polymorphism in Django models is done via table joins, not pure python code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD ISSU IN DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>I think I have gotten to the bottom of your problem.</p><br/><br/><p>1) You are trying to run .read() on a request object, which is not allowed.  Instead, you need to run it on request.raw_post_data.</p><br/><br/><p>2) Before you can run .read(), which takes a file-like object, you need to convert it from a str to a file-like object.</p><br/><br/><p>Try this:</p><br/><br/><pre><code>import StringIO<br/>output = StringIO.StringIO()<br/>output.write(request.raw_post_data)<br/></code></pre><br/><br/><p>...now you'll be able to run output.read() and get the data you want.</p><br/><br/><pre><code>        #loop through, writing more of the file each time<br/>        file_so_far = output.read( 1024 ) #Get ready....<br/>        while file_so_far: #..get set...<br/>          dest.write( file_so_far ) #Go.<br/>          file_so_far = output.read( 1024 <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRIENDLI PHP OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>With no programming background, I think django will be extremely easy to pick up because there is one specific way to do things, and because the documentation is simply <strong>amazing</strong>. Unreal. Time bendingly good.</p><br/><br/><p>You don't need to know <em>any</em> python in my experience to comprehend the docs. It wraps up how to get from start to completion (a production site) in a nice package because you're working within the bounds of the framework.</p><br/><br/><p>PHP is a language. Where do you start? I think the scope is too broad here and can lead to confusion. A better comparison would be a PHP framework, like CakePHP.</p><br/><br/><p><strong>Go pick a few PHP, Ruby, Python frameworks and do their introductory tutorial from start to finish. You will naturally prefer one and go from there.</strong></p><br/><br/><p>I can't stress enough the importance of documentation. That emphasis via django and python's culture of putting readability on a pedestal made learning extremely easy and fun. </p><br/><br/><hr><br/><br/><p>PS: There are pros and cons of course.. which is why these posts get shut down all the time.</p><br/><br/><p>To a beginner, Django requires more server setup (which means more unknowns you must conquer like light weight sys admin stuff) than PHP, which pretty much runs when you upload a PHP file to a host that supports PHP. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET USER NEAREST CITI PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>You should store the approximate latitude and longitude for each city, calculate the latitude and longitude in degrees for the user, and then find the distance using the <a href="http://en.wikipedia.org/wiki/Haversine_formula" rel="nofollow">Haversine formula</a>. It's implemented in Javascript <a href="http://www.movable-type.co.uk/scripts/latlong.html" rel="nofollow">here</a>. The MaxMind API should give you the latitude and longitude.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO DEAL WITH THE PATH IN SETTINGS.PI ON COLLABOR PROJECT
    </pattern>
    <template>
<![CDATA[<pre><code>import os.path<br/><br/>#Get the absolute path of the settings.py file's directory<br/>PWD = os.path.dirname(os.path.realpath(__file__ )) <br/><br/>TEMPLATE_DIRS = (<br/>    # Put strings here, like "/home/html/django_templates" or <br/>    # "C:/www/django/templates".<br/>    # Always use forward slashes, even on Windows.<br/>    # Don't forget to use absolute paths, not relative paths.<br/><br/>    #Add Templates to the absolute directory<br/>    os.path.join(PWD, "Templates") <br/>)<br/></code></pre><br/><br/><p>That's how I do relative imports. Note that is usually wise to have a separate localsettings.py file, or something similar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM CELERY DJANGO
    </pattern>
    <template>
<![CDATA[<p>Check the different versions of RabbitMQ that you're using, newer versions have new features and may be incompatible with Celery.  I've got the latest 2.3.1 version on my machine, installed from the RabbitMQ deb, this works OK unless you need to use SSL in which case you have to install a more recent version of Erlang/OTP, which is painful.</p><br/><br/><p>Also, it's probably better to use the init script to start the broker:</p><br/><br/><pre><code>sudo /etc/init.d/rabbitmq-server start<br/></code></pre><br/><br/><p>If you start the broker from the init script you should be able to look at the broker error logs if the problem persists:</p><br/><br/><pre><code>sudo tail -f /var/log/rabbit@&lt;your-local-host&gt;.log<br/></code></pre><br/><br/><p>HTH.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO TEMPLAT BASE ON DB
    </pattern>
    <template>
<![CDATA[<p>Write a <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#writing-your-own-context-processors" rel="nofollow">custom context processor</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO FRAMEWORK
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I can see the contents of the post in<br/>  firebug's 'response' tab, but whether<br/>  I try to return a template or a simple<br/>  message, nothing happens in the<br/>  browser itself. Conversely, a non-ajax<br/>  post works as expected (loads new<br/>  page, posts message)</p><br/></blockquote><br/><br/><p>If you're getting a response, you're getting a response. You're just not doing anything with it. </p><br/><br/><p>Why not alert the data and append it to the <code>&lt;body&gt;</code> for example:</p><br/><br/><pre><code>$.ajax({<br/>     type:"POST",<br/>     url:"/test_results/",<br/>     data: {<br/>            'arbitrary-data': 'this is arbitrary data',<br/>            'some-form-field': $("myform input:first").val(), // from form<br/>            'background-color': $("body").css("background-color")<br/>            // all of this data is submitted via POST to your view.<br/>            // in django, request.POST['background-color'] <br/>     },<br/>     success: function(data){<br/>         alert(data);<br/>         $("body").append(data);<br/>     }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETERMIN IF GEOGRAPH COORDIN ARE INSID OF AN CIRCL
    </pattern>
    <template>
<![CDATA[<p>This problem can be solved in pure SQL if you dont mind about very good precision.</p><br/><br/><p>You can find points around a GPS position with this specific SQL query :</p><br/><br/><pre><code># find point around :<br/>latitude = 46.2037010192871<br/>longitude = 5.20353984832764<br/>query= "SELECT ID, NOM, LAT, LON, 3956 * 2 * ASIN(SQRT(POWER(SIN((%s - LAT) * 0.0174532925 / 2), 2) + COS(%s * 0.0174532925) * COS(LAT * 0.0174532925) * POWER(SIN((%s - LON) * 0.0174532925 / 2), 2) )) as distance from POI  having distance &lt; 50 ORDER BY distance ASC " % ( latitude, latitude, longitude)<br/></code></pre><br/><br/><p>This will give you all records with gps records in a 50km area.</p><br/><br/><p>You can easily plug this in django with :</p><br/><br/><pre><code>from django.db import connection<br/>cursor = connection.cursor()<br/>cursor.execute( query )<br/>rows = cursor.fetchall()<br/></code></pre><br/><br/><p>or with <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/#performing-raw-queries" rel="nofollow">django raw queries</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABASEERROR COLUMN DOE NOT EXIST
    </pattern>
    <template>
<![CDATA[<p>Try completely dropping/wiping the database before running syncdb.</p><br/><br/><p>I remember needing to do that a while back when I had made changes to foreign key fields.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL OF DATETIM OBJECT WITHIN DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>Django's serialization framework is for QuerySets, not dicts. If you want to just dump a dictionary to JSON, just use <code>json.dumps</code>. It can easily be made to serialize objects by passing in a custom serialization class - there's one included with Django that deals with datetimes already:</p><br/><br/><pre><code>from django.core.serializers.json import DjangoJSONEncoder<br/>json.dumps(mydict, cls=DjangoJSONEncoder)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS USER REQUEST ON POST SAV
    </pattern>
    <template>
<![CDATA[<p>Can't be done. The current user is only available via the request, which is not available when using purely model functionality. Access the user in the view somehow.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CCESS A DJANGO UPLOADEDFIL AS UTF 8 WITH UNIVERS NEWLIN
    </pattern>
    <template>
<![CDATA[<p>As mentioned above, the code snippet I provided was in fact working as intended - the problem was with my terminal, and not with python encoding.</p><br/><br/><p>If your view needs to access a UTF-8 <code>UploadedFile</code>, you can just use <code>utf8_file = codecs.EncodedFile(request.FILES['file_field'],"utf-8")</code> to open a file object in the correct encoding.</p><br/><br/><p>I also noticed that, at least for <code>InMemoryUploadedFile</code>s, opening the file through the <code>codecs.EncodedFile</code> wrapper does NOT reset the <code>seek()</code> position of the file descriptor. To return to the beginning of the file (again, this may be <code>InMemoryUploadedFile</code> specific) I just used <code>request.FILES['file_field'].open()</code> to send the <code>seek()</code> position back to 0.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COUNTER IN LOOP TO INDEX LIST
    </pattern>
    <template>
<![CDATA[<p>You can't. The simple way is to preprocess you data in a <a href="http://docs.python.org/library/functions.html#zip" rel="nofollow">zipped list</a>, like this</p><br/><br/><p>In your view</p><br/><br/><pre><code>x = [1, 2, 3]<br/>y = [4, 5, 6]<br/>zipped = zip(x, y)<br/></code></pre><br/><br/><p>Then in you template :</p><br/><br/><pre><code>{% for x, y in zipped %}<br/>    {{ x }} - {{ y }}<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANYFIELD AS CHECKBOX IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>I think there is no simple way to do this. You can try to override ModelAdmin class but this is not a "simple" way.</p><br/><br/><p>But you can use filter_horizontal or filter_vertical to add almost similar functionality</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_horizontal" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_horizontal</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECTS.FILT ( ) VALUES LIST ( ) VS PYTHON LIST COMPREHENS FOR IN QUERI
    </pattern>
    <template>
<![CDATA[<p>Try <code>l_magazines.values_list('id', flat=True)</code>.  That returns a list of ids instead of a list of single id tuples.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROTOTYPE.J BASE XHR REQUEST AGAINST CSRF
    </pattern>
    <template>
<![CDATA[<p>This is a wild guess but you could try <a href="http://api.prototypejs.org/language/Function/prototype/wrap/" rel="nofollow">extending</a> the base AJAX class...</p><br/><br/><pre><code>Ajax.Base.prototype.initialize = Ajax.Base.prototype.initialize.wrap(<br/>    function (callOriginal, options) {<br/>        var headers = options.requestHeaders || {};<br/>        headers["X-CSRFToken"] = getCookie("csrftoken");<br/>        options.requestHeaders = headers;<br/>        return callOriginal(options);<br/>    }<br/>);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY DJANGO ADMIN SITE DOE NOT HAVE THE CSS STYLE
    </pattern>
    <template>
<![CDATA[<p>Django does not serve static files on it's own. You have to tell it where the files are.</p><br/><br/><p>The <a href="http://docs.djangoproject.com/en/dev/ref/settings/#admin-media-prefix" rel="nofollow">ADMIN_MEDIA_PREFIX in the settings.py</a> will point Django in the right location.</p><br/><br/><p>Since you're using the development version, you'll want the <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">dev-specific document for static files how-to</a>. Adam's link will lead you to the 1.2 version.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN CODE ON SHELL LAUNCH
    </pattern>
    <template>
<![CDATA[<p>install django-extemsions, one of the commands it features (shell_plus) is providing the context for your models.<br/><a href="https://github.com/django-extensions/django-extensions" rel="nofollow">https://github.com/django-extensions/django-extensions</a></p><br/><br/><p>So, instead of <code>./manage.py shell</code> you can use <code>./manage.py shell_plus</code> so that everything is imported.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A PYTHON INDENT ERROR HERE IN THE DJANGO SAMPL TUTORI
    </pattern>
    <template>
<![CDATA[<p>My only guess is you have tabs mixed with spaces.   </p><br/><br/><p>It's recommended to use spaces over tabs, with 4 spaces per indentation.<br/><a href="http://www.python.org/dev/peps/pep-0008/">http://www.python.org/dev/peps/pep-0008/</a></p><br/><br/><p>Do you have invisible characters visible on your editor to make sure that isn't the case?</p><br/><br/><p><em>PS: your reputation graph says -6000 and it's really bugging me out.</em></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL MULTIPL TABL
    </pattern>
    <template>
<![CDATA[<p>You could, I believe, make a factory function that would return your model with a dynamic <a href="http://docs.djangoproject.com/en/dev/ref/models/options/#db-table" rel="nofollow">db_table</a>.</p><br/><br/><pre><code>def getModel(db_table):<br/>  class MyClass(models.Model):<br/>     # define as usual ...<br/>     class Meta:<br/>       db_table = db_table<br/><br/>  return MyClass<br/><br/>newClass = getModel('29345794_table')<br/>newClass.objects.filter( ...<br/></code></pre><br/><br/><p>EDIT: Django does not create a new instance of the class's <code>_meta</code> attribute each time this function is called. Creating a new instance for <code>_meta</code> it is dependent upon the name of the class (Django must cache it somewhere). A metaclass can be used to change the name of the class at runtime:</p><br/><br/><pre><code>def getModel(db_table):<br/>  class MyClassMetaclass(models.base.ModelBase):<br/>    def __new__(cls, name, bases, attrs):<br/>      name += db_table<br/>      return models.base.ModelBase.__new__(cls, name, bases, attrs)<br/><br/>  class MyClass(models.Model):<br/>    __metaclass__ = MyClassMetaclass<br/><br/>    class Meta:<br/>      db_table = db_table<br/><br/>  return MyClass<br/></code></pre><br/><br/><p><strike>not sure if it can be set dynamically on an already-defined class.  I haven't done this myself but it might work.</strike></p><br/><br/><p>You can set this whenever.</p><br/><br/><pre><code>&gt;&gt;&gt; MyModel._meta.db_table = '10293847_table'<br/>&gt;&gt;&gt; MyModel.objects.all()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQLDB ON MAC OSX 10.6 NOT WORK
    </pattern>
    <template>
<![CDATA[<p>I eventually managed to solve the problem by Installing python 2.7 with Mac Ports and installing mysqldb using Mac Ports - was pretty simple after that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BREAK AND CONTINU IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>For-loops in Django templates are different from plain Python for-loops, so <code>continue</code> and <code>break</code> will not work in them. See for yourself in the Django <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/">docs</a>, there are no <code>break</code> or <code>continue</code> template tags. Given the overall position of Keep-It-Simple-Stupid in Django template syntax, you will probably have to find another way to accomplish what you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN PROBLEM WITH DJANGO HAYSTACK
    </pattern>
    <template>
<![CDATA[<p>I had this issue as well. From debugging the code it looks like it's an issue with the paginator and the searchqueryset. Unfortunately i didn't have more time to devote to it and ended up moving on to whoosh for development environment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENSUR THERE ARE NO PDB CALL OUT OF DEBUG CONFIGUR
    </pattern>
    <template>
<![CDATA[<p>The third one. You have to enforce some commit rules. For example, run a serie of tests before a commit, etc. This way, developpers have a simple way to check if a pdb break remain. If someone commit a set_trace, he has to bake a cake for the rest of the team.</p><br/><br/><p>This works fine in my company :-)</p><br/><br/><p><strong>edit</strong>: you may present this method to your boss as CDD (Cake Driven Developpement)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO SEE SESSION DATA IN THE ADMIN INTERFAC
    </pattern>
    <template>
<![CDATA[<p>You can do something like this:</p><br/><br/><pre><code>class SessionAdmin(ModelAdmin):<br/>    def _session_data(self, obj):<br/>        return obj.get_decoded()<br/>    list_display = ['session_key', '_session_data', 'expire_date']<br/></code></pre><br/><br/><p>It might be even that <a href="http://code.djangoproject.com/browser/django/tags/releases/1.2.3/django/contrib/sessions/models.py#L56">get_decoded</a> can be used directly in *list_display*. And in case there's some catch that prevents this from working ok, you can decode the session data yourself, based on the linked Django source.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEVELOP ON MAC OS X
    </pattern>
    <template>
<![CDATA[<p>You will need XCode, yes. You'll need it for any libraries that need compiling, apart from anything else.</p><br/><br/><p>Please don't install MacPorts, though, as recommended by titaniumdecoy. It tries to install its own versions of everything, which is unnecessarily confusing, and takes you out of the usual Mac development stack. A much better package installation tool is <a href="http://mxcl.github.com/homebrew/" rel="nofollow">homebrew</a>, which uses the built-in tools to install software via a series of recipes. It's excellent.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FINT RECURS WHILE EXTEND THE ADMIN S APP CHANGE FORM TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You are in <code>admin/change_form.html</code> and you extend <code>admin/change_form.html</code>. You cannot extend the same template which you are in.</p><br/><br/><p>You probably expected that if you override template from admin application, you can extend the one you override. But this is not how it works. When you override a template you cannot access it.</p><br/><br/><p>Solution to your problem is to copy original template and change things you don't like.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RADIC USE OF ADMIN S INTERFAC
    </pattern>
    <template>
<![CDATA[<p>It is entirely possible to do this. You can do this with regular views, and then create templates that extend the "admin/base_site.html" template like so:</p><br/><br/><pre><code>{% extends "admin/base_site.html" %}<br/></code></pre><br/><br/><p>You can also do breadcrumbs like this:</p><br/><br/><pre><code>{% block breadcrumbs %}{% if not is_popup %}<br/>    &lt;div class="breadcrumbs"&gt;<br/>         &lt;a href="/admin/"&gt;Home&lt;/a&gt; &amp;rsaquo;<br/>         &lt;a href="/admin/yourpath/"&gt;Up One Level&lt;/a&gt; &amp;rsaquo; <br/>         You Are Here<br/>    &lt;/div&gt;<br/>{% endif %}{% endblock %}<br/></code></pre><br/><br/><p>And then put whatever content you want inside of the "content" block.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO IF STATEMENT IN TEMPLAT AROUND EXTEND
    </pattern>
    <template>
<![CDATA[<p>You cannot do it like that. You can however set a variable and use that to choose the template to extend:</p><br/><br/><pre><code>{% extends my_template %}<br/></code></pre><br/><br/><p>Then in python code you write something like:</p><br/><br/><pre><code>if ajax:<br/>    template_values{'my_template'} = 'base_ajax.html'<br/>else:<br/>    template_values{'my_template'} = 'base.html'<br/></code></pre><br/><br/><p>You may wish to <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#extends">refer to the documentation</a> for more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DATABAS BETWEEN TWIST AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>First of all I'd identify why you need both Django and Twisted.  Assuming you are comfortable with Twisted using twisted.web and auth will easily be sufficient and you'll be able to reuse your database layer for both the frontend and backend apps.</p><br/><br/><p>Alternatively you could look at it the other way, what is Twisted doing better as a game server?  Are you hoping to support more players (more simultaneous connections) or something else?  Consider that if you must use threaded within twisted to do blocking database access that you are most likely not going to be able to efficently/reliably support hundreds of simultaneous threads.  Remember python has a Global Interpreter Lock so threads are not necessarily the best way to scale.  </p><br/><br/><p>You should also consider why you are looking to use a SQL Database and an ORM.  Does your game have data that is really best suited to being stored in an relational database?  Perhaps it's worth examining something like MongoDB or another key-value or object database for storing game state.  Many of these NoSQL stores have both blocking drivers for use in Django and non-blocking drivers for use in Twisted (txmongo for example).  </p><br/><br/><p>That said, if you're dead set on using both Django and Twisted there are a few techniques for embedding blocking DB access into a non-blocking Twisted server.</p><br/><br/><ol><br/><li>adbapi (uses twisted thread pool)</li><br/><li>Direct use of the twisted thread pool using reactor.deferToThread</li><br/><li>The Storm ORM has a branch providing Twisted support (it handles deferToThread calls internally)</li><br/><li>SAsync is a library that tries to make SQLAlchemy work in an Async way</li><br/><li>Have twisted interact via RPC with a process that manages the blocking DB</li><br/></ol><br/><br/><p>So you should be able to manage the Django ORM objects yourself by importing them in twisted and being very careful making calls to reactor.deferToThread.  There are many possible issues when working with these objects within twisted in that some ORM objects can issue SQL when accessing/setting a property, etc.  </p><br/><br/><p>I realize this isn't necessarily the answer you were expecting but perhaps more detail about what you're hoping to accomplish and why you are choosing these specific technologies will allow folks to get you better answers.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRESERV THE FILE PERMISS IN GIT
    </pattern>
    <template>
<![CDATA[<p>In short, you can't.</p><br/><br/><p>In longer, there are projects like etckeeper which can do it automatically, or you can write a small hook script which will fix up the permissions (which is probably how I'd do it).</p><br/><br/><p>For example, if you commit something this:</p><br/><br/><pre><code>#!/bin/sh<br/>chmod -R XXX file_or_directory/<br/></code></pre><br/><br/><p>To, eg, <code>scripts/fix_permissions/</code>, then run it as a <a href="http://www.kernel.org/pub/software/scm/git/docs/githooks.html#post-receive" rel="nofollow">post-receive</a> hook by simlinking it into <code>.git/hooks/post-receive</code> on the server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQLITE3 WITHIN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Google App Engine requires that you use its own datastore, rather than sqlite or another database.  There is a project that will allow you to use pretty much regular Django models on App Engine called django-nonrel.  You can find more information about setting it up here: <a href="http://code.google.com/appengine/articles/django-nonrel.html" rel="nofollow">http://code.google.com/appengine/articles/django-nonrel.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER PIRATESPEAK .PO GETTEXT TRANSL FOR I18N TEST
    </pattern>
    <template>
<![CDATA[<p>Turns out no-one has done this before. So I wrote a python script to do it myself to <a href="http://www.technomancy.org/python/pirate-po-l10n-i18n-translate-your-site/" rel="nofollow">piratify a .po file</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBPROCESS THROW OSERROR HERE
    </pattern>
    <template>
<![CDATA[<p>The hint of Apala solved the problem. Make sure to try different versions of sox, if the same thing happens again. Even if sox is working on the commandline, it can cause trouble with subprocess.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHINX VARIABL AND CLASS PROPERTI IN AUTOMODUL
    </pattern>
    <template>
<![CDATA[<p>docstrings normally don't apply to class properties, but the autodoc extension to Sphinx is able to if you put it after the field.  You can also use this special syntax, before the field:</p><br/><br/><pre><code>#: Documentation for my_field.  You can<br/>#: use one or more lines as well.<br/>my_field = "something"<br/></code></pre><br/><br/><p>Other things to check are that you have the autodoc extension listed in the <code>conf.py</code> file.  Look for <code>extensions = ["sphinx.ext.autodoc"]</code>.  (The list may contain more than one extension.)</p><br/><br/><p>[edit:] I previously had the documentation comment in the wrong place.  Unlike the docstring, the <code>#:</code> comments have to go <em>before</em> the field you are commenting.</p><br/><br/><p>[edit:] Since the above isn't the problem, here's another possibility.  The module or package you use after <code>.. automodule::</code> must be accessible to your documentation.  This means you need to make sure you add its location to your Python path.  My project is set up like this:</p><br/><br/><pre><code>my_project/<br/>    package/<br/>        __init__.py<br/>        ...<br/>    doc/<br/>        build/<br/>            ...<br/>        source/<br/>            conf.py<br/>            ...<br/></code></pre><br/><br/><p>In this case, I needed to add <code>/my_package</code> to the Python path so I could access <code>package</code>.  To do so, I made sure this was in the top of my <code>conf.py</code>:</p><br/><br/><pre><code>import sys, os   # I believe conf.py already imports sys,<br/>import os.path   # os, and os.path.  But just in case, I<br/>                 # list it here.<br/><br/>sys.path.insert(0, os.path.abspath(os.path.join('..','..')))<br/></code></pre><br/><br/><p>This effectively adds <code>./../..</code> to the Python path, which from conf.py in my example is the <code>my_project</code> directory.  (I also resolve it to an absolute path just so there are fewer possibilities for surprises.)  Obviously, you'd have to change this for your specific case.</p><br/><br/><p>I hope this helps you out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST REQUEST USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>A combination of methods from urllib2 and urllib will do the trick. Here is how I post data using the two:</p><br/><br/><pre><code>post_data = [('name','Gladys'),]     # a sequence of two element tuples<br/>result = urllib2.urlopen('http://example.com', urllib.urlencode(post_data))<br/>content = result.read()<br/></code></pre><br/><br/><p><a href="http://docs.python.org/library/urllib2.html#urllib2.Request">urlopen()</a> is a method you use for opening urls.<br/><a href="http://docs.python.org/library/urllib.html#urlencode">urlencode()</a> converts the arguments to percent-encoded string.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS FOR LOW MEMORI USE
    </pattern>
    <template>
<![CDATA[<p>One of the most reasonable databases for low-memory consumption that I have used is <a href="http://www.firebirdnews.org/docs/fb2min.html" rel="nofollow">Firebird</a>.  But I don't know from your question what you mean.  I think there are <a href="http://code.google.com/p/django-firebird/" rel="nofollow">Python interfaces for firebird</a>, but I am unaware of the status of Django and Firebird.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHOOL ERP BASE ON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Try this one : <a href="https://github.com/skyl/Django-School" rel="nofollow">https://github.com/skyl/Django-School</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYDEV FIND DJANGO
    </pattern>
    <template>
<![CDATA[<p>In Eclipse:</p><br/><br/><p>Window --> Preferences --> Interpreter - Python.</p><br/><br/><p>Make sure to choose Python2.7 as the interpreter.</p><br/><br/><p>Now, click New Folder. Browse to find the path to django (in this case: <em>C:\Django-1.2.5\django</em>).</p><br/><br/><p><img src="http://i.stack.imgur.com/eONAu.jpg" alt="preferences"></p><br/><br/><p>OK --> Apply --> OK.</p><br/><br/><p>That's it. You can create a new Django project.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DATA TYPE IN MODEL WITHOUT DROPE THE TABL
    </pattern>
    <template>
<![CDATA[<p>I got it working in another way. I selected my database through sql console and added new columns with sql query. And that worked just fine :), Thanks a lot for the help u guys gave..</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX FORBIDDEN ERROR
    </pattern>
    <template>
<![CDATA[<p>You need a CSRF token even if the request is to the same domain. There's code here to add a CSRF token to your AJAX requests (with jQuery):</p><br/><br/><p><a href="https://docs.djangoproject.com/en/1.3/ref/contrib/csrf/#csrf-ajax" rel="nofollow">https://docs.djangoproject.com/en/1.3/ref/contrib/csrf/#csrf-ajax</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAW QUERI CURSOR ERROR
    </pattern>
    <template>
<![CDATA[<p>This was just a PyDev information message as Daniel pointed out. I am able to run the script without modifying anything.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTENT TYPE HOW TO GET MODEL CLASS OF CONTENT TYPE TO CREAT A INSTANC
    </pattern>
    <template>
<![CDATA[<p>You need to create an instance of the class. <code>ct.model_class()</code> returns the class, not an instance of it. Try the following:</p><br/><br/><pre><code>&gt;&gt;&gt; from django.contrib.contenttypes.models import ContentType<br/>&gt;&gt;&gt; ct = ContentType.objects.get(model='user')<br/>&gt;&gt;&gt; ct_class = ct.model_class()<br/>&gt;&gt;&gt; ct_instance = ct_class()<br/>&gt;&gt;&gt; ct_instance.username = 'hellow'<br/>&gt;&gt;&gt; ct_instance.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXPOS VIRTUAL FIELD IN A TASTYPI VIEW
    </pattern>
    <template>
<![CDATA[<p>OK, so this is my solution. Code is below.</p><br/><br/><p>Points to note:</p><br/><br/><ol><br/><li>The work is basically all done in <code>obj_get_list</code>. That's where I run my queries, having access to the request.</li><br/><li>I can return a list from <code>obj_get_list</code>.</li><br/><li>I would probably have to override all of the other <code>obj_*</code> methods corresponding to the other operations (like <code>obj_get</code>, <code>obj_create</code>, etc) if I wanted them to be available.</li><br/><li>Because I don't have a <code>queryset</code> in <code>Meta</code>, I need to provide an <code>object_class</code> to tell tastypie's introspection what fields to offer. </li><br/><li>To expose my "virtual" attribute (which I create in <code>obj_get_list</code>), I need to add a field declaration for it.</li><br/><li>I've commented out the filters and authorisation limits because I don't need them right now. I'd need to implement them myself if I needed them.</li><br/></ol><br/><br/><p>Code:</p><br/><br/><pre><code>from tastypie.resources import ModelResource<br/>from tastypie import fields<br/>from models import *<br/>import logging<br/><br/>logger = logging.getLogger(__name__)<br/><br/><br/>class CompanyResource(ModelResource):<br/>    role = fields.CharField(attribute='role')<br/><br/><br/>    class Meta:<br/>        allowed_methods = ['get']<br/>        resource_name = 'companies'<br/>        object_class = CompanyUK<br/>        # should probably have some sort of authentication here quite soon<br/><br/><br/>    #filters does nothing. If it matters, hook them up<br/>    def obj_get_list(self, request=None, **kwargs):<br/>#         filters = {}<br/><br/>#         if hasattr(request, 'GET'):<br/>#             # Grab a mutable copy.<br/>#             filters = request.GET.copy()<br/><br/>#         # Update with the provided kwargs.<br/>#         filters.update(kwargs)<br/>#         applicable_filters = self.build_filters(filters=filters)<br/><br/>        try:<br/>            #base_object_list = self.get_object_list(request).filter(**applicable_filters)<br/>            def add_role(role):<br/>                def add_role_company(link):<br/>                    company = link.company<br/>                    company.role = role<br/>                    return company<br/>                return add_role_company<br/><br/>            director_of = map(add_role('director'), DirectorsIndividual.objects.filter(individual__user=request.user))<br/>            member_of   = map(add_role('member'),   MembersIndividual.objects.filter(individual__user=request.user))<br/>            manager_of  = map(add_role('manager'),  CompanyManager.objects.filter(user=request.user))<br/><br/>            base_object_list = director_of + member_of + manager_of<br/>            return base_object_list #self.apply_authorization_limits(request, base_object_list)<br/>        except ValueError, e:<br/>            raise BadRequest("Invalid resource lookup data provided (mismatched type).")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM IN DJANGO CM
    </pattern>
    <template>
<![CDATA[<p>I've recently ran across <a href="https://github.com/philomat/django-form-designer" rel="nofollow" title="django-form-designer">django-form-designer</a></p><br/><br/><p>It's quite nice and lets you design forms in a wysiwyg manner.  Works for stand alone django applications and has an additional plugin for Django-CMS.  One note: you have to follow the standalone instructions in addition to the Django-CMS instructions for installation.</p><br/><br/><p>From the github description:</p><br/><br/><blockquote><br/>  <p>Key features:</p><br/>  <br/>  <ul><br/>  <li>Design contact forms, search forms etc from the Django admin, without writing any code</li><br/>  <li>Form data can be logged and CSV-exported, sent via e-mail, or forwarded to any web address</li><br/>  <li>Integration with Django CMS: Add forms to any page</li><br/>  <li>Use drag &amp; drop to change the position of your form fields</li><br/>  <li>Fully collapsible admin interface for better overview over your form</li><br/>  <li>Implements many form fields included with Django (TextField, EmailField, DateField etc)</li><br/>  <li>Validation rules as supplied by Django are fully configurable (maximum length, regular expression etc)</li><br/>  <li>Customizable messages and labels</li><br/>  <li>Supports POST and GET forms</li><br/>  </ul><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KEEP CHANG URL FROM HTTP LOCALHOST TO HTTP 127.0.0.1 8080
    </pattern>
    <template>
<![CDATA[<p><strong>edit2:</strong></p><br/><br/><p><a href="http://wiki.nginx.org/HttpProxyModule#proxy_redirect" rel="nofollow">http://wiki.nginx.org/HttpProxyModule#proxy_redirect</a></p><br/><br/><p><a href="http://wiki.nginx.org/HttpProxyModule#proxy_pass" rel="nofollow">http://wiki.nginx.org/HttpProxyModule#proxy_pass</a></p><br/><br/><p>What i think is happening is when you use your httpresponseredirect, the HTTP_HOST header is giving it the 127.0.0.1:8080, because of your proxy_pass setting.</p><br/><br/><p><a href="http://stackoverflow.com/questions/1457006/djangos-httpresponseredirect-seems-to-strip-off-my-subdomain">Django&#39;s HttpResponseRedirect seems to strip off my subdomain?</a></p><br/><br/><blockquote><br/>  <p>Django has some methods it always<br/>  applies to a response. One of these is<br/>  django.utils.http.fix_location_header.<br/>  This ensures that a redirection<br/>  response always contains an absolute<br/>  URI (as required by HTTP spec).</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM CUSTOM WIDGET FOR A LISTFIELD AND DISPLAY A LIST
    </pattern>
    <template>
<![CDATA[<p>Here's a similar question with a recipe for ListField widget that could get you started:<br><br/><a href="http://stackoverflow.com/questions/6300218/django-nonrel-form-field-for-listfield">Django-nonrel form field for ListField</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CURRENT TAG IS NOT A VALID TAG LIBRARI
    </pattern>
    <template>
<![CDATA[<p>I would suggest the following:</p><br/><br/><ol><br/><li><p>(Most likely) You haven't installed one of the dependencies of your tag library. Check the imports inside the current_tags.py module.</p></li><br/><li><p>Make sure the application that includes the tag library is registered in settings.py under INSTALLED_APPS</p></li><br/></ol><br/><br/><p>If everything else fails, check this link:<br/><a href="http://www.b-list.org/weblog/2007/dec/04/magic-tags/" rel="nofollow">http://www.b-list.org/weblog/2007/dec/04/magic-tags/</a></p><br/><br/><p>Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MIDDLWAR TO ACCEPT MULTIPL REQUEST IN A REQUEST AND RETURN MULTIPL RESPONS IN A RESPONS
    </pattern>
    <template>
<![CDATA[<p>I highly doubt this exists, so you'll pretty much have to do it yourself.</p><br/><br/><p>Write a middleware that looks for your separator, split those URLs, resolve them and call the view, then merge the results.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL BLOB FIELD
    </pattern>
    <template>
<![CDATA[<p>Django's ORM has no field for binary large objects. Either use something like a <code>FileField</code>, or search for candidate field classes using a search engine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATETIM TO JSON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This solved my problem.</p><br/><br/><pre><code> from django.core.serializers.json import DjangoJSONEncoder<br/> data =  json.dumps(data, cls=DjangoJSONEncoder)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND UTF 8 ENCOD ISSU WITH SCRAPI XPATH SELECTOR TEXT
    </pattern>
    <template>
<![CDATA[<p>Thanks very much for your answers, John and Steven. Your answers got me thinking differently, which led me to find the source of the problem and also a working solution. </p><br/><br/><p>I was working with the following test code:</p><br/><br/><pre><code>import urllib<br/>import urllib2<br/>from scrapy.selector import HtmlXPathSelector<br/>from scrapy.http import HtmlResponse<br/><br/>URL = "http://jackjones.bestsellershop.com/DE/jeans/clark-vintage-jos-217-sup/37246/37256"<br/><br/>url_handler = urllib2.build_opener()<br/>urllib2.install_opener(url_handler)<br/><br/>handle = url_handler.open(URL)<br/>response = handle.read()<br/>handle.close()<br/><br/>html_response = HtmlResponse(URL).replace(body=response) # Problematic line<br/>hxs = HtmlXPathSelector(html_response)<br/><br/>desc = hxs.select('//span[@id="attribute-content"]/text()')<br/>desc_text = desc.extract()[0]<br/>print desc_text<br/>print desc_text.encode('utf-8')<br/></code></pre><br/><br/><p>Inside the Scrapy shell, when I extracted the description data, it came out fine. It gave me reason to suspect something was wrong in my code, because on the <code>pdb</code> prompt, I was seeing the replacement characters in the extracted data. </p><br/><br/><p>I went through the Scrapy docs for the <a href="http://doc.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Response" rel="nofollow">Response class</a> and adjusted the code above to this:</p><br/><br/><pre><code>import urllib<br/>import urllib2<br/>from scrapy.selector import HtmlXPathSelector<br/>from scrapy.http import HtmlResponse<br/><br/>URL = "http://jackjones.bestsellershop.com/DE/jeans/clark-vintage-jos-217-sup/37246/37256"<br/><br/>url_handler = urllib2.build_opener()<br/>urllib2.install_opener(url_handler)<br/><br/>handle = url_handler.open(URL)<br/>response = handle.read()<br/>handle.close()<br/><br/>#html_response = HtmlResponse(URL).replace(body=response)<br/>html_response = HtmlResponse(URL, body=response)<br/>hxs = HtmlXPathSelector(html_response)<br/><br/>desc = hxs.select('//span[@id="attribute-content"]/text()')<br/>desc_text = desc.extract()[0]<br/>print desc_text<br/>print desc_text.encode('utf-8')<br/></code></pre><br/><br/><p>The change I made was to replace the line <code>html_response = HtmlResponse(URL).replace(body=response)</code> with <code>html_response = HtmlResponse(URL, body=response)</code>. It is my understanding that the <code>replace()</code> method was somehow mangling the special characters from an encoding point of view.</p><br/><br/><p>If anyone would like to chip in with any details of what exactly the <code>replace()</code> method did wrong, I'd very much appreciate the effort. </p><br/><br/><p>Thank you once again.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX SELECT WIDGET
    </pattern>
    <template>
<![CDATA[<p>I used grappelli for the admin interface.<br><br/>It supplies Autocomplete Lookups.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A RAWQUERYSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>How about <code>simplejson.dumps([dict(cow.__dict__) for cow in cows])</code>?  If your <code>Cow</code> model only has simple string or integer values this should work, otherwise you'll need to handle your more complex types manually (e.g., <code>DateTimeField</code> need to be <code>unicode</code>-ed for simplejson).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREVIEW OF GALLERI IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Here I saw a bit outdated tutorial about it...<br/>It creates your own thumbnails. You need to use "<a href="http://thumbnail.sorl.net/" rel="nofollow">sorl-thumbnail</a>" now-days for thumbnails generation and storing it's a bit easier and more right way IMHO...</p><br/><br/><p>Nevertheless it's a tutorial of how to build a photo previews in admin. You could use it or enhance it with AJAX calls. But IMHO again it's not necessary...</p><br/><br/><p>P.S. It's better to download full sources of this app from the start.</p><br/><br/><p>so... article:</p><br/><br/><p><a href="http://www.lightbird.net/dbe/photo.html#enhancing-admin" rel="nofollow">Django Tutorial: Photo Organizer and Sharing App Part I. Enhancing Admin.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSTAL DJANGO OLDER VERSION USE EASY INSTAL
    </pattern>
    <template>
<![CDATA[<p>It's probably better to use <a href="http://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install">Pip instead of easy_install</a>.</p><br/><br/><p>Then make sure you <a href="http://guide.python-distribute.org/pip.html#creating-a-virtualenv" rel="nofollow">create you virtualenv</a> with the <code>--no-site-packages</code>-option.</p><br/><br/><p>For convenience you should consider using <a href="http://www.doughellmann.com/projects/virtualenvwrapper/" rel="nofollow">virtualenvwrapper</a> in conjunction with virtualenv.</p><br/><br/><p>Check this <a href="http://blog.sidmitra.com/manage-multiple-projects-better-with-virtuale" rel="nofollow">introductory post</a> to get an idea.</p><br/><br/><p>And finally make sure to <a href="http://www.pip-installer.org/en/latest/requirement-format.html" rel="nofollow">specify the exact version</a> you want to install.<br/>In your case try:</p><br/><br/><pre><code>pip install django==1.2.5<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELEMENT ORDER IN DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>Use SortedDict instead of dict (<code>from django.utils.datastructures import SortedDict</code>)</p><br/><br/><p>SortedDict maintains it's order in it's <code>keyOrder</code> attribute. So you can manipulate the ordering without reconstructing dict if you want to. For example, to reverse the SortedDict's order just use <code>keyOrder.reverse()</code></p><br/><br/><pre><code>post_list = SortedDict([(obj.id, obj) for obj in posts])<br/># reversing the post order in-place<br/>post_list.keyOrder.reverse()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + MOD WSGI + APACH IMPORTERROR AT NO MODUL NAME DJPROJ.URL
    </pattern>
    <template>
<![CDATA[<p>Either change all your module/package entries and imports to exclude the project name, or put <code>/srv/www/site.com</code> in <code>sys.path</code> as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NTERNET EXPLOR ACCESS MY DJANGO DEVELOP SERVER THAT S ACCESS EXTERN ( I.E. NOT ON LOCALHOST )
    </pattern>
    <template>
<![CDATA[<p>Unfortunately (I am said teacher), I can't provide a linux host - only a linux server and a windows host to do development on. </p><br/><br/><p>He's actually running the web server correctly, with the command provided by Paul. But for some reason, it's only visible in Firefox/Chrome, IE just provides a generic "Webpage cannot be displayed"</p><br/><br/><p>But this problem can be solved by using the entire address: http:// isn't optional like it is in Chrome and Firefox.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSONFIELD DUMPING LOAD
    </pattern>
    <template>
<![CDATA[<p>I ended up solving this problem by overriding Django's included JSON serializer, specifically the handle_field method, in a custom serializer file called custom_json_serializer.py. By doing this I can ensure that specific JSONFields stay as is, without being converted to string. </p><br/><br/><p>On the chance anyone else runs into this issue, these are the steps I took. I had to add this custom serializer to the settings.py file:</p><br/><br/><pre><code>SERIALIZATION_MODULES = {       <br/>    'custom_json': 'myapp.utils.custom_json_serializer',<br/>}<br/></code></pre><br/><br/><p>and then call it when serializing the data from Django:</p><br/><br/><pre><code>python manage.py dumpdata mymodel --format=custom_json --indent=2 --traceback &gt; mymodel_data.json<br/></code></pre><br/><br/><p>The custom serializer looks like:</p><br/><br/><pre><code>from django.core.serializers.json import Serializer as JSONSerializer<br/>from django.utils.encoding import is_protected_type<br/><br/># JSONFields that are normally incorrectly serialized as strings<br/>json_fields = ['problem_field1', 'problem_field2']<br/><br/><br/>class Serializer(JSONSerializer):<br/>    """<br/>    A fix on JSONSerializer in order to prevent stringifying JSONField data.<br/>    """<br/>    def handle_field(self, obj, field):<br/>        value = field._get_val_from_obj(obj)<br/>        # Protected types (i.e., primitives like None, numbers, dates,<br/>        # and Decimals) are passed through as is. All other values are<br/>        # converted to string first.<br/>        if is_protected_type(value) or field.name in json_fields:<br/>            self._current[field.name] = value<br/>        else:<br/>            self._current[field.name] = field.value_to_string(obj)<br/></code></pre><br/><br/><p>The really strange part is that before this fix some JSONFields were serializing just fine, while others were not. That is why I took the approach of specifying the fields to be handled. Now all data is serializing correctly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR ( EXTERN IP )
    </pattern>
    <template>
<![CDATA[<p>Modify your query to use <a href="http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#get-object-or-404" rel="nofollow"><code>get_object_or_404</code></a>, or catch the <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#get" rel="nofollow"><code>YourModel.DoesNotExist</code></a> (3rd paragraph) exception when you're doing the lookup, and raise a <a href="http://docs.djangoproject.com/en/dev/topics/http/views/#django.http.Http404" rel="nofollow"><code>Http404</code></a> exception.  When you don't catch the <code>DoesNotExist</code> exception the view raises a 500 error.  As a side effect, this sends an exception email to the the <a href="http://docs.djangoproject.com/en/dev/ref/settings/?from=olddocs#admins" rel="nofollow"><code>ADMINS</code></a> defined it <code>settings.py</code>.</p><br/><br/><p>Example of both cases:</p><br/><br/><pre><code>from django.shortcuts import get_object_or_404<br/><br/>post_id = 1<br/>post = get_object_or_404(Post, id=post_id)<br/><br/># or catch the exception and do something with it<br/><br/>from django.http import Http404<br/>try:<br/>    post = Post.objects.get(id=post_id)<br/>except Post.DoesNotExist:<br/>    # id doesnt exist... do extra things here<br/>    raise Http404<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT CONTEXT PROCESSOR BREAK MY APP
    </pattern>
    <template>
<![CDATA[<p>Django has a default set of TEMPLATE_CONTEXT_PROCESSORS, which you need to manually add when adding your own. <a href="http://docs.djangoproject.com/en/1.3/ref/settings/#template-context-processors" rel="nofollow">http://docs.djangoproject.com/en/1.3/ref/settings/#template-context-processors</a></p><br/><br/><p>Depending on your Django version these are different, however if using Django 1.3 you might have something as follows</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    "django.contrib.auth.context_processors.auth",<br/>    "django.core.context_processors.debug",<br/>    "django.core.context_processors.i18n",<br/>    "django.core.context_processors.media",<br/>    "django.core.context_processors.static",<br/>    "django.contrib.messages.context_processors.messages",<br/>    "Store.views.items_in_cart",<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRE SAV SIGNAL DOE NOT WORK
    </pattern>
    <template>
<![CDATA[<p>You're not setting the sender class for one.</p><br/><br/><pre><code>from django.db.models.signals import pre_save<br/>from myapp.models import MyModel<br/>import logging<br/><br/>def my_callback(sender, **kwargs):<br/>    logging.debug("======================================")<br/>pre_save.connect(my_callback, sender=MyModel)<br/></code></pre><br/><br/><p>Secondly, if you're using Django 1.3 you should use the new decorator syntax.</p><br/><br/><pre><code># Inside your models.py<br/>from django.db import models<br/>from django.db.models.signals import pre_save<br/><br/>class MyModel(models.Model):<br/>    field1 = models.TextField()<br/>    field2 = models.IntegerField()<br/><br/>@receiver(pre_save, sender=MyModel)<br/>def mymodel_save_handler(sender, **kwargs):<br/>    logging.debug("======================================")<br/></code></pre><br/><br/><p>That should do it, but I haven't tested the code so let me know if it's still broken.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL TO PYDEV IN ECLIPS SO I COULD IMPORT IT AND USE IT IN MY PROJECT
    </pattern>
    <template>
<![CDATA[<p>Had the same problem here.<br/>Got it resolved by adding <code>/usr/share/pyshared</code> to the Libraries tab in window->preferences->pydev->Interpreter - Python.</p><br/><br/><p>There were a lot of <code>/usr/lib/python*</code> paths with the compiled libraries (the C stuff with python bindings) where included already, but not <code>/usr/share</code>... parts with the source.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPLIT A VERI LONG STRING INTO A LIST OF SHORTER STRING IN PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; s = "This is a very long string with many many many many and many more sentences and there is not one character that i can use to split by, just by number of words"<br/>&gt;&gt;&gt; l = s.split()<br/>&gt;&gt;&gt; n = 5<br/>&gt;&gt;&gt; [' '.join(l[x:x+n]) for x in xrange(0, len(l), n)]<br/>['This is a very long',<br/> 'string with many many many',<br/> 'many and many more sentences',<br/> 'and there is not one',<br/> 'character that i can use',<br/> 'to split by, just by',<br/> 'number of words']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM RADIO INPUT LAYOUT
    </pattern>
    <template>
<![CDATA[<p>Anton's answer worked, and was a decent answer for a while there - but unfortunately it became unmaintainable.  So, taking a cue from <a href="https://code.djangoproject.com/attachment/ticket/9230/forms.py.diff" rel="nofollow">a diff</a> attached to <a href="https://code.djangoproject.com/ticket/9230" rel="nofollow">django ticket #9230</a>, I just monkey patched <code>django.forms.forms.BoundField</code></p><br/><br/><pre><code>from django import forms<br/><br/>def MonkeyPatchDjangoFormsBoundField():<br/>    def prepare_widget_render(self, widget=None, attrs=None, only_initial=False):<br/>        """<br/>        Prepare the data needed for the widget rendering.<br/>        """<br/>        if not widget:<br/>            widget = self.field.widget<br/><br/>        attrs = attrs or {}<br/>        auto_id = self.auto_id<br/>        if auto_id and 'id' not in attrs and 'id' not in widget.attrs:<br/>            if not only_initial:<br/>                attrs['id'] = auto_id<br/>            else:<br/>                attrs['id'] = self.html_initial_id<br/><br/>        if not only_initial:<br/>            name = self.html_name<br/>        else:<br/>            name = self.html_initial_name<br/><br/>        return widget, name, attrs<br/><br/>    def as_widget(self, widget=None, attrs=None, only_initial=False):<br/>        """<br/>        Renders the field by rendering the passed widget, adding any HTML<br/>        attributes passed as attrs.  If no widget is specified, then the<br/>        field's default widget will be used.<br/>        """<br/>        widget, name, attrs = self.prepare_widget_render(widget, attrs, only_initial)<br/>        return widget.render(name, self.value(), attrs=attrs)<br/><br/>    def __iter__(self):<br/>        """<br/>        Check if current widget has a renderer and iterate renderer.<br/>        """<br/>        widget, name, attrs = self.prepare_widget_render()<br/>        if not hasattr(widget, 'get_renderer'):<br/>            raise Exception, "Can not iterate over widget '%s'" % widget.__class__.__name__<br/>        renderer = widget.get_renderer(name, self.value(), attrs=attrs)<br/>        for entry in renderer:<br/>            yield entry<br/><br/>    def __getitem__(self,idx):<br/>        """<br/>        Tries to use current widget's renderer, and then check attribute.<br/>        """<br/>        widget, name, attrs = self.prepare_widget_render()<br/>        try:<br/>            renderer = widget.get_renderer(name, self.value(), attrs=attrs)<br/>            return renderer[idx]<br/>        except Exception:<br/>            return getattr(self,idx)<br/><br/>    forms.forms.BoundField.prepare_widget_render = prepare_widget_render<br/>    forms.forms.BoundField.as_widget = as_widget<br/>    forms.forms.BoundField.__iter__ = __iter__<br/>    forms.forms.BoundField.__getitem__ = __getitem__<br/></code></pre><br/><br/><p>This allowed me to be able to access the radio inputs directly, by using <code>{{ form.field.0.tag }}</code>, or through iteration - <code>{% for radio in form.field %} {{ radio.tag }} {% endfor %}</code>.  Much easier to take care of!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS THE DIFFER BETWEEN HTML PARS AND WEB CRAWL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>If you can get away with background web crawling use <a href="http://scrapy.org/" rel="nofollow">scrapy</a>. If need to immediately grab something use <a href="http://code.google.com/p/html5lib/" rel="nofollow">html5lib</a> (more robust) or <a href="http://lxml.de/" rel="nofollow">lxml</a> (faster). If you are going to be doing the later, use the awesome <a href="http://docs.python-requests.org/en/latest/index.html" rel="nofollow">requests</a> library. I would avoid using BeautifulSoup, mechanize, urllib2, httplib.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG USE JQUERI AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>Try the jQuery plugins <a href="http://www.uploadify.com/" rel="nofollow">Uploadify</a> or <a href="http://code.google.com/p/swfupload/" rel="nofollow">SWFUpload</a>.   Someone even did the Django integration for you, see: <a href="https://github.com/tstone/django-uploadify" rel="nofollow">https://github.com/tstone/django-uploadify</a> and <a href="http://blog.fogtunes.com/2009/11/howto-integrate-swfupload-with-django/" rel="nofollow">http://blog.fogtunes.com/2009/11/howto-integrate-swfupload-with-django/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP.PI THAT PULL IN GITHUB REPO AND PUT THEM IN THE CORRECT DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>If you are using setuptool (setup.py) you can use the dependency requirement:<br/><a href="http://stackoverflow.com/a/3481388/496445">http://stackoverflow.com/a/3481388/496445</a></p><br/><br/><p>Otherwise as comments have suggested, set up your django project as an actual git repo and then add the github repo as a submodule</p><br/><br/><pre><code>cd myProject<br/>git init<br/>git submodule add git://path/to/repo.git local/location/repo<br/></code></pre><br/><br/><p>Then you would just be able to cd into that submodule and <code>git pull</code></p><br/><br/><p>If you dont want to set your project up as a git repo, then the brute force way would be to manually clone the github repo where you want it, and then add some manual commands in your setup.py</p><br/><br/><pre><code>import os<br/>os.system("cd path/to/repo &amp;&amp; git pull")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S QUERYDICT LIST LIMIT
    </pattern>
    <template>
<![CDATA[<p>I doubt that it is possible to make django avoid creating QueryDict, but you can ignore it (from <a href="http://stackoverflow.com/questions/2579235/iphone-json-post-request-to-django-server-creates-querydict-within-querydict">iphone Json POST request to Django server creates QueryDict within QueryDict</a>):<br/><code><pre><br/>def view_example(request):<br/>    data=simplejson.loads(request.raw_post_data)<br/></pre></code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO FORM WITH AJAX JQUERI
    </pattern>
    <template>
<![CDATA[<p>Since you are using jQuery why not use the following:</p><br/><br/><pre><code>&lt;script language="JavaScript"&gt;<br/>    $(document).ready(function() {<br/>        $('#YOUR_FORM').submit(function() { // catch the form's submit event<br/>            $.ajax({ // create an AJAX call...<br/>                data: $(this).serialize(), // get the form data<br/>                type: $(this).attr('method'), // GET or POST<br/>                url: $(this).attr('action'), // the file to call<br/>                success: function(response) { // on success..<br/>                    $('#DIV_CONTAINING_FORM).html(response); // update the DIV<br/>                }<br/>            });<br/>            return false;<br/>        });<br/>    });<br/>&lt;/script&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OFF SQL LOG WHILE KEEP SETTINGS.DEBUG
    </pattern>
    <template>
<![CDATA[<p>When settings.DEBUG is True, Django uses CursorDebugWrapper instead of CursorWrapper. This is what appends the queries to connection.queries and consumes memory. I would monkey-patch the connection wrapper to always use CursorWrapper:</p><br/><br/><pre><code>from django.conf import settings<br/>from django.db.backends import BaseDatabaseWrapper<br/>from django.db.backends.util import CursorWrapper<br/><br/>if settings.DEBUG:<br/>    BaseDatabaseWrapper.make_debug_cursor = lambda self, cursor: CursorWrapper(cursor, self)<br/></code></pre><br/><br/><p>Disabling logging like others suggest won't fix the problem, because CursorDebugWrapper still stores the queries in connection.queries even if logging is off.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE CURRENT YEAR IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>The full tag to print just the current year is <code>{% now "Y" %}</code>. Note that the Y must be in quotes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUT WHEN UPLOAD A LARG FILE
    </pattern>
    <template>
<![CDATA[<p>I added:</p><br/><br/><pre><code>proxy_read_timeout 1200;<br/></code></pre><br/><br/><p>to nginx.conf. This increased the timeout from the default which fixed the problem. I probably don't need to use 1200, it's just the first value I tried.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF WITH JQUERI AND .POST IN DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>Place this code before your function. It will take care of CSRF.</p><br/><br/><pre><code>$('html').ajaxSend(function(event, xhr, settings) {<br/>    function getCookie(name) {<br/>        var cookieValue = null;<br/>        if (document.cookie &amp;&amp; document.cookie != '') {<br/>            var cookies = document.cookie.split(';');<br/>            for (var i = 0; i &lt; cookies.length; i++) {<br/>                var cookie = jQuery.trim(cookies[i]);<br/>                // Does this cookie string begin with the name we want?<br/>                if (cookie.substring(0, name.length + 1) == (name + '=')) {<br/>                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));<br/>                    break;<br/>                }<br/>            }<br/>        }<br/>        return cookieValue;<br/>    }<br/>    if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {<br/>        // Only send the token to relative URLs i.e. locally.<br/>        xhr.setRequestHeader("X-CSRFToken", getCookie('csrftoken'));<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATESYNTAXERROR
    </pattern>
    <template>
<![CDATA[<pre><code>Caught ViewDoesNotExist while rendering: Tried results in module polls.views. <br/>Error was: 'module' object has no attribute 'results'<br/></code></pre><br/><br/><p>That's pretty much all you need. Ignore the <code>TemplateSyntaxError</code>, it's not related to the template at all. Django is telling you that you don't have this:</p><br/><br/><pre><code>def results(request):<br/>    # do something<br/></code></pre><br/><br/><p>In your views.py. You'll get <code>ViewDoesNotExist</code> errors outside the admin when you start writing urls and referencing functions that don't actually exist in them, so make sure as you progress that you either ensure you have such stub functions that just return a basic 200, or you comment out those urls until you need them.</p><br/><br/><p>Technically speaking this is an extension of a python error. If you ran:</p><br/><br/><pre><code>$ python manage.py shell<br/>&gt;&gt;&gt; from poll import views<br/>x = views.results<br/></code></pre><br/><br/><p>You'd get an <a href="http://docs.python.org/library/exceptions.html#exceptions.AttributeError"><code>AttributeError</code></a>.</p><br/><br/><p>Since you asked why, if you look in <code>Django/core/urlresolvers.py</code> you'll see the line:</p><br/><br/><pre><code>_callable_cache = {} # Maps view and url pattern names to their view functions.<br/></code></pre><br/><br/><p>So basically a cache of view mappings (urls or whatever) to functions is made in the form of a hashmap (dictionary). This is constructed by this function:</p><br/><br/><pre><code>def _get_callback(self):<br/>    if self._callback is not None:<br/>        return self._callback<br/>    try:<br/>        self._callback = get_callable(self._callback_str)<br/>    except ImportError, e:<br/>        mod_name, _ = get_mod_func(self._callback_str)<br/>        raise ViewDoesNotExist("Could not import %s. Error was: %s" % (<br/>                                                            mod_name, str(e)))<br/>    except AttributeError, e:<br/>        mod_name, func_name = get_mod_func(self._callback_str)<br/>        raise ViewDoesNotExist("Tried %s in module %s. Error was: %s" % (<br/>                                                   func_name, mod_name, str(e)))<br/>    return self._callback<br/>callback = property(_get_callback)<br/></code></pre><br/><br/><p>Which evaluates each callback to check it exists (newlines are mine).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR RELATEDMANAG OBJECT IS NOT ITER
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>block in group.block_set.all()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL VIA DJANGO
    </pattern>
    <template>
<![CDATA[<p>Send the email to a real SMTP server. If you don't want to set up your own then you can find companies that will run one for you, such as Google themselves.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR UNABL TO SERIAL DATABAS
    </pattern>
    <template>
<![CDATA[<p>You need to tell Django that it should allow NULL values on those recently added fields. It looks only at the fields definition, it doesn't fetch the schema from the database. </p><br/><br/><p>The <code>self.field.rel.to.DoesNotExist</code> error is most likely raised when a client doesn't have an user associated and <code>client.user</code> is accessed. It's because by default all fields are required. If you change your model definition as shown bellow, the error should go away. </p><br/><br/><pre><code>class Client(models.Model):<br/>    # ...<br/>    user  = models.ForeignKey(User, <br/>                             null=True, blank=True) <br/>    datetime = models.DateTimeField(default=datetime.now,<br/>                             null=True, blank=True)<br/>    note = models.TextField(null=True, blank=True)<br/></code></pre><br/><br/><ul><br/><li><code>null=True</code> allows <code>NULL</code> respectively <code>None</code> values on a field.</li><br/><li><code>blank=True</code> allows you to leave the the field empty in a model form<br/>(eg. in the admin).</li><br/></ul><br/><br/><p>(<code>blank</code> and <code>null</code> are both <code>False</code> by default)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STAL SOUTH ON EXIST DATABASE. MYSQL DOE N T SUPPORT SCHEMA ALT STATEMENTS
    </pattern>
    <template>
<![CDATA[<p>If your schema is already up to date with the models.py that was used to create 0001_inital.py then you should run your initial migration with --fake to essentially tell south that you are already at version 0001 of the schema.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      . DATABAS QUERI DISTINCT FOR ONE FIELD
    </pattern>
    <template>
<![CDATA[<p>You can do this: </p><br/><br/><blockquote><br/>  <p>latest date and unique last name</p><br/></blockquote><br/><br/><p>or </p><br/><br/><blockquote><br/>  <p>all other fields</p><br/></blockquote><br/><br/><p>but you can't do both. If you want to get the most recent date for last name Davis, which other fields should be retrieved, firstname=John or firstname=Ann?</p><br/><br/><p>I am <em>guessing</em> that you want the result to look like this:</p><br/><br/><pre><code>FirstName     LastName    Date<br/><br/>John          Davis       10-10-2011<br/>Joe           Gray        20-09-2011<br/>Ann           Bovis       01-04-2010<br/></code></pre><br/><br/><p>Where the Ann Davis row is gone because she isn't the most recent Davis in the table. Correct?</p><br/><br/><p>In which case your raw SQL looks something like:</p><br/><br/><pre><code>SELECT FirstName, LastName, Date<br/>FROM<br/>Table T1<br/>WHERE<br/>NOT EXISTS (<br/>SELECT * FROM Table T2 WHERE T2.LastName=T1.LastName AND T2.Date &gt; T1.Date<br/>)<br/></code></pre><br/><br/><p>Which you can write up in Django using the <a href="https://docs.djangoproject.com/en/dev/topics/db/sql/" rel="nofollow">Item.objects.raw()</a> option. You can also use  <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#extra" rel="nofollow"><code>extra(where=...)</code></a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGNKEY IN ADMIN CAUS ATTRIBUTEERROR WHEN DEBUG IS FALS
    </pattern>
    <template>
<![CDATA[<p>I stumbled on exactly the same problem, luckily, I've fixed it.</p><br/><br/><p>The original solution (the one you used) comes from <a href="http://stackoverflow.com/questions/2470285/foreign-keys-in-django-admin-list-display">this question</a>, my solution is based on it:</p><br/><br/><pre><code>class ForeignKeyLinksMetaclass(MediaDefiningClass):<br/><br/>    def __new__(cls, name, bases, attrs):<br/><br/>        new_class = super(<br/>            ForeignKeyLinksMetaclass, cls).__new__(cls, name, bases, attrs)<br/><br/>        def foreign_key_link(instance, field):<br/>            target = getattr(instance, field)<br/>            return u'&lt;a href="../../%s/%s/%d/"&gt;%s&lt;/a&gt;' % (<br/>                target._meta.app_label, target._meta.module_name,<br/>                target.id, unicode(target)<br/>            )<br/><br/>        for name in new_class.list_display:<br/>            if name[:8] == 'link_to_':<br/>                method = partial(foreign_key_link, field=name[8:])<br/>                method.__name__ = name[8:]<br/>                method.allow_tags = True<br/>                setattr(new_class, name, method)<br/><br/>        return new_class<br/></code></pre><br/><br/><p>Well, the only thing you need is to replace the original <em>ModelAdminWithForeignKeyLinksMetaclass</em> with the one above.</p><br/><br/><p>However, it's not the end. The most interesting part is why the original solution causes problems. The answer to this question lies <a href="https://code.djangoproject.com/browser/django/branches/releases/1.3.X/django/contrib/admin/validation.py">here</a> (line 31) and <a href="https://code.djangoproject.com/browser/django/branches/releases/1.3.X/django/contrib/admin/util.py">here</a> (line 244).</p><br/><br/><p>When DEBUG is on Django tries to validate all registered ModelAdmins (first link). There <em>cls</em> is a <strong>class</strong> SomeAdmin (i.e. an instance of its metaclass). When <em>hasattr</em> is called, python tries to find an attribute <em>field</em> in class <em>SomeAdmin</em> or in one of its super classes. Since it is impossible, __getattr__ of  its class (i.e. <em>SomeAdmin</em>'s metaclass) is called, where a new method is added to class <em>SomeAdmin</em>. Hence, when it comes to rendering the interface, <em>SomeAdmin</em> is already patched and Django is able to find the required field (second link).</p><br/><br/><p>When DEBUG is False, Django skips the validation. When the interface is rendered Django tries to find a field (again, second link), but this time SomeAdmin is not patched, moreover *model_admin* is not class <em>SomeAdmin</em>, it is its <strong>instance</strong>. Thus, trying to find an attribute <em>name</em> in *model_admin*, python is unable to do this, neither it is able to find it in its class (<em>SomeAdmin</em>) as well as in any of its super classes, so an exception is raised.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DICTIONARI IN PYTHON DJANGO AND VIEW IT IN JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Very simply:</p><br/><br/><pre><code>import json<br/>data = {'val1' : 'this is x', 'val2' : True}<br/>return HttpResponse( json.dumps( data ) )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME OS FOUND DJANGO MOD WSGI APACH 2.2
    </pattern>
    <template>
<![CDATA[<p>mod_wsgi for some reason cannot see your Py2.5 library. I would suggest checking the value of <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPythonPath" rel="nofollow">WSGIPythonPath</a> and make sure it points to something like /usr/lib/python2.5</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON WHAT S THE RECOMMEND SECUR WAY TO EXCHANG DATA BETWEEN MY INFRASTRUCTUR AND MY CUSTOM
    </pattern>
    <template>
<![CDATA[<p>You asked how your customers can securely transmit commands to your website and retrieve results in their response (near "real-time").</p><br/><br/><p>... have you considered <strong>hooking a reasonable API into your django app</strong>? If you're concerned about security, you can use authentication and serve it over HTTPS.</p><br/><br/><p>It's not as fancy as the messaging and queuing platforms that the kids are using these days but it'll get the job done.</p><br/><br/><p>Things to like about HTTP/HTTPS APIs:</p><br/><br/><ul><br/><li>They can be load balanced (highly available and scalable!)</li><br/><li>They can be cached (mo' betta performance and the ability to still serve content while rate limiting how often a client can hit the DB)</li><br/><li>Just about every programming language has a mature library that allows HTTP/HTTPS connections. Some have multiple, e.g. Python: urllib,urllib2,httplib</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON.DUMP ( ) THROW A 500 INTERN SERVER ERROR WHEN USE VARIABL
    </pattern>
    <template>
<![CDATA[<p>Turning DEBUG on in settings, and going through traceback may be useful.</p><br/><br/><p>Just of the wall, i may assume that before this check (if(errors == True):) You may forgot to initialize errors with initial value so it throws NameError... But it's just an assumption. </p><br/><br/><p>UPD: Sorry ajax part slipped my mind - +1 to <a href="http://stackoverflow.com/users/281469/waitinforatrain">waitinforatrain's</a> comment</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO HAVE MY VIRTUALENV DIRECTORI INSID MY GIT REPOSITORI
    </pattern>
    <template>
<![CDATA[<p>I use pip freeze to get the packages I need into a requirements.txt file and add that to my repository.  I tried to think of a way of why you would want to store the entire virtualenv, but I could not.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AJAX 403 ERROR
    </pattern>
    <template>
<![CDATA[<p>I think you <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">don't pass CSRF token</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AJAX POST TO A DJANGO VIEW ALWAY RESULT IN THE ERROR CALLBACK EXECUT
    </pattern>
    <template>
<![CDATA[<p>The problem here was that I needed to set the location.href="/main/"; in my success function callback. The page was getting redirected during the ajax call which was causing an error.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON DATA PASS VIA AJAX IN MY DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>It'll come as a string that needs to be desearialized.</p><br/><br/><pre><code>import json<br/><br/>def some_http_call(request)<br/>   json_string = request.GET.get('http_parameter_key', '')<br/>   json_object = json.loads(json_string)<br/><br/>   data = json_object["data"]<br/>   for x in data:<br/>       print x["name"]<br/></code></pre><br/><br/><p>Assuming <code>some_http_call</code> is your dispatcher and <code>http_parameter_key</code> is the name of the parameter where the json string is coming the code above will print all the names in the array of elements contained in the dictionary <code>data</code>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAY IS AJAX IS FALS ON A JQUERI AJAX REQUEST
    </pattern>
    <template>
<![CDATA[<p>Going through the jQuery source, it looks like <code>$.ajax()</code> (and therefore <code>$.get()</code>, <code>$.post()</code>, etc) will automatically set the <code>crossDomain</code> option to <code>true</code> if it sees that you're making a cross-domain request, which you are (<a href="https://github.com/jquery/jquery/blob/master/src/ajax.js#L626" rel="nofollow">relevant code here</a>). And in the actual AJAX request, jQuery won't set the <code>HTTP_X_REQUESTED_WITH</code> header that Django needs for <code>is_ajax()</code> if <code>crossDomain</code> is set (<a href="https://github.com/jquery/jquery/blob/master/src/ajax/xhr.js#L86" rel="nofollow">relevant code here</a>).</p><br/><br/><p>I think the easiest way to fix this is to explicitly set <code>crossDomain</code> to <code>false</code>:</p><br/><br/><pre><code>function xhrconnect() {<br/>    $.ajax({<br/>        url: "http://localhost:8000/xhr_test", <br/>        success: function(data) {<br/>            document.getElementById('xhrmsg').innerHTML = (data);<br/>        },<br/>        crossDomain: false<br/>    });<br/>}<br/></code></pre><br/><br/><p>If that doesn't work, you could try using an <a href="http://api.jquery.com/extending-ajax/#Prefilters" rel="nofollow">AJAX prefilter function</a> to manually set the <code>HTTP_X_REQUESTED_WITH</code> header on the request.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPROV THI MANY TO MANI DJANGO ORM QUERI AND MODEL SET
    </pattern>
    <template>
<![CDATA[<p>When you have sql query, that is hard to write using orm - you can use postgresql views. Not sure about mysql. In this case you will have:</p><br/><br/><p>Raw SQL like: </p><br/><br/><pre><code>CREATE VIEW photo_urls AS<br/>Select<br/>photo.id, --pseudo primary key for django mapper<br/>Gallery.id as gallery_id, <br/>PhotoSize.PhotoURL as photo_url<br/>From PhotoSize<br/>Inner Join Photo On Photo.id = PhotoSize.Photo_id<br/>Inner Join GalleryPhoto On GalleryPhoto.Photo_id = Photo.id<br/>Inner Join Gallery On Gallery.id = GalleryPhoto.Gallery_id<br/>Order By GalleryPhoto.Order Asc<br/></code></pre><br/><br/><p>Django model like:</p><br/><br/><pre><code>class PhotoUrls(models.Model):<br/>    class Meta: <br/>         managed = False <br/>         db_table = 'photo_urls'<br/>    gallery_id = models.IntegerField()<br/>    photo_url = models.CharField()<br/></code></pre><br/><br/><p>ORM Queryset like:</p><br/><br/><pre><code>PhotoUrls.objects.filter(gallery_id=5)<br/></code></pre><br/><br/><p>Hope it will help. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      . MANAGE.PI PERMISS DENI
    </pattern>
    <template>
<![CDATA[<p><code>manage.py</code> probably does not have its executable bit set, which is on purpose. Use <code>python manage.py</code> instead as per the Django docs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL WITH HTML ANCHOR LINK
    </pattern>
    <template>
<![CDATA[<p>This is because by default the send_mail() method messages in plain text rather than HTML.<br/>Check the <a href="https://docs.djangoproject.com/en/dev/topics/email/#sending-alternative-content-types">documentation</a> on how to send HTML.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON COLLAT ERROR
    </pattern>
    <template>
<![CDATA[<p>Alter the database in MySQL like so:</p><br/><br/><pre><code>ALTER TABLE foo CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;<br/></code></pre><br/><br/><p>When creating a new database, remember to create with the right collate settings:</p><br/><br/><pre><code>CREATE DATABASE foo CHARACTER SET utf8 COLLATE utf8_general_ci;<br/></code></pre><br/><br/><p>More discussion <a href="http://wolfram.kriesing.de/blog/index.php/2007/convert-mysql-db-to-utf8" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSRF TOKEN WITHOUT FORM
    </pattern>
    <template>
<![CDATA[<p>You must set a custom HTTP header, <code>X-CSRFToken</code>, in your AJAX request. See: <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax</a></p><br/><br/><p>If you've already followed that advice, it should be working. Use something like Firebug to monitor the request that's being sent and inspect the headers to ensure that the custom header is truly being passed. If it's not, then check your implementation again to make sure you did it just as the docs describe.</p><br/><br/><p>Also note:</p><br/><br/><blockquote><br/>  <p>Due to a bug introduced in jQuery 1.5, the example above will not work correctly on that version. Make sure you are running at least jQuery 1.5.1.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON DATA TO THE FRONT END USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Complementing zeekay answer, if you want to send only an object you could do a json dump, for example:</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>def my_ajax_view(request):<br/>    if not request.is_ajax():<br/>        raise Http404<br/><br/>    data_dict = getmydata() #lets supose is a dict<br/>    return HttpResponse(simplejson.dumps(data_dict))<br/></code></pre><br/><br/><p>That way you will receive that data via your ajax success and do whatever you want with it.</p><br/><br/><p>You can send over lists too, when you receive your response sometimes you will need to do a JSON.parse on data (sometimes cause when you send a dictionary I think is not necessary)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANY TO MANI FIELD COPI
    </pattern>
    <template>
<![CDATA[<p>The signal to be use is not <code>post_save</code>, rather <code>m2m_changed</code>, that is sent much after the model is saved to the database.</p><br/><br/><pre><code>@models.signals.m2m_changed(sender=MyModel.second_m2m.through)<br/>def duplicate_other_on_this_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):<br/>    # just before adding a possibly empty set in "second_m2m", check and populate.<br/>    if action == 'pre_add' and not pk_set:<br/>        instance.__was_empty = True<br/>        pk_set.update(instance.first_m2m.values_list('pk', flat=True))<br/><br/>@models.signals.m2m_changed(sender=MyModel.first_m2m.through)<br/>def duplicate_this_on_other_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):<br/>    # Just in case the "first_m2m" signals are sent after the other<br/>    # so the actual "population" of the "second_m2m" is wrong:<br/>    if action == 'post_add' and not pk_set and getattr(instance, '__was_empty'):<br/>        instance.second_m2m = list(pk_set)<br/>        delattr(instance, '__was_empty')<br/></code></pre><br/><br/><p><em>Edit: next code is simpler, and based upon new knowledge on the models definition</em></p><br/><br/><p>In your code the 'first_m2m' signals are sent before the the 'second_m2m' (it really depends on your model definition). So we can work on the assumption that when the 'second_m2m' signals are received, the 'first_m2m' is already populated with current data.</p><br/><br/><p>This makes us happier, because now you only need to check the m2m-pre-add:</p><br/><br/><pre><code>@models.signals.m2m_changed(sender=MyModel.second_m2m.through)<br/>def duplicate_other_on_this_if_empty(sender, instance, action, reverse, model, pk_set, **kwargs):<br/>    # just before adding a possibly empty set in "second_m2m", check and populate.<br/>    if action == 'pre_add' and not pk_set:<br/>        pk_set.update(instance.first_m2m.values_list('pk', flat=True))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S SYNCDB FAIL WITH MYSQL ERRNO 150
    </pattern>
    <template>
<![CDATA[<p>I traced the source of the problem. When creating 2 InnoDB tables with a foreign key relationship, the foreign key column must be indexed explicitly <a href="http://dev.mysql.com/doc/refman/4.1/en/innodb-foreign-key-constraints.html" rel="nofollow">prior to MySQL 4.1.2</a>. Using Django's ORM, this can be done by using the <code>db_index=True</code> option in the foreign key field. However, in the Django generated SQL, the <code>CREATE INDEX</code> statement is issued after the foreign key relationship is created. For example, for the following models:</p><br/><br/><pre><code>class Customer(models.Model):<br/>    first_name = models.CharField(max_length=100)<br/>    last_name = models.CharField(max_length=100)<br/><br/>class Order(models.Model):<br/>    customer = models.ForeignKey(Customer, db_index=True)<br/></code></pre><br/><br/><p>Django generates the following SQL code:</p><br/><br/><pre><code>BEGIN;<br/>CREATE TABLE 'foo_app_customer' (<br/>    'id' integer AUTO_INCREMENT NOT NULL PRIMARY KEY,<br/>    'first_name' varchar(100) NOT NULL,<br/>    'last_name' varchar(100) NOT NULL<br/>)<br/>;<br/>CREATE TABLE 'foo_app_order' (<br/>    'id' integer AUTO_INCREMENT NOT NULL PRIMARY KEY,<br/>    'customer_id' integer NOT NULL<br/>)<br/>;<br/>ALTER TABLE 'foo_app_order' ADD CONSTRAINT 'customer_id_refs_id_27e4f922' FOREIGN KEY ('customer_id') REFERENCES 'foo_app_customer' ('id');<br/>CREATE INDEX 'foo_app_order_12366e04' ON 'foo_app_order' ('customer_id');<br/>COMMIT;  <br/></code></pre><br/><br/><p>If you try running this code using MySQL 4.0, an errno 150 will occur when trying to execute the <code>ALTER TABLE</code> statement. But if the <code>CREATE INDEX</code> statement is issued first, everything works like a charm. As far as I can tell, the only workaround for this is to create your own table manually and using <code>inspectdb</code> afterwards to generate the models. </p><br/><br/><p>Also, I created a new <a href="https://code.djangoproject.com/ticket/16823" rel="nofollow">Django ticket</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP USE CLASS BAS VIEW AND AJAX
    </pattern>
    <template>
<![CDATA[<p>An ajax view isn't much different to a normal view except that you usually want to return a different format then when processing a normal request. This format is usually JSON.</p><br/><br/><p>The documentation has an example of a mixin that can be used to return JSON, so this is a good starting point:</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/class-based-views/#more-than-just-html" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/class-based-views/#more-than-just-html</a></p><br/><br/><p>Do you want your view to reply to normal requests or only deal with AJAX requests? If the former, the only trick would be to write in a small check in the render_to_response method to reject any normal GET requests. If the latter, the above link goes on to discuss a situation where you can create a view that will deal with ajax requests and with normal requests. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TO USE 32 BIT PYTHON
    </pattern>
    <template>
<![CDATA[<p>The <code>VERSIONER_PYTHON_PREFER_32_BIT</code> environment variable is an Apple-supplied feature.  It only applies to the Apple-supplied system Pythons in Mac OS X 10.6 and 10.7.  From the path shown, you are using a non-system Python (installed in <code>/Library/Frameworks</code>, possibly from a python.org installer).   <code>VERSIONER_PYTHON_PREFER_32_BIT</code> will have no affect on it.  Have you tried launching the development server with something like:</p><br/><br/><pre><code>arch -i386 /usr/local/bin/python2.7 django-admin.py ...<br/></code></pre><br/><br/><p>You still may run into trouble if Django launches Python interpreters in subprocesses which will default to 64-bit.  You should either get everything working in 64-bit mode or stick to a complete 32-bit chain of Python and MySQLdb.  You could save yourself a lot of trouble by installing a complete solution from a third-party distributor like MacPorts or Homebrew.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON VIA .LOAD ( ) OF JQUERI IN A GET REQUEST TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>This isn't how jQuery suggests you should send the data and it's probably not a good idea to do it this way either. Your url gets very ugly and long very quick if you add the json string to it like that.</p><br/><br/><p>Use the second argument for $.load; "data" (see <a href="http://api.jquery.com/load/" rel="nofollow">http://api.jquery.com/load/</a>) instead. So something like </p><br/><br/><pre><code>$div.load('thisAppURL', {"json": encodeURIComponent(item)});<br/></code></pre><br/><br/><p>Also, if you want to trace the output, I'd sugest using the third argument, the callback function, and use console instead of alert. You can get the actual return from the server that way too. So you'd get something like:</p><br/><br/><pre><code>$div.load(<br/>  'thisAppURL',<br/>  {"json": encodeURIComponent(item)},<br/>  function(response, status, xhr){<br/>    console.log(response);<br/>  }<br/>);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR FOR BUILT IN PYTHON FUNCTION IN DJANGO WHEN WORK WITH UWSGI
    </pattern>
    <template>
<![CDATA[<p>Can you try with the latest tip ? It looks like a reference counting bug that should be fixed in 0.9.9-dev</p><br/><br/><p>If you can confirm it solves your problem i will release an updated release with only this fix applied.</p><br/><br/><p>Many thanks for the report</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON BOOLEAN TO LOWERCAS STRING
    </pattern>
    <template>
<![CDATA[<p>The way to do this is to not use templates. Use the <a href="http://docs.python.org/library/json.html" rel="nofollow">json</a> module, as so:</p><br/><br/><pre><code>import json<br/><br/>def my_view(request):<br/>    # ...<br/>    json_d = dict(...)<br/>    return json.dumps(json_d)<br/></code></pre><br/><br/><p>My preferred way is to write a decorator, and return a dict.</p><br/><br/><pre><code>def json_view(f):<br/>    def wrapped_f(*args, **kwargs):<br/>        return json.dumps(f(*args, **kwargs))<br/><br/>    wrapped_f.original = f # for unit testing<br/>    return wrapped_f<br/><br/>@json_view<br/>my_view(request):<br/>    # ...<br/>    return dict(...)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N AUTHENT POST REQUEST TO TASTYPI
    </pattern>
    <template>
<![CDATA[<p>Using the <code>-d</code> and <code>--data</code> with curl is mangling the POSTed data. </p><br/><br/><p>Including the <code>username</code> and <code>api_key</code> params in the GET should solve this, like so:</p><br/><br/><pre><code>    curl --dump-header - -H "Accept: application/json"\<br/>    -H "Content-Type: application/json"  -X POST\<br/>    --data "{\"name\":\"arrrg\"}"\<br/>    "http://localhost:8000/api/mobile/thing/?username=vikingosegundo&amp;api_key=12345"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REDIRECTVIEW AND REVERS ( ) DOE N T WORK TOGETH
    </pattern>
    <template>
<![CDATA[<p>This problem is to do with trying to reverse something at import time before the URLs are ready to be reversed. This is not a problem with RedirectView itself - it would happen with anything where you tried to reverse in your urls.py file, or possibly in a file imported by it.</p><br/><br/><p>In the development version of Django, there is a function called <a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#reverse-lazy" rel="nofollow"><code>reverse_lazy</code></a> specifically to help in this situation. </p><br/><br/><p>If you're using an earlier version of Django, there is a solution here: <a href="http://stackoverflow.com/questions/1794655/reverse-django-generic-view-post-save-redirect-error-included-urlconf-doesnt-h">Reverse Django generic view, post_save_redirect; error 'included urlconf doesnt have any patterns'</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI REQUEST AND REPONS FROM DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Some starting points. First, the view you call via Ajax does not necessarily have to return a json-object: the data can also be returned as a string using <code>django.http.HttpResponse</code> (or <code>render_to_response</code>, which boils down to the same thing). This means you can also return an entirely generated template as usual.</p><br/><br/><p>Assuming your posted view is found at <code>/index/(?&lt;tab&gt;\d+)/(?&lt;match&gt;\d+)/</code> (<code>tab</code> being the tab index, <code>match</code> being the match index), your javascript could look like this:</p><br/><br/><pre><code>$("ul.tabs li").click(function() {<br/>    $("ul.tabs li").removeClass("active");     // Remove any "active" class<br/>    $(this).addClass("active");                // Add "active" class to this tab<br/>    $(".tab_content").hide();                  // Hide all tab content<br/><br/>    // Construct the url based on the current index<br/>    match_name = $("ul.match li").index($("ul.match li.active"));<br/>    url = "/index/" + $("ul.tabs li").index($(this)) + "/" + match_name + "/";<br/><br/>    // Asynchronous ajax call to 'url'<br/>    new $.ajax({<br/>        url: url,<br/>        async: true,<br/>        // The function below will be reached when the request has completed<br/>        success: function(transport)<br/>        {<br/>            $(".tab_content").html(transport); // Put data in the div<br/>            $(".tab_content").fadeIn();        // Fade in the active content<br/>        }<br/>    });<br/>});<br/></code></pre><br/><br/><p>I didn't test this, but something along these lines should do. Note that for this to work with your current code, you view's <code>index</code> function needs to allow for a parameter. If you just want to test it with the same page for each tab, make the url look like this: <code>url = "/index/";</code> so that it'll most likely work right away.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETUP.PI INSTAL ACCESS DENI
    </pattern>
    <template>
<![CDATA[<p>Did you try this simple method (actually the easiest of them all when it comes to installing).</p><br/><br/><ol><br/><li>Open a DOS shell (start->Run...>cmd)</li><br/><li>cd to the directory you extracted django to (e.g. <code>cd "My Documents\progging\python\Django-1.3"</code></li><br/><li>execute <code>python setup.py install</code> (so explicitly give python as a program, not setup.py)</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL MUTUAL REFER BETWEEN TWO CLASS AND IMPOSS TO USE FORWARD DECLAR IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can find the solution in the <a href="https://docs.djangoproject.com/en/1.3/ref/models/fields/#django.db.models.ForeignKey" rel="nofollow">docs</a>:</p><br/><br/><blockquote><br/>  <p>If you need to create a relationship on a model that has not yet been defined, you can use the name of the model, rather than the model object itself:</p><br/><br/><pre><code>class Car(models.Model):<br/>    manufacturer = models.ForeignKey('Manufacturer')<br/>    # ...<br/><br/>class Manufacturer(models.Model):<br/>    # ...<br/></code></pre><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY RELAT WITH USER TABL DOE NOT VALID
    </pattern>
    <template>
<![CDATA[<pre><code>from django.db import models                                                                                                                             <br/>from django.contrib.auth.models import User<br/><br/>class Topic(models.Model):<br/>    user = models.ForeignKey(User) <br/></code></pre><br/><br/><p><code>'auth.User'</code> would have worked, too.  It's not Python's library syntax, it's the Django ORM's "app.model" syntax.  But you should only pass the model as a string if you're desperately trying to solve a circular dependency.  And if you have a circular dependency, your code is eff'd.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OUT ASCII CHARACT FROM 0 TO 255 IN C DISPLAY IN A WEBPAG THROUGH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Ha, found a way for it to at least render it to the page, the characters don't display correctly but at least it renders something to the page.</p><br/><br/><p>The code is simply this:</p><br/><br/><pre><code>mystring = unicode(mystring, errors='replace')<br/></code></pre><br/><br/><p>EDIT: Found an even better way</p><br/><br/><pre><code>import chardet<br/>chartype = chardet.detect(mystring)<br/><br/># perhaps you may want to check the confidence that it is that encoding first?<br/># if chartype['confidence'] &gt; 0.5 or something<br/><br/>mystring = mystring.decode(chartype['encoding']).encode('utf-8')<br/></code></pre><br/><br/><p>Works like a charm, although some characters still seem to be missing it shows more than the previous method.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IOERROR FAIL TO WRITE DATA WHEN CLIENT CLOSE CONNECT TO DJANGO WSGI APP
    </pattern>
    <template>
<![CDATA[<p><em>[disclaimer: this is a "why it can't be easily done" explanation, not a solution]</em> </p><br/><br/><p>As @Slott pointed out, this is definitely the technically correct behavior when <code>stream.close</code> or <code>stream.write</code> is called on a closed socket. However, I understand the motivation for the question... in the context of a wsgi app, clients terminating the connection after a full or partial read is not an "exceptional" behavior, it happens all the time. For it to be left unhandled leaves the impression it was unexpected / the code was unprepared for this, when in fact it's expected, and shouldn't be worthy of note. So it'd be nice to fix.</p><br/><br/><p>The catch is that you'd have to find a way to distinguish cases different cases... </p><br/><br/><ul><br/><li><p>Situations like "client read 'Status: 304' and closed connection" or "client read all bytes and closed connection when it had requested connection should be reused" are ones where it would be appropriate to not issue any sort of logging besides a <code>log.debug()</code> call.</p></li><br/><li><p>But situtations like "client stopped reading in the middle of file because connection died when ISP router had a stroke" <em>are</em> worthy of an error being logged. Something didn't successfully complete, and any transactional state your server app builtup should be rolled back. In which case <code>IOError</code> propagating upwards is the right thing to do.</p></li><br/></ul><br/><br/><p>Such errors are only silenceable if at every place they could be raised, the code is modified to distinguish those two cases. Until then, the wsgi authors seem to have erred on the side of caution. So there isn't a quick fix for this that I know of.</p><br/><br/><hr><br/><br/><p>(Also, I should note this isn't django-specific, I use paste+pylons and have the same thing happen) </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM EXTERN FILE NOT LOAD
    </pattern>
    <template>
<![CDATA[<p>I had to make a mix of your answers in order to fix the problem but eventually it was fixed. I had to make the following modifications:</p><br/><br/><ul><br/><li>Add the '/static/' folder to STATIC_URL and STATICFILES_DIRS in the settings.py file</li><br/><li><p>Import the .js files (search.js and the jQuery source) with the following commands, in this order:</p><br/><br/><pre><code>&lt;script type="text/javascript" src="/static/jquery-1.7.1.min.js"&gt;&lt;/script&gt;<br/>&lt;script type="text/javascript" src="/static/search.js"&gt;&lt;/script&gt;<br/></code></pre></li><br/><li><p>And make the according file structure, placing the "static" file in the project's root directory.</p><br/><br/><p>i.e. <br/>Psroot:</p></li><br/><li>psApp</li><br/><li>static</li><br/><li>templates</li><br/><li>and the rest of the files (settings.py, urls.py, manage.py, etc.)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO MODEL CLASS NAM AND CORRESPOND FOREIGN KEY WITH SOUTH WITHOUT LOOS THE DATA
    </pattern>
    <template>
<![CDATA[<p>You can do this using just South.</p><br/><br/><p>For this example I have an app called <code>usergroups</code> with the following model:</p><br/><br/><pre><code>class myUser_Group(models.Model):<br/>    name = models.CharField(max_length=100)<br/></code></pre><br/><br/><p>which I assume is already under migration control with South.</p><br/><br/><p>Make the model name change:</p><br/><br/><pre><code>class MyUserGroup(models.Model):<br/>    name = models.CharField(max_length=100)<br/></code></pre><br/><br/><p>and create an empty migration from south</p><br/><br/><pre><code>$ python manage.py schemamigration usergroups model_name_change --empty<br/></code></pre><br/><br/><p>This will create a skeleton migration file for you to specify what happens. If we edit it so it looks like this (this file will be in the app_name/migrations/ folder -- usergroups/migrations/ in this case):</p><br/><br/><pre><code>import datetime<br/>from south.db import db<br/>from south.v2 import SchemaMigration<br/>from django.db import models<br/><br/>class Migration(SchemaMigration):<br/><br/>    def forwards(self, orm):<br/>        # Change the table name from the old model name to the new model name<br/>        # ADD THIS LINE (using the correct table names)<br/>        db.rename_table('usergroups_myuser_group', 'usergroups_myusergroup')<br/><br/><br/>    def backwards(self, orm):<br/>        # Provide a way to do the migration backwards by renaming the other way<br/>        # ADD THIS LINE (using the correct table names)<br/>        db.rename_table('usergroups_myusergroup', 'usergroups_myuser_group')<br/><br/><br/>    models = {<br/>        'usergroups.myusergroup': {<br/>            'Meta': {'object_name': 'MyUserGroup'},<br/>            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),<br/>            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})<br/>        }<br/>    }<br/><br/>    complete_apps = ['usergroups']<br/></code></pre><br/><br/><p>In the <code>forwards</code> method we are renaming the database table name to match what the django ORM will look for with the new model name. We reverse the change in <code>backwards</code> to ensure the migration can be stepped back if required.</p><br/><br/><p>Run the migration with no need to import/export the exisiting data:</p><br/><br/><p>$ python manage.py migrate</p><br/><br/><p>The only step remaining is to update the foreign key and many-to-many columns in the models that refer to myUser_Group and change to refer to MyUserGroup.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM FIELD LABEL TRANSLAT
    </pattern>
    <template>
<![CDATA[<p>Django provides _lazy variants of the translation functions (for example ugettext_laxy) so you can ark strings for translations at the access time (as opposed to when the translation function is called).</p><br/><br/><p>It's documented in details at <a href="https://docs.djangoproject.com/en/1.3/topics/i18n/internationalization/#lazy-translations" rel="nofollow">https://docs.djangoproject.com/en/1.3/topics/i18n/internationalization/#lazy-translations</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT ARITHMET
    </pattern>
    <template>
<![CDATA[<p>You can use the <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#divisibleby" rel="nofollow">divisibleby</a> filter with <code>forloop.counter</code>:</p><br/><br/><pre><code>{% if forloop.counter|divisibleby:"2" %}even{% else %}odd{% endif %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELS.MODEL SUPERCLASS
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes" rel="nofollow">"Abstract base classes"</a></p><br/><br/><blockquote><br/>  <p>Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put <code>abstract=True</code> in the Meta class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV CSS TO DJANGO IN DEVELOP
    </pattern>
    <template>
<![CDATA[<p>Here's how mine is setup. It sounds like you might be missing the static context processor?</p><br/><br/><p><strong>STATIC_ROOT and STATIC_URL</strong></p><br/><br/><p>In the settings.py used in development:</p><br/><br/><pre><code>STATIC_ROOT = ''<br/>STATIC_URL = '/static/'<br/></code></pre><br/><br/><p>And the settings.py used on my production server:</p><br/><br/><pre><code>STATIC_URL = '//static.MYDOMAIN.com/'<br/>STATIC_ROOT = '/home/USER/public_html/static.MYDOMAIN.com/'<br/></code></pre><br/><br/><p>So, all the static files are located in <code>static/</code>. On the production server, all these files in <code>static/</code> are collected to <code>/home/USER/public_html/static.MYDOMAIN.com/</code> where they are served by a different web server (nginx in my case) and not Django. In other words, my django application (running on Apache) never even receives requests for static assets in production.</p><br/><br/><p><strong>CONTEXT PROCESSOR</strong></p><br/><br/><p>In order for templates to have the <code>STATIC_URL</code> variable available to them, you need to use the <code>django.core.context_processors.static</code> context processor, also defined in <code>settings.py</code>:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    # other context processors....<br/>    'django.core.context_processors.static',<br/>    # other context processors....<br/>)<br/></code></pre><br/><br/><p><strong>SERVER STATIC ASSETS IN DEVELOPMENT</strong></p><br/><br/><p>Django doesn't get requests for static assets in production, however, in development we just let Django serve our static content. We use <code>staticfiles_urlpatterns</code> in <code>urls.py</code> to tell Django to serve requests for <code>static/*</code>.</p><br/><br/><pre><code>from django.contrib.staticfiles.urls import staticfiles_urlpatterns<br/># .... your url patterns are here ...<br/>urlpatterns += staticfiles_urlpatterns()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ESCAPEJ AND SIMPLEJSON
    </pattern>
    <template>
<![CDATA[<p>simplejson 2.1.0 includes a <a href="http://simplejson.readthedocs.org/en/latest/index.html#simplejson.JSONEncoderForHTML" rel="nofollow">JSONEncoderForHTML</a> encoder that does exactly what you want. To use it in your example:</p><br/><br/><pre><code>&gt;&gt;&gt; s1 = ['test', '&lt;script&gt;']<br/>&gt;&gt;&gt; simplejson.dumps(s1, cls=simplejson.encoder.JSONEncoderForHTML)<br/>'["test", "\\u003cscript\\u003e"]'<br/></code></pre><br/><br/><p>I ran into this recently where I didn't have control over the code that was generating the data structures, so I couldn't escape the strings as they were being assembled. JSONEncoderForHTML solved the problem neatly at the point of output.</p><br/><br/><p>Of course, you'll need to upgrade to simplejson 2.1.0 first -- Django comes with an older version. If you can't upgrade for some reason, the <a href="https://github.com/simplejson/simplejson/blob/master/simplejson/encoder.py#L301-326" rel="nofollow">JSONEncoderForHTML code</a> is relatively small and could probably be pulled into earlier code -- though I haven't tried this myself.</p><br/><br/><p>(BTW, if you are going to encode each string as you build the data structure, I wouldn't recommend addslashes, which I believe is more useful for SQL prep. addslashes won't protect against something like <code>'&lt;/script&gt;'</code> in one of your strings leaking into your html. You mentioned <code>escapejs</code> in your question, and that's exactly the right escape to be using for this.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECENT DJANGO EQUIVAL TO MICHAEL HARTL S RUBI ON RAIL TUTORI
    </pattern>
    <template>
<![CDATA[<p>I would like to add that if, or rather when you get specific questions the <a href="http://groups.google.com/group/django-users" rel="nofollow">django google group</a> is very active and so is the IRC channel (#django at freenode) where the community is really helpful and I never seen a "noob" question go unanswered.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A WEB APPLIC IN PYTHON WITH NEO4J
    </pattern>
    <template>
<![CDATA[<p>I dont see why not. You can integrate this with Django &amp; serve requests through it...</p><br/><br/><ol><br/><li><a href="http://blog.neo4j.org/2010/03/modeling-categories-in-graph-database.html" rel="nofollow">Modeling Categories in Graph Database</a></li><br/><li><a href="https://github.com/neo4j-examples/python-shop-categories" rel="nofollow">Neo4J shop categories example</a></li><br/><li><a href="http://stackoverflow.com/questions/5866635/neo4j-and-django-models">Neo4j and django models</a></li><br/><li><a href="http://www.slideshare.net/thobe/django-and-neo4j-domain-modeling-that-kicks-ass" rel="nofollow">Django &amp; Neo4j - domain modeling that kicks ass.</a></li><br/><li><a href="http://journal.thobe.org/2009/12/seamless-neo4j-integration-in-django.html" rel="nofollow">Seamless Django &amp; Neo4j integration</a></li><br/></ol><br/><br/><p>Hope this helps... I myself was able to integrate almost entire <a href="http://imdb.com" rel="nofollow">IMDB</a> into Neo4j &amp; serve it up through Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORTERROR CAN NOT IMPORT NAME RECEIV
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow">receiver should be imported from the dispatch module</a>:</p><br/><br/><pre><code>from django.dispatch import receiver<br/></code></pre><br/><br/><p>Note that the receiver decorator was added in only in Django 1.3. You can check your django version by:</p><br/><br/><pre><code>import django<br/>django.VERSION<br/></code></pre><br/><br/><p>edit:</p><br/><br/><p>The wrong import statement is part of the <code>__init__</code> module of the dispatch package itself, which can have gotten there by a version re-write. Delete the whole django package directory (..C:\Python27\Lib\site-packages\django) and re-install. It is a crude, but probably the best solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GULARJ WITH DJANGO CONFLICT TEMPLAT TAG
    </pattern>
    <template>
<![CDATA[<p>So I got some great help in the Angular IRC channel today.  It turns out you can change Angular's template tags very easily.  The necessary snippets below should be included after your angular include (the given example appears on their <a href="https://groups.google.com/forum/?hl=en&amp;pli=1#!searchin/angular/markup/angular/48wXpKVYwII/kOTkDhok4bcJ">mailing lists</a> and would use <code>(())</code> as the new template tags, substitute for your own):</p><br/><br/><pre><code>angular.markup('(())', function(text, textNode, parentElement){<br/>  if (parentElement[0].nodeName.toLowerCase() == 'script') return;<br/>  text = text.replace(/\(\(/g,'{{').replace(/\)\)/g, '}}');<br/>  textNode.text(text);<br/>  return angular.markup('{{}}').call(this, text, textNode, parentElement);<br/>});<br/><br/>angular.attrMarkup('(())', function(value, name, element){<br/>    value = value.replace(/\(\(/g,'{{').replace(/\)\)/, '}}');<br/>    element[0].setAttribute(name, value);<br/>    return angular.attrMarkup('{{}}').call(this, value, name, element);<br/>});<br/></code></pre><br/><br/><p>Also, I was pointed to an upcoming enhancement that will expose <code>startSymbol</code> and <code>endSymbol</code> properties that can be set to whatever tags you desire.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST.IS AJAX RETURN FALS
    </pattern>
    <template>
<![CDATA[<p>I don't know what happened to you. I tested and got a good message: "This is ajax".<br/><strong>My code:</strong></p><br/><br/><pre><code>#urls.py<br/>url(r'^$', 'myapp.views.home', name='home'),<br/>url(r'^ajax_test/$', 'myapp.views.ajax_test', name='ajax_test'),<br/><br/>#views.py<br/>def home(request):<br/>    return render_to_response('home.html',<br/>        {},<br/>        context_instance=RequestContext(request))<br/><br/>def ajax_test(request):<br/>    if request.is_ajax():<br/>        message = "This is ajax"<br/>    else:<br/>        message = "Not ajax"<br/>    return HttpResponse(message)<br/><br/>#templates/home.html<br/>&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>    &lt;title&gt;&lt;/title&gt;<br/>    &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"&gt;&lt;/script&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<br/>&lt;script type="text/javascript"&gt;<br/>$(document).ready( function() {<br/>    $.get("/ajax_test/", function(data) {<br/>        alert(data);<br/>    });<br/>});<br/>&lt;/script&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MINIM DJANGO VS FLASK
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Will it be a good idea if I go for flask as it provides the features<br/>  that I was needing in Django?</p><br/></blockquote><br/><br/><p>If there are two frameworks, one big (Django) and the other one small (Flask) and you intend to use <strong>only</strong> the subset of features common to both the natural choice is to choose smaller one.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TASTYPI HOW TO AUTHENT WITH API KEY
    </pattern>
    <template>
<![CDATA[<p>Add the username and api_key parameters to your GET variables.  Make sure that you have the </p><br/><br/><pre><code>curl http://localhost:8000/api/v1/books/?username=issackelly&amp;api_key=123456789adfljafal<br/></code></pre><br/><br/><p>Make sure to follow the other instructions from teh docs when setting it up:</p><br/><br/><h3>ApiKeyAuthentication</h3><br/><br/><p>As an alternative to requiring sensitive data like a password, the ApiKeyAuthentication allows you to collect just username &amp; a machine-generated api key. Tastypie ships with a special Model just for this purpose, so you'll need to ensure tastypie is in INSTALLED_APPS.</p><br/><br/><p><em>Tastypie includes a signal function you can use to auto-create ApiKey objects. Hooking it up looks like:</em></p><br/><br/><pre><code>from django.contrib.auth.models import User<br/>from django.db import models<br/>from tastypie.models import create_api_key<br/><br/>models.signals.post_save.connect(create_api_key, sender=User)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON PICKL OBJECT IN MYSQL DB
    </pattern>
    <template>
<![CDATA[<p>If you are trying to store the output of <code>cPickle.dumps</code> in a <code>VARCHAR</code> column, then your issue is that you are trying to store a byte-string in a character column.  The fix in that case is to encode your object as <code>unicode(base64.encode(cPickle.dumps(myobject)))</code> and then store it.</p><br/><br/><p>Alternatively: </p><br/><br/><pre><code>object2varchar = lambda obj: unicode(base64.encode(cPickle.dumps(obj)))<br/>store(object2varchar([1, 'foo']))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EIGNKEY TO ABSTRACT CLASS ( GENER RELAT )
    </pattern>
    <template>
<![CDATA[<p>For a start, use Django's <a href="https://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance" rel="nofollow">multi-table inheritance</a>, rather than the abstract model you have currently.</p><br/><br/><p>Your code would then become:</p><br/><br/><pre><code>from django.db import models<br/><br/>class Service(models.Model):<br/>    port = models.PositiveIntegerField()<br/><br/>class SSHService(Service):<br/>    username = models.CharField(max_length=64)<br/>    pkey = models.TextField()   <br/><br/>class TelnetService(Service):<br/>    username = models.CharField(max_length=64)<br/>    password = models.CharField(max_length=64)<br/><br/>class GenericTcpService(Service):<br/>    pass<br/><br/>class GenericUDPService(Service):<br/>    pass<br/><br/>class Node(models.Model):<br/>    name = models.CharField(max_length=64)<br/>    # various fields                                                                                                                                <br/>    services = models.ManyToManyField(Service)<br/></code></pre><br/><br/><p>On the database level, this will create a 'service' table, the rows of which will be linked via one to one relationships with separate tables for each child service.</p><br/><br/><p>The only difficulty with this approach is that when you do something like the following:</p><br/><br/><pre><code>node = Node.objects.get(pk=node_id)<br/><br/>for service in node.services.all():<br/>    # Do something with the service<br/></code></pre><br/><br/><p>The 'service' objects you access in the loop will be of the parent type.<br/>If you know what child type these will have beforehand, you can just access the child class in the following way:</p><br/><br/><pre><code>from django.core.exceptions import ObjectDoesNotExist<br/><br/>try:<br/>    telnet_service = service.telnetservice<br/>except (AttributeError, ObjectDoesNotExist):<br/>    # You chose the wrong child type!<br/>    telnet_service = None<br/></code></pre><br/><br/><p>If you don't know the child type beforehand, it gets a bit trickier. There are a few hacky/messy solutions, including a 'serviceType' field on the parent model, but a better way, as Joe J mentioned, is to use a 'subclassing queryset'. The InheritanceManager class from django-model-utils is probably the easiest to use. Read the documentation for it <a href="https://github.com/carljm/django-model-utils/blob/master/README.rst" rel="nofollow">here</a>, it's a really nice little bit of code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM FILTER FORM
    </pattern>
    <template>
<![CDATA[<p>Here a modification of code from the ticket form of betspire.com. This code snippet depends on having jQuery loaded.</p><br/><br/><p>Here's the javascript you need:</p><br/><br/><pre><code>    function update_select(select, data) {<br/>        select.find('option').remove();<br/>        select.append($('&lt;option value=""&gt;-------&lt;/option&gt;'));<br/>        for (var i in data) {<br/>            select.append($('&lt;option value="'+data[i][0]+'"&gt;'+data[i][1]+'&lt;/option&gt;'));<br/>        }<br/>    }<br/><br/>    $('select[name=island_group]').live('change', function(e) {<br/>        $.get(<br/>            '{% url island_name_choices_for_island_group %}',<br/>            {<br/>                'island_group': $(this).val(),<br/>            },<br/>            function(data, textStatus, jqXHR) {<br/>                update_select($('select[name=island_name]'), data);<br/>            },<br/>            'json'<br/>        );<br/>    });<br/></code></pre><br/><br/><p>Add to urls:</p><br/><br/><pre><code>url(<br/>    r'island_name/choices/$',<br/>    'island_name_choices_for_island_group', {<br/>    }, 'island_name_choices_for_island_group',<br/>),<br/></code></pre><br/><br/><p>Add to views:</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>from models import *<br/><br/>def island_name_choices_for_island_group(request, qs=None):<br/>    if qs is None:<br/>        # Change the default QS to your needs<br/>        # (you didn't specify it)<br/>        qs = Island.objects.all()<br/><br/>    if request.GET.get('island_group'):<br/>        # assuming your Island model has an FK named island_group to model IslandGroup<br/>        qs = qs.filter(island_group__pk=request.GET.get('island_group'))<br/><br/>    results = []<br/>    for choice in qs:<br/>        results.append((choice.pk, choice.name))<br/><br/>    return http.HttpResponse(simplejson.dumps(results))<br/></code></pre><br/><br/><p>Please let me know if you run in any troubble.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY A PROJECT USE LESS CSS TO HEROKU
    </pattern>
    <template>
<![CDATA[<p>The problem is that less.js loads the .less stylesheets through XHR, which doesn't work unless you set the appropriate Access-Control-Allow-Origin header, which S3 doesn't permit (https://forums.aws.amazon.com/thread.jspa?threadID=34281).</p><br/><br/><p>As a workaround some people have suggested setting up an HTTP Proxy, which adds the necessary header. (http://motoole.com/2011/10/19/hosting-font-face-fonts-on-s3.html) and (http://zefer.posterous.com/pure-html-ajax-solutions-to-upload-files-to-s)</p><br/><br/><p>Otherwise, you're going to have to compile the .less files to CSS, as less.js isn't going to work.</p><br/><br/><p>Of course, another alternative (which I use), is to simply deploy the static files to an Apache server, and not host them in S3.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SLUG FIELD IN EXIST TABL
    </pattern>
    <template>
<![CDATA[<p>Using the <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slugify" rel="nofollow"><code>slugify</code></a> template filter, you can write a script, or loop through the objects in the shell.</p><br/><br/><pre><code>&gt;&gt;&gt; from django.template.defaultfilters import slugify<br/>&gt;&gt;&gt; for obj in MyModel.objects.all():<br/>...     obj.slug = slugify(obj.title)<br/>...     obj.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF TOKEN MISS OR INCORRECT
    </pattern>
    <template>
<![CDATA[<p>My guess is that you have the tag in the template but it's not rendering anything (or did you mean you confirmed in the actual HTML that a CSRF token is being generated?)</p><br/><br/><p>Either use <code>RequestContext</code> instead of a dictionary</p><br/><br/><pre><code>render_to_response("foo.html", RequestContext(request, {}))<br/></code></pre><br/><br/><p>Or make sure you have <code>django.core.context_processors.csrf</code> in your <code>CONTEXT_PROCESSORS</code> setting.</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/</a></p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/">Or add the token to your context manually</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS BE HIT TOO MANI TIME WITH DJANGO QUERI
    </pattern>
    <template>
<![CDATA[<p>You can decide between several solutions:</p><br/><br/><ol><br/><li><p><strong>Generic relation pre-fetching</strong>, you can use <a href="http://djangosnippets.org/snippets/1079/" rel="nofollow">this snippet</a> like this <a href="https://github.com/justquick/django-activity-stream/blob/master/actstream/gfk.py" rel="nofollow">example app</a>.</p></li><br/><li><p><strong>Identity map/caching</strong>, use the content type and object id to make the key to cache the model, here is <a href="https://github.com/yourlabs/django-social/blob/master/social/notification.py#L317" rel="nofollow">an example</a> you can take the code inside <code>__getstate__</code> and <code>__setstate__</code> and make a template tag, this is the fastest solution you can find</p></li><br/><li><p><strong>Fetching relations directly</strong>, at some point you will probably need one of the solutions detailed in this <a href="http://oldblog.yourlabs.org/blog/2011/01/27/django-generic-relations-and-performances-solutions/" rel="nofollow">article about generic relation performance</a> later when you work with foreign keys.</p></li><br/><li><p><strong>Use JonhyCache</strong>, <a href="http://packages.python.org/johnny-cache/" rel="nofollow">JohnyCache</a> is a caching framework for querysets which works with the django caching abstraction. I did not personally try it yet, as the three solutions were sufficient in my projects.</p></li><br/><li><p><strong>Cache the template fragment</strong>, less hacky, it looks like <a href="https://docs.djangoproject.com/en/dev/topics/cache/#template-fragment-caching" rel="nofollow">official way to deal with this kind of issue</a> that spawns a lot of queries, and when the user changes his favorites you could <a href="http://djangosnippets.org/snippets/1593/" rel="nofollow">invalidate the cached version</a>.</p></li><br/></ol><br/><br/><p>Note that <strong>select_related() doesn't work on generic relations</strong>. This is because the related object can be in <em>any</em> table so it's impossible to make proper joins in pure sql. Generic relations are a feature from Django, not from MySQL.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CUSTOM MANAGE.PI TASK ON HEROKU IMPORT ISSU
    </pattern>
    <template>
<![CDATA[<p>You are probably using a different interpreter. </p><br/><br/><p>Check to make sure shell python is the same as the one you reference in your script /usr/bin/python .  It could be that there is a different one in your path, which would explain why it works when you run <code>python manage.py</code> but not your shell scrip which you explicitly reference <code>/usr/bin/python</code>.</p><br/><br/><hr><br/><br/><p>Typing <code>which python</code> will tell you what interpreter is being found on your path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OS.POPEN COMMAND TO A SUBPROCESS.POPEN INSTANC
    </pattern>
    <template>
<![CDATA[<p>If you take a look at the <a href="http://docs.python.org/library/subprocess.html#replacing-shell-pipeline" rel="nofollow">Replacing the shell pipeline</a> section in the documentation, you'll see that your example could be written as follows using <code>subprocess</code>:</p><br/><br/><pre><code>from subprocess import Popen, PIPE                                        <br/>p_dgst = Popen("openssl dgst -sha1 -sign /foo/1 /bar/1".split(),<br/>               stdout=PIPE)<br/>p_enc =  Popen("openssl enc -base64 -A".split(),<br/>               stdin=p_dgst.stdout, stdout.PIPE)<br/>my_value = p_enc.communicate()[0]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON ON HEROKU HTTP ONLI
    </pattern>
    <template>
<![CDATA[<p>Combining the answer from @CraigKerstiens and @allanlei into something I have tested, and verified to work. Heroku sets the HTTP_X_FORWARDED_PROTO to https when request is ssl, and we can use this to check:</p><br/><br/><pre><code>import re<br/><br/>from django.conf import settings<br/>from django.core import urlresolvers<br/>from django.http import HttpResponse, HttpResponseRedirect<br/><br/><br/>class SSLMiddleware(object):<br/><br/>    def process_request(self, request):<br/>        if not any([settings.DEBUG, request.is_secure(), request.META.get("HTTP_X_FORWARDED_PROTO", "") == 'https']):<br/>            url = request.build_absolute_uri(request.get_full_path())<br/>            secure_url = url.replace("http://", "https://")<br/>            return HttpResponseRedirect(secure_url)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER FOR DIVID FOR DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>There is not it. But if you a little hacker....</p><br/><br/><p><a href="http://slacy.com/blog/2010/07/using-djangos-widthratio-template-tag-for-multiplication-division/" rel="nofollow">http://slacy.com/blog/2010/07/using-djangos-widthratio-template-tag-for-multiplication-division/</a></p><br/><br/><p>Also you can create a filter to division in 2 minutes</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL ENCOD JPEG NOT AVAIL
    </pattern>
    <template>
<![CDATA[<p>Try downloading PIL from source, then edit setup.py adding this line:</p><br/><br/><pre><code>add_directory(library_dirs, "/usr/lib/i386-linux-gnu")<br/></code></pre><br/><br/><p>before this line (214):</p><br/><br/><pre><code>add_directory(library_dirs, "/usr/lib")<br/></code></pre><br/><br/><p>then </p><br/><br/><pre><code>sudo python setup.py install<br/></code></pre><br/><br/><p>It should work now</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON GDATA API CAN NOT GET EDIT VIDEO ENTRI
    </pattern>
    <template>
<![CDATA[<p>Krystian I've just deleted youtube video using gdata and ProgrammaticLogin()</p><br/><br/><p>Here is some steps to reproduce:</p><br/><br/><pre><code>import gdata.youtube.service<br/>yt_service = gdata.youtube.service.YouTubeService()<br/><br/>yt_service.developer_key = 'developer_key'<br/>yt_service.email = 'email'<br/>yt_service.password = 'password'<br/>yt_service.ProgrammaticLogin()<br/><br/><br/># video_id should looks like 'iu6Gq-tUsTc'<br/>uri = 'https://gdata.youtube.com/feeds/api/users/%s/uploads/%s' % (username, video_id)  <br/>entry = yt_service.GetYouTubeUserEntry(uri=uri)<br/>response = yt_service.DeleteVideoEntry(entry)<br/>print response  # True<br/></code></pre><br/><br/><p><code>yt_service.GetYouTubeVideoFeed(uri)</code> works because <code>GetYouTubeVideoFeed</code> doesn't check uri and just calls <code>self.Get(uri, ...)</code> but originaly, I think, it expected <code>'https://gdata.youtube.com/feeds/api/videos'</code> uri.</p><br/><br/><p>vice versa <code>yt_service.GetYouTubeVideoEntry()</code> use <code>YOUTUBE_VIDEO_URI = 'https://gdata.youtube.com/feeds/api/videos'</code> but this entry doesn't contains <code>rel="edit"</code> </p><br/><br/><p>Hope that helps you out</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW CAN I ADD CSS IMAG ON WEBPAG
    </pattern>
    <template>
<![CDATA[<p>You need to read the staticfiles docs more carefully.</p><br/><br/><p>You specify the absolute path to your static directory with <code>STATIC_ROOT</code> and the URL that directory can be accessed at through a browser via <code>STATIC_URL</code>. Your main static directory should <em>never</em> go in <code>STATICFILES_DIRS</code>. That setting is only to allow you to specify additional directories that should be processed while running the <code>collectstatic</code> management command.</p><br/><br/><p>In general, you <em>never</em> use your actual static directory. In development Django serves files from each app's <code>static</code> directory and any directories in <code>STATICFILES_DIRS</code> (excluding the main <code>static</code> directory). In production, you run the <code>collectstatic</code> management command and then setup your main webserver (Apache, Nginx, etc) to serve files from <code>STATIC_ROOT</code>. Django <strong>never</strong> serves anything from the main <code>static</code> directory (<code>STATIC_ROOT</code>).</p><br/><br/><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT ON THE FLI IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You can use built-in <a href="http://docs.python.org/library/functions.html#type" rel="nofollow">type function</a>:</p><br/><br/><pre><code>testobj = type('testclass', (object,), <br/>                 {'test':[a1,a2,b2], 'test2':'something else', 'test3':1})()<br/></code></pre><br/><br/><p>But in this specific case (data object for Django templates), you should use @Xion's solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN BY YEAR
    </pattern>
    <template>
<![CDATA[<p>With the new <a href="https://docs.djangoproject.com/en/dev/topics/class-based-views/">Class Based Views</a> the easies would be to use the <a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#yeararchiveview">YearArchiveView</a></p><br/><br/><pre><code>class ArticleYearArchiveView(YearArchiveView):<br/>    model = Article<br/>    paginate_by = 100<br/>    context_object_name = 'article_list'<br/>    date_field = 'date'<br/>    allow_empty = True<br/></code></pre><br/><br/><p>Allow empty is to show the page even when there's no elements for that year</p><br/><br/><p>in your <code>urls.py</code> you would need something like</p><br/><br/><pre><code>url(r'^newsitems/(?P&lt;year&gt;\d+)/$', ArticleYearArchiveView.as_view()),<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASP TO DJANGO OR ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Wow, this is exactly what we (as a company) have been through.  </p><br/><br/><p>We actually still have a big classic ASP web application running. We have circumvented the fact that plain classic ASP code can be spaghetti code by using WSCs (Windows script components, or scriptlets) to get separation of concern, which actually works great in classic ASP. We now have debugging component, internationalisation, a 3-tier architecture and no performance problems.  </p><br/><br/><p>However; as developers we wanted to 'move on' so to speak. The first thing we tried was implementing parts of our vbscript code to Python, to at least work in a modern language, but after a lot of troubles implementing Python in WSC's it was clear that WSC's and Python didn't get along well.<br><br/><a href="http://mail.python.org/pipermail/python-win32/2010-December/010951.html" rel="nofollow">My findings regarding Python and WSCs</a></p><br/><br/><p>The next logical step to try for us was moving to ASP.NET, as this is the roadmap suggested by Microsoft. We took up a C#/ASP.NET MVC course, hired a seasoned .NET developer and started implementing new projects and porting existing code to .NET.  MVC is the way to go coming from classic ASP, the "webforms" abstraction Microsoft used before ASP.NET MVC is geared towards application developers and is a terrible abstraction of the stateless web.</p><br/><br/><p>We found out that, contrary to popular belief, there is no easy way migrating from classic ASP to ASP.NET (at least not if you want to do things "right"). The language is different (VB.NET vs vbscript), there is the fact that it is completely Object Oriented, which takes a lot of understanding of you've never done OO stuff before, the framework is different (MVC), you will have to pick up on things like lambda expressions, even talking to the database is different (LINQ). There is just too much stuff you will have to pick up to be able to pull off a successful project within a year. Also, the developer we hired was an application developer and a mismatch for guiding us into ASP.NET. He knew C# syntax, but had no idea about developing a big web-project. </p><br/><br/><p>Talking to peers in the industry it became appearant that there are a lot of people that claim to be .NET developers, but in reality they are very inexperienced. .NET is taught in schools, but people just out of school know only basic stuff and need to be trained by seasoned developers and do at least a couple of projects to become useful. Also a lot of people pick up .NET themselves because it is a popular framework, and after working through a book or two can create a simple website or application. There are loads of those on every job site as well. In truth, it turned out there are very few really good (or even moderately good) .NET developers available. We have looked for an experienced one for over a year.</p><br/><br/><p>About the same time we found out the project wasn't going anywhere in .NET we also found a python developer by accident (whilst looking for more .NET developers). We decided to drop what we were doing and research Python again.  </p><br/><br/><p>We are currently implementing different projects in Django, and we have made more progress in the last 4 months than we did in a year of programming .NET. The main difference is that in .NET/Visual Studio there were a lot of things you "just had to know", locations of certain files, tools to do certain stuff, where to use lambda expressions in code, I can't give you exact examples because I've luckily already forgotten most of it.  </p><br/><br/><p>In Python there will be a lot of new stuff as well, but you will love:</p><br/><br/><ul><br/><li>The fact that it's dynamically typed, which is a lot like vbscript.</li><br/><li>I found that programming Python I can often code for half an hour<br/>without running my code, and when I DO run it in the end it works<br/>immediately. It is very intuitive.</li><br/><li>It is cross platform; you can experiment using linux as a server if need be, but IIS works as well (using <a href="http://www.helicontech.com/zoo/" rel="nofollow">Helicon Zoo</a>). </li><br/><li>Python developers seem to be more serious<br/>about their profession. .NET is commonly taught in schools, learning<br/>Python is a conscious choice. </li><br/><li>You can pick and choose webframeworks<br/>and technologies like ORMs, session layers or other layers. Django is<br/>quite rigid in this regard, but a framework like pyramid is very<br/>flexible. </li><br/><li>Python is OO, but doesn't have to be. The language in<br/>general is (maybe not syntactically, but certainly conceptually) a<br/>better match for vbscript. </li><br/><li>If or when Microsoft decides that asp.net<br/>is to be abandoned, like they did with classic ASP and (for example)<br/>Silverlight, you won't have a problem using Python.</li><br/></ul><br/><br/><p>Don't get me wrong, you will still have to learn a lot of new stuff coming from classic ASP, but in our experience the learning curve is less steep migrating to Python than to ASP.NET, and programming is a lot more fun.</p><br/><br/><p>EDIT: I have another tip for you; we can currently exchange information between the ASP and DJANGO sites using a <a href="http://drcarter.info/2011/06/memcached-component-for-classic-asp/" rel="nofollow">memcached COM component</a>. Using this you can access a memcached server from classic ASP.<br><br/>Django can use memcached as a backend, so exchanging information is possible and lightning fast between classic ASP and Django.</p><br/><br/><p>Erik</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM A MANY TO MANI INTERMEDI MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>As easy as 1,2,3 with <a href="https://docs.djangoproject.com/en/dev/topics/db/aggregation/#filtering-on-annotations" rel="nofollow">Filtering on annotations</a>:</p><br/><br/><pre><code>from django.db.models import Count<br/><br/>Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)<br/></code></pre><br/><br/><p>For curiosity, i generated the SQL from each of the ways proposed on this topic:</p><br/><br/><pre><code>In [9]: Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)<br/>DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name", COUNT("testapp_book_author"."book_id") AS "count_book" FROM "testapp_person" LEFT OUTER JOIN "testapp_book_author" ON ("testapp_person"."id" = "testapp_book_author"."person_id") GROUP BY "testapp_person"."id", "testapp_person"."name", "testapp_person"."id", "testapp_person"."name" HAVING COUNT("testapp_book_author"."book_id") &gt; 0  LIMIT 21; args=(0,)<br/>Out[9]: [&lt;Person: Person object&gt;]<br/><br/>In [10]: Person.objects.exclude(book=None)<br/>DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name" FROM "testapp_person" WHERE NOT (("testapp_person"."id" IN (SELECT U0."id" FROM "testapp_person" U0 LEFT OUTER JOIN "testapp_book_author" U1 ON (U0."id" = U1."person_id") LEFT OUTER JOIN "testapp_book" U2 ON (U1."book_id" = U2."id") WHERE (U2."id" IS NULL AND U0."id" IS NOT NULL)) AND "testapp_person"."id" IS NOT NULL)) LIMIT 21; args=()<br/>Out[10]: [&lt;Person: Person object&gt;]<br/><br/>In [11]: Person.objects.filter(pk__in=Book.objects.values_list('author').distinct())<br/>DEBUG (0.000) SELECT "testapp_person"."id", "testapp_person"."name" FROM "testapp_person" WHERE "testapp_person"."id" IN (SELECT DISTINCT U1."person_id" FROM "testapp_book" U0 LEFT OUTER JOIN "testapp_book_author" U1 ON (U0."id" = U1."book_id")) LIMIT 21; args=()<br/>Out[11]: [&lt;Person: Person object&gt;]<br/></code></pre><br/><br/><p>Maybe this can help you choose.</p><br/><br/><p>Personnaly, i prefer the version by Chris because it is the shortest. On the other hand, I don't know for sure about the impact of having subqueries which is the case for the two other ways. That said, they do demonstrate interresting QuerySet concepts:</p><br/><br/><ol><br/><li><p><strong>Annonation</strong>, is aggregation per value of the queryset. If you use aggregate(Count('book')) then you will get the total number of books. If you use annotate(Count('book')) then you get a total number of book per value of the queryset (per Person). Also, <strong>each person has a 'count_book' attribute</strong> which is pretty cool: <code>Person.objects.annotate(count_book=Count('book')).filter(count_book__gt=0)[0].count_book</code></p></li><br/><li><p><strong>Subqueries</strong>, very useful to create complex queries or optimize queries (merge querysets, generic relation prefetching for example).</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE DEFAULT DJANGO TEMPLAT SYSTEM
    </pattern>
    <template>
<![CDATA[<p>Jinja2 is very much like Django templates: <a href="http://splike.com/wiki/Convert_Django_Templates_to_Jinja2" rel="nofollow">http://splike.com/wiki/Convert_Django_Templates_to_Jinja2</a></p><br/><br/><p>Mako is very much NOT like Django.</p><br/><br/><p>Try these two and see what approach you like best.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL DESIGN
    </pattern>
    <template>
<![CDATA[<p>You could create an abstract base class and have both models inherit from it:</p><br/><br/><pre><code>class InvoiceAbstract(models.Model):<br/>    invoiceid = models.CharField(max_length=20)<br/>    totalamount = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    downpayment = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    subtotal = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    tax = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    amountdue = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    payment = models.DecimalField(max_digits=15,decimal_places=2,default=0)<br/>    originaldate = models.DateTimeField()<br/>    changedate = models.DateTimeField()<br/>    version = models.IntegerField(default=1)<br/>    operator = models.CharField(max_length=20)<br/>    class Meta:<br/>        abstract = True<br/><br/>class Invoice(InvoiceAbstract):<br/>    pass<br/>class InvoiceHistory(InvoiceAbstract):<br/>    pass<br/></code></pre><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes">https://docs.djangoproject.com/en/dev/topics/db/models/#abstract-base-classes</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LESS CSS WITH DJANGO
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p><strong>Install <a href="https://github.com/andreyfedoseev/django-less">django-less</a></strong>:</p><br/><br/><ol><br/><li>Run <code>pip install django-less</code></li><br/><li>Add <code>less</code> to INSTALLED_APPS</li><br/></ol></li><br/><li><p><strong>Install <a href="http://lesscss.org/#-client-side-usage">lessc</a> executable</strong>, either via your package manager or run <code>npm install less</code> (<strong>npm is node package manager</strong>, which should be distro-installable, use at last resort)</p></li><br/><li><p><strong>Use less in templates</strong>:</p><br/><br/><ol><br/><li><strong>Load the template tag</strong>: <code>{% load less %}</code></li><br/><li><strong>Use less template tag</strong>: <code>&lt;link rel="stylesheet" href="{{ STATIC_URL}}{% less "path/to/styles.less" %}" /&gt;</code></li><br/></ol></li><br/></ol><br/><br/><p><strong>Note that</strong> by default compiled files are saved into <code>LESS_CACHE</code> folder under your <code>STATIC_ROOT</code> (or <code>MEDIA_ROOT</code> if you have no <code>STATIC_ROOT</code> in your settings). You can change this folder name with <code>LESS_OUTPUT_DIR</code> setting. See the <a href="https://github.com/andreyfedoseev/django-less/blob/master/README.rst">README</a> for more settings.</p><br/><br/><p>I didn't try it personally but i know that <a href="http://django_compressor.readthedocs.org/en/latest/settings/">django-compressor</a> and <a href="https://github.com/dziegler/django-css">django-css</a> also supports less, installation of the former is more complicated.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPAR PASSWORD WITH RETYPEPASSWORD DURE REGISTERING CR ACCOUNT WITHOUT HAVE A FIELD RETYPPASSWORD IN MODELS.PI
    </pattern>
    <template>
<![CDATA[<p>Your need a new field on the form which is cleaned to check the passwords match, then you can remove the password checks within your view and replace with <a href="https://docs.djangoproject.com/en/dev/topics/forms/#processing-the-data-from-a-form" rel="nofollow">form.is_valid()</a>. Something like the following:</p><br/><br/><pre><code>class UsersModelForm(forms.ModelForm):<br/>    passwordrepeat = forms.PasswordInput()<br/>    class Meta:<br/>        model = Users<br/><br/>    def clean(self):<br/>        cleaned_data = self.cleaned_data<br/>        password = cleaned_data.get("password")<br/>        passwordrepeat = cleaned_data.get("passwordrepeat")<br/>        if password != passwordrepeat:<br/>            raise forms.ValidationError("Passwords must match.")<br/><br/>        return cleaned_data<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO URL WORK WITH OR WITHOUT
    </pattern>
    <template>
<![CDATA[<p>While you can accept both without doing a redirect by using:</p><br/><br/><pre><code>(r'^home/?$', 'user_home_page'),<br/></code></pre><br/><br/><p>It is not best SEO practice because it will look like you have duplicate content and your hits will be split between the two pages.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TASTYPIE. OUTPUT IN JSON TO THE BROWSER BY DEFAULT
    </pattern>
    <template>
<![CDATA[<p>Why would you need this? Tastypie has multiple result formatters: json and xml. It determines the result type by contenttype header you send to it.</p><br/><br/><p>Resource has determine_format(self, request) method. Make it always return 'text/javascript', and you won't have this problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTO CAPIT OF VERBOSE NAM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It seams like the simple workaround for this is adding a whitespace at the beginning of verbose_name. Function that performs the capitalization (capfirst) changes only the first letter. If it is a whitespace nothing will be change. Because web browsers ignore consecutive whitespaces everything will be displayed correctly.</p><br/><br/><pre><code>class TestModel(models.Model):<br/>    enb_id = models.IntegerField(null=True, verbose_name=" eNB ID", blank=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP ENGIN 2012 REFRESH
    </pattern>
    <template>
<![CDATA[<p>Django-nonrel is not dated. Yes, former developers left the project, but it has been picked up and developed on github: <a href="https://github.com/django-nonrel" rel="nofollow">https://github.com/django-nonrel</a></p><br/><br/><p>Basically you have 2 choices with running Django on GAE:<br><br/>1. Use Django-nonrel and Google AppEngine's storage. Your data will be stored in a NoSQL database, which has its limits and advantages, but you can still mostly use Django's ORM classes.<br><br/>2. Use regular Django and <a href="https://developers.google.com/cloud-sql/docs/django" rel="nofollow">Google Cloud SQL</a>. Cloud SQL is basically MySQL in the cloud: it should be very familiar for most developers</p><br/><br/><p>Google Cloud SQL is currently in preview. You can use it for free, but your database size is limited to 10Gb. The FAQ says:</p><br/><br/><blockquote><br/>  <p>We will not be billing for this service in 2011. We will give you at least 30 days' advance notice before we begin billing in the future. </p><br/></blockquote><br/><br/><p>The pricing of AppEngine's Datastore is described <a href="http://code.google.com/intl/en/appengine/docs/billing.html" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL INTO THEIR OWN FILE
    </pattern>
    <template>
<![CDATA[<p>Models must be found in module named <code>app.models</code> where <code>app</code> is an app name. So you should write in <code>__init__</code>.py file </p><br/><br/><pre><code> from model_a import * <br/> from model_b import * <br/></code></pre><br/><br/><p>Moreover --- (I had is what I had problem with) you will have to manually update <code>app_label</code> attribute for your models, so write: </p><br/><br/><pre><code> class ModelA(models.Model):<br/>      class Meta: <br/>          app_label = 'your_app'<br/></code></pre><br/><br/><p>without it app will be set incorrectly by django. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV WITHOUT USE SUDO
    </pattern>
    <template>
<![CDATA[<p>There is a bootstrap mechanism that should get you going.</p><br/><br/><p>Read: <a href="http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python" rel="nofollow">http://peak.telecommunity.com/DevCenter/EasyInstall#creating-a-virtual-python</a></p><br/><br/><p>In essence you would do this in your home directory in a unix environment:</p><br/><br/><p>Given your python is version 2.6</p><br/><br/><pre><br/><br/>    $ mkdir ~/bin<br/>    $ mkdir -p ~/lib/python2.6<br/>    $ mkdir -p ~/local/lib/python2.6/dist-packages<br/>    $ wget http://peak.telecommunity.com/dist/virtual-python.py<br/>    $ python virtual-python.py --no-site-packages<br/>    $ wget http://peak.telecommunity.com/dist/ez_setup.py<br/>    $ ~/bin/python ez_setup.py<br/>    $ ~/local/bin/easy_install virtualenv<br/>    $ ~/local/bin/virtualenv --no-site-packages thereyouare<br/><br/></pre><br/><br/><p>There may be room for optimization. I don't like the 'local' path. Just bin and lib would be nice. But it does its job.</p><br/><br/><p>Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOICEFIELD ( OR A BETTER JPA ENUM ) IN PLAY
    </pattern>
    <template>
<![CDATA[<p>Based on @SebCesbron comment this is the kind of pattern I'm using now...</p><br/><br/><pre><code>@Required<br/>@Enumerated(EnumType.STRING)<br/>public MyEnumType myenum;<br/><br/><br/>public enum MyEnumType {<br/><br/>    ENUMONE ("label one", 1),<br/>    ENUMTWO ("label two", 2);<br/><br/>    String label;<br/>    Int value;<br/><br/>    CastType(String label, Int value) {            <br/>        this.value = value;<br/>        this.label = label;<br/>    }<br/><br/>    @Override<br/>    public String toString() {<br/>        return this.label;<br/>    }<br/><br/>    public Int getValue() {<br/>        return this.value;<br/>    }<br/><br/>    public String getLabel()<br/>    {<br/>        return label;<br/>    }<br/><br/>}<br/></code></pre><br/><br/><p>Using <code>EnumType.STRING</code> the database will contain the enum item name - overriding <code>toString</code> does not affect that, because JPA uses <a href="http://java.xiruibin.com/Enum.html#name%28%29" rel="nofollow"><code>name()</code></a> which is final.</p><br/><br/><p>So wrt to my precise usecase and question:</p><br/><br/><pre><code>@Required<br/>@Enumerated(EnumType.STRING)<br/>public GenderEnum myenum;<br/><br/><br/>public enum GenderEnum {<br/><br/>    M ("Male"),<br/>    F ("Female");<br/><br/>    String label;<br/><br/>    CastType(String label) {<br/>        this.value = value;<br/>    }<br/><br/>    @Override<br/>    public String toString() {<br/>        return this.label;<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS ENGIN TO CHOOS FOR DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>If you are going to use a relational database, the most popular in the Django community seems to be PostgreSQL.  It's my personal favorite.  But, MongoDB seems to be getting pretty popular in the Python/Django community as well (I have never done a project with it, though).  There are a lot of successful projects out there on MySQL as well.  But, I personally prefer PostgreSQL 9.0 or 9.1.  Hope this helps.</p><br/><br/><p>EDIT: I didn't do that great of a job with this post.  Just want to add a couple of more considerations.</p><br/><br/><p>For the vast majority of websites, either MySQL or PostgreSQL will work fine.  Both have their strengths and weaknesses.  I suggest you google "MySQL vs. PostgreSQL"  There are a lot of hits for this search (at the time writing this, I get over 3,000,000).  Here are a few tips in doing your evaluation.</p><br/><br/><ol><br/><li>Give strong preference to more recent articles.  Try to make sure you are comparing MySQL 5.5 to PostgreSQL 9.0 or 9.1.</li><br/><li>MySQL let's you choose your storage engine.  IMO, the closes Apple to Apples comparison is InnoDB to Postgres.  </li><br/><li>Keep in mind that you may not need all of the features of InnoDB or Postgres.  You should also look at some of the other Storage engines.</li><br/></ol><br/><br/><p>Also, if you plan on using any triggers in your system, there a couple of really nasty bugs with MySQL and InnoDB related to them and ACID compliance.  Here's <a href="http://bugs.mysql.com/bug.php?id=61555" rel="nofollow">the first one</a> and here is <a href="http://bugs.mysql.com/bug.php?id=11472" rel="nofollow">another one</a>.  You may not need this functionality, just be aware of it.</p><br/><br/><p>One last thing that might make a difference to you is that with PostgreSQL you can write db functions with Python.  Here is a <a href="http://www.postgresql.org/docs/9.1/static/plpython.html" rel="nofollow">link to the docs</a> for this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON UBUNTU 11.10
    </pattern>
    <template>
<![CDATA[<p>Indeed, following the link I get the same problem, first.</p><br/><br/><pre><code>mv index.html Django-1.3.1.tar.gz<br/></code></pre><br/><br/><p>fixes it for me. Then you can continue with </p><br/><br/><pre><code>tar xzvf Django-1.3.1.tar.gz<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL S DOCSTR IN ADMIN APP
    </pattern>
    <template>
<![CDATA[<p>Not the "perfect way" you described, but there is <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/admindocs/" rel="nofollow">django.contrib.admindocs</a></p><br/><br/><p>For the "perfect way", you could make a little template filter that returns the docstring of a model, and use that in your overloads or admin/change_form.html and admin/change_list.html.</p><br/><br/><p>Correct me if I'm wrong but docstrings are not the perfect place for contents that should be localized.</p><br/><br/><p>If you have a rather short amount of text per model to localize, like one or two sentences, here's a few thoughts:</p><br/><br/><ul><br/><li>A short amount of text can be held in a python variable. </li><br/><li>A Python variable can be proxied by django.utils.translation.ugettext.</li><br/><li>A class can hold a python variable.</li><br/></ul><br/><br/><p>So I'd try something like:</p><br/><br/><pre><code>from django.utils.translation import ugettext as _<br/><br/>class Foo(models.Model):<br/>    help_text = _(u'Documentation of Foo model to localize')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS BEFOR IT DEFINIT IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>One of these models has a many to many, the other one uses Django's reverse relations (https://docs.djangoproject.com/en/dev/topics/db/queries/#following-relationships-backward)</p><br/><br/><p>So how I would set it up:</p><br/><br/><pre><code>class Menu(Container):<br/>    links = models.ManyToManyField(MenuItem)<br/><br/>class MenuItem(model.Models)<br/>    title = models.CharField(max_length=200)<br/></code></pre><br/><br/><p>Then when I wanted a MenuItem's Menus:</p><br/><br/><pre><code>menu_item_instance.menu_set.all()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONE TO MANI FORM
    </pattern>
    <template>
<![CDATA[<p>As others have pointed out you would need to create an inline formset for your view. The JS used in the admin is based on this project: <a href="http://code.google.com/p/django-dynamic-formset/" rel="nofollow">http://code.google.com/p/django-dynamic-formset/</a>. It hasn't seen many updates recently but there are examples and some usage docs in the project wiki: <a href="http://code.google.com/p/django-dynamic-formset/wiki/Usage" rel="nofollow">http://code.google.com/p/django-dynamic-formset/wiki/Usage</a> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELERI CALL FUNCTION ON TASK DONE
    </pattern>
    <template>
<![CDATA[<p>If you look <a href="http://ask.github.com/celery/faq.html#mysql-is-throwing-deadlock-errors-what-can-i-do" rel="nofollow">here</a> you will find the following:</p><br/><br/><p>Django-celery uses MySQL to keep track of all tasks/results, rabbit-mq is used as a communication bus basically. </p><br/><br/><p>What really is happening is that you are trying to fetch the <code>ASyncResult</code> of the worker while the task is still running (the task invoked an HTTP request to your server and since it didn't return yet, the db locking session from the worker is still active and the result row is still locked). When Django tries to read the task result (its state and the actual return value of the run function) it finds the row locked and issues you a warning.</p><br/><br/><p>There are a few ways to go about resolving this:</p><br/><br/><ol><br/><li><p>Set up another celery task to reap the result and chain it to your processing task. That way original task will finish, release the lock on db and the new one will acquire it, read the result in django and do whatever you need it to do. Look up celery docs on this.</p></li><br/><li><p>Don't bother at all, and simply do a POST to Django with full processing result attached as a payload, rather than trying to fetch it via db.</p></li><br/><li><p>Override on_success in your task class and POST your notification request to Django then at which point the lock should be released on the db table. </p></li><br/></ol><br/><br/><p>Notice that you need to store the whole processing result (no matter how big it is) in the return of the run method (possibly pickled). You didn't mention how big the result can be so it might make sense to actually just do scenario #2 above (which is what I would do). Alternatively I would go with #3. Also don't forget to handle on_failure method as well in your task.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL JSON OBJECT FROM DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Try this in your template:</p><br/><br/><pre><code>{% autoescape off %} <br/>  {{ encoded }}<br/>{% endautoescape %} <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR LOOP SKIP EVERI OTHER LOOP
    </pattern>
    <template>
<![CDATA[<p>You are modifying the contents of the object <code>forms</code> that you are iterating over, when you say:</p><br/><br/><pre><code>forms.remove((form,question))<br/></code></pre><br/><br/><p>According to the <a href="http://docs.python.org/tutorial/controlflow.html" rel="nofollow">Python documentation of the <code>for</code> statement</a>, this is not safe (the emphasis is mine):</p><br/><br/><blockquote><br/>  <p>The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python's for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.</p><br/>  <br/>  <p><b>It is not safe to modify the sequence being iterated over in the loop </b>(this can only happen for mutable sequence types, such as lists). If you need to modify the list you are iterating over (for example, to duplicate selected items) you must iterate over a copy. The slice notation makes this particularly convenient:</p><br/><br/><pre><code>for x in a[:]: # make a slice copy of the entire list<br/>...    if len(x) &gt; 6: a.insert(0, x)<br/></code></pre><br/></blockquote><br/><br/><p>See also this paragraph from the <a href="http://docs.python.org/reference/compound_stmts.html#the-for-statement" rel="nofollow">Python Language Reference</a> which explains exactly what is going on:</p><br/><br/><blockquote><br/>  <p>There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. <b>This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated).</b> Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. </p><br/></blockquote><br/><br/><p>There are a lot of solutions. You can follow their advice and create a copy. Another possibility is to create a new list as a result of your second <code>for</code> loop, instead of modifying <code>forms</code> directly. The choice is up to you...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEFIELD CORE FALS IN NEWFORM ADMIN
    </pattern>
    <template>
<![CDATA[<p>To get rid of "This field is required," you need to make it not required, by using blank=True (and possibly null=True as well, if it's not a CharField).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTP VERSION OR HEADER AFFECT THE VISUAL APPEAR OF A WEB PAGE
    </pattern>
    <template>
<![CDATA[<p>Have you tried View -> Zoom -> Reset on both sites?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL A MODELFORM OBJECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you were using pure Django, you'd pass the form to your template, and could then call individual fields on the form for more precise rendering, rather than using ModelForm.to_table.  You can use the following to iterate over each field and render it exactly how you want:</p><br/><br/><pre><code>{% for field in form.fields %}<br/>    &lt;div class="form-field"&gt;{{ field }}&lt;/div&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>This also affords you the ability to do conditional checks using {% if %} blocks inside the loop should you want to exclude certain fields.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT NOT RENDER CORRECTLI
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.w3.org/TR/html4/interact/forms.html#adef-selected" rel="nofollow"><code>option</code>'s <code>select</code> attribute</a> is a boolean attribute.</p><br/><br/><p>Try one of the following:</p><br/><br/><pre><code>&lt;option {% ifequal voter last_voter %}selected="selected" {% endifequal %} <br/>value='{{voter}}'&gt;{{voter}}&lt;/option&gt;<br/><br/><br/>&lt;option {% ifequal voter last_voter %}selected {% endifequal %} <br/>value='{{voter}}'&gt;{{voter}}&lt;/option&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SUPPORT MULTI VALU COOKI
    </pattern>
    <template>
<![CDATA[<p>.NETs multi-value cookies work exactly the same way as what you're doing in django using a separator.  They've just abstracted that away for you.  What you're doing is fine and proper, and I don't think Django has anything specific to 'solve' this problem.</p><br/><br/><p>I will say that you're doing the right thing, in not using multiple cookies. Keep the over-the-wire overhead down by doing what you're doing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHEN TO SERIAL A DJANGO MODEL INSTANC SIGNAL VS MODEL S SAVE METHOD
    </pattern>
    <template>
<![CDATA[<p>If it's core functionality for saving the model you'll want it as part of the save method. However, if you already have a functioning model and you want to extend it for other purposes then signals are your best bet since they allow for properly decoupled modules.</p><br/><br/><p>A good example might be that you want to add event logging to your site, so you simply listen for the signals that signify an event rather than modifying the original site code.</p><br/><br/><p>post_save() is usually best because it means the model has been successfully saved, using pre_save() doesn't guarantee that the save will be successful so shouldn't be used for anything that would depend on the save being completed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .ORDER BI ( ) ISNT WORK HOW IT SHOULD HOW I EXPECT IT TO
    </pattern>
    <template>
<![CDATA[<p>Your saving loop is wrong. You save Product outside of the loop. It should be:</p><br/><br/><pre><code>if request.method == 'POST':<br/>    PostEntries = len(request.POST)<br/>    x = 1           <br/>    while x &lt; PostEntries:<br/>            p = Product.objects.get(pk=x)<br/>            p.order = int(request.POST.get(str(x),''))<br/>            print "Itr: " + str(x)<br/>            x = x + 1<br/>            p.save() # NOTE HERE &lt;- saving in loop instead of outside<br/>    print "Product Order saved"             <br/>    return HttpResponse("Saved")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HANDL XXX.SUBMIT ( ) SAFARI DOE N T ... WHAT CAN BE DONE
    </pattern>
    <template>
<![CDATA[<p>The code would be:</p><br/><br/><pre><code>&lt;form id="setlang_form" method="post" action="{% url django.views.i18n.set_language %}"&gt;<br/>    &lt;fieldset&gt;<br/>    &lt;select name="language" onchange="formSubmit(this)"&gt;<br/>    {% for lang in interface_languages %}<br/>        &lt;option value="{{ lang.code }}" {% ifequal lang.code LANGUAGE_CODE %}selected="selected"{% endifequal %}&gt;{{ lang.name }}&lt;/option&gt;<br/>    {% endfor %}<br/>    &lt;/select&gt;<br/>    &lt;/fieldset&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>To get the value:</p><br/><br/><pre><code>function formSubmit(theForm)<br/>{<br/> .... theForm.options[theForm.selectedIndex].value<br/>}<br/></code></pre><br/><br/><p>You can do it with jquery too:</p><br/><br/><pre><code>$(document).ready(function() {<br/>    $('#lang_submit').hide()<br/>    $('#setlang_form select').change(function () { <br/>        ....     $("select option:selected").text() ....  <br/>        } <br/>    });<br/>});<br/></code></pre><br/><br/><p>Look here to know about change event with Jquery:<br/><a href="http://docs.jquery.com/Events/change" rel="nofollow">http://docs.jquery.com/Events/change</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TO INCLUD CSS ( HERE S THE TRICKI PART ) FROM A JS FILE
    </pattern>
    <template>
<![CDATA[<p>In your JS file:</p><br/><br/><pre><code>var style = document.createElement('link');<br/>style.setAttribute('rel', 'stylesheet');<br/>style.setAttribute('type', 'text/css');<br/>style.setAttribute('href', 'style.css');<br/>document.getElementsByTagName('head')[0].appendChild(style);<br/></code></pre><br/><br/><p>Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USERPROFILE... WITHOUT A PASSWORD
    </pattern>
    <template>
<![CDATA[<p>A <a href="http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users" rel="nofollow">user profile</a> (as returned by <code>django.contrib.auth.models.User.get_profile</code>) doesn't extend the User table - the model you specify as the profile model with the <code>AUTH_PROFILE_MODULE</code> setting is just a model which has a <code>ForeignKey</code> to <code>User</code>. <code>get_profile</code> and the setting are really just a convenience API for accessing an instance of a specific model which has a <code>ForeignKey</code> to a specific <code>User</code> instance.</p><br/><br/><p>As such, one option is to create a profile model in which the <code>ForeignKey</code> to <code>User</code> can be <code>null</code> and associate your <code>Photo</code> model with this profile model instead of the <code>User</code> model. This would allow you to create a profile for a non-existent user and attach a registered User to the profile at a later date.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECTS.FILT HOW EXPENS WOULD THI BE
    </pattern>
    <template>
<![CDATA[<p>filter itself doesn't execute a query, no query is executed until you explicitly fetch items from query (e.g. get), and list( query ) also executes it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON MARKDOWN TO ADDIT URLIFI LINK WHEN FORMAT PLAIN TEXT
    </pattern>
    <template>
<![CDATA[<p>I couldn't get superjoe30's regular expression to compile, so I adapted his solution to convert plain URLs (within Markdown text) to be Markdown compatible.</p><br/><br/><p>The modified filter:</p><br/><br/><pre><code>urlfinder = re.compile('^(http:\/\/\S+)')<br/>urlfinder2 = re.compile('\s(http:\/\/\S+)')<br/>@register.filter('urlify_markdown')<br/>def urlify_markdown(value):<br/>    value = urlfinder.sub(r'&lt;\1&gt;', value)<br/>    return urlfinder2.sub(r' &lt;\1&gt;', value)<br/></code></pre><br/><br/><p>Within the template:</p><br/><br/><pre><code>&lt;div&gt;<br/>    {{ content|urlify_markdown|markdown}}<br/>&lt;/div&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIM CA N T DELET AN ORACL DATABAS ROW USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>From a separate session, can you query the DBA_BLOCKERS and DBA_WAITERS data dictionary tables and post the results?  That will tell you if your session is getting blocked by a lock held by some other session, as well as what other session is holding the lock.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALUE FROM DATADICT METHOD OF A CUSTOM FORM WIDGET RETURN
    </pattern>
    <template>
<![CDATA[<p>For <code>value_from_datadict()</code> you want to return the value you expect or None.  The source in django/forms/widgets.py provides some examples.</p><br/><br/><p>But you should be able to build a DatePicker widget by just providing a <code>render</code> method:</p><br/><br/><pre><code>DATE_FORMAT = '%m/%d/%y'<br/><br/>class DatePickerWidget(widgets.Widget):<br/>    def render(self, name, value, attrs=None):<br/>        if value is None:<br/>            vstr = ''<br/>        elif hasattr(value, 'strftime'):<br/>            vstr = datetime_safe.new_datetime(value).strftime(DATE_FORMAT)<br/>        else:<br/>            vstr = value<br/>        id = "id_%s" % name<br/>        args = [<br/>            "&lt;input type=\"text\" value=\"%s\" name=\"%s\" id=\"%s\" /&gt;" % \<br/>            (vstr, name, id),<br/>            "&lt;script type=\"text/javascript\"&gt;$(\"#%s\").datepicker({dateFormat:'mm/dd/y'});&lt;/script&gt;" % id<br/>            ]<br/>        return mark_safe("\n".join(args))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARAMET TO ACTION WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>The problem is that when the pattern is matched against 'test/' the groupdict captured by the regex contains the mapping 'name' => None:</p><br/><br/><pre><code>&gt;&gt;&gt; url.match("test/").groupdict()<br/>{'name': None}<br/></code></pre><br/><br/><p>This means that when the view is invoked, using something I expect that is similar to below:</p><br/><br/><pre><code>view(request, *groups, **groupdict)<br/></code></pre><br/><br/><p>which is equivalent to:</p><br/><br/><pre><code>view(request, name = None)<br/></code></pre><br/><br/><p>for 'test/', meaning that name is assigned None rather than not assigned.</p><br/><br/><p>This leaves you with two options. You can:</p><br/><br/><ol><br/><li>Explicitly check for None in the view code which is kind of hackish.</li><br/><li>Rewrite the url dispatch rule to make the name capture non-optional and introduce a second rule to capture when no name is provided. </li><br/></ol><br/><br/><p>For example:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    (r'^test/(?P&lt;name&gt;.+)$','myview.displayName'), # note the '+' instead of the '*'<br/>    (r'^test/$','myview.displayName'),<br/>)<br/></code></pre><br/><br/><p>When taking the second approach, you can simply call the method without the capture pattern, and let python handle the default parameter or you can call a different view which delegates.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM SQL TO RETURN QUERYSET WHERE EACH OBJECT HA ADDIT PROPERTI
    </pattern>
    <template>
<![CDATA[<p>You probably want to read through <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none" rel="nofollow">the documentation for the "extra()" method</a>, which includes an example of a similar "select something else and append it onto each object" situation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER A BLOG S ACTIV ENTRI LIST. IS THI EFFICI
    </pattern>
    <template>
<![CDATA[<p>2) Yes, if settings.DEBUG is true, the raw sql queries are stored in django.db.connection.queries.</p><br/><br/><p><a href="http://blog.michaeltrier.com/2007/8/11/display-the-sql-django-orm-is-generating" rel="nofollow">http://blog.michaeltrier.com/2007/8/11/display-the-sql-django-orm-is-generating</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO RAILS FLEX HYBRID DEMO NEED PROJECT IDEA
    </pattern>
    <template>
<![CDATA[<p>If I were an employer, I would be much more impressed if you could implement the same sample application three times:</p><br/><br/><ul><br/><li>Rails/Flex</li><br/><li>Django/Flex</li><br/><li>PHP/Flex</li><br/></ul><br/><br/><p>If you use ReST, then the Flex side wouldn't need to change too much to support each server technology, and you would demonstrate that you're a versatile developer that can learn new technologies quickly. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHENEV I PUT PYTHON CODE INSID A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Instead of using a slice assignment to grow a list</p><br/><br/><p><code>embed_list[len(embed_list):] = [foo]</code></p><br/><br/><p>you should probably just do</p><br/><br/><p><code>embed_list.append(foo)</code></p><br/><br/><p>But really you should try unescaping html with a library function rather than doing it yourself.</p><br/><br/><p>That NoneType error sounds like embed.replace is None at some point, which only makes sense if your list is not a list of strings - you might want to double-check that with some asserts or something similar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGULAR EXPRESS FOR URLCHECKER HTTP WWW.GOOGLE.COM
    </pattern>
    <template>
<![CDATA[<p>Try this instead:</p><br/><br/><p><code>(r'^urlchecker/(?P&lt;url&gt;.+)$', 'mysite.main.views.urlchecker'),</code></p><br/><br/><p>This differs from yours in that:</p><br/><br/><ul><br/><li>It will take anything after 'urlcheck/', not just "word" characters.</li><br/><li>It does not force the url to end in a slash.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGULAR EXPRESS FOR THE ROOT OF A WEBSIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>What you have should work (it does for me).  Make sure it's in the top <code>urls.py</code>, and it should also be at the top of the list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RSTRIP ON FORM.CLEANED DATA I IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The <code>clean_post_data</code> shouldn't be a stand-alone function.</p><br/><br/><p>It should be a method in the form, named <code>clean</code>.  See <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation" rel="nofollow">Form and Field Validation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMWIZARD AND ADMIN APPLIC
    </pattern>
    <template>
<![CDATA[<p>There's a <em>lot</em> that you can do, but you'd need to be more specific about what you mean by "integrate a formwizard into the admin app" and "trigger several forms within the admin app."</p><br/><br/><p>The admin app at its core is basically just a wrapper around a bunch of stock ModelForms, so if you just build a formwizard using ModelForms and slap the admin styling on it, you may be 80% of the way there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COALESC PROBLEM WHEN RUN DJANGO TESTCAS
    </pattern>
    <template>
<![CDATA[<p>Sqlite does support <a href="http://www.sqlite.org/lang%5Fcorefunc.html" rel="nofollow"><code>coalesce</code></a> but requires at least two arguments.  I believe that the Postgresl implementation only requires one parameter while Sqlite requires at least two.  Perhaps you are using <code>coalesce</code> with only one parameter in Postgresql and that is breaking when moving to Sqlite?</p><br/><br/><p>Could you post the code that is failing?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.0 1.1 REWRIT OF SELF JOIN
    </pattern>
    <template>
<![CDATA[<p>I'm pretty sure that query cannot be created with the Django ORM. The new Django aggregation code is pretty flexible, but I don't think it can do exactly what you want.</p><br/><br/><p>Are you sure that query works? You seem to be missing a check that b.object_id is 1.</p><br/><br/><p>This code should work, but it's more than one line and not that efficient.</p><br/><br/><pre><code>from django.db.models import Sum<br/><br/>v_list = votes.objects.filter(object__id=1)<br/><br/>for v in v_list:<br/>    v.previous_score = votes.objects.filter(object__id=1, created_on__lte=v.created_on).aggregate(Sum('vote'))["vote__sum"]<br/></code></pre><br/><br/><p>Aggregation is only available in trunk, so you might need to update your django install before you can do this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM WITH DJANGO TAG
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.djangoproject.com/ticket/7680" rel="nofollow">http://code.djangoproject.com/ticket/7680</a></p><br/><br/><p>parse_lookup has been removed. Not sure how this will affect tagging. Might want to do some searching.  </p><br/><br/><p>Update: apparently it's been fixed in the trunk version of tagging. Download the latest SVN build of tagging.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE ON MOD PYTHON
    </pattern>
    <template>
<![CDATA[<p>Most likely, you are missing the creation of new processes. Apache will not run in a single process, but fork new processes for requests every now and then (depending on a <a href="http://httpd.apache.org/docs/2.2/mod/worker.html" rel="nofollow">dozen or so configuration parameters</a>). If you run django in each process, they will share no memory, and the results produced in one worker won't be visible to any of the others. In addition, the Apache process might terminate (on idle, or after a certain time), discarding your in-memory results.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD WAY TO UPLOAD BULK .CSV DATA INTO A WEBAPP USE DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>I would handle the random column header mapping in your script once it's uploaded. It's hard to make a "catch all" that would handle whatever the users might enter. I would have it evolve as you go and slowly build a list of one-one relations based on what your user uploads.</p><br/><br/><p>Or!</p><br/><br/><p>Check the column headers and make sure it's properly formatted and advise them how to fix it if it is not.</p><br/><br/><blockquote><br/>  <p>"Primary Email" not recognized, our<br/>  schema is "Email", "Address", "Phone",<br/>  etc.</p><br/></blockquote><br/><br/><p>You could also accept XML and this would allow you to create your own schema that they would have to adhere to. Check out <a href="http://www.xfront.com/files/tutorials.html" rel="nofollow">this tutorial</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A LIST OF PERSON WITH MORE THAN ONE HOME EACH HOME WITH MORE THAN ONE PHONE NUMBER
    </pattern>
    <template>
<![CDATA[<p>You have what appears to be three nested collections: Person, Home, Phone Number.</p><br/><br/><p>Step 1 - How would you write this in a view function?</p><br/><br/><pre><code>for p in Person.objects.all():<br/>    print "person", p<br/>    for h in p.home_address_set.all():<br/>         print " home", h<br/>         for ph in h.phone_set.all():<br/>             print "  phone", ph<br/></code></pre><br/><br/><p>Don't omit this step.  If you can't make it work in a view function, your model is wrong.  Take the time to get this part right.</p><br/><br/><p>Step 2 - Convert this into template syntax.</p><br/><br/><pre><code>{% for p on people %}<br/>    {% for h in p.home_address_set.all %}<br/>        {% fpr ph in h.phone_set.all %}<br/>        {% endfor %}<br/>    {% endfor %}<br/>{% endfor %}<br/></code></pre><br/><br/><p>The results should be the same as your view function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEWBI QUESTION COLOR BACKGROUND FOR CHARACT IN DJANGO HTTPRESPONS
    </pattern>
    <template>
<![CDATA[<p>It could be something like this:</p><br/><br/><pre><code>aString = 'abcd'<br/>newString =''<br/>colors= [0.0, 1.0, 0.5, 1.0]<br/>for i in aString:<br/>    newString = newString + '&lt;span style="background-color: rgb(0,%s,0)"&gt;%s&lt;/span&gt;'%(colors.pop(0)*255,i)<br/><br/><br/><br/>response = HttpResponse(newString)<br/></code></pre><br/><br/><p>untested</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAW SQL TO MULTIPL RELAT DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>First, can you prove the ORM is stopping your performance?  Sometimes performance problems are simply poor database design, or improper indexes.  Usually this comes from trying to force-fit Django's ORM onto a legacy database design.  Stored procedures and triggers can have adverse impact on performance -- especially when working with Django where the trigger code is expected to be in the Python model code.</p><br/><br/><p>Sometimes poor performance is an application issue.  This includes needless order-by operations being done in the database.</p><br/><br/><p>The most common performance problem is an application that "over-fetches" data.  Casually using the <code>.all()</code> method and creating large in-memory collections.  This will crush performance.  The Django query sets have to be touched as little as possible so that the query set iterator is given to the template for display.</p><br/><br/><p>Once you choose to bypass the ORM, you have to fight out the Object-Relational Impedance Mismatch problem.  Again.  Specifically, relational "navigation" has no concept of "related": it has to be a first-class fetch of a relational set using foreign keys.  To assemble a complex in-memory object model via SQL is simply hard.  Circular references make this very hard; resolving FK's into collections is hard.</p><br/><br/><p>If you're going to use raw SQL, you have two choices.</p><br/><br/><ol><br/><li><p>Eschew "select related" -- it doesn't exist -- and it's painful to implement.</p></li><br/><li><p>Invent your own ORM-like "select related" features.  A common approach is to add stateful getters that (a) check a private cache to see if they've fetched the related object and if the object doesn't exist, (b) fetch the related object from the database and update the cache.</p></li><br/></ol><br/><br/><p>In the process of inventing your own stateful getters, you'll be reinventing Django's, and you'll probably discover that it isn't the ORM layer, but a database design or an application design issue.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAILMULTIALTERN AND HTML E MAIL DISPLAY IN OUTLOOK 2003 ON WIN2003
    </pattern>
    <template>
<![CDATA[<p>I don't have an Outlook installation available to test this, so I'm wondering about the reason for the fifth line in your function.</p><br/><br/><pre><code>self.msg.content_subtype = "html"</code></pre><br/><br/><p>I don't know much about multipart email internals, but on my system that line causes both parts of the message have a content-type of text/html. Leaving it out produces a message with "Content-Type: text/plain" on the first part and "Content-Type: text/html" on the second.</p><br/><br/><p>In any case, one of the answers to the question about Java mentions changing the character set to iso-8859-1. I think you should be able to do that with django.core.mail.</p><br/><br/><p>The EmailMessage class (from which EmailMultiAlternatives inherits) has an attribute named "encoding" which sets the charset to use. By default it's None so the default charset of utf-8 (unless overridden in settings) is used instead.</p><br/><br/><p>In other words, add something like the following before the send line in the function listed in the question:</p><br/><br/><pre><code>self.msg.content_subtype = "iso-8859-1"</code></pre><br/><br/><p>Unfortunately, that will only change the encoding specified on the first part (msg_text in the function above). The function that attaches the alternative content doesn't seem to use the encoding attribute. I'm not sure it's the correct approach but I subclassed EmailMultiAlternatives to override the relevant function and it seemed to work okay.</p><br/><br/><pre><code>class EmailMultiAlternativesWithEncoding(EmailMultiAlternatives):<br/>    def _create_attachment(self, filename, content, mimetype=None):<br/>        """<br/>        Converts the filename, content, mimetype triple into a MIME attachment<br/>        object. Use self.encoding when handling text attachments.<br/>        """<br/>        if mimetype is None:<br/>            mimetype, _ = mimetypes.guess_type(filename)<br/>            if mimetype is None:<br/>                mimetype = DEFAULT_ATTACHMENT_MIME_TYPE<br/>        basetype, subtype = mimetype.split('/', 1)<br/>        if basetype == 'text':<br/>            encoding = self.encoding or settings.DEFAULT_CHARSET<br/>            attachment = SafeMIMEText(smart_str(content,<br/>                settings.DEFAULT_CHARSET), subtype, encoding)<br/>            # original text being replaced above (not last argument)<br/>            # attachment = SafeMIMEText(smart_str(content,<br/>            #     settings.DEFAULT_CHARSET), subtype, settings.DEFAULT_CHARSET)<br/>        else:<br/>            # Encode non-text attachments with base64.<br/>            attachment = MIMEBase(basetype, subtype)<br/>            attachment.set_payload(content)<br/>            Encoders.encode_base64(attachment)<br/>        if filename:<br/>            attachment.add_header('Content-Disposition', 'attachment',<br/>                                  filename=filename)<br/>        return attachment</code></pre><br/><br/><p>I'm not sure if the "smart_str(content, settings.DEFAULT_CHARSET)" part should also reference "encoding" rather than "settings.DEFAULT_CHARSET" but that's the message body handling text is written (django.core.mail.EmailMessage.message).</p><br/><br/><p>As I said, I don't have Outlook so I can't actually test the Outlook aspect but it does seem to change the charset to iso-8859-1 for both parts.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN + AJAX TABL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you like jQuery, <a href="http://bcurtu.com/?p=478" rel="nofollow">this post</a> has a neat solution for Django+Ajax pagination (doesn't directly implement sorting though).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT IFEQU COMPARISON OF DECIM
    </pattern>
    <template>
<![CDATA[<p>According to <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ifequal" rel="nofollow">this</a>, it seems you can only compare strings. I'd make my own <a href="http://www.mechanicalgirl.com/view/custom-template-tags-in-django/" rel="nofollow">template tag</a> if I were you. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP A DATABAS IN DJANGO BEFOR EVERI TEST METHOD
    </pattern>
    <template>
<![CDATA[<p>As always, solution is trivial: <code>use django.test.TestCase</code> not <code>unittest.TestCase</code>. And it works in all major versions of Django!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPROACH TO IMPLEMENT CONFIGUR APP WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I have found <a href="http://www.chipx86.com/blog/?p=261" rel="nofollow">djblets.siteconfig</a> very useful. Works great with the Admin app, and very easy to use. Highly recommended.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I RETURN THE TOTAL NUMBER OF ITEM THAT ARE RELAT TO A MODEL
    </pattern>
    <template>
<![CDATA[<p>If you're willing to use trunk, you can take advantage of the brand new annotate() QuerySet method added just a week or so ago, which solves this exact problem:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/aggregation/</a></p><br/><br/><p>If you want to stick with Django 1.0, you can achieve this in a slightly less elegant way using the select argument of the extra() QuerySet method. There's an example of exactly what you are talking about using extra() here:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none</a></p><br/><br/><p>Finally, if you need this to be really high performance you can denormalise the count in to a separate column. I've got some examples of how to do this in the unit testing part of my presentation here:</p><br/><br/><p><a href="http://www.slideshare.net/simon/advanced-django" rel="nofollow">http://www.slideshare.net/simon/advanced-django</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVERWRIT AN OBJECT SOMEON ELS HA MODIFI
    </pattern>
    <template>
<![CDATA[<p>Overwrite the save method that would first check the last timestamp:</p><br/><br/><pre><code>def save(self):<br/>    if(self.id):<br/>        foo = Foo.objects.get(pk=self.id)<br/>        if(foo.timestamp &gt; self.timestamp):<br/>            raise Exception, "trying to save outdated Foo" <br/>    super(Foo, self).save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPLAT WITHIN TEMPLATES. HOW TO AVOID RENDER TWICE
    </pattern>
    <template>
<![CDATA[<p>"This seems wasteful"  Why does it seem that way?</p><br/><br/><p>Every template is a mix of tags and text.  In your case some block of text has already been visited by a template engine.  So what?  Once it's been transformed it's just text and passes through the next template engine very, very quickly.</p><br/><br/><p>Do you have specific performance problems?  Are you not meeting your transaction throughput requirements?  Is there a specific problem?</p><br/><br/><p>Is the code too complex?  Is it hard to maintain?  Does it break all the time?</p><br/><br/><p>I think your solution is adequate.  I'm not sure template tags in dynamic content is good from a debugging point of view, but from a basic "template rendering" point of view, it is fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ONLI SERV FILE CONTAIN A SPACE
    </pattern>
    <template>
<![CDATA[<p>You have wrong patterns order in <code>urls.py</code>.</p><br/><br/><p>When you try to retrieve path <em>without</em> space it matches:</p><br/><br/><pre><code>(r'^(?P&lt;page_name&gt;\S*)$', 'Blah.content.views.index'),<br/></code></pre><br/><br/><p>not <code>static.serve</code> and of course you have not such page, But when you try to access path <em>with</em> space it matches proper <code>static.serve</code> pattern because it is more generic and allows spaces.</p><br/><br/><p>To solve this problem just swap those patterns.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A STRING AS A COMMAND IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>My previous answer was wrong -- i didn't think to test my code. This actually works, though: look at the <a href="http://docs.python.org/library/imp.html" rel="nofollow">imp</a> module.</p><br/><br/><p>To just check for the module's importability in the current sys.path:  </p><br/><br/><pre><code>try:<br/>    imp.find_module('django', sys.path)<br/>except ImportError:<br/>    print "Boo! no django for you!"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON AN INTERN SERVER ( OS.ENVIRON ( ) NOT WORK AS EXPECT )
    </pattern>
    <template>
<![CDATA[<p>In your settings you have to point go actual egg file, not directory where egg file is located. It should look something like:</p><br/><br/><pre><code>sys.path.append('/path/to/flup/egg/flup-1.0.1-py2.5.egg')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM FIELD TO INLINEFORMSET
    </pattern>
    <template>
<![CDATA[<pre><code>model = models.Progress<br/></code></pre><br/><br/><p>In the admin there will be only the fields defined in this <em>Progress</em> model. You have no fields/fieldsets option overwriting it.</p><br/><br/><p>If you want to add the new ones, there are two options:</p><br/><br/><ul><br/><li>In the model definition, add those new additional fields (make them optional!)</li><br/><li><p>In the admin model (<em>admin.TabularInline</em>), add something something like:</p><br/><br/><p>fields = ('newfield1', 'newfield2', 'newfield3')</p></li><br/></ul><br/><br/><p>Take a look at <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#fields" rel="nofollow">fields</a>, <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#fieldsets" rel="nofollow">fieldsets</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT GROUP ITEM IN THREE
    </pattern>
    <template>
<![CDATA[<p>Whenever you find yourself trying out complex code inside templates, its usually a good indication that it should be moved elsewhere. One of the alternative solutions have already been suggested, which is to move the code into your view function.</p><br/><br/><p>The other solution would be to expose the functionality via a new template tag. One of the reasons you would choose this solution over the view solution, is that you'll be able to easily re-use the code for pages that are served with different views.</p><br/><br/><pre><code>class GroupPaintingsNode(template.Node):<br/>    def __init__(self, num, varname):<br/>    	self.num, self.varname = int(num), varname<br/><br/>    def render(self, context):<br/>    	paintings = Painting.objects.all # do your fetching/filtering here.. <br/>    	l = [[] for i in range(len(paintings))]<br/>    	i = 0<br/>    	while i &lt; len(paintings):<br/>    		l[i].append([p.title for p in paintings[i:i+self.num]])<br/>    		l[i].append([p.desc for p in paintings[i:i+self.num]])<br/>    		i += self.num<br/>    	context[self.varname] = l<br/>    	return ''<br/><br/>def group_paintings(parser, token):<br/>    tokens = token.contents.split()<br/>    if len(tokens) != 4:<br/>    	raise template.TemplateSyntaxError, "'%s' tag requires three arguments" % tokens[0]<br/>    if tokens[2] != 'as':<br/>    	raise template.TemplateSyntaxError, "Second argument to '%s' tag must be 'as'" % tokens[0]<br/>    return GroupPaintingsNode(tokens[1], tokens[3])<br/>group_paintings = register.tag(group_paintings)<br/></code></pre><br/><br/><p>In template code you would use it like this:</p><br/><br/><pre><code>{% group_paintings 3 as paintings %}<br/>{% for p in paintings %}<br/>    {% for title in p.0 %} {{ title }} {% endfor %}&lt;br&gt;<br/>    {% for desc in p.1 %} {{ desc }} {% endfor %}<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CM ( PHP PYTHON )
    </pattern>
    <template>
<![CDATA[<p>I just discovered this Django project today.  Don't know how good it is, but it looks interesting!</p><br/><br/><p><a href="http://github.com/matthiask/feincms/tree/master" rel="nofollow">FeinCMS</a></p><br/><br/><p><a href="http://spinlock.ch/pub/feincms/" rel="nofollow">Screenshots</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE UNICOD MARKER IN HTML OUTPUT
    </pattern>
    <template>
<![CDATA[<p>The easiest way for you to do it would be to iterate over your email list. e.g. </p><br/><br/><pre><code>{% for email in Emails %}<br/>email,<br/>{% endfor %}<br/></code></pre><br/><br/><p>This way you (or a designer) will have a lot more control of the layout.</p><br/><br/><p>Have a look at the <a href="http://docs.djangoproject.com/en/dev/topics/templates/#topics-templates" rel="nofollow">template documentation</a> for more details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT STRUCTUR RECOMMEND STRUCTUR TO SHARE AN EXTEND AUTH USER MODEL ACROSS APP
    </pattern>
    <template>
<![CDATA[<p>Why are you extending User?  Please clarify.</p><br/><br/><p>If you're adding more information about the users, you don't need to roll your own user and auth system.  Django's version of that is quite solid. The user management is located in django.contrib.auth.</p><br/><br/><p>If you need to customize the information stored with users, first define a model such as </p><br/><br/><pre><code>class Profile(models.Model):<br/>    ...<br/>    user = models.ForeignKey("django.contrib.auth.models.User", unique=True)<br/></code></pre><br/><br/><p>and then set </p><br/><br/><pre><code>AUTH_PROFILE_MODULE = "appname.profile"<br/></code></pre><br/><br/><p>in your settings.py</p><br/><br/><p>The advantage of setting this allows you to use code like this in your views:</p><br/><br/><pre><code>def my_view(request):<br/>    profile = request.user.get_profile()<br/>    etc...<br/></code></pre><br/><br/><p>If you're trying to provide more ways for users to authenticate, you can add an auth backend.  Extend or re-implement django.contrib.auth.backends.ModelBackend and set it as<br/>your AUTHENTICATION_BACKENDS in settings.py.  </p><br/><br/><p>If you want to make use of a different permissions or groups concept than is provided by django, there's nothing that will stop you.  Django makes use of those two concepts only in django.contrib.admin (That I know of), and you are free to use some other concept for those topics as you see fit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIN TEMPLAT FOR MANYTOMANI
    </pattern>
    <template>
<![CDATA[<p>I realize now that Django is great for the administration (data entry) of a website, simple searching and template inheritance, but Django and Python are not very good for complex web applications, where data is moved back and forth between a database and an html template.  I have decided to combine Django and PHP, hopefully, applying the strengths of both.  Thanks for you help!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LAST CREAT MODEL S ROW IN MEMORI
    </pattern>
    <template>
<![CDATA[<p>You can use the cache system:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/cache/#topics-cache" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/cache/#topics-cache</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SWITCH WEB APP FROM HTML TO MARKDOWN
    </pattern>
    <template>
<![CDATA[<p>Apparently converting the old HTML to markdown is completely unnecessary. I applied the django.contrib.markup.markdown filter to my templates, and the HTML in the legacy database records was passed straight through. Markdown in non-legacy records was also rendered correctly.</p><br/><br/><p>Granted, my web application does not allow users to be modifying these fields, so it is ok to let HTML pass straight through. If this was a user-editable field, like comments or a wiki, this solution would not suffice. You would have to pass the safe parameter to the markdown template filter, which would strip out all the HTML, and some HTML to markdown conversion would be necessary for legacy posts written in HTML.</p><br/><br/><p>Another solution, in that case, would be to write a new template filter that wrapped the markdown filter. It would allow old HTML posts to pass through, but apply the safe markdown filter to non-legacy posts. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN LOOK AND FEEL IN MY OWN APPLIC
    </pattern>
    <template>
<![CDATA[<p>Are you sure you want to take every bit of admin-site's look &amp; feel??<br/>I think you would need to customize some, as in header footer etc.</p><br/><br/><p>To do that, just copy base.html from </p><br/><br/><blockquote><br/>  <p>"djangosrc/contrib/admin/templates/admin/"</p><br/></blockquote><br/><br/><p>and keep it in </p><br/><br/><blockquote><br/>  <p>"your_template_dir/admin/base.html" or<br/>  "your_template_dir/admin/mybase.html"</p><br/></blockquote><br/><br/><p>Just change whatever HTML you want to customize and keep rest as it is (like CSS and Javascript) and keep on extending this template in other templates of your application. Your view should provide what it needs to render (take a look at any django view from source) and you'll have everything what admin look &amp; feel had. More you can do by extending base_site.html in same manner.</p><br/><br/><blockquote><br/>  <p>(Note: if you keep the name<br/>  'base.html' the changes made in<br/>  html will affect Django Admin too.<br/>  As this is the way we change how<br/>  Django Admin look itself.)</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM PREVIEW HOW TO WORK WITH CLEANED DATA
    </pattern>
    <template>
<![CDATA[<p>I've never tried what you're doing here with a ModelForm before, but you might be able to use the ** operator to expand your cleaned_data dictionary into the keyword arguments expected for your Registration constructor:</p><br/><br/><pre><code>   registration = Registration (**cleaned_data)<br/></code></pre><br/><br/><p>The constructor to your model classes take keyword arguments that Django's Model meta class converts to instance-level attributes on the resulting object.  The ** operator is a calling convention that tells Python to expand your dictionary into those keyword arguments.</p><br/><br/><p>In other words...</p><br/><br/><p>What you're doing currently is tantamount to this:</p><br/><br/><pre><code>registration = Registration ({'key':'value', ...})<br/></code></pre><br/><br/><p>Which is not what you want because the constructor expects keyword arguments as opposed to a dictionary that contains your keyword arguments.</p><br/><br/><p>What you want to be doing is this</p><br/><br/><pre><code>registration = Registration (key='value', ...)<br/></code></pre><br/><br/><p>Which is analogous to this:</p><br/><br/><pre><code>registration = Registration (**{'key':'value', ...})<br/></code></pre><br/><br/><p>Again, I've never tried it, but it seems like it would work as long as you aren't doing anything fancy with your form, such as adding new attributes to it that aren't expected by your Registration constructor.  In that case you'd likely have to modify the items in the cleaned_data dictionary prior to doing this.</p><br/><br/><p>It does seem like you're losing out on some of the functionality inherent in ModelForms by going through the form preview utility, though.  Perhaps you should take your use case to the Django mailing list and see if there's a potential enhancement to this API that could make it work better with ModelForms.</p><br/><br/><p><strong>Edit</strong></p><br/><br/><p>Short of what I've described above, you can always just extract the fields from your cleaned_data dictionary "by hand" and pass those into your Registration constructor too, but with the caveat that you have to remember to update this code as you add new fields to your model.</p><br/><br/><pre><code>registration = Registration (<br/>    x=cleaned_data['x'],<br/>    y=cleaned_data['y'],<br/>    z=cleaned_data['z'],<br/>    ...<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPEN UPLOAD FILE WHILE STILL IN MEMORI IN THE FORM CLEAN METHOD
    </pattern>
    <template>
<![CDATA[<p>I'm assuming that you've bound your form to the files using:</p><br/><br/><pre><code>my_form = MyFormClass(request.POST, request.FILES)<br/></code></pre><br/><br/><p>If you have, once the form has been validated, you can access the file content itself using the request.FILES dictionary:</p><br/><br/><pre><code>if my_form.is_valid():<br/>    data = request.FILES['myfile'].read()<br/></code></pre><br/><br/><p>The request.FILES['myfile'] object is an UploadedFile object, so it supports file-like read/write operations.</p><br/><br/><p>If you need to access the file contents from within the form's <code>clean</code> method (or any method of the cleaning machinery), you are doing it right. <code>cleaned_data.get('xml_file')</code> returns an <a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/#uploadedfile-objects" rel="nofollow">UploadedFile</a> object. The <code>__str__</code> method of that object just prints out the string, which is why you see only the file name. However, you can get access to the entire contents:</p><br/><br/><pre><code>xml_file = myform.cleaned_data.get('xml_file')<br/>print xml_file.read()<br/></code></pre><br/><br/><p>This section of the docs has some great examples: <a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/http/file-uploads/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CALL CUSTOM MODEL METHOD FROM FORM CLEAN METHOD. UNBOUND METHOD
    </pattern>
    <template>
<![CDATA[<p>You can't call </p><br/><br/><pre><code>nzb_data = File.get_nzb_data(nzb_absolute)<br/></code></pre><br/><br/><p>because your using the class, not an object.</p><br/><br/><p>You have two choices.</p><br/><br/><ol><br/><li><p>Make <code>get_nzb_data</code> a <code>@classmethod</code>.  See <a href="http://docs.python.org/library/functions.html#classmethod" rel="nofollow">http://docs.python.org/library/functions.html#classmethod</a></p></li><br/><li><p>Create an instance of File and use that.  <code>temp_f= File(...)</code>.  Then <code>temp_f.get_dnb_data</code>.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOGIN MIDDLEWAR NOT WORK AS EXPECT
    </pattern>
    <template>
<![CDATA[<p>I believe I fixed it:</p><br/><br/><p>Right:</p><br/><br/><pre><code>url(r'^login/$', 'django.contrib.auth.views.login', {'template_name': 'quiz/quiz_login.html'})<br/></code></pre><br/><br/><p>Wrong:</p><br/><br/><pre><code>url(r'^login$', 'django.contrib.auth.views.login', {'template_name': 'quiz/quiz_login.html'})<br/></code></pre><br/><br/><p>Meh.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAW SQL TO DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>The code Below did the trick for me!</p><br/><br/><pre><code>def get_object_votes(self, obj, all=False):<br/>    """<br/>    Get a dictionary mapping vote to votecount<br/>    """<br/>    object_id = obj._get_pk_val()<br/>    ctype = ContentType.objects.get_for_model(obj)<br/>    queryset = self.filter(content_type=ctype, object_id=object_id)<br/><br/>    if not all:<br/>        queryset = queryset.filter(is_archived=False) # only pick active votes<br/><br/>    queryset = queryset.values('vote')<br/>    queryset = queryset.annotate(vcount=Count("vote")).order_by()<br/><br/>    votes = {}<br/><br/>    for count in queryset:<br/>        votes[count['vote']] = count['vcount']<br/><br/>    return votes<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANYFIELD OVER MULTIPL FORM FIELD IN A MODELFORM
    </pattern>
    <template>
<![CDATA[<p>Paolo Bergantino was on the right track, and helped me find it. This was the solution:</p><br/><br/><pre><code>def __init__(self, *args, **kwargs):<br/>    super(MyForm, self).__init__(*args, **kwargs)<br/><br/>    instance = kwargs.get('instance')<br/>    if instance:<br/>        self.fields['pay_tourns'].initial = [ o.id for o in instance.tournaments.all().active().pay_tourns()]<br/>        self.fields['rep_tourns'].initial = [ o.id for o in instance.tournaments.all().active().rep_tourns()]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM QUERYSET FILTER
    </pattern>
    <template>
<![CDATA[<p>I think you may need custom <a href="http://www.djangoproject.com/documentation/models/custom%5Fmanagers/" rel="nofollow">managers</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SINGL SIGN ON AND PHP SITE CROSS DOMAIN LOGIN
    </pattern>
    <template>
<![CDATA[<p>You are correct in assuming cookies from another domain cannot be accessed. However, if it's on a subdomain, you should be able to access the cookies if they're set correctly.</p><br/><br/><p>If you absolutely must have them on completely separate domains, it's going to be a bit tricky. If you can't modify the existing PHP code, you can pretty much forget it.</p><br/><br/><p>One option would be using OpenID - that may be the simplest way to tackle this, as there are OpenID libraries available for PHP and Python. OpenID would allow you to have a single-sign on like authentiction, and since it's already used on various sites it is proven and works.</p><br/><br/><p>Another option is writing a custom single sign-on system. </p><br/><br/><p>The basic idea is that when a user arrives at your site, you direct them to a login site. This can be either in the PHP or Python end of things, or separate. Here, the user will sign in, and then the login generates a secret key - this can be a hash, random string, whatever as long as it's not predictable - and the user is redirected back to the main site with the key.</p><br/><br/><p>The main site then sees the user has a key, and sends a request to the login site behind the scenes to verify the user's key. </p><br/><br/><p>Now the user is logged in at one site. When the user visits the second site, it too redirects the user to the login site. Since the user had already logged in, the login site simply redirects the user back with a new secret key, and the second site verifies it from the login site and now the user is logged in without having to input their credentials another time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER WHO HAVE USE BOTH DJANGO AND RUBI ON RAIL GIVE A LITTL COMPARISON OF USE THEM
    </pattern>
    <template>
<![CDATA[<p>Both are excellent frameworks. Though, I've found Rails to be more suited for the agile developer. For the most part, you'll run some generators to get the files you need as placeholders for your code. Things will work right away, and you just build up from these conventions. It's really flexible and has a large community, lots of innovation and interesting practices are being put into Rails. It's development cycle seems faster paced than Django.</p><br/><br/><p>After only touching the surface with Django, it has some interesting differences. As far as I know, you don't get the schema migrations like Rails has out of the box. But you get an extremely simple CRUD mechanism for your models with the extensible admin interface, which is great for testing/managing content. The entire project is documented really well, from the <a href="http://www.djangobook.com/" rel="nofollow">Django Book</a> to the vast amount of information on <a href="http://docs.djangoproject.com/" rel="nofollow">docs.djangoproject.com</a>.</p><br/><br/><p>I personally prefer the Rails way of doing things. But honestly, you need to try them both to see what works for you, and since we're talking about two very good, yet totally different frameworks, it's a tough decision to make either way. So, if you already know Ruby or Python well enough, start with what you know and just go from there. Once you understand how one works, you'll be able to evaluate the smaller differences yourself. Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IT BE HARDER TO FIND A HOST COMPANI IF I USE DJANGO WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p>Check out <a href="http://www.Djangofriendly.com" rel="nofollow">Djangofriendly.com</a> for a list of hosts that are friendly to setting up Django (not that you can't do it with many other hosts, of course).</p><br/><br/><p>Personally, I have a few Django apps hosted on <a href="http://www.webfaction.com" rel="nofollow">Webfaction</a> and they are absolutely amazing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS TO WEBDAV APACH USE PYTHON
    </pattern>
    <template>
<![CDATA[<p>You might find that the apache <a href="http://httpd.apache.org/docs/2.2/mod/mod%5Fauthn%5Fdbd.html" rel="nofollow">mod_authn_dbd</a> module gives you what you want. This module lets apache check an SQL database for authentication and authorization. You would use this directive in the <code>&lt;Location&gt;</code>, <code>&lt;Directory&gt;</code> (etc) area that you are trying to protect:</p><br/><br/><pre><code>&lt;Directory /usr/www/myhost/private&gt;<br/>    # other config ere<br/>    # mod_authn_dbd SQL query to authenticate a user<br/>    AuthDBDUserPWQuery \<br/>         "SELECT password FROM authn WHERE user = %s"<br/> &lt;/Directory&gt;<br/></code></pre><br/><br/><p>Strictly speaking, this means you're authenticating against Django's database, not against the Django app itself. Note that you have full control over the query, so you CAN combine it with other parameters in any tables to make sure the user is in good standing, or in certain groups, or whatever, before allowing the authentication.</p><br/><br/><p>You may need to fuss around a bit to make sure the hashing mechanisms used are the same in both apache and django.</p><br/><br/><p>If this doesn't suit, consider moving your authentication out of the django database into, say, an LDAP server. With a custom authentication backend (there are existing LDAP implementations for django out there), django will happily use LDAP... and LDAP auth/auth support in Apache is quite robust.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CREAT A SIMPLER LIST FROM VALUES LIST ( )
    </pattern>
    <template>
<![CDATA[<p>Use the <code>flat=True</code> construct of the django queryset: <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#values-list-fields" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#values-list-fields</a></p><br/><br/><p>From the example in the docs:</p><br/><br/><pre><code>&gt;&gt;&gt; Entry.objects.values_list('id', flat=True).order_by('id')<br/>[1, 2, 3, ...]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST FOR UNICOD AND CONVERT TO TIME ( )
    </pattern>
    <template>
<![CDATA[<p><code>datetime.combine</code> is complaining because it expects the second argument to be a <code>datetime.time</code> instance, not a string (or unicode string).</p><br/><br/><p>There are a few ways to convert your string to a <code>datetime.time</code> instance.  One way would be to use <code>datetime.strptime</code>:</p><br/><br/><pre><code>t = datetime.strptime(self.start, "%H:%M:%S").time()<br/>start = datetime.combine(self.job_record.date, t)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA FROM OTHER WEBSIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Caching with django is pretty easy,</p><br/><br/><pre><code>from django.core.cache import cache<br/>key = 'some-key'<br/>data = cache.get(key)<br/>if data is None:<br/>    # soupify the page and what not<br/>    cache.set(data, key, 60*60*8)<br/>    return render_to_response ...<br/>return render_to_response<br/></code></pre><br/><br/><p>To answer your questions, you can do this asynchronously, but then you would have to use something like django cron to update the cache ever so often. On the other hand you can write this as a standalone python script, replace the cache imported from django with memcache and it would work the same way. It would reduce some of the performance issues your site could have, and as long as you know the cache key, you can retrieve the data from the cache. </p><br/><br/><p>Like Jarret said I would read django's caching docs and memcache's docs for more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT WITH MANYTOMANI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I commented on S.Lott's post that I feel his answer is the best. He's right: if the goal is just to avoid two database hits, then you're just in for a world of unnecessary pain.</p><br/><br/><p>Reading your reference to ModelForm, however, if you are looking instead for a solution to that allows you to defer official saving in some way, you may wish to have a look at the <code>save_instance()</code> function in <code>forms.models</code>. The inner function <code>save_m2m</code> is how the delayed many-to-many save is accomplished for forms. Implementing something for models without forms would basically follow the same principle.</p><br/><br/><p>Having said that, and coming back to S.Lott's post, the case of a ModelForm and an actual Model are somewhat different. Because forms expose only a "safe" set of data to be edited in a browser ("safe" because it is filtered in some way, or excludes critical fields that a user shouldn't be editing), it is a reasonable design expectation that someone might need to add important information to the form-derived model before saving. This is why django has the <code>commit=False</code>.</p><br/><br/><p>This expectation falls down for cases where you are directly instantiating models. Here you have programmatic access to the model API, so you will probably find that using that API directly is easier to maintain and less error prone than through generalized indirection. I can understand why you are picturing the factory concept, but in this case you may find the effort to create a bullet-proof generalization for all manner of models is a complication that's just not worth it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLONE HTML PROBLEM UPDAT DOM
    </pattern>
    <template>
<![CDATA[<p>The jQuery <code>$("#...")</code> syntax will return the first matched element by exact id.  If you are cloning elements but not differentiating them by their id, this code will not work as you expect it to.</p><br/><br/><p>You can compare the differences between the following two expressions:</p><br/><br/><pre><code>alert($("#id_productos_list").size());<br/></code></pre><br/><br/><p>...and </p><br/><br/><pre><code>alert($("[id='#id_productos_list']").size());<br/></code></pre><br/><br/><p>The first expression will return either zero or one depending on the presence of an element with id "id_productos_list" in your page.  The first element in declared order wins.</p><br/><br/><p>The second expression will return zero or one or more depending on the the set of all elements with id "id_productos_list" in your page.</p><br/><br/><p>Also important to note is that it doesn't appear that the event handlers are copied over as part of the <code>clone()</code> operation.  You may need to reassign these handlers to the new elements.</p><br/><br/><pre><code>var newElement = $(selector).clone(true);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROWSER REFRESH DURE WEB DEVELOP
    </pattern>
    <template>
<![CDATA[<p>On Mac OS X you can do that using AppleScript. I did that some time ago and been using it ever since.</p><br/><br/><pre><code># Check if Firefox is running, if so refresh<br/>ps -xc|grep -sqi firefox &amp;&amp; osascript &lt;&lt;'APPLESCRIPT'<br/>tell app "Firefox" to activate<br/>tell app "System Events"<br/>   keystroke "r" using {command down}<br/>end tell<br/>APPLESCRIPT<br/><br/># Check if Safari is running, if so refresh<br/>ps -xc|grep -sq Safari &amp;&amp; osascript -e 'tell app "Safari"' -e 'activate' \<br/>-e 'do JavaScript    "window.location.reload();" in first document' -e 'end tell'<br/></code></pre><br/><br/><p>It refreshes Safari and Firefox, but as I said, it only works the mac. I've been using it on Textmate, this way every time I save a django file I also refresh the browsers. Pretty handy, but also slightly annoying when reading docs online and writing code, hehe.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AD ADDIT PROPERTI TO MODEL CLASS OBJECT
    </pattern>
    <template>
<![CDATA[<p>You should still be able to send it messagesSQL to the template after you've added elements to it via the for loop.  Python allows that sort of thing.</p><br/><br/><p>Something else that might make sense in some cases would be to give your MessageModel methods.  For instance, if you have a </p><br/><br/><pre><code>def since_date_created(self):<br/>    '''Compute the time since creation time based on self.date_created.'''<br/></code></pre><br/><br/><p>Then (assuming you have "messagesSQL" in the template), you can use the function as</p><br/><br/><pre><code>{% for msg in messagesSQL %}<br/>    {{ msg.since_date_created }}<br/>{% endfor %}<br/></code></pre><br/><br/><p>Basically, you can call any method in the model as long as you it needs no arguments passed to it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL QUESTION
    </pattern>
    <template>
<![CDATA[<p>Django has a special syntax for ForeignKey for self-joins:</p><br/><br/><pre><code>class TABLE(models.Model):<br/>    id = models.AutoField(primary_key=True)<br/>    parent = models.ForeignKey('self')<br/></code></pre><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey" rel="nofollow">Source</a> (second paragraph)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER LIST IN THE SAME WAY QUERYSET ARE ORDER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Not automatically, but with a bit of work, yes.  You need to define a comparator function (or <strong>cmp</strong> method on the model class) that can compare two model instances according to the relevant attribute.  For instance:</p><br/><br/><pre><code>class Dated(models.Model):<br/>  ...<br/>  created = models.DateTimeField(default=datetime.now)<br/><br/>  class Meta:<br/>    ordering = ('created',)<br/><br/>  def __cmp__(self, other):<br/>    try:<br/>      return cmp(self.created, other.created)<br/>    except AttributeError:<br/>      return cmp(self.created, other)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHITELIST BLACKLIST IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>I would restructure it so both lists were contained in one model.</p><br/><br/><pre><code>class PermissionList(models.Model):<br/>    setter = models.ManyToManyField(User)<br/>    email = models.EmailField(unique=True) #don't want conflicting results<br/>    permission = models.BooleanField()<br/></code></pre><br/><br/><p>Then, your lists would just be:</p><br/><br/><pre><code># whitelist<br/>PermissionList.objects.filter(permission=True)<br/># blacklist<br/>PermissionList.objects.filter(permission=False)<br/></code></pre><br/><br/><p>To check a particular user, you just add a couple functions to the model:</p><br/><br/><pre><code>class PermissionList(...):<br/>    ...<br/>    @classmethod<br/>    def is_on_whitelist(email):<br/>        return PermissionList.objects.filter(email=email, permission=True).count() &gt; 0<br/><br/>    @classmethod<br/>    def is_on_blacklist(email):<br/>        return PermissionList.objects.filter(email=email, permission=False).count() &gt; 0<br/><br/>    @classmethod<br/>    def has_permission(email):<br/>        if PermissionList.is_on_whitelist(email):<br/>            return True<br/>        if PermissionList.is_on_blacklist(email):<br/>            return False<br/>        return None<br/></code></pre><br/><br/><p>Having everything in one place is a lot simpler, and you can make more interesting queries with less work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO USE STORE MODEL INSTANC AS FORM CHOIC
    </pattern>
    <template>
<![CDATA[<pre><code>topics = forms.ModelMultipleChoiceField(queryset=BlogTopic.objects.all())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MORE EFFICI TO PARS EXTERN XML OR TO HIT THE DATABAS
    </pattern>
    <template>
<![CDATA[<p>Everyone is being very polite in answering this question: "it depends"... "you should test"... and so forth.</p><br/><br/><p>True, the question does not go into great detail about the application and network topographies involved, but if the question is even being asked, then it's likely a) the DB is "local" to the application (on the same subnet, or the same machine, or in memory), and b) the webservice is not. After all, the OP uses the phrases "external service" and "display on your own site." The phrase "parsing it once or however many times you need to each day" also suggests a set of data that doesn't exactly change every second.</p><br/><br/><p>The classic SOA myth is that the network is always available; going a step further, I'd say it's a myth that the network is always available with low latency. Unless your own internal systems are crap, sending an HTTP query across the Internet will always be slower than a query to a local DB or DB cluster. There are any number of reasons for this: number of hops to the remote server, outage or degradation issues that you can't control on the remote end, and the internal processing time for the remote web service application to analyze your request, hit its own persistence backend (aka DB), and return a result.</p><br/><br/><p>Fire up your app. Do some latency and response times to your DB. Now do the same to a remote web service. Unless your DB is also across the Internet, you'll notice a huge difference.</p><br/><br/><p>It's not at all hard for a competent technologist to scale a DB, or for you to completely remove the DB from caching using memcached and other paradigms; the latency between servers sitting near each other in the datacentre is monumentally less than between machines over the Internet (and more secure, to boot). Even if achieving this scale requires some thought, it's under your control, unlike a remote web service whose scaling and latency are totally opaque to you. I, for one, would not be too happy with the idea that the availability and responsiveness of my site are based on someone else entirely.</p><br/><br/><p>Finally, what happens if the remote web service is unavailable? Imagine a world where every request to your site involves a request over the Internet to some other site. What happens if that other site is unavailable? Do your users watch a spinning cursor of death for several hours? Do they enjoy an Error 500 while your site borks on this unexpected external dependency? </p><br/><br/><p>If you find yourself adopting an architecture whose fundamental features depend on a remote Internet call for every request, think very carefully about your application before deciding if you can live with the consequences.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT COMPAR DICTIONARI LENGTH IN IF STATEMENT
    </pattern>
    <template>
<![CDATA[<p>You could do this, using the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#length" rel="nofollow">length</a> filter and the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ifequal" rel="nofollow">ifequal</a> tag:</p><br/><br/><pre><code>{% if error_messages %}<br/>    &lt;div class="error"&gt;<br/>        {% ifequal error_messages|length 1 %}<br/>            error_messages[0]<br/>        {% else %}<br/>            Please fix the following errors:<br/>            &lt;div class="erroritem"&gt;<br/>            {% for key, value in error_messages.items %}<br/>                &lt;br&gt;{{ value }}<br/>            {% endfor %}<br/>            &lt;/div&gt;<br/>        {% endifequal %}<br/>    &lt;/div&gt;<br/>{% endif %}<br/></code></pre><br/><br/><p>Anything else will have to go down the path of <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags" rel="nofollow">custom tags and filters</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET ENUM STYLE CHOIC WORK FOR DJANGO BUT THE WHOLE TUPLET ARE APPEAR IN THE DROP DOWN
    </pattern>
    <template>
<![CDATA[<p>It looks like this is an issue in Django/appengine support.  It's documented <a href="http://code.google.com/p/google-app-engine-django/issues/detail?id=72" rel="nofollow">here</a> on the google-app-engine-django bug tracker, but it's closed as "wontfix" there.  It is also documented <a href="http://code.google.com/p/googleappengine/issues/detail?id=350" rel="nofollow">here</a> on the googleappengine bug tracker and is closed as invalid.</p><br/><br/><p>According to the <a href="http://code.google.com/appengine/docs/python/datastore/propertyclass.html#Property" rel="nofollow">docs</a>, the appengine <code>choices</code> parameter works different than the Django one.  You do not appear to be able to do what you want without creating a custom widget.  According to Guido's comment closing the googleappengine ticket, </p><br/><br/><blockquote><br/>  <p>I realize that this may cause problems<br/>  when you're trying to create a form<br/>  from the model, but the solution is to<br/>  override the form field using a custom<br/>  widget and passing the list of desired<br/>  choices to the widget.  (There's an<br/>  example of this in Rietveld, in<br/>  codereview/views.py, class<br/>  SettingForm.)</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LONG INTEG IN PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; i = 1240832864000L<br/>&gt;&gt;&gt; i<br/>1240832864000L<br/>&gt;&gt;&gt; print i<br/>1240832864000<br/>&gt;&gt;&gt; <br/>&gt;&gt;&gt; '&lt;script type="text/javascript"&gt; var num = %s; &lt;/script&gt;' % i<br/>'&lt;script type="text/javascript"&gt; var num = 1240832864000; &lt;/script&gt;'<br/></code></pre><br/><br/><p>The L only shows up when you trigger the object's <a href="http://docs.python.org/library/functions.html#repr" rel="nofollow"><code>__repr__</code></a></p><br/><br/><p>When and how are you sending this data to JavaScript? If you send it as JSON, you shouldn't have to worry about long literals or how Python displays its objects within Python.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER IN DJANGO WITHOUT MULTIPL OCCURR
    </pattern>
    <template>
<![CDATA[<p>You almost got it right...</p><br/><br/><pre><code>ParentModel.objects.filter(childmodel__in=ChildModel.objects.all()).distinct()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI CLONE FUNCTION IN FORM
    </pattern>
    <template>
<![CDATA[<p>This is a <a href="http://dev.jquery.com/ticket/3500" rel="nofollow">known jQuery bug</a>, though they claim it is fixed.<br /><br/>One option here is to use <code>.html()</code>, and clone them manually. This will not clone events and saved <code>.data</code>, which may be an issue for you. <code>.live</code> can help if you have events here.  </p><br/><br/><p>If the only thing you need is to change the names and id, a better option is to use a regular expression (this clones the events from the <em>first</em> element, mind you):</p><br/><br/><pre><code>var name = $(this).attr('name').replace(/-\d+-/,'-' + total + '-');<br/></code></pre><br/><br/><p>this will search for <code>-number-</code>, and replace it, so it finds the last number on all browsers, or <code>-0-</code> on IE.</p><br/><br/><p>Here's a working demo with alerts: <a href="http://jsbin.com/evapu" rel="nofollow">http://jsbin.com/evapu</a></p><br/><br/><p>As a side note - your code is a little messy. jQuery code should be inside <code>$(document).ready</code> (the click), you have a table with no body (no <code>&lt;tr&gt;</code>,<code>&lt;td&gt;</code> - the inputs are thrown out), and the code has some duplications.<br /><br/>Although it didn't help in this case, invalid DOM and not using the <code>ready</code> event can cause problems.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCDB ON SQL INITI DATA USE POSTGRESQL YIELD COLUMN ... DOE NOT EXIST
    </pattern>
    <template>
<![CDATA[<p>I ran a test, with the same result as you. U must use lowercase field names so it works. However, u don't have to rewrite the sql, can leave uppercase in the sql, having lowercase in the model definition and it'll work just fine! which is strange because PgSql column names are case-sensitive. On the other side, Django won't let you have two fields - one lowercase and one uppercase with the same name (probably blocked due to various db systems django works with), so...  still strange :) </p><br/><br/><p>Cannot find any background details on this issue though. Just follow the lowercase convention. Edit the model fields to lower and run your sql.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIALTERN AD A 3D WHEN SEND MAIL WITH IMAG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is only a partial solution. When I create an email in thunderbird and embed an image (it's visible when I view the message), the source looks like this:</p><br/><br/><pre><code>--------------070800070205000904000708<br/>Content-Type: text/html; charset=UTF-8<br/>Content-Transfer-Encoding: 7bit<br/><br/>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;/head&gt;<br/>&lt;body bgcolor="#ffffff" text="#000000"&gt;<br/>&lt;img alt="asdsa" src="cid:part1.08020903.07040100@grsites.com"<br/> height="38" width="150"&gt;&lt;br&gt;<br/>&lt;/body&gt;   <br/>&lt;/html&gt;<br/><br/>--------------070800070205000904000708<br/>Content-Type: image/jpeg;<br/> name="added.jpg"<br/>Content-Transfer-Encoding: base64<br/>Content-ID: &lt;part1.08020903.07040100@grsites.com&gt;<br/>Content-Disposition: inline;<br/> filename="added.jpg"<br/></code></pre><br/><br/><p>then the contents of the image follow. The URL in the image tag needs to be the Content-ID of the attached image. I'm just not sure how to specify that.</p><br/><br/><p>EDIT: It seems you can do it with the email module in the standard library instead of Django's EmailMultiAlternatives. See here: <a href="http://code.activestate.com/recipes/473810/" rel="nofollow">http://code.activestate.com/recipes/473810/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIST OF LIST PYTHON
    </pattern>
    <template>
<![CDATA[<p>Here's some code that does what you asked for. You can turn your list of pairs into a dictionary straightforwardly. Then keys that are shared can be found by intersecting the sets of keys. Finally, constructing the result dictionary is easy given the set of shared keys.</p><br/><br/><pre><code>dict_a = dict(list_a)<br/>dict_x = dict(list_x)<br/><br/>shared_keys = set(dict_a).intersection(set(dict_x))<br/><br/>result = dict((k, (dict_a[k], dict_x[k])) for k in shared_keys)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FCKEDITOR S IMAG UPLOAD AND BROWSER WITH MOD WSGI
    </pattern>
    <template>
<![CDATA[<p>Edit: Ultimately I was unhappy with this solution also so I made a <a href="http://bitbucket.org/megaman821/django-fckconnector/" rel="nofollow">Django app</a> that takes care of the file uploads and browsing.</p><br/><br/><p>This is the solution I finally hacked together after reading the fckeditor code:</p><br/><br/><pre><code>import os, sys<br/><br/>def fck_handler(environ, start_response):<br/>    path = environ['PATH_INFO']<br/>    if path.endswith(('upload.py', 'connector.py')):<br/>        sys.path.append('/#correct_path_to#/fckeditor/editor/filemanager/connectors/py/')<br/>        if path.endswith('upload.py'):<br/>            from upload import FCKeditorQuickUpload<br/>            conn = FCKeditorQuickUpload(environ)<br/>        else:<br/>            from connector import FCKeditorConnector<br/>            conn = FCKeditorConnector(environ)<br/>        try:<br/>            data = conn.doResponse()<br/>            start_response('200 Ok', conn.headers)<br/>            return data<br/>        except:<br/>            start_response("500 Internal Server Error",[("Content-type","text/html")])<br/>            return "There was an error"<br/>    else:<br/>        sys.path.append('/path_to_your_django_site/')<br/>        os.environ['DJANGO_SETTINGS_MODULE'] = 'your_django_site.settings'<br/>        import django.core.handlers.wsgi<br/>        handler = django.core.handlers.wsgi.WSGIHandler()<br/>        return handler(environ, start_response)<br/><br/>application = fck_handler<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      M2M QUERI DISTINCT USER FOR A M2M RELATIONSHIP OF A MODEL
    </pattern>
    <template>
<![CDATA[<p>Not in your current model. If you want to have explicit access to the joining table, you need to make it part of the Django object model. The docs explain how to do this:</p><br/><br/><p><a href="http://www.djangoproject.com/documentation/models/m2m_intermediary/" rel="nofollow">http://www.djangoproject.com/documentation/models/m2m_intermediary/</a></p><br/><br/><p>The admin and other django.contrib* components can be configured to treat most fields the same as if they were just model.ManyToMany's. But it will take a little config. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CASE ( UPPER LOW ) ON AD DATA THROUGH DJANGO ADMIN SITE
    </pattern>
    <template>
<![CDATA[<p>If your goal is to only have things converted to upper case when saving in the admin section, you'll want to <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#adding-custom-validation-to-the-admin" rel="nofollow">create a form with custom validation</a> to make the case change:</p><br/><br/><pre><code>class MyArticleAdminForm(forms.ModelForm):<br/>    class Meta:<br/>        model = Article<br/>    def clean_name(self):<br/>        return self.cleaned_data["name"].upper()<br/></code></pre><br/><br/><p>If your goal is to always have the value in uppercase, then you should <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#overriding-predefined-model-methods" rel="nofollow">override save</a> in the model field:</p><br/><br/><pre><code>class Blog(models.Model):<br/>    name = models.CharField(max_length=100)<br/>    def save(self, force_insert=False, force_update=False):<br/>        self.name = self.name.upper()<br/>        super(Blog, self).save(force_insert, force_update)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR IN FINAL ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>What version of python are you using? Prior to 2.5 you can't have both an except clause and a finally clause in the same try block.</p><br/><br/><p>You can work around this by nesting try blocks.</p><br/><br/><pre><code>def myview(request):<br/>    try:<br/>        try:<br/>            [...]<br/>        except MyExceptionClass, e:<br/>            [...]<br/>    finally:<br/>        render_to_response(<br/>            'template.html', {}, context_instance = RequestContext(request)<br/>        )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS WITH HAVE ONETOONEFIELD CROSS DIFFER APPLIC IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>One step that can make manually resetting easier is (and avoid the dread ERROR 1217):</p><br/><br/><pre><code>SET foreign_key_checks = 0<br/></code></pre><br/><br/><p>From <a href="http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html" rel="nofollow">http://dev.mysql.com/doc/refman/5.1/en/innodb-foreign-key-constraints.html</a>:</p><br/><br/><blockquote><br/>  <p>InnoDB does not allow you to drop a<br/>  table that is referenced by a FOREIGN<br/>  KEY constraint, unless you do SET<br/>  foreign_key_checks = 0. When you drop<br/>  a table, the constraints that were<br/>  defined in its create statement are<br/>  also dropped.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET PARENT ID MAY NOT BE NULL WHEN CREAT MY DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>I created the database before I added <strong><code>blank=True, null=True</code></strong> to the <strong><code>parent</code></strong> field definition. syncdb can't deal with that type of change, so Django wasn't picking up on my changes.</p><br/><br/><p>I deleted my database and let syncdb create another and it worked fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBCLASS OBJECT OF A DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>There isn't a built-in way.</p><br/><br/><p>Perhaps the best thing to do is to define a <code>derived_type</code> field on your base class, which is set automatically on save of the derived class. You could then have a <code>get_derived</code> method on the base which checks the value of <code>derived_type</code> and returns the actual derived object.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FILEFIELD TO USER FOLDER
    </pattern>
    <template>
<![CDATA[<p>The current user is stored in the request object, and you can't get that in a model method unless you pass it in from elsewhere - which you can't do in the upload_to function.</p><br/><br/><p>So you'll need to approach this in a different manner - I would suggest doing it at the form level. You can pass the request object into the form's <code>__init__</code> method and store it in an instance attribute, where you can get to it in a custom upload handler. For documentation on upload handlers, look <a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIGG LIKE SYSTEM IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>I'd recommend taking a close look at the <a href="http://code.google.com/p/django-voting/wiki/RedditStyleVoting" rel="nofollow">django-voting project</a> on Google Code.</p><br/><br/><p>They claim to be an django implementation of "Reddit Style Voting"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATETAG FOR RENDER A SUBSET OF HTML
    </pattern>
    <template>
<![CDATA[<p>There's <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#removetags" rel="nofollow">removetags</a>, but it's a blacklisting approach which fails to remove tags when they don't look exactly like the well-formed tags Django expects, and of course since it doesn't attempt to remove attributes it is totally vulnerable to the 1,000 other ways of script-injection that don't involve the <code>&lt;script&gt;</code> tag. It's a trap, offering the illusion of safety whilst actually providing no real security at all.</p><br/><br/><p>HTML-sanitisation approaches based on regex hacking are almost inevitably a total fail. Using a real HTML parser to get an object model for the submitted content, then filtering and re-serialising in a known-good format, is generally the most reliable approach.</p><br/><br/><p>If your rich text editor outputs XHTML it's easy, just use minidom or etree to parse the document then walk over it removing all but known-good elements and attributes and finally convert back to safe XML. If, on the other hand, it spits out HTML, or allows the user to input raw HTML, you may need to use something like BeautifulSoup on it. See <a href="http://stackoverflow.com/questions/699468/python-html-sanitizer-scrubber-filter">this question</a> for some discussion.</p><br/><br/><p>Filtering HTML is a large and complicated topic, which is why many people prefer the text-with-restrictive-markup languages.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO TEMPLATETAG FILTER WITH MULTIPL ARGUMENT
    </pattern>
    <template>
<![CDATA[<p>This "smart" stuff logic should not be in the template.<br/>Build your end-of-urls in your view and then pass them to template:</p><br/><br/><pre><code>def the_view(request):<br/>  url_stuff = "custid=%s, sortid, ...." % (name.id, 2 ...)<br/><br/>  return render_to_response('template.html',<br/>    {'url_stuff':url_stuff,},<br/>    context_instance = RequestContext(request))<br/></code></pre><br/><br/><p>In template.html:</p><br/><br/><pre><code> ....<br/><br/>    &lt;a href='{{url_stuff}}'&gt;{{name}}&lt;/a&gt;<br/><br/> ....<br/></code></pre><br/><br/><p>If you need a url for a whole bunch of objects consider using <a href="http://docs.djangoproject.com/en/dev/ref/models/instances/#get-absolute-url" rel="nofollow">get_absolute_url</a> on the model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOFTWAR FOR QUICKEST ESTABLISH OF AN ONLIN PRESENC
    </pattern>
    <template>
<![CDATA[<p>You have a few choices.</p><br/><br/><ol><br/><li><p>Established blog/CMS software like <a href="http://wordpress.org/" rel="nofollow">Wordpress</a>/<a href="http://www.joomla.org/" rel="nofollow">Joomla</a>/<a href="http://drupal.org/" rel="nofollow">Drupal</a>. You can do almost everything with plugins.</p></li><br/><li><p>If you need something more flexible use one of frameworks like <a href="http://rubyonrails.org/" rel="nofollow">ROR</a>, <a href="http://www.djangoproject.com/" rel="nofollow">Django</a>, <a href="http://codeigniter.com/" rel="nofollow">CodeIgniter</a>, <a href="http://framework.zend.com/" rel="nofollow">Zend</a> etc</p></li><br/><li><p>Use code generator tool like <a href="http://www.xlinesoft.com/phprunner/" rel="nofollow">PHPRunner</a>. </p></li><br/></ol><br/><br/><p>Really depends on what you familiar with. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPTIM THI MYSQL QUERI
    </pattern>
    <template>
<![CDATA[<p>First of all, the SQL is badly formatted. The most obvious error is the line splitting before each <code>AS</code> clause. Second obvious problem is using implicit joins instead of explicitly using <code>INNER JOIN ... ON ...</code>.</p><br/><br/><p>Now to answer the actual question. </p><br/><br/><p>Without knowing the data or the environment, the first thing I'd look at would be some of the MySQL server settings, such as <code>sort_buffer</code> and <code>key_buffer</code>. If you haven't changed any of these, go read up on them. The defaults are extremely conservative and can often be raised more than ten times their default, particularly on the large iron like you have. </p><br/><br/><p>Having reviewed that, I'd be running pieces of the query to see speed and what <code>EXPLAIN</code> says. The effect of indexing can be profound, but MySQL has a "fingers-and-toes" problem where it just can't use more than one per table. And <code>JOIN</code>s with filtering can need two. So it has to descend to a rowscan for the other check. But having said that, dicing up the query and trying different combinations will show you where it starts stumbling.</p><br/><br/><p>Now you will have an idea where a "tipping point" might be: this is where a small increase in some raw data size, like how much it needs to extract, will result in a big loss of performance as some internal structure gets too big. At this point, you will probably want to raise the temporary tables size. Beware that this kind of optimization is a bit of a black art. :-)</p><br/><br/><p>However, there is another approach: denormalization. In a simple implementation, regularly scheduled scripts will run this expensive query from time-to-time and poke the data into a separate table in a structure much closer to what you want to display. There are multiple variations of this approach. It can be possible to keep this up-to-date on-the-fly, either in the application, or using table triggers. At the other extreme, you could allow your application to run the expensive query occasionally, but cache the result for a little while. This is most effective if a lot of people will call it often: even 2 seconds cache on a request that is run 15 times a second will show a visible improvement. </p><br/><br/><p>You could find ways of producing the same data by running half-a-dozen queries that each return some of the data, and post-processing the data. You could also run version of your original query that returns more data (which is likely to be much faster because it does less filtering) and post-process that. I have found several times that five simpler, smaller queries can be much faster - an order of magnitude, sometimes two - than one big query that is trying to do it all.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEDIAN AGGREG FUNCTION IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Because median isn't a SQL aggregate. See, for example, the <a href="http://www.postgresql.org/docs/8.3/static/functions-aggregate.html" rel="nofollow">list of PostgreSQL aggregate functions</a> and <a href="http://dev.mysql.com/doc/refman/5.0/en/group-by-functions.html" rel="nofollow">the list of MySQL aggregate functions</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FUNCTION FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>If that field <code>tags</code> means what I think it means, i.e. you plan to store a string which concatenates multiple tags for an item, then you might need full-text search on it... but it's a bad design; rather, you should have a many-many relationship between items and a tags table (in another table, ItemTag or something, with 2 foreign keys that are the primary keys of the items table and tags table).</p><br/><br/><p>I can't tell whether you need full-text search on <code>description</code> as I have no indication of what it is -- nor whether you need the reasonable but somewhat rudimentary full-text search that MySQL 5.1 and PostgreSQL 8.3 provide, or the more powerful one in e.g. sphinx... maybe talk a bit more about the context of your app and why you're considering full-text search?</p><br/><br/><p>Edit: so it seems the only possible need for full-text search might be on <code>description</code>, and that looks like it's probably limited enough that either MySQL 5.1 or PostgreSQL 8.3 will serve it well. Me, I have a sweet spot for PostgreSQL (even though I'm reasonably expert at MySQL too), but that's a general preference, not specifically connected to full-text search issues. <a href="http://www.espace.com.eg/blog/2009/02/15/full-text-search-postgresql-beats-mysql/" rel="nofollow">This blog</a> does provide one reason to prefer PostgreSQL: you can have full-text search and still be transactional, while in MySQL full-text indexing only work on MyISAM tables, not InnoDB [[except if you add sphinx, of course]] (also see <a href="http://www.espace.com.eg/blog/2009/03/15/postgresql-an-ultimate-strategy-for-full-text-search/" rel="nofollow">this follow-on</a> for a bit more on full-text search in PostgreSQL and Lucene). Still, there are of course other considerations involved in picking a DB, and I don't think you'll be doing terribly with either (unless having to add sphinx for full-text plus transaction is a big problem).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSACTION.COMMIT ON SUCCESS NOT ROLL BACK TRANSACT
    </pattern>
    <template>
<![CDATA[<p>From <a href="http://docs.djangoproject.com/en/dev/ref/databases/" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/databases/</a>:</p><br/><br/><p>"The default engine is MyISAM [1]. The main drawback of MyISAM is that it doesn't currently support transactions or foreign keys. On the plus side, it's currently the only engine that supports full-text indexing and searching.</p><br/><br/><p>"The InnoDB engine is fully transactional and supports foreign key references."</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LARG LIST WITH POTENTI CONDIT IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>You could define a little inline function:</p><br/><br/><pre><code>def EntryMatches(e):<br/>  if use_currency and not (e.currency == currency):<br/>    return False<br/>  if use_category and not (e.category == category):<br/>    return False<br/>  return True<br/></code></pre><br/><br/><p>then</p><br/><br/><pre><code>totals['quantity'] = sum([e.quantity for e in entries if EntryMatches(e)])<br/></code></pre><br/><br/><p>EntryMatches() will have access to all variables in enclosing scope, so no need to pass in any more arguments. You get the advantage that all of the logic for which entries to use is in one place, you still get to use the list comprehension to make the sum() more readable, but you can have arbitrary logic in EntryMatches() now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DROPDOWN AUTO SUBMIT
    </pattern>
    <template>
<![CDATA[<p>Alex's answer is a good route to go, but here's an alternative.  Django and slugs go together rather well.  And unobtrusive javascript with jquery is hip at the moment.</p><br/><br/><p>Instead of POSTing a value, you could simply navigate to a well-constructed URL.  This has the added benefit of making the pages more SEO friendly, letting people bookmark the page, and also avoiding that silly error about POST'ed information when someone clicks the back button.</p><br/><br/><p>Note that in either bit of code, Alex's or mine, the navigation will break if javascript is disabled on the client browser.  It'd be a good idea to provide some footer links to whatever this combo box does somewhere on the page (the bottom maybe).</p><br/><br/><p><em>(untested, might need some slight tweaks)</em></p><br/><br/><pre><code>&lt;!-- you'll need jquery to make this work --&gt;<br/>&lt;script type="text/javascript"&gt;<br/>     $(function() {<br/>          // navigate to page on click event<br/>          $('#nav_combo').bind('change', function() { goToPage(); } );<br/>     });<br/><br/>     function goToPage() {<br/>      var baseUrl = '/your/base/url/';<br/>      window.location.href = baseUrl + $('nav_combo').val()<br/>     }<br/>&lt;/script&gt;<br/><br/>...<br/><br/>&lt;form&gt;<br/>     &lt;select id="nav_combo"&gt;<br/>          &lt;option value="page-1-slug"&gt;Page 1&lt;/option&gt;<br/>          &lt;option value="page-2-slug"&gt;Page 2&lt;/option&gt;<br/>     &lt;/select&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p><strong>Edit</strong> -- By the way, I should have mentioned you could easily use the code above plugged into django's <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-list-detail-object-detail" rel="nofollow">object_detail generic view</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORDPRESS PASSWORD HASH WORK
    </pattern>
    <template>
<![CDATA[<p>There is a comment in the implementation saying:</p><br/><br/><pre><code>  28  /**<br/>  29   * Portable PHP password hashing framework.<br/>  30   *<br/>  31   * @package phpass<br/>  32   * @version 0.1 / genuine<br/>  33   * @link http://www.openwall.com/phpass/<br/>  34   * @since 2.5<br/>  35   */<br/></code></pre><br/><br/><p>The hashing framework used is <a href="http://www.openwall.com/phpass/" rel="nofollow">phpass</a>, and its page links to a Python implementation. <a href="http://www.openwall.com/phpass/contrib/phpass-python-0.1.tar.gz" rel="nofollow">Here's the link (.tar.gz)</a>. That page has some other useful links (such as a Perl implementation).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT LANGUAG FOR PHP THAT S ALMOST SIMILAR TO THE DJANGO TEMPLAT LANGUAG
    </pattern>
    <template>
<![CDATA[<p>Yes, it is called Calypso.<br/>You can find it <a href="http://www.beberlei.de/calypso/" rel="nofollow">here</a>!</p><br/><br/><p>Enjoy!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATE TIME PROVID AS STRING IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You're probably better off parsing the string received from the webservice in your view code, and then passing the datetime.date (or string) to the template for display. The spirit of Django templates is that very little coding work should be done there; they are for presentation only, and that's why they go out of their way to prevent you from writing Python code embedded in HTML.</p><br/><br/><p>Something like:</p><br/><br/><pre><code>from datetime import datetime<br/>from django.shortcuts import render_to_response<br/><br/>def my_view(request):<br/>    ws_date_as_string = ... get the webservice date<br/>    the_date = datetime.strptime(ws_date, "%Y-%m-%d %H:%M:%S+0000")<br/>    return render_to_response('my_template.html', {'date':the_date})<br/></code></pre><br/><br/><p>As Matthew points out, this drops the timezone. If you wish to preserve the offset from GMT, try using the excellent third-party <a href="http://labix.org/python-dateutil" rel="nofollow">dateutils</a> library, which seamlessly handles parsing dates in multiple formats, with timezones, without having to provide a time format template like strptime.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT WORDWRAP AND INDENT BLOCK TEXT
    </pattern>
    <template>
<![CDATA[<p>I think your only option would be to <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/" rel="nofollow">create your own filter</a>. </p><br/><br/><p>Django's <code>django.template.defaultfilters.wordwrap</code> uses the <code>django.utils.text.wrap</code> method to wrap text. You could look at that and modify the output in any way you want.</p><br/><br/><p>But it looks like a lot of work for having slightly more readable HTML. Sometimes good enough, is...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLUGIN REMOT CHECK FOR PASSWORD WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Okay I ended up figuring it out myself, thanks though to everyone who offered help.</p><br/><br/><p>From the jQuery.Validation side, I think perhaps my methods weren't getting through or being added to the Validation modeul properly, so there was never anything wrong with Django.</p><br/><br/><p>I ended up simply putting "remote:" into my input tag, like so:</p><br/><br/><pre><code>&lt;input id="oldPassword" name="oldPassword" type="password" remote="/profile/password/check/" size="25" class="required" minlength="2" /&gt;<br/></code></pre><br/><br/><p>Then to apply validation, in a  tag:</p><br/><br/><pre><code>$("#changePassword").validate();<br/></code></pre><br/><br/><p>Then in Django:</p><br/><br/><pre><code>old_password = request.GET.get("oldPassword")<br/>request_user = User.objects.get(id=request.user.id)<br/>if(request_user.check_password(old_password) == True):<br/>    response_str = "true"<br/>return HttpResponse(response_str)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTEXT PROCESSOR TROUBL
    </pattern>
    <template>
<![CDATA[<p><code>TEMPLATE_CONTEXT_PROCESSORS</code> should contain a list of callable objects, not modules.  List the actual functions that will transform the template contexts.  <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#id1" rel="nofollow">Link to docs</a>.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS THAT REFER TO EACH OTHER
    </pattern>
    <template>
<![CDATA[<p>In python, the code in a class is run when the class is loaded.</p><br/><br/><p>Now, what the hell does that mean? ;-)</p><br/><br/><p>Consider the following code:</p><br/><br/><pre><code>class x:<br/>    print "hello"<br/>    def __init__(self): print "hello again"<br/></code></pre><br/><br/><p>When you load the module that contains the code, python will print <code>hello</code>.  Whenever you create an <code>x</code>, python will print <code>hello again</code>.</p><br/><br/><p>You can think of <code>def __init__(self): ...</code> as equivalent with <code>__init__ = lambda self: ...</code>, except none of the python lambda restrictions apply.  That is, <code>def</code> is an assignment, which might explain why code outside methods but not inside methods is run.</p><br/><br/><p>When your code says</p><br/><br/><pre><code>class X(models.Model):<br/>    creator = Registry()<br/>    creator.register(Y)<br/></code></pre><br/><br/><p>You refer to <code>Y</code> when the module is loaded, before <code>Y</code> has a value.  You can think of <code>class X</code> as an assignment (but I can't remember the syntax for creating anonymous classes off-hand; maybe it's an invocation of <code>type</code>?)</p><br/><br/><p>What you may want to do is this:</p><br/><br/><pre><code>class X(models.Model):<br/>    pass<br/>class Y(models.Model):<br/>    foo = something_that_uses_(X)<br/>X.bar = something_which_uses(Y)<br/></code></pre><br/><br/><p>That is, create the class attributes of <code>X</code> which reference <code>Y</code> after <code>Y</code> is created. Or vice versa: create <code>Y</code> first, then <code>X</code>, then the attributes of <code>Y</code> which depend on <code>X</code>, if that's easier.</p><br/><br/><p>Hope this helps :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A COMPLEX RELATIONSHIP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Why not just have both types of category in one model, so you just have 3 models?</p><br/><br/><pre><code>Site<br/><br/>Category<br/>  Sites = models.ManyToManyField(Site)<br/>  IsCommon =   models.BooleanField()<br/><br/>Item<br/>  Category = models.ForeignKey(Category)<br/></code></pre><br/><br/><p>You say "Internally, those two type of Categories are completely identical". So in sounds like this is possible. Note it is perfectly valid for a ManyToManyField to have only one value, so you don't need "ForeignKey and a ManyToMany field on the same Category model" which just sounds like a hassle. Just put only one value in the ManyToMany field</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEXMLTREEBUILD IN ELEMENTTRE
    </pattern>
    <template>
<![CDATA[<p>If you have third party module that wants to use ElementTree (and XMLTreeBuilder by dependency) you can change ElementTree's XMLTreeBuilder definition to the one provided by SimpleXMLTreeBuilder like so:</p><br/><br/><pre><code>from xml.etree import ElementTree # part of python distribution<br/>from elementtree import SimpleXMLTreeBuilder # part of your codebase<br/>ElementTree.XMLTreeBuilder = SimpleXMLTreeBuilder.TreeBuilder<br/></code></pre><br/><br/><p>Now ElementTree will always use the SimpleXMLTreeBuilder whenever it's called.</p><br/><br/><p>See also: <a href="http://groups.google.com/group/google-appengine/browse_thread/thread/b7399a91c9525c97" rel="nofollow">http://groups.google.com/group/google-appengine/browse_thread/thread/b7399a91c9525c97</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON EXCEPT WITH DIFFER INCLUD PATH
    </pattern>
    <template>
<![CDATA[<p>Why that would be a problem? exception would me matched based on class type and it would be same however it is imported e.g.</p><br/><br/><pre><code>import exceptions<br/>l=[]<br/>try:<br/>    l[1]<br/>except exceptions.IndexError,e:<br/>    print e<br/><br/>try:<br/>    l[1]<br/>except IndexError,e:<br/>    print e<br/></code></pre><br/><br/><p>both catch the same exception</p><br/><br/><p>you can even assign it to a new name, though not recommended usually</p><br/><br/><pre><code>import os<br/>os.myerror = exceptions.IndexError<br/>try:<br/>    l[1]<br/>except os.myerror,e:<br/>    print e<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LABEL FROM DJANGO S TEXTAREA WIDGET
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://docs.djangoproject.com/en/dev/ref/forms/api/#ref-forms-api-configuring-label" rel="nofollow">Django documentation on customizing labels</a> says it could be turned off with <code>auto_id</code> argument to Form constructor:</p><br/><br/><pre><code>f = ContactForm(auto_id=False)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT FROM GENER DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>The answer:</p><br/><br/><pre><code>class CommentForm(forms.Form):<br/>    comment = forms.CharField(widget=forms.Textarea(), label='')<br/></code></pre><br/><br/><p>Also, no auto_id in the constructor when creating the object, it should be left as:</p><br/><br/><pre><code>comment = new CommentForm()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATTACH A PIEC OF GET POST DATA TO EVERI SINGL REQUEST COME INTO THE SERVER FOR LOG IN USER
    </pattern>
    <template>
<![CDATA[<p>If I understand correctly, your app has two modes.  Let's call<br/>them red and blue.  User opens window 1 and selects red.  User<br/>then opens window 2 and selects blue.  If you merely used<br/>sessions, then if the user goes back to window 1 and clicks<br/>anything, the result would be blue because the previous click<br/>was blue, even though window 1 is red.</p><br/><br/><p>I suggest using mod_rewrite (or an equivalent on non-Apache<br/>servers) to modify the URL to indicate the mode.</p><br/><br/><p>Incoming request for </p><br/><br/><pre><code>example.com/red/yourscript  ==&gt;  example.com/yourscript?mode=red<br/>example.com/blue/yourscript  ==&gt; example.com/yourscript?mode=blue<br/></code></pre><br/><br/><p>If all the links and forms on your page are relative and not<br/>absolute, the URLs should have the mode info in them.</p><br/><br/><p>That is, if the page URL is</p><br/><br/><pre><code>example.com/red/yourscript<br/></code></pre><br/><br/><p>then links on the page that look like this</p><br/><br/><pre><code>&lt;form action="anotherscript"&gt;<br/></code></pre><br/><br/><p>will have a URL of</p><br/><br/><pre><code>example.com/red/anotherscript<br/></code></pre><br/><br/><p>Another way would be to use subdomains</p><br/><br/><pre><code>red.example.com/yourscript  ==&gt;  example.com/yourscript<br/>blue.example.com/yourscript  ==&gt; example.com/yourscript<br/></code></pre><br/><br/><p>You would not need mod_rewrite if you configure your server to serve both subdomains from the same real location.</p><br/><br/><p>Using the subdomains would allow you to extract the mode from<br/>the http_referer field of each incoming request and you<br/>wouldn't need to add the query string. </p><br/><br/><p>Lastly, add absolute links to explicitly change the mode.</p><br/><br/><pre><code>&lt;a href="http://example.com/red/changemode"&gt;Click here to go to RED mode&lt;/a&gt;<br/>&lt;a href="http://example.com/blue/changemode"&gt;Click here to go to BLUE mode&lt;/a&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ECHNOLOG RECOMMEND FOR LAN DASHBOARD
    </pattern>
    <template>
<![CDATA[<p>Thank you everyone for your helpful answers!  I think they address most of the issues raised by the question.  But I think the key to the "final answer" (IMO) rests on the "multiple database" aspect.  Railsninja suggested a piece of software he used for a project to extend rails functionality in this manner - thank you for the link!  That could have been a possible solution - but it sounds like it was used for one project, and I worry about the testing since it is not a part of the mainstream Rails build.  </p><br/><br/><p>Then I found out that multi-db support is just around the corner for a Django core update (eta late August 2009).  So I think I am going to dive in to the project with Django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE UPLOAD INPUT VALID AND SECUR
    </pattern>
    <template>
<![CDATA[<p>Disallowing a file extension is -- potentially -- a waste of time.  A unix server doesn't use the extension -- it uses ownership and permissions.  </p><br/><br/><p>When accepting an upload, you will often rename the file to prevent it being misused.  Uploaded files should be simply named "upload_xxx" with the "xxx" being a key to some database record that provides the claimed name and data type.</p><br/><br/><p>You have to actually read the file and confirm that the content of the file is what someone claims it is.  </p><br/><br/><p>For example, if they claim to upload a .JPG, you have to actually read the file to be sure it's a JPEG, not an .EXE.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DETECT IF MY CODE IS RUN ON CPYTHON OR JYTHON
    </pattern>
    <template>
<![CDATA[<p>if you're running Jython  </p><br/><br/><pre><code>import platform<br/>platform.system()<br/></code></pre><br/><br/><p>return 'Java'<br /><br/><a href="http://stackoverflow.com/questions/1086000/">here has some discussion</a>, hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL ONE WAY ONE TO ON RELATIONSHIP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>The back-references that Django produces are programatic, and do not affect the underlying Database schema. In other words, if you have a one-to-one or foreign key field on your Article pointing to your Revision, a column will be added to the Article table in the database, but not to the Revision table.</p><br/><br/><p>Thus, removing the reverse relationship from the revision to the article is unnecessary. If you really feel strongly about it, and want to document in your code that the backlink is never used, a fairly common Django idiom is to give the fields a related_name attribute like <code>_unused_1</code>. So your Article model might look like the following:</p><br/><br/><pre><code>class Article(models.Model):<br/>    title = models.CharField(blank=False, max_length=80)<br/>    slug = models.SlugField(max_length=80)<br/>    revision_1 = models.OneToOneField(ArticleRevision, related_name='_unused_1')<br/>    revision_2 = models.OneToOneField(ArticleRevision, related_name='_unused_2')<br/><br/>    def __unicode__(self):<br/>        return self.title<br/></code></pre><br/><br/><p>That said, it's rare that a one-to-one relationship is actually useful in an application (unless you're optimizing for some reason) and I'd suggest carefully reviewing your DB schema to make sure this is really what you want. It may make sense to keep a single ForeignKey field on your ArticleRevision pointing back to an Article (since an ArticleRevision will, presumably, always need to be associated with an Article) and adding another column to Revision indicating whether it's published.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMENT POST NOT ALLOW ( 400 ) WHEN USE DJANGO COMMENT
    </pattern>
    <template>
<![CDATA[<p>It's not perfect, but I've worked around this.  I used the form.html included with Django itself and that got me past the "Comment post not allowed (400)" message and posted my comment successfully.  It includes a few other fields but since I didn't define my own form in forms.py that's to be expected I suppose.  At any rate, I seem to have worked around it.  Thanks for looking at my question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT MODUL IN DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>Python itself guarantees that a module is loaded just once (unless <code>reload</code> is explicitly called, which is not the case here): after the first time, <code>import</code> of that module just binds its name directly from <code>sys.modules[themodulename]</code>, an extremely fast operation. So Django does not have to do any further optimization, and neither do you.</p><br/><br/><p>Best practice is avoiding <code>from ... import *</code> in production code (making it clearer and more maintainable where each name is coming from, facilitating testing, etc, etc) and importing modules, "individually" as you put it, exactly where they're needed (by possibly binding fewer names that may save a few microseconds and definitely won't waste any, but "explicit is better than implicit" -- clarity, readability, maintainability -- is the main consideration anyway).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTRIBUTEERROR UNICOD OBJECT HA NO ATTRIBUT META
    </pattern>
    <template>
<![CDATA[<p>Figured out the problem. There was this line:</p><br/><br/><pre><code>note = GenericRelation('Comment', object_id_field='object_pk')<br/></code></pre><br/><br/><p>in model <code>Company</code> and <code>Person</code>. But <code>Comment</code> class was undefined. I commented the line at both places.  It works now.</p><br/><br/><p>Thanks for your time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT UNICOD DECOD PROBLEM
    </pattern>
    <template>
<![CDATA[<p>Well, turns out the rendered results returned by the template needs to be decoded first:</p><br/><br/><blockquote><br/>  <p>self.response.out.write (template.render( templatepath , template_values).decode('utf-8') )</p><br/></blockquote><br/><br/><p>A silly mistake, but thanks for everyone's answers anyway. :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINE OF CODE IN A DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Yep:</p><br/><br/><pre><code>shell]$ find /my/source -name "*.py" -type f -exec cat {} + | wc -l<br/></code></pre><br/><br/><p>Job's a good 'un.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR ABOUT USER.ADD TO CLASS TO EXTEND MY USER I DO NOT KNOW WHI
    </pattern>
    <template>
<![CDATA[<p>This is <a href="http://groups.google.com/group/django-users/browse%5Fthread/thread/a35d94ce1a7893b0" rel="nofollow">not a good way to store additional user information</a>, for a number of reasons, as James Bennett points out in the linked thread. It's no surprise that you're getting weird SQL output and struggling to debug it. Keep things easy for yourself by using a related profile model instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LAST INSERT ID
    </pattern>
    <template>
<![CDATA[<p>Are you setting the value of the <code>id</code> field in the <code>comment = Comments( ...)<br/></code> line?  If not, why are you defining the field instead of just letting Django take care of the primary key with an AutoField?</p><br/><br/><p>If you specify in IntegerField as a primary key as you're doing in the example Django won't automatically assign it a value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARBITRARI NUMBER OF FIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>There are a lot of approaches to solve this problem, and depending on your situation any of them might work. You could certainly use a TextField to store XML or JSON or any other form of text. In combination with Python's pickle feature you can do some neater stuff.</p><br/><br/><p>You might look at the Django Pickle Field definition on DjangoSnippets:<br/><a href="http://www.djangosnippets.org/snippets/513/" rel="nofollow">http://www.djangosnippets.org/snippets/513/</a></p><br/><br/><p>That allows you to dump Python dictionaries into fields and does some manipulation so that when you reference those fields you can get easy access to the dictionaries without any need to re-parse XML or anything.</p><br/><br/><p>I imagine you could also explore writing a custom field definition that would do a similar thing for other serialization formats, although I'm not sure how useful that would be.</p><br/><br/><p>Or you could simply refactor your model to take advantage of ManyToMany fields. You can create a model for a generic key,value pair, then on your primary model you would have a M2M reference to that generic key,value model. In that way you could leverage more of the Django ORM to reference data, etc. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANI FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong>Note:</strong> This code will <em>delete</em> the bad 'georfe' author, as well as updating the books to point to the correct author. If you don't want to do that, then use <code>.remove()</code> as @jcdyer's answer mentions.</p><br/><br/><p>Can you do something like this?</p><br/><br/><pre><code>george_author = Author.objects.get(name="George")<br/>for book in Book.objects.filter(authors__name="Georfe"):<br/>    book.authors.add(george_author.id)<br/>    book.authors.filter(name="Georfe").delete()<br/></code></pre><br/><br/><p>I suspect that this would be easier if you had an explicit table joining the two models (with the "through" keyword arg) -- in that case, you would have access to the relationship table directly, and could just do a <code>.update(id=george_author.id)</code> on it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT TAG IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>for this you can create an inclusion tag and use it like:</p><br/><br/><pre><code>{% load my_tags %}<br/>{% product bicycle &lt;extra vars ...&gt; %}<br/></code></pre><br/><br/><p>To define the tag, add to your app/templatetags/mytags.py:</p><br/><br/><pre><code>@register.inclusion_tag('results.html')<br/>def product(item, *extra):<br/>    #maybe repackage extra variables<br/>    #and add them to the returned dictionary<br/>    item_form = ItemForm(item) #form.ModelForm instance<br/>    return {'item': item, 'item_form':item_form, ...}<br/></code></pre><br/><br/><p>Then you'll need a template that returns html for the item:</p><br/><br/><pre><code>&lt;h1&gt;{{item.title}}&lt;/h1&gt;<br/>{{item_form}}<br/>... add some conditional statements depending on extra vars<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND DJANGO ( AJAX + HTTPRESPONS )
    </pattern>
    <template>
<![CDATA[<p>The typical workflow is to have the server return a JSON object as text, and then <a href="http://stackoverflow.com/questions/945015/alternatives-to-javascript-eval-for-parsing-json">interpret that object in the javascript</a>. In your case you could return the text {"httpresponse":1} from the server, or use the python json libary to generate that for you. </p><br/><br/><p>JQuery has a nice json-reader (I just read the docs, so there might be mistakes in my examples)</p><br/><br/><p>Javascript:</p><br/><br/><pre><code>$.getJSON("/abc/?x="+3,<br/>    function(data){<br/>      if (data["HTTPRESPONSE"] == 1)<br/>      {<br/>          alert("success")<br/>      }<br/>    });<br/></code></pre><br/><br/><p>Django</p><br/><br/><pre><code>#you might need to easy_install this<br/>import json <br/><br/>def your_view(request):<br/>    # You can dump a lot of structured data into a json object, such as <br/>    # lists and touples<br/>    json_data = json.dumps({"HTTPRESPONSE":1})<br/>    # json data is just a JSON string now. <br/>    return HttpResponse(json_data, mimetype="application/json")<br/></code></pre><br/><br/><p>An alternative View suggested by Issy (cute because it follows the DRY principle)</p><br/><br/><pre><code>def updates_after_t(request, id): <br/>    response = HttpResponse() <br/>    response['Content-Type'] = "text/javascript" <br/>    response.write(serializers.serialize("json", <br/>                   TSearch.objects.filter(pk__gt=id))) <br/>    return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNBUFF MYSQL QUERI
    </pattern>
    <template>
<![CDATA[<p>This will get 500 items each iteration:</p><br/><br/><pre><code>count = Model.objects.count()<br/>chunk = 500<br/>for i in range((count/chunk)+1):<br/>    objs = list(Model.objects.all()[i*chunk:(i+1)*chunk])<br/></code></pre><br/><br/><p>You might also want to have a look at the <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#iterator" rel="nofollow">QuerySet method iterator()</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPLIC + INTEGRITYERROR
    </pattern>
    <template>
<![CDATA[<p>Just to make sure, you're using strings for primary keys if I understand correctly?</p><br/><br/><blockquote><br/>  <p>AttributeError: 'NoneType' object has no attribute 'cursor'</p><br/></blockquote><br/><br/><p>This means there's an error in some Python code. Have you tried using another version or revision of Django or searching the Django trac for your bug? It isn't so uncommon to be affected by some bug if you're using version from trunk.</p><br/><br/><p>As an alternative you could also try to deploy Django using multiple processes instead of multiple threads if that's an option.</p><br/><br/><p>However, you might still want to find out why you're getting duplicate requests as it might uncover some other bug.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN FROM JOIN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If I'm understanding correctly, you should be Paginating on Pad.objects.all(), then use a <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4" rel="nofollow">select_related</a> on the TagRelation objects both ways to grab the appropriate tags in just one (additional) query, and using that data in your view/template. Something like:</p><br/><br/><pre><code>thispagepadids = [o.id for o in mypageobject.object_list]<br/>tagrels = TagRelation.objects.filter(pad__id__in=thispagetagids).select_related('tag','pad'))<br/></code></pre><br/><br/><p>(assuming you have your page object in mypageobject).<br/>Then you can get the pad and tag for any given tagrel in code (using the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#regroup" rel="nofollow">regroup</a> template tag is probably the easiest way to do this) but the DB only performs one (giant) query, and your pagination count is still correct.</p><br/><br/><p>Note that we had to do the 2 queries because you can't just use select_related directly on the many-to-many field (see <a href="http://code.djangoproject.com/ticket/6432" rel="nofollow">this ticket</a>), but you can use it to follow the FKs both ways from the intermediate m2m table.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      START DJANGO WITH PINAX
    </pattern>
    <template>
<![CDATA[<p>I'd avoid the svn version all together. It's unmaintained and out of date. Instead, use the git version at <a href="http://github.com/pinax/pinax" rel="nofollow">http://github.com/pinax/pinax</a> or (even better) the recently release 0.7b3 downloadable from <a href="http://pinaxproject.com" rel="nofollow">http://pinaxproject.com</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR A RAILS DJANGO PROJECT TO BECOM A DEATH MARCH
    </pattern>
    <template>
<![CDATA[<p>Of course it is. I have personal experience of working on several Django projects which have become death marches.</p><br/><br/><p>You can have all the agile development technology in the world, but if your company does not fully embrace agile concepts then it won't help you avoid the death march. If the management demands a product to be delivered on a certain date, and that it includes a certain set of features, then using a framework won't help: you're still stuck working as fast as you can until they're satisfied. If that means a death march, then a death march it is.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ASSERTRAIS CATCH MY ATTRIBUT ERROR USE PYTHON UNITTEST
    </pattern>
    <template>
<![CDATA[<p>I think its because assert raises only accepts a callable. It evalutes to see if the callable raises an exception, not if the statement itself does.</p><br/><br/><pre><code>self.assertRaises(AttributeError, getattr, branch[0], "childrennodes")<br/></code></pre><br/><br/><p>should work.</p><br/><br/><p>EDIT:</p><br/><br/><p>As THC4k correctly says it gathers the statements at collection time and will error then, not at testing time.</p><br/><br/><p>Also this is a reason why I like nose, it has a decorator (raises) that is useful and clearer for these kind of tests.</p><br/><br/><pre><code>@raises(AttributeError)<br/>def test_1(self)<br/>    branch[0].childrennodes<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELFORM CHECKBOX WIDGET
    </pattern>
    <template>
<![CDATA[<p>In such a case, the easiest way is to put the choices into a separate model and then use a ManyToMany relationship. After that, you simply override the ModelForm's widget for that field to use <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/#django.forms.CheckboxSelectMultiple" rel="nofollow">forms.CheckboxSelectMultiple</a> and Django will automatically do the right thing. If you insist to use a CharField, you'll probably have to do something like <a href="http://www.djangosnippets.org/snippets/1200/" rel="nofollow">this snippet</a>.</p><br/><br/><p>@ 2. comment: how are you overriding the widget? This is how I do it and it works flawlessly:</p><br/><br/><pre><code>class SomeModelForm(forms.ModelForm):<br/>    def __init__(self, *args, **kwargs):<br/>        super(SomeModelForm, self).__init__(*args, **kwargs)<br/>        self.fields['some_field'].widget = forms.CheckboxSelectMultiple()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THICKBOX WITH IMAGEKIT
    </pattern>
    <template>
<![CDATA[<p>try </p><br/><br/><p>view:</p><br/><br/><pre><code>    return render_to_response('album.html',<br/>                          {'photos': photos,<br/>                          context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>in template always use the URL_MEDIA path, in my experiencie tickbox displays "loading" forever when img resource returns an error.</p><br/><br/><pre><code>&lt;div class="thumbs"&gt;<br/>  {% for p in photos %}<br/>    &lt;a href="{{ MEDIA_URL }}{{ p.original_image.url }}" title="{{ p.position.position }}"      class="thickbox" rel="gallery-vehicle"&gt;<br/>      &lt;img src="{{ p.thumbnail_image.url }}" alt="{{ p.position.position }}" /&gt;<br/>    &lt;/a&gt;<br/>  {% endfor %}<br/>&lt;/div&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AND MYSQL ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>Look in the directory where you installed MySQL, probably something like <code>C:\Program Files\MySQL\MySQL Server 5.0</code>. Look in the my.ini file. Check the server section. It will look something like this:</p><br/><br/><pre><code># SERVER SECTION<br/># ----------------------------------------------------------------------<br/>#<br/># The following options will be read by the MySQL Server. Make sure that<br/># you have installed the server correctly (see above) so it reads this <br/># file.<br/>#<br/>[mysqld]<br/><br/># The TCP/IP Port the MySQL Server will listen on<br/>port=3306<br/></code></pre><br/><br/><p>What's the port number you are using? Okay, go to the command line and run mysql:</p><br/><br/><pre><code>C:\Users\foobar&gt;mysql --port=3306 --user=root --password<br/>Enter password: ********<br/>Welcome to the MySQL monitor.  Commands end with ; or \g.<br/>Your MySQL connection id is 2<br/>Server version: 5.0.51b-community-nt MySQL Community Edition (GPL)<br/><br/>Type 'help;' or '\h' for help. Type '\c' to clear the buffer.<br/><br/>mysql&gt; use mysql;<br/>Database changed<br/>mysql&gt; show tables;<br/>+---------------------------+<br/>| Tables_in_mysql           |<br/>+---------------------------+<br/>| columns_priv              |<br/>| db                        |<br/>| func                      |<br/>| help_category             |<br/>| help_keyword              |<br/>| help_relation             |<br/>| help_topic                |<br/>| host                      |<br/>| proc                      |<br/>| procs_priv                |<br/>| tables_priv               |<br/>| time_zone                 |<br/>| time_zone_leap_second     |<br/>| time_zone_name            |<br/>| time_zone_transition      |<br/>| time_zone_transition_type |<br/>| user                      |<br/>| user_info                 |<br/>+---------------------------+<br/>18 rows in set (0.00 sec)<br/></code></pre><br/><br/><p>Okay, then you can use mysql. Go into your Django local_settings.py and check that MySQL is set up correctly:</p><br/><br/><pre><code>DATABASE_ENGINE = 'mysql'<br/>DATABASE_NAME = 'whatever'<br/>DATABASE_USER = '&lt;special app user&gt;'<br/>DATABASE_PASSWORD = '&lt;password for user&gt;'<br/>DATABASE_HOST = '&lt;ip address or host name of server&gt;'<br/>DATABASE_PORT = '3306'<br/></code></pre><br/><br/><p>If you did all these things from the command line, then this Django setup will work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL FIELD
    </pattern>
    <template>
<![CDATA[<p>No, it's not possible to have data that is both in a form you can't decrypt it, and in a form where you can decrypt it to show it to the client simultaneously.  The best you can do is a reversible encryption on the content so at least if your server is compromised their data is safe.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARAMET BIND USE GQL IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>Substitute:</p><br/><br/><pre><code> "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1")<br/></code></pre><br/><br/><p>with:</p><br/><br/><pre><code>  "...WHERE rand1 &gt; :rand2 ORDER BY rand LIMIT 1", rand2=rand2)<br/></code></pre><br/><br/><p>Or</p><br/><br/><pre><code>  "...WHERE rand1 &gt; :1 ORDER BY rand LIMIT 1", rand2)<br/></code></pre><br/><br/><p>See for more information: "<a href="http://code.google.com/appengine/docs/python/datastore/gqlqueryclass.html" rel="nofollow">The Gql query class</a>"</p><br/><br/><p><sub> The funny thing is that I have just learned this about 2 hrs ago :P </sub></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIT TEST DJANGO VIEW OR MAYB AND MVT QUESTION
    </pattern>
    <template>
<![CDATA[<p>I'm not sure how testing a view is tricky.</p><br/><br/><p>You just use the <a href="http://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client" rel="nofollow">test client</a>.</p><br/><br/><p>Code coverage is easy.  You reason how how a URL request maps to a code path and make the appropriate URL requests.</p><br/><br/><p>You can, if you want, call the view functions "manually" by creating a Request object and examining the Response object, but this is too much work.</p><br/><br/><p>If you have doubts about your code coverage, that's a good thing.  It means you have code you can't easily map to a URL (which is all a user can ever see of a web application.)  If you have code that doesn't map to a URL, you should probably either (a) delete the code or (b) refactor it into a separate module.</p><br/><br/><p>We have lots of modules outside our view functions.  Our view functions import these modules.  We test these "outside the view function" modules with ordinary unittest.</p><br/><br/><hr><br/><br/><p>Here's a typical structure.</p><br/><br/><pre><code>some_big_product/<br/>|-- __init__.py<br/>|-- settings.py<br/>|-- urls.py<br/>|-- logging.ini<br/>|-- other_global_files.py<br/>|-- an_app_1/<br/>|   |-- __init__.py<br/>|   |-- urls.py<br/>|   |-- models.py<br/>|   |-- views.py<br/>|   |-- tests.py &lt;-- the generic Django testing <br/>|   |-- app_specific_module.py<br/>|   |-- app_specific_package/<br/>|   |   |-- __init__.py<br/>|   |-- test_app_specific_module.py &lt;-- unittest <br/>|   |-- test_app_specific_package.py<br/>|-- generic_module.py<br/>|-- generic_package/<br/>|   |-- __init__.py<br/>|-- tests/<br/>|   |-- test_this.py<br/>|   |-- test_that.py<br/>|   |-- test_all.py &lt;-- not always practical<br/>|-- scripts/<br/>    |-- run_tests.sh <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DETERMIN IF AN UPLOAD IMAG IS VALID
    </pattern>
    <template>
<![CDATA[<p>According to Django's source code. Those three lines are responsible for verifying images:</p><br/><br/><pre><code>from PIL import Image<br/>trial_image = Image.open(file)<br/>trial_image.verify()<br/></code></pre><br/><br/><p>The image type could be unsupported by PIL. Check the list of supported formats <a href="http://www.pythonware.com/library/pil/handbook/index.htm" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LATIN LETTER WITH ACUT DJANGOUNICODEDECODEERROR
    </pattern>
    <template>
<![CDATA[<p>Judging from the <code>\xf3</code> code for 'ó', it does look like the data is encoded in ISO-8859-1 (or some close relative).  So <code>body.decode('iso-8859-1')</code> should be a valid Unicode string (you don't specify what "without solution" means -- what error message do you get, and where?); if what you need is a utf-8 encoded bytestring instead, <code>body.decode('iso-8859-1').encode('utf-8')</code> should give you one!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION EXPIRI
    </pattern>
    <template>
<![CDATA[<p>As the author of those methods, I can see that the documentation isn't very clear regarding this. Your observations are correct: only requests which cause the session to be altered is considered "activity".</p><br/><br/><p>You can use the <a href="http://docs.djangoproject.com/en/dev/topics/http/sessions/#session-save-every-request"><code>SESSION_SAVE_EVERY_REQUEST</code></a> setting to get the behavior you're after (at the obvious cost of the session having to being saved every request).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSV FILE INTO MYSQL DATABAS USE DJANGO WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>To tokenize a comma separated string:</p><br/><br/><pre><code>&gt;&gt;&gt; a = 'abubakar,rooney,0178222123,student abubakar,rooneyzzz,0178222164'<br/>&gt;&gt;&gt; b = a.split(',')<br/>&gt;&gt;&gt; print b<br/>['abubakar', 'rooney', '0178222123', 'student abubakar', 'rooneyzzz', '0178222164']<br/></code></pre><br/><br/><p>See @wm_eddie's answer for how to create a new entry in your db.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFF DJANGO MODEL OBJECT WITH MANYTOMANI FIELD
    </pattern>
    <template>
<![CDATA[<p>First of all, you don't need to use deepcopy for this. Re-querying the sender from the database returns a "fresh" object.</p><br/><br/><pre><code>def pre_save(sender, **kwargs):<br/>    pk = kwargs['instance'].pk<br/>    instance = sender.objects.get(pk=pk)<br/>    tracking[sender] = instance<br/></code></pre><br/><br/><p>You can get a list of all the many-to-many fields for a class, and check the values related to  the current instance:</p><br/><br/><pre><code>for field in sender._meta.local_many:<br/>    values = field.value_from_object(instance).objects.all()<br/>    # Now values is a list of related objects, which you can diff<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMAIL SEND FAIL ON SSL READ
    </pattern>
    <template>
<![CDATA[<p>Altho' I don't know why, I <strong>have been thro' this</strong>, and it works when you have settings variables ordered in a particular order:</p><br/><br/><ul><br/><li>EMAIL_HOST</li><br/><li>EMAIL_PORT</li><br/><li>EMAIL_HOST_USER</li><br/><li>EMAIL_HOST_PASSWORD</li><br/><li>EMAIL_USE_TLS</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REL ( ) AND MANI TO MANI FIELD WITH AJAX ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>Update - it seems Django <a href="http://code.djangoproject.com/ticket/4656" rel="nofollow">doesn't support this particularly well</a>, but there's a third party serializer that does:</p><br/><br/><p><a href="http://code.google.com/p/wadofstuff/wiki/DjangoFullSerializers" rel="nofollow">DjangoFullSerializers</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS DJANGO APP THROUGH IP ADDRESS WHILE ACCESS IT THROUGH LOCALHOST
    </pattern>
    <template>
<![CDATA[<p>I assume you're using the development server.  If so, then you need to specifically bind to your external IP for the server to be available there.  Try this command:</p><br/><br/><pre><code>./manage.py runserver 193.140.209.49:8000<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAG TWICE IN DJANGO USE PIL
    </pattern>
    <template>
<![CDATA[<p>If this works once, as you say, the image you retrieved is just fine. There are at least two different ways to get multiple thumbnails out of single PIL images.</p><br/><br/><ol><br/><li>You can use PIL's <code>resize</code> method, which will return a resized copy of the original. You just have to calculate the dimensions you'll need if you want to keep the proportions intact.</li><br/><li>Use Image.copy() to get a copy of the image.</li><br/></ol><br/><br/><p>Like this:    </p><br/><br/><pre><code>original = parser.close()<br/>...<br/><br/>thumb1 = original.copy()<br/>size = (75,75)<br/>thumb1.thumbnail(size, Image.ANTIALIAS)<br/>...<br/><br/>thumb2 = original.copy()<br/>thumbnail2 = original.resize(size2, Image.ANTIALIAS)<br/>...<br/></code></pre><br/><br/><p>This way, the original will not be altered and you can get as many copies as you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALU NOT UPDAT WHEN MODEL UPDAT
    </pattern>
    <template>
<![CDATA[<p>My hunch is that the class definition is only being processed once on load rather than for each instantiation.  Try adding the CHOICES computation to the <strong>init</strong> method like so:</p><br/><br/><pre><code>def __init__(self, *args, **kwargs):<br/>    super(self.__class__, self).__init__(*args, **kwargs)<br/>    CHOICES = []<br/>    for notice in NoticeType.objects.all():<br/>        CHOICES.append( (notice.label, notice.display) )<br/>    self.fields['notifications'].choices = CHOICES<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GQLQUERI ORDERBI A PROPERTI IN A REFERENCEPROPERTI
    </pattern>
    <template>
<![CDATA[<p>In general, to work around non-relational DBs lack of JOIN functionality, you denormalize; specifically, you redundantly put data pieces in more than one place, so they can be effectively accessed in your queries (this does make it more cumbersome to update your store, but then, non-relational DBs in general are heavily slanted to read-mostly applications).</p><br/><br/><p>In this case, you add to <code>Seat</code> a property with the room's id -- since you have peculiarly called <code>roomId</code> (rather than, say, <code>room</code>) the <em>reference</em> to the seat's room, I guess you'd have this denormalized bit as <code>roomIdId</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMOIZ EXPENS CALCUL ON DJANGO MODEL OBJECT
    </pattern>
    <template>
<![CDATA[<p>Generally, I use a pattern like this:</p><br/><br/><pre><code>def get_expensive_operation(self):<br/>    if not hasattr(self, '_expensive_operation'):<br/>        self._expensive_operation = self.expensive_operation()<br/>    return self._expensive_operation<br/></code></pre><br/><br/><p>Then you use the <code>get_expensive_operation</code> method to access the data.</p><br/><br/><p>However, in your particular case, I think you are approaching this in slightly the wrong way. You need to do the deserialization when the model is first loaded from the database, and serialize on save only. Then you can simply access the attributes as a standard Python dictionary each time. You can do this by defining a custom JSONField type, subclassing models.TextField, which overrides <code>to_python</code> and <code>get_db_prep_save</code>.</p><br/><br/><p>In fact someone's already done it: see <a href="http://www.djangosnippets.org/snippets/1478/" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT GENER RELAT USE CONTENT TYPE ( OBJECT PK )
    </pattern>
    <template>
<![CDATA[<p>After I typed out that really long question I looked at the mysql and realized that the error was stemming from:</p><br/><br/><pre><code>class Meta:<br/>    unique_together = (("content_type", "object_pk"),)<br/></code></pre><br/><br/><p>Apparently, I can't have it both ways.  Which leaves me torn.  I'll have to open a new question about whether it is better to leave my <code>object_pk</code> options open (suppose I use a textfield as a primary key?) or better to enforce the <code>unique_togetherness</code>...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV STYLESHEET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I believe the 'P' to name the pattern needs to be capitalized. <code>r'^static/(?P&lt;path&gt;.*)$'</code></p><br/><br/><p>All of the examples and doc show it capitalized.  <a href="http://docs.python.org/library/re.html" rel="nofollow">Python Regex Doc</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINE BREAK IN PYTHON DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#linebreaks" rel="nofollow"><code>linebreaks</code></a> filter.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DJANGO EGG
    </pattern>
    <template>
<![CDATA[<p>You want to use the <a href="http://pypi.python.org/pypi/setuptools" rel="nofollow">Python SetupTools</a>.  You create a description file (setup.py) and then building and creating the egg is a one-line command (similar to Make).  </p><br/><br/><p>There <em>was</em> a nice <a href="http://ianbicking.org/docs/setuptools-presentation/" rel="nofollow">presentation</a> that would walk you through the details -- it's gone now.  So here's <a href="http://parijatmishra.wordpress.com/2008/10/08/python-packaging-setuptools-and-eggs/" rel="nofollow">another discussion</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHOICELIST FROM ALL IMAGESPEC
    </pattern>
    <template>
<![CDATA[<p>Well, something like the following will get you a list of all the ImageSpec subclasses defined in the file:</p><br/><br/><pre><code>def subclassfilter(x, baseclass):<br/>    return x is not baseclass and isinstance(x, type) and issubclass(x, baseclass)<br/><br/>subclasses = [c for c in locals().values() if subclassfilter(c, ImageSpec)]<br/></code></pre><br/><br/><p>You could then generate the choices list from the <code>__name__</code> attribute of each class in the <code>subclasses</code> list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON SERIAL WITH MIX DJANGO MODEL AND A DICTIONARI
    </pattern>
    <template>
<![CDATA[<p>Can't you just convert the model instance to a dict, join the other dict and then serialize?</p><br/><br/><pre><code>from django.forms import model_to_dict<br/><br/>dict = model_to_dict(instance)<br/>dict.update(dict2)<br/><br/>... Then serialize here ...<br/></code></pre><br/><br/><p>Don't know about being "better"... :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ATTR ( ) ATTRIBUT NAME MUST BE STRING ERROR IN ADMIN PANEL FOR A MODEL WITH AN IMAGEFIELD
    </pattern>
    <template>
<![CDATA[<p>Your problem is with <code>height_field=80</code> and <code>width_field=80</code> these should not contain the height and width you require but rather the names of fields in your model that can have the values for height and width save in them.</p><br/><br/><p>As explained in the Django documentation for the <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ImageField" rel="nofollow">ImagedField</a> these are attributes on your model which will be populated for you when the model is saved. If you want this information populated for you the create model attribute where this information can be stored otherwise just remove these attributes they are optional.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE EXAMPL OF INTEGR HAYSTACK SOLR WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>A few notes and resources. My advice is mostly related to Haystack in general since I don't have experience with Xapian as a backend.</p><br/><br/><ol><br/><li>Installing Xapian (from the Haystack<br/>docs) - note that Haystack doesn't<br/>support Xapian on its own:<br/><a href="http://haystacksearch.org/docs/installing%5Fsearch%5Fengines.html#xapian" rel="nofollow">http://haystacksearch.org/docs/installing%5Fsearch%5Fengines.html#xapian</a></li><br/><li>It may be helpful to use Whoosh<br/>during development or for testing<br/>certain things, but keep in mind<br/>that it doesn't support all the<br/>features Xapian does. Haystack does<br/>a good job of failing gracefully (a<br/>warning in your console) if you try<br/>to use Whoosh with a feature it<br/>doesn't support, so switching between<br/>them is painless:<br/><a href="http://haystacksearch.org/docs/installing%5Fsearch%5Fengines.html#whoosh" rel="nofollow">http://haystacksearch.org/docs/installing%5Fsearch%5Fengines.html#whoosh</a></li><br/><li><p>A snippet from my own code of<br/>switching between Whoosh and Solr<br/>easily:</p><br/><br/><pre><code># Haystack search settings<br/>HAYSTACK_SITECONF = 'project.search_sites'<br/>HAYSTACK_INCLUDE_SPELLING = True<br/># Haystack backend settings<br/>HAYSTACK_SEARCH_ENGINE = 'solr' # Switch this to 'whoosh' to use that backend instead<br/>if DEBUG:<br/>    HAYSTACK_SOLR_URL = 'solr.development.url'<br/>else:<br/>    HAYSTACK_SOLR_URL = 'solr.production.url'<br/>HAYSTACK_WHOOSH_PATH = os.path.join(PROJECT_ROOT, 'search_index', 'whoosh')<br/></code></pre></li><br/><li>As far as I'm aware your choice of<br/>database doesn't make a difference<br/>as long as Django supports it since Haystack uses the ORM.</li><br/><li>If you run into any trouble,<br/>Haystack's developer (Daniel<br/>Lindsley) is incredibly helpful and<br/>quick to respond. You can get help<br/>from him and others in the<br/><a href="http://groups.google.com/group/django-haystack" rel="nofollow">django-haystack Google group</a> or<br/>the #haystack IRC channel (that is,<br/>if you don't find an answer in the<br/><a href="http://haystacksearch.org/docs/" rel="nofollow">official docs</a>).</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION PERSIST BUT LOSE DATA
    </pattern>
    <template>
<![CDATA[<p>I don't think I completely understand the question, but you may want to take a look at which <a href="http://docs.djangoproject.com/en/dev/topics/http/sessions/#configuring-the-session-engine" rel="nofollow">session engine</a> you're using</p><br/><br/><p>if you're using the cache session engine you need to make sure you have caching properly set up (for instance the dummy cache would just throw out your session data)</p><br/><br/><p>another possibility is that your session isn't being saved because you're not changing the session, you're changing a mutable object that is stored in the session. you can try <a href="http://docs.djangoproject.com/en/dev/topics/http/sessions/#when-sessions-are-saved" rel="nofollow">forcing the session to save</a> by adding this somewhere in your view:</p><br/><br/><pre><code>request.session.modified = True<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP GP POLL
    </pattern>
    <template>
<![CDATA[<p>There's a really good blog post about this topic, covering a variety of methods @ </p><br/><br/><p><a href="http://hitching.net/2009/11/10/location-aware-mobile-web-apps-using-google-maps-v3-geolocation/" rel="nofollow">http://hitching.net/2009/11/10/location-aware-mobile-web-apps-using-google-maps-v3-geolocation/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND GET A JSON OBJECT WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>return HttpResponse(simplejson.dumps(mydictionary), mimetype="application/json")</p><br/><br/><p>see <a href="http://www.b-list.org/weblog/2006/jul/31/django-tips-simple-ajax-example-part-1/" rel="nofollow">b-list</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TURN A DICTIONARI INTO A JSON OBJECT USE SIMPLEJSON IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I think this is the easiest way to do it</p><br/><br/><pre><code>import simplejson as json <br/>myfruits = {'fruit':4, 'color':11}<br/>json.dumps(myfruits)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL A DJANGO MODEL HA ( OR WOULD CALL ) ON .SAVE ( )
    </pattern>
    <template>
<![CDATA[<p>From the Django FAQ:</p><br/><br/><p>How can I see the raw SQL queries Django is running?<br/>Make sure your Django DEBUG setting is set to True. Then, just do this:</p><br/><br/><blockquote><br/>  <blockquote><br/>    <blockquote><br/>      <p>from django.core.db import db<br><br/>      db.queries<br><br/>      [{'sql': 'SELECT polls_polls.id,polls_polls.question,polls_polls.pub_date FROM polls_polls',<br><br/>      'time': '0.002'}]  </p><br/>    </blockquote><br/>  </blockquote><br/></blockquote><br/><br/><p>db.queries is only available if DEBUG is True. It's a list of dictionaries in order of      query execution. Each dictionary has the following:<br><br/><code>sql</code>--The raw SQL statement<br><br/><code>time</code> -- How long the statement took to execute, in seconds.<br><br/>db.queries includes all SQL statements -- INSERTs, UPDATES, SELECTs, etc.   </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL FIXTUR IN DJANGO FOR USER MODEL
    </pattern>
    <template>
<![CDATA[<p>Thanks for your answers. I've found the solution that works for me, and for coincidence was one of Brian's suggestion. Here it is:</p><br/><br/><p>Firs I disconnected the signal that created the Super User after syncdb, for I have my super user in my auth_user fixture:</p><br/><br/><p><strong>models.py</strong>:</p><br/><br/><pre><code>from django.db.models import signals<br/>from django.contrib.auth.management import create_superuser<br/>from django.contrib.auth import models as auth_app<br/><br/><br/>signals.post_syncdb.disconnect(<br/>    create_superuser,<br/>    sender=auth_app,<br/>    dispatch_uid = "django.contrib.auth.management.create_superuser")<br/></code></pre><br/><br/><p>Then I created a signal to be called after syncdb:</p><br/><br/><p><strong>&lt; myproject >/&lt; myapp >/management/_<em>init</em>_.py</strong></p><br/><br/><pre><code>"""<br/>Loads fixtures for files in sql/&lt;modelname&gt;.sql<br/>"""<br/>from django.db.models import get_models, signals<br/>from django.conf import settings <br/>import &lt;myproject&gt;.&lt;myapp&gt;.models as auth_app<br/><br/>def load_fixtures(app, **kwargs):<br/>    import MySQLdb<br/>    db=MySQLdb.connect(host=settings.DATABASE_HOST or "localhost", \<br/>       user=settings.DATABASE_USER,<br/>    passwd=settings.DATABASE_PASSWORD, port=int(settings.DATABASE_PORT or 3306))<br/><br/>    cursor = db.cursor()<br/><br/>    try:<br/>        print "Loading fixtures to %s from file %s." % (settings.DATABASE_NAME, \<br/>            settings.FIXTURES_FILE)<br/>        f = open(settings.FIXTURES_FILE, 'r')<br/>        cursor.execute("use %s;" % settings.DATABASE_NAME)<br/>        for line in f:<br/>            if line.startswith("INSERT"):<br/>                try:<br/>                    cursor.execute(line)<br/>                except Exception, strerror:<br/>                    print "Error on loading fixture:"<br/>                    print "-- ", strerror<br/>                    print "-- ", line<br/><br/>        print "Fixtures loaded"<br/><br/>    except AttributeError:<br/>        print "FIXTURES_FILE not found in settings. Please set the FIXTURES_FILE in \<br/>            your settings.py" <br/><br/>    cursor.close()<br/>    db.commit()<br/>    db.close()<br/><br/>signals.post_syncdb.connect(load_fixtures, sender=auth_app, \<br/>    dispatch_uid = "&lt;myproject&gt;.&lt;myapp&gt;.management.load_fixtures")<br/></code></pre><br/><br/><p>And in my <strong>settings.py</strong> I added FIXTURES_FILE with the path to my .sql file with the sql dump.</p><br/><br/><p>One thing that I still haven't found is how to fire this signal only after the tables are created, and not everytime syncdb is fired. A temporary work around for this is use INSERT IGNORE INTO in my sql command.</p><br/><br/><p>I know this solution is far from perfect, and critics/improvements/opinions are very welcome!</p><br/><br/><p>Regards,</p><br/><br/><p>Aldo</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPUT COLUMN IN DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Not possible at the moment, there's a <a href="http://code.djangoproject.com/ticket/10972" rel="nofollow">ticket</a> for F() objects inside aggregation, but nothing promising.</p><br/><br/><p>The only way i see is to workaround by sum in python:</p><br/><br/><pre><code>sum([x[1]-x[0] for x in Contribution.objects.values_list('start_time', 'end_time')])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEVEL TEMPLAT INHERIT IN JINJA2
    </pattern>
    <template>
<![CDATA[<p>The way the documentation worded it, it seemed like it didn't support inheritance (n) levels deep. </p><br/><br/><blockquote><br/>  <p>Unlike Python Jinja does not support<br/>  multiple inheritance. So you can only<br/>  have one extends tag called per<br/>  rendering.</p><br/></blockquote><br/><br/><p>I didn't know it was just a rule saying 1 extends per template.... I now know, with some help from the jinja irc channel.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CACH TEMPLAT AUTOMAT
    </pattern>
    <template>
<![CDATA[<p>Taking a look at this in some of my code, I have this in my template:</p><br/><br/><pre><code>{{ mytable.0.pk }}<br/>{{ mytable.1.pk }}<br/>{{ mytable.0.pk }}<br/>{{ mytable.3.pk }}<br/></code></pre><br/><br/><p>And I get this output:</p><br/><br/><pre><code>91596<br/>54774<br/>156800<br/>23593<br/></code></pre><br/><br/><p>Odd, until you consider that django executes database queries <strong>very</strong> lazily.  This is what shows up in my mysql log for one page load:</p><br/><br/><pre><code>SELECT 'mytable'.'id' FROM 'mytable' ORDER BY RAND() LIMIT 1<br/>SELECT 'mytable'.'id' FROM 'mytable' ORDER BY RAND() LIMIT 1 OFFSET 1<br/>SELECT 'mytable'.'id' FROM 'mytable' ORDER BY RAND() LIMIT 1<br/>SELECT 'mytable'.'id' FROM 'mytable' ORDER BY RAND() LIMIT 1 OFFSET 3<br/></code></pre><br/><br/><p>Each time you use the dot notation, it is executing an entire new query.  I'd suggest modifying your code like so:</p><br/><br/><pre><code>def rate(request, type):<br/>    photos = list(Photo.objects.order_by('?')[:2])<br/>    c = Context({"photos": photos, "type": type})<br/>    return render_to_response("base_rate.html", c)<br/></code></pre><br/><br/><p>Because the <code>list()</code> is forcing an evaluation, it will execute the query right then and there.  In addition, the data for both of those items is already cached, so there is no reason to hit the database again.  You should be good to go.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST.META REMOTE ADDR IS ALWAY 127.0.0.1
    </pattern>
    <template>
<![CDATA[<p>Do you have any kind of proxy, gateway, or load balancer running on that remote host? That's the sort of thing that would cause connections to appear to be from 127.0.0.1 (because that's where the immediate connection <em>is</em> from, as far as the web server is concerned).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCDB ON DJANGO PROJECT NOT WORK CA N T CREATE WRIT TO FILE
    </pattern>
    <template>
<![CDATA[<p>The question was how to debug the problem and as already pointed out by Agos, Errno 2 is 'No such file or directory'. You might want to look in the data directory of MySQL and check if the directory is actually there and has correct permissions</p><br/><br/><pre><code>shell&gt; cd /usr/local/mysql/data/<br/>shell&gt; ls -ld *<br/>drwx------    17 geert   admin         578 Oct  1 19:33 someabstract<br/></code></pre><br/><br/><p>The above should give you list of directories (which are the MySQL databases) and their permissions. Check whether the 'wzhere' directory in particular..<br/>It's a bit weird error message you get I should say.</p><br/><br/><p>(Trying another Django DB back-end wouldn't solve anything in this case.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NAVIG MENU USE DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I don't  think you can replace a block from an included template. My suggestion is that you need to rethink the logic of your templates. IMHO it should be something like this: </p><br/><br/><p>base.html</p><br/><br/><pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;<br/>    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;<br/>    &lt;head&gt;<br/> &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt; <br/> &lt;meta http-equiv="content-type" content="text/html;charset=utf-8" /&gt;<br/>  &lt;link rel="stylesheet" type="text/css" href="/media/css/base.css" /&gt;<br/>  &lt;link rel="stylesheet" type="text/css" href="/media/css/login.css" /&gt;<br/>  &lt;link rel="stylesheet" href="/site_media/css/style.css" type="text/css" /&gt;<br/>  &lt;!--[if lte IE 7]&gt;&lt;link rel="stylesheet" type="text/css" href="/media/css/ie.css" /&gt;&lt;![endif]--&gt;<br/> &lt;/head&gt;<br/>  &lt;body class="{% block bodyclass %}{% endblock %}"&gt;<br/>  {% block content %}<br/><br/>     &lt;div id="content"&gt;<br/><br/>         {% block navigation %}<br/>             &lt;ul id="top"&gt;<br/>                &lt;li&gt;&lt;a class="{% block home %}{% endblock %}" href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;<br/>                &lt;li&gt;&lt;a class="{% block myaccount %}{% endblock %}" href="/profile/"&gt;My Account&lt;/a&gt;&lt;/li&gt;<br/>                {% if perms.staffing.add_staffrequest %}<br/>                 &lt;li&gt;&lt;a class="{% block createsr %}{% endblock %}" <br/>                  href="/create/staffrequest/"&gt;Staff Request&lt;/a&gt;&lt;/li&gt;<br/>                {% endif %}<br/>             &lt;/ul&gt;<br/>         {% endblock %}<br/><br/>         {% block real_content %}<br/>         &lt;div id="intro"&gt;<br/>             &lt;p&gt;Hello, {{ user.first_name }}.&lt;/p&gt;<br/>             &lt;p&gt;Please create a Staff Request here by filling out the form below.&lt;/p&gt;<br/>          &lt;/div&gt; &lt;!-- end intro --&gt;<br/><br/>          &lt;div id="logout"&gt;<br/>           &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;<br/>          &lt;/div&gt;<br/>          {% endblock %}<br/><br/>     &lt;/div&gt; &lt;!-- end content --&gt;<br/><br/><br/>  {% endblock %} <br/>  {% block footer %}{% endblock %}<br/> &lt;/body&gt; <br/> &lt;/html&gt;<br/></code></pre><br/><br/><p>and your home.html should look like</p><br/><br/><pre><code>{% extends "base.html" %}<br/>{% block title %}Home Portal{% endblock %}<br/><br/>{% block home %}current{% endblock %}<br/><br/><br/>{% block real_content %}<br/><br/>&lt;div id="content"&gt;<br/><br/> &lt;div id="intro"&gt;<br/>  &lt;p&gt;Hello, {{ user.first_name }}.&lt;/p&gt;<br/>  &lt;p&gt;Please create a Staff Request here by filling out the form<br/>  below.&lt;/p&gt;<br/> &lt;/div&gt; &lt;!-- end intro --&gt;<br/> &lt;div id="logout"&gt;<br/>  &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;<br/> &lt;/div&gt;<br/>&lt;/div&gt; &lt;!-- end content --&gt;<br/><br/>{% endblock %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A USER IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You will want to do this, I think, in a <em>view</em> not in the <em>template</em>.  So, something like:</p><br/><br/><pre><code>from django.http import HttpResponseRedirect<br/><br/>def myview(request):<br/>    if request.user.get_profile().is_store():<br/>        return HttpResponseRedirect("/path/")<br/><br/>    # return regular view otherwise<br/></code></pre><br/><br/><p>You could also use a <code>@decorator</code> for the view if you found yourself needing to do this a lot.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GUI DESIGN FOR MANAG DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/p/uml-to-django/" rel="nofollow">uml-to-django</a> might be of interest to you, though I can't personally vouch for it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN PERMISS CAN EDIT USER BUT CA N T EDIT HI PERMISSON HOW TO DO IT
    </pattern>
    <template>
<![CDATA[<p>Your current approach isn't going to work I'm afraid.</p><br/><br/><p>From the <a href="http://docs.djangoproject.com/en/dev/topics/auth/#creating-users" rel="nofollow">Django docs</a>:</p><br/><br/><blockquote><br/>  <p>If you have permission to add users, you have the power to create superusers, which can then, in turn, change other users.</p><br/></blockquote><br/><br/><p>So if you manage to block the editors from changing permissions, it will not help, because they could still create superusers that can.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PLIT VALU OF A STRING
    </pattern>
    <template>
<![CDATA[<p>You can call methods using the <code>{{ }}</code> -- but the method can't require any attributes. </p><br/><br/><p>What I would do in this case is add a method on your model that performs the desired behavior. Example:</p><br/><br/><pre><code>class Product(models.Model):<br/>    ...<br/>    def get_first_name(self):<br/>        if self.name:<br/>           return self.name.partition(' ')[0]<br/><br/>        return None<br/></code></pre><br/><br/><p>Then, in your template, you can call it as <code>{{ product.get_first_name }}</code>.</p><br/><br/><p>Your other option would be to write a custom filter, which would be marginally more complicated. See the <a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#howto-custom-template-tags" rel="nofollow">Django documentation on custom template tags</a> for more information.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAG COMMAND NOT FOUND BY CRON
    </pattern>
    <template>
<![CDATA[<p>The environment is likely not the same, so PYTHONPATH/PATH are not set. It might fail to find import django (or python/lib/site-packages).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON EGG CACH ACCESS DENI ERROR
    </pattern>
    <template>
<![CDATA[<p>Well, you are using some strange setuptools-enabled library.</p><br/><br/><p>But anyway, is there a problem for you to setup PYTHON_EGG_CACHE environment variable to any directory writable for application user?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEARCH CAPABL
    </pattern>
    <template>
<![CDATA[<ol><br/><li>Try <a href="http://haystacksearch.org/" rel="nofollow">Haystack</a>. It's pretty easy to setup.</li><br/><li><a href="http://lucene.apache.org/java/docs/" rel="nofollow">Apache Lucene</a> is full-text search engine written in Java.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN A SINGL RECORD AS JSON
    </pattern>
    <template>
<![CDATA[<p>From <a href="http://docs.djangoproject.com/en/dev/topics/serialization/#topics-serialization" rel="nofollow">the docs</a>:</p><br/><br/><blockquote><br/>  <p>The arguments to the serialize function are the format to serialize the data to (see Serialization formats) and a QuerySet to serialize.</p><br/></blockquote><br/><br/><p>Use <code>filter()</code> instead of <code>get()</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PYTHON ON DREAMHOST
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://pypi.python.org/pypi/django-debug-toolbar/0.8.1" rel="nofollow">Django Debug Toolbar</a>, as already mentioned, is damn useful.</p><br/><br/><p>But as long as Django is running in <a href="http://docs.djangoproject.com/en/dev/ref/settings/#debug" rel="nofollow">debug mode</a>, the brute force method equivalent to the <code>print</code> statement is to simply throw an exception.  Put whatever output you want in the exception's text, whenever you need a quick idea of you code's state, and voila... instant output and stacktrace.  This isn't a comprehensive solution, but it is a quick <code>print</code> statement style hack.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DO DJANGO PYTHON WEB DEVELOP USE XCODE 3.2
    </pattern>
    <template>
<![CDATA[<p>You can use XCode to program on Django, as it's plain Python 2.x and <a href="http://zovirl.com/2006/07/13/xcode-python/" rel="nofollow">XCode is a good tool for Python</a>.</p><br/><br/><p>Make sure that you learn the <a href="http://dougalmatthews.com/articles/2009/dec/14/django-its-just-python/" rel="nofollow">pythonic constructs before trying to make advanced things with Django</a>, as you might be trying to bend the framework to do some things that the language already does.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I VALID UNIQUE TOGETH FROM WITHIN THE MODEL
    </pattern>
    <template>
<![CDATA[<p>You have two options:</p><br/><br/><p>a) Have a try block where you save your model and capture the IntegrityError and deal with it. Something like:</p><br/><br/><pre><code>try:<br/>    new_accountadmin_form.save()<br/>except IntegrityError:<br/>    new_accountadmin_form._errors["account"] = "some message"<br/>    new_accountadmin_form._errors["is_master"] = "some message"<br/><br/>    del new_accountadmin_form.cleaned_data["account"]<br/>    del new_accountadmin_form.cleaned_data["is_master"]<br/></code></pre><br/><br/><p>b) In the clean() method of your form, check if the a row exists and raise a  <code>forms.ValidationError</code> with an appropriate message. Example <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#cleaning-and-validating-fields-that-depend-on-each-other" rel="nofollow">here</a>.</p><br/><br/><p><hr></p><br/><br/><p>So, b) it is... That is why I <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#cleaning-and-validating-fields-that-depend-on-each-other" rel="nofollow">referenced the documentation; all you need is there.</a></p><br/><br/><p>But it would be something like:</p><br/><br/><pre><code>class YouForm(forms.Form):<br/>    # Everything as before.<br/>    ...<br/><br/>    def clean(self):<br/>       """ This is the form's clean method, not a particular field's clean method """<br/>       cleaned_data = self.cleaned_data<br/><br/>       account = cleaned_data.get("account")<br/>       is_master = cleaned_data.get("is_master")<br/>       username = cleaned_data.get("username")<br/><br/>       if AccountAdmin.objects.filter(account=account, is_master=is_master).count() &gt; 0:<br/>           del cleaned_data["account"]<br/>           del cleaned_data["is_master"]<br/>           raise forms.ValidationError("Account and is_master combination already exists.")<br/><br/>       if AccountAdmin.objects.filter(account=account, username=username).count() &gt; 0:<br/>           del cleaned_data["account"]<br/>           del cleaned_data["username"]<br/>           raise forms.ValidationError("Account and username combination already exists.")<br/><br/>    # Always return the full collection of cleaned data.<br/>    return cleaned_data<br/></code></pre><br/><br/><p>For what it is worth - I just realized that your unique together above is referencing a field called username that is not represented in the model.</p><br/><br/><p>The clean method above is called after all clean methods for the individual fields are called.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPTGROUP WITH FORM.FIELDS.QUERYSET
    </pattern>
    <template>
<![CDATA[<p>I was able to figure it out using the example given on <a href="http://dealingit.wordpress.com/2009/10/26/django-tip-showing-optgroup-in-a-modelform/" rel="nofollow">this blog</a></p><br/><br/><p>views.py</p><br/><br/><pre><code>form.fields['template'].choices = templates_as_choices(request)<br/><br/>def templates_as_choices(request):<br/>    templates = []<br/>    default = []<br/>    user = []<br/>    for template in Template.objects.filter(default=1).order_by('name'):<br/>        default.append([template.id, template.name])<br/><br/>    for template in Template.objects.filter(user=request.user).order_by('name'):<br/>        user.append([template.id, template.name])<br/><br/>    templates.append(['Default Templates', default])<br/>    templates.append(['User Templates', user])<br/><br/>    return templates<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL MAP GEO LOC NOT USE KML
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/apis/maps/documentation/examples/marker-simple.html" rel="nofollow">This example</a> from Google is what you're looking for.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBMODUL IN A GIT PROJECT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>move many useful parts of it into an open-source project.</p><br/></blockquote><br/><br/><p>That means extract one or several directories (and their associated history) into several independant git repositories, each one pushed to a public GitHub repo.</p><br/><br/><ul><br/><li><p>To extract a sub-directory from a Git repo, see the <a href="http://stackoverflow.com/questions/2538245/extract-part-of-a-git-repository"><code>filter-branch</code> command in this SO question</a><br><br/>(also in:</p><br/><br/><ul><br/><li>"<a href="http://stackoverflow.com/questions/920165/howto-extract-a-git-subdirectory-and-make-a-submodule-out-of-it">Howto extract a git subdirectory and make a submodule out of it?</a>"  </li><br/><li><a href="http://stackoverflow.com/questions/359424/detach-subdirectory-into-separate-git-repository">Detach subdirectory into separate Git repository</a><br><br/>)</li><br/></ul></li><br/><li>to reference those new repositories, reference them in your original private repo to see them again directly from your current Django project: see <a href="http://stackoverflow.com/questions/1979167/git-submodule-update/1979194#1979194">true nature of submodules</a>.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL NOT WORK IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>As the other answer hints, its because <code>.values(...)</code> returns a list and <code>serializers</code> is meant for Querysets. However you can still do this without needing raw SimpleJSON quite simply:</p><br/><br/><pre><code>queryset = Model.objects.filter(make__slug__exact=make)<br/>return serializers.serialize("json", queryset, fields=('slug', 'name'))<br/></code></pre><br/><br/><p>We're basically telling the serializer to do the field-limiting instead of letting the Queryset doing it. I've used some shortcuts in there to cut the query down to one line too but that's up to you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MY EXTJ COMBOBOX IS NOT FILL DYNAM
    </pattern>
    <template>
<![CDATA[<p>If you are expecting the ComboBox to behave more like an HTML select field then add to your ComboBox config the property:</p><br/><br/><pre><code>triggerAction: 'all'<br/></code></pre><br/><br/><p>This will ensure that all items in the store will be displayed when the field's trigger button is clicked.</p><br/><br/><p>The ComboBox config will also be needing a valueField property:</p><br/><br/><pre><code>valueField: 'dblist'<br/></code></pre><br/><br/><p>Also, explicitly calling the store's load method is not necessary. The ComboBox will handle that for you at the appropriate time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COUNT ( ) WORK THE WAY I EXPECT IN MY CODE
    </pattern>
    <template>
<![CDATA[<p>The issue here is that you've mixed up two methods with the same name.</p><br/><br/><p>On a sequence in Python, <code>count()</code> works exactly has Dustin describes to "count the number of occurrences of the parameter in the sequence."</p><br/><br/><p>The code you're referencing however, is from a Django model.  There, calling <code>count()</code> on the filter object is an alias for the SQL grouping function <code>COUNT</code>, which sums up the number of matching rows.</p><br/><br/><p>In essence, the <code>count</code> in your initial example and the <code>count</code> in the two examples after that aren't the same method at all.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO STRING RENDER ISSU
    </pattern>
    <template>
<![CDATA[<pre><code>var userName = {{name}}<br/></code></pre><br/><br/><p>Comes out when you view the HTML source as:</p><br/><br/><pre><code>var userName = Bob<br/></code></pre><br/><br/><p>Which is an obvious mistake: missing quotes. But, simply putting quotes around it:</p><br/><br/><pre><code>var userName = '{{name}}';<br/></code></pre><br/><br/><p>isn't good enough for the general case. What if the string contains a quote character, or a backslash, or a newline? Best case, your app falls over. Worst case, cross-site-scripting security hole. What's more a <code>&amp;</code> or <code>&lt;</code> character in the name won't come through properly either, as Django autoescape will probably assume it's in a non-CDATA HTML context and inappropriately &amp;-escape them.</p><br/><br/><p>Use the <code>escapejs</code> filter instead:</p><br/><br/><pre><code>var userName = '{{name|escapejs}}';<br/></code></pre><br/><br/><p>Alternatively use a JSON encoder to turn any basic datatype into JavaScript literal format, not just string. There's <a href="http://docs.python.org/library/json.html" rel="nofollow">json</a> in the standard library from 2.6, but note this doesn't escape the <code>&lt;</code> character in strings, so for injecting code into a script element you'd have to escape that manually to prevent a <code>&lt;/script&gt;</code> sequence ending the CDATA element prematurely.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHIFT TO POSTGRESQL FAIL TO IMPORT FIXTUR STATE DATA TOO LONG
    </pattern>
    <template>
<![CDATA[<p>Sqlite does not enforce the length of a varchar(n).  From the sqlite FAQ:</p><br/><br/><p><a href="http://www.sqlite.org/faq.html#q9" rel="nofollow">http://www.sqlite.org/faq.html#q9</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH JSON INPUT RENDER EMPTI
    </pattern>
    <template>
<![CDATA[<p>Solved - I put the html page inside the django app, so that the jqgrid url became just <code>url:'/json_test/'</code> and then it worked. Must be something harcoded into jqgrid that only permits local urls?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SQLITE3 DATABAS TABL TO MYSQL WITH PYTHON WITHOUT DUMP FILE
    </pattern>
    <template>
<![CDATA[<p>The reason the "messy" scripts are required is that it's generally a difficult problem to solve.</p><br/><br/><p>If you are lucky there won't be too many schema incompatibilities between the databases.</p><br/><br/><p>These may help</p><br/><br/><p><a href="http://www.djangosnippets.org/snippets/14/" rel="nofollow">db_dump.py</a><br><br/><a href="http://www.djangosnippets.org/snippets/167/" rel="nofollow">dbpickle.py</a><br><br/><a href="http://stackoverflow.com/questions/426378">http://stackoverflow.com/questions/426378</a>  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALID QUESTION
    </pattern>
    <template>
<![CDATA[<p>Couldn't you just put a hidden input in each form w/ an identifier, and then just check for that in your view?</p><br/><br/><pre><code>&lt;h1&gt;Address&lt;/h1&gt;<br/>&lt;form method="post" id="adress_form" action=/profile/update/&gt;<br/>&lt;input type="hidden" name="_address" /&gt;<br/>{{ form_address.as_p }}<br/><br/>&lt;p&gt;&lt;button type="submit"&gt;Save&lt;/button&gt;&lt;/p&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>and then in the view:</p><br/><br/><pre><code>if '_address' in request.POST:<br/>    if form_adress.is_valid():<br/>        ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROFIL A VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>three words: <a href="http://github.com/robhudson/django-debug-toolbar" rel="nofollow">Django Debug Toolbar</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRON JOB LINUX PYTHON
    </pattern>
    <template>
<![CDATA[<p>If you have an executable, say <code>/home/bin/foobar</code>, that restarts the script, and want to run it (say) every 10 minutes, the crontab entry needs to be:</p><br/><br/><pre><code>*/10 * * * *  /home/bin/foobar<br/></code></pre><br/><br/><p>which says to run it at every minute divisible by 10, every hour, every day.</p><br/><br/><p>If you save this (and any other periodic jobs you want to run) as, say, <code>/home/bin/mycrontab</code>, then just do <code>crontab /home/bin/crontab</code> and the system will do the rest (the script runs with your userid).</p><br/><br/><p>To see what periodic jobs you have already scheduled under the current userid, if any, do <code>crontab -l</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRI TO ACHIEV A JOIN USE THE COMMENT CONTRIB IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><a href="http://charlesleifer.com/blog/generating-aggregate-data-across-generic-relations/" rel="nofollow">http://charlesleifer.com/blog/generating-aggregate-data-across-generic-relations/</a><br/>http://djangosnippets.org/snippets/2034/</p><br/><br/><p>UPDATE:<br/><a href="http://github.com/coleifer/django-generic-aggregation/" rel="nofollow">http://github.com/coleifer/django-generic-aggregation/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT QUESTION
    </pattern>
    <template>
<![CDATA[<p>Here's what Ignacio meant. That said, I probably agree with Daniel that you should do this in the view.</p><br/><br/><pre><code>&lt;table&gt;<br/>{% for item in items %}<br/>  &lt;tr&gt;<br/>    &lt;td&gt;{% item.name %}&lt;/td&gt;<br/>    {% for dday in days %}<br/>    &lt;td&gt;<br/>      {% ifequal dday item.day %}y{% else %}n{% endifequal %}<br/>    &lt;/td&gt;<br/>    {% endfor %}<br/>  &lt;/tr&gt;<br/>{% endfor %}<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>I've called the days loop variable 'dday' to make it clear that the lookup <code>item.day</code> here is actually getting <code>item['day']</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GROUP QUERI ITEM
    </pattern>
    <template>
<![CDATA[<p>You can do the grouping in your view by using <code>itertools.groupby()</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITER OVER THE OPTION IN A CUSTOM SELECT FIELD
    </pattern>
    <template>
<![CDATA[<p>The magic of django forms is that you don't need to do all that. By calling the form's select field by name, it will render it and select the right option as based on initial/instance data passed into the form on instantation.</p><br/><br/><pre><code>{{form.working_month}}<br/></code></pre><br/><br/><p>If you're still having troubles, can you post the form class as well?</p><br/><br/><p>Good luck!</p><br/><br/><p><strong>EDIT</strong></p><br/><br/><p>In looking at the first comment on the link you posted, this issue is addressed. The commenter included this code</p><br/><br/><pre><code>def __init__(self, *args, **kwargs):<br/>  forms.MultiValueField.__init__(self, *args, **kwargs)<br/>  self.fields = (forms.CharField(), forms.CharField(),)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOMETH TO APPEAR ON EVERI PAGE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You want a <a href="http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/" rel="nofollow">context processor</a>.  The data they generate is included in every context created as a <code>RequestContext</code>.  They are perfect for this.</p><br/><br/><p>Combined with base templates that show common things, you can get rid of lots of need for copying and pasting code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFICULTI GET FLUP FCGI SCRIPT TO WORK
    </pattern>
    <template>
<![CDATA[<p>The exit status 116 and 118 were coming from suexec. By reading the <a href="http://svn.apache.org/viewvc/httpd/httpd/trunk/support/suexec.c?view=markup#l526" rel="nofollow">source code</a>, I found that these errors are caused by the file/dir being writable by group or others, which suexec considers as a security issue. Removing write access from group fixed the problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN WIDGET FOR MANY TO MANI RELAT
    </pattern>
    <template>
<![CDATA[<p>Ok, this problem got triaged. I'm marking this as a solution to close it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTRA VARIABL ON A CUSTOM 404 TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>The fact that you can access <code>request_path</code> but not <code>extra_var</code> suggests to me your view is not being called properly, since <code>request_path</code> is passed automatically to the <code>404.html</code> template, per the <a href="http://docs.djangoproject.com/en/dev/topics/http/views/#the-404-page-not-found-view" rel="nofollow">documentation</a>:</p><br/><br/><blockquote><br/>  <p>If you don't define your own 404 view<br/>  -- and simply use the default, which is recommended -- you still have one<br/>  obligation: you must create a <code>404.html</code><br/>  template in the root of your template<br/>  directory. The default 404 view will<br/>  use that template for all 404 errors.<br/>  The default 404 view will pass one<br/>  variable to the template:<br/>  <code>request_path</code>, which is the URL that<br/>  resulted in the 404.</p><br/></blockquote><br/><br/><p>I think you need to give <code>handler404</code> a string, rather than a module, like this:</p><br/><br/><pre><code>handler404 = 'myproject.myapp.views.handler404'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AD A MANYTOMANYFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Same thing, i answer your another question <a href="http://stackoverflow.com/questions/2098696">http://stackoverflow.com/questions/2098696</a> basicly this error is because your code in models (ORM) change but your database isn't, and django-evolution doesn't fix many problems with changes in the database, i suggest you look for django-extensions (http://code.google.com/p/django-command-extensions/) and the command sqldiff, but look my another answer</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXAMPLE.COM IN MY CODE
    </pattern>
    <template>
<![CDATA[<p>Like whrd commented, you can't call <code>update(...)</code> on the result of calling <code>get(...)</code> on a <code>QuerySet</code>. A better way of changing your code is as follows:</p><br/><br/><pre><code>from django.core.management import setup_environ<br/>from register import settings<br/>setup_environ(settings)<br/><br/>from django.contrib.sites.models import Site<br/><br/>obj=Site.objects.get(id=1)<br/>obj.name='sss'<br/>obj.save()<br/>print obj<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JO WIDGET NOT RENDER WHEN RETURN IN RESPONS TO XHRPOST
    </pattern>
    <template>
<![CDATA[<p>My guess would be that your Tabs and BorderContainer do not have a height. They won't automagically attach themselves to a parent container, you must be explicit about their size. dojo.parser.parse portion is required based on how you are injecting the content, though if "centerPane" were a ContentPane you could just attr("content", response) and the parsing would be done for you. Also, all BorderContainer's need a region="center" (one), and neither of your above snippets contain one. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIT REPOSITORI TOGETH WITH DJANGO WEB SERVER ONE DEVELOP
    </pattern>
    <template>
<![CDATA[<p>First you should be able to have some form of communication between the git repositories you've got on your local machine, the test server and the live server. Git is very flexible in this regard so a few of the options are:</p><br/><br/><ol><br/><li>Have the test and live server pull<br/>from your local repository.</li><br/><li>From development push to the test and live servers on appropriate times.</li><br/><li>From development push to production and have the test server pull from production.</li><br/><li>Have a fourth location where you'll store your git repo and push from development to that repository and have test and live pull from there.</li><br/></ol><br/><br/><p>Either way, once you reach a stage where you'll want to try something on the test server, create a tag. On the test server checkout that tag (<code>git checkout &lt;tagname&gt;</code>) and do your testing. (And once you are satisfied that it works the way you want, you can also use that tag on production. But I guess that's pretty obvious. :) )</p><br/><br/><p>The intermediate step, between creating the tag and checking it out, completely depends on your setup. Using the fourth option I just mentioned you'll need to push your tag first and fetch it on the testing machine. So the whole process would look similar to this.</p><br/><br/><pre><code>&lt;development&gt;$ git tag v1.0<br/>&lt;development&gt;$ git push<br/>&lt;development&gt;$ git push --tags<br/><br/>&lt;testing&gt;$ git fetch --tags<br/>&lt;testing&gt;$ git checkout v1.0<br/><br/>&lt;live&gt;$ git fetch --tags<br/>&lt;live&gt;$ git checkout v1.0<br/></code></pre><br/><br/><p>Optionally you can (ab)use <code>git decribe</code> to check which tag you've got checked out at currently.</p><br/><br/><p>Regarding the branching and merging: what I like to do is create a branch for every feature I'm working on. Once I complete that feature I merge it back to master. So If I need to release before a feature is done, I can just leave that feature (and every releated) commit out of the release.</p><br/><br/><p>But this is just one way of doing it. You can setup the workflow to suit <em>your</em> situation. Especially regarding the use of branches. A more complex setup is described by Vincent Driessen in his article <a href="http://nvie.com/git-model" rel="nofollow">A successful Git branching model</a>.</p><br/><br/><p>Disclaimer: I'm using git almost exclusively with one authoritative repo on a server (the fourth option). I haven't personally tried the other setups I suggested...</p><br/><br/><p><strong>Update to respond to the comment by iJames:</strong></p><br/><br/><p>To make dev push to and test pull from a new/different repository by default from now on, see the accepted answer of <a href="http://stackoverflow.com/questions/520650/">this question</a>:</p><br/><br/><pre><code>$ git branch --set-upstream master origin/master<br/></code></pre><br/><br/><p>With regards to the terminology:</p><br/><br/><ul><br/><li>Push is relatively simple: it pushes your local commits to a different repository. See for instance the <a href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#pushing-changes-to-a-public-repository" rel="nofollow">Git User's Manual</a>.</li><br/><li>Fetching does the opposite, it "will update all of the remote-tracking branches to the latest version found in the repository". (Quote from the <a href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html#Updating-a-repository-With-git-fetch" rel="nofollow">Git User's Manual</a>.)</li><br/><li>The pull command not only fetches the changes in, but also merges them into the current branch. (See <a href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html#_using_git_for_collaboration" rel="nofollow">the example</a> in the official Git tutorial.)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON FUNCTION IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>What do you mean by "it doesn't like the split"? How does it manifest its dislike?  </p><br/><br/><p>If I remember correctly, you can not pass any arbitrary arguments to methods, that are called from the django template and the identifiers, that can be used in the templates can only consist of a-z, A-Z, 0-9, underscores and dots (where dots signify lookup: dictionary->attribute->method->list-index).</p><br/><br/><p>There are at least four ways to achieve what you want:</p><br/><br/><ul><br/><li>make the appropriately prepared data available as an attribute of your model (or whatever that is), by pre-processing it</li><br/><li>make the data available as a method of your model and make sure, that the method takes no required arguments, besides <code>self</code></li><br/><li><p>populate the model instances in the view</p><br/><br/><pre><code> for newsletter in newsletters:<br/>      setattr(newsletter, 'basepath',<br/>              newsletter.NewsletterPath.split('/')[-1])<br/></code></pre><br/><br/><p>(or something along these lines)</p></li><br/><li>implement a custom filter tag, that will handle the split (easier, than you might think)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYMBOL LINK WHEN GO BETWEEN LINUX AND WINDOW
    </pattern>
    <template>
<![CDATA[<p>Instead, of running a server on Windows just to test for IE, you can run a server from on an IP that identifies your machine on your network. Just run</p><br/><br/><pre><code>python manage.py runserver ad.dr.re.ss:8000<br/></code></pre><br/><br/><p>To find the (local) address of your machine, access your router logs to see who's connected (I'm sure there's a better way, but this worked for me).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMEOUT FOR URLFETCH IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>You can set it using the <code>deadline</code> argument of the <a href="http://code.google.com/appengine/docs/python/urlfetch/fetchfunction.html" rel="nofollow">fetch function</a>. From <a href="http://code.google.com/appengine/docs/python/urlfetch/overview.html" rel="nofollow">the docs</a>:</p><br/><br/><blockquote><br/>  <p>The deadline can be up to a maximum of 60 seconds for request handlers and 10 minutes for tasks queue and cron job handlers. If deadline is None, the deadline is set to 5 seconds.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CURRENT SERV MY STATIC FILE IN DJANGO. HOW DO I USE APACHE2 TO DO THI
    </pattern>
    <template>
<![CDATA[<p>I would read Django's <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">official static files docs</a> and <a href="http://docs.djangoproject.com/en/dev/howto/deployment/modpython/#serving-media-files" rel="nofollow">apache mod_python documentation</a>.</p><br/><br/><blockquote><br/>  <p>This example sets up Django at the<br/>  site root but explicitly disables<br/>  Django for the <strong>media</strong> subdirectory and<br/>  any URL that ends with .jpg, .gif or<br/>  .png:</p><br/></blockquote><br/><br/><pre><code>&lt;Location "/"&gt;<br/>    SetHandler python-program<br/>    PythonHandler django.core.handlers.modpython<br/>    SetEnv DJANGO_SETTINGS_MODULE mysite.settings<br/>&lt;/Location&gt;<br/><br/>&lt;Location "/media"&gt;<br/>    SetHandler None<br/>&lt;/Location&gt;<br/><br/>&lt;LocationMatch "\.(jpg|gif|png)$"&gt;<br/>    SetHandler None<br/>&lt;/LocationMatch&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPDAT MY VERSION OF DJANGO
    </pattern>
    <template>
<![CDATA[<p>read about this in :</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/install/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/install/</a></p><br/><br/><h3>For installing Django to be able to update to the latest code in trunk:</h3><br/><br/><blockquote><br/>  <p>If you'd like to be able to update<br/>  your Django code occasionally with the<br/>  latest bug fixes and improvements,<br/>  follow these instructions:</p><br/>  <br/>  <p>1.Make sure that you have Subversion installed, and that you can run its<br/>  commands from a shell. (Enter svn help<br/>  at a shell prompt to test this.)</p><br/>  <br/>  <p>2.Check out Django's main development branch (the 'trunk') like so:</p><br/>  <br/>  <p>svn co<br/>  <a href="http://code.djangoproject.com/svn/django/trunk/" rel="nofollow">http://code.djangoproject.com/svn/django/trunk/</a><br/>  django-trunk<br/>  3.Next, make sure that the Python interpreter can load Django's code.<br/>  There are various ways of<br/>  accomplishing this. One of the most<br/>  convenient, on Linux, Mac OSX or other<br/>  Unix-like systems, is to use a<br/>  symbolic link:</p><br/>  <br/>  <p>ln -s <code>pwd</code>/django-trunk/django<br/>  SITE-PACKAGES-DIR/django (In the above<br/>  line, change SITE-PACKAGES-DIR to<br/>  match the location of your system's<br/>  site-packages directory, as explained<br/>  in the "Where are my site-packages<br/>  stored?" section above.)</p><br/>  <br/>  <p>Alternatively, you can define your<br/>  PYTHONPATH environment variable so<br/>  that it includes the django-trunk<br/>  directory. This is perhaps the most<br/>  convenient solution on Windows<br/>  systems, which don't support symbolic<br/>  links. (Environment variables can be<br/>  defined on Windows systems from the<br/>  Control Panel.)</p><br/>  <br/>  <p>What about Apache and mod_python?</p><br/>  <br/>  <p>If you take the approach of setting<br/>  PYTHONPATH, you'll need to remember to<br/>  do the same thing in your Apache<br/>  configuration once you deploy your<br/>  production site. Do this by setting<br/>  PythonPath in your Apache<br/>  configuration file.</p><br/>  <br/>  <p>More information about deployment is<br/>  available, of course, in our How to<br/>  use Django with mod_python<br/>  documentation.</p><br/>  <br/>  <p>4.On Unix-like systems, create a symbolic link to the file<br/>  django-trunk/django/bin/django-admin.py<br/>  in a directory on your system path,<br/>  such as /usr/local/bin. For example:</p><br/>  <br/>  <p>ln -s<br/>  <code>pwd</code>/django-trunk/django/bin/django-admin.py<br/>  /usr/local/bin This simply lets you<br/>  type django-admin.py from within any<br/>  directory, rather than having to<br/>  qualify the command with the full path<br/>  to the file.</p><br/>  <br/>  <p>On Windows systems, the same result<br/>  can be achieved by copying the file<br/>  django-trunk/django/bin/django-admin.py<br/>  to somewhere on your system path, for<br/>  example C:\Python24\Scripts.</p><br/>  <br/>  <p>You don't have to run python setup.py<br/>  install, because you've already<br/>  carried out the equivalent actions in<br/>  steps 3 and 4.</p><br/>  <br/>  <p>When you want to update your copy of<br/>  the Django source code, just run the<br/>  command svn update from within the<br/>  django-trunk directory. When you do<br/>  this, Subversion will automatically<br/>  download any changes</p><br/></blockquote><br/><br/><h3>For updating Django from stable release to another stable release:</h3><br/><br/><blockquote><br/>  <p>If you are upgrading your installation of Django from a previous<br/>  version, you will need to uninstall the old Django version before<br/>  installing the new version.</p><br/>  <br/>  <p>If you installed Django using setup.py install, uninstalling is as<br/>  simple as deleting the django directory from your Python<br/>  site-packages.</p><br/>  <br/>  <p>If you installed Django from a Python egg, remove the Django .egg<br/>  file, and remove the reference to the egg in the file named<br/>  easy-install.pth. This file should also be located in your<br/>  site-packages directory.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SETUP
    </pattern>
    <template>
<![CDATA[<p>Ubuntu is far and away a better platform nowadays.  I'm a refugee from RHEL and Fedora.  Get Ubuntu 9.10, and if you'd like, spawn it on Amazon ec2 for total flexibility (i.e. launch it in about 90 seconds, play around, do what you want, delete it, and only pay a buck).  Otherwise, just use Ubuntu on the desktop.</p><br/><br/><p>Ubuntu has Python 2.6 by default so you don't have to go out and find weird upgrade paths.  Also Ubuntu has ready-to-go installations for django 1.1.1 (the latest and greatest) that integrate with Apache, etc...</p><br/><br/><p>In other words, with zero usage of PIP, easy_install or source installations, you can get running with Django on Ubuntu/Apache.</p><br/><br/><p>Once you're comfortable, PIP is the tool you should use for all non-stock python library installations as it's more up to date.</p><br/><br/><p>MySQL is easier than Postgres but it doesn't really matter either way.  </p><br/><br/><p>=== edit ====<br/>I forgot to add that I use mod_wsgi.  I forgot all about it since the Ubuntu Apache installation was so easy that I hardly had to even think about it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django does a great job auto-generating forms from your <a href="http://docs.djangoproject.com/en/1.1/topics/forms/modelforms/#topics-forms-modelforms" rel="nofollow">model definitions.</a></p><br/><br/><p>The first step might be to create a Django model that mirrors your existing database.</p><br/><br/><p>Regarding the checkbox/textfield stuff:</p><br/><br/><p>Django has a great separation between <strong>fields</strong> and <strong>widgets</strong>. You may have a <strong>IntegerField</strong> that stores numbers, but you can vary the widget that is displayed to the user when they want to edit that number. In some cases you might have an input box, in others a textarea, or perhaps a dropdown. The <strong>field</strong> will take care of details such as type conversion and validation, the widget determines what the form field looks like.</p><br/><br/><p>Certain field types have default widgets associated with them, but you can override them.</p><br/><br/><p>Also, note that there is a <strong>difference</strong> between <strong>form fields</strong> and <strong>model fields</strong>.</p><br/><br/><hr><br/><br/><p>To do it dynamically, can add items to the self.fields SortedDict on the fly. I.E:</p><br/><br/><pre><code>from django.forms.forms import Form<br/>from django.forms.fields import CharField<br/>class FunkyForm(Form):<br/>    def __init__(self, *args, **kwargs):<br/>        super(FunkyForm, self).__init__(*args, **kwargs)<br/>        for item in range(5):<br/>            self.fields['test_field_%s' % item] = CharField(max_length=255)<br/></code></pre><br/><br/><p>Will give a you a form class that instantiates with 5 dynamically generated CharFields. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL ISTARTSWITH NOT PRODUC CASE INSENSIT QUERI
    </pattern>
    <template>
<![CDATA[<p>MySQL does not support <code>ILIKE</code>.</p><br/><br/><p>By default MySQL's <code>LIKE</code> compares strings case-insensitively.</p><br/><br/><p>Edit:<br><br/>Thanks to the OP for providing additional information about the collation.<br><br/>The current collation, <code>utf8_bin</code> is case-sensitive.<br><br/>In contrast, <code>utf8_general_ci</code> is case-insensitive.</p><br/><br/><p>It's probably easiest to modify collation.<br><br/>Something like this:</p><br/><br/><pre><code>ALTER TABLE 'mydb'.'mytable' <br/>MODIFY COLUMN 'song_title' VARCHAR(254) <br/>CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT ENGIN TO RENDER IN MEMORI TEMPLAT
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/dev/ref/templates/api/#using-the-template-system" rel="nofollow">Instantiate <code>Template</code></a> with the string to use as a template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR USE DJANGO S MODEL FILTER SYSTEM
    </pattern>
    <template>
<![CDATA[<p>You can use <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="nofollow">Q objects</a> to do what you want, by bitwise OR-ing them together:</p><br/><br/><pre><code>from django.db.models import Q<br/>Publisher.objects.filter(Q(name__contains="press") | Q(country__contains="U.S.A"))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QOOXDOO REST JSON REQUEST PROBLEM UNEXPECT TOKEN AND THEN TIMEOUT
    </pattern>
    <template>
<![CDATA[<p>The problem is probably with this line:</p><br/><br/><p>req.toggleCrossDomain();</p><br/><br/><p>crossDomain is false by default, so toggleCrossDomain sets it to true. This forces qx.io.remote.Request to use the script transport, which doesn't work like a regular XMLHttpRequest: The request needs to contain an id, while the server's response must use the same id and wrap the actual response in a call to qx.io.remote.transport.Script._requestFinished(). This is explained in greater detail in the documentation for the qx.io.remote package:</p><br/><br/><p><a href="http://demo.qooxdoo.org/current/apiviewer/#qx.io.remote" rel="nofollow">http://demo.qooxdoo.org/current/apiviewer/#qx.io.remote</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD PROGRESS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is something you'll have to handle on the client-side to provide the actual progress bar, so using something like <a href="http://jquery.com" rel="nofollow">jQuery</a> is probably ideal here.</p><br/><br/><p>As it turns out, <a href="http://www.lonelycode.com/2009/06/09/django-file-upload-progress-bar-without-flash/" rel="nofollow">someone had the same problem and wrote up a blog post with how they solved it using jQuery</a>.  It uses <a href="http://djangosnippets.org/snippets/678/" rel="nofollow">this snippet</a> and the <a href="http://plugins.jquery.com/project/timers" rel="nofollow">jQuery timers</a> plugin.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AJAX WHEN ARE THESE IMPLEMENT
    </pattern>
    <template>
<![CDATA[<p>Since you are new to Javascript development, I'll try with relatable examples.</p><br/><br/><p>You can vote questions up or down on StackOverflow. Your vote action is sent to the server, and it gets recorded there. Had it not been for AJAX (and some other techniques), the entire page would need to be refreshed for that one action. AJAX solves the problem of asynchronously communicating with a server without requiring full page reloads.</p><br/><br/><p>jQuery is a library that provides convenient access to common Javascript tasks such as DOM manipulation, AJAX handling, etc. jQuery also hides away browser differences and provides a consistent interface for the end user. To illustrate these two points, see these examples:</p><br/><br/><h3>finding all div elements on the page</h3><br/><br/><pre><code>// Javascript<br/>var divs = document.getElementsByTagName("div")<br/><br/>// jQuery<br/>$("div")<br/></code></pre><br/><br/><h3>adding a click event handler to a button (illustrates browser differences)</h3><br/><br/><p>With pure Javascript, it's best to create a cross-browser method to add events, as you surely wouldn't want to write this code every single time. Source - <a href="http://www.scottandrew.com/weblog/articles/cbs-events" rel="nofollow">http://www.scottandrew.com/weblog/articles/cbs-events</a></p><br/><br/><pre><code>function addEvent(obj, evType, fn, useCapture){<br/>    if (obj.addEventListener) { // standards-based browsers<br/>        obj.addEventListener(evType, fn, useCapture);<br/>        return true;<br/>    } else if (obj.attachEvent) { // IE<br/>        var r = obj.attachEvent("on"+evType, fn);<br/>        return r;<br/>    } else { // some unknown browser<br/>        alert("Handler could not be attached");<br/>    }<br/>}<br/></code></pre><br/><br/><p>Once this is setup (one-time only), you can add events to any elements using this function.</p><br/><br/><pre><code>// Javascript<br/>var button = document.getElementById("buttonID");<br/>addEvent(button, "click", function() { alert("clicked"); }, false);<br/><br/>// jQuery (contains code similar to above function to handle browser differences)<br/>$("#buttonID").click(function() { alert("clicked"); });<br/></code></pre><br/><br/><p>AJAX is part of Javascript and not a separate technology in itself. You would use AJAX to avoid doing full page refreshes when you need to send/receive data from the server.</p><br/><br/><p>jQuery, MooTools, Dojo, Ext.JS, Prototype.JS, and many other libraries provide a wrapper around Javascript to abstract away browser differences, and provide an easier interface to work with. The question is would you want to do all of this re-work yourselves. If you're not exactly sure what re-work you may need to do, researching pure Javascript examples of common tasks such as <em>AJAX calls</em>, <em>DOM manipulation</em>, <em>event handling</em>, along with abstracting away browser quirks and comparing those to examples to equivalents in libraries such as jQuery might be a good start.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELFORM TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It seems to me that your problem is in the view, you should be doing something like this:</p><br/><br/><pre><code>@login_required<br/>def yazi_ekle(request):<br/>        yazim = YaziForm() # Look at the (), they are needed for instantiation<br/>        return render_to_response('yazi/save.html', {'YaziForm': yazim}) # Sending the form instance to the context, not the form class<br/></code></pre><br/><br/><p>Now, you have a variable named YaziForm in your template context. Django forms autorender to a bunch of table rows with the widgets as default, so in your file yazi/save.html, do this</p><br/><br/><pre><code>&lt;form method="post" action=""&gt;<br/>&lt;table&gt;<br/>{{YaziForm}}<br/>&lt;/table&gt;<br/>&lt;input type="submit" value="Submit Form"/&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>That will render your form as a table automatically, the of course you ahve to add the logic for the form under POST.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTILINGU AND LOCALEURL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I have the same problem, after rotation with positions in MIDDLEWARE_CLASSES I've got the right order:</p><br/><br/><pre><code>MIDDLEWARE_CLASSES = (<br/>    'django.contrib.sessions.middleware.SessionMiddleware', <br/>    'django.contrib.auth.middleware.AuthenticationMiddleware',<br/>    'django.contrib.sessions.middleware.SessionMiddleware',<br/>    #'django.middleware.locale.LocaleMiddleware',<br/>    'localeurl.middleware.LocaleURLMiddleware',<br/>    'multilingual.middleware.DefaultLanguageMiddleware',<br/>    'multilingual.flatpages.middleware.FlatpageFallbackMiddleware',<br/>    'django.middleware.common.CommonMiddleware', <br/>)<br/></code></pre><br/><br/><p>I comment #'django.middleware.locale.LocaleMiddleware' its doing the same as 'localeurl.middleware.LocaleURLMiddleware' I think.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWO WAY PARTIAL CREDIT CARD STORE ENCRYT
    </pattern>
    <template>
<![CDATA[<p>Before you go much further you should take a look at <a href="https://www.pcisecuritystandards.org/" rel="nofollow">PCI-DSS</a>, which governs exactly what processes you need to have in place to even consider storing encrypted card numbers. In short, you should seriously consider outsourcing to a 3rd party payment gateway.</p><br/><br/><p>If once you've understood the consequences you do want to go ahead, then again - follow the PCI guidelines. For symmetric encryption of card numbers you probably want to use <a href="http://stackoverflow.com/questions/172486/what-pure-python-library-to-use-for-aes-256-encryption">AES</a>, and draw up very strict <a href="http://stackoverflow.com/questions/1583553/how-to-properly-do-private-key-management/1584586#1584586">key management policies</a>.</p><br/><br/><p>If however you only want to store a partial card number, then PCI states you can store (at an absolute maximum) the first six and last four digits only.  The first six digits are all you need to identify a card type. The last four digits you may deem necessary to help prevent issues where a customer has near identical card numbers.</p><br/><br/><p>IMHO storing partial card numbers (in plain text) is what you want to do, and then outsource the handling of encryption, authorisation and settlement to a <a href="http://stackoverflow.com/questions/2022067/looking-for-a-payment-gateway">3rd party gateway</a>. The payment gateway will give you a unique token id for each card you pass to them, so that you can reference a unique card to perform re-authorisation or refunds etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2.6.4 DOE N T SUPPORT MOD PYTHON
    </pattern>
    <template>
<![CDATA[<p>mod_python must be compiled against the specific version of Python that the handler will be run in. At the time there was probably no Windows installer for mod_python built against 2.6.4, hence the hysteria.</p><br/><br/><p>In all fairness, you should probably be using <a href="http://code.google.com/p/modwsgi/" rel="nofollow">mod_wsgi</a> to run Django apps instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO PROJECT FROM MYSQL TO ORACL
    </pattern>
    <template>
<![CDATA[<p>You can query the oracle information schema (called Oracle Datadictionary) to query the list of constraints on all tables to identify the table name and column for the said constraint.</p><br/><br/><pre><code>select TABLE_NAME, COLUMN_NAME from user_cons_columns where CONSTRAINT_NAME = 'SYS_C004253'<br/></code></pre><br/><br/><p><strong>Update</strong></p><br/><br/><p>Due to security requirements the data dictionary is separated into distinct parts. User A cannot see tables and constraints from User B.</p><br/><br/><p>If you cannot find the information you can use the dba user-acount, who has global access and query the dba part of the data dictionary.</p><br/><br/><pre><code>connect system/&lt;the_secret_password&gt;<br/>select TABLE_NAME, COLUMN_NAME from dba_cons_columns <br/>where CONSTRAINT_NAME = 'SYS_C004253' and OWNER = 'USER'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH WSGI APP IMPORT ERROR
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>sys.path.insert(0, os.path.join(os.path.abspath(os.path.dirname(__file__)),'..'))<br/></code></pre><br/><br/><p>It puts your project folder at the first position and it uses os.path.join to go one directory up (which might be better on windows).</p><br/><br/><p>It might be the case that there is another "apps" module on your python path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGN VS TRIGGER
    </pattern>
    <template>
<![CDATA[<p>Neither. The best tool for this job is <a href="http://docs.djangoproject.com/en/dev/ref/validators/" rel="nofollow">model validation</a> - you can write your custom validation rule there and it will be enforced in the admin and your own apps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NULL WHEN USE LOCALHOST
    </pattern>
    <template>
<![CDATA[<p>Looks like <a href="http://en.wikipedia.org/wiki/Same_origin_policy" rel="nofollow">same origin policy</a> to me. To check, you can put your test html on the server (localhost:8000), load it from there and see if it works.  </p><br/><br/><p>To fix, you can use dataType 'jsonp' or 'script'. For example, for jsonp you only need to enclose response in js call: <code>random_callback(your_json_here);</code> where random_callback is value of 'callback' request parameter (generated by jquery).</p><br/><br/><p>More on the topic: <a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow">http://api.jquery.com/jQuery.ajax/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM MULTIPL TABL IN ONE QUERI WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Using <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#id4"><code>select_related()</code></a> will pre-populate the appropriate attributes:</p><br/><br/><pre><code>Employee.objects.select_related()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIGUR OUT SERV STATIC IMAG IN DJANGO DEV ENVIRON
    </pattern>
    <template>
<![CDATA[<p>This is a long post, basically summarizing all the things I learned about Django in order to get static files to work (it took me a while to understand how all the different parts fit together). </p><br/><br/><p>To serve static images in your development server (and later, your real server), you're going to have to do a few things (note specifically the third and fourth steps):</p><br/><br/><p><strong>Set MEDIA_ROOT</strong></p><br/><br/><p>MEDIA_ROOT is a constant which tells Django the <strong>physical</strong> path of the file (on your filesystem). Using your example, MEDIA_ROOT needs to be set to 'C:/siteURL/galleries/', like you wrote. MEDIA_ROOT is going to be used in one of the following steps, which is why we set it.</p><br/><br/><p><strong>Set MEDIA_URL</strong></p><br/><br/><p>MEDIA_URL is the "url" at which your images sit. In other words, whenever you want to get an image, the url to look for <em>starts with</em> MEDIA_URL. Usually this is <strong>not</strong> going to start with "http", since you're serving from your own server (my MEDIA_URL is usually set to '/site_media/', meaning to start from the root domain, then go to site_media etc.)</p><br/><br/><p><strong>Use MEDIA_URL</strong></p><br/><br/><p>MEDIA_URL doesn't work by magic, you actually have to use it. For example, when you're writing the HTML which gets a file, it needs to look like this:</p><br/><br/><pre><code>&lt;li&gt;&lt;img src="{{MEDIA_URL}}/160.jpg" /&gt;&lt;/li&gt;<br/></code></pre><br/><br/><p>See how I'm telling the template to use the MEDIA_URL prefix? That eventually translates to <code>'http://some-good-URL/galleries/160.jpg'</code>.</p><br/><br/><p>Note that to be able to actually use the MEDIA_URL in your templates, you're going to have to add the line <code>'django.core.context_processors.media'</code> to your <code>TEMPLATE_CONTEXT_PROCESSORS</code> setting in your settings.py file, if I'm not mistaken.</p><br/><br/><p><strong>Make your dev server serve static files</strong></p><br/><br/><p>In a real environment, you will configure files with addresses like "static_media" to be served without going through Django. But in a dev environment, you'll want to server them from Django as well, so you should add this generic line to the end of your urls.py file:</p><br/><br/><pre><code>if settings.DEBUG:<br/># Serve static files in debug.<br/>urlpatterns += patterns('',<br/>    (r'^site_media/(?P&lt;path&gt;.*)$', 'django.views.static.serve',<br/>    {'document_root': settings.MEDIA_ROOT,<br/>    'show_indexes' : True}),<br/>)<br/></code></pre><br/><br/><p>Note how that takes anything with the url "site_media/*" (which is actually my MEDIA_URL) and serves it from my MEDIA_ROOT folder, which is the place where the MEDIA_ROOT setting comes into play.</p><br/><br/><p><strong>Final note</strong></p><br/><br/><p>What confused me is that a lot of the things here are for convenience. For example, MEDIA_ROOT is only used in your debug url pattern, to tell Django where to load from. And MEDIA_URL is only  there to encourage you not to put in absolute URLs in all your HTML files, because then when you decide to move the files to a different server, you'd have to manually change them all (instead of just changing the MEDIA_URL constant).</p><br/><br/><p>Of course, none of this is necessary: you can hard-code the debug url patter with your own folder, make sure that the static files really are being server from the url (by visiting it in your browser), and then hand-code that <em>without</em> using the MEDIA_URL setting into the HTML file, just to make sure things work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSRF MIDDLEWAR WORK IN DJANGO S 404 ERROR PAGE
    </pattern>
    <template>
<![CDATA[<p>My idea is you should make <a href="http://docs.djangoproject.com/en/dev/topics/http/views/#customizing-error-views" rel="nofollow">your own error handler</a> and generate the token manually with django.middleware.csrf.get_token()</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIGUR OUT OBJECT CREAT 30 MIN AGO IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Maybe something like:</p><br/><br/><pre><code>import datetime<br/>created_time = datetime.datetime.now() - datetime.timedelta(minutes=30)<br/>old_objects = MyModel.objects.filter(created__lte=created_time)<br/></code></pre><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/queries/</a> for more information on creating queries, filtering, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG FEATUR
    </pattern>
    <template>
<![CDATA[<p>Have a look at <a href="http://github.com/zain/jogging" rel="nofollow">django-jogging</a>. It's a breeze to set up all kinds of custom logging with it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI UNICODEENCODEERROR WHEN I AM INSERT INTO THE MYSQL DATABAS
    </pattern>
    <template>
<![CDATA[<p>If you get an exception from Python then it's nothing to do with MySQL -- the error happens before the expression is sent to MySQL.  I would presume that the MySQLdb driver doesn't handle unicode.</p><br/><br/><p>If you are dealing with the raw MySQLdb interface this will be somewhat annoying (database wrappers like SQLAlchemy will handle this stuff for you), but you might want to create a function like this:</p><br/><br/><pre><code>def exec_sql(conn_or_cursor, sql, *args, **kw):<br/>    if hasattr(conn_or_cursor):<br/>        cursor = conn_or_cursor.cursor()<br/>    else:<br/>        cursor = conn_or_cursor<br/>    cursor.execute(_convert_utf8(sql), *(_convert_utf8(a) for a in args),<br/>                   **dict((n, _convert_utf8(v)) for n, v in kw.iteritems()))<br/>    return cursor<br/><br/>def _convert_utf8(value):<br/>    if isinstance(value, unicode):<br/>        return value.encode('utf8')<br/>    else:<br/>        return value<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON HOW TO GET VALU OF A MANI TO MANI FIELD
    </pattern>
    <template>
<![CDATA[<p>I may be wrong, but this should do it:</p><br/><br/><pre><code>class PersonHandler(BaseHandler):<br/>    model = Person<br/>    fields = ('id', ('friends', ('id', 'name')), 'name')<br/><br/>    def read(self, request):<br/>        return Person.objects.filter(...)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.PI RUNSERV NOT WORK
    </pattern>
    <template>
<![CDATA[<p>You don't have mysql-python module installed, thats why you getting that error.</p><br/><br/><p>You could find that module at</p><br/><br/><p><a href="http://pypi.python.org/pypi/MySQL-python/" rel="nofollow">http://pypi.python.org/pypi/MySQL-python/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URLS.PI FILENAM WITH A HASH POUND ( # ) SIGN
    </pattern>
    <template>
<![CDATA[<p>This isn't really Django's fault - the pound (#) sign in a URL means to load the specified anchor on the page. You need to encode the pound sign in your URL to get the browser to request the full image path:</p><br/><br/><pre><code>/home/user/project/static/upload/images/hello%23world.jpg<br/></code></pre><br/><br/><p>In a Django template you can use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#urlencode" rel="nofollow">urlencode</a> template tag.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER BY DATE IN DATETIM EXTRACT DATE FROM DATETIM
    </pattern>
    <template>
<![CDATA[<p>AFAIK the <code>__date</code> syntax is not supported yet by Django. There is a <a href="http://code.djangoproject.com/ticket/9596" rel="nofollow">ticket</a> open for this. </p><br/><br/><p>If your database has a function to extract date part then you can do this:</p><br/><br/><pre><code>popular = Entry.objects.filter(**conditions).extra(select = <br/>    {'custom_dt': 'to_date(dt_published)'}).order_by('-custom_dt')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT DATE PRINT FORMAT IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Django uses a field's <code>value_to_string</code> method to provide the string representation within a serializer. So you could define a custom field subclass that overrides this method:</p><br/><br/><pre><code>class MyDateTimeField(DateTimeField)<br/>    def value_to_string(self, obj):<br/>        val = self._get_val_from_obj(obj)<br/>        if val is None:<br/>            data = ''<br/>        else:<br/>            data = val.isoformat()<br/>        return data<br/></code></pre><br/><br/><p><strong>Edited</strong></p><br/><br/><p>Aargh, looks like I was looking in completely the wrong place. The <code>serializers.python.Serializer.handle_field</code> method actually checks for date-time fields and passes them through unchanged to the JSON encoder. So it's that encoder that we actually need to override.</p><br/><br/><pre><code>class MyJSONEncoder(DjangoJSONEncoder):<br/>    def default(self, o):<br/>        if isinstance(o, datetime.datetime):<br/>            return o.isoformat()<br/>        else:<br/>            return super(MyJSONEncoder, self).default(o)<br/></code></pre><br/><br/><p>Unfortunately, <code>wadofstuff</code> hardcodes the original DjangoJSONEncoder, so we'll need to override the serializer too.</p><br/><br/><pre><code>from wadofstuff.django.serializers.json import Serializer<br/>class BetterSerializer(Serializer):<br/>    """<br/>    Convert a queryset to JSON.<br/>    """<br/>    def end_serialization(self):<br/>        """Output a JSON encoded queryset."""<br/>        self.options.pop('stream', None)<br/>        self.options.pop('fields', None)<br/>        self.options.pop('excludes', None)<br/>        self.options.pop('relations', None)<br/>        self.options.pop('extras', None)<br/>        simplejson.dump(self.objects, self.stream, cls=MyJSONEncoder,<br/>            **self.options)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNCDB ERROR ONE OR MORE MODEL DID NOT VALID
    </pattern>
    <template>
<![CDATA[<p>Gee we just had this one; and I answered...</p><br/><br/><p>You have a number of foreign keys which django is unable to generate unique names for.</p><br/><br/><p>You can help out by adding "related_name" arguments to the foreignkey field definitions in your models. Eg:</p><br/><br/><pre><code> class notes(models.Model):<br/>    created_by = models.ForeignKey(User, related_name="note_created_by_user")<br/>    detail = models.ForeignKey(Details, related_name="noted_and_detailed")<br/></code></pre><br/><br/><p>See here for more. <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET EXECUT RAW SQL FOR A QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Django never creates the raw sql, so no. To prevent SQL injection, django passes the parameters separately to the database drivers at the last step. The best way to get the actual SQL is to look at your query log, which you cannot do before you execute the query.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL QUERI RESULT IN DJANGO SHELL
    </pattern>
    <template>
<![CDATA[<p>The <code>Victims.create_hotspots</code> method has no <code>return</code> statement.  What did you expect it to return?</p><br/><br/><p>Also, <code>Victims.create_hotspots</code> does not do a <code>save()</code> to save the Victims instance.</p><br/><br/><p>BTW, the use of raw SQL inside a models object is often a really poor idea.  You should consider making your "poi_table" a proper part of the Django model and using proper relational database design to avoid querying one class while trying to create an instance of another.</p><br/><br/><p>If you are trying to create "persistent aggregate" objects, you should consider doing something different.</p><br/><br/><pre><code>v= Victim.objects.create( radius, lat, lon, Poi.objects.all())<br/>v.save()<br/></code></pre><br/><br/><p>This will disentangle your two models allowing you to write simpler, less heavily-entangled models using simple Django processing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV A DOWNLOAD IN A GENER VIEW
    </pattern>
    <template>
<![CDATA[<p>Why do you want to do this with a generic view? It's very easy to do this without generic views:</p><br/><br/><pre><code>def song_download(request, song_id):<br/>    song = Song.objects.get(id=song_id)<br/>    fsock = open('/path/to/file.mp3', 'r')<br/>    response = HttpResponse(fsock, mimetype='audio/mpeg')<br/>    response['Content-Disposition'] = "attachment; filename=%s - %s.mp3" % \<br/>                                     (song.artist, song.title)<br/>    return response<br/></code></pre><br/><br/><p>I'm not sure if it's possible to make this work somehow with a generic view. But either way, using one is redundant here. With no template to render, the context that is automatically provided by the generic view is useless.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON.MANAGE.PI SYNCDB TO WORK
    </pattern>
    <template>
<![CDATA[<p>You need to run manage.py from the root folder of your project.  Looks like you are trying from the Django install folder.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO SEND HTML EMAIL WITH EMBED IMAG
    </pattern>
    <template>
<![CDATA[<p><a href="http://djangosnippets.org/snippets/285/" rel="nofollow">http://djangosnippets.org/snippets/285/</a></p><br/><br/><p>You have to use MultiPart and cid:. It is almost always a bad idea to send html mails with images. It gives spam points to your mail and smtp server ...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX VIEW STRUCTUR
    </pattern>
    <template>
<![CDATA[<p>There are valid reasons for checking is_ajax, for one it's a good way to take advantage of the cross-domain policy.</p><br/><br/><p>In that case I'd return a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4" rel="nofollow">403 - Forbidden</a>. Note that 403 has nothing to do with authorization - it's an acknowledgement that you've received and understood the request, and are refusing to return anything, which exactly matches your intent. You can optionally include the reason why the request is refused:</p><br/><br/><p>You can use the status parameter to set the status on a regular <code>HttpResponse</code> object, or use the <code>HttpResponseForbidden</code> subclass:</p><br/><br/><pre><code>return HttpResponseForbidden("Request must be a valid XMLHttpRequest")<br/></code></pre><br/><br/><p>Personally, I tend to re-use the same views to serve either a template to a regular GET, or JSON to an ajax request. I don't know if I'd consider that a best practice or anything, it just seems to be what is needed for my projects.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRI TO SET UP DJANGO ON WINDOW ATTRIBUTEERROR SET OBJECT HA NO ATTRIBUT DATABASES
    </pattern>
    <template>
<![CDATA[<p>The SVN checkout version of Django is looking for a setting like this in settings.py:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'django.db.backends.sqlite3',<br/>        'NAME': 'mydatabase'<br/>    }<br/>}<br/></code></pre><br/><br/><p>This is slightly different than the way it's shown in the Django book and many tutorials.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/settings/#databases" rel="nofollow">Checkout the online doc</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEST LOOP IN DJANGO VIEWS.PI WITH A FUNCTION
    </pattern>
    <template>
<![CDATA[<p>You shouldn't think of Django views as being in any way special. <strong>It's just Python</strong>. As such, you can have whatever functions you like in views.py. The only limitation is that views themselves have to take a request object and return a subclass of <code>HttpResponse</code>. Other than that, you can do what you like in that module, including having functions, classes or constants that are used by your views.</p><br/><br/><p>If you have a lot of utility functions, you may want to consider extracting them into eg a <code>lib.py</code> in your app directory for the sake of tidiness. But there's no need to do that if you've just got one or two.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2.4 INLIN IF STATEMENT
    </pattern>
    <template>
<![CDATA[<p>Yes, this kind of inline if was <a href="http://www.python.org/download/releases/2.5/highlights/" rel="nofollow">added with 2.5</a>, released almost 4 years ago. You can update your Dreamhost version <a href="http://wiki.dreamhost.com/Python#Installation" rel="nofollow">like this</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER FIELD IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>If you mainly need the ordering for Django's admin you could also create your "generic"-admin class via sub-classing Django's admin class. See <a href="http://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-form" rel="nofollow">http://docs.djangoproject.com/en/dev/intro/tutorial02/#customize-the-admin-form</a> for customizing the display of fields in the admin.<br/>You could overwrite the admin's <code>__init__</code> to setup fields/fieldsets on creation of the admin instance as you wish. E.g. you could do something like:</p><br/><br/><pre><code>class MyAdmin(admin.ModelAdmin):<br/>    def __init__(self, model, admin_site):<br/>        general_fields = ['notes', 'created_at', 'updated_at']<br/>        fields = [f.name for f in self.model._meta.fields if f.name not in general_fields]<br/>        self.fields = fields + general_fields<br/>        super(admin.ModelAdmin, self).__init__(model, admin_site)<br/></code></pre><br/><br/><p>Besides that i think it's not a good practice to modify the (private) <code>_field_name_cache</code>!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX RESPONS IN TEXTAREA AS SOON AS PAGE IS LOAD
    </pattern>
    <template>
<![CDATA[<p>Just call <code>displayfile();</code> within your <code>.ready()</code> handler.</p><br/><br/><p>If you don't wait to lose one second, modify your code like this:</p><br/><br/><pre><code>$("form").submit(function(event)<br/>{<br/>       setid = setInterval(displayfile,1000);<br/>       event.preventDefault();<br/>}).submit();<br/></code></pre><br/><br/><p>Or.. just put <code>displayfile();</code> anywhere in your ´.ready<code>handler to execute that ajax<br/>request as soon as possible (after the</code>DOM' is ready);</p><br/><br/><p>If you don't need the <code>DOM</code> to be ready you can execute that function even further by creating a selfexecuting anonymous function.</p><br/><br/><pre><code>(function(){<br/>    // code to execute<br/>})();<br/></code></pre><br/><br/><p>You can fill that with the code from your <code>displayfile()</code> function and it will execute<br/><strong>asap</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON MACPORT
    </pattern>
    <template>
<![CDATA[<p>Did you try <code>port -f uninstall &lt;port&gt;</code>?</p><br/><br/><p>If you want to uninstall everything that you've installed with MacPorts you could run:</p><br/><br/><pre><code>port -f uninstall installed<br/></code></pre><br/><br/><p>You should be running these commands as the root user, so either use <code>sudo</code> or <code>su root</code> before the commands.</p><br/><br/><pre><code>sudo port -f uninstall &lt;port&gt;<br/></code></pre><br/><br/><p>Depending on what you actually installed, <code>&lt;port&gt;</code> is any of</p><br/><br/><pre><code>py-django<br/>py25-django<br/>py26-django<br/></code></pre><br/><br/><p>You can find out with</p><br/><br/><pre><code>port list installed | grep django<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO POLL
    </pattern>
    <template>
<![CDATA[<p>The <code>__unicode__</code> method on the <code>Choice</code> model should look something like:</p><br/><br/><pre><code>def __unicode__(self):<br/>    return self.poll.question<br/></code></pre><br/><br/><p><code>question</code> attribute does not exist on the <code>Choice</code> model, you need to reach for it over the <code>poll</code> foreign key field.</p><br/><br/><p>Don't forget to check out Django's great documentation that shows many examples <a href="http://www.djangoproject.com/documentation/models/many_to_one/" rel="nofollow">on how to handle many to one relationships</a>.</p><br/><br/><p><strong>Edit</strong></p><br/><br/><p>It would probably make more sense to <code>return self.choice</code> in <code>Choice</code> model <code>__unicode__</code> method so it outputs the actual choice not the Poll question.</p><br/><br/><pre><code>def __unicode__(self):<br/>    return self.choice<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHUSION PASSENG WHICH PYTHON TO USE
    </pattern>
    <template>
<![CDATA[<p>I discovered that if I changed the hashbang at the first line of passenger's <code>request_handler.py</code> file to <code>#!/opt/local/bin/python2.5</code>, passenger used the correct python.  But surely there must be a better way than modifying passenger's distribution?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROGRAM WITH PHP FRAMEWORK IF IT CAN BE DONE BETTER WITH RUBI ON RAIL PYTHON OR JAVA
    </pattern>
    <template>
<![CDATA[<p>If you only know PHP and you don't feel like learning Ruby/Python/Java. Seriously, if it <em>can</em> be done better with another tool, it <em>should</em> be done with another tool. Of course, this assumes the other tools are actually better. That part is arguable. Some people are so stuck up on their "my way is the best way" that they leave out the "because it's the only way I know" part.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREVENT A BASE TEMPLAT RELOAD USE DJANGO S TEMPLAT INHERIT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>What I'm attempting to do is, when the tracks have been loaded once, have the media player remain unaffected by internal site navigation. In other words, the media player keeps playing but the user can browse the site without interrupting playback/ re-loading the tracks.</p><br/></blockquote><br/><br/><p>This is not something specific to Django-templates, but rather to how your HTML page is structured. The media player is not replaced within Django, but replaced in the browser by reloading the page.</p><br/><br/><p>Things you can do:</p><br/><br/><ul><br/><li>Have everything running via Ajax.</li><br/><li>Have every other page running in an <code>&lt;iframe&gt;</code></li><br/><li>Have every other page running in a <code>&lt;frameset&gt;</code> tag.</li><br/></ul><br/><br/><p>Eiter way, the URL in your address bar won't change anymore while the user is navigating through the site. Requiring Ajax will also affect how good Google can index your site.</p><br/><br/><p>A good HTML book will get you started on setting up the frameset / iframe based page.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA STRUCTUR THAT WILL BE SERIAL THI JSON FORMAT IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Something along the lines of this should work:</p><br/><br/><pre><code>from collections import defaultdict<br/>import json<br/><br/>d = defaultdict(dict)<br/>for date in dates:<br/>    d[date.year][date.month] = info_for_date(date)<br/>json.dumps(d)<br/></code></pre><br/><br/><p>Where info_for_date is a function that returns a dict like those in your question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT ERROR WITH URL AND ROOT URLCONF CONFUS
    </pattern>
    <template>
<![CDATA[<p>Typo in your PythonOption line:<br/><code>django.rooti</code> instead of <code>django.root</code></p><br/><br/><p>Furthermore you might have to add something like this inside your Directory section:</p><br/><br/><pre><code>PythonPath "['/var/www/microbloggingsearchengine','/var/www/microbloggingsearchengine/twingle'] + sys.path"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN SITE FILTER AVAIL OBJECT FOR USER
    </pattern>
    <template>
<![CDATA[<p>hey, maybe you can do something like <a href="http://www.b-list.org/weblog/2008/dec/24/admin/" rel="nofollow">this</a> </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREFER PYTHON DJANGO OR RUBI ON RAIL IN CREAT A WEB APP
    </pattern>
    <template>
<![CDATA[<p>Neither. Perl CGI. That's the only way to go. </p><br/><br/><p>Just in case it's not obvious, I'm being sarcastic. :)</p><br/><br/><p>Seriously, you should evaluate the options. They are two frameworks in two languages with different design philosophies that do roughly the same thing (build web apps). Non tech. factors like legacy code, availability of talent, community etc. will also play a role. This is too broad a question to have a clear and concise answer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO FORM TO A CSV FILE
    </pattern>
    <template>
<![CDATA[<p>You can find the document <a href="http://docs.python.org/library/csv.html" rel="nofollow">CSV File Reading and Writing</a> very helpful for your problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW DO I SET THE DEFAULT SO THAT EVERI MODEL IS CREAT WITH INNODB
    </pattern>
    <template>
<![CDATA[<p>Put that in settings.py:</p><br/><br/><pre><code>DATABASE_ENGINE = 'mysql'<br/>DATABASE_OPTIONS = {"init_command": "SET storage_engine=INNODB"}<br/></code></pre><br/><br/><p><strong>UPDATE</strong></p><br/><br/><p>For Django >= 1.2 this should be write like this:</p><br/><br/><pre><code>DATABASES = {<br/>             'default': {<br/>                         'ENGINE': 'mysql',<br/>                         'OPTIONS': {'init_command': 'SET storage_engine=INNODB'}<br/>                        }<br/>            }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LT DJANGO S DEV SERVER VIA PAGE REQUEST
    </pattern>
    <template>
<![CDATA[<p>One <em>brute force</em> approach would be to let the process kill itself, like:</p><br/><br/><pre><code># somewhere in a views.py<br/><br/>def shutdown(request):<br/>    import os<br/>    os.kill(os.getpid(), 9) <br/></code></pre><br/><br/><p>Note: <a href="http://docs.python.org/library/os.html#os.kill" rel="nofollow"><code>os.kill</code></a> is only available on Unix (Windows alternative may be something like this: <a href="http://metazin.wordpress.com/2008/08/09/how-to-kill-a-process-in-windows-using-python/" rel="nofollow">http://metazin.wordpress.com/2008/08/09/how-to-kill-a-process-in-windows-using-python/</a>)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DDIT DATA WHILE ITER OVER A DJANGO FORMSET
    </pattern>
    <template>
<![CDATA[<p>I believe that in the Django template language there is no built-in filter for indexing, but there is one for slicing (<code>slice</code>) -- and therefore I think that, in a pinch, you could use a 1-item slice (with <code>forloop.counter0:forloop.counter</code>) and <code>.first</code> on it to extract the value you want.</p><br/><br/><p>Of course it would be easier to do it with some cooperation from the Python side -- you could just have a context variable <code>forms_and_matches</code> set to <code>zip(formset.forms, matches)</code> in the Python code, and, in the template, <code>{% for form, match in forms_and_matches %}</code> to get at both items simply and readably (assuming Django 1.0 or better throughout this answer, of course).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BASIC PAGIN PROBLEM
    </pattern>
    <template>
<![CDATA[<p>You can use <a href="http://code.google.com/p/django-pagination/" rel="nofollow">django-pagination</a> which makes it possible to implement pagination without writing a single line of Python code, you only pass list of all objects to template (i.e. <code>blog_list = Blog.objects.all()</code> in your case), and then use three tags in you template:</p><br/><br/><pre><code> {% load pagination_tags %}<br/> {% autopaginate blog_list 10 %}<br/> {% paginate %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ELEG WAY TO CREAT APPLIC ACCESS URL FOR AN EXIST WEB APPLIC
    </pattern>
    <template>
<![CDATA[<p>I read over your question, and I think instead of suggesting methods to fix your existing setup I will try to answer the head of your question first:</p><br/><br/><blockquote><br/>  <p>"What is an elegant way to create application access URLs for an existing web application?"</p><br/></blockquote><br/><br/><p>Check out <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a></p><br/><br/><blockquote><br/>  <p>Piston is a relatively small Django application that lets you<br/>  create application programming interfaces (API) for your sites.</p><br/>  <br/>  <p>It has several unique features:</p><br/>  <br/>  <ul><br/>  <li>Ties into Django's internal mechanisms.</li><br/>  <li>Supports OAuth out of the box (as well as Basic/Digest or custom auth.)</li><br/>  <li>Doesn't require tying to models, allowing arbitrary resources.</li><br/>  <li>Speaks JSON, YAML, Python Pickle &amp; XML (and HATEOAS.)<br/>  Ships with a convenient reusable library in Python</li><br/>  <li>Respects and encourages proper use of HTTP (status codes, ...)</li><br/>  <li>Has built in (optional) form validation (via Django), throttling, etc.</li><br/>  <li>Supports streaming, with a small memory footprint.</li><br/>  <li>Stays out of your way.</li><br/>  </ul><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN FILTER OBJECT BY MANYTOMANI REFER
    </pattern>
    <template>
<![CDATA[<p>You need to write a custom FilterSpec! <a href="http://stackoverflow.com/questions/991926/custom-filter-in-django-admin">http://stackoverflow.com/questions/991926/custom-filter-in-django-admin</a><br><br/>It'll look like this:</p><br/><br/><pre><code>from django.contrib.admin.filterspecs import RelatedFilterSpec, FilterSpec<br/>from models import Gallery<br/><br/>class GalleryFilterSpec(RelatedFilterSpec):<br/>    def __init__(self, f, request, params, model, model_admin):<br/>        self.lookup_kwarg = f.name<br/>        self._lookup_model = f.rel.to<br/>        self.lookup_val = request.GET.get(self.lookup_kwarg, None)<br/>        self.user = request.user<br/>        self.lookup_choices = [(g.pk, g.name) for g in Gallery.objects.all()]<br/><br/>    def has_output(self):<br/>        return len(self.lookup_choices) &gt; 1<br/><br/>    def title(self):<br/>        return self._lookup_model._meta.verbose_name<br/><br/>FilterSpec.filter_specs.insert(0, <br/>        (lambda f: f.rel.to == Gallery, GalleryFilterSpec))<br/></code></pre><br/><br/><p>Put it in a module <code>filters.py</code> in your app package and import it in you <code>admin.py</code> (it's important to import it, so that the filter becomes registered on the admin site!)  </p><br/><br/><p>EDIT: "f" is the field instance, in this case <code>models.ManyToManyField</code> The last line registers the FilterSpec for all fields that have a relation to the Gallery model. This will not work as you mentioned if the field is defined on the Gallery model, since <code>django.contrib.admin.views.main.ChangeList.get_filters</code> checks if the field you define in the list really exist on the model (doesnt work for related_name either). I think the easiest way around is that you could make a custom template for that changelist and hardcode your filter in there, the FilterSpec itself isn't need for the filtering itself, django uses just the url get parameters for that!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIS EVENT AND OBJECT PERSIST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Something else to remember: You need to maintain a browser session with the remote site so that site knows which CAPTCHA you're trying to solve. Lots of webclients allow you to store your cookies and I'd suggest you dump them in the Django Session of the user you're doing the screen scraping for. Then load them back up when you submit the CAPTCHA.</p><br/><br/><p>Here's how I see the full turn of events:</p><br/><br/><ol><br/><li>User places search request</li><br/><li>Query remote site</li><br/><li>If not CAPTCHA, <code>GOTO #10</code></li><br/><li>Save remote cookies in local session</li><br/><li>Download image captcha (perhaps to session too?)</li><br/><li>Present CAPTCHA to your user and a form</li><br/><li>User Submits CAPTCHA</li><br/><li>You load up cookies from #4 and submit the form as a POST</li><br/><li><code>GOTO #3</code></li><br/><li>Process the data off the page, present to user, high-five yourself.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG DURE MANAGE.PI TEST
    </pattern>
    <template>
<![CDATA[<p>The only way I know of is to edit <code>manage.py</code> itself... not very elegant, of course, but at least it should get you to where you need to be.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON SCRIPT FOR DJANGO VIA CRON
    </pattern>
    <template>
<![CDATA[<p>The problem was actually that I have an environment variable to tell django if it is running in development or production. Crontab doesn't execute the .bashrc file where I export this variable so that had to be added to my shell script: </p><br/><br/><pre><code>export FLAVOR=live<br/>export PYTHONPATH=$PYTHONPATH:/home/django/project_dir/<br/>cd ~/project_dir/scripts/<br/>~/virtualenv/bin/python my_script.py<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO VIEW BUT NOT TO CHANG DJANGO
    </pattern>
    <template>
<![CDATA[<p>In admin.py</p><br/><br/><pre><code># Main reusable Admin class for only viewing<br/>class ViewAdmin(admin.ModelAdmin):<br/><br/>    """<br/>    Custom made change_form template just for viewing purposes<br/>    You need to copy this from /django/contrib/admin/templates/admin/change_form.html<br/>    And then put that in your template folder that is specified in the <br/>    settings.TEMPLATE_DIR<br/>    """<br/>    change_form_template = 'view_form.html'<br/><br/>    # Remove the delete Admin Action for this Model<br/>    actions = None<br/><br/>    def has_add_permission(self, request):<br/>        return False<br/><br/>    def has_delete_permission(self, request, obj=None):<br/>        return False<br/><br/>    def save_model(self, request, obj, form, change):<br/>        #Return nothing to make sure user can't update any data<br/>        pass<br/><br/># Example usage:<br/>class SomeAdmin(ViewAdmin):<br/>    # put your admin stuff here<br/>    # or use pass<br/></code></pre><br/><br/><p>In change_form.html replace this:</p><br/><br/><pre><code>{{ adminform.form.non_field_errors }}<br/></code></pre><br/><br/><p>with this:</p><br/><br/><pre><code>&lt;table&gt;<br/>{% for field in adminform.form %}<br/>    &lt;tr&gt;<br/>      &lt;td&gt;{{ field.label_tag }}:&lt;/td&gt;&lt;td&gt;{{ field.value }}&lt;/td&gt;<br/>    &lt;/tr&gt;<br/>{% endfor %}<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>Then remove the submit button by deleting this row:</p><br/><br/><pre><code>{% submit_row %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BASE LARG FILE UPLOAD WITH RESUM FACIL IN DJANGO OR ASP.NET
    </pattern>
    <template>
<![CDATA[<p>Using the standard upload functionality of the browser for such large files is rather insane. For such files you rather expose ftp functionality to a disk where you can have, in .NET, have a windows service monitor a certain folder and if something gets dropped there act accordingly. .NET has a <a href="http://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher.aspx" rel="nofollow">FileSystemWatcher class</a> available to aid you in your effort.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI WITH DJANGO OBJECTS.FILT
    </pattern>
    <template>
<![CDATA[<pre><code>MYTable.objects.filter( id__in = [42,55,65,55] )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET XML RPC AND DJANGO WORK TOGETH
    </pattern>
    <template>
<![CDATA[<p>Easily - we use <a href="http://code.djangoproject.com/wiki/XML-RPC" rel="nofollow">http://code.djangoproject.com/wiki/XML-RPC</a> to add an xml-rpc server into our django server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGNAL FILE CAN NOT IMPORT MODEL NAME
    </pattern>
    <template>
<![CDATA[<p>Most likely you have a circular dependency. Does your models.py import the signals? If so, this can't work as both modules now depend on each other. You may need to import the models within a function in the signals file, rather than at the top level.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNIX TIMESTAMP TO HUMAN FORMAT IN DJANGO WITH PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; import datetime<br/>&gt;&gt;&gt; datestring = "1277722499.82"<br/><br/>&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(float(datestring))<br/>&gt;&gt;&gt; print dt<br/>2010-06-28 11:54:59.820000<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECKBOX VALU IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I'm not sure to understand everything you asked, but if you want to get "foo" and "bar" when the user submit the form, you will have to add them in a form element like hidden or textfields (depending on if the user can modify them or not).</p><br/><br/><p>The server will never receive the whole DOM when you submit a form.</p><br/><br/><p>Also, you will have to find a way to indicate on which checkbox belongs foo &amp; bar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACK NOT BE CALL
    </pattern>
    <template>
<![CDATA[<p>I don't think Django does automatic serialization for dictionaries. You'll have to serialize them to JSON by hand.</p><br/><br/><pre><code>import simplejson<br/><br/># ...<br/><br/>return HttpResponse(simplejson.dumps(data), mimetype="application/json")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORDPRESS AND DJANGO TOGETH
    </pattern>
    <template>
<![CDATA[<p>I found via Google a similar SO question <a href="http://stackoverflow.com/questions/2061388/serve-wordpress-blog-from-subdirectory-with-django-and-wsgi"><strong>here</strong></a>. The answer is to create an .htaccess file in the root of your new blog folder. In my case, the blog root directory is here: ~/wantbox.com/public/blog/</p><br/><br/><p>My <strong>.htaccess</strong> file in this directory has one line:  </p><br/><br/><pre><code>PassengerEnabled off<br/></code></pre><br/><br/><p>Now the url pattern <a href="http://wantbox.com/blog/" rel="nofollow">http://wantbox.com/blog/</a> is ignored by Django and handled by Wordpress. Very nice.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WINDOW FUNCTION IN AN UPDAT STATEMENT
    </pattern>
    <template>
<![CDATA[<p>The error is from postgres not django. You can rewrite this as:</p><br/><br/><p><strike><br/>    WITH v_table_name AS<br/>    (<br/>        SELECT row_number() over (partition by col2 order by col3) AS rn, primary_key<br/>        FROM table_name<br/>    ) <br/>    UPDATE table_name set table_name.col1 = v_table_name.rn<br/>    FROM v_table_name<br/>    WHERE table_name.primary_key = v_table_name.primary_key;<br><br/></strike></p><br/><br/><pre><code>UPDATE table_name set table_name.col1 = v_table_name.rn<br/>FROM  <br/>(<br/>    SELECT row_number() over (partition by col2 order by col3) AS rn, primary_key<br/>    FROM table_name<br/>) AS v_table_name<br/>WHERE table_name.primary_key = v_table_name.primary_key;<br/></code></pre><br/><br/><p>This works. Just tested it on postgres-8.4. Here is the syntax for <a href="http://www.postgresql.org/docs/current/static/sql-update.html" rel="nofollow">UPDATE</a> (see the optional <em>fromlist</em>).  </p><br/><br/><p>Hope this helps.</p><br/><br/><p>EDIT: Updated the statement. Dont know why postgres isnt handling <code>UPDATE</code> with <code>WITH</code> syntax.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOILERPL TEMPLAT CODE
    </pattern>
    <template>
<![CDATA[<p>If you don't decide to use context processor for some reasons (this solution looks reasonable here) you can always encapsulate some common logic into util functions and use them in your views.</p><br/><br/><p>You can also take a look at <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/" rel="nofollow">Generic views</a> - this is a good way to 'stay DRY' with your code</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIELD IN AN ORIGIN ORDER
    </pattern>
    <template>
<![CDATA[<p>As mentioned above, if you want to keep things simple, just use a eg <code>_ordering</code> attribute, which manually keeps track of ordering. Otherwise, here is a metaclass approach (like the one Django uses), which creates an ordering attribute automatically.</p><br/><br/><p><strong>Recording the original ordering</strong> </p><br/><br/><p>Classes don't keep track of the ordering of the attributes. You can however keep track of which order the field instances were created. For that, you'll have to use your own class for fields (not int). The class keeps track of how many instances have already been made and each instance takes note of its position. Here is how you would do it for your example (storing integers):</p><br/><br/><pre><code>class MyOrderedField(int):<br/>  creation_counter = 0<br/><br/>  def __init__(self, val):<br/>    # Set the instance's counter, to keep track of ordering<br/>    self.creation_counter = MyOrderedField.creation_counter<br/>    # Increment the class's counter for future instances<br/>    MyOrderedField.creation_counter += 1<br/></code></pre><br/><br/><p><strong>Creating an <code>ordered_items</code> attribute automatically</strong></p><br/><br/><p>Now that your fields have a number which can be used to order them, your parent class needs to use that somehow. You can do this a variety of ways, if I remember correctly, Django uses Metaclasses to do this, which is a bit wild for a simple class. </p><br/><br/><pre><code>class BaseWithOrderedFields(type):<br/>  """ Metaclass, which provides an attribute "ordered_fields", being an ordered<br/>      list of class attributes that have a "creation_counter" attribute. """<br/><br/>  def __new__(cls, name, bases, attrs):<br/>    new_class = super(BaseWithOrderedFields, cls).__new__(cls, name, bases, attrs)<br/>    # Add an attribute to access ordered, orderable fields<br/>    new_class._ordered_items = [(name, attrs.pop(name)) for name, obj in attrs.items()<br/>                                    if hasattr(obj, "creation_counter")]<br/>    new_class._ordered_items.sort(key=lambda item: item[1].creation_counter)<br/>    return new_class<br/></code></pre><br/><br/><p><strong>Using this metaclass</strong></p><br/><br/><p>So, how do you use this? First, you need to use our new <code>MyOrderedField</code> class when defining your attributes. This new class will keep track of the order in which the fields were created:</p><br/><br/><pre><code>class Ordered(object):<br/>  __metaclass__ = BaseWithOrderedFields<br/><br/>  x = MyOrderedField(0)<br/>  z = MyOrderedField(0)<br/>  b = MyOrderedField(0)<br/>  a = MyOrderedField(0)<br/></code></pre><br/><br/><p>Then you can access the ordered fields in our automatically created attribute <code>ordered_fields</code>:</p><br/><br/><pre><code>&gt;&gt;&gt; ordered = Ordered()<br/>&gt;&gt;&gt; ordered.ordered_fields<br/>[('x', 0), ('z', 0), ('b', 0), ('a', 0)]<br/></code></pre><br/><br/><p>Feel free to change this to an ordered dict or just return the names or whatever you need. Additionally, you can define an empty class with the <code>__metaclass__</code> and inherit from there.</p><br/><br/><p><strong>Don't use this!</strong></p><br/><br/><p>As you can see, this approach is a little overcomplicated and probably not suitable for most tasks or python developers. If you're newish to python, you'll probably spend more time and effort developing your metaclass than you would have if you just defined the ordering manually. Defining your own ordering manually is almost always going to be the best approach. Django do it automatically because the complicated code is hidden from the end developer, and Django is used far more often than it itself is written/maintained. So only if you're developing a framework for other developers, then metaclasses may be useful for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INDEX MONGODB
    </pattern>
    <template>
<![CDATA[<p>Thanks to <strong>skot</strong> in <strong>#mongodb</strong>!!</p><br/><br/><p>One solution is:</p><br/><br/><pre><code>[...].ensureIndex({"actions.time":1})<br/></code></pre><br/><br/><p>for creating an index on the time field within the actions list.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRINGIO LIKE CLASS THAT EXTEND DJANGO.CORE.FILES.FIL
    </pattern>
    <template>
<![CDATA[<p>If you've got a stream of bytes, which you'd like to save to a FileField/ImageField, here's some code that might help:</p><br/><br/><pre><code>&gt;&gt;&gt; from django.core.files.uploadedfile import InMemoryUploadedFile<br/>&gt;&gt;&gt; from cStringIO import StringIO<br/>&gt;&gt;&gt; buf = StringIO(data)  # 'data' is your stream of bytes<br/>&gt;&gt;&gt; buf.seek(0, 2)  # Seek to the end of the stream, so we can get its length with 'buf.tell()'<br/>&gt;&gt;&gt; file = InMemoryUploadedFile(buf, "image", "some_filename.png", None, buf.tell(), None)<br/>&gt;&gt;&gt; photo.image.save(file.name, file)  # 'photo' is an instance of 'MyModel'<br/>&gt;&gt;&gt; photo.image<br/>&lt;ImageFieldFile: ...&gt;<br/></code></pre><br/><br/><p>Some notes:</p><br/><br/><ul><br/><li>You can make up whatever name you want for the image, but you'll probably want to keep the extension accurate</li><br/><li>The second argument to <code>InMemoryUploadedFile</code> is the name of the field in your model, hence "image"</li><br/></ul><br/><br/><p>It's a little finnicky, but it gets the job done. Hopefully, the API will get cleaned up a bit more in 1.3/4.</p><br/><br/><p><strong>Edit:</strong><br><br/>See <a href="http://stackoverflow.com/questions/3330677/a-stringio-like-class-that-extends-django-core-files-file/3332232#3332232">Jason's answer</a> for a much simpler way of doing this, though you'll still want to know the filename of the image.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UL MYMODUL DOE NOT DEFIN A MYBACKEND AUTHENT BACKEND
    </pattern>
    <template>
<![CDATA[<p>You are importing it in wrong way. You are importing a module, rather than a class. That's why shell allows you to import it, but django complains.</p><br/><br/><p>You should use <code>challenge.backends.LDAPBackend.LDAPBackend</code>.</p><br/><br/><p>Also, it's a good idea to stick with PEP8 when naming modules, this way you won't be confused that way again. Modules should be names all in lowcase and without spaces, underscores, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWO ROW WITH FOREIGN KEY SQL
    </pattern>
    <template>
<![CDATA[<p>You can do this in one batch statement:</p><br/><br/><pre><code>declare @key as int;<br/>insert into users (username)<br/>values ('malcom.reynolds');<br/>set @key = (select scope_identity());<br/>insert into spaceships (name, owner)<br/>values ('Serenity', @key)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EKIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Your ProductImage model needs to inherit from imagekit.models.ImageModel in instead of models.Model.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO INSTAL DELIV AN EMPTI HTTP RESPONS
    </pattern>
    <template>
<![CDATA[<p>Make sure there are no conflicting modules installed in Apache. Specifically, check for mod_python or similar.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET UP DJANGO VALUEERROR EMPTI MODUL NAME
    </pattern>
    <template>
<![CDATA[<p>It looks like you don't have your database configured right. Check your settings.py and make sure you have a valid database ENGINE defined:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.<br/>        'NAME': '',                      # Or path to database file if using sqlite3.<br/>        'USER': '',                      # Not used with sqlite3.<br/>        'PASSWORD': '',                  # Not used with sqlite3.<br/>        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.<br/>        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.<br/>    }<br/>}<br/></code></pre><br/><br/><p>You probably want <code>django.db.backends.sqlite3</code>? And set a NAME for it.</p><br/><br/><p><strong>Update:</strong></p><br/><br/><p>You have an extra period in ENGINE. Change it to 'django.db.backends.sqlite3'. Hope that helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANI TO MANI FIELD IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>In general, you can follow anything that's an attribute or a method call with no arguments through pathing in the django template system. </p><br/><br/><p>For the view code above, something like</p><br/><br/><pre><code>{% for objs in obj_arr %}<br/>{% for answer in objs.answers.all %}<br/>  {{ answer.someattribute }}<br/>{% endfor %}<br/>{% endfor %}<br/></code></pre><br/><br/><p>should do what you're expecting. </p><br/><br/><p>(I couldn't quite make out the specifics from your code sample, but hopefully this will illuminate what you can get into through the templates)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO S FORM FRAMEWORK FOR SELECT OPTION
    </pattern>
    <template>
<![CDATA[<pre><code>class MyForm(forms.Form):<br/>    CHOICES = (('Option 1', 'Option 1'),('Option 2', 'Option 2'),)<br/>    field = forms.ChoiceField(choices=CHOICES)<br/><br/>print MyForm().as_p()<br/><br/># out: &lt;p&gt;&lt;label for="id_field"&gt;Field:&lt;/label&gt; &lt;select name="field" id="id_field"&gt;\n&lt;option value="Option 1"&gt;Option 1&lt;/option&gt;\n&lt;option value="Option 2"&gt;Option 2&lt;/option&gt;\n&lt;/select&gt;&lt;/p&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN ALTER HOW DATA IS DISPLAY
    </pattern>
    <template>
<![CDATA[<p>Answering my own question...</p><br/><br/><p>After reading the documentation near what Matthew J Morrison pointed me to. I discovered I could add a javascript to alter things.</p><br/><br/><p>to my ModelAdmin I added</p><br/><br/><pre><code>class Media:<br/>    js = ("/site_media/json2.js", "/site_media/custom.js")<br/></code></pre><br/><br/><p>json2.js is from <a href="http://www.json.org/js.html" rel="nofollow">Douglas Crockford's website</a></p><br/><br/><p>custom.js is</p><br/><br/><pre><code>django.jQuery(document).ready(function() {<br/>    data = JSON.parse(django.jQuery("#id_json")[0].value);<br/>    django.jQuery("#id_json")[0].value = JSON.stringify(data, null, 4)<br/>});<br/></code></pre><br/><br/><p>Easy when you know how.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A ARRAY IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I am assuming that you are trying to filter all instances of <code>Upload</code> whose <code>id</code> is in the list <code>idarr</code>. If that is the case then you can go about it like this:</p><br/><br/><pre><code>Upload.objects.filter(id__in = idarr)<br/></code></pre><br/><br/><p>Read the <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#the-pk-lookup-shortcut" rel="nofollow">documentation</a> for more details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL IN XML
    </pattern>
    <template>
<![CDATA[<p>If you are going to use JavaScript to generate the timeline then JSON is a better, more natural fit. Either way you will need to work out how you are going to serialize the data and send it to the templates. Then you can manipulate the data using JavaScript in your web client.</p><br/><br/><p>Here are a couple of links of interest:</p><br/><br/><ol><br/><li><a href="http://docs.djangoproject.com/en/dev/topics/serialization/" rel="nofollow">Serializing</a> Django model instances.</li><br/><li><a href="http://www.learn-ajax-tutorial.com/Json.cfm" rel="nofollow">Working</a> with JSON.</li><br/></ol><br/><br/><p>It is difficult to give a more detailed answer without knowing what you are trying to accomplish (the <a href="http://www.simile-widgets.org/timeline/" rel="nofollow">link</a> you provided in the comment timed out). I suggest exploring on your own. There is always <a href="http://stackoverflow.com/">StackOverflow</a> to ask more questions in case you get stuck :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2ND LEVEL DOMAIN FROM DOMAIN PYTHON
    </pattern>
    <template>
<![CDATA[<p>no way to reliably get that.  Subdomains are arbitrary and there is a monster list of domain extensions that grows every day.  Best case is you check against the monster list of domain extensions and maintain the list. </p><br/><br/><p>list:<br/><a href="http://mxr.mozilla.org/mozilla-central/source/netwerk/dns/effective_tld_names.dat?raw=1" rel="nofollow">http://mxr.mozilla.org/mozilla-central/source/netwerk/dns/effective_tld_names.dat?raw=1</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMAT FOR FLOATFIELD IN TEMPLAT FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could use a custom <code>formats.py</code> (see "<a href="http://docs.djangoproject.com/en/dev/topics/i18n/localization/#creating-custom-format-files" rel="nofollow">Creating custom format files</a>" in the Django docs) and define <code>THOUSAND_SEPARATOR</code> and <code>DECIMAL_SEPARATOR</code></p><br/><br/><pre><code>THOUSAND_SEPARATOR = ''<br/>DECIMAL_SEPARATOR = '.'<br/></code></pre><br/><br/><p>This is a global setting, so it will affect all floats displayed on your site. And you'll have to turn on localization (<code>USE_L10N</code> in your settings.py).</p><br/><br/><p>If you have control over the template, you could simply remove the <code>floatformat</code> filter.</p><br/><br/><p><strong>edit</strong>: I'm not sure, but perhaps you are a victim of this Django bug: <a href="http://code.djangoproject.com/ticket/13617" rel="nofollow">#13617</a>. Try to turn <strong>off</strong> localization support in your settings.py and see if the erroneous commas disappear:</p><br/><br/><pre><code>USE_L10N = False<br/></code></pre><br/><br/><p>If that is the case, have a look at the various workarounds mentioned in the bugreport (the simplest being to turn localization off if you don't need it anyway).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO STORE THI BROWSER VERSION DJANGO POSTGRESQL
    </pattern>
    <template>
<![CDATA[<p>You could make it parseable, but probably not indexable. For example, you could concatenate the values together separated by semicolons (or some other character), then simply split the string to get the values back. "Firefox 3.6" would become "Firefox;3;6". While this is somewhat easier to parse, it doesn't provide much of an advantage over the original formatting.</p><br/><br/><p>The big caveat with this approach is that the column wouldn't be indexable in a very granular way. For example, you couldn't ask for all versions of Firefox. PostgreSQL allows for some very advanced indexing which, I believe, would allow you to create the required indexes, but I don't know of any way you could access the indexes via Django's ORM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .CLICK ( ) EVENT EXECUT ONLI THE FIRST TIME
    </pattern>
    <template>
<![CDATA[<p>Try to use .live("click", function() {...}); instead the click event.<br/>Eg: <br/>$("#dates_up").live("click", function()...<br/>$("#dates_down").live("click", function()...</p><br/><br/><p>You can read more about it <a href="http://api.jquery.com/live/" rel="nofollow">here</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRIT INPUT FIELD IN DJANGO ADMIN TABULAR INLIN USE AJAX
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>urls.py</p><br/><br/><pre><code>from django.conf import settings<br/><br/><br/>urlpatterns = patterns('',<br/>    (r'^json/tshirt/$', json_order),<br/>    (r'^site_media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),<br/>    ...<br/>)<br/></code></pre></li><br/><li><p>views.py</p><br/><br/><pre><code>from django.core import serializers<br/><br/><br/>def json_order(request):<br/>    search = request.GET.get('tshirt_id')<br/>    if search:<br/>        result = Tshirt.objects.filter(id=search)<br/>        return HttpResponse(serializers.serialize('json', result, fields=('default_wording')), mimetype='application/json')<br/>    return HttpResponse()<br/></code></pre></li><br/><li><p>admin.py</p><br/><br/><pre><code>class Order_Inline(TabularInline):<br/>    model = Order_item<br/>    fk_name = 'order'<br/><br/><br/>class Order_Admin(ModelAdmin):<br/>    inlines = [Order_Inline,]<br/>    class Media:<br/>        js = ('/media/js/jquery.js', '/site_media/js/tshirt.js',)<br/></code></pre></li><br/><li><p>_settings.MEDIA_ROOT_/js/tshirt.js</p><br/><br/><pre><code>$(document).ready(function() {<br/>    $(".module").delegate("[id$=-tshirt]", "change", function() {<br/>        var row = $(this).attr("id").split('id_order_item-')[1].split("-tshirt")[0];<br/>        var tshirt_id = $(this).val();<br/>        var data = {"tshirt_id":tshirt_id};<br/>        $.getJSON("/json/tshirt", data, function(data) {<br/>            var dw = data[0]["fields"]["default_wording"];<br/>            $("input[id='id_item-"+row+"-wording']").val(dw);<br/>        });<br/>    });<br/>});<br/></code></pre></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU OF A TUPL IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>In your case, the generator will assign the tuple to <code>ele</code>, so you can access the first, last name with <code>{{ ele.0 }} {{ ele.1 }}</code>.</p><br/><br/><p>But this is also legal, to unpack the tuple into two vars:</p><br/><br/><pre><code>{% for first_name, last_name in response_dictionary.tarr %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MVC DJANGO OR RAIL
    </pattern>
    <template>
<![CDATA[<p>IMO the only reason to consider .net is if the hospital deploys on windows. Deploying anything else on windows is a pain, and deploying .net on any other platform is a pain. (IMO) </p><br/><br/><p>Beyond that, I think the best thing to do was get a rough idea of what you want the portal to do, then look at library support. </p><br/><br/><p>After that, its just really what language do you prefer.</p><br/><br/><p>UPDATE:</p><br/><br/><p>As for my experiences on each: I have 4 years of webforms experience, and played around with MVC. Pluses are that it is mind rendingly fast, and the deploy experience is pretty damn simple. Tooling is decent too, especially the SQL Server frontend, never seen another db tool as good. Down side is that it just doesn't do as much for you as django or rails, in fact, it doesn't really come close. Also, you are going to have to type 3-4x as much due to the language, although some people think the tools make up for the verbosity.</p><br/><br/><p>For rails, I have about 8 months professional experience with it. Plus side is there is a plugin for almost everything, and the framework is pretty packed with things that make your life easier. Personally, ruby is also my favorite imperative language, its the kind of thing where you achieve multiple levels of enlightenment as your knowledge of the platform deepens. Down side is that we are in the middle of a transitional period right now in both rails and ruby, so documentation, recommendations, and library support is probably going to be up in the air for the next 8 months or so. </p><br/><br/><p>Finally, I am really not an expert on python or django, but I have played around with both. The language is very similar to ruby (meant for productivity over perf, dynamic, very elegant design), but differs quite strongly in philosophy. Pythonistas believe there should be one (and only one) clear and concise way to do things. Rubyists (like perl monks) believe that there should be many nuanced ways of doing something, and that elegant code is like elegant language; expressiveness is paramount.</p><br/><br/><p>I would say rails has an edge over django at the moment, due to more eyeballs over a greater period of time. That wont last forever though, django is wildly popular and in a few years I am sure support for both frameworks will be roughly equal. It really comes down to a philosophy thing with these two platforms. If you look at a library that pushes the language in some strange directions that take awhile to grok, but once you do you realize is quite an elegant way to do things, chances are you are a ruby guy. If you look at something like that and say "Ok, so thats clever, but they really should have done it the way that everyone else does it, cause non standard use of syntax really sticks in my craw", chances are you are a python guy.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PICKL ERROR WHEN USE SESSION
    </pattern>
    <template>
<![CDATA[<p>It appears you have a cStringIO object in your session (perhaps an uploaded file?), these cannot be pickled. Either write custom pickling code or make sure all your session data can be serialized.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FIELD NAME CREAT WITHIN A MODEL DJANGO
    </pattern>
    <template>
<![CDATA[<p>When you say the field does not exist, do you mean that it is not showing on the admin change form? This is expected behaviour when using <code>auto_now_add</code>. If you want the field to get a default value on creation but still be editable, use <code>default=datetime.datetime.now</code> instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELP WITH DJANGO GIT AND CLOUD SERVER
    </pattern>
    <template>
<![CDATA[<p>I have had great success using the Rackspace Cloud servers. You get root SSH into the server, so you can set up your Git repo and your web app there. They have a lot of options for which flavor of Linux you want to use as well.</p><br/><br/><p>I'm doing Django/Postgres on an Ubuntu server and haven't had any problems at all. As a bonus, it includes very easy web and API integration with their CDN if you're interested in that.</p><br/><br/><p>I looked into a variety of cloud providers and RS had the best options for me, although CDN integration was a big deal for my site so that factor weighed heavier than it might for you.</p><br/><br/><p>I use the cheapo 256MB RAM/10GB HD install and pay around ~$12/month after bandwidth costs are figured into it.</p><br/><br/><p>Here's the pricing: <a href="http://www.rackspace.com/cloud/cloud_hosting_products/servers/pricing/" rel="nofollow">http://www.rackspace.com/cloud/cloud_hosting_products/servers/pricing/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACKGROUND PROCESS FROM DJANGO THAT CA N T BE INTERRUPT BY THE WEB SERVER
    </pattern>
    <template>
<![CDATA[<p>Maybe less elegant, but definitely most simple, I scheduled my process for "now" with the <strong>at</strong> command.  Done.</p><br/><br/><pre><code>os.system("echo '/usr/bin/python /(somewhere)/scripts/backup/testbackup.py' | at now")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODELS.PI CIRCULAR FOREIGN KEY
    </pattern>
    <template>
<![CDATA[<p>You don't actually have a circular reference; the issue is that, at the time you define Album, you haven't defined Image yet. You can fix that by using a string instead:</p><br/><br/><pre><code>class Album(models.model):<br/>  thumb = models.ForeignKey('Image', null=True, blank=True)<br/></code></pre><br/><br/><p>However, in this case, you might want to use a <a href="http://docs.djangoproject.com/en/1.1/ref/models/fields/#onetoonefield" rel="nofollow">OneToOneField</a> instead of a foreign key. (Note that you'll still have to use the trick with the string, though).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO NOT SEE MY TEST
    </pattern>
    <template>
<![CDATA[<p>There is something not quite right if you are getting the same result after renaming the file to <code>tests.py</code>. How are you running the tests? Are you doing so from the command line or have you set up a custom run target using Eclipse? Please try it from the command line if you haven't already.</p><br/><br/><p>Also fire up Django shell (<code>python manage.py shell</code>) and import your tests module.</p><br/><br/><pre><code>from MyProj.forum.tests import SimpleTest<br/></code></pre><br/><br/><p>Does the import work correctly? </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORMAT IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I'll guess that your dates aren't really dates, but are strings with formatted dates in them.  The |date filter expects a datetime object, not a string.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OEMB IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You could wrap the <code>oembed</code> tag result with a <code>DIV</code> element and apply styles to that:</p><br/><br/><pre><code>&lt;style type="text/css"&gt;<br/>    div.oembed img {<br/>        border: #fafafa 3px solid;<br/>        border-radius: 3px;<br/>    }<br/>&lt;/style&gt;<br/><br/>&lt;div class="oembed"&gt;<br/>    {% oembed %}  {{ image_url }} {% endoembed %}<br/>&lt;/div&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL QUERI MYSQL VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>SELECT *, date(dt_published) as dpub FROM 'news_entry' order by dpub DESC LIMIT 500<br/></code></pre><br/><br/><p>This query orders on <code>dpub</code>, while this one:</p><br/><br/><pre><code>SELECT * , DATE( dt_published ) AS dpub FROM  'news_entry' ORDER BY id DESC LIMIT 500<br/></code></pre><br/><br/><p>orders on <code>id</code>.</p><br/><br/><p>Since <code>id</code> is most probably a <code>PRIMARY KEY</code> for your table, and each <code>PRIMARY KEY</code> has an implicit index backing it, <code>ORDER BY</code> does not need to sort.</p><br/><br/><p><code>dpub</code> is a computed field and <code>MySQL</code> does not support indexes on computed fields. However, <code>ORDER BY dt_published</code> is an <code>ORDER BY dpub</code> as well.</p><br/><br/><p>You need to change your query to this:</p><br/><br/><pre><code>SELECT *, date(dt_published) as dpub FROM 'news_entry' order by date_published DESC LIMIT 500<br/></code></pre><br/><br/><p>and create an index on <code>news_entry (dt_published)</code>.</p><br/><br/><p><strong>Update:</strong></p><br/><br/><p>Since <code>DATE</code> is a monotonic function, you may employ this trick:</p><br/><br/><pre><code>SELECT  *, DATE(dt_published) AS dpub<br/>FROM    news_entry<br/>WHERE   dt_published &gt;=<br/>        (<br/>        SELECT  md<br/>        FROM    (<br/>                SELECT  DATE(dt_published) AS md<br/>                FROM    news_entry<br/>                ORDER BY<br/>                        dt_published DESC<br/>                LIMIT 499, 1<br/>                ) q<br/>        UNION ALL<br/>        SELECT  DATE(MIN(dt_published))<br/>        FROM    news_entry<br/>        LIMIT 1<br/>        )<br/>ORDER BY<br/>        dpub DESC, views DESC, dt_written DESC, headline<br/>LIMIT 500<br/></code></pre><br/><br/><p>This query does the following:</p><br/><br/><ul><br/><li><p>Selects the <code>500th</code> record in <code>dt_published DESC</code> order, or the first record posted should there be less than <code>500</code> records in the table.</p></li><br/><li><p>Fetches all records posted later than the <strong>date</strong> of the last record selected. Since <code>DATE(x)</code> is always less or equal to <code>x</code>, there can be more than <code>500</code> records, but still <br/>much less than the whole table.</p></li><br/><li><p>Orders and limits these records as appropriate.</p></li><br/></ul><br/><br/><p>You may find this article interesting, since it covers a similar problem:</p><br/><br/><ul><br/><li><a href="http://explainextended.com/2010/02/19/things-sql-needs-sargability-of-monotonic-functions/" rel="nofollow"><strong>Things SQL needs: sargability of monotonic functions</strong></a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR ENTERPRIS WEB APPLIC
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>performace when number of DB transactions increases.</p><br/></blockquote><br/><br/><p>Not a Django problem, really.</p><br/><br/><p>You can have a lot of concurrent Django sessions via Apache and mod_wsgi.  All of them will share a common database.</p><br/><br/><p>Therefore, this is entirely a database problem.  You should be able to configure enough Apache/Django sessions that your database is swamped.</p><br/><br/><blockquote><br/>  <p>OR Mapping included inside Django is a good choice or should I implement them.</p><br/></blockquote><br/><br/><p>Yes.  It's a really good choice.</p><br/><br/><p>Until you can <strong>prove</strong> that the ORM is your bottleneck, use it.</p><br/><br/><p>As you scale up, you will rework your database, your cache, and other architectural features.   Since the ORM has a cache (as does your database), you rarely have performance issues here.  </p><br/><br/><p>You can.</p><br/><br/><p>But most of your performance problems will be downloading static media files through Apache.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGIREQUEST OBJECT HA NO ATTRIBUT USER IN GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p><strong>UPDATE</strong></p><br/><br/><p>The solution suggested by sdolan seems to be to add the following to the settings.py of the app:</p><br/><br/><p>TEMPLATE_CONTEXT_PROCESSORS = (<br/>    "django.core.context_processors.debug",<br/>    "django.core.context_processors.i18n")</p><br/><br/><p>This effectively <strong>removes</strong> the third default processor, django.core.context_processors.auth (which shouldn't be there because for AppEngine we don't want Django's auth component).</p><br/><br/><p>Thank you, sdolan, for the solution! hopefully someone else can use it, too. :)</p><br/><br/><p><strong>@Nick</strong>, I think it's worth putting this golden piece about CONTEXT_PROCESSORS in the tutorial (<a href="http://code.google.com/appengine/articles/django.html" rel="nofollow">http://code.google.com/appengine/articles/django.html</a>)</p><br/><br/><p><strong>(Original followup to the question)</strong> </p><br/><br/><p>Have the same problem, looking for solution.... All works fine when settings.py contains</p><br/><br/><p>DEBUG = True</p><br/><br/><p>but this error pops up (and kills my motivation to proceed with learning) when I switch to</p><br/><br/><p>DEBUG = False</p><br/><br/><p>@Nick Johnson, here's the stack trace:</p><br/><br/><pre><code>Traceback (most recent call last):<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 3211, in _HandleRequest<br/>    self._Dispatch(dispatcher, self.rfile, outfile, env_dict)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 3154, in _Dispatch<br/>    base_env_dict=env_dict)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 527, in Dispatch<br/>    base_env_dict=base_env_dict)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 2404, in Dispatch<br/>    self._module_dict)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 2314, in ExecuteCGI<br/>    reset_modules = exec_script(handler_path, cgi_path, hook)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\tools\dev_appserver.py", line 2212, in ExecuteOrImportScript<br/>    script_module.main()<br/>  File "C:\Dev\appengine\djangotest\main.py", line 37, in main<br/>    util.run_wsgi_app(application)<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\ext\webapp\util.py", line 97, in run_wsgi_app<br/>    run_bare_wsgi_app(add_wsgi_middleware(application))<br/>  File "C:\Program Files (x86)\Google\google_appengine\google\appengine\ext\webapp\util.py", line 115, in run_bare_wsgi_app<br/>    result = application(env, _start_response)<br/>  File "C:\Program Files (x86)\Google\google_appengine\lib\django\django\core\handlers\wsgi.py", line 189, in __call__<br/>    response = self.get_response(request)<br/>  File "C:\Program Files (x86)\Google\google_appengine\lib\django\django\core\handlers\base.py", line 103, in get_response<br/>    return callback(request, **param_dict)<br/>  File "C:\Program Files (x86)\Google\google_appengine\lib\django\django\views\defaults.py", line 79, in page_not_found<br/>    return http.HttpResponseNotFound(t.render(RequestContext(request, {'request_path': request.path})))<br/>  File "C:\Program Files (x86)\Google\google_appengine\lib\django\django\template\context.py", line 100, in __init__<br/>    self.update(processor(request))<br/>  File "C:\Program Files (x86)\Google\google_appengine\lib\django\django\core\context_processors.py", line 18, in auth<br/>    'user': request.user,<br/>AttributeError: 'WSGIRequest' object has no attribute 'user'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GENER TO STREAM JSON DATA IN REAL TIME FROM SUBPROCESS IN DJANGO WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>The problem with this approach is that generally speaking the javascript won't run until the response is completely done, even if the response is getting streamed.  You can jump through a lot of hoops to make this work, but you're better off going with somebody else's solution because there are a lot of subleties to getting it to work on all browsers and through HTTP proxies and such.  (If you're determined, I'd look at this SO question for server config: <a href="http://stackoverflow.com/questions/2932895/streaming-http-response-flushing-to-the-browser">http://stackoverflow.com/questions/2932895/streaming-http-response-flushing-to-the-browser</a> )</p><br/><br/><p>I've had really good luck pushing data to javascript with hookbox.  <a href="http://hookbox.org/" rel="nofollow">http://hookbox.org/</a>  It's a python server which is easy to integrate with django and allows you to push data to a javascript client.  It follows a "publish / subscribe" mechanism, such that one party (can be python on server or javascript on client) can publish data which any other party can receive.  The messages get delivered essentially instantly.  Hookbox will use either a long-polling GET (comet) or html5 websockets if available.  </p><br/><br/><p>Like I said, doing this stuff right is complicated -- best to move to a higher layer of abstraction and let somebody else's library take care of the delivery mechanics.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OCCASION CTYPE ERROR IMPORT NUMPI FROM MOD WSGI DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>I've run into this bug too. In my case it occurs when I exec a Python script from within a PHP script running under Apache on a 64-bit Linux system. [The Python code being run is the front-end to a pypy sandbox.] The same bit of code works fine on a 32-bit system and even works fine when the PHP script is executed directly from the command line. My "fix" has been simply to comment out that line "CFUNCTYPE(c_int)(lambda: None)" in ctypes/<strong>init</strong>.py. It's the last line of the file and is preceded by the following comment, showing that the programmer doesn't understand what's going on, either!</p><br/><br/><pre><code># XXX for whatever reasons, creating the first instance of a callback<br/># function is needed for the unittests on Win64 to succeed.  This MAY<br/># be a compiler bug, since the problem occurs only when _ctypes is<br/># compiled with the MS SDK compiler.  Or an uninitialized variable?<br/>CFUNCTYPE(c_int)(lambda: None)<br/></code></pre><br/><br/><p>Clearly there's a deeper problem somewhere in cpython, but the fix works for me.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GRAPH TO REPORTLAB PDF
    </pattern>
    <template>
<![CDATA[<p>I wrote this some time ago, but it's been one of the most popular articles on the site, so I guess it works for some. </p><br/><br/><p><a href="http://www.protocolostomy.com/2008/10/22/generating-reports-with-charts-using-python-reportlab/" rel="nofollow">http://www.protocolostomy.com/2008/10/22/generating-reports-with-charts-using-python-reportlab/</a></p><br/><br/><p>If it's not enough to get you through, let me know and I'll come back to help out more later when I have more time. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THAT ONLI ONE RADIO BUTTON CAN BE CHECK
    </pattern>
    <template>
<![CDATA[<p>Simply give them the same name:</p><br/><br/><pre><code>&lt;input type="radio" name="radAnswer" /&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE AND CANCEL SUBPROCESS IN PYTHON USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>Starting from Python 2.6 you can use <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.terminate" rel="nofollow"><code>Popen.terminate()</code></a> to kill your processes:</p><br/><br/><pre><code>p.terminate()<br/></code></pre><br/><br/><p>In earlier versions of Python you can use <a href="http://docs.python.org/library/os.html#os.kill" rel="nofollow"><code>os.kill()</code></a>.</p><br/><br/><pre><code>os.kill(p.pid, signal.SIGTERM)<br/></code></pre><br/><br/><p>Also, <a href="http://docs.python.org/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow"><code>Popen.communicate()</code></a> will block until your child process has terminated. This means that the response will not get sent to the user before your sync job has terminated.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3RD PARTI AUTH SYSTEM
    </pattern>
    <template>
<![CDATA[<p>For an all-in-one solution, I had good results with <a href="http://github.com/flashingpumpkin/django-socialregistration" rel="nofollow">django-socialregistration</a>. It has auth backends for Twitter, Facebook and OpenID (Google, Yahoo!, ...).</p><br/><br/><p>Another possibility would be <a href="http://www.janrain.com/products/engage/" rel="nofollow">JanRain Engage</a> (formerly RPX) which provides a single point of authentication for all the major authentication providers. There's a 3rd party <a href="http://github.com/howthebodyworks/django-rpx" rel="nofollow">django app</a> for it, but I can't say anything about its quality.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GDB S REVERS DEBUG WITH PYTHON HOW
    </pattern>
    <template>
<![CDATA[<p>Before you can use GDB for reverse debugging, you must tell it to record your program execution (so it can play it back) via <code>target record</code> command, as documented <a href="http://sourceware.org/gdb/wiki/ProcessRecord" rel="nofollow">here</a>.</p><br/><br/><p>I am not sure this will help you debug your Django application though -- GDB is well suited for debugging "native" code (compiled <code>C/C++</code>), and is <em>not</em> well suited for debugging "interpreted" code (in either forward or reverse direction).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST NOT PASS VARIABL
    </pattern>
    <template>
<![CDATA[<p>D'Oh.  Sorry for wasting your time. Rookie mistake:</p><br/><br/><pre><code>if request.is_ajax():<br/></code></pre><br/><br/><p>NOT</p><br/><br/><pre><code>if request.is_ajax:<br/></code></pre><br/><br/><p>Thanks for the comments though</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIDEO DURAT IN PYTHON OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>You'll probably need to invoke an external program. <a href="http://ffmpeg.org/ffprobe.html" rel="nofollow"><code>ffprobe</code></a> can provide you with that information:</p><br/><br/><pre><code>import subprocess<br/><br/>def getLength(filename):<br/>  result = subprocess.Popen(["ffprobe", filename],<br/>    stdout = subprocess.PIPE, stderr = subprocess.STDOUT)<br/>  return [x for x in result.stdout.readlines() if "Duration" in x]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE VALU STORE IN A VARIABL TO DECID WHICH CLASS INSTANC TO INITI
    </pattern>
    <template>
<![CDATA[<p>If all your <code>*Form</code> classes are in the one module (let's call it <code>forms</code>), you can do this:</p><br/><br/><pre><code>import forms<br/><br/>form = getattr(forms, category + "Form")()<br/></code></pre><br/><br/><p>(Obviously, add whatever verification is necessary, such as catching <code>AttributeError</code>. Security-wise, if you are using a named module rather than the global namespace, it's that little bit harder for someone to inject a new <code>*Form</code> class.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL NOT HONOUR UNIQUE TOGETH
    </pattern>
    <template>
<![CDATA[<p>For completeness , my last update should have probably been added as an answer.</p><br/><br/><p>I fixed the problem by manually editing the forward method of the south migration and added the line:</p><br/><br/><pre><code>db.create_index('row_locks', ['table_name','locked_row_id'], unique=True)<br/></code></pre><br/><br/><p>Rob</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STOP WORK AFTER AJAX RELOAD OF PARENT CONTAIN
    </pattern>
    <template>
<![CDATA[<p>I use jQuery's native live() to do this all the time.  Looks like a simple swap for what you've got here.</p><br/><br/><p><a href="http://api.jquery.com/live/" rel="nofollow">http://api.jquery.com/live/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND EMPTI RESPONS IN DJANGO WITHOUT TEMPLAT
    </pattern>
    <template>
<![CDATA[<p><code>render_to_response</code> is a shortcut specifically for rendering a template. If you don't want to do that, just return an empty <code>HttpResponse</code>:</p><br/><br/><pre><code> from django.http import HttpResponse<br/> return HttpResponse('')<br/></code></pre><br/><br/><p>However, in this circumstance I wouldn't do that - you're signalling to the AJAX that there was an error, so you should return an error response, possibly code 400 - which you can do by using <code>HttpResponseBadRequest</code> instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF DJANGO APPLIC ONLI APPLI TO FORMS.PI AND NOT TO MODELS.PI
    </pattern>
    <template>
<![CDATA[<p>Changing the declaration "from django.utils.translation import ugettext as _" to "from django.utils.translation import ugettext_lazy as _" seems to solve the problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL HAVE A DATA DICT CONTAIN ALL THE CURRENT VALU
    </pattern>
    <template>
<![CDATA[<p>You may also want to have a look at the values method on the queryset. It will return dictionaries for any query instead of the usual model instances.</p><br/><br/><p><a href="https://docs.djangoproject.com/en/1.3/ref/models/querysets/#values" rel="nofollow">https://docs.djangoproject.com/en/1.3/ref/models/querysets/#values</a></p><br/><br/><p>(from docs)</p><br/><br/><pre><code>&gt;&gt;&gt; Blog.objects.filter(name__startswith='Beatles').values()<br/>[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALL MY DJANGO APPLIC IN SPECIF FOLDER
    </pattern>
    <template>
<![CDATA[<p>You can add your <code>apps</code> folder to your python path by inserting the following in your <code>settings.py</code>:</p><br/><br/><pre><code>import os<br/>import sys<br/><br/>PROJECT_ROOT = os.path.dirname(__file__)<br/>sys.path.insert(0, os.path.join(PROJECT_ROOT, 'apps'))<br/></code></pre><br/><br/><p>Then you can use all the apps in this folder just in the same way as they were in your project root!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOAD PAGE FRAGMENT USE AJAX AJAH
    </pattern>
    <template>
<![CDATA[<p>I made a middleware and a template tag to do this:</p><br/><br/><pre><code>{% delayed_block big_table %}<br/>    Real content. It will be loaded by Javascript at document.ready event.<br/>{% delayed_stub %}<br/>    Stub content that is rendered immediately.<br/>{% enddelayed_block %}<br/></code></pre><br/><br/><p>When the page is loaded, a piece of Javascript notices a special class and requests it from the server, makes a request with <code>?partial=big_table</code> parameter. When <code>big_table</code> is in <code>partial</code> parameters, this block renders the real content. The middleware catches the output, extracts only this block and wraps it in JSON. Then the Javascript module puts it into the right place.</p><br/><br/><p>The project is called <a href="https://bitbucket.org/siberiano/django-partial-page" rel="nofollow">django-partial-page</a>. The django part of it is an egg, and the Javascript module is in <code>example/media/js/partial.js</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBCLASS THE DJANGO IMAGEFILEFIELD
    </pattern>
    <template>
<![CDATA[<p>It's not clear from your question: have you tried something like this?</p><br/><br/><pre><code>class ImageMetadataMixin(object):<br/>    """Mixin can be added to any image file"""<br/>    @property<br/>    def iptc(self):<br/>        """Or something like this"""<br/><br/>class ImageWithMetadataFieldFile(ImageMetadataMixin, ImageFieldFile):<br/>    pass<br/><br/>class ImageWithMetadataField(ImageField):<br/>    attr_class = ImageWithMetadataFieldFile<br/></code></pre><br/><br/><p>I think it's all what necessary. Why do you think you need to redefine <code>descriptor_class</code>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      M OR WEB FRAMEWORK A SIMPL PROJECT
    </pattern>
    <template>
<![CDATA[<p>Pick up one of the many CMS projects in Django, like Mezzanine or Pinax, or Django cms or any of a number of others see <a href="http://oswco.com/2011/may/20/cms-frameworks-what-use-django-vs-drupal/">http://oswco.com/2011/may/20/cms-frameworks-what-use-django-vs-drupal/</a> for a more complete set of references or discussions. You will be way happier and in something that can be more easily scaled and modified to be what you really want. There is even a Django based Stack-overflow clone that you can pick up and integrate if you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUB DIRECTORI VIEW AND IMPORT ALL FILE FROM INIT .PI
    </pattern>
    <template>
<![CDATA[<p>I believe that importing through other files is somewhat awkward, and that all views should be imported directly - like the way you're doing now.<br/>However, you can create a views.py file and import all relevant view methods from there, the dir structure will remain the same, only you'll add a views.py file under the views/ dir. The code in the file itself should be something like:<br></p><br/><br/><pre><code>from .index import index<br/>from .other_view import other_view_method<br/>...<br/></code></pre><br/><br/><p>then the code in your urls.py file:</p><br/><br/><pre><code> urlpatterns = patterns('locate.views',<br/>    url(r'^',  'index.index'), )<br/></code></pre><br/><br/><p>will turn into:</p><br/><br/><pre><code>urlpatterns = patterns('locate.views.views',<br/>    url(r'^',  'index'),<br/>)<br/></code></pre><br/><br/><p>However, if you still want to run over all your *.py files and get all view methods from them, you can create a loader file that runs first and loads all views, the code should be something as follows:</p><br/><br/><pre><code>from glob import glob1<br/>from types import FunctionType<br/><br/>VIEW_METHOD_PREFIX = ''    # Whatever you like here, I suggest you use something<br/>VIEWS_DIR          = 'views'    # Where you views are<br/><br/>def import_views():<br/><br/>    for filename in glob1(VIEWS_DIR, '*.py'):<br/>        if filename == '__init__.py':    # I assume you don't want that<br/>            continue<br/><br/>        module_name = os.path.basename(filename).split('.py')[0]<br/><br/>        # You might need to change this, depending on where you run the file:<br/>        imported_module = __import__(<br/>            module_name, fromlist=[module_name,])  <br/><br/>        for method_name, method in imported_module.__dict__.iteritems():<br/>            if not isinstance(method, FunctionType):<br/>                continue<br/>            if not method_name.startswith(VIEW_METHOD_PREFIX):<br/>                continue<br/>            globals()[method_name] = method<br/></code></pre><br/><br/><p>Then in urls.py you add:</p><br/><br/><pre><code>import_views()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX FIELD HELP
    </pattern>
    <template>
<![CDATA[<p>After the suggestion of one of the commenter's that the DynamicChoiceField class was the culprit I removed it and set the form objects for ModelChoiceFields with the exact same other parameters. The object appears to pass and validate correctly as well. The extra class existed based on an old tutorial I found. it appears that what the author did there works with the forms.ChoiceField but is not required for using a ModelChoiceField</p><br/><br/><p>thanks everyone for the help</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM INSID AN EXTJ TAB
    </pattern>
    <template>
<![CDATA[<p>If you want to keep it within the tab then you'll need to forgo the standard HTML form mechanisms and instead set the <code>onclick</code> event on a button to perform a POST via AJAX.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM EXTERN TO PYTHON DEVELOP SERVER
    </pattern>
    <template>
<![CDATA[<p>How are you running the server?<br><br/>Have you tried something like this?  </p><br/><br/><pre><code>manage.py runserver 0.0.0.0:8080<br/></code></pre><br/><br/><p>From <a href="http://docs.djangoproject.com/en/1.2/ref/django-admin/" rel="nofollow">the documentation</a>:</p><br/><br/><blockquote><br/>  <p>Note that the default IP address, 127.0.0.1, is not accessible from other machines on your network. To make your development server viewable to other machines on the network, use its own IP address (e.g. 192.168.2.1) or 0.0.0.0.</p><br/></blockquote><br/><br/><p><code>0.0.0.0</code> means: bind to all IP addresses this computer supports. So, as <a href="http://stackoverflow.com/questions/4073977/access-from-external-to-python-development-server/4073994#4073994">TheSingularity says</a>, you'll then be able to access your Django app by entering the private IP address usually beginning with 192.168.*; which is not accessible from the Internet.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FUNCTION WITH TOO MANI ARGUMENT WITH DEFAULT VALU HOW TO MAKE IT CLEANER
    </pattern>
    <template>
<![CDATA[<p>if i were you i think i will do it like this:</p><br/><br/><pre><code>def contact(request, sender=None, append_message=None, context=None):<br/><br/>   if not sender:<br/>       sender = settings.DEFAULT_FROM_EMAIL  # i hope that you can access settings here<br/><br/>   # The context arg is a dictionary where you can put all the others argument and <br/>   # you can use it like so :<br/><br/>   subj_tmpl = context.get('subj_tmpl', 'contato/subject.txt')<br/>   # ....<br/></code></pre><br/><br/><p>hope this will help you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIELD VALU IN DJANGO FORM CLEAN ( ) METHOD IF THI FIELD NOT PASS IN CONSTRUCTOR
    </pattern>
    <template>
<![CDATA[<p>The previous answer would work, but i like encapsulating all the forms internal operations like what to show and what not, withing the form. I know you mentioned you dont want to send a field value to the constructor, but if you dont mind sending the user, your solution would work.<br/>ie your constructor:</p><br/><br/><pre><code>def __init__(self, user):<br/>    self.user = user<br/>    super(BaseForm, self).__init__()<br/></code></pre><br/><br/><p>then in your clean, you just change the <code>user</code> to <code>self.user</code>.<br/>There is another added benefit to this. Say tomorrow you want to assign more fields based on your user, you dont need to add anything to the views, you can simply add it to the form.</p><br/><br/><p>EDIT:<br/>When you add afield to exclude, it is not available in the cleaned data. Instead, set its widget as hidden.</p><br/><br/><pre><code>active = forms.BooleanField(widget=forms.HiddenInput)<br/></code></pre><br/><br/><p>EDIT 2: If you really dont want the field in the form<br/>In this case, instead of overriding the clean, why dont you override the save?</p><br/><br/><pre><code>def save (self):<br/>    super(BaseForm, self).save()<br/>    if user.is_admin():<br/>        self.instance.active=True<br/>    super(BaseForm, self).save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT DATE FILTER FORMAT STRING QUESTION
    </pattern>
    <template>
<![CDATA[<p>Have you tried <code>{{ some_date|date:"j-M" }}</code>?</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#date" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/builtins/#date</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3 COLUMN HTML TABL WITH DYNAM DATA IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>you can use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#for" rel="nofollow"><strong><code>forloop.counter</code></strong></a> and do something like:</p><br/><br/><pre><code>&lt;table&gt;<br/>    &lt;tr&gt;<br/>{% for person in people %}<br/>        &lt;td&gt;{{ person }}&lt;/td&gt;<br/>    {% if not forloop.last and forloop.count == 3 or forloop.count == 6 %}<br/>    &lt;/tr&gt;<br/>    &lt;tr&gt;<br/>    {% endif %}<br/>{% endfor %}<br/>    &lt;/tr&gt;<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>or roll a custom template tag. One <a href="http://herself.movielady.net/2008/07/16/split-list-to-columns-django-template-tag/" rel="nofollow"><strong><code>here</code></strong></a> looks like its doing what you want.</p><br/><br/><p>looks like this SO question is related:</p><br/><br/><p><a href="http://stackoverflow.com/questions/1610178/render-one-queryset-into-2-div-columns-django-template">Render one queryset into 2 div columns (django template)</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REL URL AND HTTP
    </pattern>
    <template>
<![CDATA[<p>As Tomasz suggests, one way to do it is to set up middleware to redirect to and from https as necessary. Here's <a href="http://www.rosslawley.co.uk/2010/08/using-django-to-serve-parts-of-your.html" rel="nofollow">one implementation</a> - the idea is to decorate those views that should be served under https, and when the user navigates to a view that shouldn't be secure from one that is, the middleware redirects them automatically back to the http version of the page.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN VIEW METHOD DJANGO
    </pattern>
    <template>
<![CDATA[<p>Why not just override the relevant methods with your ModelAdmin subclass? That's why it's a class, after all.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I REDIRECT TO PAGE WHERE FORM ORIGIN
    </pattern>
    <template>
<![CDATA[<p>There are a couple of options, all with the cons and benefits ofcourse.</p><br/><br/><ol><br/><li>passing the originating page withi <code>POST</code>/<code>GET</code></li><br/><li>storing the originating page in the session (won't work with multiple tabs obviously)</li><br/><li>storing the originating page in a cookie (won't work with multiple tabs either)</li><br/><li>if it's a single page, redirect to the referrer. Doesn't seem possible in your case</li><br/></ol><br/><br/><p>Personally I think using a next parameter is your best option, but do remember to secure it (only relative urls, no javascript stuff, csrf framework) so you won't have any security problems with it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + APACH MOD WSGI HAVE TO RESTART APACH AFTER CHANG
    </pattern>
    <template>
<![CDATA[<p>This blog post may help you:</p><br/><br/><p><a href="http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html" rel="nofollow">http://blog.dscpl.com.au/2008/12/using-modwsgi-when-developing-django.html</a></p><br/><br/><p>...and this:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/ReloadingSourceCode#Restarting_Daemon_Processes" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ReloadingSourceCode#Restarting_Daemon_Processes</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY FOR A REVIS CONTROLL MODEL DJANGO
    </pattern>
    <template>
<![CDATA[<p>I think you forgot the word <em>fields</em> in your title.  =)  I guess I would use an approach that leaves the original model intact.  Something starting with:</p><br/><br/><pre><code>class DjangoPony(models.Model):<br/>    name = models.TextField()<br/>    color = models.TextField()<br/><br/>class RevisionControlledValue(models.Model):<br/>    created = models.DateTimeField(auto_now_add=True)<br/>    created_by = models.ForeignKey(User)<br/>    value = models.TextField()<br/>    field = models.CharField(max_length=20)<br/><br/>    content_type = models.ForeignKey(ContentType)<br/>    object_id = models.PositiveIntegerField()<br/>    content_object = generic.GenericForeignKey('content_type', 'object_id')<br/></code></pre><br/><br/><p>This assumes you'll only be using it for TextFields. To make it really beautiful, you could create a new field, let's say <code>ReversionTextField</code> that automatically creates the reversion object when the model is saved.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .CORE.PAGIN AJAX PAGIN WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>I did not find the error, but I show you below how I solved this task. I think you can adapt it easily to your needs.  </p><br/><br/><p>The jquery ajax part:</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt;<br/>function ajax_get_update()<br/>    {<br/>       $.get(url, function(results){<br/>          //get the parts of the result you want to update. Just select the needed parts of the response<br/>          var table = $("table", results);<br/>          var span = $("span.step-links", results);<br/><br/>          //update the ajax_table_result with the return value<br/>          $('#ajax_table_result').html(table);<br/>          $('.step-links').html(span);<br/>        }, "html");<br/>    }<br/><br/>//bind the corresponding links in your document to the ajax get function<br/>$( document ).ready( function() {<br/>    $( '.step-links #prev' ).click( function(e) {<br/>        e.preventDefault();<br/>        url = ($( '.step-links #prev' )[0].href);<br/>        ajax_get_update();<br/>    });<br/>    $( '.step-links #next' ).click( function(e) {<br/>        e.preventDefault();<br/>        url = ($( '.step-links #next' )[0].href);<br/>        ajax_get_update();<br/><br/>    });<br/>});<br/><br/>//since the links are reloaded we have to bind the links again<br/>//to the actions<br/>$( document ).ajaxStop( function() {<br/>    $( '.step-links #prev' ).click( function(e) {<br/>        e.preventDefault();<br/>        url = ($( '.step-links #prev' )[0].href);<br/>        ajax_get_update();<br/>    });<br/>    $( '.step-links #next' ).click( function(e) {<br/>        e.preventDefault();<br/>        url = ($( '.step-links #next' )[0].href);<br/>        ajax_get_update();<br/>    });<br/>});<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>The template html part:</p><br/><br/><pre><code>&lt;div class="pagination"&gt;<br/>            &lt;span class="step-links"&gt;<br/>                {% if object_list.has_previous %}<br/>                &lt;a id="prev" href="?{{ urlquerystring_previous_page }}"&gt;previous&lt;/a&gt;<br/>                {% else %}<br/>                &lt;span style="visibility:hidden;"&gt;previous&lt;/span&gt;<br/>                {% endif %}<br/><br/>                &lt;span class="current"&gt;<br/>                Page {{ object_list.number }} of {{ object_list.paginator.num_pages }}.<br/>                &lt;/span&gt;<br/><br/>                {% if object_list.has_next %}<br/>                            &lt;a id="next" href="?{{ urlquerystring_next_page }}"&gt;next&lt;/a&gt;<br/>                {% else %}<br/>                            &lt;span style="visibility:hidden;"&gt;next&lt;/span&gt;<br/>                {% endif %}<br/>            &lt;/span&gt;<br/>        &lt;/div&gt;<br/><br/>            &lt;form class="" id="action-selecter" action="{{ request.path }}" method="POST"&gt;<br/><br/>            &lt;div id="ajax_table_result"&gt;<br/>                &lt;table class="w600" cellspacing="5"&gt;<br/>                    &lt;thead&gt;<br/>                        {% table_header headers %}<br/>                    &lt;/thead&gt;<br/>                        &lt;tbody&gt;<br/>                          ....<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOLUT FOR MULTIPL FORM ON SINGL PAGE
    </pattern>
    <template>
<![CDATA[<p>Before implementing ajax, i'll try to make the forms work with javascript disabled. The 2 forms can point to the same view. <br/>For routing the action, You can use <code>&lt;button type="submit"&gt;</code>tags with <code>name</code> <code>value</code> attributes filled, instead of <code>&lt;input type="submit"&gt;</code>.</p><br/><br/><p>The 2 forms template</p><br/><br/><pre><code>&lt;form action="{% url your-url %}" method="get"&gt;<br/>  &lt;input type="text" name="q" value="{{ q }}"&gt;<br/>  &lt;button type="submit" name="action" value="search"&gt;Search&lt;/button&gt;<br/>&lt;/form&gt;<br/><br/>{% if entries %}<br/>  ...<br/>  &lt;form action="{% url your-url %}" method="post"&gt;<br/>    &lt;input type="hidden" name="q" value="{{ q }}"&gt;<br/>    &lt;button type="submit" name="action" value="save"&gt;Save entries&lt;/button&gt;<br/>  &lt;/form&gt;<br/>{% endif %}<br/></code></pre><br/><br/><p>The not so ugly one form template</p><br/><br/><pre><code>&lt;form action="{% url your-url %}" method="post"&gt;<br/>  &lt;input type="text" name="q" value="{{ q }}"&gt;<br/><br/>  &lt;button type="submit" name="action" value="search"&gt;Search&lt;/button&gt;<br/><br/>  {% if entries %}<br/>    ...<br/>    &lt;button type="submit" name="action" value="save"&gt;Save entries&lt;/button&gt;<br/>  {% endif %}<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Then, catch the "action" into your view, like this code (not tested) </p><br/><br/><pre><code>def your_view(request, *args, **kwargs):<br/>    action = request.REQUEST.get('action', None)<br/>    if request.method == 'POST' and action == 'save':<br/>        # do the save stuff<br/>    elif action == 'search':<br/>        # no need to check if it's a GET<br/>        if request.REQUEST.get('q', None):<br/>            # do the display stuff<br/>        else:<br/>            # q required, maybe push a warning message here<br/>    else:<br/>        # default stuff<br/><br/>    return # the response ...<br/></code></pre><br/><br/><p>Then you can some ajax</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR COERC TO UNICOD NEED STRING OR BUFFER
    </pattern>
    <template>
<![CDATA[<p>I think the problem is</p><br/><br/><pre><code>def __unicode__(self):<br/>    return self<br/></code></pre><br/><br/><p>which should return a unicode string rather than a "Want" instance.  I'm not sure what you want there instead -- maybe "self.id"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS DJANGO DEPLOY
    </pattern>
    <template>
<![CDATA[<p>I do not know django, although have some experiences with python. I heard nice things about it, but I will mention rails related hosting/deployment options.</p><br/><br/><ul><br/><li><a href="https://github.com/capistrano/capistrano" rel="nofollow">capistrano</a> - if you want to deploy manually on your own server/VPS, this is a way to go. It might take some time, you have to learn and understand capistrano. There are several resources for this (i.e. <a href="http://peepcode.com/products/capistrano-2" rel="nofollow">peepcode</a>, <a href="http://railscasts.com/episodes/133-capistrano-tasks" rel="nofollow">railscasts</a>, ..)</li><br/><li><a href="http://heroku.com/" rel="nofollow">heroku</a> - are you familiar with <a href="http://git-scm.com/" rel="nofollow">git</a>? If you are, heroku is a super elegant way to deploy your rails application by git. If you have a mini application, like a personal blog or a presentation, than you can use it for free!</li><br/><li><a href="https://appengine.google.com/" rel="nofollow">google app engine</a> - personally I did not use, even not try it so far. But some guys recommend it. You can run your rails application on JRuby.</li><br/></ul><br/><br/><p>Although it is not strictly rails related, if talking about deployment, <a href="http://www.opscode.com/chef" rel="nofollow">chef</a> should be mentioned. Chef is written in ruby. It is tool for bootstrapping and managing servers on various providers. If you are beginning with rails, check out chef later.</p><br/><br/><p>I would recommend you to start with Heroku if you choose rails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PROJECT FROM 1.2 TO 1.3 MANAGE.PI NOT WORK PROPERLI
    </pattern>
    <template>
<![CDATA[<p>In order to use a management command, you need to add the application that provides it to <code>INSTALLED_APPS</code> in settings.py. From <a href="http://docs.djangoproject.com/en/dev/howto/static-files/" rel="nofollow">the docs</a>:</p><br/><br/><blockquote><br/>  <p>First, you'll need to make sure that <code>django.contrib.staticfiles</code> is in your <code>INSTALLED_APPS</code>.</p><br/></blockquote><br/><br/><p>That should make the command available.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT TAG TO DISPLAY DJANGO VERSION
    </pattern>
    <template>
<![CDATA[<p>Figured this out (currently using Django 1.3) - I needed to <strong>append the function name 'django_version'</strong> to the TEMPLATE_CONTEXT_PROCESSORS tuple in <strong>settings.py</strong>:</p><br/><br/><pre><code>TEMPLATE_CONTEXT_PROCESSORS = (  <br/>    # ...  <br/>    'myproject.context_processors.django_version',  <br/>)<br/></code></pre><br/><br/><p><strong>context_processors.py</strong> (thanks to <a href="http://stackoverflow.com/questions/4256145/django-template-tag-to-display-django-version/4256485#4256485">zsquare</a>):</p><br/><br/><pre><code>import django<br/>def django_version(request):<br/>    return { 'django_version': django.VERSION }<br/></code></pre><br/><br/><p><strong>urls.py</strong>:</p><br/><br/><pre><code>urlpatterns += patterns('django.views.generic.simple',<br/>    (r'^$', 'direct_to_template', {'template': 'base.html'}),<br/>)<br/></code></pre><br/><br/><p>Put the following in your templates, such as <strong>base.html</strong>:</p><br/><br/><pre><code>{{ django_version }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA PASS BACK IN THE RESPONS USE AJAX JQUERI
    </pattern>
    <template>
<![CDATA[<p>From the <a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow">API</a></p><br/><br/><blockquote><br/>  <p>success(data, textStatus,<br/>  XMLHttpRequest)Function</p><br/>  <br/>  <p>A function to be called if the request<br/>  succeeds. The function gets passed<br/>  three arguments: <strong><em>The data returned<br/>  from the server,</em></strong> formatted according<br/>  to the 'dataType' parameter; a string<br/>  describing the status; and the<br/>  XMLHttpRequest object (available as of<br/>  jQuery 1.4). This is an Ajax Event.</p><br/></blockquote><br/><br/><p>I think you'll have to use <a href="http://api.jquery.com/jQuery.parseJSON/" rel="nofollow">parseJSON()</a> to convert it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TOKEN VIA DJANGO PISTON THROW TYPEERROR EXCEPT
    </pattern>
    <template>
<![CDATA[<p>This is a piston problem that comes from an encoding problem of the key/secret of the consumer.<br/>The solution is to force the encoding of the key/secret returned from the database to ASCII.</p><br/><br/><p>In the <code>store.py</code> file of Piston, modify the <code>lookup_consumer</code> so it look like this:</p><br/><br/><pre><code>def lookup_consumer(self, key):<br/>    try:<br/>        self.consumer = Consumer.objects.get(key=key)<br/>        self.consumer.key = self.consumer.key.encode('ascii')<br/>        self.consumer.secret = self.consumer.secret.encode('ascii')<br/>        return self.consumer<br/>    except Consumer.DoesNotExist:<br/>        return None<br/></code></pre><br/><br/><p><a href="https://github.com/nbarraille/django-piston-nbarraille" rel="nofollow">Here</a> is my fork of django-piston fixing this problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEEPI STREAM API INTEGR WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are various ways to do this, but using a messaging lib (<a href="https://github.com/ask/celery/" rel="nofollow">celery</a>) will probably be the easiest.</p><br/><br/><p>1) Keep a python process running tweepy. Once an interesting message is found, create a new celery task</p><br/><br/><p>2) Inside this carrot task persist the data to the database (the counter, the tweets, whatever). This task can well run django code (e.g the ORM).</p><br/><br/><p>3) Have a regular django app displaying the results your task has persisted.</p><br/><br/><p>As a precaution, it's probably a good ideal to run the tweepy process under supervision (supervisord might suit your needs). If anything goes wrong with it, it can be restarted automatically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR LOOP THREE COLUMN PER ROW IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>There's a divisibleby tag.</p><br/><br/><p>So you can do something (ugly) like:</p><br/><br/><pre><code>&lt;table&gt;&lt;tr&gt;<br/>{% for field in form %}<br/>   &lt;td&gt;{{ field }}&lt;/td&gt;<br/>   {% if forloop.last %}<br/>     &lt;/tr&gt;<br/>   {% else %}<br/>     {% if forloop.counter|divisibleby:"3" %}<br/>       &lt;/tr&gt;&lt;tr&gt;<br/>     {% endif %}<br/>   {% endif %}<br/>{% endfor %}<br/>&lt;/table&gt;<br/></code></pre><br/><br/><p>Alternatively, you could give your form class a <code>table_print</code> method that returns a html string (wrapped in <code>mark_safe</code>).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S SYS.STDIN.READ ( ) BLOCK
    </pattern>
    <template>
<![CDATA[<p>By default, <code>sys.stdin.read()</code> and <code>sys.stdin.read(n)</code> are blocking calls. I would assume the consumption of 100% CPU is actually attributable to streaming data into your script or some other behavior not cited here.</p><br/><br/><p>Upon looking at the help documentation for <code>sys.stdin.read</code>, I noticed this:</p><br/><br/><blockquote><br/>  <p>read(...)</p><br/>  <br/>  <p>read([size]) -> read at most size bytes, returned as a string.</p><br/>  <br/>  <p>If the size argument is negative or omitted, read until EOF is reached.<br/>      <strong>Notice that when in non-blocking mode,</strong> less data than what was requested<br/>      may be returned, even if no size parameter was given.</p><br/></blockquote><br/><br/><p>(Emphasis mine.)</p><br/><br/><p>This implies blocking mode is the default behavior, which is consistent with my experience. It also led me to track down similar questions on SO. Voila:<br/><a href="http://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python">Non-blocking read on a stream in python.</a></p><br/><br/><p>Good luck with your adaptation!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIN ONLI AREA IN DJANGO + APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>For a third-party admin area I use <a href="http://code.google.com/p/appengine-admin/" rel="nofollow">appengine_admin</a>. <br/>To pass the variable whether current user is admin to the template I also found the following convenient</p><br/><br/><pre><code>self.response.out.write(template.render(path, {''admin':users.is_current_user_admin()..<br/></code></pre><br/><br/><p>then in template admin parts display towards admin with tag</p><br/><br/><pre><code>{% if admin %} ... admin stuff<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK HOWTO S FOR BEGINN
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.djangobook.com/" rel="nofollow">http://www.djangobook.com/</a></p><br/><br/><p><a href="http://code.djangoproject.com/wiki/Tutorials" rel="nofollow">http://code.djangoproject.com/wiki/Tutorials</a></p><br/><br/><p><a href="http://digg.com/news/technology/Top_30_Django_Tutorials_and_Articles" rel="nofollow">http://digg.com/news/technology/Top_30_Django_Tutorials_and_Articles</a></p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/intro/tutorial01/" rel="nofollow">http://docs.djangoproject.com/en/dev/intro/tutorial01/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STAR RATE SYSTEM AND AJAX
    </pattern>
    <template>
<![CDATA[<p>AJAX sounds scary and confusing but it doesn't have to be. Essentially what you want to do is post some data to a particular url/view combo. See <a href="http://api.jquery.com/jQuery.post/" rel="nofollow">jQuery.post</a> for more information on using AJAX to send data to the server.</p><br/><br/><pre><code>#urls<br/>urlpatterns += patterns('',<br/>url(r'^article/rate/', 'article.rate'),<br/><br/>#views <br/>def rate(request):<br/>    if request.method == 'POST':<br/>       # use post data to complete the rating..<br/><br/>#javascript<br/>$.post("/article/rate", { rating: 3, article: 2 },<br/>    function(data) {<br/>       // success! so now set the UI star to 3<br/>});<br/></code></pre><br/><br/><p>As far as I know, star-ratings are produced with radio controls and css. So if you want to show the current rating per user on load of the page, just have your template render the associated radio with the <code>checked</code> option.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN A DJANGO QUERI
    </pattern>
    <template>
<![CDATA[<p>This query will not give you duplicates - ie, it will give you all the rows in the database, ordered by email. </p><br/><br/><p>However, I presume what you mean is that you have duplicate data within your database. Adding <code>distinct()</code> here won't help, because even if you have only one field, you also have an automatic <code>id</code> field - so the combination of id+email is not unique.</p><br/><br/><p>Assuming you only need one field, <code>email_address</code>, de-duplicated, you can do this:</p><br/><br/><pre><code>email_list = Email.objects.values_list('email', flat=True).distinct()<br/></code></pre><br/><br/><p>However, you should really fix the root problem, and remove the duplicate data from your database.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EMPLATESYNTAXERROR SETTINGS TAG IS NOT A VALID TAG LIBRARI
    </pattern>
    <template>
<![CDATA[<p>It seems to me you probably have a code like <code>{% load settings_tags %}</code> somewhere in your template. Django looks for <code>templatetags/settings_tags.py</code> file in your installed apps' directories. This is the result of not finding a file like this. Maybe the app, which contains it is not in your <code>INSTALLED_APPS</code> or maybe it's a typo. You should be getting the same error when you put this url in your browser.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWIST DJANGO REACTOR.RUN ( ) CAUS PROBLEM
    </pattern>
    <template>
<![CDATA[<p>The above two answers are correct. However, considering that you've already implemented a spelling <em>server</em> then <strong>run it as one</strong>. You can start by running it on the same machine as a separate process - at <code>localhost:PORT</code>. Right now it seems you have a very simple binary protocol interface already - you can implement an equally simple Python client using the standard lib's <code>socket</code> interface in blocking mode.</p><br/><br/><p>However, I suggest playing around with <code>twisted.web</code> and expose a simple web interface. You can use JSON to serialize and deserialize data - which is well supported by Django. Here's a very quick example:</p><br/><br/><pre><code>import json<br/>from twisted.web import server, resource<br/>from twisted.python import log<br/><br/>class Root(resource.Resource):<br/>    def getChild(self, path, request):<br/>        # represents / on your web interface<br/>        return self<br/><br/>class WebInterface(resource.Resource):<br/>    isLeaf = True<br/>    def render_GET(self, request):<br/>        log.msg('GOT a GET request.')<br/>        # read request.args if you need to process query args<br/>        # ... call some internal service and get output ...<br/>        return json.dumps(output)<br/><br/>class SpellingSite(server.Site):<br/>    def __init__(self, *args, **kwargs):<br/>        self.root = Root()<br/>        server.Site.__init__(self, self.root, **kwargs)<br/>        self.root.putChild('spell', WebInterface())<br/></code></pre><br/><br/><p>And to run it you can use the following skeleton <code>.tac</code> file:</p><br/><br/><pre><code>from twisted.application import service, internet<br/><br/>site = SpellingSite()<br/>application = service.Application('WebSpell')<br/># attach the service to its parent application<br/>service_collection = service.IServiceCollection(application)<br/>internet.TCPServer(PORT, site).setServiceParent(service_collection)<br/></code></pre><br/><br/><p>Running your service as another first class service allows you to run it on another machine one day if you find the need - exposing a web interface makes it easy to horizontally scale it behind a reverse proxying load balancer too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS FILE FROM DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It seems like you are running an old version of django, the staticfiles application is included in the latest 1.3-alpha or trunk version. To find out which version of django your project is running on try running the following command on a shell</p><br/><br/><pre><code>$ python -c "import django; print django.get_version()"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER USERPROFIL AND ADMIN
    </pattern>
    <template>
<![CDATA[<p>I can't see exactly what's wrong, but here's a slightly simpler example that I know works. Put this is any working admin.py. Try adding a trailing comma to your inline-- some things break without it.</p><br/><br/><pre><code>from django.contrib import admin<br/>from django.contrib.auth.admin import UserAdmin<br/>from accounts.models import UserProfile<br/><br/>admin.site.unregister(User)<br/><br/>class UserProfileInline(admin.StackedInline):<br/>    model = UserProfile<br/><br/>class UserProfileAdmin(UserAdmin):<br/>    inlines = [ UserProfileInline, ]<br/><br/>admin.site.register(User, UserProfileAdmin)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSRF VERIF FAIL
    </pattern>
    <template>
<![CDATA[<p><strong>1</strong>. include <code>{% csrf_token %}</code> <strong>inside</strong> the form tag in the template.</p><br/><br/><p><strong>2</strong>. use a RequestContext in render_to_response</p><br/><br/><pre><code>return render_to_response('contact.html', {'form': form},<br/>                   context_instance=RequestContext(request))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICT TO JSON VIA JSON.LOAD
    </pattern>
    <template>
<![CDATA[<p>You are trying to use the wrong method. <code>json.loads</code> is for <em>loading JSON to Python</em>. If you want to convert Python to JSON, you need <code>json.dumps</code>.</p><br/><br/><pre><code>result = json.dumps(response[1])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SELF REFERENTI RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>I suggest you use <code>django-mptt</code> which offers easier to use method of recursively spitting the structure out, example @ <a href="http://django-mptt.github.com/django-mptt/templates.html" rel="nofollow">http://django-mptt.github.com/django-mptt/templates.html</a></p><br/><br/><p>You have to register mptt with the model <a href="http://django-mptt.github.com/django-mptt/models.html" rel="nofollow">first</a>, though.</p><br/><br/><p>Here is my code using it: <a href="http://stackoverflow.com/questions/3224837/including-foreign-key-count-in-django-mptt-full-tree-listing">Including foreign key count in django mptt full tree listing?</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON APACH WEB SERVER DICT OBJECT HA NO ATTRIBUT RENDER CONTEXT
    </pattern>
    <template>
<![CDATA[<p>The <code>render()</code> method on a <code>Template</code> takes a <code>Context</code> object as its argument, not a dict. You'll have to construct a <code>Context</code> object from the dict, e.g.</p><br/><br/><pre><code>namedbox = getNamesBox().render(Context(locals()))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USE DJANGO.FORM TO PREPOPUL A CHOIC FIELD WITH ROW FROM A MODEL
    </pattern>
    <template>
<![CDATA[<p>It looks like you may be looking for <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#django.forms.ModelChoiceField" rel="nofollow"><code>ModelChoiceField</code></a>.</p><br/><br/><pre><code>user2 = forms.ModelChoiceField(queryset=User.objects.all())<br/></code></pre><br/><br/><p>This won't show fullnames, though, it'll just call <code>__unicode__</code> on each object to get the displayed value.</p><br/><br/><p>Where you don't just want to display <code>__unicode__</code>, I do something like this:</p><br/><br/><pre><code>class MatchForm(forms.Form):<br/>    user1 = forms.ChoiceField(choices = [])<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(MatchForm, self).__init__(*args, **kwargs)<br/>        self.fields['user1'].choices = [(x.pk, x.get_full_name()) for x in User.objects.all()]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT FILTER THAT HANDL ...MORE AND WHEN YOU CLICK ON IT IT SHOW MORE OF THE TEXT
    </pattern>
    <template>
<![CDATA[<p>Just whipped this up, seems to do what you want, and there's no dependency on any external JS libs.</p><br/><br/><p>DISCLAIMER: I haven't tried this in IE, but chrome and firefox work fine.</p><br/><br/><pre><code>from django import template<br/>from django.utils.html import escape<br/>from django.utils.safestring import mark_safe<br/><br/>register = template.Library()<br/><br/>import re<br/><br/>readmore_showscript = ''.join([<br/>"this.parentNode.style.display='none';",<br/>"this.parentNode.parentNode.getElementsByClassName('more')[0].style.display='inline';",<br/>"return false;",<br/>]);<br/><br/>@register.filter<br/>def readmore(txt, showwords=15):<br/>    global readmore_showscript<br/>    words = re.split(r' ', escape(txt))<br/><br/>    # wrap the more part<br/>    words.insert(showwords, '&lt;span class="more" style="display:none;"&gt;')<br/>    words.append('&lt;/span&gt;')<br/><br/>    # insert the readmore part<br/>    words.insert(showwords, '&lt;span class="readmore"&gt;... &lt;a href="#" onclick="')<br/>    words.insert(showwords+1, readmore_showscript)<br/>    words.insert(showwords+2, '"&gt;read more&lt;/a&gt;')<br/>    words.insert(showwords+3, '&lt;/span&gt;')<br/><br/>    # Wrap with &lt;p&gt;<br/>    words.insert(0, '&lt;p&gt;')<br/>    words.append('&lt;/p&gt;')<br/><br/>    return mark_safe(' '.join(words))<br/><br/>readmore.is_safe = True<br/></code></pre><br/><br/><p>To use it, just create a templatetags folder in your app, create the <code>__init__.py</code> file in there, and then drop this code into <code>readmore.py</code>.</p><br/><br/><p>Then at the top of any template where you want to use it, just add: <code>{% load readmore %}</code></p><br/><br/><p>To use the filter itself:</p><br/><br/><p><code>{{ some_long_text_var|readmore:15 }}</code></p><br/><br/><p>The :15 tells how many words you want to show before the read more link.</p><br/><br/><p>If you want anything fancy like ajax loading of the full content, that's quite a bit different and would require a bit more infrastructure.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .SERIAL ( ) RETURN EMPTI DICT. WHAT DO I DO WRONG
    </pattern>
    <template>
<![CDATA[<p>Send your <code>$.post</code> only upon submitting the function (hence the event handler <code>&lt;form_selector&gt;.submit( ... )</code>, see <a href="http://api.jquery.com/submit/" rel="nofollow"><code>.submit()</code></a>.</p><br/><br/><p>Notice that I kept the <code>$(document).ready</code> part. The purpose of that is to wait for all other scripts and the DOM to load before doing stuff such as binding events to elements in the DOM (such as that form), because if the elements you're binding to aren't loaded at the time the binding executes, nothing will happen instead.</p><br/><br/><pre><code>$(document).ready(function() {<br/>    $("form#myForm").submit(function() {<br/>        $.post($(this).attr("action"), $(this).serialize(), <br/>          function(data) {<br/>            if (data == "") { alert("No data returned!"); return; }<br/>            // otherwise set the content div to the data we received<br/>            $('div.content').html(data);<br/>          }<br/>        );<br/>        // disable normal submitting of the form since we use ajax now<br/>        return false;<br/>    });<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PREBUILT VERSION OF PYTHON 2.7 MYSQL DB API TO INSTAL AND USE WITH DJANGO OR DO I HAVE TO REALLI BUILD IT FROM SCRATCH
    </pattern>
    <template>
<![CDATA[<p>For windows you might try the binary installer from <a href="http://www.codegood.com/archives/129" rel="nofollow">http://www.codegood.com/archives/129</a></p><br/><br/><p>On linux you would normally install it using the native package manager, e.g. <code>sudo apt-get install mysql-python</code> or via <code>sudo easy_install mysqld</code>.</p><br/><br/><p>The <code>easy_install</code> way will also work on windows provided you have installed the right version of Visual Studio (2010?) or mingw.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL IMAG FROM AN IN MEMORI FILE
    </pattern>
    <template>
<![CDATA[<p>Note that Django's <code>ImageField</code> inherits the <code>open</code> method from <code>FieldFile</code>. This returns a stream object that can be passed to PIL's <code>Image.open</code> (the standard factory method for creating <code>Image</code> objects from an image stream):</p><br/><br/><pre><code>stream = imagefield.open()<br/>image = Image.open(stream)<br/>stream.close()<br/># ... and then save image with: image.save(outfile, format, options)<br/></code></pre><br/><br/><p>See <a href="http://www.pythonware.com/library/pil/handbook/image.htm" rel="nofollow">PIL Image documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIFI A DATABAS FOR DJANGO TEST TO USE INSTEAD OF HAVE IT BUILD IT EVERYTIM
    </pattern>
    <template>
<![CDATA[<p>It's possible,  here is a way :</p><br/><br/><p>1) Define your own test runner look <a href="http://docs.djangoproject.com/en/dev/topics/testing/#defining-a-test-runner" rel="nofollow">here</a> to see how.</p><br/><br/><p>2) For your custom test runner look in the <a href="https://code.djangoproject.com/browser/django/tags/releases/1.3/django/test/simple.py" rel="nofollow">default test runner</a>, you can just copy and past the code and just comment this line : <code>connection.creation.destroy_test_db(old_name, verbosity)</code> which is responsible for destroying the test database, and i think you should put the <code>connection.creation.create_test_db(..)</code> line in a try except something like this maybe:</p><br/><br/><pre><code>try:<br/>    # Create the database the first time.<br/>    connection.creation.create_test_db(verbosity, autoclobber=not interactive) <br/>except ..: # Look at the error that this will raise when create a database that already exist<br/>    # Test database already created.<br/>    pass <br/></code></pre><br/><br/><p>3) Bound <a href="https://docs.djangoproject.com/en/dev/ref/settings/#test-runner" rel="nofollow">TEST_RUNNER</a> in setting.py to your test runner.</p><br/><br/><p>4) Now run your test like this: ./manage.py test</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL FIELD DEFAULT TO NULL
    </pattern>
    <template>
<![CDATA[<p>Try <code>default=None</code>. There is no <code>NULL</code> in <strong>python</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMCACH ON OS X TO USE WITH DJANGO ( PYTHON )
    </pattern>
    <template>
<![CDATA[<p>Memcached server package: <a href="http://memcached.darwinports.com/" rel="nofollow">http://memcached.darwinports.com/</a></p><br/><br/><p>Python memcached client package: <a href="http://py-memcached.darwinports.com/" rel="nofollow">http://py-memcached.darwinports.com/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAX FUNCTION IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Actually, you should use <code>min</code> rather than <code>max</code>:</p><br/><br/><pre><code>num = int(request.GET.get("num", 20))<br/>num = min(num, 50)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL DJANGO.TEMPLATE.LOADERS.FILESYSTEM DOE NOT DEFIN A LOADER CALLABL TEMPLAT SOURC LOADER
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/1.1/ref/templates/api/#loader-types" rel="nofollow">Here</a> you can see correct loader package-paths. It appears to me, you should use them.</p><br/><br/><pre><code>django.template.loaders.filesystem.load_template_source<br/>django.template.loaders.app_directories.load_template_source<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DO CUSTOM COMPLIC GROUP BY IN A DJANGO QUERYSET
    </pattern>
    <template>
<![CDATA[<p>You can use the <code>extra</code> method to add in the year and date values before doing the aggregation.</p><br/><br/><pre><code>Somewhere.objects.extra(select={'year': 'EXTRACT(year FROM date)',<br/>                                'month': 'EXTRACT(month FROM date)'}<br/>                       ).values_list('year', 'month').annotate(Sum('amount'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI IN JAVASCRIPT AND DJANGO
    </pattern>
    <template>
<![CDATA[<p><strong>Dump some JSON object at top of page</strong> in a script tag:</p><br/><br/><pre><code>&lt;script type='text/javascript'&gt;<br/>var a = {{ someJsonObject }}<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>Then include your separate javascript file and <strong>use a.variable1, a.variable2 etc</strong>. in your javascript codes.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME OF MY HTML TAG FOLLOW CSS AND OTHER NOT
    </pattern>
    <template>
<![CDATA[<p>Spelling error fixed. Also css is case sensitive.</p><br/><br/><pre><code>html, body {<br/>    margin:0; <br/>    padding:0;<br/>    background-color:blue; <br/>}<br/><br/>a{<br/>    /* Note: For whatever reason this does not apply to templates/tags/naviagtion.html */<br/>    text-decoration: none;<br/>}<br/></code></pre><br/><br/><p>You said text-decoration:none is not getting applied.<br/>Did you mean that you see an underline below the link or you see an outline after clicking?</p><br/><br/><p>You should not see an underline if you have text-decoration:none; in your css.</p><br/><br/><p>If you see a border or ouline, try adding outline:none; as well to the css for a{}</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CACH ON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Maybe <a href="http://packages.python.org/johnny-cache/" rel="nofollow">johnny-cache</a>?</p><br/><br/><p>Also, please look at <a href="http://jeffelmore.org/2010/09/25/smarter-caching-of-django-querysets/" rel="nofollow">this article</a>, it covers Django QuerySet caching, and it's really detailed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK IS BETTER FOR CREAT A PORTAL IN LESS TIME YII SYMFONI SPRING ROR OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Honestly? If you're a PHP developer at the minute, and you're in a hurry, stick to one of the PHP frameworks. Symfony, Kohana, CodeIgniter, CakePHP, Lithium, or Zend Framework. Any of them would probably do the job just fine.</p><br/><br/><p>As a PHP developer beginning to make a move in the direction of Ruby, I could sing the praises of Rails all day: but the fact remains that there's a learning curve to both the language and the framework which, if you're in a hurry, you probably don't need. Take the time to build out the prototype in what you know - if the idea sticks, then maybe you can spend some time rebuilding it in something else.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM CREAT DIV USE AJAX DJANGO
    </pattern>
    <template>
<![CDATA[<p>So you want to have a timer tick down for each div you put on the page?  First of all, I suggest you use jQuery which will make your live much easier.</p><br/><br/><p>I've done something similar recently.  In my case, I needed a selector to select the div on the page along with a javascript date I constructed where the ticker was ticking down to.  I then injected a snippet of javascript with every div (you can load this dynamically through AJAX), like this:</p><br/><br/><pre><code>&lt;html&gt;<br/>  &lt;head&gt;<br/>    &lt;script type="text/javascript"&gt;<br/>      var timers = [];<br/><br/>      // can update data by calling $.ajax or $.get or any of the ajax jquery calls<br/>    &lt;/script&gt;<br/>  &lt;/head&gt;<br/>  &lt;body&gt;<br/>    {% for clock in clock_list %}<br/>    &lt;div class="countdown-target" id="countdown-target-{{ clock.id }}"&gt;<br/>    &lt;/div&gt;<br/>    &lt;script type="text/javascript"&gt;<br/>      timers.push({ selector: '#countdown-target-{{ clock.id }}', endTime: new Date(year, month-1, day, hour, minute, second) });<br/>    &lt;/script&gt;<br/>    {% endfor %}<br/><br/>  &lt;script type="text/javascript"&gt;<br/>    function timerTick() {<br/>      for(var i in timers) {<br/>        var entry = timers[i];<br/>        var now = new Date();<br/>        var diff = now - entry.endTime;<br/><br/>        var targetElement = $(entry.selector);<br/>        var countdownTicker = $('.countdown', targetElement);<br/><br/>        // calculate the difference and update the ticker<br/>        countdownTicker.text(new_ticker_text_value);<br/>      }<br/>    }<br/>    // start one tick right away<br/>    timerTick();<br/>    setInterval(timerTick, 1000);<br/>  &lt;/script&gt;<br/>  &lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/><br/><p>Calling a web service to return new data that pushes to the timer array will work just fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RMAL STREET ADDRESS IN DJANGO PYTHON
    </pattern>
    <template>
<![CDATA[<p>This is how I ended up addressing this (no pun intended):</p><br/><br/><pre><code>### models.py ###<br/><br/>def normalize_address_for_display(address):<br/><br/>    display_address = string.capwords(address)<br/><br/>    # Normalize Avenue<br/>    display_address = re.sub(r'\b(Avenue|Ave.)\b', 'Ave', display_address)<br/><br/>    # Normalize Street<br/>    display_address = re.sub(r'\b(Street|St.)\b', 'St', display_address)<br/><br/>    # ...and other rules...<br/><br/>    return display_address<br/><br/>class Store(models.Model):<br/><br/>    name = models.CharField(max_length=32)<br/>    address = models.CharField(max_length=64)<br/>    city = models.CharField(max_length=32)<br/>    state = models.CharField(max_length=2)<br/>    zipcode = models.CharField(max_length=5)<br/><br/>    @property<br/>    def display_address(self):<br/>        return normalize_address_for_display(self.address)<br/></code></pre><br/><br/><p>I then use <code>Place.display_address</code> in templates. This allows me to keep the original user submitted data in the database without modification and just use <code>display_address</code> when I want a normalized display version.</p><br/><br/><p>Open for comments/suggestions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS CLASS TO FIELD ON VALID ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>What about defining error_css_class?<br/><a href="http://docs.djangoproject.com/en/dev/ref/forms/api/#styling-required-or-erroneous-form-rows" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/forms/api/#styling-required-or-erroneous-form-rows</a>?</p><br/><br/><pre><code>class MyForm(ModelForm):<br/>    error_css_class = 'error'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRI TASK WITH DJANGO CELERI DJANGO CELERI
    </pattern>
    <template>
<![CDATA[<p>The task needs to accept keyword arguments, they are used to pass information amongst other about the retry count. I think the code should look like this:</p><br/><br/><pre><code>from celery.decorators import task<br/><br/>@task()<br/>def add(x, y, **kwargs):<br/>    if not x or not y:<br/>        try:<br/>            raise Exception("test error")<br/>        except Exception, e:<br/>            add.retry(args=[x, y], exc=e, countdown=30, kwargs=kwargs)<br/>    return x+y<br/></code></pre><br/><br/><p><code>**kwargs</code> need to be added to the signature of the <code>add</code> function, and passed as <code>kwargs=kwargs</code> when calling retry.</p><br/><br/><p>Note: this style <a href="http://readthedocs.org/docs/celery/en/master/changelog.html#v220-important" rel="nofollow">was deprecated with the release of celery 2.2</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAST IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>This sort of inheritance in Django-land smells like <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#multi-table-inheritance" rel="nofollow">multi-table inheritance</a> to me. According to the doc, assuming everything is wired properly, you should be able to do:</p><br/><br/><pre><code>baseobj.derived    # note: small 'd'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN WITH AJAX BEHAVIOUR
    </pattern>
    <template>
<![CDATA[<p>Django-endless-pagination is a really nice plugin for this. I've been using it for a while and have never had any issues with either the digg-style ajax pagination or the twitter style ajax pagination. Here's the link:</p><br/><br/><p><a href="http://code.google.com/p/django-endless-pagination/" rel="nofollow">http://code.google.com/p/django-endless-pagination/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW DJANGO OBJECT WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>Why don't you just return the HTML for the post the in the success return, and use jQuery to append it to where it should go in your page. That's what I usually do in my code, it's quick and easy. For more complex solutions you'd want to return a list of JSON objects perhaps and use a javascript framework like backbone.js</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST NOT WORK
    </pattern>
    <template>
<![CDATA[<p>Can you directly access your javascript files from the production server?  Which Django version are you using in production?  If you are using 1.2.5+ in production, you will need to push the csrf token to the server during an AJAX post operation.</p><br/><br/><p>See <a href="http://www.djangoproject.com/weblog/2011/feb/08/security/" rel="nofollow">the release notes in 1.2.5</a> and <a href="http://docs.djangoproject.com/en/1.2/ref/contrib/csrf/#ajax" rel="nofollow">CSRF</a></p><br/><br/><p>To check your Django version:</p><br/><br/><pre><code>import django<br/>django.get_version()<br/></code></pre><br/><br/><p>Print the above in your production site or from the shell in your production server while making sure you are using the proper Python path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SELENIUM TEST IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Never seen the exact error, but I think that Selenium is trying to connect to your app rather than the selenium Server ( a .jar file).</p><br/><br/><p>Port of the selenium server should be the first argument to selenium()</p><br/><br/><p>That should default to port 4444, you probably have to start it with </p><br/><br/><pre><code>$ java -jar selenium-server.jar<br/></code></pre><br/><br/><p>FWIW here's how I got selenium tests running on a CI server...</p><br/><br/><pre><code>from multiprocessing import Process<br/>from django.test import TestCase<br/>from selenium import selenium<br/><br/>class SeleniumFixtureCase(TestCase):<br/>"""<br/>Wrapper to multiprocess localhost server and selenium instance on one<br/>test run.<br/>"""<br/><br/>def setUp(self):<br/>    "Make the selenium connection"<br/>    TestCase.setUp(self)<br/>    self.server = Process(target=serve)<br/>    self.server.start()<br/>    self.verificationErrors = []<br/>    self.selenium = selenium("localhost", 4444, "*firefox",<br/>                             "http://localhost:8000/")<br/>    self.selenium.start()<br/><br/>def tearDown(self):<br/>    "Kill processes"<br/>    TestCase.tearDown(self)<br/>    self.server.terminate()<br/>    self.selenium.stop()<br/>    self.assertEqual([], self.verificationErrors)<br/><br/>def _login(self):<br/>    "Login as Albert Camus"<br/>    self.selenium.open("http://localhost:8000/admin/")<br/>    self.selenium.wait_for_page_to_load("30000")<br/>    self.selenium.type("id_username", "albert")<br/>    self.selenium.type("id_password", "albert")<br/>    self.selenium.click("//input[@value='Log in']")<br/>    self.selenium.wait_for_page_to_load("30000")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN. DISPLAY A HIERARCH DROPDOWN FILTER
    </pattern>
    <template>
<![CDATA[<p>You need to create a custom widget to pick the City model (that is, your model should FK to City and not to State), this widget contains two Select fields, the first one contains the Sstates and the second one gets loaded on the pick of a State (you will need to plug a view to return Cities based on State ID to populate your City select).</p><br/><br/><p>You should set your widgets Media inner class point to the specific .js file chaining both Selects. </p><br/><br/><p>In the ModelAdmin specification, set your field's widget to the custom widget you just created and it's media will be automatically added to the change_form template.</p><br/><br/><p>Make sure that your .js file looks for your regular JQuery object and falls back to django.JQuery, this way you can use this same widget in the admin and through out your site.</p><br/><br/><pre><code>(function($) {<br/>// Note that this function works only for one widget per page<br/>$('#state').change(function(){<br/>    $('#city').load('/cities_by_state/', {id: this.value}); // the endpoint returns HTML<br/>});<br/>})(JQuery||django.JQuery);<br/></code></pre><br/><br/><p>I've done something similar in an app I use locally for my projects (variable depth up to three levels) and the resulting solution ended up a bit hairy as it had to support multiple widgets per page, dynamic widgets (for inlines), templatetags to render the widget in various forms, etc.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GO ABOUT IMPLEMENT CHAT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you are mainly concerned with the front end, look into comet.</p><br/><br/><p>As for the backend, you have a lot of different options.  A more straightforward one would be to store each chat message in the database for the given chat room.  Maybe a many to many relation between the chat room table and the chat message.</p><br/><br/><p>Other solutions include key value store databases that aren't built in to Django.  You could possibly push messages into a redis set, or store active chat room data in memcached.</p><br/><br/><p>Since this is on dreamhost, I would look into the database option.  The truth is that you have to store some data with each chat message.  Who made it, what time it was made, etc.  This will have to go into a table at some point in your environment.  Try to just make it work and then see if you can make it faster.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + JQUERI + AJAX
    </pattern>
    <template>
<![CDATA[<p>something like this maybe?</p><br/><br/><pre><code>def send_message(request):<br/>  if request.method == "POST":<br/>    message = MessageForm(request.POST)<br/>    message.save()<br/><br/>    return HttpResponse(simplejson.dumps({'result' : 'success'}), mimetype='application/javascript')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME IMAGINGFT
    </pattern>
    <template>
<![CDATA[<p>The suggest of Cristopher works very well for me.</p><br/><br/><p>Details follow:<br/>1. Uninstall existing Python Imaging Library</p><br/><br/><ol><br/><li><p>Download and extract the source version (from here<br/><a href="http://effbot.org/downloads/Imaging-1.1.6.tar.gz" rel="nofollow">http://effbot.org/downloads/Imaging-1.1.6.tar.gz</a>)</p></li><br/><li><p>Install freetype2 library (you need freetype cause _imagingft<br/>handles TrueType fonts for captcha)</p></li><br/><li><p>Modify setup.py (in PIL extracted source folder)to match the<br/>freetype2 library (e.g. on my VPS with Centos I've changed line 'FREETYPE_ROOT = None'<br/>to 'FREETYPE_ROOT = "/usr/local/include"')</p></li><br/><li><p>Build PIL (python setup.py build) and verify that Freetype2 support<br/>is ok</p></li><br/><li><p>Install PIL (python setup.py build)</p></li><br/><li><p>After installing you could verify existence of library, opening<br/>python console and typing 'import instructions for _imagingft<br/>library'. </p></li><br/></ol><br/><br/><p>If you use ubuntu you can use following manual:<br/><a href="http://helloworld.infobart.com/compiling-pil-on-ubuntu-natty" rel="nofollow">http://helloworld.infobart.com/compiling-pil-on-ubuntu-natty</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT TAG AND FILTER WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>Instead of returning JSON, return HTML by rendering a template that contains the portion of the page you want to update. The client-side jQuery code can then insert the new HTML or replace existing HTML as needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOTIFI ME OF FOLLOWUP COMMENT VIA E MAIL BUTTON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Use the <code>django.contrib.comments.signals.comment_was_posted</code> signal. For an example, see <a href="http://timothyfletcher.com/blog/django-comment-email-notifications/" rel="nofollow">http://timothyfletcher.com/blog/django-comment-email-notifications/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH ECLIPS DJANGO NOT FOUND
    </pattern>
    <template>
<![CDATA[<p>If you added the python interpreter before installing django, you can get this error message. Remove the python interpreter from eclipse and add it again. Eclipse will do some caching/searching of some sort. This solved my same problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAKE A SIMPL ORDER PLAYLIST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you notice that your <em>PlaylistTrack</em> model is nothing more than a Many-2-Many intermediate table, then things will become more obvious (check <a href="http://docs.djangoproject.com/en/dev/topics/db/models/#intermediary-manytomany" rel="nofollow">this</a>):</p><br/><br/><pre><code>class Playlist(models.Model):<br/>    name = models.CharField(max_length = 50)<br/>    tracks = models.ManyToManyField('Track', through='PlaylistTrack')<br/><br/>class PlaylistTrack(models.Model):<br/>    playlist = models.ForeignKey('track.Playlist')<br/>    track =    models.ForeignKey('track.Track')<br/>    position = models.IntegerField() #Here's the crux of the problem<br/><br/>    class Meta:<br/>        ordering = ['position']<br/></code></pre><br/><br/><p>Now you can just do:</p><br/><br/><pre><code>my_playlist.tracks.all()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CRIPT IN LINUX
    </pattern>
    <template>
<![CDATA[<p>This is a very general question, so I'll respond with two different frameworks that are made using Python to facilitate bulk system administration tasks.</p><br/><br/><ol><br/><li><p><a href="https://fedorahosted.org/func/" rel="nofollow">func</a> - Func is part of the<br/>Fedora project and so is specialized<br/>to their architecture. If your hosts<br/>are all RedHat/CentOS based, this is<br/>the solution for you.</p></li><br/><li><p><a href="http://docs.fabfile.org/en/1.0.1/index.html" rel="nofollow">fabric</a> - Fabric is more generic<br/>but does generally the same thing at<br/>a high level.  If your environment<br/>is heterogenous (full of different<br/>types of systems/distributions),<br/>this is probably what you want.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT FILTER THAT TURN A DATETIM INTO 5 HOUR AGO OR 12 DAY AGO
    </pattern>
    <template>
<![CDATA[<p>Try the template filter <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#timesince" rel="nofollow"><code>timesince</code></a>.</p><br/><br/><p>Use it like this:</p><br/><br/><pre><code>{{ mytemplatevar|timesince }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI JSON DESERI
    </pattern>
    <template>
<![CDATA[<p>Check out the format that the serializer spits out (via your browser or shell): </p><br/><br/><pre><code>[{"pk": 1, "model":"modelname", "fields": {"fieldname": "fieldvalue", "fieldname2":"fieldvalue2"}}, ....]<br/></code></pre><br/><br/><p>So it's a list of arrays with <code>pk</code>, <code>model</code>, and <code>fields</code> which is an array.</p><br/><br/><pre><code>$.getJSON("/myurl", <br/>    function(data) {<br/>        // data is [{},{},{}]<br/>        $.each(data, function(key, val) { <br/>            // val is { pk, model, {fields}}<br/>            $("#output").append("Object id is: " + val.pk + ' of model: ' + val.model);<br/>            $.each(val.fields, function(fieldname, field) {<br/>                 $("#output").append(fieldname + ' : ' + field);<br/>            }); <br/>        });<br/>    }, "json");<br/><br/>&lt;div id="output"&gt;<br/><br/>&lt;/div&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FUNKLOAD ONE REPORT FOR MULTIPL REQUEST
    </pattern>
    <template>
<![CDATA[<p>This is not yet feasible but this feature is part of the FunkLoad todo list:<br/>"Add a param to join to next request action"</p><br/><br/><p>I have not yet any precise schedule for this task, but I will defninitly implemenet it.</p><br/><br/><p>Regards </p><br/><br/><p>ben</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME INDEX
    </pattern>
    <template>
<![CDATA[<p>Remove the <code>include</code> from your first line. <code>include</code> is the syntax for adding a separate url conf, so python is looking for a <code>module</code> called <code>index</code>. </p><br/><br/><p>Change it to the full python dot path to your view function.</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    (r'^Book/$', 'path.to.my.views.index'), # &lt;-- and add a comma here<br/>    (r'^admin/', include(admin.site.urls)),<br/>)<br/></code></pre><br/><br/><p>edit: I notice you are importing your view functions. You can also specify the view function itself</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    (r'^Book/$', index),<br/>    (r'^admin/', include(admin.site.urls)),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REMOV UNICOD FROM QUERI RESULT
    </pattern>
    <template>
<![CDATA[<p>Try this:</p><br/><br/><pre><code>&gt;&gt;&gt; import json<br/>&gt;&gt;&gt; data=[{'total': 1744, 'name': u'x'}, {'total': 13, 'name': u'm'}, {'total': 126, 'name': u'n'}]<br/>&gt;&gt;&gt; json.dumps([i.values()[::-1] for i in data])<br/>'[["x", 1744], ["m", 13], ["n", 126]]'<br/>&gt;&gt;&gt; <br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO JSON DATA DUMP ONE RECORD AT THE TIME
    </pattern>
    <template>
<![CDATA[<p>If you don't want to create the ORM objects, there's no point in using the Django deserialization methods. Simply load the JSON using the underlying <code>simplejson</code> library:</p><br/><br/><pre><code>from django.utils import simplejson<br/>my_data = simplejson.loads(data)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLATEDOESNOTEXIST ERROR
    </pattern>
    <template>
<![CDATA[<p>To remedy this problem, I removed all of the logic that involved swapping the paths to the template directories. My guess is that when the python paths were getting changed for the system, other concurrent requests were sometimes seeing the wrong set of python paths. </p><br/><br/><p>Thus, I just gave the mobile site and the regular site access to the same paths to the template directories and made sure there were no conflicting templates with the same name.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FIRST PART OF AN URL FROM DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You can not pass arguments to normal python functions from within a django template. To solve you problem you will need a custom template tag: <a href="http://djangosnippets.org/snippets/806/" rel="nofollow">http://djangosnippets.org/snippets/806/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A POP UP WINDOW AND REDIRECT THE URL TO PARENT PAGE
    </pattern>
    <template>
<![CDATA[<p>Call this JS in popup page:</p><br/><br/><pre><code>window.opener.location.href = "http://some/new/location";<br/>window.close();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTROL JSON SERIAL
    </pattern>
    <template>
<![CDATA[<p>That's really easy. Quick example:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>from django.utils import simplejson<br/><br/>def simple_view(request):<br/>    response = {'string': "test",<br/>                'number': 42,<br/>                'array': [1, 2, 3],<br/>                'js_object': dict(foo="bar")}<br/>    return HttpResponse(simplejson.dumps(response),<br/>                        mimetype="application/json")<br/></code></pre><br/><br/><p>This view will return the equivalent of the following JSON:</p><br/><br/><pre><code>{"string": "test",<br/> "number": 42,<br/> "array": [1, 2, 3],<br/> "js_object": {foo: "bar"}}<br/></code></pre><br/><br/><p>EDIT: And yes, Assaf Lavie is right, your template can spew invalid JSON.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BANG WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I've solved with jquery-history.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO 1.3 ON GAE
    </pattern>
    <template>
<![CDATA[<p>I think the current 'generally' recommended approach to Django on App Engine is <a href="http://www.allbuttonspressed.com/projects/django-nonrel" rel="nofollow">django-nonrel</a>, I believe it supports Django 1.3 now.  Check out <a href="http://code.google.com/appengine/articles/django-nonrel.html" rel="nofollow">Running Pure Django Projects on Google App Engine</a> for some information on getting started.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPUL VALU IN DJANGOFORM
    </pattern>
    <template>
<![CDATA[<p>You would normally do this by overriding <code>__init__</code></p><br/><br/><pre><code>from django.forms import ModelForm, ChoiceField<br/>class MyModelForm(ModelForm):<br/>    class Meta:<br/>        model = MyModel<br/><br/>    def __init__(self, *args, **kwargs):<br/>        super(MyModelForm, self).__init__(*args, **kwargs)<br/>        geoiplocator_instance = GeoIpLocator()<br/>        city_country_dictionary=geoiplocator_instance.get_country_city_dictionary()<br/>        users_country_name = city_country_dictionary['country_name']<br/>        users_city = city_country_dictionary['city']<br/><br/>        # not exactly sure what you wanted to do with this choice field.<br/>        # make the country the only option? Pull a list of related countries?<br/>        # add it and make it the default selected?<br/>        self.fields['country'] = ChoiceField(choices = [(users_country_name, users_country_name),])<br/>        self.fields['city'].initial = users_city<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OPEN ID CSRF VERIF FAIL
    </pattern>
    <template>
<![CDATA[<p>Actually, I think it was the first bug I encountered in Django. I've updated my copy to fresh release of 1.3 and everything started working. Good job, Django developers!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REASON WHI RUBI ON RAIL DOE N T HAVE A STANDARD USER AUTHENT SYSTEM BUILT IN
    </pattern>
    <template>
<![CDATA[<p>There is no reasonably generic way to do user authentication. Most frameworks leave it up to you to choose the plugin that most closely matches what you're trying to accomplish.</p><br/><br/><p>For example, consider these two situations:</p><br/><br/><ul><br/><li>a blog which has a single administrator with password-protected admin-facing tools</li><br/><li>a site like YouTube which allows users to sign up and administer their own content</li><br/></ul><br/><br/><p>Both of these sites would require vastly different authentication systems; which of these systems should Rails cater to out-of-the-box?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOD WSGI DJANGO PYTHON VERSION
    </pattern>
    <template>
<![CDATA[<p><code>python2.7 manage.py collectstatic</code> worked. Thanks to Display Name for the comment</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI DOE NOT EXIST ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>try:<br/>    user = UniversityDetails.objects.get(email=email)<br/>except UniversityDetails.DoesNotExist:<br/>    user = None<br/></code></pre><br/><br/><p>I also see you're storing your passwords in plaintext (a big security no-no!).  Why don't you use the built-in auth system?  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTH SECTION IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>You can use <code>admin.site.unregister</code> </p><br/><br/><pre><code>from django.contrib.auth.models import User<br/>from django.contrib.sites.models import Site<br/>from django.contrib.auth.models import Group<br/><br/>admin.site.unregister(User)<br/>admin.site.unregister(Group)<br/>admin.site.unregister(Site)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRINGIO OBJECT TO A DJANGO IMAGEFIL
    </pattern>
    <template>
<![CDATA[<p>Use django.core.files.base.ContentFile(image_file):</p><br/><br/><pre><code>pi = ProductImage(product=product)<br/>pi.source_image.save(image_name, ContentFile(image_file.read()))<br/>pi.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN TOOL DASHBOARD NOT DRAGGABL IN IE8
    </pattern>
    <template>
<![CDATA[<p>Try to <a href="http://jqueryui.com/download" rel="nofollow">replace the jquery-ui library to the newest version</a> which is 1.8.17 at the moment of writing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM RUNSERV TO A PRODUCT SERVER
    </pattern>
    <template>
<![CDATA[<p>A DVCS such as git or Mercurial will allow you to develop and test locally, and then push the changes to a remote system for staging and production.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DOE N T LIKE NONE VALU FOR FLOATFIELD
    </pattern>
    <template>
<![CDATA[<p>I was building my SQL query wrong, putting blank strings where I should have been putting NULLs. I fixed that and now it works fine.</p><br/><br/><p>I was building a query that looked like this:</p><br/><br/><pre><code>INSERT INTO account (interest_rate) values ('')<br/></code></pre><br/><br/><p>When it should have been this:</p><br/><br/><pre><code>INSERT INTO account (interest_rate) values (NULL)<br/></code></pre><br/><br/><p>Both versions work fine in MySQL but Python/Django don't like the former version.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOLEAN FIELD FROM A QUERYSET USE F OBJECT
    </pattern>
    <template>
<![CDATA[<p>I am developing django-orm extension, and have already partially implemented the solution to your problem.</p><br/><br/><pre><code>&gt;&gt;&gt; from django_orm.expressions import F<br/>&gt;&gt;&gt; from niwi.models import TestModel<br/>&gt;&gt;&gt; TestModel.objects.update(done=~F('done'))<br/><br/># SQL:<br/>UPDATE "niwi_testmodel" SET "done" = NOT "niwi_testmodel"."done"; args=()<br/></code></pre><br/><br/><p><a href="https://github.com/niwibe/django-orm" rel="nofollow">https://github.com/niwibe/django-orm</a></p><br/><br/><p>Is a partial solution and not very clean. And so far only for postgresql. In a while I'll see how to improve it.</p><br/><br/><p>Update: now improved and works on postgresql, mysql and sqlite.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON OBJECT AND JSON OBJECT
    </pattern>
    <template>
<![CDATA[<p>JSON does not have objects per se, and cannot store JavaScript functions. Its syntax may appear similar to JavaScript literals, but trying to use it as such all the time will cause nothing but pain.</p><br/><br/><p>And there should be no need to use <code>eval()</code>; both JavaScript and Python have JSON parsers and serializers readily available.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINK IN DIV CONTAIN IN JQUERI MOBIL
    </pattern>
    <template>
<![CDATA[<p>I finally found an answer <a href="http://blog.dkferguson.com/index.cfm/2011/3/15/jQuery-Mobile-styling-loaded-content" rel="nofollow">here</a>. JQuery Mobile's <em>changePage()</em> and <em>loadPage()</em> methods do too much post-processing and triggers a lot of events that really makes implementing your own dynamic loading more complicated than it should be. </p><br/><br/><p>The good old fashioned <code>#("div#primary-content").load();</code> works, but I'm still struggling to apply JQM styles to it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALU IN DJANGO WITHOUT RELOAD PAGE
    </pattern>
    <template>
<![CDATA[<p>AFAIK there isn't a canonical Django way of doing Ajax... But it's fairy straight forward to do yourself:</p><br/><br/><p>First you've got to create a view which returns whatever JSON data will be needed to update the view. For example, the list of cities in a province:</p><br/><br/><pre><code>from django.utils import simplejson as json<br/><br/>def list_cities(request):<br/>    cities = city_names_in_province(request.GET["province"])<br/>    return json.dumps(cities)<br/></code></pre><br/><br/><p>Second you've got to call that view from the HTML (assuming jQuery):</p><br/><br/><pre><code>&lt;select id="provinces"&gt;<br/>    ...<br/>&lt;/select&gt;<br/><br/>&lt;select id="cities" disabled="true"&gt;<br/>    &lt;option&gt;---&lt;/option&gt;<br/>&lt;/select&gt;<br/><br/>&lt;script&gt;<br/>$("#provinces").change(function() {<br/>    var province = $(this).val();<br/>    $.getJSON("{% url list_cities %}", { province: province }, function(cities) {<br/>        var cities_select = $("#cities");<br/>        ... put the 'cities' list into the 'cities_select' ...<br/>    });<br/>});<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>And, apart from the "prettying up" and error checking (eg, what happens if the call to <code>list_cities</code> fails?), that's basically all there is to it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIL PHP WITH GWT
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>You should google around..</p></li><br/><li><p>I'd recommend using Java and GWT-RPC as the backend, because:</p><br/><br/><p>a. You'd be using same language on backend and frontend.</p><br/><br/><p>b. You'd be using (sharing) same domain model classes between backend and frontend.</p><br/><br/><p>c. GWT-RPC is type-safe.</p><br/><br/><p>d. With GWT-RPC you would not need to do JSON to objects mapping.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WHAT IS THE MOST EFFICI WAY TO CHECK FOR AN EMPTI QUERI SET
    </pattern>
    <template>
<![CDATA[<p>It looks like <strong>qs.count() and qs.exists() are effectively equivalent</strong>.  Therefore I have not discovered a reason to use exists() over count().  The latter is not slower and it can be used to check for both existence and length.  It's possible that both exists() and count() evaluate to the same query in MySQL.</p><br/><br/><p>Only use qs[0] if you actually need the object.  It's significantly slower if you're just testing for existence.</p><br/><br/><p>On Amazon SimpleDB, 400,000 rows:</p><br/><br/><ul><br/><li>bare qs: 325.00 usec/pass</li><br/><li>qs.exists(): 144.46 usec/pass</li><br/><li>qs.count() 144.33 usec/pass</li><br/><li>qs[0]: 324.98 usec/pass</li><br/></ul><br/><br/><p>On MySQL, 57 rows:</p><br/><br/><ul><br/><li>bare qs: 1.07 usec/pass</li><br/><li>qs.exsts(): 1.21 usec/pass</li><br/><li>qs.count(): 1.16 usec/pass</li><br/><li>qs[0]: 1.27 usec/pass</li><br/></ul><br/><br/><p>I used a random query for each pass to reduce the risk of db-level caching.  Test code:</p><br/><br/><pre><code>import timeit<br/><br/>base = """<br/>import random<br/>from plum.bacon.models import Session<br/>ip_addr = str(random.randint(0,256))+'.'+str(random.randint(0,256))+'.'+str(random.randint(0,256))+'.'+str(random.randint(0,256))<br/>try:<br/>    session = Session.objects.filter(ip=ip_addr)%s<br/>    if session:<br/>        pass<br/>except:<br/>    pass<br/>"""<br/><br/>query_variatons = [<br/>    base % "",<br/>    base  % ".exists()",<br/>    base  % ".count()",<br/>    base  % "[0]"<br/>    ]<br/><br/>for s in query_variatons:<br/>    t = timeit.Timer(stmt=s)<br/>    print "%.2f usec/pass" % (1000000 * t.timeit(number=100)/100000)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WRITE A JSON FILE TO A DB
    </pattern>
    <template>
<![CDATA[<p>Given that the valid keys are defined in <a href="http://api.embed.ly/docs/oembed#response" rel="nofollow">embedly's repsonse documentation</a> you can make your code a bit more maintaininable by specifying the list of supported response keys and your translations in one place, reducing the amount of redundant code.</p><br/><br/><p>For example:</p><br/><br/><pre><code># embed.ly keys which map 1:1 with your database record keys<br/>RESPONSE_KEYS = set([<br/>    'provider_url', 'description', 'title', 'author_name', 'thumbnail_url',<br/>    'thumbnail_width', 'thumbnail_height', 'author_url'<br/>    ])<br/><br/># mapping from embed.ly's key name to your database record key<br/>KEY_MAP = {<br/>    'url': 'content_url',<br/>    'width': 'width_px',<br/>    'height': 'height_px',<br/>    'type': 'url_type'<br/>    }<br/><br/>url_return = get_oembed(content_url)<br/>record = ContentQueue(submitted_url=content_url)<br/>record.version = 1<br/><br/># iterate over the response keys and add them to the record<br/>for key_name in url_return.iterkeys():<br/>    key = key_name if key_name in RESPONSE_KEYS else KEY_MAP.get(key_name)<br/>    if key:<br/>        record[key] = url_return[key_name]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGR C + + AND PYTHON WITH SWIG
    </pattern>
    <template>
<![CDATA[<p>I often use swig for work in order to translate code to multiple languages and it is a really useful tool.</p><br/><br/><p>In order to understand what is the best way for you, you should observe your software interfaces. If you c++ classes have methods that only receive and returns simple types like strings or stl structures, you can be confident that your code doesn't have problems being "swigged". The problems come to you when you have complex interfaces.</p><br/><br/><p>An another issue with python is the presence of GIL that in multithreaded environments (with blocking calls in c++ side) can cause a lot of problems and involves in a complex management (using python-dev library in your c++ code).</p><br/><br/><p>A suggestion if your destination code is written only in python is to take a look of boost-python libraries that, being more specialized, are often more simple to use with python. The problems with multithreaded environments, however, remain.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROTECT AJAX FROM BE USE WITHOUT LOGIN
    </pattern>
    <template>
<![CDATA[<p>You should implement logging in on the server. AJAX requests exist within the same session as regular request, so if someone is logged in, they are logged in for the AJAX request too. If the user is not logged in, you can check this for the AJAX request too. Check on the server if a user is logged in and return an error code if not.</p><br/><br/><p>The server should never rely on the client to tell it whether someone is logged in. The only client data to use for that is the session token, combined with the IP address if you want to be more secure.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SELECT SQL OR STATEMENT
    </pattern>
    <template>
<![CDATA[<p>I've modified your SQL to read (the equivalent statement)</p><br/><br/><pre><code>SELECT * FROM table WHERE id IN ("1","2","3") <br/></code></pre><br/><br/><p><strong>^ The IN statement allows us to do ORs without using OR.</strong></p><br/><br/><pre><code>Table.objects.filter(id__in=["1", "2", "3"])<br/></code></pre><br/><br/><p>Cite:<br/><a href="http://stackoverflow.com/questions/852404/how-to-dynamically-compose-an-or-query-filter-in-django">How to dynamically compose an OR query filter in Django?</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECTS...VALU ( ) SELECT ONLI SOME FIELD
    </pattern>
    <template>
<![CDATA[<p>The values(*fields) function allow you to specify which fields you only want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYNC DJANGO PISTON MODEL WHEN USE EGG MODUL
    </pattern>
    <template>
<![CDATA[<p>Looks like this is a <a href="https://bitbucket.org/jespern/django-piston/issue/173/" rel="nofollow">known issue</a> with Piston 0.2.3. You could apply <a href="https://bitbucket.org/jespern/django-piston/issue/173/attributeerror-module-object-has-no#comment-455549" rel="nofollow">this patch</a> or just use version 0.2.2 by installing it as so:</p><br/><br/><pre><code>pip install django-piston==0.2.2<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.3 PERFORM
    </pattern>
    <template>
<![CDATA[<p>I have noticed no slow down in the django application itself while migrating a site from .9 to 1.3 on mysql. These slides may offer some useful criticisms, but the numbers don't seem to be useful at all.</p><br/><br/><p>In addition to django on mysql, I have been using django-nonrel based on 1.3 with mongodb and it is fast, I mean really fast, even with a table of 3 million records. Sorry no stats, but the database layer is still the bottleneck to be thinking about. And there are many ways to optimise the database layer in an app other than going with a nosql solution.</p><br/><br/><p>So, all I can say is django using normalized sql datbases is simple to set up, but slow in reality once you have more than 10's of thousands of records. Django with a nosql solution, or even just using mysql / postgresql with proper denormalization is fast.</p><br/><br/><p>There are so many good wsgi solutions available now too, that when taking into consideration stats like this, we really need to now what deployment solution is being tested. Consider these options - <a href="http://nichol.as/benchmark-of-python-web-servers" rel="nofollow">http://nichol.as/benchmark-of-python-web-servers</a></p><br/><br/><p>Also consider in deployment, it is easy to have two front end web servers, or three. You hardly even need to change your conf. But scaling a database is much more difficult and requires a lot more thought and skill. So, Django being 10% slower for me is not really even an issue when you start comparing that in real numbers to your database latency.</p><br/><br/><p>Add in things like slave support for dbs, the option to configure db writes and reads, great apps like south, I could never reach the conclusion django sucks. Django 1.3 is rocking in my opinion.</p><br/><br/><p>Django could be better? Of course. Standardized tests would benefit Django? Of course. Is Django slow being a problem? No way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXIST DJANGO APP ON HEROKU
    </pattern>
    <template>
<![CDATA[<p>Chris,</p><br/><br/><p>Specifically for Django heroku expects you to check in the directory that your Django project lives in (this directory should live at the same level as your requirements.txt). An ls might look something like:</p><br/><br/><pre><code>$ ls<br/>requirements.txt appfolder<br/>$ ls appfolder<br/>__init__.py   manage.py   settings.py    urls.py<br/></code></pre><br/><br/><p>This should allow you to deploy an existing app then configure your Procfile as needed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLIENT SIDE QUERI CONSTRUCT
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/4487054/search-multiple-fields-of-django-model-without-3rd-party-app">Search multiple fields of django model without 3rd party app</a></p><br/><br/><p><a href="http://stackoverflow.com/questions/4147383/django-sql-or-via-filter-q-dynamic">Django SQL OR via filter() &amp; Q(): Dynamic?</a></p><br/><br/><p><a href="http://stackoverflow.com/questions/5350846/generate-a-django-queryset-based-on-dict-keys">Generate a django queryset based on dict keys</a></p><br/><br/><p>Just replace with <code>operator.and_</code> where appropriate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DUMPDIRECTORI IS N T WORK ON UBUNTU GET SEGMENT FAULT IN APACHE2 ERROR LOG
    </pattern>
    <template>
<![CDATA[<p>I was able to solve this problem. The issue was with PyLucene environment being initialized on the run time. I was executing initvm() call everytime a request comes and it was causing segmentation fault. <a href="http://mail-archives.apache.org/mod_mbox/lucene-pylucene-dev/201008.mbox/%3CAANLkTin0sDK1nkMWUouOX2r9_3Voo=jqtoNds+dimd4W@mail.gmail.com%3E" rel="nofollow">This link </a> directed that I should do it in .wsgi file and after I did that there were no segmentation faults.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM FILEFIELD VALU WHILE EDIT A MODEL
    </pattern>
    <template>
<![CDATA[<p>You need to override the ClearableFileInput that is currently used, to change the way it's displayed.</p><br/><br/><p>Here is the code of the new <code>ShortNameFileInput</code> which inherit from the default <code>ClearableFileInput</code> with just a change on the 19th line to only show the file name:</p><br/><br/><pre><code>from django.forms.widgets import ClearableFileInput<br/>import os<br/># missing imports<br/>from django.utils.safestring import mark_safe<br/>from cgi import escape<br/>from django.utils.encoding import force_unicode<br/><br/>class ShortNameClarableFileInput(ClearableFileInput):<br/>    def render(self, name, value, attrs=None):<br/>        substitutions = {<br/>            'initial_text': self.initial_text,<br/>            'input_text': self.input_text,<br/>            'clear_template': '',<br/>            'clear_checkbox_label': self.clear_checkbox_label,<br/>        }<br/>        template = u'%(input)s'<br/>        substitutions['input'] = super(ClearableFileInput, self).render(name, value, attrs)<br/><br/>        if value and hasattr(value, "url"):<br/>            template = self.template_with_initial<br/>            substitutions['initial'] = (u'&lt;a href="%s"&gt;%s&lt;/a&gt;'<br/>                                        % (escape(value.url),<br/>                                           escape(force_unicode(os.path.basename(value.url))))) # I just changed this line<br/>            if not self.is_required:<br/>                checkbox_name = self.clear_checkbox_name(name)<br/>                checkbox_id = self.clear_checkbox_id(checkbox_name)<br/>                substitutions['clear_checkbox_name'] = conditional_escape(checkbox_name)<br/>                substitutions['clear_checkbox_id'] = conditional_escape(checkbox_id)<br/>                substitutions['clear'] = CheckboxInput().render(checkbox_name, False, attrs={'id': checkbox_id})<br/>                substitutions['clear_template'] = self.template_with_clear % substitutions<br/><br/>        return mark_safe(template % substitutions)<br/></code></pre><br/><br/><p>To use it in your form, you'll have to manually set the widget you want to use :</p><br/><br/><pre><code>class DemoVar_addform(ModelForm):<br/>    ...<br/>    class Meta:<br/>        model = DemoVar_model<br/>        widgets = {<br/>            'Welcome_sound': ShortNameClarableFileInput,<br/>        }                    <br/></code></pre><br/><br/><p>That should do the trick.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NON REL MANAG PER FIELD INDEX ON APP ENGIN
    </pattern>
    <template>
<![CDATA[<p>There is a letter missing in '<a href="http://www.allbuttonspressed.com/blog/django/2010/07/Managing-per-field-indexes-on-App-Engine" rel="nofollow">GAE_SETTINGS_MODULE</a>'.</p><br/><br/><p>The correct version is :</p><br/><br/><pre><code>GAE_SETTINGS_MODULES = (<br/>    'maps.gae_models_settings',<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON COLLECT THE DATA TO THE RIGHT FORM ( ALGORITHM )
    </pattern>
    <template>
<![CDATA[<p>I used this for the problem:<br/><a href="http://djangosnippets.org/search/?q=partition%20list" rel="nofollow">http://djangosnippets.org/search/?q=partition%20list</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMENT HOW TO SPECIFI THE SORT DIRECT
    </pattern>
    <template>
<![CDATA[<p>you can do:</p><br/><br/><pre><code>{% get_comment_list for event as comment_list %}<br/>{% for comment in comment_list reversed %}<br/>    ...<br/>{% endfor %}<br/></code></pre><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#for" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/builtins/#for</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIVALUEDICTKEYERROR ERROR HOW DO I DEAL WITH IT
    </pattern>
    <template>
<![CDATA[<p>Use the MultiValueDict's <code>get</code> method. This is also present on standard dicts and is a way to fetch a value while providing a default if it does not exist.</p><br/><br/><pre><code>is_private = request.POST.get('is_private', False)<br/></code></pre><br/><br/><p>Generally,</p><br/><br/><pre><code>my_var = dict.get(&lt;key&gt;, &lt;default&gt;)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX TO CHECK THE STATU AND RESULT OF A DJANGO CELERI TASK
    </pattern>
    <template>
<![CDATA[<p>To access these URLs, you need to include them from one of your <code>urls.py</code> files. For example:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    url('^tasks/', include('djcelery.urls')),<br/>)<br/></code></pre><br/><br/><p>You would then access them using, for example, <code>http://example.com/tasks/{{ task_id }}/status/</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER PASSES TEST AUTH DECOR BOOL OBJECT IS NOT CALLABL
    </pattern>
    <template>
<![CDATA[<p>is_staff is a <a href="http://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.is_staff" rel="nofollow">field</a> of User not a method. Get rid of ()</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON USER REGISTR SYSTEM
    </pattern>
    <template>
<![CDATA[<p><a href="https://bitbucket.org/ubernostrum/django-registration/" rel="nofollow">django-registration</a> should get you started.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR NO MODUL NAME MYSQL.BAS IN DJANGO PROJECT ON UBUNTU 11.04 SERVER
    </pattern>
    <template>
<![CDATA[<p>The correct <a href="https://docs.djangoproject.com/en/dev/ref/settings/?from=olddocs?from=olddocs#engine">database setting</a> is <code>'django.db.backends.mysql'</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DB ERROR WHEN RUN PYTHON SERVER ON MACOSX10.6
    </pattern>
    <template>
<![CDATA[<p>It looks like you have everything installed right, but it can't find libmysqlclient.  Have you tried the following?</p><br/><br/><pre><code>&gt; sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib<br/>&gt; sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC JSON TO DJANGO TEMPLAT BEST PRACTIC
    </pattern>
    <template>
<![CDATA[<p>The simplest and probably fastest thing to do is to just parse the json in your views.py outside of the actual view:</p><br/><br/><pre><code>mydata = simplejson.loads(json_file)<br/><br/>def foo(request):<br/>    ...<br/>    return render(request, 'template.html', {"mydata": mydata},<br/>        content_type="application/xhtml+xml")<br/></code></pre><br/><br/><p>The json will only be parsed the first time a view from the views.py file is requested, subsequent requests will not cause it to be parsed again. You could alternately use a context processor, as suggested.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      403 ON AJAX REQUEST TO OWN DOMAIN
    </pattern>
    <template>
<![CDATA[<p>Perhaps you need to add the CSRF token to your request?  Some details are at <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>serializers.deserialize</code> is for deserializing a particular type of JSON - that is, data that was serialized from model instances using <code>serializers.serialize</code>. For your data, you just want the standard <code>simplejson</code> module.</p><br/><br/><p>And the second thing wrong is that your response isn't just JSON - it is an HTTP POST with JSON in the <code>data</code> field. So:</p><br/><br/><pre><code>from django.utils import simplejson<br/>data = simplejson.loads(request.POST['data'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMULTAN LOAD OF MULTIPL IMAG
    </pattern>
    <template>
<![CDATA[<p>Since the ajax calls are blocking as said by chrisdpratt, if you really need to display the images at the same time I would advise some kind of preloading of the 3x3 grid of images and when required by the code you can display them. </p><br/><br/><p>With this in mind you can run the code you already have on <code>$(document).ready()</code> but make the images hidden (ie <code>display:none</code>). When later required you would just change the display attribute on the images you need to display.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.DATETIME.NOW ( ) + 1
    </pattern>
    <template>
<![CDATA[<pre><code>datetime.datetime.now() + datetime.timedelta(days=1, hours=3)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFER BETWEEN CRAWL PARS INDEX SEARCH FROM PYTHON LIBRARI PERSPECT
    </pattern>
    <template>
<![CDATA[<p>I'll give you a general discription, algorithmically, make the modifications to your python libs.</p><br/><br/><p><strong>Crawling</strong>: starting from a set of URLs and its goal is to expand the set's size, it actually follows out links and try to expand the graph as much as it can (until it covers the net-graph connected to the initial set of URLs or until resources [usually time] expires).<br/>so:<br><strong>input</strong> = Set of URLs<br/><br><strong>output</strong> = bigger set of URLs which are reachable from the input</p><br/><br/><p><strong>Indexing</strong>: using the data the crawlers gathered to "<a href="http://en.wikipedia.org/wiki/Index_%28search_engine%29" rel="nofollow">index</a>" the files. index is actually a list that maps each term (usually word) in the collection to the documents that this term appears in.<br/><br><strong>input</strong>:set of URLs<br/><br><strong>output</strong>: index file/library.</p><br/><br/><p><strong>Search</strong>: use the index to search for relevant documents to a given query.<br/><br><strong>input</strong>: a query (String) and the index [usually it is an implicit argument, since its part of the state..] <br/><br><strong>output</strong>: relevant documents to the query (documents is actually a web site here, that was crawled...)</p><br/><br/><p>I encourage you to have a look at <a href="http://lucene.apache.org/pylucene/" rel="nofollow">PyLucene</a> which do all of these things (and more!)... and read some more about <a href="http://en.wikipedia.org/wiki/Information_retrieval#Overview" rel="nofollow">Information Retrieval</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROJECT BUG TRACK WITH REDMIN SAME USER
    </pattern>
    <template>
<![CDATA[<p>You could use LDAP for user authentication. <a href="http://pypi.python.org/pypi/django-auth-ldap/" rel="nofollow">django-auth-ldap</a> is an LDAP authentication backend for Django, and <a href="http://www.redmine.org/projects/redmine/wiki/RedmineLDAP" rel="nofollow">Redmine supports LDAP</a> out of the box, so it should be easy peasy.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHRONOGRAPH SCRIPT WONT RUN FROM CRON JOB OR MANUAL DUE TO PERMISS ISSU
    </pattern>
    <template>
<![CDATA[<p>The answer for this was that chronograph.sh has been superseded by chronograph. despite this supposedly being able to activate an env, it wasn't doing it early enough to import argparse which as far as i can tell isn't inbuilt to python 2.5 but is in 2.6. then its just down to getting the right combination of arguements for the chronograph script, which for reference is a -p and an -e but not an -s.</p><br/><br/><p>also i had to run the script as root but targetting the script inside the users virtualenv.</p><br/><br/><p>finally i also had to add site paths for packages directory to the chronograph script as it couldnt find argparse until i did that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUAL ENVIRON FROM MAC TO LINUX
    </pattern>
    <template>
<![CDATA[<p>You can just recreate the virtual environment on Ubuntu.  The virtual env will have the python binary which will be different on a different system.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL WITH FOREIGN KEY IN DIFFER DB
    </pattern>
    <template>
<![CDATA[<p>Using multiple  databases makes things more ´difficult.</p><br/><br/><p>Read: <a href="https://docs.djangoproject.com/en/dev/topics/db/multi-db/" rel="nofollow">MultipleDB Django</a></p><br/><br/><p>For stuff like that to work you have to use Database Routers as described at the link as far as I know.<br/>I never used a multiple DB setup with foreign keys between them, but thats where I would get started.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAW SQL GIVE ME TYPEERROR NOT ENOUGH ARGUMENT
    </pattern>
    <template>
<![CDATA[<p>The real problem is that you're passing in a list to params, but then you're trying to call <strong>repr</strong> on the result (I only know this because I got the same problem when running it in ipython). What you need to do is pass in a tuple:</p><br/><br/><pre><code>counters = Counter.objects.raw("""<br/>        SELECT id, name FROM building_counter c<br/>        INNER JOIN scope_scope_buildings ssb <br/>                ON c.building_id = ssb.building_id<br/>                AND ssb.scope_id = %s<br/>        WHERE  energy_id = %s<br/>        AND parent_id is not NULL<br/>        AND type = 'C'<br/>       """, (self.id, energy_id))<br/></code></pre><br/><br/><p>Or you can apply <a href="https://code.djangoproject.com/changeset/16088" rel="nofollow">this patch</a> to your django source and it'll turn these into tuples when you're in the shell.</p><br/><br/><p>If you don't use the shell for raw queries often, you can just ignore this though, since the rest of django handles list params just fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASS IN THE USERNAM FROM THE LOGIN PAGE AND MAKE IT APPEAR ON THE SIDEBAR
    </pattern>
    <template>
<![CDATA[<p>Why so complicated? <br/>You can check if user is logged in directly in  template:</p><br/><br/><pre><code>{% if user.is_authenticated %}<br/>   Hello {{ user.username }}<br/>{% else %}<br/>   Please log in<br/>{% endif %}<br/></code></pre><br/><br/><p>And check that in settings.py in TEMPLATE_CONTEXT_PROCESSORS have 'django.contrib.auth.context_processors.auth'. Here is some <a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django-contrib-auth-context-processors-auth">docs</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      X DAY AGO TYPE TIME USE HUMAN IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Django has <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#timesince" rel="nofollow">a built-in template filter</a> <code>timesince</code> that offers the same output you mentioned above. The following filter just strips the second part after the comma:</p><br/><br/><pre><code>from datetime import datetime, timedelta<br/>from django import template<br/>from django.utils.timesince import timesince<br/><br/>register = template.Library()<br/><br/>@register.filter<br/>def age(value):<br/>    now = datetime.now()<br/>    try:<br/>        difference = now - value<br/>    except:<br/>        return value<br/><br/>    if difference &lt;= timedelta(minutes=1):<br/>        return 'just now'<br/>    return '%(time)s ago' % {'time': timesince(value).split(', ')[0]}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MOD WSGI AND PYTHON 2.7
    </pattern>
    <template>
<![CDATA[<p>To answer the specific question, no it is not possible to make a mod_wsgi installation compiled for one Python version to use a different version at run time.</p><br/><br/><p>Why don't you create a separate question for the actual problem you are having with compiling from source code. Better still ask it on the mod_wsgi mailing list where best people to help you can be found.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL INIT ( ) IS CALL ON EVERI UPDAT
    </pattern>
    <template>
<![CDATA[<p>If I got you correctly, you want to run some code when a program is created.</p><br/><br/><p>You can use the <code>post_save</code> signal and check for the <code>created</code> flag.</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/ref/signals/#post-save" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/signals/#post-save</a></p><br/><br/><p>By having your code listen to that signal, you can run your code whenever a Program is created, and not changed.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO VALUESQUERYSET TO A JSON OBJECT
    </pattern>
    <template>
<![CDATA[<p>Try <a href="https://docs.djangoproject.com/en/dev/topics/serialization/#subset-of-fields" rel="nofollow">subsetting the fields</a> in your values list through the <code>serialize</code> method using a QuerySet instead:</p><br/><br/><pre><code>objectQuerySet = ConventionCard.objects.filter(ownerUser = user)<br/>data = serializers.serialize('json', objectQuerySet, fields=('fileName','id'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON DATA INTO A PYTHON OBJECT
    </pattern>
    <template>
<![CDATA[<p>If you check out the json module docs (http://docs.python.org/library/json.html), there's a section on specialized object decoding. You can use that to encode a JSON object into a specific python type.</p><br/><br/><p>Here's an example:</p><br/><br/><pre><code>import json<br/>def object_encoder(obj):<br/>    if '__type__' in obj and obj.type == 'User':<br/>        return User(obj.name, obj.username)<br/>    return obj<br/><br/>json.loads('{"__type__": "User", "name": "John Smith", "username": "jsmith"}', object_hook=object_encoder)<br/></code></pre><br/><br/><p>Check the section labeled "Specializing JSON object decoding" for another example.</p><br/><br/><p><strong>Update</strong></p><br/><br/><p>If you want to access data in a dictionary via the json module do this:</p><br/><br/><pre><code>user = json.loads('{"__type__": "User", "name": "John Smith", "username": "jsmith"}')<br/>print user['name']<br/>print user['username']<br/></code></pre><br/><br/><p>Just like a regular dictionary.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAC DEVELOP ENVIRON HELL
    </pattern>
    <template>
<![CDATA[<p>I've gone through the same hell 2 weeks ago :)</p><br/><br/><p>I needed to make working python 2.7 and virtualenv on OSX 10.6.8.<br/>You haven't mentioned virtualenv in your question but I strongly recommend it. That way you minimize amount of globally installed packages. Everything is... cleaner.<br/>My idea is to only have following things globally:</p><br/><br/><ul><br/><li>python (from brew)</li><br/><li>pip (via easy_install)</li><br/><li>virtualenv (via pip)</li><br/><li>virtualenvwrapper (via pip)</li><br/><li>other through either virtualenv or buildout</li><br/></ul><br/><br/><p>I've just checked and pip PIL installs fine within my virtualenv. </p><br/><br/><p>Here are notes from this battle (<a href="https://gist.github.com/1034876" rel="nofollow">gist.github.com</a>):</p><br/><br/><pre><code>#NOTE: .pydistutils.cfg seems to be not compatible with brew install python<br/>#areas I needed to clean before installation<br/>#clean up ~/Library/Python<br/>#clean up .local<br/>brew install python<br/>easy_install pip<br/>pip install virtualenv<br/>pip install virtualenvwrapper<br/>mkdir $HOME/.virtualenvs<br/></code></pre><br/><br/><p>Example .bash_profile:</p><br/><br/><pre><code>#homebrew<br/>export PATH=/usr/local/bin:/usr/local/sbin:${PATH}<br/><br/># homebrew python 2.7<br/>export PATH="/usr/local/share/python:${PATH}"<br/><br/>#virtualenv wrapper<br/>export WORKON_HOME=$HOME/.virtualenvs<br/>source /usr/local/share/python/virtualenvwrapper.sh<br/></code></pre><br/><br/><p>Good luck!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO REDIRECT DJANGO.CONTRIB.AUTH.VIEWS.LOGIN AFTER LOGIN
    </pattern>
    <template>
<![CDATA[<p>Finally I created a login view that calls django.contrib.auth.views.login internally.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON DATA BECOM KEY IN DJANGO UNABL TO PARS THE DATA
    </pattern>
    <template>
<![CDATA[<p>You want to pass <a href="https://docs.djangoproject.com/en/1.3/ref/request-response/#django.http.HttpRequest.raw_post_data" rel="nofollow"><code>request.raw_post_data</code></a> to <code>simplejson.loads</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAJAXIC FORM VALID UNICOD OBJECT HA NO ATTRIBUT GET ( JQUERI SERIAL )
    </pattern>
    <template>
<![CDATA[<p>i fixed it by changing</p><br/><br/><pre><code>$('#subscribe').serialize(true)<br/></code></pre><br/><br/><p>into</p><br/><br/><pre><code>$('#subscribe').serializeObject(true)<br/></code></pre><br/><br/><p>as i tought, the problem was the structure serialize creates, which isn't good for django form validation</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TUTORI PART 1 POLL OBJECT HA NO ATTRIBUT WAS PUBLISHED TODAY
    </pattern>
    <template>
<![CDATA[<p>I had a similar problem as I was working through the Django tutorial. I found that, in order to pick up custom methods, I had to exit from the Python shell and restart it (and re-import the Poll class).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAUGHT NOREVERSEMATCH WHILE RENDER REVERS FOR WITH ARGUMENT ( ) AND KEYWORD ARGUMENT NOT FOUND
    </pattern>
    <template>
<![CDATA[<p>I can see one immediate problem with your main url configuration. You have a '$' symbol, signifying end of the url in your include statement. </p><br/><br/><p>That line should read:</p><br/><br/><pre><code>(r'^', include('blog.apps.homepage.urls')),<br/></code></pre><br/><br/><p>Here's <a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#including-other-urlconfs" rel="nofollow">the documentation for <code>include</code></a>. </p><br/><br/><p>Also check that <code>blog.apps.homepage.urls</code> is a valid import path. Run the following to open a django shell:</p><br/><br/><pre><code>./manage.py shell<br/></code></pre><br/><br/><p>Then type:</p><br/><br/><pre><code>from blog.apps.homepage import urls<br/></code></pre><br/><br/><p>If you get an import error, try to work out what the proper import path should be and use that in your include statement.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OF THE PYTHON FACEBOOK API
    </pattern>
    <template>
<![CDATA[<p>According to that ticket support for <strong>SDK</strong> ends. The whole facebook API is language/technology agnostic and just a regular OAuth-based RESTful one</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVOLUT ERROR
    </pattern>
    <template>
<![CDATA[<p>I have solved it, and I will post for anyone coming across the same issue.</p><br/><br/><p>I realized that I was at a very stable part of my project.  So I made a backup of my db and went ahead and dropped the 2 tables that django_evolution works with.</p><br/><br/><p>Then I ran a syncdb to create the tables again.</p><br/><br/><p>This seemed to have worked and I was able to do my evolutions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR IN EVENT HANDLER FOR UNDEFIN TYPEERROR CAN NOT CALL METHOD REPLAC OF UNDEFIN
    </pattern>
    <template>
<![CDATA[<p>I would almost guarantee that if you log $('.vote_value'), you'll get undefined. Make sure you have an element with that class present in the dom.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOD PRACTIC TO AUTOMAT CREAT TABL IN A DATABAS WHEN A USER REGIST
    </pattern>
    <template>
<![CDATA[<p>Definitely the second format is the way you want to go. MySQL is pretty good at handling large numbers of rows (assuming they're indexed and cached as appropriate, of course). For example, all versions of all pages on Wikipedia are stored on one table in their database, and that works absolutely fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESULT OF A QUERYSET WITH JSON RAIS ERROR
    </pattern>
    <template>
<![CDATA[<p>"I am trying to serialize a Python list..."<br><br/>This is actually not quite the full story.<br><br/>You are trying to serialize a <code>ValuesListQuerySet</code>.</p><br/><br/><pre><code>&gt;&gt;&gt; type(ids)<br/>&lt;class 'django.db.models.query.ValuesListQuerySet'&gt;<br/></code></pre><br/><br/><p>You can either<br><br/> 1. convert to a Python list as mentioned in the other great answers, or<br><br/> 2. serialize just the IDs.  </p><br/><br/><p>Django has a built-in way to serialize a <code>QuerySet</code>.<br><br/>And you only want the IDs so you may use the <a href="https://docs.djangoproject.com/en/dev/topics/serialization/#subset-of-fields" rel="nofollow"><code>fields</code></a> kwarg.</p><br/><br/><pre><code>from django.core import serializers<br/>data = serializers.serialize('json', YourEntity.objects.all(), fields=('id',))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO MYSQL SERVER ON ANOTH HOST
    </pattern>
    <template>
<![CDATA[<p>By default, Debian-based distros configure MySQL to bind to localhost only, which means that other hosts cannot connect to it. Fix your MySQL configuration and it will work.</p><br/><br/><p>Edit <code>/etc/mysql/my.cnf</code> and change this line:</p><br/><br/><pre><code>bind-address = 127.0.0.1<br/></code></pre><br/><br/><p>To this:</p><br/><br/><pre><code>bind-address = 0.0.0.0<br/></code></pre><br/><br/><p>This will expose MySQL to all network interfaces, so make sure that you have security measures in place if this server is exposed to untrusted hosts.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FEED STREAM IN DJANGO
    </pattern>
    <template>
<![CDATA[<ol><br/><li>Django ORM supports polymorphic associations. You can have a "base" entity like "Event" and concrete events like "UserEvent", "ProductEvent" and so forth. That's quite easy. Look here: <a href="https://docs.djangoproject.com/en/dev/topics/db/models/" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/db/models/</a> search for "model inheritance"</li><br/><li>Take a look at content types: <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/</a></li><br/><li>You can probably just save "rendered" text to the DB.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR IN DJANGO FILEBROWS 3.2 ON LINUX
    </pattern>
    <template>
<![CDATA[<p>The solution is here: <a href="http://diveintopython.net/xml_processing/unicode.html" rel="nofollow">http://diveintopython.net/xml_processing/unicode.html</a></p><br/><br/><p>I solved the problem by adding sitecustomize.py to lib/python2.6/</p><br/><br/><pre><code># sitecustomize.py                   <br/># this file can be anywhere in your Python path,<br/># but it usually goes in ${pythondir}/lib/site-packages/<br/>import sys<br/>sys.setdefaultencoding('utf-8')<br/></code></pre><br/><br/><p>File browser files don't have the utf-8 header. <strike>I think they should change this.</strike> It looks like this:</p><br/><br/><pre><code>#!/usr/bin/env python<br/># -*- coding: UTF-8 -*-<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MERG A TUPL OR CONVERT A LIST TO A TUPL
    </pattern>
    <template>
<![CDATA[<p><code>append</code> doesn't return a new list -- it modifies the original list, returning <code>None</code>. You want <code>MY_APPS_LIST = DEFAULT_APPS + ['south']</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO EXAMPLE TUTORIAL BOOK TO START WITH
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.djangobook.com" rel="nofollow">The Django Book</a> is a good start.</p><br/><br/><p>The book can also be <a href="http://rads.stackoverflow.com/amzn/click/1590597257" rel="nofollow">purchased in print</a>, if you prefer.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TASTYPI AND CROSS DOMAIN JSON
    </pattern>
    <template>
<![CDATA[<p>The data <em>provider</em> needs to set a policy for cross domain request (<em>not the client</em>, as your expressjs snippets suggests).</p><br/><br/><p><a href="https://github.com/Frangossauro" rel="nofollow">Someone</a> posted a gist with a simple Django middleware taking care of injecting the needed headers:</p><br/><br/><blockquote><br/>  <p>Middlware to allow's your django server to respond appropriately to cross domain XHR (postMessage html5 API).</p><br/></blockquote><br/><br/><ul><br/><li><a href="https://gist.github.com/426829" rel="nofollow">https://gist.github.com/426829</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL DJANGO QUERYSET WITH VALU BE CALLED. IS THERE ANYTH WRONG WITH MY APPROACH
    </pattern>
    <template>
<![CDATA[<p>Your solution is totally valid and very clean in my own opinion.</p><br/><br/><p>If you need a list of lists (instead of a list of dictionaries) you can use too:</p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>people = People.objects.all().values_list('name', 'id')<br/>simplejson.dumps(list(people))<br/></code></pre><br/><br/><p>Sometimes when the json output is very complex we usually use a json template with the *render_to_string* function, for example:</p><br/><br/><pre><code>context = {'people': People.objects.all().values('name', 'id')}<br/>render_to_string('templates/people.json', context, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>The template <em>people.json</em> could be:</p><br/><br/><pre><code>[<br/> {% for person in people %}<br/>    {"name": {{ person.name }}, "id": {{ person.id }} }<br/>    {% if not forloop.last %} , {% endif %}<br/> {% endfor %}<br/>]<br/></code></pre><br/><br/><p>But the use of templates is reserved for more complex cases than yours. I think that for easier problems a good solution is to use simplejson.dumps function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMBER WITH COMMA AS THOUSAND SEPAR AND DECIM PLACE IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>{{ value|floatformat:2|intcomma }}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO DELET ALL RELAT OBJECT WHEN DELET A CERTAIN TYPE OF INSTANC
    </pattern>
    <template>
<![CDATA[<p>If the class has foreign keys (or related objects) they are deleted by default like a DELETE CASCADE in sql.</p><br/><br/><p>You can change the behavior using the "on_delete" argument when defining the foreign_key in the class but by default is cascade.</p><br/><br/><p>check it <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#deleting-objects" rel="nofollow">here</a></p><br/><br/><p>Now the pre_delete signal works but it doesn't calls the delete() method if you are using a bulk delete since its not deleting in a object by object basis.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      START UP REMOT DEBUG
    </pattern>
    <template>
<![CDATA[<p>PyCharm (or your ide of choice) acts as the "server" and your application is the "client"; so you start the server first - tell the IDE to 'debug' - then run the client - which is some code with the <code>settrace</code> statement in it. When your python code hits the <code>settrace</code> it connects to the server - pycharm - and starts feeding it the debug data.</p><br/><br/><p>To make this happen:</p><br/><br/><p><strong>1. copy the <code>pydev</code> library to the remote machine</strong></p><br/><br/><p>So I had to copy the file from <code>C:\Program Files\JetBrains\PyCharm 1.5.3\pycharm-debug.egg</code> to my linux machine. I put it at <code>/home/john/api-dependancies/pycharm-debug.egg</code></p><br/><br/><p><strong>2. Put the egg in the PYTHONPATH</strong></p><br/><br/><p>Hopefully you appreciate that you're not going to be able to use the egg unless python can find it. I guess most people use easy_install but in my instance I added it explicitly by putting this:</p><br/><br/><pre><code>   import sys<br/>   sys.path.append('/home/john/app-dependancies/pycharm-debug.egg')<br/></code></pre><br/><br/><p><strong>3. setup the debug server config</strong></p><br/><br/><p>In PyCharm you can configure the debug server via:</p><br/><br/><ul><br/><li><em>Run</em>-> <em>Edit Configurations</em>: opens the 'Run/Debug Configurations' dialog</li><br/><li><em>Defaults</em> -> "Python Remote Debug": is the template to use</li><br/><li>fill out the local host name and port and you'll probably want to 'use path mapping' but more on all this below...</li><br/><li><p>"OK"</p><br/><br/><p><strong>Local host name</strong>: means the name of the <em>server</em> - that's the windows host machine in my case - or actually the IP Address of the windows host machine since the hostname is not known to my remote machine. So the virtual (remote) machine has to be able to reach the host.  <code>ping</code> and <code>netstat</code> are good for this.</p><br/><br/><p><strong>Port</strong>: can be any vacant non-priviledged port you like. eg: <code>19499</code> is unlikely to be in use.</p><br/><br/><p>Don't worry about the path mappings for now.</p></li><br/></ul><br/><br/><p><strong>4. Start the debug server</strong></p><br/><br/><ul><br/><li><em>Run</em>-> <em>Debug</em> : start the debug server - choose the configuration you just created.</li><br/></ul><br/><br/><p>The debug console tab will appear and you should get </p><br/><br/><pre><code> Starting debug server at port 19499<br/></code></pre><br/><br/><p>in the console which means that the ide debug server is waiting for your code to open a connection to it.</p><br/><br/><p><strong>5. Insert the code</strong></p><br/><br/><p>The big question I still haven't fully worked out is where to put this code so I'll have to come back fill this in some more when I have.  It works if I put it inside a unit test:</p><br/><br/><pre><code>from django.test import TestCase<br/>class APITestCase(TestCase):<br/>    def test_remote_debug(self):<br/>        import sys<br/>        sys.path.append('/home/john/dependancies/pycharm-debug.egg')<br/>        from pydev import pydevd<br/>        pydevd.settrace('192.168.100.226', port=21000, suspend=False)<br/><br/>        print "foo"<br/></code></pre><br/><br/><p>But <em>I've not had <strong>any</strong> success debugging a django web application</em> with a browser. eg: <code>settings.py</code> is not the place to put the settrace.</p><br/><br/><p><strong>6. Open the firewall</strong></p><br/><br/><p>Windows 7 firewall will, by default, block your incoming connection. Using netstat on the remote host you'll be able to see that SYN_SENT never becomes ESTABLISHED, at least not until you add an exception to the windows firewall for the application 'pycharm'.</p><br/><br/><p><strong>7. Set a breakpoint and run the code</strong></p><br/><br/><p>After all that, when everything goes to plan, you can set a breakpoint - somewhere after the settrace has run - and pycharm console will show</p><br/><br/><pre><code>Connected to pydev debugger (build 107.386)<br/></code></pre><br/><br/><p>and under the 'Debugger' tab the variables stack will start working and you can step through the code.</p><br/><br/><p>Done.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO IMPORT ERROR
    </pattern>
    <template>
<![CDATA[<p>Circular import. Either resolve it, or use string as FK argument (<code>models.ForeignKey('app.Shastra')</code>).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITYERROR ( 1062 DUPLIC ENTRI FOR KEY )
    </pattern>
    <template>
<![CDATA[<p>Django automatically <a href="https://docs.djangoproject.com/en/dev/topics/auth/#default-permissions" rel="nofollow">creates few default permissions</a> on every model, these are: <code>add</code>, <code>delete</code> and <code>change</code>. You are getting integrity error because you are trying to create permissions with the same name. Just remove <code>delete_***</code> from your Meta description and everything should be ok.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      500 SERVER ERROR I HAVE NO IDEA WHAT S WRONG AJAX DJANGO
    </pattern>
    <template>
<![CDATA[<p>I saw ur jquery code and there should not be any errors...</p><br/><br/><p>just a wild guess because something similar happened to me before and took me a while to realize it (forgot what the traceback looks like)</p><br/><br/><p>You may want to check your urls file and make sure you're not using the same url or the wildcard of an existing url pattern.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIEW RETURN JSON WITHOUT USE TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I think the issue has gotten confused regarding what you want. I imagine you're not actually trying to put the HTML in the JSON response, but rather want to alternatively return either HTML or JSON.</p><br/><br/><p>First, you need to understand the core difference between the two. HTML is a presentational format. It deals more with how to display data than the data itself. JSON is the opposite. It's pure data -- basically a JavaScript representation of some Python (in this case) dataset you have. It serves as merely an interchange layer, allowing you to move data from one area of your app (the view) to another area of your app (your JavaScript) which normally don't have access to each other.</p><br/><br/><p>With that in mind, you don't "render" JSON, and there's no templates involved. You merely convert whatever data is in play (most likely pretty much what you're passing as the context to your template) to JSON. Which can be done via either Django's JSON library (simplejson), if it's freeform data, or its serialization framework, if it's a queryset.</p><br/><br/><p><strong>simplejson</strong></p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>some_data = {<br/>   'some_var_1': 'foo',<br/>   'some_var_2': 'bar',<br/>}<br/><br/>data = simplejson.dumps(data)<br/></code></pre><br/><br/><p><strong>Serialization</strong></p><br/><br/><pre><code>from django.core import serializers<br/><br/>foos = Foo.objects.all()<br/><br/>data = serializers.serialize('json', foos)<br/></code></pre><br/><br/><p>Either way, you then pass that data into the response:</p><br/><br/><pre><code>return HttpResponse(data, mimetype='application/json')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM NOT BE SUBMIT
    </pattern>
    <template>
<![CDATA[<p>I tried your code. Your problem is that the <strong>action</strong> attribute of your html <strong>form tag</strong> is set to "/league/".</p><br/><br/><p><strong>Unless reqPage url is actually "/league/", it won't work</strong>. When i changed <code>action="/league/"</code> to <code>action=""</code> as such:</p><br/><br/><p></p><br/><br/><pre><code>&lt;HTML lang="en"&gt;<br/>&lt;head&gt;<br/>    &lt;title&gt;User Registration&lt;/title&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<br/><br/>    &lt;form method="POST" action=""&gt;<br/>        {% csrf_token %} <br/>        &lt;table&gt;{{ form }}&lt;/table&gt;<br/>        &lt;input type="submit" value="Create Account"  /&gt;<br/>    &lt;/form&gt;&lt;br /&gt;&lt;br /&gt;<br/><br/>&lt;/body&gt;<br/>&lt;/HTML&gt;<br/></code></pre><br/><br/><p>The form <strong>did</strong> work:</p><br/><br/><pre><code>In [3]: UserRegistration.objects.all()<br/>Out[3]: [&lt;UserRegistration: aoeu oeu oeu@aeou.com&gt;]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WO N T SERV STATIC FILE WHILE USE DEVELOP SERVER
    </pattern>
    <template>
<![CDATA[<p>You are trying to access your static files via '/static/' instead of '/media/' since in your comments you say:</p><br/><br/><pre><code>"GET /static/css/style.css HTTP/1.1" 302 0 [21/Jul/2011 21:13:31] "GET /static/css/style.css/ HTTP/1.1" 404<br/></code></pre><br/><br/><p>Either you access it that way:</p><br/><br/><pre><code>"GET /media/css/style.css HTTP/1.1" 302 0 [21/Jul/2011 21:13:31] "GET /media/css/style.css/ HTTP/1.1" 404<br/></code></pre><br/><br/><p>And you set you URL in your templates accordingly.</p><br/><br/><p>Or, you setup your routing this way:</p><br/><br/><pre><code>if settings.DEBUG:<br/>urlpatterns += patterns('',<br/>     (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve',         <br/>    # {'document_root': settings.MEDIA_ROOT}),<br/>    {'document_root': settings.MEDIA_ROOT, 'show_indexes': True})<br/>)<br/></code></pre><br/><br/><p>I'll choose the second one and would setup <code>settings.STATIC_FILE</code> as you usually use <code>MEDIA_ROOT</code> for upload/download content.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUNSERV ERROR WHILE LOAD SHARE LIBRARI LIBSSL.SO.0.9.8 CAN NOT OPEN SHARE OBJECT FILE NO SUCH FILE OR DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>I had the same error installing OpenStack on Ubuntu 11.10.</p><br/><br/><p>Running locate showed I only had version 1.0.0 and not 0.9.8</p><br/><br/><p>$ locate libssl.so <br><br/>/lib/x86_64-linux-gnu/libssl.so.1.0.0<br/>/usr/lib/x86_64-linux-gnu/libssl.so.1.0.0</p><br/><br/><p>I fixed it using: <br><br/>$sudo apt-get install libssl0.9.8</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LEAST RECENT RENT MOVI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>With straight SQL, this would be much easier expressed like this:</p><br/><br/><pre><code>SELECT movie.id, count(movieRentals.id) as rent_count<br/>FROM movie<br/>LEFT JOIN movieRentals ON (movieRentals.movie_id = movie.id AND dateRented &gt; [TIME_ARG_HERE])<br/>GROUP BY movie.id<br/></code></pre><br/><br/><p>The left join will produce a single row for each movie unrented since [TIME_ARG_HERE], but in those rows, the movieRentals.id column will be NULL.</p><br/><br/><p>Then, <code>COUNT(movieRentals.id)</code> will count all of the rentals where they exist, and return 0 if there was only the NULL value.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM WITH A REVERS MANYTOMANI FIELD
    </pattern>
    <template>
<![CDATA[<p><code>ModelForm</code>'s don't automatically work for reverse relationships. </p><br/><br/><p>Nothing is happening on <code>save()</code> because a <code>ModelForm</code> only knows what to do with its own fields - <code>projects</code> is not a field on the <code>User</code> model, it's just a field on your form. </p><br/><br/><p>You'll have to tell your form how to save itself with this new field of yours.</p><br/><br/><pre><code>def save(self, *args, **kwargs):<br/>    for project in self.cleaned_data.get('projects'):<br/>        project.users.add(self.instance)<br/>    return super(AssignProjectForm, self).save(*args, **kwargs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHOOS BETWEEN DJANGO ZOPE3 AND WEB2PI FOR WEBSERVIC SERVER
    </pattern>
    <template>
<![CDATA[<p>Don't even consider using SOAP. Design a RESTful API, support JSON and XML. You could accomplish this with pretty much any Python web framework. If you use Django there are numerous apps out there for accomplishing this, I like <a href="http://django-tastypie.readthedocs.org/en/latest/" rel="nofollow">Tastypie</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOLLOW FORGEINKEY IN DJANGO S SELECT REL TO POPUL A SET VARIABL
    </pattern>
    <template>
<![CDATA[<p>Have a look at: <a href="https://github.com/lilspikey/django-batch-select/" rel="nofollow">https://github.com/lilspikey/django-batch-select/</a><br/>It will allow you to get what you want with just 2 queries (1 for the events and 1 for the prices)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX REQUEST TO SERVER WITH JQUERI
    </pattern>
    <template>
<![CDATA[<p>First, you have some problems in your view. You need to check whether the POST is from AJAX or a standard POST; otherwise, you won't be able to actually add the user later. (Really the AJAX part should be it's own view, since it really isn't part of the signup process per se, but rather a validation check. Later, you might actually want create a user via AJAX, and you wouldn't be able to because the view wouldn't be able to distinguish between the two different AJAX requests).</p><br/><br/><p>Next, <code>get</code> doesn't return <code>None</code> when the object doesn't exist; it raises an <code>ObjectDoesNotExist</code> exception. So, your <code>if</code> statement there won't work; you must use a <code>try</code> block instead.</p><br/><br/><p>I've updated your view below, accordingly:</p><br/><br/><pre><code>def signup(request):<br/>    if request.method == 'GET':<br/>        return render_to_response('signup.html', context_instance=RequestContext(request))<br/>    elif request.is_ajax(): <br/>        # query db for user with username provided in POST, return if it exists<br/>        try:<br/>            user = User.objects.get(username=request.POST["username"]) <br/>        except User.DoesNotExist:<br/>            return HttpResponse("false")<br/>        else:<br/>            return HttpResponse("true")<br/>    else:<br/>        # Normal post, add new user<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON REQUEST IN A VIEW ( USE DJANGO )
    </pattern>
    <template>
<![CDATA[<p>This is how I did it:</p><br/><br/><pre><code>def api_response(request):<br/>    try:<br/>        data=json.loads(request.raw_post_data)<br/>        label=data['label']<br/>        url=data['url']<br/>        print label, url<br/>    except:<br/>        print 'nope'<br/>    return HttpResponse('')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL META DATA THROUGH DECOR ( DJANGO )
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I didn't really want to have to write this for every single model in my app - <br/>  for a start, it doesn't seem pythonic, </p><br/></blockquote><br/><br/><p>That's false.  Some things have to be written down explicitly.  "Explicit is better than Implicit".</p><br/><br/><blockquote><br/>  <p>and also there's every chance of me forgetting when I have to add a new model</p><br/></blockquote><br/><br/><p>That's false, also. </p><br/><br/><p>You won't "forget".</p><br/><br/><p>Bottom Line:  Don't mess with this kind of thing.  Simply include the 2 lines of code explicitly where necessary.</p><br/><br/><p>You don't have that many tables.</p><br/><br/><p>You won't forget.</p><br/><br/><p>Also, be sure to use DB permissions.  Grant SELECT permission only on your "legacy" tables (the tables you don't want to write to). Then you can't write to them.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSONP RETURN INVALID JSON
    </pattern>
    <template>
<![CDATA[<p>You need to tell jQuery that this is JSONP (which is actually just a script.  It's a call to a function with your JSON data), not JSON data itself.  It said 'invalid JSON' because jQuery was trying to parse the function call.</p><br/><br/><pre><code>$.ajax({<br/>    url: "http://www.urltomydomain.com",<br/>    dataType: "jsonp",<br/>    success: function(json) {<br/>        console.log('success');<br/>        console.log(json);<br/>    },<br/>    error: function(x,y,z) {<br/>        // x.responseText should have what's wrong<br/>        console.log(x)<br/>        console.log(y)<br/>        console.log(z)<br/>    }<br/>});<br/></code></pre><br/><br/><p><code>dataType: "jsonp"</code> automatically adds the <code>?callback=?</code> to your url, so its not needed here.</p><br/><br/><p>You can also use <code>getJSON</code> (which requires you to add <code>?callback=?</code>).</p><br/><br/><pre><code>$.getJSON('http://www.urltomydomain.com?callback=?', function(json){<br/>    console.log('success');<br/>    console.log(json);<br/>});<br/></code></pre><br/><br/><p>You should use <code>?callback=?</code> because jQuery will automatially replace the second <code>?</code> with a dynamic name for the callback function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON VALU OF HTTP POST PARAMET TO PYTHON DICT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Try <code>json.loads(checkin_json)</code> instead of <code>json.load(request.POST)</code>. Notice the extra 's'.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN RETRIEV RELAT DATA IN A REST API
    </pattern>
    <template>
<![CDATA[<p>Yes; that is proper if the related resources are updated independently. REST architectures depend on caching for performance, and therefore work best with resources which act as atomic entities (see <a href="http://stackoverflow.com/questions/6668126/should-web-services-be-transactional/6668295#6668295">more here</a>). That way, you can update resource B and have its representation be fresh without having to update resource A. See <a href="http://stackoverflow.com/questions/4409877/url-design-for-an-api/4411929#4411929">this SO comment</a> for more design details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE SOMETH EXECUT FOR EVERI VIEW IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Templates is a appropriate place for this: the variant with custom tag and template inheritance is simple and convenient.  To avoid string appending use mini-template just for your tag: it is called <a href="https://docs.djangoproject.com/en/1.3/howto/custom-template-tags/#inclusion-tags" rel="nofollow">inclusion tags</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + MAC OSX HOW TO USE LESS CSS
    </pattern>
    <template>
<![CDATA[<ol><br/><li>Install node.js and npm (I used homebrew to install node.js and the instructions at <a href="http://npmjs.org/">http://npmjs.org/</a> to install npm)</li><br/><li>Install the command-line less compiler with <code>npm install --global less</code></li><br/><li><a href="http://django_compressor.readthedocs.org/en/latest/settings/#compress-precompilers">Add lessc to COMPASS_PRECOMPILERS (directions).</a></li><br/></ol><br/><br/><p>Here's the relevant snippet:</p><br/><br/><pre><code>COMPRESS_PRECOMPILERS = (<br/>    ('text/less', 'lessc {infile} {outfile}'),<br/>)<br/></code></pre><br/><br/><p>Also, COMPRESS_PRECOMPILERS is from django_compressor, a django app, not from django itself. I think django_compressor looks quite good, but there are other options available as well.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSRF FAIL WITH AJAX
    </pattern>
    <template>
<![CDATA[<p>All you need to do is paste the code block in such a way that the code in it runs. If you have a global JS file, you should be able to just add that JavaScript to the end of said file, and it will fix the problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LXML DLL LOAD FAIL THE SPECIFI MODUL COULD NOT BE FOUND
    </pattern>
    <template>
<![CDATA[<p>I installed unofficial builds from <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><br/><br/><p>It solved my problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBSTR SUBSTR IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You can use the <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#slice" rel="nofollow"><code>slice</code> filter</a>, though I don't think there's an equivalent to the <code>$length</code> argument.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN ISSU WITH SET UP MYSQLDB ON MAC OS X LION IN ORDER TO SUPPORT DJANGO
    </pattern>
    <template>
<![CDATA[<p>Easy,</p><br/><br/><p>edit your .bash_profile (vi ~/.bash_profile) somewhere in that add the following line:</p><br/><br/><p>export DYLD_LIBRARY_PATH="/usr/local/mysql/lib" </p><br/><br/><p>This line assumes your mysql install directory is in /usr/local/mysql/. </p><br/><br/><p>This will solve executing via python interrupter launched in shell (the .bash_profile exports the path needed by the MySQLdb module to load the ' libmysqlclient.18.dylib').</p><br/><br/><p>If you are having this issue with a Python IDE like PyCharm add the DYLD_LIBRARY_PATH variable to the launching module configuration.</p><br/><br/><p>I hope this helps :)</p><br/><br/><p>Also,</p><br/><br/><p>To fully understand this problem, read the following section:</p><br/><br/><p><a href="http://mysql-python.sourceforge.net/FAQ.html#importerror" rel="nofollow">http://mysql-python.sourceforge.net/FAQ.html#importerror</a></p><br/><br/><p>This explains this error in detail</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>QuerySet</code> cannot be serialized in this manner. Use <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.values" rel="nofollow"><code>.values()</code></a> and <code>list()</code> to turn it into a basic Python structure (i.e. a <code>list</code> of <code>dict</code>s) first.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABAS QUERI
    </pattern>
    <template>
<![CDATA[<p>Try use <code>camera = Cameras.objects.get(pk=camID)</code> then you know for sure you've only got one object. You can then <code>camera.delete()</code><br/>You also don't need all the ';' characters in your code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EERROR UNABL TO CONFIGUR FILTER REQUIRE DEBUG FALS CAN NOT RESOLV DJANGO.UTILS.LOG.CALLBACKFILT NO MODUL NAME CALLBACKFILT
    </pattern>
    <template>
<![CDATA[<p>Please double check if the <a href="https://www.djangoproject.com/download/" rel="nofollow">django version 1.3.1</a> you have is the most recent one, because this is a bug in Django.</p><br/><br/><p>To avoid such situations, I recommend to use virtualenv: <a href="http://blog.devinterface.com/2010/08/how-to-create-multiple-django-environments-using-virtualenv/" rel="nofollow">How to create multiple Django environments using virtualenv</a></p><br/><br/><p>If you have the most recent version and still facing the issue, please update this bug: <a href="https://code.djangoproject.com/ticket/16568" rel="nofollow">Ticket #16568  require_debug_false does not work as intended (backward incompatible)</a> </p><br/><br/><p>The bug also has a simple solution:</p><br/><br/><blockquote><br/><pre><code>Remove require_debug_false from global_settings.py (since it does<br/></code></pre><br/>  <br/>  <p>not work) and force everyone to copy/paste the default LOGGING snippet<br/>  to their settings</p><br/></blockquote><br/><br/><p>Answer posted by django developer andreas_pelme <a href="https://code.djangoproject.com/ticket/16568#comment:12" rel="nofollow">here</a>, this is not a bug and if correct version of django is installed, it should work fine.</p><br/><br/><pre><code>~ $ mkvirtualenv t16568-regression<br/>New python executable in t16568-regression/bin/python<br/>Installing setuptools............done.<br/>Installing pip...............done.<br/>virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/predeactivate<br/>virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/postdeactivate<br/>virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/preactivate<br/>virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/postactivate<br/>virtualenvwrapper.user_scripts creating /Users/andreas/.virtualenvs/t16568-regression/bin/get_env_details<br/>[t16568-regression] ~ $ pip install django==1.3.1<br/>Downloading/unpacking django==1.3.1<br/>  Downloading Django-1.3.1.tar.gz (6.5Mb): 6.5Mb downloaded<br/>  Running setup.py egg_info for package django<br/><br/>Installing collected packages: django<br/>  Running setup.py install for django<br/>    changing mode of build/scripts-2.7/django-admin.py from 644 to 755<br/><br/>    changing mode of /Users/andreas/.virtualenvs/t16568-regression/bin/django-admin.py to 755<br/>Successfully installed django<br/>Cleaning up...<br/>[t16568-regression] ~ $ cd code/<br/>[t16568-regression] ~ $ django-admin.py startproject foo<br/>[t16568-regression] ~ $ cd foo/<br/>[t16568-regression] ~/foo $ python manage.py shell<br/><br/>In [1]: import django; django.get_version()<br/>Out[1]: '1.3.1'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONFIGUR TASTYPI TO TREAT A FIELD AS UNIQU
    </pattern>
    <template>
<![CDATA[<p>Here is how I solved the problem:</p><br/><br/><p>Based on the documentation for validation, I was able to implement a custom validator that checked the uniqueness of the field for me.<br/><a href="http://django-tastypie.readthedocs.org/en/latest/validation.html" rel="nofollow">http://django-tastypie.readthedocs.org/en/latest/validation.html</a> </p><br/><br/><p>In the CompanyResource, I added to the class meta a CustomValidation. I placed the implementation for CustomValidation in a validations.py file. If isValid returns errors, the api will return a 400 with the messages included in errors. </p><br/><br/><pre><code>class CompanyResource(ModelResource):<br/>    """<br/>    CompanyIds should be unique<br/>    """     <br/>    CompanyName = fields.CharField(attribute='company_name')     <br/>    CompanyId = fields.CharField(attribute='company_id', unique=True)     <br/>    Contact = fields.CharField(attribute='contact')     <br/>    Email = fields.CharField(attribute='email')     <br/>    Phone = fields.CharField(attribute='phone')    <br/><br/>    class Meta:        queryset = Company.objects.all()        <br/>    authentication = BasicAuthentication()        <br/>    authorization = Authorization()        <br/>    allowed_methods = ['get', 'post']                <br/>    validation = CustomValidation()<br/></code></pre><br/><br/><p>validations.py</p><br/><br/><pre><code>class CustomValidation(Validation):<br/>    """<br/>    The custom validation checks two things:<br/>       1) that there is data<br/>       2) that the CompanyId exists (unique check)<br/>    """<br/>    def is_valid(self, bundle, request=None):<br/>        if not bundle.data:<br/>            return {'__all__': 'Missing data, please include CompanyName, CompanyId, Contact, Email, and Phone.'}<br/><br/>        errors = {}                                    <br/>        company_id=bundle.data.get('CompanyId', None)<br/><br/>        # manager method, returns true if the company exists, false otherwise<br/>        if Company.objects.company_exists(company_id):<br/>            errors['CompanyId']='Duplicate CompanyId, CompanyId %s already exists.' % company_id<br/>        return errors<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BAD INTERPRET NO SUCH FILE OR DIRECTORI WHEN RUN DJANGO ADMIN.PI
    </pattern>
    <template>
<![CDATA[<p>I'm not sure how you did to produce this error, but the fix for you is to change <code>/usr/local/bin/django-admin.py</code> <a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29">shebang</a> to <code>#!/usr/bin/env python</code>.</p><br/><br/><hr><br/><br/><p>Actually if you install django in a virtualenv the <code>django-admin.py</code> will have the shebang set to the python interpreter of your virtualenv, but this script will not be created in <code>/usr/local/bin/</code> instead it will be created in <code>/&lt;virtualenvpath&gt;/bin/</code> along with <code>activate</code> and the virtualenv python interpreter which is what confuse me, unless you moved it there !</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN CHANGELIST TO SHOW SPECIF ROW BASE ON THE LOGGED IN USER
    </pattern>
    <template>
<![CDATA[<p>Thanks buddy<br/>I tryed your code but it had error!!so I changed it and now it work well:</p><br/><br/><pre><code>class TourAdmin(admin.ModelAdmin):<br/>   def queryset(self, request):<br/>      qs = super(TourAdmin, self).queryset(request)<br/>      if request.user.is_superuser:<br/>            return qs<br/>      return qs.filter(ActionUserCode=request.user)<br/>admin.site.register(Tour,TourAdmin)<br/></code></pre><br/><br/><p>I put code for others who may have such problem</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCHEMA MIGRAT WITH SOUTH ( DJANGO ) AND MYSQL
    </pattern>
    <template>
<![CDATA[<p>What's actually going on in your migrations? If you're getting this error then simply <code>create_table</code> is being called twice for <code>blog_blog</code> or <code>blog_blog</code> already existed in your database before the initial migration (perhaps, a leftover from a previous attempt at creating a blog that never got migrated to zero).</p><br/><br/><p>If the error is occurring before the initial migration completes, then it's most likely an artifact, and you can just remove it from your database manually and try again. If the initial migration succeeds but a later migration fails, then find where there's a duplicate <code>create_table</code> for <code>blog_blog</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO DISPLAY USER FULL NAME IN FILTEREDSELECTMULTIPL
    </pattern>
    <template>
<![CDATA[<p>A little late, but I think it might help people trying to solve a similar problem: <a href="http://djangosnippets.org/snippets/1642/" rel="nofollow">http://djangosnippets.org/snippets/1642/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHARE CODE BETWEEN APPLIC IN A DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Imagine that you have a project called <strong>commons</strong> where you store all the code you want to share. And then you want to use the code of <strong>commons</strong> in a project called <strong>foo</strong>. Imagine that you have the follow directories:</p><br/><br/><pre><code>/home/shared/commons.py<br/>/home/tim/projects/foo.py<br/></code></pre><br/><br/><p>The <strong>commons.py</strong> have this content:</p><br/><br/><pre><code>def say_hello():<br/>    return "Hello World!"<br/></code></pre><br/><br/><p>If you want to be able to import the module <strong>commons</strong> in your file <strong>test.py</strong> put in this file:</p><br/><br/><pre><code>import sys<br/>sys.path.append("/home/shared/")<br/><br/>import commons<br/>print commons.say_hello()<br/></code></pre><br/><br/><p>And it will print "Hello world!".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARAMET TO DJANGO CLASS BASE GENER VIEW DECOR
    </pattern>
    <template>
<![CDATA[<p>Looks like you have to use closure:</p><br/><br/><pre><code>def decorator(arg):<br/>    def wrap(klass): ...<br/>    return wrap<br/></code></pre><br/><br/><p>because your call is evaluated to </p><br/><br/><pre><code>class BandCreateView(CreateView): ...<br/>BandCreateView = @success_message('Band created successfully.')(BandCreateView)<br/></code></pre><br/><br/><p>note double call</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .CONTRIB.AUTH UNIT TEST FAIL WITH AUTHENTICATION BACKEND ENABL
    </pattern>
    <template>
<![CDATA[<p>I was incorrect. Adding this hack to the setUP and tearDown methods to each individual class  did work. Going to reach out to the community to find out if this is an actual bug. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM WHEN IMPORT DATA TO MYSQL
    </pattern>
    <template>
<![CDATA[<p>I solved it by exporting the processed XML-files to csv instead of json, and then used a separate script that called mysqlimport to do the importing.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEFIELD UPLOAD A VALID IMAGE. THE FILE YOU UPLOAD WA EITHER NOT AN IMAG OR A CORRUPT IMAGE.
    </pattern>
    <template>
<![CDATA[<p>When you compile PIL it should say if it has been compiled with PNG support or not, but if you have problems installing it yourself, I would recommend that you use the version that comes with ubuntu. It's strangely named but easily installed with:</p><br/><br/><pre><code>apt-get install python-imaging<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONETOON FIELD
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>I would use a <code>SlugField</code> in each model (Company, User, Store) as their identifier.</p></li><br/><li><p>theoretically, you do not need any URL mapping tables at all, in the view that handles the requests, extract the last part of the url, which is a slug identifying a Company, or a User, or a Store, and search Company, then User, and then Store models for the given slug. Stop when you find the object.</p></li><br/><li><p>to improve speed, you can create an auxiliary model like you did and use <code>GenericForeignKey</code> relation as Lakshman Prasad suggested. In this auxiliary model, again, I would use a <code>SlugField</code> for an identifier. And if you use that, you do not need slugs in your main models.</p></li><br/><li><p>I personally think this is a bad design. First, I doubt that these URLs are REST-ful. Second, for this to work, the slugs in your main models have to be unique across these three models, which can be ensured by only an external mechanism, you cannot use a <code>UNIQUE</code> constraint here. Your <code>URL_mapping</code> model is simply one such mechanism. It basically stores your slugs for the three models outside the models and, if you add the <code>UNIQUE</code> constraint to the <code>SlugField</code> in <code>URL_mapping</code>, makes sure the slugs are unique across your main models.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSDL URL WITH XML WITH ESCAP CHAR AS ARGUMENT
    </pattern>
    <template>
<![CDATA[<p>I think the suds library is the culprit here.  When you send your escaped xml into suds as a parameter to the <code>client.service.timbrado</code> method it also escapes it.  However, it sees that you have escaped the ampersand already like this:</p><br/><br/><pre><code>...<br/>descripcion="EJE&amp;amp;MPLO"<br/>...<br/></code></pre><br/><br/><p>And it does not escape it further (although it should).  You should run your escaped xml through <code>xml.sax.saxutils.escape</code> before passing it to <code>client.service.timbrado</code>.</p><br/><br/><p>This should result in xml snippet above looking like this:</p><br/><br/><pre><code>...<br/>descripcion="EJE&amp;amp;amp;MPLO"<br/>...<br/></code></pre><br/><br/><p>When I run your code with the doubly-escaped xml, I receive the following result:</p><br/><br/><pre><code>&lt;?xml version="1.0" ?&gt;<br/>&lt;S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br/>    &lt;S:Body&gt;<br/>        &lt;ns2:timbradoResponse xmlns:ns2="http://sefactura.com"&gt;<br/>            &lt;return&gt;<br/>                &lt;status&gt;401 - Fecha y hora de generación fuera de rango&lt;/status&gt;<br/>            &lt;/return&gt;<br/>        &lt;/ns2:timbradoResponse&gt;<br/>    &lt;/S:Body&gt;<br/>&lt;/S:Envelope&gt;<br/></code></pre><br/><br/><p>It is an error regarding your data (date and time of generation out of range), not about the format of the xml.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ADMIN BY NULL I NOT NULL
    </pattern>
    <template>
<![CDATA[<p>I ended up using a mixture of <a href="http://stackoverflow.com/questions/2251851/django-admin-list-filter-attribute-from-userprofile">the top solution here</a>, along with <a href="http://djangosnippets.org/snippets/1963/" rel="nofollow">this snippet</a>. </p><br/><br/><p>However, I had to tweak the snippet slightly, dropping the field type restriction and adding the new field_path, recently added in 1.3.</p><br/><br/><pre><code>from django.contrib.admin.filterspecs import FilterSpec<br/>from django.db import models<br/>from django.utils.safestring import mark_safe<br/>from django.utils.translation import ugettext as _<br/><br/>class NullFilterSpec(FilterSpec):<br/>    #fields = (models.CharField, models.IntegerField, models.FileField)<br/><br/>    @classmethod<br/>    def test(cls, field):<br/>        #return field.null and isinstance(field, cls.fields) and not field._choices<br/>        return field.null and not field._choices<br/>    #test = classmethod(test)<br/><br/>    def __init__(self, f, request, params, model, model_admin, field_path=None):<br/>        super(NullFilterSpec, self).__init__(f, request, params, model, model_admin, field_path)<br/>        self.lookup_kwarg = '%s__isnull' % f.name<br/>        self.lookup_val = request.GET.get(self.lookup_kwarg, None)<br/><br/>    def choices(self, cl):<br/>        # bool(v) must be False for IS NOT NULL and True for IS NULL, but can only be a string<br/>        for k, v in ((_('All'), None), (_('Has value'), ''), (_('Omitted'), '1')):<br/>            yield {<br/>                'selected' : self.lookup_val == v,<br/>                'query_string' : cl.get_query_string({self.lookup_kwarg : v}),<br/>                'display' : k<br/>            }<br/><br/># Here, we insert the new FilterSpec at the first position, to be sure<br/># it gets picked up before any other<br/>FilterSpec.filter_specs.insert(0,<br/>    # If the field has a 'profilecountry_filter' attribute set to True<br/>    # the this FilterSpec will be used<br/>    (lambda f: getattr(f, 'isnull_filter', False), NullFilterSpec)<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONTACT FROM YAHOO IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>The <a href="http://developer.yahoo.com/social/rest_api_guide/contacts-resource.html" rel="nofollow">Contacts REST API</a> is pretty straight-forward. The URL that you're after is</p><br/><br/><pre><code>http://social.yahooapis.com/v1/user/{guid}/contacts.json<br/></code></pre><br/><br/><p>Here is a script that will extract things for you. You can expand this to include authentication.</p><br/><br/><pre><code>import urllib2<br/>import json<br/><br/>def get_contacts(guid):<br/>    url = 'http://social.yahooapis.com/v1/user/{}/contacts.json'.format(guid)<br/>    page = urllib2.urlopen(url)<br/>    return json.load(page)['contacts']['contact']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROWSER HA AJAX ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>I believe that the correct thing would be to use some sort of graceful degradation and check for ajax in the request using Django's <code>request.is_ajax()</code> method</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.is_ajax" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.is_ajax</a></p><br/><br/><p>In your view there would be something like</p><br/><br/><pre><code>if form.is_valid():<br/>    if request.is_ajax():<br/>        return simplejson.dumps(something)<br/>    return redirect('/some-url/)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPHINX DOCUMENT FOR DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>Add the following to your conf.py and you will not need to set DJANGO_SETTINGS_MODULE each time:</p><br/><br/><pre><code>import sys, os<br/><br/>sys.path.append('/path/to/your/project') # The directory that contains settings.py<br/><br/># Set up the Django settings/environment<br/>from django.core.management import setup_environ<br/>from myproject import settings<br/><br/>setup_environ(settings)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT QUEUE IN RABBITMQ WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p>Usual python clients should do from django (but beware, you may need to block the request when you're running AMQP commands). Take a look at rabbitmq tutorials</p><br/><br/><ul><br/><li><a href="http://www.rabbitmq.com/getstarted.html" rel="nofollow">http://www.rabbitmq.com/getstarted.html</a></li><br/><li><a href="https://github.com/rabbitmq/rabbitmq-tutorials" rel="nofollow">https://github.com/rabbitmq/rabbitmq-tutorials</a></li><br/></ul><br/><br/><p>There are at least three python clients: python-amqplib, pika and puka.</p><br/><br/><p>Also, you may find <a href="http://www.celeryproject.org/" rel="nofollow">www.celeryproject.org</a> useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI PAGE RELOAD ON LOGIN LOGOUT
    </pattern>
    <template>
<![CDATA[<p>If your page content has dependencies on events that occur after the pageload (ie Facebook login/logout) your best bet may be to use jQuery + ajax to load and/or reload the dependent elements separately.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BY COUNT IN JSON
    </pattern>
    <template>
<![CDATA[<p>If I understood correctly this should help:</p><br/><br/><pre><code>Blog.objects.annotate(comment_count=Count('comments')).order_by('comment_count')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUIR TO BE QUALIFI AS A ORM
    </pattern>
    <template>
<![CDATA[<p>No, because ORM means that the language constructs (like objects and methods)  are mapped to tables and fields and procedures on the database somehow.</p><br/><br/><p>If you cannot use class instances (objects) directly for database interaction and still have to rely on creating your own SQL statements, you do not have a ORM.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIF ADMIN CSS FILE IN DJANGO
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I'm looking for a solution short of copying all the admin media files into my project and changing admin's static directory</p><br/></blockquote><br/><br/><p>I don't think there is really an alternative. You copy the media files into a new directory and while you start the server pass the <code>adminmedia</code> command line argument, like</p><br/><br/><pre><code>python manage.py runserver --adminmedia=./myadminmedia<br/></code></pre><br/><br/><p>In any case, when you run it on production server, the admin media has to be served from a good static serving server, for which, you can point this new path.</p><br/><br/><p>Reference from the Docs: <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---adminmedia" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/django-admin/#django-admin-option---adminmedia</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I18N NOT WORK
    </pattern>
    <template>
<![CDATA[<p>Ok, I found the problem... My po files were in <code>./conf/locale</code> instead of just <code>./locale</code>.</p><br/><br/><p>The reason I created <code>./conf/locale</code> was because when I rand <code>django-admin.py makemessages</code>, it instructed me to do so.  However, if it's in your local project directory, then it is just simply <code>./locale</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHILD RESOURC IN A DJANGO TASTYPI API
    </pattern>
    <template>
<![CDATA[<p>You're looking for related fields: <a href="http://django-tastypie.readthedocs.org/en/latest/fields.html#relationship-fields" rel="nofollow">http://django-tastypie.readthedocs.org/en/latest/fields.html#relationship-fields</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WAY TO PASS DJANGO OBJECT TO EXTJ
    </pattern>
    <template>
<![CDATA[<p>I found a solution which is able to serialize objects, which contain QuerySet as attributes. It's hosted on traddicts.org blog:</p><br/><br/><p><a href="http://www.traddicts.org/webdevelopment/flexible-and-simple-json-serialization-for-django/" rel="nofollow">http://www.traddicts.org/webdevelopment/flexible-and-simple-json-serialization-for-django/</a></p><br/><br/><p>I further modified the code to work recursively, so in effect I can do the following:</p><br/><br/><pre><code>users = User.objects.all()<br/>response = {}<br/>response['success'] = True<br/>response['users'] = users<br/>json_serialize(response)<br/>json_serialize(response, serialize_related=True)<br/>json_serialize(response, serialize_related=True, ignored=['users.groups'])<br/>json_serialize(response, serialize_related=True, ignored=['users.groups.permissions'])<br/></code></pre><br/><br/><p>I like your answer Thomas, but I needed something which would be even more flexible. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERIAL ERROR NONETYP OBJECT HA NO ATTRIBUT META
    </pattern>
    <template>
<![CDATA[<p>My guess is that it's the problem with the <code>GenericRelation</code>. It's quite new field type and maybe it wasn't implemented when the serialization code was written.</p><br/><br/><p>GenericRelation fields use ManyToMany relation internally, and probably in a way that they don't define the <code>field.rel.through</code> object. This causes the error in your case. You can verify this by adding some logging to see which field causes the problem.</p><br/><br/><p>To solve it you can either look more into <code>GenericRelations</code> and modify the serialization code to support them or use some other serialization technique that supports <code>GenericRelations</code>.</p><br/><br/><p>Clip from Django source code for <code>GenericRelation</code> class:</p><br/><br/><pre><code>    def get_internal_type(self):<br/>      return "ManyToManyField"<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URLS.PI CAN NOT PROCESS THE URL
    </pattern>
    <template>
<![CDATA[<p>after updated my answer:</p><br/><br/><p>try this:</p><br/><br/><pre><code>(r'^/edit/(?P&lt;page_name&gt;\w+)$', 'gallery.views.edit_page'),<br/>(r'^/save/(?P&lt;page_name&gt;\w+)$', 'gallery.views.save_page'),<br/>(r'^/(?P&lt;page_name&gt;\w+)$', 'gallery.views.view_page')<br/></code></pre><br/><br/><p>While <code>urls.py</code> is root folder of your application.</p><br/><br/><p>Then if you visit:</p><br/><br/><p><a href="http://domain.com/edit/page1" rel="nofollow">http://domain.com/edit/page1</a></p><br/><br/><p>it should work</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEFIELD FILEFIELD SAVE UPLOAD FILE USE MODEL S PK
    </pattern>
    <template>
<![CDATA[<p>You can use upload_to like:</p><br/><br/><pre><code>def image_path(instance, filename):<br/>    return instance.id + os.path.splitext(filename)[1]<br/><br/>class Brand(models.Model):<br/>    ...<br/>    logo = models.ImageField(upload_to=image_path, null=True, blank=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON CHANG UPLOAD FILENAM BEFOR SAVE FILE
    </pattern>
    <template>
<![CDATA[<p>You need to define <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.FileField.upload_to" rel="nofollow"><code>upload_to</code></a> function.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROCESS IN DJANGO WITHOUT CELERI
    </pattern>
    <template>
<![CDATA[<p>I know only one alternative to <em>Celery</em> that is more lightweight: <a href="http://charlesleifer.com/blog/a-lightweight-task-queue-for-django/" rel="nofollow">Queue in django-utils</a>.</p><br/><br/><p>Another way is to use the <a href="http://docs.python.org/library/subprocess.html" rel="nofollow">subprocess</a> module directly but you'll probably have to solve some problems that are already solved in <em>Celery</em> and <em>django-utils</em>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SMART DECIM FIELD
    </pattern>
    <template>
<![CDATA[<p>TBH for a shoe size field I'd probably use a CharField with choices attribute - there are a relatively small number of valid shoe sizes and that way you can format them how you want to.</p><br/><br/><p>If it's part of a Product model that may contain things other than shoes, a CharField for 'size' is useful because you can also store values like 'M', 'L', 'XXL' etc.</p><br/><br/><p>You won't need to do any math on the shoe sizes so there's no point to using a DecimalField.</p><br/><br/><p>For that reason it doesn't really matter what is saved in the db, only what you display and @j_syk had a couple of good alternative suggestions along those lines in the comments.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON WAY TO REPEAT SOME ACTION FOR A NUMBER OF ATTRIBUT
    </pattern>
    <template>
<![CDATA[<p>Don't use <code>exec</code> for this! <code>getattr</code> is perfectly adequate, much safer, and readable too.</p><br/><br/><pre><code>class ItemDataForm(ModelForm):<br/>    def __init__(self,product,*args,**kwargs):<br/>        super(ItemDataForm, self).__init__(*args, **kwargs)<br/>        del self.fields['created']<br/>        fields = 'int1', 'int2', 'float1', 'float2', 'string1', 'string2'<br/>        for field in fields:<br/>            val = getattr(product, field + '_name')<br/>            fval = field + '_val'<br/>            if val:<br/>                self.fields[fval].label = val<br/>                self.fields[fval].value = getattr(product, field + '_default')<br/>            else:<br/>                del self.fields[fval]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANI TO MANI ASSOCI
    </pattern>
    <template>
<![CDATA[<p>You just need a many to many relation, something like:</p><br/><br/><pre><code>class Group(models.Model):<br/>    name = models.CharField(max_length=32, unique=True)<br/>    keywords = models.ManyToManyField(MyKeywords)<br/><br/>    def __unicode__(self):<br/>        return '%s' % (self.name)<br/><br/>class MyKeywords(models.Model):<br/>    name = models.CharField(max_length=32, unique=True)<br/><br/>    def __unicode__(self):<br/>            return self.name<br/></code></pre><br/><br/><p>Then, you can use your m2m relation:</p><br/><br/><pre><code>group = Group.objects.get(name='something')<br/>keyw = MyKeywords.objects.get(name='something_else')<br/>group.keywords.add(keyw)<br/>group.keywords.all()<br/>group.keywords.remove(keyw)<br/></code></pre><br/><br/><p><strong>NOTE</strong>: It is recommended that the name of a class is in singular, so it should be <code>MyKeyword</code> instead of <code>MyKeywords</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODUL NAME PSYCOPG2
    </pattern>
    <template>
<![CDATA[<p>I had the same problem, it was that psycopg2 does not install well in windows with easy_install, I follow the instructions on this answer:</p><br/><br/><p><a href="http://stackoverflow.com/questions/3030984/installing-psycopg2-postgresql-in-virtualenv-on-windows">Installing psycopg2 (postgresql) in virtualenv on windows</a></p><br/><br/><p>You're going need to manually install this file:<br/>psycopg2-2.4.2.win-amd64-py2.7-pg9.0.4-release.exe</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STOCK CHART IN DJANGO WITH JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>I don't have these libraries installed, but based on the <a href="https://bitbucket.org/gabhijit/tickp/src/512bf8139628/Getting-Started.txt" rel="nofollow">readme</a> of the <code>tickp</code> library, you'll need the following data: <code>[date, open, high, low, close and optionally volume]</code>. The <a href="https://github.com/gurch101/StockScraper/blob/master/stockretriever.py#L55" rel="nofollow"><code>get_historical_info</code></a> function returns the columns <code>[Date, Open, High, Low, Close, Volume, AdjClose]</code>. The mismatch here is the <code>AdjClose</code>, so you'd need to strip that from the data you get from the <code>StockRetriever</code>:</p><br/><br/><pre><code>from django.shortcuts import render<br/>from stock.stockretriever import StockRetriever<br/><br/>def stockretriever(request, number):<br/>    data = StockRetriever().get_historical_info('YHOO')<br/>    # Assuming data is returned as a list of lists<br/>    new_data = [d[:-1] for d in data]<br/>    return render(request, 'stock.html', { 'data': simplejson.dumps(new_data) })<br/></code></pre><br/><br/><p>Following along with the readme, you need something along the following lines in your template:</p><br/><br/><pre><code>&lt;html&gt;<br/>&lt;head&gt;&lt;script src="tickp.js"&gt;&lt;/script&gt;&lt;script src="stats.js"&gt;&lt;/script&gt;&lt;/head&gt;<br/>&lt;body onload='plot = window.tickp("#chart"); plot.read({{ data }}); plot.plot();'&gt;<br/>  &lt;div id="chart"&gt;&lt;/div&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;<br/></code></pre><br/><br/><p>Note that I've cut some corners with respect to possible Ajax calls or proper formatting and usage, but it should give you something to get started with. When you're missing something, please update your question with the specific issues you're having.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SINGL OBJECT
    </pattern>
    <template>
<![CDATA[<p>You can always wrap the object you want into a list and take back only the first element. Your second argument can be:</p><br/><br/><pre><code>[get_object_or_404(Animal, pk=1),]<br/></code></pre><br/><br/><p>and when you deserialize,</p><br/><br/><pre><code>my_obj = deserialize()[0]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM AND AJAX
    </pattern>
    <template>
<![CDATA[<p>You need JavaScript. For example, with jQuery:</p><br/><br/><pre><code>$('form').submit(function() {<br/>    $.post($(this).attr('action'), $(this).serialize(), function(data, textStatus, jqXHR){<br/>        if (typeof data == 'object') {<br/>            // json was returned, update the chart with the json<br/>        } else {<br/>            // the form had error, the form's html was returned<br/>            $('form').html(data);<br/>        }<br/>    })<br/>})<br/></code></pre><br/><br/><p>You can have such a python view:</p><br/><br/><pre><code>from django.utils import simplejson<br/>from django import shortcuts<br/><br/>def chart_form(request):<br/>    template_full = 'chart_full.html' # extends base.html etc ..<br/>    template_form = 'chart_form.html' # just the form, included by chart_full.html<br/><br/>    if request.method == 'POST':<br/>        form = formClass(request.POST) <br/>        if form.is_valid():<br/>            // do your chart_data<br/>            chart_data = ....<br/>            return http.HttpResponse(simplejson.dumps(chart_data), mimetype='application/json')<br/>    else:<br/>        form = formClass()<br/><br/>    if request.is_ajax():<br/>        template_name = template_form<br/>    else:<br/>        template_name = template_full<br/><br/>    return shortcuts.render(template_name, {'form': form}, request)<br/></code></pre><br/><br/><p>Note: that won't work if your form contains file fields. In that case, rely on this plugin: <a href="http://jquery.malsup.com/form/" rel="nofollow">http://jquery.malsup.com/form/</a> (function ajaxSubmit)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM THAT REFRESH PART OF A PAGE
    </pattern>
    <template>
<![CDATA[<p>You need JavaScript. For example, with jQuery:</p><br/><br/><pre><code>$('form').submit(function() {<br/>    $.post($(this).attr('action'), $(this).serialize(), function(data, textStatus, jqXHR){<br/>        $('.other_div').html(data);<br/>    })<br/>})<br/></code></pre><br/><br/><p>Note: that won't work if your form contains file fields. In that case, rely on this plugin: <a href="http://jquery.malsup.com/form/" rel="nofollow">http://jquery.malsup.com/form/</a> (function ajaxSubmit)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIP INSTAL REQUIR FAIL
    </pattern>
    <template>
<![CDATA[<p>I ran into this same error while using the native Python 2.6.1 on Mac OS X 10.6 to install django-imagekit. Some googling revealed this:</p><br/><br/><p><a href="https://github.com/jezdez/django_compressor/issues/181" rel="nofollow">https://github.com/jezdez/django_compressor/issues/181</a></p><br/><br/><p>which suggested this:</p><br/><br/><pre><code>pip install versiontools<br/></code></pre><br/><br/><p>and then I was able to install django-imagekit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY TO ANOTH MODEL
    </pattern>
    <template>
<![CDATA[<p>You can do <code>./manage.py reset yourapp</code> which will drop the tables of your app, then you'd <code>syncdb</code> again. That's what I do during development because it's quick and easy.</p><br/><br/><p>There are many other ways: you can install <code>django-extensions</code>, run command <code>./manage.py sqldiff yourapp</code>, and then run the generated SQL, which will modify the structure according to your models.py.</p><br/><br/><p>If you want to know more about schema migrations, <a href="http://blog.yourlabs.org/django-schema-migrations-nashvegas-vs-south-v" rel="nofollow">here</a> is an article which gives an overview of the current options.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CA N T CREATE WRIT TO FILE ERROR # 13
    </pattern>
    <template>
<![CDATA[<p>You have configured mysql's tmpdir to point to a directory the server does not have permission to write to.</p><br/><br/><p>For small filesorts, MySQL uses an in-memory buffer, but for larger ones uses files on disc (in the tmpdir).</p><br/><br/><p>In any case, it is a sysadmin error (not a programming error) setting the MySQL tmpdir to point to a unwritable directory. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH AJAX REQUEST AND PYTHON INTERACT
    </pattern>
    <template>
<![CDATA[<p>Django template is actually rendered and returned as response body. Now you just want to process it on client side.</p><br/><br/><pre class="lang-js prettyprint-override"><code>$.ajax({<br/>    url:"/testPage",<br/>    type:'GET',<br/>    success: function(html){ <br/>        $('body').append(html);<br/>    }<br/>});<br/></code></pre><br/><br/><p>You can manipulate the response in whatever way you like. In the example above it is just appended to the <code>body</code> tag.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BASIC WAY OF REFERENC JS CSS FILE IN A DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>Read the <a href="https://docs.djangoproject.com/en/1.3/howto/static-files/" rel="nofollow">documentation on serving static files</a>. Essentially, you can use Django to serve these files during development, but should definitely configure your web server (e.g. Apache) to serve them directly in your production environment.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HEADER IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>Well, for lack of a better option, I solved this problem by rendering the form's individual fields instead of the whole form.</p><br/><br/><p>Then I only have to do:</p><br/><br/><pre><code>&lt;div class="fieldWrapper"&gt;<br/>    (...Field 1...)<br/>&lt;/div&gt;<br/><br/>&lt;h1&gt;My Own Header&lt;/h1&gt;<br/><br/>&lt;div class="fieldWrapper"&gt;<br/>    (...Field 2...)<br/>&lt;/div&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAY NAME IN DATETIM IN PYTHON
    </pattern>
    <template>
<![CDATA[<pre><code>import datetime<br/>now = datetime.datetime.now()<br/>print now.strftime("%A")<br/></code></pre><br/><br/><p>See the Python docs for <a href="http://docs.python.org/py3k/library/datetime.html#datetime.datetime.now" rel="nofollow">datetime.now</a>, <a href="http://docs.python.org/py3k/library/datetime.html#datetime.datetime.strftime" rel="nofollow">datetime.strftime</a> and <a href="http://docs.python.org/py3k/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow">more on strftime</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NYON DO ASYNCHRON DB COMMIT
    </pattern>
    <template>
<![CDATA[<p>Take a look at <a href="http://celeryproject.org/" rel="nofollow">Celery</a>.  It gives you asynchronous workers to offload tasks exactly like you're asking about:  sending e-mails, counting page views, etc.  It was originally designed to work only with Django, but now works in other environments too.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIB2 PYCURL IN DJANGO FETCH XML CHECK HTTP STATU CHECK HTTP CONNECT
    </pattern>
    <template>
<![CDATA[<p>Using <a href="http://www.heikkitoivonen.net/blog/2008/10/14/ssl-in-python-26/" rel="nofollow">M2Crypto</a>:</p><br/><br/><pre><code>from M2Crypto import SSL<br/>ctx = SSL.Context('sslv3')<br/>ctx.set_verify(SSL.verify_peer | SSL.verify_fail_if_no_peer_cert, depth=9)<br/>if ctx.load_verify_locations('ca.pem') != 1:<br/>   raise Exception('No CA certs')<br/><br/>c = SSL.Connection(ctx)<br/>c.connect(('www.google.com', 443)) # automatically checks cert matches host<br/>c.send('GET / \n')<br/>c.close()<br/></code></pre><br/><br/><p>Using <a href="https://gist.github.com/1347055" rel="nofollow">urllib2_ssl</a> (it goes without saying but to be explicit: use it at your own risk):</p><br/><br/><pre><code>import urllib2, urllib2_ssl<br/><br/>opener = urllib2.build_opener(urllib2_ssl.HTTPSHandler(ca_certs='ca.pem'))<br/>xml = opener.open('https://example.com/').read()<br/></code></pre><br/><br/><p>Related: <a href="http://whatschrisdoing.com/blog/2011/10/30/making-https-requests-secure-in-python/" rel="nofollow">Making HTTPS Requests secure in Python</a>.</p><br/><br/><p>Using <a href="http://curl.haxx.se/libcurl/c/curl_easy_setopt.html" rel="nofollow"><code>pycurl</code></a>:</p><br/><br/><pre><code>c = pycurl.Curl()<br/>c.setopt(pycurl.URL, "https://example.com?param1=val1&amp;param2=val2")<br/>c.setopt(pycurl.HTTPGET, 1)<br/>c.setopt(pycurl.CAINFO, 'ca.pem')<br/>c.setopt(pycurl.SSL_VERIFYPEER, 1)<br/>c.setopt(pycurl.SSL_VERIFYHOST, 2)<br/>c.setopt(pycurl.SSLVERSION,     3)    <br/>c.setopt(pycurl.NOBODY, 1)<br/>c.setopt(pycurl.NOSIGNAL, 1)<br/>c.perform()<br/>c.close()<br/></code></pre><br/><br/><p>To implement 'certificate pinning' provide different <code>'ca.pem'</code> for different domains.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO NOTIF TO INFORM A USER WHEN SOMEBODI COMMENT ON THEIR POST
    </pattern>
    <template>
<![CDATA[<p>Yes django-notifications is only designed for email notifications.</p><br/><br/><p>Here is a signal slot that you can add to your models.py and tweak to your own needs:</p><br/><br/><pre><code>from django.db import models<br/>from django.contrib.sites.models import Site<br/>from django.db.models import signals<br/>from notification import models as notification<br/><br/>def create_notice_types(app, created_models, verbosity, **kwargs):<br/>    notification.create_notice_type("new_comment", "Comment posted", "A comment has been posted")<br/>signals.post_syncdb.connect(create_notice_types, sender=notification)<br/><br/>def new_comment(sender, instance, created, **kwargs):<br/>    # remove this if-block if you want notifications for comment edit too<br/>    if not created:<br/>        return None<br/><br/>    context = {<br/>        'comment': instance,<br/>        'site': Site.objects.get_current(),<br/>    }<br/>    recipients = []<br/><br/>    # add all users who commented the same object to recipients<br/>    for comment in instance.__class__.objects.for_model(instance.content_object):<br/>        if comment.user not in recipients and comment.user != instance.user:<br/>            recipients.append(comment.user)<br/><br/>    # if the commented object is a user then notify him as well<br/>    if isinstance(instance.content_object, models.get_model('auth', 'User')):<br/>        # if he his the one who posts the comment then don't add him to recipients<br/>        if instance.content_object != instance.user and instance.content_object not in recipients:<br/>            recipients.append(instance.content_object)<br/><br/>    notification.send(recipients, 'new_comment', context)<br/><br/>signals.post_save.connect(new_comment, sender=models.get_model('comments', 'Comment'))<br/></code></pre><br/><br/><p>Now for templates, pretty easy.</p><br/><br/><p>templates/notification/new_comment/short.txt</p><br/><br/><pre><code>{{ comment.user }} commented on {{ comment.object }}<br/></code></pre><br/><br/><p>templates/notification/new_comment/notice.html</p><br/><br/><pre><code>&lt;a href="{{ comment.user.get_absolute_url }}"&gt;{{ comment.user }}&lt;/a&gt; commented &lt;a href="{{ comment.content_object.get_absolute_url }}"&gt;{{ comment.content_object }}&lt;/a&gt;<br/></code></pre><br/><br/><p>templates/notification/new_comment/full.txt</p><br/><br/><pre><code>{{ comment.user }} commented on {{ comment.content_object }}<br/><br/>Comment:<br/>{{ comment.comment }}<br/><br/>Reply on: <br/>http://{{ site.domain }}{{ comment.content_object.get_absolute_url }}<br/></code></pre><br/><br/><p>Warning: it's a very simplified, untested adaptation of our production code.</p><br/><br/><p>Here are some more information:</p><br/><br/><ul><br/><li><a href="https://github.com/jtauber/django-notification/blob/master/docs/usage.txt" rel="nofollow">documentation</a></li><br/><li><a href="http://blog.synfinity.net/?p=296" rel="nofollow">a blog post by stringfellow</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR MESSAG TO FORM.NON FIELD ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p><strong>Call full_clean()</strong>, this should initialize <code>form._errors</code>. This step is critical, if you don't do it, it won't work.</p></li><br/><li><p><strong>Make the error list</strong>, it takes a list of messages, instanciate it as such: <code>error_list = form.error_class(['your error messages'])</code></p></li><br/><li><p><strong>Assign the error list to NON_FIELD_ERRORS</strong>, you have to import <code>NON_FIELD_ERRORS</code> from <code>django.forms.forms</code>, then assign as such: <code>form._errors[NON_FIELD_ERRORS] = error_list</code></p></li><br/></ol><br/><br/><p>Here is a demonstration from a shell:</p><br/><br/><pre><code>In [1]: from bet.forms import BetForm<br/><br/>In [2]: from django.forms.forms import NON_FIELD_ERRORS<br/><br/>In [3]: form = BetForm()<br/><br/>In [4]: form.full_clean()<br/><br/>In [5]: form._errors[NON_FIELD_ERRORS] = form.error_class(['your error messages'])<br/><br/>In [6]: form.non_field_errors()<br/>Out[6]: [u'your error messages']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RANSMIT JSON DATA TO DJANGO WEBSIT
    </pattern>
    <template>
<![CDATA[<p>You can receive json through <code>request.raw_post_data</code></p><br/><br/><pre><code>data=simplejson.loads( request.raw_post_data )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENGIN REST LIBRARI PYTHON AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>I'm using django-nonrel with tastypie.  I needed to make a couple of small code changes at the time, but I think the latest versions in the repos work together.</p><br/><br/><p><a href="http://eatdev.tumblr.com/post/12076483835/tastypie-on-django-nonrel-on-app-engine" rel="nofollow">http://eatdev.tumblr.com/post/12076483835/tastypie-on-django-nonrel-on-app-engine</a></p><br/><br/><p>Because of the lack of many-to-many relations, I've been using ListProperties, and they seem to work fine with tastypie.</p><br/><br/><p>tastypie APIs are designed to match models.  If your API will be creating/getting/updating/deleting instances of your models, tastypie will require less code.</p><br/><br/><p>django-piston is very popular too, but I haven't tried it on app engine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REUS A LOGIN TEMPLAT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>It doesn't appear that you can pass arguments in the statements in<br/>  urls.py</p><br/></blockquote><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#passing-extra-options-to-view-functions">You can, actually.</a> </p><br/><br/><p>The third item in the url conf can be a dictionary of kwargs which will be passed your view function.</p><br/><br/><pre><code>(r'^my_url/$', 'login', {'redirect': admin}),<br/>(r'^my_other_url/$', 'login', {'redirect': beta}),<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RANSFORM DATA WHEN SAVE AND READ FROM DATABAS
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p><strong>Write a custom model field class</strong>, that extends CharField, you should overread <a href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field.get_prep_value" rel="nofollow">the documentation first</a> so that you have an idea of what's there,</p></li><br/><li><p>that <strong>metaclass</strong> = models.SubfieldBase is required for the custom Field to call the custom to_python method</p></li><br/><li><p><strong>Override to_python()</strong>, <a href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/" rel="nofollow">it takes a database value</a> and should return a python value, there you can replace @1 by the username of User #1 (say @Adam or @Bernarda),</p></li><br/><li><p><strong>Override get_prep_value()</strong>,  <a href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field.to_python" rel="nofollow">it takes a python value</a> and should return a value for the SQL, there you can replace @Adam by the pk of User Admin (say @1),</p></li><br/><li><p><strong>Query on mentions</strong>, for example <code>Message.objects.filter(mention=someuser)</code>, or make another field: one that contains the replaced version and one that contains the possibly out of date usernames - i don't recommend the latter</p></li><br/><li><p><strong>You could also query on content</strong>, for example <code>Message.objects.filter(content__contains='@1')</code></p></li><br/></ol><br/><br/><p><strong>Voodoo doesn't do any good in general</strong>, i would make a model method <code>get_content_display()</code> that does the replacement, and a templatetag that displays the html version of the content - since your probably want to link @Adam to his user page anyway. I would stick to this because that's <a href="http://en.wikipedia.org/wiki/KISS_principle" rel="nofollow">KISS</a>.</p><br/><br/><p><strong>CREDITS to LaundroMat</strong> for debugging this answer and fixing it (there was 2 errors and 1 inaccuracy, which he debugged and came back to report !!!). Also <strong>DO UPVOTE HIS COMMENT</strong> unless you have better way to reward him. Rock'on.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORM CAN I HAVE A BOOLEANFIELD ASSOCI TO A CHAR COLUMN IN THE DATABAS
    </pattern>
    <template>
<![CDATA[<p>You can create your own field class that act like you want by subclassing <a href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#writing-a-field-subclass">django.db.models.Field</a> and by implementing the <a href="https://docs.djangoproject.com/en/dev/howto/custom-model-fields/#django.db.models.Field.to_python">to_python</a> method e.g.</p><br/><br/><pre><code>from django.db import models<br/><br/>class MyField(models.CharField):<br/><br/>     def to_python(self, value):<br/>         if value in ('Y', '1'):<br/>             return True<br/>         elif value in ('N', '0'):<br/>             return False<br/>         else:<br/>             raise ValueError<br/></code></pre><br/><br/><p>Hope this will give you some insight :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NO MODUL NAME STATICFIL IN DJANGO 1.3.1 + PYTHON 2.6 WHAT S WRONG
    </pattern>
    <template>
<![CDATA[<p>Here are the steps I'd take to find out the problem:</p><br/><br/><ul><br/><li>verify that it's working correctly in the command-line (cmd.exe in windows) - just to remove the issues associated with Aptana. You need to do something like: C:\Path\to\Python2.6\python.exe manage.py runserver (NB: choose any management command that will check your settings.py). If this gives the same error, then you haven't got Django 1.3.1 installed in Python2.6 (you could install it, or you could set up a fresh virtualenv, see below)</li><br/><li>once you've got it working in the command line, you just have to make sure that aptana is using the correct interpreter path. You need to check that you've defined it correctly (in your global preferences (the workspace settings) -- pydev python interpreter) and then are using it in the specific project -- (check the project settings that it is using the python interpreter you just defined )</li><br/><li>NB: Django 1.3.1 can use python2.5, but not next version of django</li><br/></ul><br/><br/><p>Here is how I would avoid this in future:</p><br/><br/><ul><br/><li>use virtualenv[1] to avoid being dependent on the arbitrary nature of your installation history (once you've installed virtualenv in ANY version of python you can then specify which python when you set up the virtualenv: virtualenv -p C:\Path\to\Python2.6\python.exe ). </li><br/><li>use virtualenv --no-site-packages to ensure you have no dependencies locally</li><br/><li>use pip[2] to install all your python packages (problems may occur with packages with binary content - use easy_install for those)</li><br/><li>use pip freeze > requirements.txt to record your dependencies (and add this file into your source code control)</li><br/></ul><br/><br/><p>[1] <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">http://pypi.python.org/pypi/virtualenv</a></p><br/><br/><p>[2] <a href="http://pypi.python.org/pypi/pip" rel="nofollow">http://pypi.python.org/pypi/pip</a></p><br/><br/><p>NB pip and easy_install are automatically installed into your new virtualenv</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON S SPEED ENOUGH OR SHOULD I USE PYREX
    </pattern>
    <template>
<![CDATA[<p>Lots of people <em>do</em> use Python to implement web services (hence Django existing at all), and find it low enough latency for their purposes. So in one sense, the answer is a trivial "yes".</p><br/><br/><p>To answer properly requires lots more information and <em>study</em>, and isn't really appropriate for SO's format. For starters, you need to know how fast is "fast enough" (and even for that, you need to figure out how much latency there's going to be due to other factors, such as network latency). It also obviously depends on what your implementation actually is; if all your program does is fetch records from a database, then the code execution will probably be dwarfed by database and network latency whether you use pure Python or C. OTOH, if you're solving arbitrarily large NP-hard computational problems, Python might be starting to look a little less attractive. OTOOH, if you're solving really tricky to implement computational problems, Python will probably dramatically decrease the time it takes you to have your service at all, and a slow service is usually preferable to a non-existent one.</p><br/><br/><p>With no actual concrete knowledge, the existence of other web services written in Python makes me intuit that you'll probably be fine in Python, and you should just go and do it and then see if there are any performance bottlenecks that would benefit from being Pyrexed. There's the usual "premature optimisation is the root of all evil" line to consider; before you've even written any code is WAY too early to be thinking about optimisation. As long as it's not blindingly obvious that your approach can never be fast enough, go with the simplest implementation and speed it up later.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX POST IN DJANGO 1.0 WITHOUT CROSS SIT REQUEST FORGERI ERROR
    </pattern>
    <template>
<![CDATA[<p>Yuji's suggestion pointed me in the right direction.</p><br/><br/><p>I was doing the AJAX POST from a view which was a result of a GET so the Django middleware did not generate any csrf token.</p><br/><br/><p>I used the code found in the csrf middleware (/usr/lib/python2.5/site-packages/django/contrib/csrf/middleware.py) to generate a csrf token which I send with the GET context.  Now the AJAX POST works fine since the token is present.</p><br/><br/><p>To create the csrf token:</p><br/><br/><pre><code>def csrf_token_create(request):<br/><br/>    from django.contrib.csrf.middleware import _make_token    <br/><br/>    try:<br/>        session_id = request.COOKIES[settings.SESSION_COOKIE_NAME]<br/>    except KeyError:<br/>        # No session, no check required<br/>        return None<br/><br/>    csrf_token = _make_token(session_id)<br/>    return csrf_token<br/></code></pre><br/><br/><p>In the view context:</p><br/><br/><pre><code>csrf_token = csrf_token_create(request)<br/>return render_to_response('view.html', {'csrfmiddlewaretoken': csrf_token})<br/></code></pre><br/><br/><p>Add a hidden input for csrfmiddlewaretoken in the html template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALID ( ) RETURN TRUE BUT MODELFORM WO N T BE SAVE
    </pattern>
    <template>
<![CDATA[<p>You can't simply upload files in ajax like this. Furthermore, I believe $('#id_HeadImage').val() contains only the file name .</p><br/><br/><p>Please ref <a href="http://stackoverflow.com/questions/166221/how-can-i-upload-files-asynchronously-with-jquery">How can I upload files asynchronously with jQuery?</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAVE INSERT DATA INTO TABL TAKE VALU FROM FORM
    </pattern>
    <template>
<![CDATA[<p>have a look at <a href="https://docs.djangoproject.com/en/dev/topics/forms/modelforms/#modelform">model forms</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DID I GET ERROR FOR PYTHON MANAGE.PI SYNCDB ( INDENTATIONERROR UNEXPECT INDENT )
    </pattern>
    <template>
<![CDATA[<p>Did you mix tabs and spaces in the file? That is the most common cause of such an error.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASSWORD TEXT BOX FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>One way if you have a forms.py in your app is to specify the widgets in your class Meta e.g.</p><br/><br/><pre><code>from django.forms import ModelForm, PasswordInput<br/>class UserForm(ModelForm):<br/><br/>    class Meta:<br/>        model = Users<br/><br/>        widgets = {<br/>            'password' : PasswordInput(),<br/>        }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FORM IN A GET REQUEST HOW
    </pattern>
    <template>
<![CDATA[<p>Your problem is that <code>super(SearchFormView, self).get(request, *args, **kwargs)</code> renders its own form and own context. It's only a 3 line view function, so you should really be overriding what you need to change its behavior.</p><br/><br/><pre><code>   def get(self, request, *args, **kwargs):<br/>        form = SearchForm(self.request.GET or None)<br/>        if form.is_valid():<br/>            self.mystuff = Stuff.objects.filter(title__icontains=form.cleaned_data['query'])[:10]<br/><br/>        return self.render_to_response(self.get_context_data(form=form))<br/></code></pre><br/><br/><hr><br/><br/><p>Update: alternate idea if you'd like to continue using the super call</p><br/><br/><pre><code>def get(self, request, *args, **kwargs):<br/>     self.form = SearchForm(self.request.GET or None)<br/>     if self.form.is_valid():<br/>         self.mystuff = Stuff.objects.filter(title__icontains=form.cleaned_data['query'])[:10]<br/><br/>     return super(SearchFormView, self).get(request, *args, **kwargs)<br/><br/><br/>def get_form(self, form_class):<br/>    """<br/>    Returns an instance of the form to be used in this view.<br/>    """<br/>    return getattr(self, 'form', None) or form_class(**self.get_form_kwargs())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUIR DECOR ON AJAX VIEW TO RETURN 401 INSTEAD OF 302
    </pattern>
    <template>
<![CDATA[<p>That's a pretty good attempt. Here's a couple of problems I spotted:</p><br/><br/><ol><br/><li>Your <code>_decorator</code> function should return <code>_wrapped_view</code>.</li><br/><li>The indentation for your <code>if function is None</code> block is a bit off -- the <code>login_required_ajax</code> function needs to return the decorated function.</li><br/></ol><br/><br/><p>Here's the decorator with those changes made:</p><br/><br/><pre><code>def login_required_ajax(function=None,redirect_field_name=None):<br/>    """<br/>    Just make sure the user is authenticated to access a certain ajax view<br/><br/>    Otherwise return a HttpResponse 401 - authentication required<br/>    instead of the 302 redirect of the original Django decorator<br/>    """<br/>    def _decorator(view_func):<br/>        def _wrapped_view(request, *args, **kwargs):<br/>            if request.user.is_authenticated():<br/>                return view_func(request, *args, **kwargs)<br/>            else:<br/>                return HttpResponse(status=401)<br/>        return _wrapped_view<br/><br/>    if function is None:<br/>        return _decorator<br/>    else:<br/>        return _decorator(function)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT BE NON SUBSCRIPT LEAD ME TO WRITE REDUND CODE
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.python.org/library/functions.html#setattr">setattr</a> is what you're looking for.</p><br/><br/><p>In your case you could do something like this:</p><br/><br/><pre><code>for attr, value in info.items():<br/>    setattr(me, attr, value)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVER GONE AWAY ( ERROR # 2006 )
    </pattern>
    <template>
<![CDATA[<p>So at various sites I found this error occurs when a connection is open for a long time. I ignored this because I thought this wasn't applicable to my situation. After much deliberation I rewrote code to automatically reconnect when this error occurred and then retry, but it didn't feel <em>right</em>. Then I discovered that my code <em>did</em> keep an open connection for a long time, without it being necessary per se. The object(s) I used for database-access were instantiated at various module levels, so I guess they were created only when I restarted apache. No wonder the connection went a way a few days later.. </p><br/><br/><p>So now I create the database objects only inside the functions needing them and haven't had a problem with error 2006 since :D. The problem was between chair and keyboard all along..</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT NAME IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>Yes, you can use <code>as</code> keyword.</p><br/><br/><pre><code>import my_module as some_other_name<br/>from suds.client import Client as Spam<br/></code></pre><br/><br/><p>It's for exactly this purpose.  This is explained in the docs here:</p><br/><br/><p><a href="http://docs.python.org/reference/simple_stmts.html#import">http://docs.python.org/reference/simple_stmts.html#import</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HEROKU LOCALE.GETDEFAULTLOCAL ( ) IS RETURN ( NONE NONE ) BREAK DJANGO CREATESUPERUS HOW TO FIX
    </pattern>
    <template>
<![CDATA[<p>To answer my own question: it turns out this can be fixed by the setting a heroku configuration variable, which results in an environment variable that python can pick up, which returns usable values from locale.getdefaultlocale(). </p><br/><br/><p>In my case the heroku setting I used was:</p><br/><br/><pre><code>heroku config:add LANG=en_US.UTF-8<br/></code></pre><br/><br/><p>(Of course other encoding and especially language values might make sense for others.)</p><br/><br/><p>It fixed the createsuperuser issue and so far so good on everything else. (Other reports suggest users doing a syncdb and choosing to create a superuser then have also hit this same error on some systems.)</p><br/><br/><p>Note that any such change triggers a restart of your instance(s). </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS BEHAVIOUR TO SECOND CLASS ( TWITTER BOOTSTRAP )
    </pattern>
    <template>
<![CDATA[<p>If you are hosting your own copy of Twitter Bootstrap (rather than hot-linking from Github) then you could change the Bootstrap <code>.active</code> class selector to </p><br/><br/><pre><code>.active, .selected {<br/>    ...<br/>}<br/></code></pre><br/><br/><p>Otherwise, another option could be to use <a href="http://lesscss.org/" rel="nofollow">LESS CSS</a>. This can either be run client or server side and supports the type of inheritance you are looking for</p><br/><br/><pre><code>.selected {<br/>    .active;<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL JSON OBJECT IN AN AJAX REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I would initiate an empty list, loop through the notices and append a dict to your list containing all of the required attributes.  For example, your <code>new_notices</code> list may look like this:</p><br/><br/><pre><code>[{'absolute_url': 'blah', 'url_name': 'blah', 'message': 'blah', 'type': 'blah'},<br/> {'absolute_url': 'foo', 'url_name': 'foo', 'message': 'foo', 'type': 'foo'}]<br/></code></pre><br/><br/><p>Once you have created a list for each set of notices (old and new), you can send them:</p><br/><br/><pre><code>from django.utils import simplejson<br/>from django.http import HttpResponse<br/>...<br/>json = simplejson.dumps({'old': old_notices, 'new': new_notices})<br/>return HttpResponse(json, mimetype='text/json')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON VALID JSON
    </pattern>
    <template>
<![CDATA[<p>I just instantiate a model object from the json data and call full_clean() on the model to validate: <a href="https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.full_clean" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.full_clean</a></p><br/><br/><pre><code>m = myModel(**jsondata)<br/>m.full_clean()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC USER ID TO USERNAM IN DJANGO JSON
    </pattern>
    <template>
<![CDATA[<p>You might want to look into <a href="https://docs.djangoproject.com/en/dev/topics/serialization/#natural-keys" rel="nofollow">Natural Keys</a>. Natural keys allow you to specify what foreign key fields are serialized to. By constructing a primary key for your user, you can have the username in the serialization, instead of the ID.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENV NGINX + UWSGI IMPORT MODUL WSGI ERROR
    </pattern>
    <template>
<![CDATA[<p>I updated wsgi.py to look like this:<br/>    import os<br/>    import sys<br/>    import site</p><br/><br/><pre><code>site.addsitedir(os.path.join('/home/ubuntu/ve','project/lib/python2.6/site-packages'))<br/>sys.path.append(os.path.abspath(os.path.dirname(__file__)))<br/>sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../../../'))<br/>sys.path.append(os.path.join(os.path.realpath(os.path.dirname(__file__)), '../../'))<br/><br/>os.environ['DJANGO_SETTINGS_MODULE'] = 'project.configs.staging.settings'<br/><br/>import django.core.handlers.wsgi<br/>application = django.core.handlers.wsgi.WSGIHandler()<br/></code></pre><br/><br/><p>My uwsgi.conf file now looks like this:</p><br/><br/><pre><code># file: /etc/init/uwsgi.conf<br/>description "uWSGI starter"<br/><br/>start on (local-filesystems and runlevel [2345])<br/>stop on runlevel [016]<br/><br/>respawn<br/><br/># home - is the path to our virtualenv directory<br/># pythonpath - the path to our django application<br/># module - the wsgi handler python script<br/><br/>exec /home/ubuntu/ve/project/bin/uwsgi \<br/>--uid ubuntu \<br/>--pythonpath /home/ubuntu/django-projects/project/project/configs/staging \<br/>-H /home/ubuntu/ve/project \<br/>--socket /tmp/uwsgi.sock \<br/>--chmod-socket 644 \<br/>--module wsgi \<br/>--logdate \<br/>--optimize 2 \<br/>--processes 2 \<br/>--master \<br/>--logto /home/ubuntu/logs/project/uwsgi.log<br/></code></pre><br/><br/><p>And my nginx site-available file looks like this:</p><br/><br/><pre><code># file: /etc/nginx/sites-available/yourdomain.com<br/># nginx configuration for project.maumercado.com<br/><br/>server {<br/>        listen 80;<br/>        charset utf-8;<br/>        server_name project.maumercado.com;<br/>        access_log /home/ubuntu/logs/project/nginx/access.log;<br/>        error_log /home/ubuntu/logs/project/nginx/error.log;<br/><br/>        location ^~ /cache/ {<br/>                root /home/ubuntu/django-projects/project/project/media;<br/>                expires max;<br/>        }<br/><br/>        location / {<br/>                uwsgi_pass unix:/tmp/uwsgi.sock;<br/>                include /etc/nginx/uwsgi_params;<br/>        }<br/>}<br/></code></pre><br/><br/><p>And its working perfect now, I had some problems with the styles because of strange characters being used like ñ in the css files.</p><br/><br/><p>Now I would like to know what should I do when I need to run more projects in the same server with uwsgi?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC FILE IMAG URL PATH BREAK EXCEPT FOR MAIN PAGE TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I think that in the second page, <code>{{ STATIC_URL }}</code> <strong>is not defined</strong>. Thus, src ends up with <code>images/gcs_banner.jpg</code>. Which is a <strong>relative url because it's not prefixed with a slash</strong>. It is then converted to a absolute path using the current absolute url: <strong>/2ndpage/images/gcs_banner.jpg</strong>.</p><br/><br/><p><code>{{ STATIC_URL }}</code> is probably set by a context processor - at least that how it works in my projects. <strong><a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.RequestContext" rel="nofollow">Context processors are actually a feature from RequestContext</a></strong>. When a view returns response <strong>without RequestContext then the context processors are not run</strong>, e.g.:</p><br/><br/><pre><code>from django import shortcuts <br/># ....<br/>    return shortcuts.render_to_response(template_name, context)<br/></code></pre><br/><br/><p>This is an example of <strong>explicit usage of RequestContext</strong> with <a href="https://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render-to-response" rel="nofollow">render_to_response()</a>:</p><br/><br/><pre><code>from django import shortcuts <br/>from django import template<br/># ....<br/>    return shortcuts.render_to_response(template_name, context, <br/>        context_instance=template.RequestContext(request))<br/></code></pre><br/><br/><p>That said, Django 1.3 provides a better shortcut with <strong>implicit usage of RequestContext</strong>, <a href="https://docs.djangoproject.com/en/dev/topics/http/shortcuts/#render" rel="nofollow">render()</a>:</p><br/><br/><pre><code>from django import shortcuts <br/># ....<br/>    return shortcuts.render(request, template_name, context)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO MYSQL STRANG ERROR # 1064
    </pattern>
    <template>
<![CDATA[<p><code>CHARACTER</code> is a <a href="http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html">reserved word in mySQL</a>. I'm betting that is the reason.</p><br/><br/><p>Use either a different column name (preferred), or use backticks:</p><br/><br/><pre><code> 'CHARACTER' TEXT<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV LESSCSS STYLESHEET
    </pattern>
    <template>
<![CDATA[<p>Edit I was actually serving my less files from a different server and You cannot access data from another server with an XMLHttpRequest.</p><br/><br/><p>I switched the file over to the same server and it worked fine with the less extension.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ACCESS LOG IN USER WHEN SPECIFI GENER VIEW IN URLPATTERN
    </pattern>
    <template>
<![CDATA[<p>You can't filter on the user in your <code>urls.py</code>, because you don't know the user when the urls are loaded.</p><br/><br/><p>Instead, subclass <code>ListView</code> and override the <code>get_queryset</code> method to filter on the logged in user.</p><br/><br/><pre><code>class PendingApplicationView(ListView):<br/>    def get_queryset(self):<br/>        return Application.objects.filter(status='IP', principle_investigator=self.request.user)<br/><br/># url pattern<br/>url(r'^application/pending/$', PendingApplicationView.as_view()),<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HEROKU EQUIVAL FOR DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>Just to answer this for future reference, Heroku supports python and Django. See <a href="http://devcenter.heroku.com/articles/cedar#supported_languages_and_frameworks">here</a> for documentation on what languages is supported by Heroku.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RELAT KEY OF THE SAME MODEL
    </pattern>
    <template>
<![CDATA[<p>It is common to add a <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey" rel="nofollow">foreign key to self</a> as such:</p><br/><br/><pre><code>class Item(models.Model):<br/>    parent = models.ForeignKey('self')<br/></code></pre><br/><br/><p>You may specify a <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.ForeignKey.related_name" rel="nofollow">related name</a> as such:</p><br/><br/><pre><code>class Item(models.Model):<br/>    parent = models.ForeignKey('self', related_name='children')<br/></code></pre><br/><br/><p>Because an Item may not have a parent, don't forget null=True and blank=True as such:</p><br/><br/><pre><code>class Item(models.Model):<br/>    parent = models.ForeignKey('self', related_name='children', null=True, blank=True)<br/></code></pre><br/><br/><p>Then you will be able to query children as such:</p><br/><br/><pre><code>item.children<br/></code></pre><br/><br/><p>You might as well use <a href="https://github.com/django-mptt/django-mptt" rel="nofollow">django-mptt</a> and benefit of some optimization and extra tree features:</p><br/><br/><pre><code>from mptt.models import MPTTModel, TreeForeignKey<br/><br/>class Item(MPTTModel):<br/>    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI ERROR NONETYP OBJECT HA NO ATTRIBUT CSRF EXEMPT
    </pattern>
    <template>
<![CDATA[<p>Your <code>save_calendar</code> view function isn't returning anything, which in Python is the same as returning <code>None</code>.  The decorator tries to set an attribute on the returned response, and <code>None</code> can't be modified that way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON IN SERVER RUN CENTOS WHM
    </pattern>
    <template>
<![CDATA[<p>You have to do a <strong>parallel</strong> install of the new Python. </p><br/><br/><p>If you try and update the default Python it will break your system completely.</p><br/><br/><p>The simplest thing is to <a href="http://stackoverflow.com/questions/1465036/install-python-2-6-in-centos">install a newer version using one of the many RPMs</a> that people have built to solve just this problem.</p><br/><br/><p>Whatever you do, <strong>do not</strong> try and install it from source.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PRIMARI KEY IN DJANGO DUMPDATA WITH NATUR KEY
    </pattern>
    <template>
<![CDATA[<p>The problem with <code>json</code> is that you can't omit the <code>pk</code> field since it will be required upon loading of the fixture data again. If not existing, json will fail with</p><br/><br/><pre><code>$ python manage.py loaddata some_data.json<br/>[...]<br/>File ".../django/core/serializers/python.py", line 85, in Deserializer<br/>data = {Model._meta.pk.attname : Model._meta.pk.to_python(d["pk"])}<br/>KeyError: 'pk'<br/></code></pre><br/><br/><p>As pointed out in the answer to <a href="http://stackoverflow.com/questions/1499898/django-create-fixtures-without-specifying-a-primary-key">this question</a>, you can use <code>yaml</code> or <code>xml</code> if you really want to omit the <code>pk</code> attribute <em>OR</em> just replace the primary key value with <code>null</code>.</p><br/><br/><pre><code>import re<br/>from django.core import serializers<br/><br/>some_objects = MyClass.objects.all()<br/>s = serializers.serialize('json', some_objects, use_natural_keys=True)<br/># Replace id values with null - adjust the regex to your needs<br/>s = re.sub('"pk": [0-9]{1,5}', '"pk": null', s)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT GET MANY TO MANI VALU IN FORMSET
    </pattern>
    <template>
<![CDATA[<p>You can access the model instance in an edit form as such:</p><br/><br/><pre><code>&lt;td&gt;<br/>    {% if form.instance.pk %}{# if this is the form of an existing book #}<br/>        {% for author in form.instance.authors.all %}<br/>            {# then you can iterate over the authors of the book #}<br/>            {{ author.first_name }}<br/>        {% endfor %}<br/>    {% endif %}<br/>&lt;/td&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PER DOMAIN URLCONF
    </pattern>
    <template>
<![CDATA[<p>There are many ways, here are some which can work for you depending on your specific constraints.</p><br/><br/><ol><br/><li><p><strong>Light hack</strong>: blacklist or whitelist urls in the HTTP server configuration for each domain</p></li><br/><li><p><strong>Monkey patch</strong> the url router to check for the <a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META" rel="nofollow">request['META']['HTTP_HOST']</a>, because it's definitively not available at the time urls are being configured</p></li><br/><li><p><strong>2 Django instances</strong>: make 2 settings files:</p><br/><br/><ul><br/><li><p>Make one urls script per site,</p></li><br/><li><p>Make one settings per site as such</p></li><br/><li><p>Run one Django instance per domain</p></li><br/></ul></li><br/></ol><br/><br/><p>Example settings files:</p><br/><br/><p><strong>management_settings.py</strong></p><br/><br/><pre><code>from settings import *<br/>ROOT_URLCONF='management_urls.py'<br/></code></pre><br/><br/><p><strong>public_settings.py</strong></p><br/><br/><pre><code>from settings import *<br/>ROOT_URLCONF='public_urls.py'<br/></code></pre><br/><br/><p>And run one Django server on each. Don't forget to use the --settings switch for management commands as such:</p><br/><br/><pre><code># run public<br/>./manage.py runserver --settings public_settings<br/># run management<br/>./manage.py runserver --settings management_settings<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Actually, <strong>you are not supposed to modify the code of an external app</strong>, unless you have a really good reason to - which apparently this case doesn't. Because that's called a fork and requires more maintenance: they do an update, you'd have to reflect the updates.</p><br/><br/><p>You should <strong>always try to reuse the external app without touching its code</strong>. In this case, it is perfectly possible to extend the registration form without touching their code. That said, it requires a little voodoo. Note that this works for any sane app:</p><br/><br/><ol><br/><li><p><strong>Check for a form_class argument in the view signature</strong>, the view in question has such a signature: <code>request(request, success_url=None, form_class=RegistrationForm, profile_callback=None, template_name='registration/registration_form.html', extra_context=None)</code>. That's pretty cool, it means that you can reuse the view with different success urls, profile callbacks, templates, extra context and most importantly in your case: form_class.</p></li><br/><li><p><strong>Subclass the form</strong>, create another form which inherits from RegistrationForm</p></li><br/><li><p><strong>Override the URL to pass your form class</strong>, create another url which passes your form class</p></li><br/></ol><br/><br/><p>Create a forms.py in your project directory:</p><br/><br/><pre><code>from django import forms<br/><br/>from registration.forms import RegistrationForm<br/><br/>class ProjectSpecificRegistrationForm(RegistrationForm):<br/>    keywords = forms.ModelMultipleChoiceField(queryset=Keyword.objects.all())<br/>    first_name =forms.CharField(widget=forms.TextInput(attrs=attrs_dict),label=_(u'First Name')) <br/>    last_name =forms.CharField(widget=forms.TextInput(attrs=attrs_dict),label=_(u'Last Name'))<br/></code></pre><br/><br/><p>Then, in <strong>your</strong> urls.py, you should have something like:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>    url(r'registration/', include('registration.urls'),<br/>)<br/></code></pre><br/><br/><p>Override the url named "registration_register" with absolute path <code>/registration/register/</code> url as such:</p><br/><br/><pre><code>import forms<br/><br/>urlpatterns = patterns('',<br/>    url(r'^registration/register/$', 'views.registration.register', {<br/>        'form_class': forms.ProjectSpecificRegistrationForm}, 'registration_register'),<br/>    url(r'^registration/', include('registration.urls'),<br/>)<br/></code></pre><br/><br/><p><strong>What's going on here</strong></p><br/><br/><p>The <a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#url" rel="nofollow">url() function</a> has such a signature: <code>url(regex, view, kwargs=None, name=None, prefix='')</code>. In the above definition, we are passing a dict with form_class to kwargs. So the view will be called with form_class=your form class. It's quite interesting really because you could also add extra context like:</p><br/><br/><pre><code>    url(r'^registration/register/$', 'views.registration.register', {<br/>        'form_class': forms.ProjectSpecificRegistrationForm,<br/>        # provided that you imported SomeModel<br/>        'extra_context':  {'models': SomeModel.objects.all()}}, 'registration_register'),<br/></code></pre><br/><br/><p><strong>Anyway next time you open <code>/registration/register/</code>, it will use your url, which passes your form class.</strong></p><br/><br/><p>Note that you could also create a an app like *project_specific* where you'd put all the code that is really specific to your project and has no reason to be reused.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRAIL SLASH RESET PAGE TITL
    </pattern>
    <template>
<![CDATA[<p>I think your consultant is correct. One URL = one resource. Having two urls on one resource is quite dirty anyway. This is why Django features automatic redirect from non trailing slash to urls with trailing slashes. Under <a href="https://docs.djangoproject.com/en/dev/ref/settings/#append-slash" rel="nofollow">certain conditions</a>.</p><br/><br/><p>I'm pretty sure <strong>your url definition regexp for /services/ lacks the trailing slash</strong>. Anyway, you should use <strong>trailing slashes only</strong>:</p><br/><br/><ol><br/><li><p><strong>Ensure <a href="https://docs.djangoproject.com/en/dev/ref/settings/#append-slash" rel="nofollow">APPEND_SLASH</a> is set to True</strong>: <code>from django.conf import settings; print settings.APPEND_SLASH</code></p></li><br/><li><p><strong>Ensure that all your url regexps have the trailing slash</strong>, e.g. <code>url(r'foo' ...)</code> is <strong>bad</strong>, and <code>url(r'foo/' ...</code>) passes <strong>barely</strong> because of possible conflicts and <code>url(r'foo/$' ...</code>) is <strong>better</strong></p></li><br/><li><p><strong>Ensure all MetaInfo objects have url with trailing slash</strong>, e.g. <code>MetaInfo.objects.exclude(url__endswith='/')</code> should return MetaInfo without trailing slash in url</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH TWIST OR NODE.J
    </pattern>
    <template>
<![CDATA[<p>If you're already using Python, you're probably better off sticking with a Python library, especially when there are so many powerful asynchronous Python libraries. Node.js is fine, but switching between Python and Javascript is unnecessary. </p><br/><br/><p>Anyway, your question is very very vague. You can absolutely use Twisted and it will probably do what you want just fine, as long as you learn the API well enough. Other asynchronous frameworks include <a href="http://www.gevent.org" rel="nofollow">gevent</a> and a web server called <a href="http://www.tornadoweb.org" rel="nofollow">Tornado</a>.</p><br/><br/><p>There's also <a href="http://celeryproject.org/" rel="nofollow">Celery</a> which is used specifically for asynchronous processing of queues. It may or may not be helpful to what you want.</p><br/><br/><p>I recommend you do a lot of research, look at the documentation of the above libraries, and decide what'll fit your project best. If you have more specific questions you can ask the respective IRC channels of the library, or post a clearer question here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.3 CORRECT WAY TO DEFIN OPTION PARAMET FOR A CLASS BASE VIEW
    </pattern>
    <template>
<![CDATA[<p>The url arguments are stored in <code>self.args</code> and <code>self.kwargs</code>. There are some examples in the <a href="https://docs.djangoproject.com/en/dev/topics/class-based-views/#dynamic-filtering" rel="nofollow">dynamic filtering</a> section of the generic class based views docs.</p><br/><br/><p>You could pass default arguments by <a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#passing-extra-options-to-include" rel="nofollow">including extra options in your url pattern</a>, or just set a default in your view when you fetch the value from <code>self.kwargs</code>.</p><br/><br/><pre><code>my_value = self.kwargs.get('key', 'default_value')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REAL TIME APP WITH PYTHON
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.its.caltech.edu/~astraw/publications/realtime_computing.html" rel="nofollow">http://www.its.caltech.edu/~astraw/publications/realtime_computing.html</a></p><br/><br/><p>Enjoy.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHERRYPI S EQUIVAL TO DJANGO S MESSAG FRAMEWORK ( MESSAGEMIDDLEWAR )
    </pattern>
    <template>
<![CDATA[<p>Though CherryPy doesn't seem to have an out-of-box message option, this seems like a good snippet for it: <a href="http://www.mail-archive.com/turbogears@googlegroups.com/msg27568.html" rel="nofollow">Message Flash with view and HTML in CherryPy</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESIGN WAY TO HIDE PK ID FROM URL
    </pattern>
    <template>
<![CDATA[<p>You need to have <em>some</em> kind of identifier in the URL, and this identifier:</p><br/><br/><ol><br/><li>must be unique (no two objects can have the same id)</li><br/><li>must be permanent (the id for an object can never change)</li><br/></ol><br/><br/><p>so there aren't all that many options, and the object's primary key is the best choice. If for some reason you can't use that (why not?) you can encode or obfuscate it: see <a href="http://stackoverflow.com/q/9877524/68063">this question</a> and its answers for some ideas about how to do that.</p><br/><br/><p>Stack Overflow's own URL design is worth a look. You can reach this question via any URL of the form</p><br/><br/><blockquote><br/>  <p><a href="http://stackoverflow.com/questions/9897050/any-text-you-like-here!"><code>http://stackoverflow.com/questions/9897050/any-text-you-like-here!</code></a></p><br/></blockquote><br/><br/><p>This allows the URL to contain keywords from the question's title (for search engines) while also being able to change when the title changes without breaking old links.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OVER DATE USE A STRING
    </pattern>
    <template>
<![CDATA[<p>I'm not sure what you would expect icontains to do when filtering over date data, so you may want to rethink that or clarify what your are expecting.</p><br/><br/><p>Overall you are trying to query based on the datefield.  You have 2 choices.  You either need to convert your sting into a date (or datetime) object, or you need to format your string as "yyyy-mm-dd".</p><br/><br/><p>-- edit --</p><br/><br/><p>Since it looks like you're really trying to use strings to search for dates here is some sort of clarification.</p><br/><br/><p>What you're looking to do is going to be beyond hard to do.  I'd go with borderline impossible.  Django is translating your queries into SQL and querying your database.  Just because the ORM is there doesn't make it able to do things not possible in SQL (in fact the ORM greatly limits what you can do).  However, you have several choices:</p><br/><br/><ol><br/><li>Write python to parse the strings and come up with date objects to match them.  This may be quite difficult.  You will then want to use <code>Q</code> objects from <code>django.db.models</code> to construct a complex OR query.  This will likely be slow when it gets to the database on any reasonable number or records.</li><br/><li>Figure out what the SQL would look like to generate what you're trying to do.  This isn't going to be easy IMO as there is so much variance and the underlying representation of dates in your database isn't going to be a string so you're really going to be in for it.  This is essentially manually doing the same thing that #1 does, except manually.  Once you've constructed the SQL run a <code>raw</code> query.</li><br/><li>Convert to using django-haystack to use a full text search engine.  This is a lot of infrastructure and has a lot of potential negatives from having to rewrite your code to anticipate search engine results.  Depending on the backend you choose to plug into haystack it may be smart enough to be able to understand the strings entered and correctly search...or you may have to manually generate a ton of string representations to be in your search index so that they can be properly queried.  Overall this type of thing is what full text search engines excel at because they understand language.  Databases do not, they understand data and they don't get to be fuzzy.</li><br/></ol><br/><br/><p>More or less what you're asking for is quite hard.  The most viable option in my opinion is to convert to using haystack.  I can't emphasize enough how many drawbacks there are to that.  You're dealing with search engine results instead of model instances.  In some circumstances that isn't an issue, but depending on the requirements, that could be quite painful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EQUIVAL OR RAIL X.DAYS.FROM NOW
    </pattern>
    <template>
<![CDATA[<p>You can use <a href="http://docs.python.org/library/datetime.html#datetime.datetime.now" rel="nofollow"><code>datetime.datetime.now</code></a> to get the current date and time and <a href="http://docs.python.org/library/datetime.html#datetime.timedelta" rel="nofollow"><code>datetime.timedelta</code></a> to create a datetime object offset from the current time however you like. For example:</p><br/><br/><pre><code>from datetime import datetime, timedelta<br/><br/>now = datetime.now()<br/>seven_days_from_now = now + timedelta(days=7)<br/>print now, seven_days_from_now<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL IOERROR CAN NOT IDENTIFI IMAG FILE
    </pattern>
    <template>
<![CDATA[<p>As <a href="http://stackoverflow.com/questions/9950745/django-pil-ioerror-cannot-identify-image-file#comment12709667_9950745">ilvar asks</a> in the comments, what kind of object is <code>image</code>? I'm going to assume for the purposes of this answer that it's the <code>file</code> property of a Django <code>ImageField</code> that comes from a file uploaded by a remote user.</p><br/><br/><p>After a file upload, the object you get in the <code>ImageField.file</code> property is a <code>TemporaryUploadedFile</code> object that might represent <a href="https://docs.djangoproject.com/en/1.4/topics/http/file-uploads/#where-uploaded-data-is-stored" rel="nofollow">a file on disk or in memory</a>, depending on how large the upload was. This object behaves much like a normal <a href="http://docs.python.org/library/stdtypes.html#file-objects" rel="nofollow">Python file object</a>, so after you have read it once (to make the first thumbnail), you have reached the end of the file, so that when you try to read it again (to make the second thumbnail), there's nothing there, hence the <code>IOError</code>. To make a second thumbnail, you need to <a href="http://docs.python.org/library/stdtypes.html#file.seek" rel="nofollow">seek</a> back to the beginning of the file. So you could add the line</p><br/><br/><pre><code>image.seek(0)<br/></code></pre><br/><br/><p>to the start of your <code>image_resizer</code> function.</p><br/><br/><p><strong>But</strong> this is unnecessary! You have this problem because you are asking the Python Imaging Library to re-read the image for each new thumbnail you want to create. This is a waste of time: better to read the image just once and then create all the thumbnails you want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV ADMIN STATIC FILE WITH DJANGO.CONTRIB.STATICFIL IN DJANGO 1.4 ( USE ONE APACH SERVER )
    </pattern>
    <template>
<![CDATA[<p>Thanks Daniel Roseman for the explanation and giving me the chance to learn it on my own (and now I won't forget!) :-).</p><br/><br/><p>Initially I was really confused and I didn't know you had to first <em>collect</em> the static files, then tell Apache to <em>serve</em> it. I thought simply using <code>STATICFILES_DIRS</code> and including the <code>static</code> app in <code>settings.py</code> was good enough.</p><br/><br/><p>So here is how I did it (and please let me know if I could have done it better):</p><br/><br/><p>In <code>settings.py</code></p><br/><br/><pre><code>STATIC_ROOT = '/var/www/localhost/htdocs/mysite/static/'<br/>STATIC_URL = '/static/' # default<br/></code></pre><br/><br/><p>It seems Django already know where to collect the admin files, you don't need to specify anything in <code>STATICFILES_DIRS</code> unless you need to serve your own custom files (which I don't and thus I had no prior experience with static files in Django).</p><br/><br/><p>Then at <code>/var/www/localhost/htdocs/mysite/</code> type <code>python manage.py collectstatic -l</code>. The <code>-l</code> means to create a symbolic link to all found static files instead of copying it over (saves some space).</p><br/><br/><p>Next edit the Apache config file (usually <code>httpd.conf</code>) and add the <code>STATIC_URL</code> information. My config file just for Django looks like this:</p><br/><br/><pre><code>Alias /static/ /var/www/localhost/htdocs/mysite/static/<br/>#In the form of...<br/>#Alias STATIC_URL STATIC_ROOT<br/><br/>&lt;Directory /var/www/localhost/htdocs/mysite/static&gt;<br/>    Order deny,allow<br/>    Allow from all<br/>&lt;/Directory&gt;<br/><br/>WSGIScriptAlias / /var/www/localhost/htdocs/mysite/mysite/wsgi.py<br/>WSGIPythonPath /var/www/localhost/htdocs/mysite<br/><br/>&lt;Directory /var/www/localhost/htdocs/mysite/mysite&gt;<br/>    &lt;Files wsgi.py&gt;<br/>        Order deny,allow<br/>        Allow from all<br/>    &lt;/Files&gt;<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>Then restart Apache and done!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GOOGL APP ENGIN HOW TO CHECK IF A MODEL IS EMPTI OR NOT
    </pattern>
    <template>
<![CDATA[<p>you could use count()</p><br/><br/><pre><code> customers = Customer.all()  <br/> if customers.count(1):<br/>    # do something<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPLIT MODEL IN DIFF RENT MODELS.PI FILE GIVE ME IMPORT LOOP
    </pattern>
    <template>
<![CDATA[<pre><code>class WebSite(models.Model):<br/>    ...<br/>    maintenance_page = ForeignKey('app_name.Page')<br/><br/>class Page(models.Model):<br/>    ...<br/>    website = ForeignKey('app_name.WebSite')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM PAGE FOR DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>You need to add your admin URL <em>before</em> the URL patterns of the admin itself:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>   url(r'^admin/preferences/$', TemplateView.as_view(template_name='admin/preferences/preferences.html')),<br/>   url(r'^admin/', include('django.contrib.admin.urls')),<br/>)<br/></code></pre><br/><br/><p>This way the URL won't be processed by Django's admin.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BE STORE AS SHA1 AND PBKDF2 SHA256
    </pattern>
    <template>
<![CDATA[<p>Did you perhaps upgrade from Django 1.3 to Django 1.4 while retaining user data?  Django 1.4 introduced the newer, more secure hash for password storage, but should still be backwards-compatible with the old hashes as far as I am aware.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO NOT FIND THESE URL ALLTHOUGH THE REGEX MATCH
    </pattern>
    <template>
<![CDATA[<p>A quick test confirms this should work:</p><br/><br/><pre><code>&gt;&gt;&gt;import re<br/>&gt;&gt;&gt;test = ["accounts/confirm/fb75c6529af9246e4e048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e-048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e=048d8a4298882909dc03ee0/", "accounts/confirm/fb75c6529af9246e4e%20048d8a4298882909dc03ee0/"]<br/>&gt;&gt;&gt;all([re.match(r'^accounts/confirm/(.+)$', item) for item in test])<br/>True<br/></code></pre><br/><br/><p>This will return false on any non matches:</p><br/><br/><pre><code>&gt;&gt;&gt;test.append("something else")<br/>&gt;&gt;&gt;all([re.match(r'^accounts/confirm/(.+)$', item) for item in test])<br/>False<br/></code></pre><br/><br/><p>The problem must be elsewhere. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU FROM DICTIONARI WHEN I HAVE KEY
    </pattern>
    <template>
<![CDATA[<p>Django templates use the syntax <code>{{ dictvar.key }}</code> to perform lookups, see the <a href="https://docs.djangoproject.com/en/dev/topics/templates/" rel="nofollow">Django Docs</a>. So in your case, this would be <code>{{ value.value }}</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FILE DOWNLOAD USE PIP STORE IN VIRTUALENV
    </pattern>
    <template>
<![CDATA[<p>To see where your virtualenv files are, enable it and issue the following bash command:</p><br/><br/><pre><code>$ echo $VIRTUAL_ENV<br/></code></pre><br/><br/><p>Similar to your system's Python installation, the packages are stored inside <code>lib/python2.*/site-packages/</code> directory. Find your package in there and edit the necessary files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON OBJECT FROM A PYTHON SCRIPT TO JQUERI
    </pattern>
    <template>
<![CDATA[<p>how do you serve the getActive.py ?</p><br/><br/><p>You need a rich webserver to add a response header for getActive.py. <br/>"Content-Type" = "application/json."</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django uses an ORM (Object-Relational Mapper) that translates data back and forth between Python objects and database rows. So when you use it to get an item from the database, it converts it into a Python object.</p><br/><br/><p>If that object doesn't define how to display itself as text, Django does it for you. Python does the same thing:</p><br/><br/><pre><code>&gt;&gt;&gt; class MyObject(object):<br/>...     pass<br/>... <br/>&gt;&gt;&gt; [MyObject(), MyObject()]<br/>[&lt;__main__.MyObject object at 0x0480E650&gt;,<br/> &lt;__main__.MyObject object at 0x0480E350&gt;]<br/></code></pre><br/><br/><hr><br/><br/><p>If you want to see all of the actual values for the row for each object, use <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#values" rel="nofollow"><code>values</code></a>.</p><br/><br/><p>Here is the example from the docs:</p><br/><br/><pre><code># This list contains a Blog object.<br/>&gt;&gt;&gt; Blog.objects.filter(name__startswith='Beatles')<br/>[&lt;Blog: Beatles Blog&gt;]<br/><br/># This list contains a dictionary.<br/>&gt;&gt;&gt; Blog.objects.filter(name__startswith='Beatles').values()<br/>[{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO QUERI RESULT IN HTML TABL LIST CSS DIV
    </pattern>
    <template>
<![CDATA[<p>The whole argument made by the CSS purists is that you need to keep your code semantically relevant to the information it contains. What you need to show is tabular data and you use the <code>&lt;table&gt;</code> tag to do that. The only "problem" with tables is when they are used to control the layout, like making your two column layout two <code>&lt;td&gt;</code>s as opposed to two <code>&lt;div&gt;</code>s. In this case, however, tables would be adequate.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POSTROPH REPLAC QUOTAT MARK IN SCRIPT TAG IN INPUT FIELD
    </pattern>
    <template>
<![CDATA[<p>Try:</p><br/><br/><pre><code>&lt;input type="text" value="&amp;lt;script src=&amp;quot;/js/script.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;" name="embed"/&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE MORE THEN ONE CSS FILE ON MY HTML FILE
    </pattern>
    <template>
<![CDATA[<p>Just to add that whilst multiple css files are of course possible, it is actually best practice for you to merge the css (programatically if possible) into as few files as possible. </p><br/><br/><p>Fewer files = fewer http requests = better responsiveness for the end user. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE VALU OF AN ITEM CONTAIN IN DJANGO S CHANGED DATA LIST
    </pattern>
    <template>
<![CDATA[<p>The short answer to my original question is "No".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FILE IN DJANGO AND THEN SEND IT SOMEWHER ELS THROUGH REST
    </pattern>
    <template>
<![CDATA[<p>That is quite a few questions. </p><br/><br/><p>Handling the file upload is pretty straight-forward with Django, see the <a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/" rel="nofollow">File Uploads documentation</a> for examples. In short you can access the uploaded file via <code>request.FILES['file']</code>.</p><br/><br/><p>To call the scribd api you can use urllib2; see this <a href="http://www.hackorama.com/python/upload.shtml" rel="nofollow">Hackoarama page</a> for instructions. urllib2 can be a little convoluted but it works once you get a hang of it.</p><br/><br/><p>You can call the scribd api directly from within your Django view, but it'd be better practice to separate it out: from within your Django view save the file somewhere on disk and put an "upload this" message on messaging system (eg. <a href="http://xph.us/software/beanstalkd/" rel="nofollow">beanstalkd</a>). Have a separate process pick up the message and upload the file to scribd. That way you shield your http process and user from any issues accessing the API and the associated delays.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SNIPPIT BASE DJANGO SEMI CM
    </pattern>
    <template>
<![CDATA[<p>Sounds like <a href="http://code.google.com/p/django-chunks/" rel="nofollow">django-chunks</a> to me.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE VISITOR A MOVE WEB PAGE AND RETURN A 301 REDIRECT HTTP RESPONS STATU CODE IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>   from django import http<br/><br/>   return http.HttpResponsePermanentRedirect('/yournewpage.html')<br/></code></pre><br/><br/><p>the browser will get the 301, and go to <code>/yournewpage.html</code> as expected. the other answer is technically correct, in that python is not handling the redirection per se, the browser is. this is what's happening under the hood:</p><br/><br/><pre><code>Browser             Python         HTTP<br/>   -------------------&gt;            GET /youroldpage.html HTTP/1.1<br/><br/>   &lt;-------------------            HTTP/1.1 301 Moved Permanently<br/>                                   Location: /yournewpage.html<br/>   -------------------&gt;            GET /yournewpage.html HTTP/1.1<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>You need to look at the Django <a href="http://docs.djangoproject.com/en/dev/topics/forms/#topics-forms-index" rel="nofollow">forms</a>.</p><br/><br/><p>You should never build your own form like that.</p><br/><br/><p>You should declare a Form class which includes a <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#choicefield" rel="nofollow">ChoiceField</a> and provide the domain of choices to that field.  Everything will happen pretty much automatically from there.</p><br/><br/><p>The choices, BTW, should be defined in your Model as the range of values for that Model field.</p><br/><br/><p>Your page merely includes <code>{{form}}</code>.  Django builds the form with the choices and decodes the choices to a final result.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SUBMIT A FORM GIVEN ONLI THE HTML SOURC
    </pattern>
    <template>
<![CDATA[<p>You should re-read the <a href="http://docs.djangoproject.com/en/dev/topics/testing/" rel="nofollow">documentation about Django's testing framework</a>, specifically the part about testing views (and forms) with <a href="http://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client" rel="nofollow">the test client</a>.</p><br/><br/><p>The test client acts as a simple web browser, and lets you make <code>GET</code> and <code>POST</code> requests to your Django views. You can read the response HTML or get the same <code>Context</code> object the template received. Your <code>Context</code> object should contain the actual <code>forms.Form</code> instance you're looking for.</p><br/><br/><p>As an example, if your view at the URL <code>/form/</code> passes the context <code>{'myform': forms.Form()}</code> to the template, you could get to it this way:</p><br/><br/><pre><code>from django.test.client import Client<br/>c = Client()<br/><br/># request the web page:<br/>response = c.get('/form/')<br/><br/># get the Form object:<br/>form = response.context['myform']<br/><br/>form_data = form.cleaned_data<br/>my_form_data = {} # put your filled-out data in here...<br/>form_data.update(my_form_data)<br/><br/># submit the form back to the web page:<br/>new_form = forms.Form(form_data)<br/>if new_form.is_valid():<br/>    c.post('/form/', new_form.cleaned_data)<br/></code></pre><br/><br/><p>Hopefully that accomplishes what you want, without having to mess with parsing HTML.</p><br/><br/><p><strong>Edit</strong>: After I re-read the Django docs about Forms, it turns out that forms are immutable. That's okay, though, just create a new <code>Form</code> instance and submit that; I've changed my code example to match this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM IMPORT THE PIL IMAG LIBRARI
    </pattern>
    <template>
<![CDATA[<p>The error above happens because your file is called Image.py and you're trying to import yourself. As Manual pointed out, you should import Image from the PIL module, but you'd also need to rename your file so it's <em>not</em> called Image.py.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ER WAY TO QUERI ON A DYNAM NUMBER OF COLUMN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django's query sets are lazy, so what you're currently doing is actually pretty efficient.  The database won't be hit until you try to access one of the fields in the QuerySet... assuming, that is, that you didn't edit out some code, and it is effectively like this:</p><br/><br/><pre><code>cars = CarModel.objects.all()<br/>for op in self.cleaned_data['options']:<br/>    cars = cars.filter((op, True))<br/></code></pre><br/><br/><p>More information <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#id3" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIKE IN A CURSOR QUERI WITH A PARAMET IN PYTHON ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>First, why aren't you using the Django ORM for this?</p><br/><br/><pre><code>MyClass.objects.filter( aField__contains=var1, secondField__exact=var2 )<br/></code></pre><br/><br/><p>Second, be sure you're getting the SQL you expect.</p><br/><br/><pre><code>stmt= "select... afield like '%%%s%%' and secondfield = '%s'..." % ( var1, var2 )<br/>print stmt<br/>cursor.execute( stmt )<br/></code></pre><br/><br/><p>Third, your method has a security hole called a SQL Injection Attack.  You really should not be doing SQL like this.</p><br/><br/><p>If you absolutely must do things outside Django's ORM, you have to use bind variables in your query, not string substitution.  See <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/#performing-raw-sql-queries" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/sql/#performing-raw-sql-queries</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AUTOCOMPLET DISPLAY ONLI ONE ITEM
    </pattern>
    <template>
<![CDATA[<p>Guys, just discovered that the JQuery Autocomplete plugin am using requires a new line character as a separator between items, so i have replaced my Ajax Django view to read like this;</p><br/><br/><pre><code> return HttpResponse('\n'.join(results), mimetype='text/plain')<br/></code></pre><br/><br/><p>its working perfect!</p><br/><br/><p>Thanks.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIGN MEAN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>obj.property|escape is the way to apply the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#built-in-filter-reference" rel="nofollow">escape filter in a template</a>, which will HTML escape the string representation of that property.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND UNIT CONVERS
    </pattern>
    <template>
<![CDATA[<p>By "field(enum)" do you mean you are using the <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#choices" rel="nofollow">choices</a> option on a field?  </p><br/><br/><p>A simple set of choices works out reasonably well for small lists of conversions.  It allows you to make simplifying assumptions that helps your users (and you) get something that works.</p><br/><br/><p>Creating a formal model for units should only be done if you have (a) a LOT of units involved, (b) your need to extend it, AND (c) there's some rational expectation that the DB lookups will be of some value.  </p><br/><br/><p>Units don't change all that often.  There seems little reason to use the database for this.  It seems a lot simpler to hard-code the list of choices.</p><br/><br/><p><strong>Choices</strong></p><br/><br/><p>You can, for example, use a something like this to keep track of conversions.</p><br/><br/><pre><code>UNIT_CHOICES = ( ('m', 'meters'), ('f', 'feet' ), ('i', 'inches'), ('pt', 'points') )<br/><br/>unit_conversions = {<br/>    ('m','f'): 3.xyz,<br/>    ('m','i'): 39.xyz,<br/>    ('m','pt'): 29.xyz*72,<br/>    ('f','m'): 1/3.xyz,<br/>    ('f','i'): 12.0,<br/>    ('f','pt'): 12.0*72,<br/>    etc.<br/>}<br/></code></pre><br/><br/><p>Given this mapping, you can get a conversion factor in your conversion method<br/>function, do the math, and return the converted unit.</p><br/><br/><pre><code>class WithUnit( Model ):<br/>    ...<br/>    def toUnit( self, someUnit ):<br/>        if someUnit == self.unit: return self.value<br/>        elif (someUnit,self.unit) in unit_conversions:<br/>            return self.value * unit_conversions[(someUnit,self.unit)]<br/>        else:<br/>            raise Exception( "Can't convert" )<br/></code></pre><br/><br/><p><strong>Model</strong>.</p><br/><br/><p>If you want to create a formal model for units, you have to carry around the kind of dimension (length, volume, mass, weight/force, pressure, temperature, etc.) and the varous unit conversion factors.  This works for everything but temperature, where you have a constant term in addition to a factor.  </p><br/><br/><p>You have to pick a "baseline" set of units (e.g., <a href="http://www.unc.edu/~rowlett/units/cgsmks.html" rel="nofollow">MKS</a>) and carry all the multipliers among the various units.</p><br/><br/><p>You also have to choose how many of the English units to load into your table (fluid ounces, teaspoons, tablespoons, cups, pints, quarts, etc.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FREE SLOT IN A BOOK SYSTEM
    </pattern>
    <template>
<![CDATA[<p>Probably overkill for your application - but:</p><br/><br/><p>A relatively simple way of improving your searches at the expense of making the 'write' process more complicated, would be to change the Booking table to make it an 'Availability' table.</p><br/><br/><p>Add in a boolean column to indicate if the slot is free or booked (or better still put in the id of the customer who's booked it, and use 0 if the slot is free).</p><br/><br/><p>Start off with a single free slot, 1st Jan 2009 -> 31st Dec 20??</p><br/><br/><p>When you get a booking split the free slot into 3 (two inserts and one update), the booked slot and the two available slots.</p><br/><br/><p>Keep doing that and as the time frame gets more fragmented the booking process will consist of one of the following:</p><br/><br/><ul><br/><li>Assigning an entire 'available slot' to someone (one update)</li><br/><li>Splitting an 'available slot' into two (one update and one insert)</li><br/><li>Splitting a slot into 3 (as above) if someone books the middle section out of an available slot.</li><br/></ul><br/><br/><p>That's not incredibly complicated to manage and the search process becomes a simple query: finding any slots in the required time frame that are available (booked=false or customerid=0, whichever way you go with it) where enddate - startdate >= the number of days you want.</p><br/><br/><p>It doubles the size of the booking/availability table, and makes bookings less simple, but the trade off is that the search process is about as easy as it gets.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROCESS A COMPLEX GRAPHIC UI ELEMENT IN A DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>Not sure if I understand completely, but you could have the value of your UI saved into a hidden element on the form via javascript. This can either be done as they select the values in the UI or when they submit the form. Pseudo-code assuming JQuery using submit() to save before the submit data is sent:</p><br/><br/><pre><code>$('#myForm').submit(function(){<br/>  // get the value of your UI<br/>  var calendarValue = calendarWidget.getValue()<br/><br/>  // #calendarData is the hidden field<br/>  $('#calendarData').val(calendarValue)<br/>})<br/></code></pre><br/><br/><p>This obviously requires JS, but so does using your UI element.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPLOAD PROFIL PICTUR ON DJANGO JQUERI WEBSIT IN .JPG .GIF .PNG FORMAT. HOW CAN I SCALE CROP THEM DOWN WHEN DISPLAY THEM
    </pattern>
    <template>
<![CDATA[<p>I've used a couple different apps to do this:</p><br/><br/><ul><br/><li><a href="http://code.google.com/p/sorl-thumbnail/" rel="nofollow" title="Sorl.Thumbnail">sorl.thumbnail</a>: Simple enough interface and makes your tags for you (which is handy in the admin). I don't like that image sizes and specs get defined on the model attribute, which makes for cluttered code and muddles the separation of design and data.</li><br/><li><a href="http://code.google.com/p/django-photologue/" rel="nofollow" title="Django Photologue">Photologue</a>: Image sizes get defined in the admin and stored in your database. That's handy. Upload zip files into galleries. Lots of good stuff. Maybe more than you need.</li><br/><li><a href="http://bitbucket.org/jdriscoll/django-imagekit/wiki/Home" rel="nofollow" title="Django Imagekit">ImageKit</a>: The next version of Photologue is being built on this. It's lower level, defines image specs (sizes and processors) in a specs file. It doesn't do more than it needs to but seems to do enough.</li><br/></ul><br/><br/><p>Like I said, I've used all three for different projects (in the order listed, coincidentally). For what it sounds like you're doing, I'd go with Sorl or ImageKit.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FRAMEWORK MAINTAIN
    </pattern>
    <template>
<![CDATA[<p>If I were deploying a python app these days, I would certainly check out <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">virtualenv</a>.</p><br/><br/><p>From their page:</p><br/><br/><blockquote><br/>  <p>virtualenv is a tool to create<br/>  isolated Python environments.</p><br/>  <br/>  <p>The basic problem being addressed is<br/>  one of dependencies and versions, and<br/>  indirectly permissions. Imagine you<br/>  have an application that needs version<br/>  1 of LibFoo, but another application<br/>  requires version 2. How can you use<br/>  both these applications? If you<br/>  install everything into<br/>  /usr/lib/python2.4/site-packages (or<br/>  whatever your platform's standard<br/>  location is), it's easy to end up in a<br/>  situation where you unintentionally<br/>  upgrade an application that shouldn't<br/>  be upgraded.</p><br/>  <br/>  <p>Or more generally, what if you want to<br/>  install an application and leave it<br/>  be? If an application works, any<br/>  change in its libraries or the<br/>  versions of those libraries can break<br/>  the application.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SELECT REL ( ) FOR MULTI JOIN QUERI USE MODEL FILTER
    </pattern>
    <template>
<![CDATA[<p>Here is a query that should do what you want:</p><br/><br/><pre><code>Job.objects.filter(location__big_city__city='San-Fran', location__big_city__state='Calif', location__big_city__country='USA')<br/></code></pre><br/><br/><p>And indeed, Django uses a join twice on the Location table when running this query:</p><br/><br/><pre><code>SELECT "example_job"."id", "example_job"."title", "example_job"."company", "example_job"."location_id" FROM "example_job" INNER JOIN "example_location" ON ("example_job"."location_id" = "example_location"."id") INNER JOIN "example_location" T3 ON ("example_location"."big_city_id" = T3."id") WHERE (T3."country" = USA  AND T3."city" = San-Fran  AND T3."state" = Calif<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A COMPLET DATE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>How about using a <a href="http://docs.python.org/library/datetime.html#datetime-objects" rel="nofollow">datetime</a> object. For example:</p><br/><br/><pre><code>from datetime import datetime<br/>Entry.objects.filter(pub_date=datetime(2008, 10, 18))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ID FROM URL TO POST SAVE REDIRECT IN URLS.PI
    </pattern>
    <template>
<![CDATA[<p>In short what you need to do is wrap the update_object function.</p><br/><br/><pre><code>def update_object_wrapper(request, object_id, *args, **kwargs):<br/>    redirect_to = reverse('your object edit url name', object_id)<br/>    return update_object(request, object_id, post_save_redirect=redirect_to, *args, **kwargs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOREIGN KEY WITHOUT REQUEST THE WHOLE OBJECT
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#values-fields" rel="nofollow">queryset's values() function</a>, which will return a list of dictionaries containing name/value pairs for each attribute passed as parameters:</p><br/><br/><pre><code>&gt;&gt;&gt; Foo.objects.all().values('user__id')<br/>[{'user__id': 1}, {'user__id' 2}, {'user__id': 3}]<br/></code></pre><br/><br/><p>The ORM will then be able to optimize the SQL query to only return the required fields, instead of doing a "SELECT *".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FACEBOOK CONNECT MISS LIB
    </pattern>
    <template>
<![CDATA[<p>I've just added the missing file folks. Sorry for the inconveniences. :/</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO REMOV CACH RESULT FROM PREVIOU FORM POST
    </pattern>
    <template>
<![CDATA[<p>This code is broken in concept; it will never do what you want it to.  Your dictionaries are class attributes on the ListingImagesForm class.  This class is a module-level global.  So you're storing some state in a global variable in-memory in a webserver process.  This state is global to all users of your application, not just the user who submitted the form, and will persist (the same for all users) until it's explicitly changed or cleared (or until you just happen to have your next request served by a different process/thread in a production webserver).</p><br/><br/><p>[<strong>EDIT</strong>: I used "global" here in an unclear way.  Class attributes aren't "global", they are encapsulated in the class namespace just as you'd expect.  But you're assigning attributes to the class object, not to instances of the class (which you'd do within an __init__() method).  The class object is a module-level global, and it only has one set of attributes.  Every time you change them, you're changing them for everyone.  If you'd modify the above code so that your three dictionaries are initialized within the __init__() method, then your "cached data" "problem" would go away; but so would the "magical" persistence behavior that you wanted in the first place.]</p><br/><br/><p>You need to rethink your design with a clear understanding that Django doesn't "automagically" maintain any state for you across requests.  All your state must be explicitly passed via POST or GET, or explicitly saved to a session.  Class attributes on a Form class should be avoided except for immutable configuration-type information, and instance attributes are only useful for keeping track of temporary state while processing a single request, they won't persist across requests (a new instance of your Form class is created on each request).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL API REVERS LOOKUP OF MANI TO MANI RELATIONSHIP THROUGH INTERMEDIARI TABL
    </pattern>
    <template>
<![CDATA[<p>I was trying to evaluate a query set object, not the object itself. Executing a get on the query set and then a lookup of the relation set worked fine. I'm changing to community wiki and leaving this here just incase someone else is as stupid as I was.</p><br/><br/><p>A working example:</p><br/><br/><pre><code>resident = Resident.objects.filter(name='Johnny')<br/>resident.ssa_set.all() # fail<br/>resident = resident.get() # will fail if more than one returned by filter<br/>resident.ssa_set.all() # works, since we're operating on an instance, not a queryset<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SATCHMO IN WINDOW
    </pattern>
    <template>
<![CDATA[<p>Which modules are you having trouble with? <br/>Pycrypto binaries are here - <a href="http://www.voidspace.org.uk/python/modules.shtml#pycrypto" rel="nofollow">http://www.voidspace.org.uk/python/modules.shtml#pycrypto</a><br/>Python Imaging binaries are here - <a href="http://www.pythonware.com/products/pil/" rel="nofollow">http://www.pythonware.com/products/pil/</a></p><br/><br/><p>I believe everything else is pure python so it should be pretty simple to install the rest.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER BY VOTE WITH DJANGO VOT
    </pattern>
    <template>
<![CDATA[<p>I think you need to assign <code>posts</code> to the return value of <code>posts.extra()</code>:</p><br/><br/><pre><code>posts = posts.extra(select={'score': """<br/>                    SELECT SUM(vote)<br/>                    FROM %s<br/>                    WHERE content_type_id = %s<br/>                    AND object_id = %s.id<br/>                    AND voted_at &gt; DATE(%s)<br/>                    AND voted_at &lt; DATE(%s)<br/>                """ % (qn(Vote._meta.db_table), ctype.id, qn(Post._meta.db_table), start, end)},<br/>                        order_by=['-score'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL RETURN NONETYP
    </pattern>
    <template>
<![CDATA[<p><code>NoneType</code> is the type that the <code>None</code> value has. You want to change the second snippet to</p><br/><br/><pre><code>if current_product.size: # This will evaluate as false if size is None or len(size) == 0.<br/>  blah blah<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU TO THE OUTPUT OF A FORMSET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Pass in a list of dicts which contain the default values you want to set for each form:</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/forms/formsets/#using-initial-data-with-a-formset" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/forms/formsets/#using-initial-data-with-a-formset</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESIGN MODEL WITH VIRTUAL FIELD
    </pattern>
    <template>
<![CDATA[<p>Products have Features.</p><br/><br/><pre><code>class Feature( models.Model ):<br/>    feature_name = models.CharField( max_length=128 )<br/>    feature_value = models.TextField()<br/>    part_of = models.ForeignKey( Product )<br/></code></pre><br/><br/><p>Like that.</p><br/><br/><p>Just a list of features.  </p><br/><br/><pre><code>p= Product( "iPhone", "Apple", 350 )<br/>p.save()<br/>f= Feature( "mp3 capacity", "16Gb", p )<br/>f.save()<br/></code></pre><br/><br/><p>If you want, you can have a master list of feature names in a separate table.  Don't over-analyze features.  You can't do any processing on them.  All you do is present them. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND VALID CONFUS LOOK FOR ADVIC
    </pattern>
    <template>
<![CDATA[<p>The Form errors are automatically part of the administrative view.</p><br/><br/><p>See <a href="http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation</a></p><br/><br/><p>You're happiest if you validate in a Form -- that's what Forms are for.  The admin interface will use the Form you associate with your model; your own views can also use the form.</p><br/><br/><p>Getting attributes from the file, should probably be a separate method of the model class.  The separate method of the model class can be used by the <code>save()</code> method of the model class or invoked at other times by view functions.</p><br/><br/><p><hr /></p><br/><br/><p>"I could never get the administration views to use them while using the ModelForm class."</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#form" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#form</a></p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#adding-custom-validation-to-the-admin" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#adding-custom-validation-to-the-admin</a></p><br/><br/><p><hr /></p><br/><br/><p>"I'm still confused about how to actually handle the validation. S.Lott says it should be a method?"</p><br/><br/><p>Validation in a form is done with a <code>clean()</code> method or a <code>clean_somefield()</code> method.</p><br/><br/><p>The "Adding custom validation to the admin" link (above) shows how to add the <code>clean_name</code> method to the "MyArticleAdminForm" form.  </p><br/><br/><p>If you're still confused, trying actually typing the code from the Django web page and see what it does.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON SHARE SERVER NO MODUL NAME MYSQLDB
    </pattern>
    <template>
<![CDATA[<p>You are missing the python-mysql db driver on your python path.<br/>see if you can figure out the pythonpath WSGI is seeing... which can be different from what you are experiencing in shell</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIREBUG AND CSS CACH NOT SHOW NEW SELECTOR
    </pattern>
    <template>
<![CDATA[<p>Things to try</p><br/><br/><ol><br/><li>double clicking the browser refresh button to get the new css</li><br/><li>restarting the development server</li><br/><li>quit Firebug and restart the browser</li><br/><li>see if your development server is server the correct CSS file and selectors<br/><a href="http://localhost:8000/media/liquid.css" rel="nofollow">http://localhost:8000/media/liquid.css</a></li><br/></ol><br/><br/><p>The Most Import thing is to:<br/> 5. Validate your CSS with the CSS validator:</p><br/><br/><pre><code> http://jigsaw.w3.org/css-validator/<br/></code></pre><br/><br/><p>I had some comments in the CSS file immediately before the class selector. I had just used # to annotate the comments. This is incorrect syntax for CSS</p><br/><br/><p>When I surrounded the comments with /* #comment */ the problem went away.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND SQL QUESTION REDUC NUMBER OF DATABAS HIT
    </pattern>
    <template>
<![CDATA[<p>Unless you've profiled your app and know this is a serious bottleneck, I think you've got the answer: "just stressing too much".</p><br/><br/><p>You <em>could</em> fetch your data in a single ORM statement using <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="nofollow">Q objects</a>...</p><br/><br/><pre><code>clients = Client.objects.filter(Q(status='current')|Q(status='acquired')|Q(status='past'))[:30]<br/></code></pre><br/><br/><p>...but then you'd have all three statuses in one queryset, and probably wouldn't have ten of each, and you'd still have to separate them for your template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DROPDOWN LIST WITH ACTION
    </pattern>
    <template>
<![CDATA[<p>I'm not very familiar with Django, but as long as you can make ajax calls you're good to go. Using jQuery on the client side would probably make this easier.</p><br/><br/><p>If the user selects <code>&lt;New User&gt;</code> from your dropdown, you pop up a form, submit the form with ajax and the response from the server would preferably be json containing the new user's details. Then you insert the json data into your select element.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HEAD INTO A DJANGO FORM
    </pattern>
    <template>
<![CDATA[<p>With <a href="http://github.com/muhuk/django-formfieldset/tree/master" rel="nofollow"><code>FieldsetMixin</code></a> you get Admin-like fieldsets. You create your form like this:</p><br/><br/><pre><code>from django.forms import Form<br/>from formfieldset.forms import FieldsetMixin<br/><br/><br/>class MyForm(Form, FieldsetMixin):<br/>    fieldsets = (<br/>        (u'', {'fields': ['name', 'company']}),<br/>        (u'Interested in', {'fields': ['foo', 'bar', 'baz']}),<br/>    )<br/><br/>    # rest of the form<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNLOCK AN SQLITE3 DB
    </pattern>
    <template>
<![CDATA[<p>Your database is locked because you have a transaction running somewhere.  </p><br/><br/><p>Stop all your Django apps.  If necessary, reboot.</p><br/><br/><p>It's also remotely possible that you crashed a SQLite client in the middle of a transaction and the file lock was left in place.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO LOOP LOGIC ERROR SAY INT IS NOT ITER CHECK MY SYNTAX
    </pattern>
    <template>
<![CDATA[<p>After a small rewrite</p><br/><br/><pre><code>query = self.project.jobrecord_set.filter(<br/>        date__lte=date,<br/>        date__gte=self.start_date)<br/>values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 )<br/>return sum( values )<br/></code></pre><br/><br/><p>Look closely at the <code>values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 )</code></p><br/><br/><p>What happens when the query is empty?</p><br/><br/><p>You're evaluating <code>jobrecord.get_cost() or 0 for jobrecord in 0</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KEYWORD DATEFIELD.INPUT FORMAT RECOGN IN DJANGO 1.0.2 AND PYTHON 2.5
    </pattern>
    <template>
<![CDATA[<p>Having looked at the docs, like you suspected, <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#datefield" rel="nofollow">models.DateField</a> doesn't have an input_formats, but <a href="http://docs.djangoproject.com/en/dev/ref/forms/fields/#datefield" rel="nofollow">forms.DateField</a> does (as does forms.DateTimeField)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERMALINK FOR ADMIN
    </pattern>
    <template>
<![CDATA[<p>1.1 is out, the doc is right here: <a href="http://docs.djangoproject.com/en/dev/ref/contrib/admin/#admin-reverse-urls" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/admin/#admin-reverse-urls</a><br/>http://docs.djangoproject.com/en/dev/ref/templates/builtins/#url</p><br/><br/><p>I also used it a bit, the admin namespace will have to be specified whenever you are fetching an existing admin url.</p><br/><br/><pre><code># in urls.py, assuming you have a customized view<br/>url(r'foo/$', 'foo', name='foo_index'),<br/><br/># in the template, to get the admin url<br/>{% url admin:foo_index %}<br/></code></pre><br/><br/><p>In 1.1, whenever an admin url is fetched, you'll have to specify the 'admin' namespace.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APPLIC WITH DATA USE VERI LARG PYTHON SCRIPT
    </pattern>
    <template>
<![CDATA[<p>In most cases, you can find a natural hierarchy to your objects.  Sometimes there is some kind of "master" and all other objects have foreign key (FK) references to this master and to each other.</p><br/><br/><p>In this case, you can use an XML-like structure with each master object "containing" a lot of subsidiary objects.  In this case, you insert the master first, and all the children have FK references to an existing object.</p><br/><br/><p>In some cases, however, there are relationships that can't be simple FK's to an existing object.  In this case you have circular dependencies and you must (1) break this dependency temporarily and (2) recreate the dependency after the objects are loaded.</p><br/><br/><p>You do this by (a) defining your model to have an optional FK, (b) and having a temporary "natural key" reference.  You'll load data without the proper FK (it's optional).  </p><br/><br/><p>Then, after your data is loaded, you go back through a second pass and insert all of the missing FK references.  Once this is done you can then modify your model to make the FK mandatory.</p><br/><br/><p>Program 1 - export from old database to simple flat-file.  CSV format or JSON format or something simple.</p><br/><br/><pre><code>for m in OldModel.objects.all():<br/>    aDict = { 'col1':m.col1, 'old_at_fk':m.fktoanothertable.id, 'old_id':id }<br/>    csvwriter.writerow( aDict )<br/></code></pre><br/><br/><p>Program 2 - read simple flat-file; build new database model objects.</p><br/><br/><pre><code># Pass 1 - raw load<br/><br/>for row in csv.reader:<br/>    new= NewModel.create( **row )<br/><br/># Pass 2 - resolve FK's<br/><br/>for nm in NewModel.objects.all():<br/>    ref1= OtherModel.objects.get( old_id=nm.old_at_fk )<br/>    nm.properfk = ref1<br/>    nm.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOMAIN ALIAS BE SET UP USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is done at the web server level.  Django doesn't care about the domain on the incoming request.</p><br/><br/><p>If you are using Apache just put multiple ServerAlias directives inside your virtual host like this:</p><br/><br/><pre><code>&lt;VirtualHost *:80&gt;<br/>    ServerName www.mydomain.com<br/>    ServerAlias mydomain.com<br/>    ServerAlias forum.mydomain.com<br/>    ... other directives as needed ...<br/>&lt;/VirtualHost&gt;<br/></code></pre><br/><br/><p>This tells Apache to direct requests for all of those domains into the same instance.</p><br/><br/><p>For nginx your config file would look something like:</p><br/><br/><pre><code>server {<br/>    listen 80;<br/>    server_name   www.mydomain.com   mydomain.com   forum.mydomain.com;<br/>    ... other directives as needed ...<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPLICIT SIGNAL OF INTEREST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If this data is not an unimportant statistic that might or might not be available I'd suggest taking the simple approach and using a model. It will surely hit the database everytime. </p><br/><br/><p>Unless you are absolutely positively sure these queries <strong>are</strong> actually degrading overall experience there is no need to worry about it. Even if you optimize this one, there's a good chance other <em>unexpected</em> queries are wasting more CPU time. I assume you wouldn't be asking this question if you were testing all other queries. So why risk premature optimization on this one?</p><br/><br/><p>An advantage of the model approach would be <em>having an API in place</em>. When you have tested and decided to optimize you can keep this API and change the underlying model with something else (which will most probably be more complex than a model).</p><br/><br/><p>I'd definitely go with a model first and see how it performs. (and also how other parts of the project perform)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCK PROBLEM WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Definitely don't try this with SQLite: its major weakness is concurrency.</p><br/><br/><p>If MySQL shows the same problem, then you should collect all the data together and then write it from a single thread.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR NO MODUL NAME DUMMI ON FRESH DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>I found this <a href="http://groups.google.com/group/django-users/browse%5Fthread/thread/ea60854ad2e00b98" rel="nofollow">thread</a> on the Django Users group:</p><br/><br/><p>They suggest that it has something to do with the way MacPorts installs Python. I wish I had more details to help you with, but as a workaround, I recommend you use MacPorts to uninstall this copy of Python and try to use alternate method of install it. If you're looking for an quick and easy install, you might want to try <a href="http://wiki.python.org/moin/MacPython/Leopard" rel="nofollow">MacPython</a>. Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL RETURN USERNAM FROM CURRENT LOG IN USER
    </pattern>
    <template>
<![CDATA[<p>There should be no problem accessing the user (even as a foreign key) from a model.  I just finished testing it out myself, and there doesn't appear to be any significant difference.</p><br/><br/><pre><code>def __unicode__(self):<br/>    return self.user.username<br/></code></pre><br/><br/><p>On a side note, you should also just be able to return self.artist, since I believe that <code>User.__unicode__()</code> returns the username anyway.</p><br/><br/><p>What are the exact details of the error? What version of Django/Python are you using? Did you make a change to your model that's not yet reflected in the database?  Sometimes I've noticed you just need to restart the test server for things to work well. Particularly in the admin.</p><br/><br/><p>In response to your edit, try casting the username as a string:</p><br/><br/><pre><code>str(self.user.username)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERFORM RAW SQL UPDATE DELET AND RETURN ROW COUNT
    </pattern>
    <template>
<![CDATA[<p>An UPDATE statement as you've got in your example doesn't return row results, so <code>fetchone()</code> will always be empty (or might throw an error).</p><br/><br/><p>Use <code>cursor.rowcount</code> to get the rows last affected.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET TO ARGUMENT OF VIEW
    </pattern>
    <template>
<![CDATA[<p>You could always write a decorator.  Eg. something like (untested):</p><br/><br/><pre><code>def map_params(func):<br/>    def decorated(request):<br/>        return func(request, **request.GET)<br/>    return decorated<br/><br/>@map_params<br/>def some_view(request, param1, param2):<br/>    ...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERVER END KNOWLEDG ( E.G. DJANGO RAIL ) IF I WANT TO DO JAVASCRIPT AJAX STUFF
    </pattern>
    <template>
<![CDATA[<p>You can make a career of front-end user interface development without know a ton about server code. You would do well though to have at least a rudimentary understanding of what happens on the server when you send it a request, where your data comes from, and what the life-cycle of a web page is. This assumes that you have the support of back-end developers. As you mentioned Ajax in your question that implies that you want your web sites to actually do something, which will require things to happen on the back-end (such as storage, manipulation of data, logging in a user, etc.). </p><br/><br/><p>As with all things, the more you know, the easier it will be to get what you want from the dedicated professionals. I would suggest that you learn about programming in general, not try an learn a language and framework. In particular, try to understand datatypes, server settings (like timeouts, post versus get, etc.), security and database interactions as they exist beyond JavaScript/ECMAScript. That way when a developer is explaining why they cannot do something you have requested or are offering alternatives, you are speaking the same language.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NEW RUBI ON RAIL VERSU DJANGO ARTICL
    </pattern>
    <template>
<![CDATA[<p><a href="http://www.google.com/search?q=rails%2Bvs%2Bdjango&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a" rel="nofollow">I found a few.</a>  Most (if not all) of the articles linked on the first page of the results ought to be enough information to help you make an informed decision.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPLECHOICEFIELD CHOIC VALU
    </pattern>
    <template>
<![CDATA[<p>It might not be a beautiful solution, but I would imagine that the display names are all still available from <code>form.fields['emails'].choices</code> so you can loop through <code>form.cleaned_data['emails']</code> and get the choice name from the field's choices.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATABASE OPT WHEN TEST DJANGO PROJECT ( OR MAKE IT TO USE INNODB FOR MYSQL )
    </pattern>
    <template>
<![CDATA[<p>I've found the reason by myself. I have to use TransactionTestCase instead of normal TestCase base class. <a href="http://docs.djangoproject.com/en/dev/topics/testing/#django.test.TransactionTestCase" rel="nofollow">See the documentation.</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIELD NAME WHEN RUN PLAIN SQL QUERI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>According to <a href="http://www.python.org/dev/peps/pep-0249/" rel="nofollow">PEP 249</a>, you can try using cursor.description, but this is not entirely reliable.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REMOV HTML TAG USE UNIVERS FEED PARSER
    </pattern>
    <template>
<![CDATA[<p>i took a quick look over the code and i don't think there is a way to overwrite them directly. But you can overwrite <code>feedparser._HTMLSanitizer.acceptable_elements</code>, the list of tags that wont get removed before doing <code>feedparser.parse</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SCAFFOLD OR DJANGO ADMIN WITHOUT AUTH APP
    </pattern>
    <template>
<![CDATA[<p>See the file django/contrib/admin/views/decorators.py:</p><br/><br/><pre><code>from django.contrib.auth.models import User<br/>from django.contrib.auth import authenticate, login<br/></code></pre><br/><br/><p>These are used in decorator <code>staff_member_required</code> which guards access to admin application.</p><br/><br/><p>Admin application requires <code>django.contrib.auth</code> - you might try to monkeypatch it, but it's a bad habit (Django is not RoR, Python is not Ruby).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STAL PYSCOPG2 ON MAC OS X
    </pattern>
    <template>
<![CDATA[<p>This is an error that crops up when the build tools cannot find your Postgresql libraries. It means one of three things:</p><br/><br/><ol><br/><li><p>You don't have postgresql installed on your system. If so, download and build postgres, or download a pre-built psycopg2 binary for OS X.</p></li><br/><li><p>You have postgresql installed on your system, but you installed from a binary package and therefore don't have the necessary libraries that psycopg2 needs. In this case, download and build postgres.</p></li><br/><li><p>More commonly, though, this means that you have built postgres on your system and just need to instruct psycopg2 how to find the <code>pg_config</code> binary so that it can configure the compilation. Either:</p><br/><br/><p>a. put the path to pg_config in your shell path (it's usually at <code>/usr/local/pgsql/bin/</code> if you built postgres from source using the defaults.</p><br/><br/><p>b. or, edit the <code>setup.cfg</code> file in the psycopg2 source folder and provide the full path to <code>pg_config</code> on the line that starts with <code>pg_config=</code>. Be sure to uncomment this line by removing the hash symbol at the front. If you built postgres using the defaults, the line will look something like:</p><br/><br/><p><code>pg_config=/usr/local/pgsql/bin/pg_config</code></p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAL DICTIONARI FOR FUNCTION SCOPE ONLI IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I'm not sure I agree that making a dictionary is a violation of DRY, but if you really don't want to repeat anything at all, you could just define a 'context' dictionary at the top of the view and use dictionary keys instead of variables throughout the view.</p><br/><br/><pre><code>def my_view(request):<br/>    context = {}<br/>    context['items'] = Item.objects.all()<br/>    context['anothervalue'] = context['items'][2].name<br/>    return render_to_response('template.html', context)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON OSX
    </pattern>
    <template>
<![CDATA[<p>You probably won't find much joy using <code>.htaccess</code> to configure Django through Apache (though I confess you probably could do it if you're determined enough... but for production I suspect it will be more complicated than necessary). I develop and run Django in OS X, and it works quite seamlessly.</p><br/><br/><p>The secret is that you must configure <code>httpd.conf</code> to pass requests to Django via one of three options: <code>mod_wsgi</code> (the most modern approach), <code>mod_python</code> (second best, but works fine on OS X's Python 2.5), <code>fastcgi</code> (well... if you must to match your production environment).</p><br/><br/><p>Django's <a href="http://docs.djangoproject.com/en/dev/howto/deployment/#howto-deployment-index" rel="nofollow">deployment docs</a> have good advice and instruction for all three options.</p><br/><br/><p>If you are using the default OS X apache install, edit <code>/etc/apache2/httpd.conf</code> with the directives found in the Django docs above. I can't speak for MAMP, but if you build Apache from source (which is so easy on OS X I do wonder why anyone bothers with MAMP... my insecurities are showing), edit <code>/usr/local/apache2/conf/httpd.conf</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NON RELOAD DYNAM WEBAPP USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>You want to do that with out any client side code (javascript and ajax are just examples) and with out reloading your page (or at least part of it)?</p><br/><br/><p>If that is your question, then the answer unfortunately is you can't. You need to either have client side code or reload your page.</p><br/><br/><p>Think about it, once the client get's the page it will not change unless</p><br/><br/><ul><br/><li>The client requests the same page from the server and the server returns and updated one</li><br/><li>the page has some client side code (eg: javascript) that updates the page.</li><br/></ul><br/><br/><p>I can not imagine a third possibility. I have not coded in Django for more than 30 mins and this is clearly obvious to me. If I am wrong plz down vote :D</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SATCHMO DONAT
    </pattern>
    <template>
<![CDATA[<p>It looks like the *satchmo_cart_details_query* signal is the way to go about doing this. It allows you to add a price change value (in my case, donation amount) to a cart item</p><br/><br/><p>I'll post the full solution if anyone is interested</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB SERVIC IMPLEMENT USE JSON
    </pattern>
    <template>
<![CDATA[<pre><code>{ "href": "1" },<br/></code></pre><br/><br/><p><code>1</code> is hardly a valid URL. You should use full URLs. Google for <a href="http://www.google.com/search?q=HATEOAS" rel="nofollow">HATEOAS</a>.</p><br/><br/><p>Also, remember to send a relevant <code>Content-Type</code> header. You may want to make up your own mime-type to describe the format. This gives you the option to later change the content-type (Eg. change the format after publishing). See <a href="http://barelyenough.org/blog/2008/05/versioning-rest-web-services/" rel="nofollow">Versioning REST Web Services</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE FROM RUN DURE SYNCDB
    </pattern>
    <template>
<![CDATA[<p>"edit: PS - I thought about using the post_init signal... for the code that accesses the db, is that a good idea?"</p><br/><br/><p>Never.</p><br/><br/><p>If you have code that's accessing the model before the tables are created, you have big, big problems.  You're probably doing something seriously wrong.</p><br/><br/><p>Normally, you run syncdb approximately once.  The database is created.  And your web application uses the database.</p><br/><br/><p>Sometimes, you made a design change, drop and recreate the database.  And then your web application uses that database for a long time.</p><br/><br/><p>You (generally) don't need code in an <code>__init__.py</code> module.  You should (almost) never have executable code that does real work in an <code>__init__.py</code> module.  It's very, very rare, and inappropriate for Django.</p><br/><br/><p>I'm not sure why you're messing with <code>__init__.py</code> when <a href="http://code.google.com/p/django-cron/" rel="nofollow">Django Cron</a> says that you make your scheduling arrangements in <code>urls.py</code>.</p><br/><br/><p><hr /></p><br/><br/><p><strong>Edit</strong></p><br/><br/><p>Clearing records is one thing.</p><br/><br/><p>Messing around with <code>__init__.py</code> and Django-cron's <code>base.py</code> are clearly completely wrong ways to do this.  If it's that complicated, you're doing it wrong.</p><br/><br/><p>It's impossible to tell what you're trying to do, but it should be trivial.</p><br/><br/><p>Your <code>urls.py</code> can only run after syncdb and after all of the ORM material has been configured and bound correctly.</p><br/><br/><p>Your <code>urls.py</code> could, for example, delete some rows and then add some rows to a table.  At this point, all syncdb issues are out of the way.</p><br/><br/><p>Why don't you have your logic in <code>urls.py</code>?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MARKUP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Well it seems the best way is still use a regex and create my own filter.  </p><br/><br/><p>here are some links that helped me out:<br /><br/><a href="http://showmedo.com/videos/video?name=1100010&amp;fromSeriesID=110" rel="nofollow">http://showmedo.com/videos/video?name=1100010&amp;fromSeriesID=110</a><br /><br/><a href="http://www.smashingmagazine.com/2009/05/06/introduction-to-advanced-regular-expressions/" rel="nofollow">http://www.smashingmagazine.com/2009/05/06/introduction-to-advanced-regular-expressions/</a>  </p><br/><br/><p>hope this helps someone who had the same problem as me!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FRAMEWORK WITH WEBSIT AND STAND ALON APP
    </pattern>
    <template>
<![CDATA[<p>You can use Django ORM outside of an HTTP server.</p><br/><br/><p>Basically you need to set <code>DJANGO_SETTINGS_MODULE</code> environment variable. Then you can import and use your django code. Here's an <a href="http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/" rel="nofollow">article on stand-alone Django scripts</a>.</p><br/><br/><p>Alternatively you can choose to interact with your Django server via <a href="http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands" rel="nofollow">custom management commands</a>. This will be a bit more work. But in the end this method allows for a greater decoupling between the crawler and the controller (Django project).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN CRASH AFTER SAVE AND CONTINU REDIRECT TO NONE INSTEAD OF ID OF THE PRIMARI KEY. HELP
    </pattern>
    <template>
<![CDATA[<p>You probably want the PK to be an <code>AutoField</code> instead of an <code>IntegerField</code> so Django will automatically fill it in for you.  Otherwise you <em>have</em> to do it yourself in the save method or the admin interface:</p><br/><br/><pre><code>class Event(models.Model):<br/>    event = models.AutoField(primary_key=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMESTAMP STRING CUSTOM FIELD
    </pattern>
    <template>
<![CDATA[<p>The <code>get_db_prep_value</code> method only prepares a value for the database, but doesn't send the prepared value back to the Python object in any way.  For that you would need the <code>pre_save</code> method, I think.</p><br/><br/><p>Fortunately, there's already an "auto_now" option on DateField and DateTimeField that does what you want, using <code>pre_save</code>.  Try:</p><br/><br/><pre><code>class Table1(models.Model):<br/>    f = models.DateTimeField(auto_now=True)<br/></code></pre><br/><br/><p>(If you must write your own <code>pre_save</code>, look at how <code>auto_now</code> modifies the actual model instance in <code>/django/db/models/fields/__init__.py</code> on lines 486-492:</p><br/><br/><pre><code>def pre_save(self, model_instance, add):<br/>    if self.auto_now or (self.auto_now_add and add):<br/>        value = datetime.datetime.now()<br/>        setattr(model_instance, self.attname, value)<br/>        return value<br/>    else:<br/>        return super(DateField, self).pre_save(model_instance, add)<br/></code></pre><br/><br/><p>)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL QUERI TIMESTAMP
    </pattern>
    <template>
<![CDATA[<p>I don't think Vinay Sajip's answer is correct. The closest correct variant based on his code is:</p><br/><br/><pre><code>MyModel.objects.filter(<br/>                       primaryid=1987<br/>                      ).exclude(<br/>                       timestamp__lt=min_timestamp<br/>                      ).exclude(<br/>                       timestamp__gt=max_timestamp<br/>                      ).values_list('valuefield', flat=True)<br/></code></pre><br/><br/><p>That's "exclude the ones less than the minimum timestamp and exclude the ones greater than the maximum timestamp." Alternatively, you can do this:</p><br/><br/><pre><code>MyModel.objects.filter(<br/>                       primaryid=1987<br/>                      ).filter(<br/>                       timestamp__gte=min_timestamp<br/>                      ).exclude(<br/>                       timestamp__gte=max_timestamp<br/>                      ).values_list('valuefield', flat=True)<br/></code></pre><br/><br/><p>exclude() and filter() are opposites: exclude() omits the identified rows and filter() includes them. You can use a combination of them to include/exclude whichever you prefer. In your case, you want to exclude() those below your minimum time stamp and to exclude() those above your maximum time stamp.</p><br/><br/><p>Here is the documentation on <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#chaining-filters" rel="nofollow">chaining QuerySet filters</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.1 DATE BAS GENER VIEW PROBLEM ARCHIVE YEAR ARCHIVE MONTH ARCHIVE DAY
    </pattern>
    <template>
<![CDATA[<p>The month information is stored in the context variable <code>date_list</code>, not <code>pub_date</code>.</p><br/><br/><p>From the django docs for <a href="http://docs.djangoproject.com/en/dev/ref/generic-views/#django-views-generic-date-based-archive-year" rel="nofollow"><code>archive_year</code></a>:</p><br/><br/><blockquote><br/>  <p><strong>Template context:</strong></p><br/>  <br/>  <p>In addition to <code>extra_context</code>, the<br/>  template's context will be:</p><br/>  <br/>  <ul><br/>  <li><code>date_list</code>: A list of datetime.date objects representing all<br/>  months that have objects available in<br/>  the given year, according to queryset,<br/>  in ascending order.</li><br/>  </ul><br/></blockquote><br/><br/><p>The following should do the trick:</p><br/><br/><pre><code>{% for month in date_list %}<br/>    &lt;li&gt;<br/>        &lt;a href="/blog/{{ year }}/{{ month|date:"b" }}/"&gt;{{ month|date:"F" }}&lt;/a&gt;<br/>    &lt;/li&gt;<br/>{% endfor %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO JAVASCRIPT HANDL CONDIT AJAX RESPONS TO HTTP POST REQUEST
    </pattern>
    <template>
<![CDATA[<p>Although you can arrange for your views to examine the request data to decide if the response should be an AJAXish or plain HTML, I don't really recommend it.  Put AJAX request handlers in a separate URL structure, for instance all your regular html views have urls like /foo/bar and a corresponding api call for the same info would be /ajax/foo/bar.</p><br/><br/><p>Since most views will examine the request data, then do some processing, then create a python dictionary and pass that to the template engine, you can factor out the common parts to make this a little easier.  the first few steps could be a generic sort of function that just returns the python dictionary, and then actual responses are composed by wrapping the handler functions in a template renderer or json encoder.</p><br/><br/><p>My usual workflow is to initially assume that the client has no javascript, (which is still a valid assumption; many mobile browsers have no JS) and implement the app as static <code>GET</code> and <code>POST</code> handlers.  From there I start looking for the places where my app can benefit from a little client side scripting.  For instance I'll usually redesign the forms to submit via AJAX type calls without reloading a page.  These will not send their requests to the same URL/django view as the plain html form version would, since the response needs to be a simple success message in plain text or html fragment.  </p><br/><br/><p>Similarly, getting data from the server is also redesigned to respond with a concise JSoN document to be processed into the page on the client.  This also would be a separate URL/django view as the corresponding plain html for that resource.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALTERN TO SUBCLASS USER
    </pattern>
    <template>
<![CDATA[<p>First, calling <code>select_related</code> and passing arguments, doesn't do anything.  It's a hint that cache should be populated.</p><br/><br/><p>You would never call <code>select_related</code> in a template, only a view function.  And only when you knew you needed all those related objects for other processing.</p><br/><br/><p>"Is the best to create a method inside GroupMembership called something like get_by_user(user)?"</p><br/><br/><p>You have this.  I'm not sure what's wrong with it.</p><br/><br/><pre><code> GroupMembership.objects.filter( user="someUser" )<br/></code></pre><br/><br/><p>"Would I be able to call this from a template?"</p><br/><br/><p>No.  That's what view functions are for.</p><br/><br/><pre><code> groups = GroupMembership.objects.filter( user="someUser" )<br/></code></pre><br/><br/><p>Then you provide the <code>groups</code> object to the template for rendering.</p><br/><br/><p><hr /></p><br/><br/><p><strong>Edit</strong></p><br/><br/><p>This is one line of code; it doesn't seem that onerous a burden to include this in all your view functions.</p><br/><br/><p>If you want this to appear on every page, you have lots of choices that do not involve repeating this line of code..</p><br/><br/><ol><br/><li><p>A view function can call another function.</p></li><br/><li><p>You might want to try callable objects instead of simple functions; these can subclass a common callable object that fills in this information.</p></li><br/><li><p>You can add a template context processor to put this into the context of all templates that are rendered.</p></li><br/><li><p>You could write your own decorator to assure that this is done in every view function that has the decorator.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL QUERI WITH CUSTOM SELECT FIELD
    </pattern>
    <template>
<![CDATA[<pre><code>.extra(select={'is_staff': "%s.name='staff'" % Permission._meta.db_table, 'is_student': "%s.name='student'" % Permission._meta.db_table, })<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO YOU ACCESS THE CURRENT MODEL INSTANC FROM INSID A FORM
    </pattern>
    <template>
<![CDATA[<p>You can't access the instance in the form declaration, because there isn't one until you instantiate it.</p><br/><br/><p>However, if all you want to do is set dynamic initial data, do this with the <code>initial</code> parameter on instantation:</p><br/><br/><pre><code>form = EditAdminForm(initial={'password':'abcdef'})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INDEX OF AN ELEMENT IN A QUERYSET
    </pattern>
    <template>
<![CDATA[<p>QuerySets in Django are actually generators, not lists (for further details, see <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#ref-models-querysets" rel="nofollow">Django documentation on QuerySets</a>).<br /><br/>As such, there is no shortcut to get the index of an element, and I think a plain iteration is the best way to do it.</p><br/><br/><p>For starter, I would implement your requirement in the simplest way possible (like iterating); if you really have performance issues, then I would use some different approach, like building a queryset with a smaller amount of fields, or whatever.<br /><br/>In any case, the idea is to leave such tricks as late as possible, when you definitely knows you need them.<br /><br/><strong>Update:</strong> You may want to use directly some SQL statement to get the rownumber (something lie . However, Django's ORM does not support this natively and you have to use a raw SQL query (see <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql" rel="nofollow">documentation</a>). I think this could be the best option, but again - only if you really see a real performance issue.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FILE ON APP ENGIN PATCH
    </pattern>
    <template>
<![CDATA[<p>In App Engine, patch or otherwise, you should be able to open (read-only) any file that gets uploaded with your app's sources. Is 'foo.txt' in the same directory as the py file? Does it get uploaded (what does your app.yaml say?)?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MEMORI ADDRESS OF A PYTHON DJANGO MODEL OBJECT
    </pattern>
    <template>
<![CDATA[<p><code>id()</code> will return the identity of the object (generally implemented as the address), which is guaranteed unique for two objects which exist at the same point in time.  However the obvious way to check whether two objects are identical is to use the operator explicitely designed for this: <code>is</code></p><br/><br/><p>ie.</p><br/><br/><pre><code> if obj1 is obj2: <br/>     # Objects are identical.<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO PYTHON ONE LIN CONVERS
    </pattern>
    <template>
<![CDATA[<pre><code>from datetime import datetime<br/><br/>def copyright_dates(start_year = datetime.now().year):<br/>    return " - ".join(str(y) for y in sorted(set([start_year, datetime.now().year])))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N ECOMMERC SHOP CART IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There's a book coming out that talks about just that. See here:</p><br/><br/><p><a href="http://www.apress.com/book/view/9781430225355" rel="nofollow">http://www.apress.com/book/view/9781430225355</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT ERROR TEMPLAT U BASE.HTML CAN NOT BE EXTEND
    </pattern>
    <template>
<![CDATA[<p>Your base.html template cannot extend itself. The problem lies there. Remove that line and replace it with valid html or other Django template tags (or extend some other template).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU UNPACK ERROR
    </pattern>
    <template>
<![CDATA[<pre><code>path, dirs, files = walktoo('/home/damon/walktemp/%s' % path)<br/></code></pre><br/><br/><p>In this line, you're expecting <code>walktoo</code> to return a tuple of three values, which are then to be unpacked into <code>path</code>, <code>dirs</code>, and <code>files</code>.  However, your <code>walktoo</code> function is a generator object: calling <code>walktoo()</code> yields a single value, the generator.  You have to call <code>next()</code> on the generator (or call it implicitly by doing some sort of iteration on it) to get what you actually want, namely the 3-tuple that it yields.</p><br/><br/><p>I'm not entirely clear what you want to do -- your <code>walkdeep()</code> function is written like it only wants to use the first value returned by <code>walktoo()</code>.  Did you mean to do something like this?</p><br/><br/><pre><code>for path, dirs, files in walktoo(...):<br/>    # do something<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMON SESSION INFORM IN EVERI VIEW
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance" rel="nofollow">template inheritance</a> to derive all of your templates from a common base that suitably uses the common parts of the context, and make all your contexts with a factory function that ensures the insertion in them of those common parts.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VS. WSGI ENVIRON PARAMET
    </pattern>
    <template>
<![CDATA[<p>In Django, the server environment variables are provided as dictionary members of the <code>META</code> attribute on the <code>request</code> object - so in your view, you can always access them via <code>request.META['foo']</code> where foo is the name of the variable.</p><br/><br/><p>An easy way to see what is available is to create a view containing <code>assert False</code> to trigger an error. As long as you're running with <code>DEBUG=True</code>, you'll see a nice error page containing lots of information about the server status, including a full list of all the <code>request</code> attributes. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO QUERI SET
    </pattern>
    <template>
<![CDATA[<p>It's the first line throwing the error: you can't do qs[0:3].update().  qs[0:3] is taking a slice; update() is updating the query.</p><br/><br/><p>update() is meant for bulk updates, resulting in SQL queries like</p><br/><br/><pre><code>UPDATE app_model SET state = 'F' WHERE state &lt;&gt; 'F';<br/></code></pre><br/><br/><p>You're trying to update the first three items according to "order", but that can't be done with this type of UPDATE--you can't order or limit an SQL UPDATE.  It needs to be written differently, eg.</p><br/><br/><pre><code>UPDATE app_model SET state = 'F' WHERE id IN (<br/>    SELECT id FROM app_model WHERE state &lt;&gt; 'F' ORDER BY order LIMIT 3<br/>) AS sub;<br/></code></pre><br/><br/><p>but Django can't do that for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTPRESPONS EVERI FEW SECOND
    </pattern>
    <template>
<![CDATA[<p>I discovered recently that an HttpResponse can be a generator:</p><br/><br/><pre><code>def myview(request, params):<br/>    return HttpResponse(mygenerator(params))<br/><br/><br/>def mygenerator(params):<br/>    for i,e in enumerate(params):<br/>        yield '&lt;li&gt;%s&lt;/li&gt;' % Table.objects.filter(someObjectForFilter[i])<br/></code></pre><br/><br/><p>This will progressively return the results of <code>mygenerator</code> to the page, wrapped in an HTML <code>&lt;li&gt;</code> for display.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIL S TEST ROUT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django does have a fairly extensive library for testing Django web apps. The details of testing are a bit beyond the scope of this answer, but you can read the relevant docs about <a href="http://docs.djangoproject.com/en/dev/topics/testing/#topics-testing" rel="nofollow">testing Django applications</a> for more details. Particularly, I think you'll be interested in the sections on <a href="http://docs.djangoproject.com/en/dev/topics/testing/#making-requests" rel="nofollow">making requests</a> and <a href="http://docs.djangoproject.com/en/dev/topics/testing/#testing-responses" rel="nofollow">testing responses</a>, which allow you to make requests to URLs (for the purposes of testing), and test the responses. Django also has a <code>TestCase</code> subclass that includes <a href="http://docs.djangoproject.com/en/dev/topics/testing/#assertions" rel="nofollow">assertions</a> specifically designed for use with HTTP requests and responses.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CATEGORI AND SUBCATEGORI
    </pattern>
    <template>
<![CDATA[<p>Get all top-level categories using something like</p><br/><br/><pre><code>top_level_cats = Category.objects.filter(parent__isnull=True)<br/></code></pre><br/><br/><p>Then:</p><br/><br/><pre><code>for tlc in top_level_cats:<br/>    #do the HTML for the top-level category<br/>    for clc in tlc.child.all():<br/>        #do the HTML for the children of clc<br/></code></pre><br/><br/><p>If you have multiple level categories, there'll need to be a recursive call in there somewhere, but this gives the basic gist.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO RUN ON APACHE MOD WSGI
    </pattern>
    <template>
<![CDATA[<p>You don't have a database.  It's not clear why you don't have a sqlite3 driver.  However, you don't have sqlite3 and you don't have a database.</p><br/><br/><ol><br/><li><p>Run manage.py syncdb build the database.  </p><br/><br/><ul><br/><li><p>Be sure to use the same <code>settings.py</code> as your production instance.  </p></li><br/><li><p>Be sure your <code>settings.py</code> has the correct driver.  You're using SQLite3, be sure that an absolute path name is used.  </p></li><br/><li><p>Be sure to use the same <code>PYTHONPATH</code> and working directory as production to be sure that all modules are actually found</p></li><br/></ul></li><br/><li><p>Run ordinary SQL to see that you actually built the database.</p></li><br/><li><p>Run the Django <code>/admin</code> application to see what's in the database.</p></li><br/></ol><br/><br/><p>SQLite3 is included with Python.  For it to be missing, your Python installation must be damaged or incomplete.  Reinstall from scratch.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POSTGRESQL LEFT OUTER JOIN AND CASE IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't have time at the moment to attempt a full translation of that query, but if the CASE is your main stumbling block, I can tell you right now it isn't supported natively, you'll need to use a call to <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#extra-select-none-where-none-params-none-tables-none-order-by-none-select-params-none" rel="nofollow">.extra()</a> with some raw SQL for that. Something like:</p><br/><br/><pre><code>.extra(select={'user_vote': 'SUM(CASE WHEN links_vote.user_id = 1 THEN links_vote.karma_delta ELSE 0 END')})<br/></code></pre><br/><br/><p>But if this query works well as-is, why bother translating it into the ORM? Just <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/" rel="nofollow">grab a cursor and run it as a SQL query</a>. Django's ORM is intentionally not a 100% solution, there's a reason it exposes the raw cursor API.</p><br/><br/><p><strong>Update</strong>: And since Django 1.2, there's also <a href="https://docs.djangoproject.com/en/dev/topics/db/sql/#django.db.models.Manager.raw" rel="nofollow">Manager.raw()</a> to let you make raw SQL queries and get model objects back (thanks Van Gale).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO POSTGRESQL GROUP BY ISSU
    </pattern>
    <template>
<![CDATA[<p>A few things:</p><br/><br/><ol><br/><li>Drop the backticks</li><br/><li>Use a CASE statement instead of IF() <code>CASE WHEN votes.use_id = 1 THEN votes.karma_delta ELSE 0 END</code></li><br/><li>Change your timestampdiff to <code>DATE_TRUNC('hour', now()) - DATE_TRUNC('hour', links.created)</code> (you will need to then count the number of hours in the resulting interval. It would be much easier to compare timestamps)</li><br/><li>Fix your GROUP BY and ORDER BY</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI SORTABL HOW TO ACCESS POST DATA
    </pattern>
    <template>
<![CDATA[<p>Use <code>request.POST.getlist('task[]')</code></p><br/><br/><p>By the way, there's no need to use <code>[]</code> in field names in Django. This is a PHP idiom, and just makes life more complicated.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STR ( ) CALL DECOD ( ) METHOD BEHIND SCENE
    </pattern>
    <template>
<![CDATA[<p>Basically, <code>__str__</code> can only output ascii strings. Since t2 contains unicode codepoints above ascii, it cannot be represented with just a string. <code>__repr__</code>, on the other hand, tries to output the python code needed to recreate the object. You'll see that the output from repr(t2) (this syntax is preferred to <code>t2.__repr_()</code>) is exactly what you set t2 equal to up on the first line. The result from repr looks roughly like ['\', 'u', '0', ...], which are all ascii values, but the output from str is trying to be [chr(0x0131), chr(0x015f), chr(0x0131), 'k'], most of which are above the range of characters acceptable in a python string. Generally, when dealing with django applications, you should use <code>__unicode__</code> for everything, and never touch <code>__str__</code>.</p><br/><br/><p>More info in <a href="http://www.djangoproject.com/documentation/models/str/" rel="nofollow">the django documentation on strings</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILTER ON A RELAT ITEM IN DJANGO ANNOT
    </pattern>
    <template>
<![CDATA[<p>I decided to approach this differently and chose not to use annotations at all. I added a manager to the Job model that returned only active (30 days or less old) jobs, and created a property on the JobCategory model that queried for the instance's job count. My templatetag simply returned all categories. Here is the relevant code.</p><br/><br/><pre><code>class JobCategory(models.Model):<br/>    title = models.CharField(_('title'), max_length=50, help_text=_("Max 50 chars. Required."))<br/>    slug = models.SlugField(_('slug'), help_text=_("Only letters, numbers, or hyphens. Required."))<br/><br/>    class Meta:<br/>        verbose_name = _('job category')<br/>        verbose_name_plural = _('job categories')<br/><br/>    def __unicode__(self):<br/>        return self.title<br/><br/>    def get_absolute_url(self):<br/>        return reverse('djobs_category_jobs', args=[self.slug])<br/><br/>    @property<br/>    def active_job_count(self):<br/>        return len(Job.active.filter(category=self))<br/><br/>class ActiveJobManager(models.Manager):<br/>    def get_query_set(self):<br/>        return super(ActiveJobManager, self).get_query_set().filter(created_date__gte=datetime.datetime.now() - datetime.timedelta(days=30))<br/><br/>class Job(models.Model):<br/>    title = models.CharField(_('title'), max_length=50, help_text=_("Max 50 chars. Required."))<br/>    description = models.TextField(_('description'), help_text=_("Required."))<br/>    category = models.ForeignKey(JobCategory, related_name='jobs')<br/>    employment_type = models.CharField(_('employment type'), max_length=5, choices=EMPLOYMENT_TYPE_CHOICES, help_text=_("Required."))<br/>    employment_level = models.CharField(_('employment level'), max_length=5, choices=EMPLOYMENT_LEVEL_CHOICES, help_text=_("Required."))<br/>    employer = models.ForeignKey(Employer)<br/>    location = models.ForeignKey(Location)<br/>    contact = models.ForeignKey(Contact)<br/>    allow_applications = models.BooleanField(_('allow applications'))<br/>    created_date = models.DateTimeField(auto_now_add=True)<br/><br/>    objects = models.Manager()<br/>    active = ActiveJobManager()<br/><br/>    class Meta:<br/>        verbose_name = _('job')<br/>        verbose_name_plural = _('jobs')<br/><br/>    def __unicode__(self):<br/>        return '%s at %s' % (self.title, self.employer.name)<br/></code></pre><br/><br/><p>and the tag...</p><br/><br/><pre><code>def job_categories():<br/>    categories = JobCategory.objects.all()<br/>    return {'categories': categories}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SPECIF SQL QUERI
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p><strike>Keyword.objects.exclude(id__in=PageKeyword.objects.all()</strike></p><br/></blockquote><br/><br/><pre><code>Keyword.objects.exclude(id__in=PageKeyword.objects.values('keyword_id'))<br/></code></pre><br/><br/><p>For future reference, <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#retrieving-specific-objects-with-filters" rel="nofollow">exclude is documented here</a>.</p><br/><br/><hr><br/><br/><p><strong>Edit:</strong> Yes, you are right; I corrected my answer. See above.</p><br/><br/><hr><br/><br/><p><strong>Edit:</strong> Even more readable:</p><br/><br/><pre><code>Keyword.objects.exclude(pagekeyword__in=PageKeyword.objects.all())<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MORE INTUIT FEEL ABOUT DJANGO RELATIONSHIP ( LIKE MANY TO ONE MANY TO MANI )
    </pattern>
    <template>
<![CDATA[<p>I looked all over for a simple explanation of relationships, but couldn't find anything, so I'll try to summarize it here.</p><br/><br/><p>Relationships aren't strictly a Django thing. If you really want to understand what Django is doing, learn about database concepts in general.</p><br/><br/><p><hr></p><br/><br/><p>When you have multiple tables of information, you need to link them somehow. If you operate a music site like last.fm, you're going to need to know about artists, genres, tags, songs, albums, etc. All of this data relates somehow. </p><br/><br/><p>For example, One artist will have many albums (one to many), one genre will apply to many artists (One to many.) e.g. Metallica (one artist) will have several albums, Black Album, St. Anger, etc. but one album will probably not belong to two artists, e.g. Alicia Keys and Metallica both recording the same album. To achieve this relationship, each Album record must have an artist_id to indicate which artist it is related to.</p><br/><br/><pre><code>mysql&gt; select * from albums where artist_id = 40;<br/>+-----+------------------------------+------+---------------------+-----------+----------+------------+<br/>| id  | name                         | year | created_at          | artist_id | genre_id | updated_at |<br/>+-----+------------------------------+------+---------------------+-----------+----------+------------+<br/>| 309 | Reise, Reise                 | 2004 | 2009-11-22 16:01:13 |        40 |        2 | NULL       | <br/>| 310 | Mutter                       | 2001 | 2009-11-22 16:12:28 |        40 |        2 | NULL       | <br/>| 311 | Sehnsucht                    | 1998 | 2009-11-22 16:20:22 |        40 |        2 | NULL       | <br/>| 312 | Live aus Berlin              | 1999 | 2009-11-22 16:29:11 |        40 |        2 | NULL       | <br/>| 313 | Rosenrot                     | 2005 | 2009-11-22 16:40:43 |        40 |        4 | NULL       | <br/>| 314 | The Very Best of Rammstein   |    0 | 2009-11-22 16:51:38 |        40 |        2 | NULL       | <br/>| 315 | Live aus Berlin (bonus disc) |    0 | 2009-11-22 17:05:24 |        40 |        2 | NULL       | <br/>+-----+------------------------------+------+---------------------+-----------+----------+------------+<br/>7 rows in set (0.02 sec)<br/></code></pre><br/><br/><p><hr></p><br/><br/><p>A tag will describe several artists (e.g. Metal describes Metallica, Pantera, and Sepultura), and one artist will have several tags (e.g. people might tag Metallica as Metal, Rock, and 80s Metal.) This kind of relationship between data would probably produce three tables. An artists table, a tags table, and a join table. Your join records would look like this for example (purely imaginary and hypothetical situation)</p><br/><br/><pre><code>| id | artist_id | tag_id |<br/>| 1  | 34        | 357    |<br/>| 2  | 98        | 234    |<br/></code></pre><br/><br/><p>the artist_id of 34 might be Metallica, and the tag_id of 357 might be Metal. The point is, there's a table that exists to link tags and artists. In this example.</p><br/><br/><p>In general, relationships are a way to link records. There are three main relationships, One to One, Many to Many, and Many to One.</p><br/><br/><p>The best way to fully understand this is to learn <a href="http://databases.about.com/od/specificproducts/Database%5FDesign.htm" rel="nofollow">Database Design</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TELL ME WHI APACH WILL NOT WORK FOR MY DJANGO
    </pattern>
    <template>
<![CDATA[<p>As the code will run as the Apache user, all directories from the root of the file system down to '/home/dver/tv/mtv/wsgi' must be readable/executable to others, or at least somehow the Apache user, not just your Django site directory.</p><br/><br/><p>Thus, if '/home/dver' has permissions 'rwxr-x---' then it will not work. This is the most common problem where people go and stick the WSGI script file under their own home account. Manipulating groups may work, but you don't indicate if that group ownership also applies to '/home/dver'.</p><br/><br/><p>Although it will not matter as refers to a parent directory, but more secure to have:</p><br/><br/><pre><code>&lt;Directory /home/dver/tv/mtv/wsgi&gt;<br/>Order deny,allow<br/>Allow from all<br/>&lt;/Directory&gt;<br/></code></pre><br/><br/><p>That is, use '/home/dver/tv/mtv/wsgi' rather than '/home/dver/tv/mtv'.</p><br/><br/><p>One other possibility is that you have SELinux extensions enabled for operating systems. You should configure SELinux correctly if it is, or possibly disable it just to see if it then works.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX JQUERI AND DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>filter()</code> returns a <em>queryset</em>, not an individual item. So the variable you have called <code>place</code> will not be a Places object, but a queryset containing one or more places.</p><br/><br/><p>If for example your template has something like <code>{{ place.name }}</code>, that will print nothing because a queryset does not have a <code>name</code> attribute.</p><br/><br/><p>Assuming that there will end up being several Places with the same longitude, you will need to iterate through the queryset in your template with a <code>{% for place in places %}</code> loop.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR VALU BASE ON DATE W DJANGO ORM
    </pattern>
    <template>
<![CDATA[<p>This one isn't tested, since it's a bit too much of a pain to set up a Django table to test with:</p><br/><br/><pre><code>from datetime import date, timedelta<br/># http://www.ianlewis.org/en/python-date-range-iterator<br/>def datetimeRange(from_date, to_date=None):<br/>    while to_date is None or from_date &lt;= to_date:<br/>        yield from_date<br/>        from_date = from_date + timedelta(days = 1)<br/><br/>start = date(2009, 8, 20)<br/>end = date(2009, 8, 23)<br/>objects = Obj.objects.filter(date__gte=start)<br/>objects = objects.filter(date__lte=end)<br/><br/>results = {}<br/>for o in objects:<br/>    results[o.date] = o.value<br/><br/>return [results.get(day, 0) for day in datetimeRange(start, end)]<br/></code></pre><br/><br/><p>This avoids running a separate query for every day.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT FILE IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>The fact that <code>from X import *</code> works does not guarantee that <code>from X import Wowie</code> will work too, you know (if you could wean yourself away from that <code>import *</code> addiction you'd be WAY happier on the long run, but, that's another issue;-).</p><br/><br/><p>My general advice in import problems is to bracket the problematic import with try/except:</p><br/><br/><pre><code>try:<br/>  from blah import bluh<br/>except ImportError, e:<br/>  import sys<br/>  print 'Import error:', e<br/>  print 'sys.path:', sys.path<br/>  blah = __import__('blah')<br/>  print 'blah is %r' % blah<br/>  try:<br/>    print 'blah is at %s (%s)' % (blah.__file__, blah.__path__)<br/>  except Exception, e:<br/>    print 'Cannot give details on blah (%s)' % e<br/></code></pre><br/><br/><p>and the like.  That generally shows you pretty quickly that your sys.path isn't what you thought it would be, and/or blah is at some weird place or with weird path, and the like.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR COOKI EXIST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>request.COOKIES</code> is a standard Python dictionary, so the same syntax works.</p><br/><br/><p>Another way of doing it is:</p><br/><br/><pre><code>request.COOKIES.get('key', 'default')<br/></code></pre><br/><br/><p>which returns the value if the key exists, otherwise 'default' - you can put anything you like in place of 'default'.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST AN OBJECT S MODEL FOR USE IN A VIEW VIA AJAX
    </pattern>
    <template>
<![CDATA[<p>You could probably create a custom filter (<a href="http://docs.djangoproject.com/en/dev/howto/custom-template-tags/" rel="nofollow">django docs</a>).</p><br/><br/><h3>Current Code Attempt (Community Wiki):</h3><br/><br/><pre><code>from django import template<br/><br/>register = template.Library()<br/><br/>@register.filter<br/>def app_label(value):<br/>    """Return an object's app_label"""<br/>    try:<br/>        return value._meta.app_label<br/>    except:<br/>        pass<br/><br/>@register.filter<br/>def object_name(value):<br/>    """Return an object's object_name"""<br/>    try:<br/>        return value._meta.object_name<br/>    except:<br/>        pass<br/></code></pre><br/><br/><p>Then in your template:</p><br/><br/><pre><code>{% load ... %}<br/><br/>{{ object|app_label }}<br/>{{ object|object_name }}<br/></code></pre><br/><br/><p>The only other way I can think of would be adding a property to the model. This way means you don't have to modify the model</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW CAN I EMB SOMETH IN CSS
    </pattern>
    <template>
<![CDATA[<p>Actualy image in CSS can be relative to the CSS file.<br/>So you don't really need to put the MEDIA_URL in a CSS file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISTINCT ELEMENT IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>You want to use the <code>distinct</code> clause in combination with the <code>values</code> or <code>values_list</code> clauses.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#distinct" rel="nofollow">Doc starts here</a>. <code>distinct</code>, <code>values</code> and <code>values_list</code> are all in there.</p><br/><br/><p>So you could do:</p><br/><br/><pre><code>Foo.objects.values_list('item', flat=True)<br/></code></pre><br/><br/><p>And that would return a list of item - matching your <code>SELECT DISTINCT item FROM DB</code> query.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL OBJECT WITH NEW DYNAMICALI CREAT FIELD
    </pattern>
    <template>
<![CDATA[<p>The reason <code>commentAmount</code> is not showing up is because when Django does the serialization, it loops through the fields declared on the model and only those fields.  </p><br/><br/><p>Consider looping through your queryset in a template and creating the json manually or using another serialization tool such as <a href="http://undefined.org/python/#simplejson" rel="nofollow">simplejson</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APP USE COMET ORBIT ON APACH USE MOD WSGI OR MOD PYTHON
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p>Yes, absolutely.</p></li><br/><li><p>I would probably use Orbited as implemented by Dark Porter - It's the simplest solution to get your code running, and implemented in pure python. Not to mention, based on Twisted and thus <em>very</em> scalable, and has a well-established community of Django users.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOADDATA VALIDATIONERROR
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>(I'll fix the duplicate "school" later.)</p><br/></blockquote><br/><br/><p>Actually, that is your problem. The second definition of school as a foreign key will require it to be an integer, thus the error.</p><br/><br/><p>You can confirm this by dumping the schema of your table with </p><br/><br/><blockquote><br/>  <p>sqlite3 <i>&lt;database-file&gt;</i> '.schema wkw2_Lawyer'</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POPUL SQLITE3 IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Just load the database directly.  Collect data from websites in batches, loading the SQlite3 directly.  Just write simple batch applications that use the Django ORM.  Collect data from websites and load SQLite3 immediately.  Do not create CSV.  Do not create JSON.  Do not create intermediate results.  Do not do any extra work.</p><br/><br/><p><hr></p><br/><br/><p>Edit.</p><br/><br/><pre><code>from myapp.models import MyModel<br/>import urllib2<br/><br/>with open("sourceListOfURLs.txt", "r" ) as source:<br/>    for aLine in source:<br/>        for this, the, the_other in someGenerator( aLine ):<br/>            object= MyModel.objects.create( field1=this, field2=that, field3=the_other )<br/>            object.save()<br/><br/>def someGenerator( url ):<br/>    # open the URL with urllib2<br/>    # parse the data with BeautifulSoup<br/>    yield this, that, the_other<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SV2JSON.PI ERROR
    </pattern>
    <template>
<![CDATA[<p><code>+</code> is used incorrectly here, the proper way to combine directory name and file name is using <code>os.path.join()</code>. But there is no need to combine directory where script is located with file name, since it's common to pass relative path to current working directory. So, change lines 31-32 to the following:</p><br/><br/><pre><code>in_file = input_file_name<br/>out_file = in_file + '.json'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AND JQUERI .AJAX TO PLAY NICE NOT TRIGGER SUCCESS
    </pattern>
    <template>
<![CDATA[<p>Your jQuery function doesn't prevent the form submit from taking place. So, since Ajax is asynchronous, the submit happens before the data is returned from the Ajax request, and the function never sees it.</p><br/><br/><p>To fix this, make sure you have <code>return false;</code>  at the end of the <code>submit</code> function - ie before the second-from-last <code>})</code> .</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHP SCRIPT INSID A PYTHON WSGI ENVIRO
    </pattern>
    <template>
<![CDATA[<p>So it turns out the problem was two things, making it hard to find.</p><br/><br/><p>Thanks Ignacio Vazquez-Abrams, I had my lines the wrong way around.</p><br/><br/><p>Once that was solved, PHP would not serve my file because it was in a dir that was symlinked from outside the <code>allowed path(s)</code>. I resolved this by turning off open_basedir restrictions for this vhost. My new <code>vhost.conf</code> is below.</p><br/><br/><pre><code>&lt;Directory /var/www/vhosts/&lt;domain&gt;/httpdocs&gt;<br/>    php_admin_flag engine on<br/>    php_admin_value open_basedir none<br/>&lt;/Directory&gt;<br/><br/>Alias /media/ /var/www/vhosts/&lt;domain&gt;/httpdocs/media/<br/><br/>WSGIScriptAlias / /var/www/vhosts/&lt;domain&gt;/conf/django.wsgi<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGULAR EXPRESS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You need to wrap the group name in parentheses. The syntax for named groups is <code>(?P&lt;name&gt;regex)</code>, not <code>?P&lt;name&gt;regex</code>.  Also, if you don't want to require a trailing slash, you should make it optional.</p><br/><br/><p>It's easy to test regular expression matching with the Python interpreter, for example:</p><br/><br/><pre><code>&gt;&gt;&gt; import re<br/>&gt;&gt;&gt; re.match(r'^org/?P&lt;company_name&gt;\w+/$', 'org/companyA')<br/>&gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$', 'org/companyA')<br/>&lt;_sre.SRE_Match object at 0x10049c378&gt;<br/>&gt;&gt;&gt; re.match(r'^org/(?P&lt;company_name&gt;\w+)/?$', 'org/companyA').groupdict()<br/>{'company_name': 'companyA'}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTO UPD A DJANGO PAGE ONLI WHEN REQUIR
    </pattern>
    <template>
<![CDATA[<p>The difficulty in answering is in not knowing what the server-side resources are that are being returned to the user.</p><br/><br/><p>I'll make up something which may serve as an example.  Let's say you were developing an application that allowed you to monitor in real-time comments being made by users on your site.  We can do several things to make this possible:</p><br/><br/><ol><br/><li>The server keeps track of when comments were added (.created field)</li><br/><li>The API to get the latest comments requires us to specify how old of comments we want</li><br/><li>The view queries and returns only those that have been added since then</li><br/></ol><br/><br/><p><strong>models.py</strong></p><br/><br/><pre><code>class Comment(models.Model):<br/>    text = models.TextField()<br/>    created = models.DateTimeField(default=datetime.now())<br/></code></pre><br/><br/><p><strong>urls.py</strong></p><br/><br/><pre><code>url(r'^comments/latest/(?P&lt;seconds_old&gt;\d+)/$',get_latest_comments),<br/></code></pre><br/><br/><p><strong>views.py</strong></p><br/><br/><pre><code>def get_latest_comments(request, seconds_old):<br/>    """<br/>    Returns comments that have been created since the last given number of seconds<br/>    have elapsed.<br/>    """<br/><br/>    # Query comments since the past X seconds<br/>    comments_since = datetime.datetime.now() - datetime.timedelta(seconds=seconds_old)<br/>    comments = Comments.objects.filter(created__gte=comments_since)<br/><br/>    # Return serialized data or whatever you're doing with it<br/>    return HttpResponse(simplejson.dumps(comments),mimetype='application/json')<br/></code></pre><br/><br/><p>On the client-side you get the JSON, check if it has a value, if so enumerate the items, and add the new items to your <code>&lt;div&gt;</code> tag or whatever.</p><br/><br/><p><hr></p><br/><br/><p>As you can see, the development of the API to return only recently updated items is going to vary based on what content the server is returning.</p><br/><br/><p>From your question it sounds like you want the server to manage identifying what is recently updated, not the client (which is a good strategy).  In that case, what you need to do is define:</p><br/><br/><ol><br/><li>How is the server going to keep track of changes (in my example that's done by the 'created' field)</li><br/><li>How is the client going to request those changes</li><br/><li>How is the server going to identify which changes have happened in order to return them to the client via API?</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL TO WORK WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>The MySQL egg requires a compiler from the dev tools (download XCode from the apple developers site) and a MySQL installation.</p><br/><br/><p>If you have installed those, you have set the PATH to include mysql_config.</p><br/><br/><pre><code>export PATH=$PATH:/usr/local/mysql-5.1.39-osx10.5-x86_64/bin/<br/></code></pre><br/><br/><p>Check the path, as this is the installation on my machine!</p><br/><br/><p>After that, you should be able to build the egg with easy_install.</p><br/><br/><p>Also have a look at:<br/><a href="http://note19.com/2009/09/26/mysql-python-on-leopard/" rel="nofollow">Some blog about installing MySQL db on OS X</a></p><br/><br/><p>Good google terms are MySQLdb OS X Snow Leopard.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM THE DATABAS WITH PYTHON ( ON DJANGO FRAMEWORK )
    </pattern>
    <template>
<![CDATA[<p>"ordinarily if I were writing a sql statement"</p><br/><br/><p>Welcome to ORM.  You're not writing SQL so <em>remove this from the question</em>.  Do not ever post SQL and ask how to translate SQL into ORM.  Translating SQL limits your ability to learn.  Stop doing it.</p><br/><br/><p>Write down what the result is supposed to be.</p><br/><br/><p>It appears that you are getting all <code>Account</code> objects.  Period.<br/>At some point in a view function or template you want to get an <code>Address</code>, also.  </p><br/><br/><pre><code>for a in Account.objects.all():<br/>    a.default_address # this is the address that SQL brought in via a "join".<br/></code></pre><br/><br/><p>That's it.  Please actually do all the examples in the Django tutorial.  Actually type the code from the examples and see how it works.</p><br/><br/><p>All "join" operations are SQL workarounds.  They're a weird SQL-ism, and have nothing to do with the underlying objects.  So stop using SQL terminology to describe what you want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO N00B QUESTION ABOUT JSON ENCOD
    </pattern>
    <template>
<![CDATA[<p>I'm not sure how the Django aspect of it works, but the object you get from <code>json.loads</code> is a Python <code>dict</code> object. That means it doesn't have attributes of its keys, but you can access them like you would any other dictionary:</p><br/><br/><pre><code>obj = json.loads('{"name": "joe"}')<br/>person = obj['name']<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN A SINGL DOCTEST IN DJANGO USE MANAGE.PI TEST
    </pattern>
    <template>
<![CDATA[<p>I posted a small script that lets you run doctests in a specific file or module in your project. Running doctests from a specific file or module: <a href="http://dodrum.blogspot.com/2011/01/running-doctests-in-django-project.html" rel="nofollow">LINK</a>.</p><br/><br/><p>It makes sure that the correct testing environment is loaded (emulating what manage.py test does). Hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON PROBLEM
    </pattern>
    <template>
<![CDATA[<p>Your result array has an extra comma at the end. remove it and it should be fine.</p><br/><br/><pre><code>},],<br/></code></pre><br/><br/><p>to</p><br/><br/><pre><code>}],<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FULL TEXT SEARCH WITH MYSQL INNODB
    </pattern>
    <template>
<![CDATA[<p>Though it can be configured to talk to MySQL automatically, Sphinx is really a separate tool to MyISAM or InnoDB. It offers much better processing and performance than the simplistic fulltext search in MyISAM, but of course the price is that querying with conditions based on both the search and the database at the same time becomes difficult. You can sort of do it using the SphinxSE (storage engine) to query and join via MySQL, but it's not as flexible as keeping it in the database engine and the joins won't perform well.</p><br/><br/><p>Otherwise, you can take a hybrid approach with MyISAM and InnoDB. Put all your canonical data in the proper InnoDB tables, and just use MyISAM for storing fulltext searchbait. For normal operations you just touch the InnoDB content; only when you're doing a fulltext search do you need to join the MyISAM tables. You then have to make sure you update the MyISAM tables from any new text inserted into the InnoDB tables after a successful transaction.</p><br/><br/><p>Whilst the lack of transaction support in MyISAM risks occasionally making the data inconsistent in concurrent or error conditions (a danger that obviously also applies to the separate fulltext store solution like Sphinx, Lucene et al), that's not a big problem in reality as it's only the searchbait that becomes inconsistent and not your actual data. You can also take the opportunity to process your fulltext content differently, for example by applying trivial stemming, since MySQL doesn't implement that itself.</p><br/><br/><p>PostgreSQL has its own built-in fulltext stuff based on the <code>@@</code> operator. It's not quite up to Sphinx's speed, but way way ahead of MyISAM FULLTEXT in features (eg. stemming, dictionaries, better handling of relevancy values), and you can still combine it freely with other query conditions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNPACK ARGUMENT LIST FOR USE IN AGGREG QUERI
    </pattern>
    <template>
<![CDATA[<p>Since this work, I put that as an answer, so people will find it easily when googling:</p><br/><br/><pre><code>qs = cl.get_query_set()<br/>qs = qs.aggregate(*[Sum(field) for field in tuple])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .PYC FILE REMOV IN DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>Ok, if anyone's interested in what really was happening, i've got a story to tell ya:<br/><a href="http://code.djangoproject.com/ticket/4470" rel="nofollow">http://code.djangoproject.com/ticket/4470</a><br/>that's basically what i was going to implement.<br/>in order to really get this thing work i still should have a file models.py, which will have a proper list of classess, with Pass inside of it. Then i should have taken all the files (my models) and changed their meta for syncdb to understand they are from the certain "assembly".</p><br/><br/><p>source code is available (pls see url above).<br/>thx for helping out!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH RESPECT TO ( ) CHILD RELATIONSHIP
    </pattern>
    <template>
<![CDATA[<p>Take a look at aggregates (<a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/db/aggregation/</a>). I think you can use them to help you with this problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEVELOP SERVER NOT SERV ERROR FROM AJAX REQUEST
    </pattern>
    <template>
<![CDATA[<p>This is probably because server returns error code (500) and your jQuery cod doesn't do anything on error. Could you post $.get or $.post code you are using?</p><br/><br/><p><em>EDIT:</em> If you are using $.load, there is a place for a callback function, that you can create to display errors. It's pretty simple, you need to define a function similar to this:</p><br/><br/><pre><code>function (responseText, textStatus, XMLHttpRequest){<br/>    if (textStatus &lt; 200 || textStatus &gt;= 299){<br/>        $(document).html(responseText);<br/>    }<br/>}<br/></code></pre><br/><br/><p>This way you will put error message into the whole document and see it. I don't exactly know, if the above works, because I can't test it, but you should be able to construct something working on this.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HYPERLINK IN DJANGO TEMPLAT OF OBJECT THAT HA A SPACE
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://docs.djangoproject.com/en/dev/ref/templates/builtins/#urlencode" rel="nofollow"><code>urlencode</code></a> filter.</p><br/><br/><pre><code>{{ item|urlencode }}<br/></code></pre><br/><br/><p>But why are you taking the name? You should be passing the appropriate view and PK or slug to <code>url</code> which will create a suitable URL on its own.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIEW RETURN JSON CONTENT DICTIONARI HOW TO DECOD IN JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Question 1: that's about right, actually.</p><br/><br/><p>Question 2: Don't decode it, pipe it to safe: {{farm_complete_data|safe}} so it doesn't try to html-escape it for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NOT RECEIV XML FROM DJANGO
    </pattern>
    <template>
<![CDATA[<p>The problem was that JQuery was noticing that the URL I was requesting was on another domain, and in an effort to stop cross-domain scripting, converted my GET request to an OPTION request.</p><br/><br/><p>The solution to this was to write a PHP page that would accept a URL as a query parameter, and send the AJAX request to this PHP proxy page. The proxy page would pull down the URL I passed in and send it back.</p><br/><br/><p>(see here: <a href="http://www.abdulqabiz.com/blog/archives/2007/05/31/php-proxy-script-for-cross-domain-requests/" rel="nofollow">http://www.abdulqabiz.com/blog/archives/2007/05/31/php-proxy-script-for-cross-domain-requests/</a> )</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON LIBRARI TO GET JSON DATA FOR DJANGO
    </pattern>
    <template>
<![CDATA[<p>Python 2.6 comes with a <a href="http://docs.python.org/library/json.html?highlight=json#module-json" rel="nofollow"><code>json</code></a> module in the standard library -- so that would be best if you're on Python 2.6; for older Python versions, <code>simplejson</code> may be roughly equivalent.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DYNAM INSERT COMMENT FORM USE JQUERI
    </pattern>
    <template>
<![CDATA[<p>The problem is, when the <code>success</code> function is called, then you call <code>bindPostCommentHandler</code> (again), which binds the anonymous function <strong>again</strong> to all form objects. I.e. after one submission, every form has two functions bound to the submit event, after two submission, three and so on.</p><br/><br/><p>So you have to change the <code>success</code> part of the Ajax function to only add the handler to the form contained in the response.</p><br/><br/><p>Maybe like this (I don't know if this works, I am not that good in Javascript/jQuery):</p><br/><br/><p><strong>Edit:</strong></p><br/><br/><p>You mentioned the first one is working. Then the code is probably not working because, the DOM gets replaced. See my updated code (use <code>html</code>instead of <code>replace</code>).</p><br/><br/><p><strong>Edit 2:</strong></p><br/><br/><p>What about changing your HTML structure. Just wrap another <code>div</code> around the comments and the form and replace the contents of this. This should definitely work. Something like</p><br/><br/><pre><code>&lt;div class="new_around_comments"&gt;<br/>   &lt;div class="comments"&gt;&lt;/div&gt;<br/>   &lt;div class="commentFormWrapper"&gt;<br/>       &lt;!-- Form --&gt;<br/>   &lt;/div&gt;<br/>&lt;/div&gt;<br/></code></pre><br/><br/><p>Then you have to call two times <code>parent()</code>:</p><br/><br/><pre><code>function bindPostCommentHandler(parent)<br/>{<br/>    parent.find('form').submit(function() {<br/>    var current = $(this); <br/>        $.ajax({<br/>            //...<br/>            success: function(html, textStatus) {<br/>                // Edit 2<br/>                parent = current.parent().parent()<br/>                parent.html(html);<br/>                bindPostCommentHandler(parent);         <br/>            },<br/>            //...<br/>        });<br/>        return false;<br/>    });        <br/>}<br/>$(document).ready(function() {<br/> var parent = $('.commentFormWrapper')<br/> bindPostCommentHandler(parent);<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URL ENCOD THI SO I CAN PASS IT TO FACEBOOK SHARE
    </pattern>
    <template>
<![CDATA[<p>I think the problem is, that you first urlencode the last part of url, which you then include into another url.</p><br/><br/><p>try use <code>urllib</code> for that:</p><br/><br/><pre><code>import urllib<br/>urllib.quote("http://mydomain.com/#url=http://stackoverflow.com")<br/></code></pre><br/><br/><p>or when you have to unquote something:</p><br/><br/><pre><code>urllib.unquote("http%3A//mydomain.com/%23url%3Dhttp%3A//stackoverflow.com")<br/></code></pre><br/><br/><p>kind regards  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FROM UNQIU TRUE TO UNIQU FALS IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Drop the unique index.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQLDB PROBLEM WRONG ELF CLASS ELFCLASS32
    </pattern>
    <template>
<![CDATA[<p>Yes, the bit difference is what's causing this. Find or build a 64-bit version of MySQLdb.</p><br/><br/><p><code>ELF</code> is the <a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format" rel="nofollow">Executable and Linkable Format</a>. <code>ELFCLASS32</code> means that it's a 32-bit ELF file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS VALID ( ) NOT WORK WITH MODELFORMSET FACTORI
    </pattern>
    <template>
<![CDATA[<p>Your issue is that providing 0 items is a valid formset, there is no minimum validation.  I'd provide a custom BaseModelFormset subclass that's clean() method just checked for a minimum of one obj.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LIMIT ONE CAN DO IN TERM OF USE INTERWOVEN TEAMSIT
    </pattern>
    <template>
<![CDATA[<p>Here is a side-by-side comparison of Joomla and Teamsite: <a href="http://kwebdesign.ca/cms/content/view/106/73/" rel="nofollow">http://kwebdesign.ca/cms/content/view/106/73/</a></p><br/><br/><p>Being as Teamsite's license is proprietary, it's possible that you'd be limited to what you can or can't modify (though I'm guessing here, read their license). </p><br/><br/><p>If you're worried about being able to modify the code (for use and/or redistribution) I'd recommend one of the open-source options that have a compatible license (which is most all of them). Actually, I don't see a whole lot on the comparison that would make Teamsite better. The open-source solutions may be a little more work, but they're also a whole lot more flexible. Some of the open-source solutions (e.g. Joomla) have commercial support options. They also have a huge amount of add-on's available -- and they don't cost extra. </p><br/><br/><p>When I face a project, I exhaust all available open-source options before debating the paid route. And so far, I haven't had to purchase anything. There is honestly so much good software out there that dedicated, super-talented people put time into, and work as well (if not better) than paid counterparts.</p><br/><br/><p>HTH</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ONLI ONE CONCURR LOGIN PER USER IN DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>This question is mostly answered <a href="http://stackoverflow.com/questions/821870/how-can-i-detect-multiple-logins-into-a-django-web-application-from-different-loc">here</a> (stackoverflow.com).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI AJAX...HOW DO I UPDAT TWO DIV WITH ONE AJAX CALL
    </pattern>
    <template>
<![CDATA[<p>One option is to return json with the data you need for each area.</p><br/><br/><pre><code>$.ajax({<br/>    method:"get",<br/>    url:"/main/",<br/>    dataType: "json",<br/>    data:"q="+query,<br/>    beforeSend:function() {},<br/>    success:function(json){<br/>        $("#main").html(json.main);<br/>        $("#secondary").html(json.secondary);<br/>    }<br/>});<br/></code></pre><br/><br/><p>What you would be returning is: </p><br/><br/><pre><code>{<br/>    "main": "&lt;p&gt;{{ num_results }}, you just searched for {{ query }}&lt;/p&gt;",<br/>    "secondary": "{{ num_results }}"<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      R OBJECT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Fork it. Have your model use three states for a product: <code>available</code>, <code>taken</code>, and <code>purchased</code>. When a user initiates an action that marks the product as <code>taken</code>, spawn a new process that will mark the product to <code>available</code> in 3 minutes if it is not <code>purchased</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USABL APPLIC FOR DJANGO SITE WIDE ANNOUNC THAT DISPLAY A MESSAG ONLI ONC PER USER
    </pattern>
    <template>
<![CDATA[<p>Have a look at <a href="http://github.com/jtauber/django-notification/" rel="nofollow">django-notification</a>. It is used by pinax, there it seems to work like what you are searching for. At least it saves the status in the db.</p><br/><br/><h2>edit</h2><br/><br/><p>Response to the comment</p><br/><br/><p>from the <a href="http://github.com/jtauber/django-notification/blob/master/docs/usage.txt" rel="nofollow">docs</a>:</p><br/><br/><pre><code>notification.send([to_user], "friends_invite", {"from_user": from_user})<br/></code></pre><br/><br/><p>so this should work:</p><br/><br/><pre><code>notification.send(Users.objects.all(), "friends_invite", {"from_user": from_user})<br/></code></pre><br/><br/><p>and if a queryset isnt right:</p><br/><br/><pre><code>notification.send([u for u in Users.objects.all()], "friends_invite", {"from_user": from_user})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL RAW QUERI ERROR PARAMET INDEX OUT OF RANG
    </pattern>
    <template>
<![CDATA[<p>It's indeed a parameter style problem. You have to use ? instead of %s.</p><br/><br/><p>Here is how you reproduce the error you are getting:</p><br/><br/><pre><code>shell&gt; jython<br/>&gt;&gt;&gt; from com.ziclix.python.sql import zxJDBC<br/>&gt;&gt;&gt; (d, v) = "jdbc:mysql://localhost/test", "org.gjt.mm.mysql.Driver"<br/>&gt;&gt;&gt; cnx = zxJDBC.connect(d, None, None, v)<br/>&gt;&gt;&gt; cur = cnx.cursor()<br/>&gt;&gt;&gt; cur.execute("SELECT %s", ('ham',))<br/>..<br/>zxJDBC.Error: error setting index [1] [SQLCode: 0]<br/>Parameter index out of range (1 &gt; number of parameters,<br/>  which is 0). [SQLCode: 0], [SQLState: S1009]<br/></code></pre><br/><br/><p>Now, if you use quotes around the ?-mark, you'll get the same problem:</p><br/><br/><pre><code>&gt;&gt;&gt; cur.execute("SELECT '?'", ('ham',)) <br/>Traceback (most recent call last):<br/>  File "&lt;stdin&gt;", line 1, in &lt;module&gt;<br/>zxJDBC.Error: error setting index [1] [SQLCode: 0]<br/>Parameter index out of range (1 &gt; number of parameters,<br/>  which is 0). [SQLCode: 0], [SQLState: S1009]<br/></code></pre><br/><br/><p>The point is to not use quotes and let the database interface do it for you:</p><br/><br/><pre><code>&gt;&gt;&gt; cur.execute("SELECT ?", ('ham',))  <br/>&gt;&gt;&gt; cur.fetchall()<br/>[(u'ham',)]<br/></code></pre><br/><br/><p>Here is how I would do it in the code. You first make the strings you are going to use for the str_to_date() functions like this:</p><br/><br/><pre><code>start = "%d,%d,%d,%d,%d" % (int(tempStart.month),<br/>  int(tempStart.day), int(tempStart.year),int(tempStart.hour), <br/>  int(tempStart.minute))<br/>stop = "%d,%d,%d,%d,%d" % (int(tempEnd.month),<br/>  int(tempEnd.day), int(tempEnd.year), int(tempEnd.hour),<br/>  int(tempEnd.minute))<br/></code></pre><br/><br/><p>You make the SELECT statement, but don't use any quotes, and pass it on to the cursor. The database interface will do the job for you. Also, we put 'granularity' value as a parameter.</p><br/><br/><pre><code>select = """SELECT value FROM table_name<br/>  WHERE value_till_dt &gt;= str_to_date(?, '%%m,%%d,%%Y,%%H,%%i')<br/>  AND value_till_dt &lt;= str_to_date(?, '%%m,%%d,%%Y,%%H,%%i')<br/>  AND granularity=?<br/>  ORDER BY value_till_dt<br/>"""<br/>cursor.execute(select, (start,stop,5))<br/></code></pre><br/><br/><p>I hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TACKTRAC HELP
    </pattern>
    <template>
<![CDATA[<p>there was no reference of date is should of been issued</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITYERROR FOREIGN KEY VIOLAT UPON DELET
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>DETAIL:  Key (id)=(45) is still<br/>  referenced from table "main_shipment".</p><br/></blockquote><br/><br/><p>There is still a record referencing to id 45. You did delete record 17 in main_shipment before, but there might be others as well. You have to delete all records in main_shipment referencing to id 45 in main_order. If not, the database protects you from doing harm to your data.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UTH TOKEN ERROR AT FACEBOOK
    </pattern>
    <template>
<![CDATA[<p>This often happens with a failed authentication.  I'm not sure what the Python client libraries might look like, but with the PHP ones you generally make an authorization call against the library, something like <code>$facebook-&gt;require_login()</code>.</p><br/><br/><p>With the PHP library, if this call fails to verify the user's Facebook session, then it automatically outputs HTML that will redirect the browser and try to re-establish the session, hence the <code>auth_token</code> parameter.</p><br/><br/><p>I suspect you're running into something similar.  Try to isolate any authentication calls you're making, and use a Firefox extension like <a href="https://addons.mozilla.org/en-US/firefox/addon/3829" rel="nofollow">LiveHTTPHeaders</a> to see if you are undergoing any redirects during the requests.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO TRACK DOWN A SPURIOU HTTP REQUEST
    </pattern>
    <template>
<![CDATA[<p>The problematic AJAX function submits form data, the working two don't. Forms have a default action which takes place when the form is submitted: post a request with the form data. I failed to prevent this default action.</p><br/><br/><p>So the spurious request did indeed come out of the dark underwood of the browser, there is no code in my js files that sends it.</p><br/><br/><p>Solution:</p><br/><br/><pre><code>YAHOO.util.Event.preventDefault(event);<br/></code></pre><br/><br/><p>at the beginning of the form submit event handler.</p><br/><br/><p>See also <a href="http://developer.yahoo.com/yui/examples/event/eventsimple.html" rel="nofollow">http://developer.yahoo.com/yui/examples/event/eventsimple.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POLL ( REVERS AJAX ) FOR CHAT REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>A database table for this would put a load on your server, as you said, but might be useful if you want to keep a record of these requests for whatever reason.</p><br/><br/><p>Using something like memcached or an AMQP server might give you better performance. If you like you could even use a higher-performance key-value-store such as Tokyo Cabinet / Tokyo Tyrant. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR ON ATTEMPT ACCESS TO TWIST RPC SERVER FROM JAVASCRIPT IN THE SAME DOMAIN BUT SERV FROM DIFFER PORT
    </pattern>
    <template>
<![CDATA[<p>A common workaround for this problem is to tunnel those requests through a script that acts as a proxy.</p><br/><br/><p>Here is a trivial example...</p><br/><br/><p>Php proxy script - proxy.php</p><br/><br/><pre><code>&lt;?php<br/>echo file_get_contents(urldecode($_REQUEST['requestedUrl']));<br/>?&gt;<br/></code></pre><br/><br/><p>Some nice js code that needs to make a request to the twisted server from the django site.</p><br/><br/><pre><code>// This remote request can't be made from the browser, lets forward it to the local proxy<br/>var twistedRequestUrl = 'http://127.0.0.1:9897/someSpecialApiCall?withAnArgument=andAnImportantValue';<br/><br/>$.ajax({<br/>    url : 'proxy.php?requestedUrl=' + encode(twistedRequestUrl),<br/>    success : function(data)<br/>    {<br/>        alert('yay, the twisted call returned:' + data + ' yay!');<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + AJAX NEED SMALL INTRODUCT FOR DUMMI
    </pattern>
    <template>
<![CDATA[<p>You can create a view which returns only the id</p><br/><br/><pre><code>def id(request):<br/>    return HttpResonse(randint(1, 6))<br/></code></pre><br/><br/><p>And load it with AJAX. For example, with jQuery:</p><br/><br/><pre><code>$('#clickme').click(function(){ $('#randomnumber').load('/api/random.txt'); });<br/></code></pre><br/><br/><p>But if you need something bigger, create a full API with Piston ( <a href="http://bitbucket.org/jespern/django-piston/" rel="nofollow">http://bitbucket.org/jespern/django-piston/</a> ) and use it. And better learn jQuery first ;)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT HIEARACHI IN WORDPRESS SIMILAR TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't know Django at all, but if I'm interpreting your statements correctly then there is no templating construct in that sense.</p><br/><br/><p>Wordpress child themes override the entire file from the parent theme using the same file in the child theme.</p><br/><br/><p>A way to achieve what you want might be to write a plugin that rewrites the theme output in the areas you're concerned with, The output model for Wordpress allows developers to hook in to events in the page life-cycle and modify the html to be output before it's sent to the browser.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FOR DATETIMEFIELD
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/questions/466345/converting-string-into-datetime">http://stackoverflow.com/questions/466345/converting-string-into-datetime</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PASS PYTHON LIST
    </pattern>
    <template>
<![CDATA[<p>If both client and server are in Python, here's what you need to know.</p><br/><br/><p><strong>Server</strong>.  Use a dictionary to get labels on the fields.  Write this as the response.</p><br/><br/><pre><code>&gt;&gt;&gt; import json<br/>&gt;&gt;&gt; json.dumps( {'vld_id':1,'vls_error':2,'something_else':True} )<br/>'{"vld_id": 1, "something_else": true, "vls_error": 2}'<br/></code></pre><br/><br/><p><strong>Client</strong>.  After reading the response string, create a Python dictionary this way.</p><br/><br/><pre><code>&gt;&gt;&gt; json.loads( '{"vld_id": 1, "something_else": true, "vls_error": 2}' )<br/>{u'vld_id': 1, u'something_else': True, u'vls_error': 2}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CODE IGNIT ROR DJANGO WEB APPLIC CHALLENG
    </pattern>
    <template>
<![CDATA[<p>Can't say much, using the information you provided. All your desired things can be done with any language and framework.</p><br/><br/><p>I would suggest you to pick a framework based on the language you know most. Learning framework is not really a big deal if you know the language, web application patterns and best practices.</p><br/><br/><p>However, RoR and Django are famous for speedy development. I am a bit biased towards Django, though. Other good is Groovy on Grails, IMO. Don't know whether it would be appropriate for you to employ that.</p><br/><br/><p>So, bottomline is, I am not sure what to recommend you actually.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DICTIONARY TURNED INTO JSON IN JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>it works (roughly) like how a dict works in python: you can iterate over the keys in a json object.</p><br/><br/><pre><code>var meanings = json.meanings;<br/>for (var key in meanings )<br/>    var value = meanings[key]; <br/></code></pre><br/><br/><p>it might break if you use a naughty library that adds elements to object's prototype, so for defensive purposes, the established good practice is to write</p><br/><br/><pre><code>for(var key in meanings)<br/>    if (meanings.hasOwnProperty(key))<br/>        var value = meanings[key];<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE AS JSON FORMAT
    </pattern>
    <template>
<![CDATA[<p>Some tips:</p><br/><br/><ul><br/><li>you can convert django's <code>QueryDict</code> to to Python dictionary with <code>dict(keyword_filter)</code> expression,</li><br/><li>you can add additional record to the dictionary with <code>dict(keyword_filter, name=filter_name)</code> expression.</li><br/></ul><br/><br/><p>Then use <code>json</code> module to dump JSON and write it to the file.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      S USERCREATIONFORM PROBLEM
    </pattern>
    <template>
<![CDATA[<p>You should have missed something in the code.</p><br/><br/><p>What must had lead you to this error is:</p><br/><br/><pre><code>form = UserCreationForm<br/><br/>{% for field in form1 %}{{ field }}{% endfor %}<br/></code></pre><br/><br/><p>Here the error is that you missed the parentheses after <code>UserCreationForm</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LL OF PYTHON RESERV WORD WHICH HA 4 UNDERLIN ( STR ) BECAUS DJANGO MADE MANI FUNCTION WITH 4 TOO
    </pattern>
    <template>
<![CDATA[<p>A list of special method names is <a href="http://docs.python.org/reference/datamodel.html#special-method-names" rel="nofollow">here</a>, but it's not an exhaustive of magic names -- for example, methods <code>__copy__</code> and <code>__deepcopy__</code> are mentioned <a href="http://docs.python.org/library/copy.html?highlight=%5F%5Fcopy%5F%5F" rel="nofollow">here</a> instead, the <code>__all__</code> variable is <a href="http://docs.python.org/tutorial/modules.html?highlight=%5F%5Fall%5F%5F#importing-from-a-package" rel="nofollow">here</a>, class attributes such as <code>__name__</code>, <code>__bases__</code>, etc are <a href="http://docs.python.org/library/stdtypes.html?highlight=%5F%5Fname%5F%5F#class.%5F%5Fname%5F%5F" rel="nofollow">here</a>, and so on.  I don't know of any single authoritative list of all such names defined in any given release of the language.</p><br/><br/><p>However, if you want to check on any single given special name, say <code>__foo__</code>, just search for it in the "Quick search" box of the Python docs (any of the above URLs will do!) -- this way you will find it if it's officially part of the language, and if you <strong>don't</strong> find it you'll know it is a mistaken usage on the part of some package or framework that's violating the language's conventions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL 1045 ACCESS DENI FOR USER
    </pattern>
    <template>
<![CDATA[<p>I do it like this for a database named foo_db:</p><br/><br/><pre><code>create database foo_db;<br/>create user foo_user identified by 'foo_password';<br/>grant all on foo_db.* to 'foo_user'@'%';<br/>flush privileges;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOYMENT. ERROR LOAD MYSQLDB MODULE. TROUBL READING WRIT FROM TMP DIRECTORI
    </pattern>
    <template>
<![CDATA[<p>Point the <a href="http://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIPythonEggs" rel="nofollow"><code>WSGIPythonEggs</code></a> directive to a writable, executable path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CUSTOM SQL RETURN SINGL ROW OF RESULT WHEN QUERI RETURN 2
    </pattern>
    <template>
<![CDATA[<p><strong>SOLVED</strong> - see comments above</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVASCRIPT AND CODE REUS PROBLEM
    </pattern>
    <template>
<![CDATA[<p>Maybe you should include that variable in every page you want to use the js.<br/>Also, you may want to check Context Processors in django: <a href="http://docs.djangoproject.com/en/dev/ref/templates/api/" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/templates/api/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CLASS THAT DERIV FROM A GIVEN BASE CLASS IN PYTHON
    </pattern>
    <template>
<![CDATA[<p><code>Asset.__subclasses__()</code> gives the <em>immediate</em> subclasses of <code>Asset</code>, but whether that's sufficient depends on whether that <em>immediate</em> part is a problem for you -- if you want all descendants to whatever number of levels, you'll need recursive expansion, e.g.:</p><br/><br/><pre><code>def descendants(aclass):<br/>  directones = aclass.__subclasses__()<br/>  if not directones: return<br/>  for c in directones:<br/>    yield c<br/>    for x in descendants(c): yield x<br/></code></pre><br/><br/><p>Your examples suggest you only care about classes directly subclassing <code>Asset</code>, in which case you might not need this extra level of expansion.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GAE DJANGO TABL RECORD PAGIN
    </pattern>
    <template>
<![CDATA[<p>This page probably answers your question: <a href="http://code.google.com/appengine/articles/paging.html" rel="nofollow">http://code.google.com/appengine/articles/paging.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYCURL.POSTFIELD
    </pattern>
    <template>
<![CDATA[<p>It would appear that your pycurl installation (or curl library) is damaged somehow. From the curl error codes documentation:</p><br/><br/><pre><code>CURLE_FAILED_INIT (2)<br/>Very early initialization code failed. This is likely to be an internal error or problem.<br/></code></pre><br/><br/><p>You will possibly need to re-install or recompile curl or pycurl.</p><br/><br/><p>However, to do a simple POST request like you're doing, you can actually use python's "urllib" instead of CURL:</p><br/><br/><pre><code>import urllib<br/><br/>postdata = urllib.urlencode(data)<br/><br/>resp = urllib.urlopen('https://www.sandbox.paypal.com/cgi-bin/webscr', data=postdata)<br/><br/># resp is a file-like object, which means you can iterate it,<br/># or read the whole thing into a string<br/>output = resp.read()<br/><br/># resp.code returns the HTTP response code<br/>print resp.code # 200<br/><br/># resp has other useful data, .info() returns a httplib.HTTPMessage<br/>http_message = resp.info()<br/>print http_message['content-length']  # '1536' or the like<br/>print http_message.type  # 'text/html' or the like<br/>print http_message.typeheader # 'text/html; charset=UTF-8' or the like<br/><br/><br/># Make sure to close<br/>resp.close()<br/></code></pre><br/><br/><p>to open an <code>https://</code> URL, you may need to install PyOpenSSL: <br/><a href="http://pypi.python.org/pypi/pyOpenSSL" rel="nofollow">http://pypi.python.org/pypi/pyOpenSSL</a></p><br/><br/><p>Some distibutions include this, others provide it as an extra package right through your favorite package manager.</p><br/><br/><hr><br/><br/><p><strong>Edit:</strong> Have you called <a href="http://pycurl.sourceforge.net/doc/pycurl.html" rel="nofollow">pycurl.global_init()</a> yet?  I still recommend urllib/urllib2 where possible, as your script will be more easily moved to other systems.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEND EMAIL WITH DJANGO REGISTR
    </pattern>
    <template>
<![CDATA[<p><a href="http://bitbucket.org/ubernostrum/django-registration/" rel="nofollow">django-registration</a> sends an email to the user, e.g. when he or she registers. The process is as follows (if this was your question ...)*:</p><br/><br/><ul><br/><li><p>The user has filled out and submitted the registration form ...</p></li><br/><li><p>in <code>views.py:187</code></p><br/><br/><pre><code>new_user = backend.register(request, **form.cleaned_data)<br/></code></pre></li><br/><li><p>in e.g. <code>backends/default/__init__.py:78</code></p><br/><br/><pre><code>new_user = RegistrationProfile.objects.create_inactive_user(username, email,<br/>   password, site)<br/></code></pre></li><br/><li><p>in <code>models.py:79</code></p><br/><br/><pre><code>if send_email:<br/>    registration_profile.send_activation_email(site)<br/></code></pre></li><br/><li><p>and then in <code>models.py:207</code></p><br/><br/><pre><code>def send_activation_email(self, site):<br/>    ...<br/>    self.user.email_user(subject, message, settings.DEFAULT_FROM_EMAIL)<br/></code></pre></li><br/></ul><br/><br/><p>The last method call goes into <code>django.contrib.auth</code>, especially <a href="http://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.models.User.email_user" rel="nofollow"><code>django.contrib.auth.models.User.email_user</code></a></p><br/><br/><p>P.S. Also, it's crude, but in general a search on the codebase, e.g. with <code>grep</code> or similar tools can show you things like this.</p><br/><br/><p><sub>*changeset <a href="http://bitbucket.org/ubernostrum/django-registration/changeset/073835a4269f/" rel="nofollow">073835a4269f</a></sub></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GEODJANGO SEARCH BY CITI STATE OR ZIP CODE
    </pattern>
    <template>
<![CDATA[<p>First thing you need to do is create a ZipCode model which will be table of geometry objects that represent each zipcode. You'll also need to have another model that you'll be searching, which needs to have a geographic location field. Then you'd do something like:</p><br/><br/><pre><code>zip = 10010<br/>zipcode = ZipCode.objects.get(number=zip)<br/>Store.objects.filter(coordinates__in=zipcode)<br/></code></pre><br/><br/><p>or something to that effect.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INFO FROM PYTHON DICT WITH JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Of course it contains that. That's the JSON that has been returned to you. Use <a href="http://www.json.org/js.html" rel="nofollow">json2.js</a> to decode it to JavaScript objects.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YWAY OF MAKE DJANGO CM PAGE TO BE ONLI ACCESS ( SITE SIDE ) TO ONLI A SELECT FEW
    </pattern>
    <template>
<![CDATA[<p>I don't know Django CMS, but you could do such filtering in middleware - i.e. you could check incoming URL and redirect to login page if current user doesn't have permissions to view it.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/1.1/topics/http/middleware/" rel="nofollow">http://docs.djangoproject.com/en/1.1/topics/http/middleware/</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO VIEW THAT CAN BE CALL BY JQUERI S .GETJSON ( )
    </pattern>
    <template>
<![CDATA[<p>This is relatively straightforward</p><br/><br/><pre><code>def json_view(request):<br/>  username=request.GET.get('username')<br/>  result='successName'<br/>  if username:<br/>    try:<br/>      user=User.objects.get(username=username)<br/>      result='existName'<br/>    except User.DoesNotExist:<br/>      pass<br/>    return HttpResponse(simplejson.dumps({'result': result}))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A SINGL RECORD IN MODEL FOR DJANGO APP
    </pattern>
    <template>
<![CDATA[<p>An easy way is to use the setting's name as the primary key in the settings table. There can't be more of one record with the same primary key, so that will allow both Django and the database to guarantee integrity.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OR FILTER DJANGO
    </pattern>
    <template>
<![CDATA[<p>You're looking for <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="nofollow"><code>Q</code> objects</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BACK DATA FROM A DJANGO VIEW USE AJAX
    </pattern>
    <template>
<![CDATA[<p>a hack to do cross domain scripting is to read the data in using urlopen and returning the data you receive</p><br/><br/><p>while on domain1</p><br/><br/><pre><code>import urlllib2<br/><br/>def getdata(req)<br/>    redirectstr = "http://domain2.com/call/that/returns/data/"<br/>    #make call to domain2<br/>    resp = urllib2.urlopen(redirectstr)<br/>    return HttpResponse( resp.whatever() )<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE UNSIGN FIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>FloatField</code> can accept floating point numbers, negatives included.</p><br/><br/><p>If you need positive-only integers, there's <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#positiveintegerfield">PositiveIntegerField</a>. Positive-only floats are a much rarer need, so I don't think they're natively supported - but you can, of course, implement this restriction programatically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DIFFICULTI LOAD DATA
    </pattern>
    <template>
<![CDATA[<p>The JSON format is not allowed to have comments. Remove the <code>// data.json</code> line and it should work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTP HEADER REQUEST RATHER THAN HTTP URL IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>I don't know about this particular oauth library you are using, so I can't comment on that.</p><br/><br/><p>But,</p><br/><br/><ul><br/><li><p>It can be clearly identified from the traceback, that <code>oauth_request.to_header()</code> returns a dictionary and not a string, that httplib.py expects.</p></li><br/><li><p>The way to set authentication credentials in http headers is as follows:</p></li><br/></ul><br/><br/><p>from <a href="http://stackoverflow.com/questions/720867/http-authentication-in-python">this question</a></p><br/><br/><pre><code>password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()<br/>top_level_url = "http://example.com/"<br/>password_mgr.add_password(None, top_level_url, 'user', 'password')<br/>handler = urllib2.HTTPBasicAuthHandler(password_mgr)<br/>opener = urllib2.build_opener(urllib2.HTTPHandler, handler)<br/>request = urllib2.Request(url)<br/></code></pre><br/><br/><p>Hope it helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI QUERI IN DJANGO ( DATETIM )
    </pattern>
    <template>
<![CDATA[<p>To get the exact behaviour of your example:</p><br/><br/><pre><code>Log.objects.filter(last_updated__gt=the_tag.time_before, last_updated__lt=the_tag.time_after)<br/></code></pre><br/><br/><p>For an inclusive range (equivalent to <code>__gte</code>, <code>__lte</code>) the query is a bit simpler:</p><br/><br/><pre><code>Log.objects.filter(last_updated__range=(the_tag.time_before, the_tag.time_after))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND JSON REQUEST
    </pattern>
    <template>
<![CDATA[<p>If you do the response like you said:</p><br/><br/><blockquote><br/>  <p>return<br/>  render_to_response('mypjt/display.html',context_instance=RequestContext(request,{'dict':<br/>  dict}))</p><br/></blockquote><br/><br/><p>The javascript will receive your response, not the navigator.<br/>I think you can do somethink like this:</p><br/><br/><pre><code>&lt;script&gt;<br/>   $(document).ready(function()<br/>   {<br/>      $('#yourForm').submit();<br/>   });<br/>&lt;/script&gt;<br/><br/>&lt;form id="yourForm" action="/mypjt/my_timer" method="post"&gt;<br/>...<br/>your fields with data, even they are hidden<br/>...<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>So, in django you can do the response like you said:</p><br/><br/><pre><code> def my_timer(request):<br/>     dict={}<br/>     try:<br/>         a=  timer.objects.get(pk=1)<br/><br/>         dict({'flag':1})<br/>         return render_to_response('mypjt/display.html',context_instance=RequestContext(request,{'dict': dict}))<br/>     except:<br/>         dict({'flag':0})<br/>         return render_to_response('mypjt/error_not_found.html',context_instance=RequestContext(request,{'dict': dict}))<br/></code></pre><br/><br/><p>Or, you can do like you were doing but if the query "timer.objects.get(pk=1)" fails, for example, you send back a boolean flag response. So, when it is ok you redirect to the page you prefer.</p><br/><br/><p>I hope it could be useful to you!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND SIMPL WAY TO HANDL JSON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Python standard library has JSON load/dump facility:<br/><a href="http://docs.python.org/library/json.html" rel="nofollow">http://docs.python.org/library/json.html</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV PHP TOGETH WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>I got it, just change a little htaccess and ready, stay this way for those who have the same problem:</p><br/><br/><pre><code>AddHandler fcgid-script .fcgi<br/>AddHandler application/x-httpd-php5s .php<br/># For security reasons, Option followsymlinks cannot be overridden.<br/>#Options +FollowSymLinks<br/>Options +SymLinksIfOwnerMatch<br/>RewriteEngine On<br/>RewriteBase /<br/>RewriteRule ^(subfolder/.*)$ - [L]<br/>RewriteRule ^(media/.*)$ - [L]<br/>RewriteRule ^(django\.fcgi/.*)$ - [L]<br/>RewriteRule ^(.*)$ django.fcgi/$1 [L]<br/></code></pre><br/><br/><p>Thanks!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA RETRIEV FROM MYSQL DATABAS INTO JSON OBJECT USE PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you ever need anything more fancy than just a dump of a specific queryset in JSON, consider using <a href="http://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a> to help automate the creation of APIs.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SELECT MAX FIELD FROM MYSQL WHEN COLUMN IS VARCHAR
    </pattern>
    <template>
<![CDATA[<p>In the spirit of "any help would be much appreciated", you should figure out why it stopped working inside Django (but apparently not inside MySQL) - at 10,000.</p><br/><br/><p>What is the query that is being generated? See <a href="http://stackoverflow.com/questions/971667/django-orm-how-to-view-or-log-the-executed-query">this question</a> for how to find that out.</p><br/><br/><p>I suspect it is because you're adding the +0 to make the sort numeric in your query. I don't think Django supports this naturally, so you have two options:</p><br/><br/><ul><br/><li>People will undoubtedly want to know why you're storing a number and asking for the maximum of it in a VARCHAR column. You could change the column to a <a href="http://dev.mysql.com/doc/refman/5.1/en/numeric-types.html" rel="nofollow">numeric data type</a>.</li><br/><li>You could do what you have to do whenever you want to make some custom SQL call and Django doesn't <em>yet</em> support it: <a href="http://docs.djangoproject.com/en/dev/topics/db/sql/#topics-db-sql" rel="nofollow">write your own raw SQL</a>.</li><br/><li>Edit: You could also patch Django, but this might be a MySQL specific thing, so option #2 is probably your best bet.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VAADIN ( JAVA ) UI FRAMEWORK INSID PYTHON
    </pattern>
    <template>
<![CDATA[<p>Details how to embed a Vaadin app to a web page (made with eg. Django) can be found in the <a href="http://vaadin.com/book/-/page/application.embedding.html" rel="nofollow">Book of Vaadin</a>. Jython is the way to go if you want to run Python scripts in the server side app, but as far as I see it that's not what you are looking for here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GET FOREIGN KEY OBJECT IN SINGL QUERI
    </pattern>
    <template>
<![CDATA[<p>You query <code>Programme</code> and assign to <code>programme</code>, but you never use the result anywhere. Just remove that line.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON MY DJANGO MODEL FOR MY SHOE REVIEW WEBSIT
    </pattern>
    <template>
<![CDATA[<p>You should do:</p><br/><br/><pre><code>ShoeReview.objects\<br/>          .filter(owner_review__ratings__rating_attribute__attribute='overall')\<br/>          .order_by(owner_review__ratings__rating)<br/></code></pre><br/><br/><p>But actually, you are better off using a manager:</p><br/><br/><pre><code>class BestShoesReviewManager(models.Manager):<br/>    def get_query_set(self):<br/>        qs =  super(DahlBookManager, self).get_query_set()<br/>        return qs.filter(owner_review__ratings__rating_attribute__attribute= 'overall')\<br/>                 .order_by(owner_review__ratings__rating)<br/></code></pre><br/><br/><p>This way you can do:</p><br/><br/><pre><code>class ShoeReview(models.Model)<br/><br/>    objects = models.Manager() # The default manager.<br/>    best = BestShoesReviewManager() # The best review manager.<br/></code></pre><br/><br/><p>And so in your code, you can do this:</p><br/><br/><pre><code>ShoeReview.objects.best()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC HTML A DJANGO BACKEND AND A PHP FORUM ON ONE SERVER
    </pattern>
    <template>
<![CDATA[<p>I see no problem with such setup, using lightweight frontend is recommended for django (or any other wsgi app) anyway. Although you should serve static html with nginx itself, not django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SITE MEDIA REL URL PROBLEM
    </pattern>
    <template>
<![CDATA[<p>Wild guess: <code>href="site_media/bat/design/css/bat.css"</code> should be <code>href="/site_media/bat/design/css/bat.css"</code>, urls starting without slash in front of them are resolved relatively to the current url.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVENT WITH JQUERI IN DJANGO ADMIN WHEN NEW INLIN IS AD
    </pattern>
    <template>
<![CDATA[<p>Use the <a href="http://api.jquery.com/live/" rel="nofollow"><code>live</code></a> or <a href="http://api.jquery.com/delegate/" rel="nofollow"><code>delegate</code></a> functions to bind to form elements. They will continue working even after you insert new form elements, and you don't need to re-attach the event handlers every time.</p><br/><br/><p>Related questions:</p><br/><br/><ul><br/><li><a href="http://stackoverflow.com/questions/2238616/binding-dynamically-created-elements-in-jquery">http://stackoverflow.com/questions/2238616/binding-dynamically-created-elements-in-jquery</a></li><br/><li><a href="http://stackoverflow.com/questions/203198/jquery-event-binding-on-dynamically-created-elements">http://stackoverflow.com/questions/203198/jquery-event-binding-on-dynamically-created-elements</a></li><br/><li><a href="http://stackoverflow.com/questions/1525664/jquery-how-to-bind-onclick-event-to-dynamically-added-html-element">http://stackoverflow.com/questions/1525664/jquery-how-to-bind-onclick-event-to-dynamically-added-html-element</a></li><br/><li><a href="http://stackoverflow.com/questions/1474558/adding-a-new-dom-element-want-to-rebind">http://stackoverflow.com/questions/1474558/adding-a-new-dom-element-want-to-rebind</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FILE AS MODEL FOR DJANGO PROJECT
    </pattern>
    <template>
<![CDATA[<p>There's a package to do just this available <a href="http://djangorestmodel.sourceforge.net/" rel="nofollow">here</a>.  I haven't tried it, but looking through the source, it seems to be doing pretty much what you're asking.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAJAX CALLBACK INTO SCOPE OBJECT
    </pattern>
    <template>
<![CDATA[<p>BozoJoe, this should work.</p><br/><br/><pre><code>MyViewport = Ext.extend(MyViewportUi, {<br/>    initComponent: function() {<br/>        MyViewport.superclass.initComponent.call(this);<br/>    },<br/><br/>    LoadRecordsCallback: function(data){<br/>       if(data!='DAJAXICE_EXCEPTION')<br/>      { alert(data); }<br/>      else<br/>      { alert('DAJAXICE_EXCEPTION'); }  <br/>    },<br/><br/>    LoadRecords: function(){<br/>      Dajaxice.Console.GetUserRecords('blah.LoadRecordsCallback');<br/>    }<br/> });<br/><br/> var blah = new MyViewport();<br/> blah.LoadRecords();<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FUNCTION WARN
    </pattern>
    <template>
<![CDATA[<p>I don't know where you read that there is no warnings filtering in Django. Django is just Python, so you can use the Python <code>warnings</code> module.</p><br/><br/><pre><code>import warnings<br/>warnings.filterwarnings("ignore", "No data .*")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1005 WHEN AD A FOREIGN KEY CONSTRAINT ON MYSQL TABL
    </pattern>
    <template>
<![CDATA[<p>I finally fixed the problem thanks to a workaround. The alter works ok on my dev machine while it fails on the host. I didn't find the reason but I succeed to make it working by exporting, migrating on my dev machine and  reimporting.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THREAD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>using <a href="http://code.google.com/p/django-cron/" rel="nofollow">Django-cron</a> is much easier and simple</p><br/><br/><p><strong>EDIT: Added a tip</strong></p><br/><br/><pre><code>from django_cron import cronScheduler, Job<br/>class sendMail(Job):<br/>       # period run every 300 seconds (5 minutes)<br/>        run_every = 300<br/><br/>        def job(self):<br/>                # This will be executed every 5 minutes<br/>                datatuple = check_subscription_finishing()<br/>                send_mass_mail(datatuple)<br/>//and just register it             <br/>cronScheduler.register(sendMail)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PROBLEM WITH DJANGO AND MOD WSGI
    </pattern>
    <template>
<![CDATA[<p>First,</p><br/><br/><ul><br/><li>Since your admin works, the setting with wsgi is good. Don't bother changing/editing it.</li><br/></ul><br/><br/><p>To ensure that it is not a Apache/mod-wsgi setting problem, you can run the development server from the production machine</p><br/><br/><pre><code>python manage.py runserver 0:8080<br/></code></pre><br/><br/><p>Then point your browser to</p><br/><br/><pre><code>http://yoursite.com:8080/<br/></code></pre><br/><br/><p>You must see exactly the same behaviour.</p><br/><br/><p>Then, </p><br/><br/><p>For debugging this problem:</p><br/><br/><ul><br/><li><p>On the python shell on your server, try <code>import tagging</code>. Clearly, from your traceback, <code>import tagging</code> is where it is raising an error and thats why, settings cannot be imported.</p></li><br/><li><p>Then, Just delete the package containing tagging, and do a fresh install by the following command, which knows how to install packages, well.</p></li><br/></ul><br/><br/><p>.</p><br/><br/><pre><code>sudo pip install django-tagging<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRESS TEST IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Why build it?</p><br/><br/><p>There are several available.</p><br/><br/><ol><br/><li>For a single url and many requests try <a href="http://httpd.apache.org/docs/2.0/programs/ab.html" rel="nofollow">ab</a></li><br/><li>For multiple urls and random tests try <a href="http://freshmeat.net/projects/siege/" rel="nofollow">siege</a></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY TROUBL
    </pattern>
    <template>
<![CDATA[<p>Try adding both the directory containing the settings.py file and its parent directory to sys.path. Better still, read '<a href="http://blog.dscpl.com.au/2010/03/improved-wsgi-script-for-use-with.html" rel="nofollow">http://blog.dscpl.com.au/2010/03/improved-wsgi-script-for-use-with.html</a>' and use the WSGI script file contents described right at the end (after you have read the post as to why it is an issue). :-)</p><br/><br/><hr><br/><br/><p>UPDATE 1</p><br/><br/><p>In another comment you post your permissions as 'drw-r--r-- 2 root root vehicles'.</p><br/><br/><p>The 'x' bit isn't set on the directory for anyone. This will cause anything to fail which needs to be able to generate a directory listing to see what is in the directory.</p><br/><br/><p>In other words, look at all your directory permissions and fix things up to be 'drwxr-xr-x'.</p><br/><br/><p>Also, because you have made directories owned by root, if your application needs to write to any directories it will not be able to.</p><br/><br/><p>In summary, directory/file permissions issues.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      D HAT ENTERPRIS 5 LINUX WITH PYTHON 2.5
    </pattern>
    <template>
<![CDATA[<p>I would recommend <a href="http://www.activestate.com/activepython" rel="nofollow">ActivePython</a>, it's pretty brain dead easy to install and it works pretty well with redhat in my experience.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALL THE CHARACT WITH USE REGULAR EXPRESS
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>How can we do it in Django Template</p><br/></blockquote><br/><br/><p>In a Django template? Dead easy.</p><br/><br/><pre><code>{% for char in s %}*{% endfor %}<br/></code></pre><br/><br/><p>Where <code>s</code> is the template variable whose value is <code>bluesky</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FILE DATA IN CORRECT FORMAT
    </pattern>
    <template>
<![CDATA[<pre><code>$("#someid").html(s.join("&lt;br/&gt;"));<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW DO I GO ABOUT CHANG MY SIMPL APP TO USE AJAX
    </pattern>
    <template>
<![CDATA[<p>All you need to do is <a href="http://api.jquery.com/submit/" rel="nofollow">submit</a> the form using ajax</p><br/><br/><p>Example:</p><br/><br/><pre><code>$('#form').bind('submit', function(){<br/><br/>   $.ajax({url:$(this).attr('action'),<br/>           type: "POST",<br/>           data: {//form inputs},<br/>           success:function(response){<br/>              // code to update DOM<br/>           }<br/>          });<br/>  return false;<br/>});<br/></code></pre><br/><br/><p>this would submit the form using ajax and stop page from reload.</p><br/><br/><p>I would recommend you to take a look at <a href="http://www.b-list.org/weblog/2006/jul/31/django-tips-simple-ajax-example-part-1/" rel="nofollow">django ajax example</a>, this has a clean explanation for handling ajax on the django.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV APACH ERROR LOG FOR DEBUG
    </pattern>
    <template>
<![CDATA[<p>You can use django error reporting feature. Have a look at <a href="http://docs.djangoproject.com/en/dev/howto/error-reporting/" rel="nofollow">http://docs.djangoproject.com/en/dev/howto/error-reporting/</a></p><br/><br/><p>Hope it helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUIR HELP IN DJANGO LOCAL VARIABL FORM REFERENC BEFOR ASSIGNMENT
    </pattern>
    <template>
<![CDATA[<p>This will always run:</p><br/><br/><pre><code>return render_to_response('edit_client.html', {'form': form}<br/></code></pre><br/><br/><p>But if <code>request.method</code> is not <code>POST</code>, nothing is assigned to <code>form</code>.</p><br/><br/><p>Fixed code:</p><br/><br/><pre><code>@login_required <br/>def edit_client(request, id=1):<br/> clients_list = Client.objects.filter(pk=id)  <br/> form = ClientForm()<br/> if request.method == 'POST':<br/>  form = ClientForm(request.POST or None)<br/>  if form.is_valid():<br/>   form.save()<br/>   return HttpResponseRedirect('/index/clients/')<br/> return render_to_response('edit_client.html', {'form': form},  context_instance=RequestContext(request))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAYSTACK HOW TO ACCESS THE SPELL SUGGEST ON THE TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>If you have the search query set in the template, you can do:</p><br/><br/><pre><code>{{ sqs.spelling_suggestion }}<br/></code></pre><br/><br/><p>Look at:<br/>    <a href="http://docs.haystacksearch.org/dev/searchqueryset_api.html#spelling-suggestion" rel="nofollow">http://docs.haystacksearch.org/dev/searchqueryset_api.html#spelling-suggestion</a></p><br/><br/><p>for more details.</p><br/><br/><p>For haystack to find the spelling suggestions, the search template should include the field you are looking for. So if you search template includes {{ object.title }}  you should be picking up the spelling suggestion.</p><br/><br/><p>Maybe you forgot to do</p><br/><br/><pre><code>python manage.py update_index<br/></code></pre><br/><br/><p>after you added the lorem note.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOCAT FILE PATH FROM A INMEMORYUPLOADEDFIL DJANGO OBJECT
    </pattern>
    <template>
<![CDATA[<p>Surely the name "InMemory" is a clue that the file exists in memory only, so doesn't have a path?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CSS FILE
    </pattern>
    <template>
<![CDATA[<p>If you use a word <code>view</code> for a typical django view (a method) it is not good idea to create separate css file for each view (unless you have very specific application).</p><br/><br/><p>In general you need to create you css files in such way that:</p><br/><br/><ol><br/><li>general styles that can be applied in many templates are not repeated in multiple css files</li><br/><li>it is easy for you to manage styles in couple of css files</li><br/></ol><br/><br/><p>There is no strict guideline to create <em>css file per view</em> or <em>css file per template</em> in Django as far as I know.</p><br/><br/><p>Basically pointing to some css file in <code>head</code>, which contains styles appropriate to a template is enough here. Of course you need to make sure that you provide correct path to this file. </p><br/><br/><p><strong>You can make one general css with styles that are used by most of your templates and a series of specific css files that are valid only in some specialized templates.</strong></p><br/><br/><p>I also advice to take a look at <a href="http://stackoverflow.com/questions/3062420/django-auto-minifying-css-js-files-before-release">django-compress</a> if you want to go with your site to broader audience - this app makes your static files (like css) smaller and also it helps to concatenate group of css and js files. This has some positive impact on performance without decreasing readability of your code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI CASCAD SELECT BOX
    </pattern>
    <template>
<![CDATA[<p>You could set a hidden field to have the real "state" value, then use jQuery to create the <code>&lt;select&gt;</code> list and, on <code>.select()</code>, copy its value to the hidden field.  Then, on page load, your jQuery code can fetch the hidden field's value and use it to select the right item in the <code>&lt;select&gt;</code> element after it's populated.</p><br/><br/><p>The key concept here is that the State popup menu is a fiction created entirely in jQuery and not part of the Django form.  This gives you full control over it, while letting all the other fields work normally.</p><br/><br/><p>EDIT: There's another way to do it, but it doesn't use Django's form classes.</p><br/><br/><p>In the view:</p><br/><br/><pre><code>context = {'state': None, 'countries': Country.objects.all().order_by('name')}<br/>if 'country' in request.POST:<br/>    context['country'] = request.POST['country']<br/>    context['states'] = State.objects.filter(<br/>        country=context['country']).order_by('name')<br/>    if 'state' in request.POST:<br/>        context['state'] = request.POST['state']<br/>else:<br/>    context['states'] = []<br/>    context['country'] = None<br/># ...Set the rest of the Context here...<br/>return render_to_response("addressform.html", context)<br/></code></pre><br/><br/><p>Then in the template:</p><br/><br/><pre><code>&lt;select name="country" id="select_country"&gt;<br/>    {% for c in countries %}<br/>    &lt;option value="{{ c.val }}"{% ifequal c.val country %} selected="selected"{% endifequal %}&gt;{{ c.name }}&lt;/option&gt;<br/>    {% endfor %}<br/>&lt;/select&gt;<br/><br/>&lt;select name="state" id="select_state"&gt;<br/>    {% for s in states %}<br/>    &lt;option value="{{ s.val }}"{% ifequal s.val state %} selected="selected"{% endifequal %}&gt;{{ s.name }}&lt;/option&gt;<br/>    {% endfor %}<br/>&lt;/select&gt;<br/></code></pre><br/><br/><p>You'll also need the usual JavaScript for reloading the states selector when the country is changed.</p><br/><br/><p>I haven't tested this, so there are probably a couple holes in it, but it should get the idea across.</p><br/><br/><p>So your choices are:</p><br/><br/><ul><br/><li>Use a hidden field in the Django form for the real value and have the select menus created client-side via AJAX, or</li><br/><li>Ditch Django's Form stuff and initialize the menus yourself.</li><br/><li>Create a <a href="http://docs.djangoproject.com/en/dev/ref/forms/widgets/" rel="nofollow">custom Django form widget</a>, which I haven't done and thus will not comment on.  I have no idea if this is doable, but it looks like you'll need a couple <code>Select</code>s in a <code>MultiWidget</code>, the latter being undocumented in the regular docs, so you'll have to read the source.</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON TEXT AS A FRIENDLI LIST IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Perhaps create a custom widget?</p><br/><br/><pre><code>class FlattenJsonWidget(TextInput):<br/>    def render(self, name, value, attrs=None):<br/>        if not value is None:<br/>            parsed_val = ''<br/>            for k, v in dict(value):<br/>                parsed_val += " = ".join([k, v])<br/>            value = parsed_val<br/>        return super(FlattenJsonWidget, self).render(name, value, attrs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON DJANGO CODE GENER
    </pattern>
    <template>
<![CDATA[<p>I have never heard of python code generators. Python is a dynamic language where you can do almost anything. Instead of relying on static code generators known from the Java world, I would argue that you can write a couple of equivalent Python lines in most cases which is way more convenient.</p><br/><br/><p>In case you are looking for a Python lexer/parser, try <a href="http://pyparsing.wikispaces.com/" rel="nofollow">pyparsing</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ) AJAX FORM SUBMIT WITH JQUERY FORM
    </pattern>
    <template>
<![CDATA[<p>just as an idea, I've had similar problem some time ago : <a href="http://code.djangoproject.com/ticket/5868" rel="nofollow">http://code.djangoproject.com/ticket/5868</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHEN REQUEST.POST CONTAIN QUERI STRING IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>If your request is post:</p><br/><br/><blockquote><br/>  <p>request.method == 'POST'</p><br/></blockquote><br/><br/><p>but the requested url contains a query string. e.g:</p><br/><br/><p>/your-url?param1=value-one</p><br/><br/><p>you can still take POST parameters through:</p><br/><br/><blockquote><br/>  <p>request.POST.get("my-field", None)</p><br/></blockquote><br/><br/><p>and query string parameters through:</p><br/><br/><blockquote><br/>  <p>request.GET.get("param1")</p><br/></blockquote><br/><br/><p>althrough, you pick up all parameters at once (POST and GET), through REQUEST:</p><br/><br/><blockquote><br/>  <p>request.REQUEST['param1'] # comes from query string<br/>  request.REQUEST['my-field'] # comes from request BODY (POST)</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE SQUAR BRACKET AT THE END OF A JS VARIABL NAME DURE AJAX CALL
    </pattern>
    <template>
<![CDATA[<p>This is default behavior <a href="http://jquery14.com/day-01/jquery-14" rel="nofollow">in jQuery 1.4+</a>...if you want the post to be <code>&amp;stuffs=a&amp;stuffs=b</code> instead of <code>&amp;stuffs[]=a&amp;stuffs[]=b</code> you should set the  <a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow"><code>traditional</code> option</a> to <code>true</code>, like this:</p><br/><br/><pre><code>$.ajaxSettings({ traditional = true });<br/></code></pre><br/><br/><p>Note this affects all requests...which is usually what you want in this case.  If you want it to be <em>per-request</em> you should use the longer <a href="http://api.jquery.com/jQuery.param/" rel="nofollow"><code>$.ajax()</code></a> call and set <code>traditional: true</code> there.  <a href="http://api.jquery.com/jQuery.param/" rel="nofollow">You can find more info about <code>traditional</code> in the <code>$.param()</code> documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYDEV + DJANGO WORKFLOW. LOCAL ( TEST ) + REMOT SYNCHRONIZATION. USE GIT WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>At my company we've got an entire git repository for each project, including the Django sources that are put in the <code>PYTHONPATH</code> for each project, making Django versions project dependant. The folder structure is something like:</p><br/><br/><pre><code>/.git<br/>/projectname/app1<br/>/projectname/app2<br/>/projectname/manage.py<br/>/django-lib/django/...<br/></code></pre><br/><br/><p>As <code>django-lib</code> is not a Python module, we include both / and /django-lib in the <code>PYTHONPATH</code>. If your project is becoming large, you might want to consider using <a href="http://book.git-scm.com/5_submodules.html" rel="nofollow">git submodules</a> on your apps.</p><br/><br/><p>We've also setup several servers to support the developers. There's a testing server running a central testing database and a setup including Apache with WSGI to make testing on a real server possible, which sometimes is a bit different then the local <code>manage.py</code> the developers use before committing their changes. </p><br/><br/><p>The testing server is updated with the master branch of our git repository. We've made several scripts to allow all developers to do this without letting them login to the server via SSH, but that is just during pre-release. After release, that server will become our staging server, and we'll remove all scripts from it to make it just like our production server. </p><br/><br/><p>Every developer has setup their local project to make sure that it communicates with the central testing database, containing several test data. I myself push my changes from the commandline, but you could also use <a href="http://www.eclipse.org/egit/" rel="nofollow" title="EGit">EGit</a> for this.</p><br/><br/><p>When we've got a release, we put it in a separate branch, called 'release' (obviously) and the production server will pull only from that branch. This is done via SSH, but I don't really know how your server setup looks like, so I guess that that last step is entirely up to you.</p><br/><br/><p>I hope that this has helped you a bit. I won't say that this is the best workflow possible, but it works for us and you should figure out what works for you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI COMPLEX SQL QUERI USE DJANGO ORM ( SUB QUERI WITH A JOIN )
    </pattern>
    <template>
<![CDATA[<p>It'd probably be a bit easier to figure out the appropriate way to do this if you had what you were using for the relevant <code>Models</code>.</p><br/><br/><p>I'm assuming something like the following, based on the specification you mentioned working from:</p><br/><br/><pre><code>class Route(models.Model):<br/>    #bunch of stuff<br/>    pass<br/>class Stop(models.Model):<br/>    #bunch of stuff<br/>    stop_times = models.ManyToManyField(through=StopTime)<br/>class StopTime(models.Model):<br/>    trip = models.ForeignKey(Trip)<br/>    stop = models.ForeignKey(Stop)<br/>    # bunch of additional meta about this M2M table<br/>    pass<br/>class Trip(models.Model):<br/>    route = models.ForeignKey(Route)<br/>    # bunch of stuff<br/></code></pre><br/><br/><p>If that's the case... you should be able to do something like</p><br/><br/><pre><code>Route.objects.filter(trip__stop__id=my_stop_id)<br/></code></pre><br/><br/><p>to get all <code>Route</code> objects that go through a given <code>Stop</code> with a primary key <code>id</code> equal to <code>my_stop_id</code>, which I'm assuming is an integer as per your post.</p><br/><br/><p>I apologize if the syntax is a bit off, as I haven't needed to do many-to-many relationships using an explicit extra table. Some adjustment may also be needed if you have to (or choose to) use the <code>related_name</code> parameter for any the foreign keys or the many-to-many-field.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SIGNAL WORK
    </pattern>
    <template>
<![CDATA[<p>Django signals are synchronous. The handlers are executed as soon as the signal is fired, and control returns only when all appropriate handlers have finished.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON OFF OF A FAT32 FILESYSTEM
    </pattern>
    <template>
<![CDATA[<p>I think you want to tell Git to ignore the file permissions.  See this question: <a href="http://stackoverflow.com/questions/1580596/how-do-i-make-git-ignore-mode-changes-chmod">How do I make git ignore mode changes (chmod)?</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB FRAMEWORK FOR MY REQUIR WORDPRESS VS DJANGO
    </pattern>
    <template>
<![CDATA[<p>I'm not sure if it will suit your needs, but if you're considering Django, you might also take a look at <a href="http://www.web2py.com" rel="nofollow">web2py</a>, which is another well-integrated full-stack Python framework. There are existing <a href="http://beta.qa-stack.com/qastack/default/index" rel="nofollow">Q&amp;A</a>, <a href="http://instant2press.appspot.com/" rel="nofollow">blog/CMS</a>, and <a href="http://instant2press.appspot.com/" rel="nofollow">discussion forum</a> apps (though not very mature). Plus, web2py makes it about <a href="http://web2py.com/book/default/chapter/00" rel="nofollow">as easy as it can get</a> to build your own functionality.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NUMBER OF RESULT FROM DJANGO S RAW ( ) QUERI FUNCTION
    </pattern>
    <template>
<![CDATA[<p><strike>I presume you're talking about the <code>raw()</code> queryset method. That returns a queryset just like any other. So of course you can call <code>.count()</code> on it, just like you would on any other ORM query.</strike></p><br/><br/><p><strong>Edit</strong> Shows what happens when you don't check. As you note, <code>.raw()</code> returns a RawQuerySet which doesn't have a count method - and neither does it support <code>len()</code>. The only way to get the length is to iterate through the queryset and count them:</p><br/><br/><pre><code>sum(1 for result in results)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THROUGH LIST IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>What is <code>mylist</code>? If you want to iterate over multiple lists, perhaps you should <code>zip</code> them and pass them into the template? Then you can use something like</p><br/><br/><pre><code> {% for x,y in zipped_list %} <br/></code></pre><br/><br/><p>and use both the items rather than the indexing thing you're trying.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXML LOAD STR EQUIVAL PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>from xml.dom.minidom import *</p><br/><br/><pre><code>my_xml_string = """<br/>&lt;root&gt;<br/>      &lt;content&gt;<br/>        &lt;one&gt;A value&lt;/one&gt;<br/>        &lt;two&gt;Here goes for ...&lt;/two&gt;<br/>      &lt;/content&gt;<br/>&lt;/root&gt;"""<br/><br/>xml = parseString(xml_string)<br/>result = xml.getElementsByTagName('one')[0].firstChild.data<br/></code></pre><br/><br/><p>This did the trick, for now!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INSTAL ON A MAC RUN LEOPARD
    </pattern>
    <template>
<![CDATA[<p>Most likely you have more than one version of Django installed; note the path (<code>/usr/local/bin/django-admin.py</code>) in the error message.  You may also not have your PATH environment variable set up correctly so that the MacPorts paths appear before <code>/usr/local/bin</code> (where you may have a link to a python.org python) and <code>/usr/bin</code> (where the Apple-supplied python is).  Your PATH should like something like this:</p><br/><br/><pre><code>$ echo $PATH<br/>/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin:/opt/local/bin:/usr/local/bin:/usr/bin:/bin # and so forth<br/></code></pre><br/><br/><p>If not, you should modify the appropriate shell startup script, probably <code>.bash_profile</code>, to modify PATH permanently.</p><br/><br/><p>You can test whether it works by explicitly invoking the script with the MacPorts python:</p><br/><br/><pre><code>$ /opt/local/bin/python2.6 /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/django/bin/django-admin.py<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESET STYLE DEFIN IN AN UNTOUCH STYLESHEET
    </pattern>
    <template>
<![CDATA[<p>The default stylesheet for HTML documents, without any overrides, is defined by the W3C. You can find the full default stylesheet here: <a href="http://www.w3.org/TR/CSS2/sample.html" rel="nofollow">http://www.w3.org/TR/CSS2/sample.html</a></p><br/><br/><p>Alternatively, you could use Firebug in Firefox (or any similar tool) to view the styles of an <code>&lt;hr /&gt;</code> element on a test page without any styles applied.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL ON MAC
    </pattern>
    <template>
<![CDATA[<p>You need to start the server.  You should be able to run:</p><br/><br/><pre><code>sudo /opt/local/share/mysql5/mysql/mysql.server start<br/></code></pre><br/><br/><p>You can set it to run on boot with:</p><br/><br/><pre><code>sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql5.plist<br/></code></pre><br/><br/><p>There is a <a href="http://2tbsp.com/content/install_and_configure_mysql_5_macports" rel="nofollow">useful guide</a> with other details.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL SETUP
    </pattern>
    <template>
<![CDATA[<p>You need to install MySQLdb: <a href="http://sourceforge.net/projects/mysql-python/" rel="nofollow">http://sourceforge.net/projects/mysql-python/</a></p><br/><br/><p>This can be a painful process depending on your setup.  See other discussions on SO regarding MySQLdb install on mac os x:</p><br/><br/><p><a href="http://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x">http://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x</a></p><br/><br/><p>EDIT:  Sorry, skimmed past the fact that you already installed MySQLdb via py26-mysql, but this error seems to point to something that went wrong with that install.  I've had lots of problems with MySQLdb on Mac OS X, always something different I have to do to make it work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAC PORT MYSQL INSTAL
    </pattern>
    <template>
<![CDATA[<p>The command for the client is normally mysql (see <a href="http://dev.mysql.com/doc/refman/5.1/en/connecting-disconnecting.html" rel="nofollow">MySql docs</a>) However in macports they have appended the major version number so try mysql5 </p><br/><br/><p>The python error is only a depreciation so can be ignored </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REPLAC A BUNCH OF HTML HOW TO UPDAT THE ASSOCI JQUERI ACTION LIKE DRAG AND DROP
    </pattern>
    <template>
<![CDATA[<p>Without seeing your code, the only advice I can think of is to pull the portions of your code that call <code>.draggable</code>, etc into a function (probably one that takes a selector), and add that function as a callback after your ajax call completes.</p><br/><br/><p>If that doesn't make sense, or is not doable for some reason, and you can put up some working example code that demonstrates the problem, I or someone else can help you find a solution.</p><br/><br/><p>Edit: It looks like you might need to stick the call to the above javascript function in a script tag in your response, if you're set on using taconite.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIX MANAG AND RAW DB COMMIT TRANSACTIONMANAGEMENTERROR
    </pattern>
    <template>
<![CDATA[<p>You could try a workaround - place a <code>transaction.commit()</code> right after the <code>model_1.save()</code>. I think you need to isolate raw and ORM transactions.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO.FORMS.MODELCHOICEFIELD BOUND WITH A FOREIGN KEY AND A DEFAULT VALU
    </pattern>
    <template>
<![CDATA[<p>For the core of your question is, as to how to set initial value for ForeignKey field, check the code snippet below. </p><br/><br/><p>Note that when you provide initial value to a ForeignKey field, you don't need to pass the object. Pass it the id/pk of that object, and your problem will be solved.</p><br/><br/><pre><code>initial = {<br/>           'update_date': datetime.datetime.now(),<br/>           'creation_date': datetime.datetime.now(),<br/>           'update_author': 1 # not Author.objects.get(id=1)<br/>          }<br/>if kwargs.has_key('initial'):<br/>    kwargs['initial'].update(initial)<br/>else:<br/>    kwargs['initial'] = initial<br/># Initializing form only after you have set initial dict<br/>super(DataReviewsForm,self).__init__(*args, **kwargs)<br/><br/>self.fields['update_date'].widget = forms.HiddenInput()<br/>self.fields['creation_date'].widget = forms.HiddenInput()<br/>self.fields['update_author'].widget = forms.HiddenInput()<br/></code></pre><br/><br/><p>A lot cleaner way to do it. </p><br/><br/><p><strong>Disabling the fields</strong><br/>As Form exposes 'fields widgets' only after invoking constructor, any updation <em>[be it widget override, or changing attributes of widget]</em>, can be done only after that. Or, you can do it in form field definition, which doesn't apply on your case. In short, disabling the field is better after super constructor call.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BATCH EXIST CHECK + SAVE DJANGO
    </pattern>
    <template>
<![CDATA[<p>You will want to load the CSV file, then go through each row using the get_object_or_create method to check and see if the object exists, if not then it will create it for you.  If you show us the models.py code we may be able to help you out more specifically.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TO WORK WITH ECLIPS
    </pattern>
    <template>
<![CDATA[<p>I'm just starting myself.  Apparently there's a MySQLdb plugin (sorry if that's not the right term) that you need to use in addition to a standard MySQL install.  This is so Python can communicate with MySQL.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASS A JSON OBJECT FROM A DJANGO VIEW.PI TO A .J FILE
    </pattern>
    <template>
<![CDATA[<p>I believe a JSON object can be passed to a template like any other template variable. Let us assume that you are passing a queryset as JSON:</p><br/><br/><pre><code>def my_view(request, *args, **kwargs):<br/>    queryset = MyModel.objects.filter(**conditions)<br/>    from django.core.serializers import serialize<br/>    json = serialize("json", queryset)<br/>    context = dict(json = json)<br/>    render_to_response(..., context, ...)<br/></code></pre><br/><br/><p>And inside the template:</p><br/><br/><pre><code>&lt;script&gt;<br/>    var data = {{ json }};<br/>&lt;/script&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH JQUERI BASIC HELP
    </pattern>
    <template>
<![CDATA[<p>You obviously have to have a model for storing searches and a form for taking user input (search string).</p><br/><br/><p>This will create a database table which will hold the saved search terms and relate the search terms to specific user.</p><br/><br/><p><strong>models.py</strong></p><br/><br/><pre><code>class Search(models.Model):<br/>    user = models.ForeignKey(User)<br/>    search = models.CharField(max_length=255)<br/></code></pre><br/><br/><p>It is easiest to just create a model form which will have input field in which user can write his search term, and also validates posted data as all user input should be validated:</p><br/><br/><p><strong>forms.py</strong></p><br/><br/><pre><code>class SearchForm(forms.ModelForm):<br/>    class Meta:<br/>          model = Search<br/></code></pre><br/><br/><p>When you post the form data with AJAX call from the form to the save view, post data will be validated, a instance with the search term will be save in the database after you do the search for the data. </p><br/><br/><p>All left to do then is send all the data in the context dict to you template and render it.<br/>Once rendered you construct a dictionary with data, dump it to JSON and return it with simple HttpResponse with specific mimetype <code>mimetype="application/json"</code>.</p><br/><br/><p><strong>views.py</strong></p><br/><br/><pre><code>def save(request):<br/>    if request.method == 'POST':<br/>        form = SearchForm(request.POST):<br/>        if form.is_valid():<br/>             # Do some search with forms.cleaned_data['search'] and save it to result<br/>             result = #SomeSearchCode...<br/>             instance = form.save()<br/><br/>    html = render_to_string('ajax_template.html', {'search':instance, 'result':result}, RequestContext(request))<br/>    if request.is_ajax():<br/>         response = {'result':"Success", 'html':html}<br/>         return HttpResponse(json.dumps(response), mimetype="application/json")<br/>    retrun render_to_response('full_template.html', {'html':html }, RequestContext(request)<br/></code></pre><br/><br/><p><strong>templates</strong></p><br/><br/><p>As for templates, <code>full_template.html</code> is the one that shows the search form and includes <code>ajax_template.html</code> to show results so we can easily append this with JavaScript. This way everything works even without JavaScript.</p><br/><br/><p><strong>jQuery</strong></p><br/><br/><p>AJAX call is also strait forward. You collect the data from the form and send it with <code>data</code> to the view which will receive it as <code>request.POST</code>. <code>success</code> is what handles the data you return from your save view. In this example it appends html rendered in the view to some random div.</p><br/><br/><pre><code>var dataString = 'search='+ $("search-field").val();;<br/>$(function() {<br/>    $("#search-form").live("click", function() {<br/>        $.ajax({<br/>            type: "POST",<br/>            url:  $("#search-form").attr("action"),<br/>            data: dataString,<br/>            dataType: "json",<br/>            success: function(data, textStatus, XMLHttpRequest) {<br/>                jQuery(data["html"]).appendTo(".some-div");<br/>            }<br/>        });<br/>        return false;<br/>    });<br/>});<br/></code></pre><br/><br/><p>This is not tested but i hope it shed some light on the process.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GRAPPELLI FILEBROWS AND TINI MCE INSERT IMAG DIALOG
    </pattern>
    <template>
<![CDATA[<p>The current grappelli version is 2.1. It should work without problems with django 1.2.1 and the current filebrowser version! I think the screenshots on the google code site come from an older version, that had bookmark support etc included, but was removed from the actual version because this functionality (also dashboard etc) should be handled through admin-tools now! As you maybe already now there's grappelli-admin-tools (http://bitbucket.org/fetzig/grappelli-admin-tools/overview) which already enables you to customize your index page and the bookmarks functionality should be moved there as well! Make sure to read the install instructions carefully: <a href="http://bitbucket.org/fetzig/grappelli-admin-tools/wiki/Home" rel="nofollow">http://bitbucket.org/fetzig/grappelli-admin-tools/wiki/Home</a> (do not forget to execute the python scripts at the end!) tinymce/filebrowser is working for me with this combination....</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA FROM SQL QUERI IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>I'm not sure I understand exactly your question or why you would have to do a for loop for each key if you used dictionary format.</p><br/><br/><p>If your news is always in the format you specified: <code>(title, text, date, image)</code>, set up your template like so:</p><br/><br/><pre><code>&lt;ul&gt;<br/>    {% for item in news %}<br/>    &lt;li&gt;<br/>        &lt;div&gt;<br/>            &lt;span&gt;{{ item.0 }}&lt;/span&gt; &lt;!-- title --&gt;<br/>            &lt;img src="{{ item.3 }}" /&gt; &lt;!-- image --&gt;<br/>            &lt;span&gt;{{ item.1 }}&lt;/span&gt; &lt;!-- text --&gt;<br/>            &lt;span&gt;{{ item.2 }}&lt;/span&gt; &lt;!-- date --&gt;<br/>        &lt;/div&gt;<br/>    &lt;/li&gt;<br/>    {% endfor %}<br/>&lt;/ul&gt;<br/></code></pre><br/><br/><p>Although dictionaries are certainly nice for readability.. <code>{{ item.text }}</code> is better than <code>{{ item.1 }}</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUERI ESPECI CARACT
    </pattern>
    <template>
<![CDATA[<p>I think the better way is to use a <a href="http://en.wikipedia.org/wiki/Full_text_search" rel="nofollow">Full Text search</a> engine , Here is a list of Full Text search engine that can be used with django :</p><br/><br/><ul><br/><li><a href="https://github.com/dcramer/django-sphinx" rel="nofollow">Sphinx</a></li><br/><li><a href="http://whoosh.ca/" rel="nofollow">whoosh</a></li><br/><li><a href="http://code.google.com/p/djapian/" rel="nofollow">Djapian (Xapian)</a></li><br/></ul><br/><br/><p>And wee shouldn't forget <a href="http://haystacksearch.org/" rel="nofollow">Haystack</a> which is a proxy that can use different search engine like solr, whoosh ...;</p><br/><br/><p>You can also use your database Full Text search without using a third library something like <a href="http://www.mercurytide.co.uk/news/article/django-full-text-search/" rel="nofollow">this</a>.  </p><br/><br/><p><strong>EDIT:</strong><br/>from the OP comment, the QuerySet API offer a full text search feature that work only with MySQL check <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#search" rel="nofollow">here</a>. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DELICI APP USE DJANGO AND GOOGL APP ENGIN
    </pattern>
    <template>
<![CDATA[<p><a href="http://code.google.com/appengine/articles/django-nonrel.html" rel="nofollow">Googled that for you.</a> :)</p><br/><br/><p>(Note: that article replaces the <a href="http://code.google.com/appengine/articles/django.html" rel="nofollow">previous instructions</a> for running Django on GAE.)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POSTGR ON RED HAT
    </pattern>
    <template>
<![CDATA[<p>Red hat comes with a build of postgres, which can conflict with a custom installation. Python uses <code>pg_config</code> to configure the psycopg2 build. I installed postgres into <code>/usr/local/pgsql/</code>, but calling <code>which pg_config</code> returned <code>/usr/bin/pg_config/</code>.</p><br/><br/><p>In the psycopg2 build directory, there is a file <code>setup.cfg</code>, which lets you explicitly define the path to <code>pg_config</code>:</p><br/><br/><pre><code>pg_config=/usr/local/pgsql/bin/pg_config<br/></code></pre><br/><br/><p>Setting this one parameter and re-compiling solved my problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STAL DAJAXIC PROPERLI
    </pattern>
    <template>
<![CDATA[<p>Found that I shoulnd't have configured that Nginx serves my js statically, resolved!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TABL WITH DAJAXIC IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Use something similar like this:</p><br/><br/><pre><code>from django.template.loader import render_to_string<br/>from django.utils import simplejson<br/>from dajaxice.core import dajaxice_functions<br/><br/>def temperature(request):<br/>  temperature_dict = {}<br/>  for filter_device in TemperatureDevices.objects.all():<br/>      get_objects = TemperatureData.objects.filter(Device=filter_device)<br/>      current_object = get_objects.latest('Date')<br/>      current_data = current_object.Data<br/>      temperature_dict[filter_device] = current_data<br/>  table = render_to_string('temp.html', {'temperature': temperature_dict})<br/>  return simplejson.dumps({'table':table})<br/><br/>dajaxice_functions.register(temperature)<br/></code></pre><br/><br/><p>And as JS callback, assign 'table' to your html container... (It's only an example):</p><br/><br/><pre><code>function my_callback(data){<br/>    if(data!=Dajaxice.EXCEPTION){<br/>        document.getElementById('your_table_container_id').innerHTML = data.table;<br/>    }<br/>    else{<br/>        alert('Error');<br/>    }<br/>}<br/></code></pre><br/><br/><p>Hope this help you.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI IN DJANGO TO USE WITH DAJAXIC OR AJAX
    </pattern>
    <template>
<![CDATA[<p>I'm taking the "using just Django" part of your question to mean that you're not interested in using JavaScript to generate the necessary DOM objects to insert into the page.</p><br/><br/><p>As such, my first thought would be to have a Django template that you render in your view and return in your JSON.  For example, say you have a template called '_data_table.html':</p><br/><br/><pre><code>&lt;tr&gt;<br/>{% for label, value in table %}<br/>&lt;td&gt;{{ label }}&lt;/td&gt;<br/>&lt;td&gt;{{ value }}&lt;/td&gt;<br/>{% endfor %}<br/>&lt;/tr&gt;<br/></code></pre><br/><br/><p>Your original HTML could be modified to look like this:</p><br/><br/><pre><code>&lt;div id="test"&gt;<br/>{% include '_data_table.html' %}<br/>&lt;/div&gt;<br/></code></pre><br/><br/><p>And you could change your view to look something like this:</p><br/><br/><pre><code>from django.template.loader import render_to_string<br/><br/>def temperature(request):<br/>    temperature_dict = {}<br/>    for filter_device in TemperatureDevices.objects.all():<br/>        get_objects = TemperatureData.objects.filter(Device=filter_device)<br/>        current_object = get_objects.latest('Date')<br/>        current_data = current_object.Data<br/>        temperature_dict[filter_device] = current_data<br/><br/>    table = render_to_string('_data_table.html', {'table': temperature_dict})<br/>    return simplejson.dumps({'table': table})<br/></code></pre><br/><br/><p>NOTE: This is untested code :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECEIV JQUERY.GET ( ) IN DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>First, you want to anonymous function here, like this:</p><br/><br/><pre><code>$(document).ready(function() {<br/>  $.get("/index/"); <br/>});<br/></code></pre><br/><br/><p>Then, this only gets the response, it doesn't do anything with it, if you want to do something with the content, do it in the callback, like this:</p><br/><br/><pre><code>$(document).ready(function() {<br/>  $.get("/index/", function(response) {<br/>    alert(response);<br/>  }); <br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON HOW TO CHECK IF USER IS LOG IN ( HOW TO PROPERLI USE USER.IS AUTHENT )
    </pattern>
    <template>
<![CDATA[<p><code>is_authenticated</code> is a function. You should call it like</p><br/><br/><pre><code>if request.user.is_authenticated():<br/>    # do something if the user is authenticated<br/></code></pre><br/><br/><p>As Peter Rowell pointed out, what may be tripping you up is that in the default Django template language, you don't tack on parenthesis to call functions. So you may have seen something like this in template code:</p><br/><br/><pre><code>{% if user.is_authenticated %}<br/></code></pre><br/><br/><p>However, in Python code, it is indeed a method in the <code>User</code> class.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + II +
    </pattern>
    <template>
<![CDATA[<p>This is a cut and paste from my response on the mailing list. I suppose either here or there would be fine for further questions.</p><br/><br/><p><a href="http://groups.google.com/group/pyisapie/browse_thread/thread/af7dac9398336e67?hl=en_US" rel="nofollow">http://groups.google.com/group/pyisapie/browse_thread/thread/af7dac9398336e67?hl=en_US</a></p><br/><br/><hr><br/><br/><p>The module isn't supported at all and the Django folks didn't get around to including it in the core, so it shouldn't be considered when trying to get PyISAPIe+Django working.</p><br/><br/><p>If you look in the Examples folder, you'll see some info on how to get it all set up with WSGI only, which is a better long-term solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO DEFAULT MODEL SET
    </pattern>
    <template>
<![CDATA[<p>You can override Model behavior in Django largely through the use of an <a href="http://docs.djangoproject.com/en/dev/ref/models/options/" rel="nofollow">inner <code>Meta</code> class</a></p><br/><br/><ul><br/><li><a href="http://docs.djangoproject.com/en/dev/ref/models/options/#db-table" rel="nofollow"><code>db_table</code></a> allows you to rename the table name</li><br/><li>specifying another field as the primary key will have it use that rather than a surrogate key (not in the <code>Meta</code> class, just in the model itself)</li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APP ENGIN GET HTML ERROR RESPONS WHEN DO HTTP POST REQUEST ( HTTP GET WORK )
    </pattern>
    <template>
<![CDATA[<p>As Nick Johnson said in his comment, try a tool that forms requests properly for you.</p><br/><br/><p>Another common source of these sorts of errors is trying to parse a GET request on the server (for arguments or whatever) while you're getting  a post request.</p><br/><br/><p>Also something that always gets me, but that's a 403, is csrf protection. Remember to turn it off for requests you want to make via curl and similar :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CHECK THE MIMETYP OF A FILE UPLOAD TO YOUR SERVER
    </pattern>
    <template>
<![CDATA[<p>UploadedFile.content_type</p><br/><br/><p>Check <a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs</a> for more info</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MAC OS X TROUBL WITH LOCAL DJANGO + PYDEV INSTAL WORK WITH REMOT MYSQL
    </pattern>
    <template>
<![CDATA[<p>In a word, no.  You need the <em>client</em> side libraries of MySQL but you don't need the server components.  Most package managers provide each as separate packages.</p><br/><br/><p>MySQL-python, AKA MySQLdb, is <em>not</em> a client module per se.  It is a wrapper or interface between Python programs and the standard MySQL client libraries. MySQLdb conforms to the <a href="http://www.python.org/dev/peps/pep-0249/" rel="nofollow">Python standard DB API</a>. There are other conforming adapters implemented for other database managers.  Using the common API makes it much easier to write database-independent code in Python; the adapters handle (much of) the messy differences among the various database client libraries.  Thus, you do need to install MySQL client libraries; there are several ways to do this: the easiest options are probably downloading prebuilt libraries from mysql.com or you can use a package manager, like MacPorts, to install them and other dependencies.</p><br/><br/><p>For OS X 10.6, because of the potential gotchas in getting all of the needed pieces installed in a compatible manner, I highly recommend using a total solution from MacPorts to get Python MySQL support.  See the answer <a href="http://stackoverflow.com/questions/3272493/upgraded-python-and-cant-get-mysqldb-to-work/3272997#3272997">here</a> for more details.  MacPorts even provides a Django port.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>How can I add an index (on some field)? Can I do it through the Django Model Layer?</p><br/></blockquote><br/><br/><p>You can. Take a look at the <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#db-index" rel="nofollow"><code>Field.db_index</code></a> option.</p><br/><br/><blockquote><br/>  <p>If I want to migrate some old data into these new DB tables/models, will I have to write some script myself or does Django provide schema to schema mapping tools?</p><br/></blockquote><br/><br/><p>Django does not have a built in tool to do data migration. For migrating existing data you will have to write a custom script. This <em>may</em> be possible using an external migration tool (such as South, see below) but I haven't tried it.</p><br/><br/><blockquote><br/>  <p>Lastly If I need to change the schema for the existing Django Models, then what's the easiest way to do this? I know this depends on my schema but is it as simple as create a new column &amp; run python manage.py syncdb ?</p><br/></blockquote><br/><br/><p>Use a migration tool. <a href="http://south.aeracode.org/" rel="nofollow">South</a> is one of the popular and effective ones out there. There are others too. Using a tool will make your life much more easier for many reasons. For e.g. <code>syncdb</code> will not add new columns, only new tables. </p><br/><br/><blockquote><br/>  <p>How do I profile MySQL db of all the queries I run from Django Models? I am looking for something like DEBUG=True and TEMPLATE_DEBUG=True kind of solution, where I'll get the query performance (runtime etc.) on the browser.</p><br/></blockquote><br/><br/><p>One of the ways to accomplish this is to use this classic <a href="http://djangosnippets.org/snippets/93/" rel="nofollow">Django snippet</a>. Using the snippet you can append statistics about the queries fired to render a page to the bottom of the page if <code>DEBUG</code> is set.</p><br/><br/><p><strong>Update</strong></p><br/><br/><p>Another way to display the debug information is to use the <a href="http://github.com/robhudson/django-debug-toolbar" rel="nofollow">django-debug-toolbar</a>. Thanks <a href="http://stackoverflow.com/users/150647/diegueus9">@diegueus9</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTERFAC ERROR ONLI OCCUR IF RAN IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Since it mentions the character set, my gut says you are running a different Django/Python/something from the command line than you are from the webserver. In your settings file, turn on <code>DEBUG=True</code>, restart the server, and then run this again. In particular, look at the list of paths shown. If they are not <em>exactly</em> what you expect them to be, then this is a Red Flag.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX FORM RELOAD PAGE INSTEAD OF SEND REQUEST
    </pattern>
    <template>
<![CDATA[<p>Your form has id 'form' and class 'shoutbox-form', so your selector should be</p><br/><br/><pre><code>$("#form").submit(function(){<br/></code></pre><br/><br/><p>or</p><br/><br/><pre><code>$(".shoutbox-form").submit(function(){<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX FILE UPLOAD PROBLEM CSRF
    </pattern>
    <template>
<![CDATA[<p>The whole premise of that linked article is wrong. You don't need to worry about the CSRF token - CSRF protection is automatically disabled for Ajax uploads, since there is no way of making it work reliably. See <a href="http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">the documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETTINGS.PI SEPAR LOCAL AND GLOBAL CONFIGUR
    </pattern>
    <template>
<![CDATA[<p>Yes, definitely. The settings.py file is just Python, so you can do anything in there - including setting things dynamically, and importing other files to override.</p><br/><br/><p>So there's two approaches here. The first is not to hard-code any paths, but calculate them dynamically. </p><br/><br/><pre><code>PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))<br/>TEMPLATE_DIRS = [<br/>    os.path.join(PROJECT_ROOT, "templates"),<br/>]<br/></code></pre><br/><br/><p>etc. The magic Python keyword <code>__file__</code> gives the path to the current file.</p><br/><br/><p>The second is to have a <code>local_settings.py</code> file outside of SVN, which is imported at the <em>end</em> of the main settings.py and overrides any settings there:</p><br/><br/><pre><code>try:<br/>    from local_settings import *<br/>except ImportError:<br/>    pass<br/></code></pre><br/><br/><p>The try/except is to ensure that it still works even if local_settings is not present.</p><br/><br/><p>Naturally, you could try a combination of those approaches.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO AND WORDPRESS BASE ON UBUNTU AND NGINX
    </pattern>
    <template>
<![CDATA[<p>If you are trying to integrate a previously existing Wordpress database you can use Django's <code>./manage.py inspectdb</code> to autogenerate models for you. Wordpress has an extremely simplistic database, it would probably do a fairly decent job. Alternately you could use <a href="https://github.com/stephenmcd/mezzanine" rel="nofollow">mezzanine</a> which can import wordpress data, and is a fairly nice blog built on top of Django. Finally you can just edit your nginx.conf and have nginx serve wordpress from one path/domain and django from another.</p><br/><br/><p>Example nginx.conf (with wordpress on blog.example.com and django on example.com):</p><br/><br/><pre><code># wordpress<br/>server {<br/>    listen 80;<br/>    server_name blog.domain.com;<br/><br/>    root /path/to/wordpress;<br/>    index index.html index.php;<br/><br/>    location ~ .php$ {<br/>        expires    off;<br/>        include fastcgi_params;<br/>        fastcgi_pass    127.0.0.1:9000;<br/>        fastcgi_index   index.php;<br/>        fastcgi_param   SCRIPT_FILENAME  /path/to/wordpress/$fastcgi_script_name;<br/>    }<br/>}<br/><br/># django<br/>server {<br/>    listen 80;<br/>    server_name domain.com;<br/><br/>    location / {<br/>        uwsgi_pass  127.0.0.1:3031;<br/>        include uwsgi_params;<br/>    }<br/>}<br/></code></pre><br/><br/><p>Alternately you could stick wordpress into a subfolder, like /blog.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CREAT SINGLETON TABL IN DJANGO MYSQL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>This is a bit ugly, and doesn't enforce the constraint at the MySQL level.</p><br/></blockquote><br/><br/><p>If you are worried about enforcement you ought to look at Django's <a href="http://docs.djangoproject.com/en/dev/ref/models/instances/?from=olddocs#validating-objects" rel="nofollow">model validation</a> methods. You can write a custom <code>validate_unique</code> that will raise a <code>ValidationError</code> if <code>HitchingPost.objects.count() != 0</code>.</p><br/><br/><pre><code>class HitchingPost(models.Model):<br/>    ...<br/>    def validate_unique(self, exclude = None):<br/>        from django.core.exceptions import ValidationError, NON_FIELD_ERRORS<br/>        if HitchingPost.objects.count() != 0:<br/>            raise ValidationError({NON_FIELD_ERRORS: ["There can be only one!"]})<br/></code></pre><br/><br/><blockquote><br/>  <p>Is there a better solution?</p><br/></blockquote><br/><br/><p>Hard to say without getting knowing more about your broader requirement. </p><br/><br/><blockquote><br/>  <p>Is there a MySQL field type which can only have one value (boolean is the smallest I've found, having two possibilities)? A base-0 digit is the nearest I've come to expressing the concept.</p><br/></blockquote><br/><br/><p>You can try a custom single element <code>enum</code>. I've never tried anything like it, so take my advice with a pinch of salt.</p><br/><br/><blockquote><br/>  <p>Is there a mathematical name for such a thing?</p><br/></blockquote><br/><br/><p><code>Set-once-constant</code>? I made that up. In truth I have no idea. Better people here will help you out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM VALID INCLUD THE USE OF SESSION DATA
    </pattern>
    <template>
<![CDATA[<p>You could override the <code>__init__</code> method for your form so that it takes <code>request</code> as an argument.</p><br/><br/><pre><code>class MyForm(forms.Form):<br/>    def __init__(self, request, *args, **kwargs)<br/>        self.request = request<br/>        super(MyForm, self).__init__(*args, **kwargs)<br/><br/>    def clean(self):<br/>        if not self.request.session.get('file_downloaded', False):<br/>            raise ValidationError('File not downloaded!')<br/><br/>def my_view(request):<br/>    form = MyForm(request, data=request.POST)<br/></code></pre><br/><br/><p>This keeps all the validation logic in the form.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ITYERROR WITH DJANGO M2M RELAT
    </pattern>
    <template>
<![CDATA[<p>Usually you see errors like that when trying to add to an intermediate table if the row being added duplicates the unique-together constraint for the FK's. I'm guessing that in the example you provided "329051" is a Post id and "1827414" is a Tag id. </p><br/><br/><p>Normally in Django you can call the add() method repeatedly to add the same instance and Django takes care of everything for you. I'm assuming the model manager maintains some state to help it determine if each add() represents a new or existing row and if the row appears to be new it attempts an insert. </p><br/><br/><p>That in itself doesn't explain why you're getting the error. You mention "is responsible for quite some concurrency in the db operations.". Without knowing what that means, I'm guessing that you could be getting a race condition where multiple thread/processes are attempting to add the same new tag around the same time and both are attempting inserts. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEBSIT HAVE A JQUERI AJAX ERROR AND THERE ARE NO RESPONS HEADER
    </pattern>
    <template>
<![CDATA[<p>Make sure you <code>return false</code> from the form submit handler or the ajax call won't have time to execute:</p><br/><br/><pre><code>$('#waitlist_form').submit(function() {<br/>    var the_email = $('#waitlist_box').val();<br/>    $.ajax({<br/>        type: 'POST',<br/>        url: '/waitlist/submit',<br/>        data: { email: the_email },<br/>        beforeSend: function() {<br/>        },<br/>        success: function(html) {<br/>            $('#waitlist_button').html('Thanks!');<br/>        }<br/>    });<br/>    return false;<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT DOE NOT RENDER COMPLET CONTEXT
    </pattern>
    <template>
<![CDATA[<p>So I was just making stupid mistake:</p><br/><br/><p>In the rendering file I have:</p><br/><br/><pre><code>html = t.render(Context({'completed': completed, 'current':current, 'description': sp.description, 'project_title':sp.name, 'img':images, 'meta_desc': sp.meta_description, 'meta_k:': sp.meta_keywords)<br/></code></pre><br/><br/><p>this refers to "meta_k:" <strong>note the semicolon</strong></p><br/><br/><p>in the template I have </p><br/><br/><pre><code>{% if meta_k %}<br/></code></pre><br/><br/><p><strong>note no semicolon</strong></p><br/><br/><p>If I remove the semicolon it works. That was stupid.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOURC CODE FOR A PYTHON EGG
    </pattern>
    <template>
<![CDATA[<p>An .egg file is a simple ZIP archive, you can extract the files using any ZIP-enabled application if you want. That being said, you can install an .egg into a folder for development by passing the <code>develop</code> option to setup.py. This will make setuptools use the sources in the specified folder and just link to them by a file in your package path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FLEXBOX HOW TO RETRIEV USER S QUERI PROCESS SUBMIT FORM
    </pattern>
    <template>
<![CDATA[<p>The params being sent look like this:</p><br/><br/><pre><code>var params = {<br/>  q: q,<br/>  p: p,<br/>  s: pageSize,<br/>  contentType: 'application/json; charset=utf-8'<br/>}<br/></code></pre><br/><br/><p>So you're looking for <code>q</code> to get the query, <code>p</code> to get the page number and <code>s</code> to get the page size.</p><br/><br/><hr><br/><br/><p><em>For the second question:</em><br><br/>You can give it any ID you want, as long as you use the same ID in your selector, for example:</p><br/><br/><pre><code>&lt;div id="anything"&gt;&lt;/div&gt;<br/></code></pre><br/><br/><p>And matching jQuery to populate <em>that</em> <code>&lt;div&gt;</code>:</p><br/><br/><pre><code>$("#anything").flexbox('results.html');<br/></code></pre><br/><br/><p>It'll already generate a hidden input with the a name matching the ID, <em>that</em> is what you're looking for server-side.  For example with the above code, this gets generated in the DOM immediately before that <code>&lt;div id="anything"&gt;&lt;/div&gt;</code>:</p><br/><br/><pre><code>&lt;input type="hidden" id="anything_hidden" name="anything" value="selectedVal" /&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N OBJECT WITH AJAX JQUERI IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It's a simple, but longer story. To make it short, you can check this article: <a href="http://www.arnebrodowski.de/blog/484-Django-Ajax-comment-deletion.html" rel="nofollow">http://www.arnebrodowski.de/blog/484-Django-Ajax-comment-deletion.html</a> which contains a snippet (written with YUI, but its jQuery counterpart would be very similar: <a href="http://api.jquery.com/jQuery.ajax/" rel="nofollow">http://api.jquery.com/jQuery.ajax/</a>) that performs AJAX query, which in turn deletes a comment.</p><br/><br/><p>The comment deletion view is built into <code>django.contrib.comments.views</code>, and you have to write your own view for deleting tags. It should look roughly like this:</p><br/><br/><pre><code>    def delete_tag_view(request, tag):<br/>        tag_to_delete = get_object_or_404(Tag, title=tag)<br/>        tag_to_delete.delete()<br/>        return HttpResponse('OK') # This should really return JSON and/or some relevant HTTP status code<br/></code></pre><br/><br/><p>Of course, you need to hook this into your URLconf:</p><br/><br/><pre><code>url(r'/tag/delete/(?P&lt;tag&gt;\w+)', 'tags.views.delete_tag_view', name='tag-delete')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DIV IN DJANGO USE JQUERI AND AJAX
    </pattern>
    <template>
<![CDATA[<p>First, it looks like your code is broken - this is not a valid JS/jQuery instruction: </p><br/><br/><pre><code>$('#tag_cloud).html(data);<br/></code></pre><br/><br/><p>As for refreshing only a single <code>div</code>, I would extract contents of that div to a separate template <code>my_div.html</code>, include it in the main page template using {% include "my_div.html" %}. Then, in my AJAX view, I would render and return only that rendered <code>my_div.html</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST HEADER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>According to the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpRequest.META">documentation</a> <code>request.META</code> is a "standard Python dictionary containing all available HTTP headers". If you want to get <em>all</em> the headers you can simply iterate through the dictionary. </p><br/><br/><p>Which part of your code to do this depends on your exact requirement. Anyplace that has access to <code>request</code> should do.</p><br/><br/><p><strong>Update</strong></p><br/><br/><blockquote><br/>  <p>I need to access it in a Middleware class but when i iterate over it, I get a lot of values apart from HTTP headers.</p><br/></blockquote><br/><br/><p>From the documentation:</p><br/><br/><blockquote><br/>  <p>With the exception of <code>CONTENT_LENGTH</code> and <code>CONTENT_TYPE</code>, as given above, any <code>HTTP</code> headers in the request are converted to <code>META</code> keys by converting all characters to uppercase, replacing any hyphens with underscores and <strong><em>adding an <code>HTTP_</code> prefix to the name</em></strong>. </p><br/></blockquote><br/><br/><p>(Emphasis added)</p><br/><br/><p>To get the <code>HTTP</code> headers alone, just filter by keys prefixed with <code>HTTP_</code>. </p><br/><br/><p><strong>Update 2</strong></p><br/><br/><blockquote><br/>  <p>could you show me how I could build a dictionary of headers by filtering out all the keys from the request.META variable which begin with a HTTP_ and strip out the leading HTTP_ part.</p><br/></blockquote><br/><br/><p>Sure. Here is one way to do it.</p><br/><br/><pre><code>import re<br/>regex = re.compile('^HTTP_')<br/>dict((regex.sub('', header), value) for (header, value) <br/>       in request.META.items() if header.startswith('HTTP_'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + DJANGO IMPORTERROR CAN NOT IMPORT NAME SIGNAL FROM PYTHON2.5 TO PYTHON2.7
    </pattern>
    <template>
<![CDATA[<p>Okay, I'm going to answer this myself. Thanks to bahamas from #django freenode.</p><br/><br/><p>First go to your Python shell</p><br/><br/><pre><code>&gt;&gt;&gt; import registration<br/>&gt;&gt;&gt; print registration.__file__<br/>/home/wenbert/.local/lib/python/registration/__init__.pyc<br/></code></pre><br/><br/><p>Do a:</p><br/><br/><pre><code>$ ls -la /home/wenbert/.local/lib/python/registration<br/></code></pre><br/><br/><p>I did not find <code>signals.py</code> in the directory.</p><br/><br/><p>So, download the tar.gz file from: <a href="https://bitbucket.org/ubernostrum/django-registration/src" rel="nofollow">https://bitbucket.org/ubernostrum/django-registration/src</a> and reinstall.</p><br/><br/><p><strong>TL;DR</strong><br/>I had a broken a installation (no signals.py) of django-registration. Download from source and reinstall manually.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.2 LOGIN ISSU ( GET PARAMET NEXT )
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>When an anonymous user tries to go to /editor/25 (for example) and is redirected to login for authentication, "next" is always None even if present in the url (it should be "/editor/25").</p><br/></blockquote><br/><br/><p>This sounds strange. Can you check that the URL indeed has <code>?next=/editor/25/</code> as the query string? Also log <code>request.GET</code> and see what turns up.</p><br/><br/><p>Also, you may want to pick up the <code>next</code> parameter from <code>request.GET</code> and include it as a (optional) hidden input in the form when rendering the template. The auth module's <code>login</code> view does this. This way your form can pick up <code>next</code> from <code>request.POST</code> on <code>POST</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.2.3 INTERNATION MAKEMESSAG DOE NOT DETECT ALL STRING
    </pattern>
    <template>
<![CDATA[<p>Django's Javascript message parsing is quite fragile.  I've <a href="http://nedbatchelder.com/blog/201104/a_javascript_lexer_in_python_and_the_saga_behind_it.html" rel="nofollow">written up the details</a> why this is so.  I also have a fix for Django 1.3 attached to <a href="http://code.djangoproject.com/ticket/7704" rel="nofollow">Django ticket 7704</a>.  Django may not accept the patch, maybe you can help explain to them why they should? :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR UNICOD OBJECT IS NOT CALLABL
    </pattern>
    <template>
<![CDATA[<p><code>self.choice</code> is a string value, but you're trying to call it like a function. Just remove the <code>()</code> after it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SESSION KEY IS SET IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I assume that you want to check if a <em>key</em> is set in session, not if a <em>session</em> is set (don't know what the latter means). If so:</p><br/><br/><p>You can do:</p><br/><br/><pre><code>if key not in request.session:<br/>    # Set it.<br/></code></pre><br/><br/><p>In your case:</p><br/><br/><pre><code>if 'cart' not in request.session:<br/>    # Set it.<br/></code></pre><br/><br/><p><strong>EDIT</strong>: changed the code snippet to use <code>key not in</code> rather than <code>not key in</code>. Thanks @katrielalex.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH DJANGO AND JQUERI
    </pattern>
    <template>
<![CDATA[<p>What is happening with this code:</p><br/><br/><ol><br/><li>You bind a handler to the form on<br/>submit  </li><br/><li>You then submit an ajax<br/>response which returns "ok" </li><br/><li>The form continues to submit as a regular HTML form </li><br/><li>The second submission<br/>returns the template because it is a<br/>GET request, not AJAX</li><br/></ol><br/><br/><p>In jQuery you need to either return false from the submit function, or call preventDefault on the event <a href="http://api.jquery.com/submit/" rel="nofollow">jQuery Submit Docs</a></p><br/><br/><p>So: </p><br/><br/><pre><code>$(document).ready(function () {<br/><br/>$('#iEventAjax').submit( function()<br/>{<br/> var name = $('input[name=event_name]');<br/> var data = name.val();<br/> $.ajax({<br/>                            type:"POST",<br/>                            url:"/mediaplanner/edit/",<br/>                            data:{my_data:data},<br/>                            success: function(msg){<br/>                                    alert(msg);<br/>                            }<br/>                    });<br/>return false;<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COUNTDOWN TIMER WITH AJAX AND DJANGO
    </pattern>
    <template>
<![CDATA[<p>This is definitely the wrong way to do it. You are holding the connection open for 15 seconds, which means that you have to be able to take a ton of connections on your server, even in a moderately loaded scenario.</p><br/><br/><p>Instead you should make a call to the server, where you simply set a time when the request will become valid, and then on the client you make the count down. When the countdown is done, you call another function on the server, which checks the timeout (and returns an error if it is too early) before sending the file (or info about the file)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      I CA N T GET THE FILE FROM MY POST REQUEST
    </pattern>
    <template>
<![CDATA[<p>It looks like the request actually just contains the image data (request has content-type "application/octetstream"). So I would try the following:</p><br/><br/><pre><code>from django.core.files.uploadedfile import SimpleUploadedFile<br/><br/>def document_ajax_upload(request):<br/>  file = SimpleUploadedFile(request.META['HTTP_X_FILE_NAME'], <br/>                              request.raw_post_data)<br/>  print file # or whatever else you wish to do with the file<br/>  return HttpResponse('{"success":true}')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TUTORI TEMPLATEDOESNOTEXIST AT POLLS
    </pattern>
    <template>
<![CDATA[<pre><code>&gt;&gt;&gt; TEMPLATE_DIRS = ( "home/kevin/first/tutorial/temps" )<br/>&gt;&gt;&gt; print TEMPLATE_DIRS<br/>home/kevin/first/tutorial/temps<br/>&gt;&gt;&gt; type(TEMPLATE_DIRS)<br/>&lt;type 'str'&gt;<br/></code></pre><br/><br/><p>This is a string, not a tuple.</p><br/><br/><pre><code>TEMPLATE_DIRS = ( "home/kevin/first/tutorial/temps", )<br/></code></pre><br/><br/><p>That is a tuple.  A little bit of a Python gotcha.</p><br/><br/><p>Furthermore, use an absolute path rather than a relative path.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND AJAX BASE MODEL SAVE
    </pattern>
    <template>
<![CDATA[<p>You're sending POST data in the standard form encoding. The <code>dataType</code> attribute doesn't specify type of data to send, but the one you expect to <strong>receive</strong>. If you really want to send JSON from your browser, you should do something like this:</p><br/><br/><pre><code>  $.ajax({<br/>    data: JSON.stringify(data),<br/>    processData: false,<br/>    contentType: 'application/json',<br/>    // other options<br/>  }<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DJANGO FORM INTO AJAX GIVE VALUEERROR
    </pattern>
    <template>
<![CDATA[<p>You need to define which field you are querying, for example:</p><br/><br/><pre><code># Query by primary key<br/>student = Student.objects.get(pk = form.get('student_id'))<br/></code></pre><br/><br/><p>Using non-keyword syntax is also allowed, but ugly. Non-keywords arguments are a special case in Django's query building process, see constructor of the <a href="http://code.djangoproject.com/svn/django/trunk/django/db/models/query_utils.py" rel="nofollow"><code>Q</code></a> class if you want to know more.</p><br/><br/><pre><code>student = Student.objects.get(("pk", form.get('student_id')))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN LOCALE REMOT AND HAVE THE WORK ALWAY SYNCHRON
    </pattern>
    <template>
<![CDATA[<p>You should be using git (or another version control system) <em>anyway</em>, to ensure that you always have a record of the changes you make to your work. Synchronising across systems is an added benefit that you will get if you set up the git remotes properly, and always ensure that you pull from the remote when you start and push back when you finish.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH A JSON STRING RETURN BY A REMOT URL ( WITH DJANGO )
    </pattern>
    <template>
<![CDATA[<p>That little <code>//</code> at the beginning threw me off too.  Here's what you do:</p><br/><br/><pre><code>import json<br/>jsonData = json.loads(mystring[3:])<br/></code></pre><br/><br/><p>Now, I don't know what any of the encoded data there means, but that's how you can get it as python objects.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIPE OUTPUT FROM PYTHON COMMAND
    </pattern>
    <template>
<![CDATA[<p>Try using <code>&amp;&gt;</code> or <code>2&gt;</code>. Although weird, the output might be printed to standard error output.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PIL WILL NOT IMPORT THE IMAG C MODUL THE IMAG C MODUL IS NOT INSTAL
    </pattern>
    <template>
<![CDATA[<p>It seems that before I installed PIL, I didn't have libjpeg installed.  I therefore installed libjpeg-62 and libjpeg62-dev, then reinstalled PIL.  The same error occurred</p><br/><br/><pre><code>*** The _imaging C module is not installed<br/></code></pre><br/><br/><p>I found a potential solution on another website suggesting that I force rebuild PIL from source:</p><br/><br/><pre><code>sudo python setup.py build_ext -f<br/></code></pre><br/><br/><p>This threw up a few interesting pieces of information about this error (if you're having this problem too).  It seems that gcc isn't compiling various files properly (I have gcc4.3.3), namely the following:</p><br/><br/><pre><code>_imaging.c:3017: warning: initialization from incompatible pointer type<br/>_imaging.c:3077: warning: initialization from incompatible pointer type<br/>libImaging/Quant.c: In function 'rehash_collide':<br/>libImaging/Quant.c:154: warning: cast to pointer from integer of different size<br/></code></pre><br/><br/><p><em>(everything else seems fine)</em></p><br/><br/><p>I did a little research on this and some other websites suggest that it's because the version of gcc I'm using to build PIL is different from the version used to build the python.org Python I'm using.  This makes quite a lot of sense.  <a href="http://stackoverflow.com/questions/1438270/installing-python-imaging-library-pil-on-snow-leopard-with-updated-python-2-6-2">Here's the other question I found that suggests this</a>.</p><br/><br/><p>Finally, I tried one last install, but this time from the repository as opposed to the tar I downloaded.  This seems to have solved the problem.</p><br/><br/><pre><code>sudo apt-get install python-imaging<br/></code></pre><br/><br/><p>Although I haven't entirely answered the original problem, I have found an alternative solution, and hope that the information above will be able to help anybody else in this situation!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIS A 410 ERROR IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django does not include a mechanism for this because gone should be normal workflow, not an error condition, but if you want to not treat it as a return response, and as an exception, just implement a <a href="http://docs.djangoproject.com/en/dev/topics/http/middleware/" rel="nofollow">middleware</a>.</p><br/><br/><pre><code>class MyGoneMiddleware(object):<br/>    def process_exception(self, request, exception):<br/>        if isinstance(exception, Http410):<br/>            return HttpResponseGone("Gone!")<br/>        return None<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO REVERS NOT WORK IN INHERIT
    </pattern>
    <template>
<![CDATA[<p>The following didn't run properly. It works fine now.</p><br/><br/><pre><code>manage.py createinitialrevisions<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      XAMPP BY DEFAULT VIA MYSQLDB PYTHON LIB ON UBUNTU 10.10
    </pattern>
    <template>
<![CDATA[<p>I don't understand why you don't just install MySQL via <code>sudo apt-get install mysql-server</code>, but nevertheless the answer to your question would seem to be to configure Django to use the specified socket in place of the default.</p><br/><br/><p>From the documentation to <code>settings.DATABASES</code>, under <a href="http://docs.djangoproject.com/en/1.2/ref/settings/#host" rel="nofollow"><code>HOST</code></a>:</p><br/><br/><blockquote><br/>  <p>If this value starts with a forward slash ('/') and you're using MySQL, MySQL will connect via a Unix socket to the specified socket.</p><br/></blockquote><br/><br/><p>So if you just set the HOST setting for your database to <code>"/opt/lampp/var/mysql/mysql.sock"</code> it should find the relevant MySQL socket.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DECIM POINT IN DJANGO GET ERROR VALUESLISTQUERYSET OBJECT HA NO ATTRIBUT META
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>The Django serialization module only works on lists/querysets of full Django objects; <code>ValuesListQuerySet</code> contains tuples, not Django objects.</p><br/></blockquote><br/><br/><p>I am quoting from a comment attached to Django <a href="http://code.djangoproject.com/ticket/8090" rel="nofollow">ticket #8090</a>. You'll need to get a <code>QuerySet</code> if you want to use Django's built in serialization. If not, you'll have to use a custom serializing module. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KEY OF DICTIONARI INSID A LIST FROM UNICOD TO ASCII
    </pattern>
    <template>
<![CDATA[<p>First: do you really <strong>need</strong> to do this? The strings are in Unicode for a reason: you simply can't represent everything in plain ASCII that you can in Unicode. This probably won't be a problem for your dictionary keys 'uid', 'name' and 'pic_small'; but it probably won't be a problem to leave them as Unicode, either. (The 'simplejson' library does not know anything about your data, so it uses Unicode for every string - better safe than sorry.)</p><br/><br/><p>Anyway:</p><br/><br/><p>In Python, strings cannot be modified. The <code>.encode</code> method does not change the string; it returns a new string that is the encoded version.</p><br/><br/><p>What you want to do is produce a new dictionary, which replaces the keys with the encoded keys. We can do this by passing each pair of (encoded key, original value) as *args for the dict constructor.</p><br/><br/><p>That looks like:</p><br/><br/><pre><code>dict((k.encode('ascii'), v) for (k, v) in original.items())<br/></code></pre><br/><br/><p>Similarly, we can use a list comprehension to apply this to every dictionary, and create the new list. (We <strong>can</strong> modify the list in-place, but this way is cleaner.)</p><br/><br/><pre><code>response = simplejson.load(urllib.urlopen(REST_SERVER, data))<br/># We create the list of modified dictionaries, and re-assign 'response' to it:<br/>response = [<br/>     dict((k.encode('ascii'), v) for (k, v) in original.items()) # the modified version<br/>     for original in response # of each original dictionary.<br/>]<br/>return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON SCRIPT WITH CRON
    </pattern>
    <template>
<![CDATA[<p>This boils down to the actual python interpreter in use at the time cron executes the script in all likelihood, so here's how to narrow that down: </p><br/><br/><p>Open up /Users/paulo/Desktop/ashtanga/ping/sender.py and see if there's a line at the top starting with '#!'. This is the version of Python that is invoked when you run the script at the command line <em>if you don't invoke it with an explicit interpreter</em>. So, if that line says "#!/usr/bin/python", and you run it at the command line like this:</p><br/><br/><pre><code>$  /Users/paulo/Desktop/ashtanga/ping/sender.py<br/></code></pre><br/><br/><p>(Where '$' is the command line prompt)</p><br/><br/><p>Then /usr/bin/python is the interpreter binary being invoked. If the script works when you run it this way, then you want to make sure that /usr/bin/python is the interpreter being invoked by cron when it runs your job. </p><br/><br/><p>However, outside of an explicit Python interpreter indicated in a '#!' line (called a 'shebang' line in some circles), two other possibilities exist: </p><br/><br/><p>First, the shebang line might say '#!/usr/bin/env python', which means 'use whatever Python interpreter is the first one found when you search the directories in the user's $PATH environment variable'. You don't want to rely on that when you run from cron, so you want to specify an explicit path to a Python interpreter. You're already doing that, but you need to make sure that if you launch /usr/bin/python at the command line, it can successfully import django. If it can't, you need to find which one does, and specify that one in your cron job. </p><br/><br/><p>Second, there might be no shebang line at all in the script, in which case you also <em>must</em> specify an interpreter in your cron job. See above :) </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECONSTRUCT STRUCTUR PARAMET SENT VIA .POST
    </pattern>
    <template>
<![CDATA[<p>I made special library for Django/Python to handle structured data sent through requests. You can find it on GitHub <a href="https://github.com/bernii/querystring-parser" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EFFICI METHOD TO MAKE A USER SORTABL LIST WITH DJANGO AJAX
    </pattern>
    <template>
<![CDATA[<p>If you must save it for later than you can add a weight or order field to the model and then put logic in to handle the changing weights in an overridden save method.<br/><a href="http://docs.djangoproject.com/en/dev/ref/models/instances/#saving-objects" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/instances/#saving-objects</a><br/>http://stackoverflow.com/questions/817284/overriding-the-save-method-in-django-modelform</p><br/><br/><p>Then you can use the order by in the query set<br><br/><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISPLAY A LOAD SPINNER IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>There are many ways of doing this, I'm going to suggest the simplest:</p><br/><br/><h1>Use an animated gif</h1><br/><br/><p>yes. I know, you're probably thinking, "animated gifs are tacky!"</p><br/><br/><p>to which I reply: "only if they're ugly."</p><br/><br/><p>Make a simple loading spinner animation as a gif, and add it to the display list when you want it shown. When the process is over, remove it from the display list.</p><br/><br/><p>It's about the only good use of an animated gif I've ever come up with.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD RELAT MODEL IN JSON STRING
    </pattern>
    <template>
<![CDATA[<p>You can use a list comprehension full of shipment dicts with the related objects filled in. This API gives the client an explicit name for each address. Positional notation makes it too easy to ship to the billing address. <a href="http://research.google.com/pubs/archive/32713.pdf" rel="nofollow">Josh Block's "How to Design a Good API and Why it Matters"</a> is worth reading.</p><br/><br/><pre><code>shipments = [{<br/>    'shipment':s,<br/>    'pickup_address': s.pickup_address, <br/>    'dropoff_address': s.dropoff_address, <br/>    'billing_address': s.billing_address,<br/>} for s in shipments]<br/><br/>return HttpResponse(simplejson.dumps(shipments, ensure_ascii=False, default=json_formatter), mimetype='application/json')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALL SQL QUERI
    </pattern>
    <template>
<![CDATA[<p>Maybe check out <a href="https://github.com/robhudson/django-debug-toolbar" rel="nofollow">https://github.com/robhudson/django-debug-toolbar</a></p><br/><br/><p>It'll let you see all the queries generated by a given page.  As well as stacktraces of where they occur etc.</p><br/><br/><p>EDIT: to log all SQL queries to a file etc, then you will want to create some middleware.  Middleware gets run on every request.  There are several Django snippets out there for this sort of thing:</p><br/><br/><ul><br/><li><a href="http://djangosnippets.org/snippets/290/" rel="nofollow">http://djangosnippets.org/snippets/290/</a></li><br/><li><a href="http://djangosnippets.org/snippets/264/" rel="nofollow">http://djangosnippets.org/snippets/264/</a></li><br/></ul><br/><br/><p>Those are concerned with printing to the terminal, but it wouldn't be hard to adapt them to use python's logging library.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HANDL DJANGO S OBJECTS.GET
    </pattern>
    <template>
<![CDATA[<pre><code>try:<br/>    thepost = Content.objects.get(name="test")<br/>except Content.ObjectNotFound:<br/>    thepost = None<br/></code></pre><br/><br/><p>I'm writing this from memory, so I'm not sure about the exception.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST SYNCDB SIGNAL HANDLER NOT GET CALL
    </pattern>
    <template>
<![CDATA[<p>try putting it in your models.py </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI OBJECT CONFUS FROM JQUERI TO DJANGO
    </pattern>
    <template>
<![CDATA[<p><code>request.GET</code> is not an instance of a normal python <code>dict</code>, but of the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict" rel="nofollow">django class <code>QueryDict</code></a>, that can deal with multiple values for one key. If you need multiple values for a key returned as a list you have to use <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" rel="nofollow"><code>getList</code></a>!</p><br/><br/><p>EDIT: Also have a look at this <a href="http://api.jquery.com/jQuery.param/" rel="nofollow">jQuery parameter settings</a>!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPLEST WAY TO ADD A CAPTCHA TO A DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>Yes, reCaptcha is easy and works well.</p><br/><br/><p>I use it on many sites.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MIX SERIAL
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#values-fields" rel="nofollow"><code>.values()</code></a> in your query in order to generate a dict instead of a model instance, then just nest that dictionary in the outer dictionary.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO ON A 1AND1 DEDIC SERVER
    </pattern>
    <template>
<![CDATA[<p>you have to find out if one of the supported django mode is available:  </p><br/><br/><blockquote><br/>  <p><a href="http://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/" rel="nofollow">mod_wsgi</a>, <a href="http://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/" rel="nofollow">mod_fcgi</a>, <a href="http://docs.djangoproject.com/en/dev/howto/deployment/modpython/" rel="nofollow">mod_python</a>  </p><br/></blockquote><br/><br/><p>I have not used dedicated servers, but I think you might be able to configure it according to your needs. Ask the service provider. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEPLOY PROBLEM IN APACHE MOD WSGI. IMPORTERROR COULD NOT IMPORT SET SITE.SETTINGS
    </pattern>
    <template>
<![CDATA[<p>Ensure you have read:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango" rel="nofollow">http://code.google.com/p/modwsgi/wiki/IntegrationWithDjango</a></p><br/><br/><p>and also watch this presentation:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations" rel="nofollow">http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations</a></p><br/><br/><p>Your problem is going to be a sys.path or permissions issue which are both covered by the above.</p><br/><br/><p>That you are using 'maximum-requests=200 stack-size=524288' options to WSGIDaemonProcess directive makes me question whether you have referred to the mainstream documentation as basic instructions don't tell you to use them. Instead looks like you have used some arbitrary persons blog post for how to set it up, or relying on some folklore given to you on an IRC channel. :-)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBTAIN THE PARENT FOLDER OF ANOTH FOLDER
    </pattern>
    <template>
<![CDATA[<p>Add <code>file_path = os.path.normpath(file_path)</code> to eliminate the up-level reference (/../).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEST PROBLEM WITH SOUTH AND MYSQL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>When I try running python manage.py test with MyISAM, I get errors regarding a table that we have faked on our system that is supposed to be created while the system is running.</p><br/></blockquote><br/><br/><p>If you have created a model for that, perhaps it would help, if you mark the Meta option as <code>managed=False</code>. Then django wouldn't involve to create it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FAIL XMLHTTPREQUEST CHECK IN DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p>The problem is that once the Ajax is completed, it replaces the original form with a new one - and this one no longer has the javascript event handler attached, so the next time the form submits via the normal POST method.</p><br/><br/><p>Luckily, jQuery has a couple of methods that handle this for you - <code>live</code> and <code>delegate</code>. So instead of <code>$(".doneForm").submit(function() ...</code>, do this:</p><br/><br/><pre><code>$(".doneForm").live("submit", function() {...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX FORM ISSU IN IE8
    </pattern>
    <template>
<![CDATA[<p>Change your mimetype from this line</p><br/><br/><pre><code>return HttpResponse(json, mimetype='application/javascript')<br/></code></pre><br/><br/><p>to 'text/javascript'. Or you could also set in your server's configuration to display the contents of 'application/javascript' files instead of downloading it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST FAIL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Use request.raw_post_data in your view. Somehow like this:</p><br/><br/><pre><code>if request.is_ajax():<br/>     source = request.raw_post_data<br/>     #Save or/and modify your file<br/>else:<br/>    #As usual<br/></code></pre><br/><br/><p>By the way, i do not know how to get file by chunks. Maybe someone knows.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CA N T BE EXPRESS EXTEND THE USER MODEL IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Easily duplicated:</p><br/><br/><pre><code>&gt;&gt;&gt; def foo(**kwargs):<br/>...   return None<br/>... <br/>&gt;&gt;&gt; foo(a.b=1)<br/>  File "&lt;stdin&gt;", line 1<br/>SyntaxError: keyword can't be an expression<br/></code></pre><br/><br/><p>The error message is a bit cryptic - where's the keyword? I suspect its to do with '.' being syntax for getattr.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO IS THERE A BUILT IN FILTER WHICH CAN MARK THESE AS SAFE
    </pattern>
    <template>
<![CDATA[<p>No, there isn't - if you mark something as <code>safe</code>, nothing will be escaped. If it's <code>unsafe</code>, everything will be. There isn't really way to say <code>this content is varying degrees of safe</code> - so if you want this, you'll have to write it yourself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO APP PACKAG AS PYTHON EGG TO WORK WITH DJANGO ADMIN DOC
    </pattern>
    <template>
<![CDATA[<p>Have you actually specified a directory writable by user that Apache is running your code, for the egg cache directory.</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/ApplicationIssues#Access_Rights_Of_Apache_User" rel="nofollow">http://code.google.com/p/modwsgi/wiki/ApplicationIssues#Access_Rights_Of_Apache_User</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VIRTUALENVWRAPP ON UBUNTU 10.10 PYTHON
    </pattern>
    <template>
<![CDATA[<p>Well, is virtualev installed in the same python as virtualenvwrapper? It requires installing virtualenv separately.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGI EXCEPT PORT BLOCK
    </pattern>
    <template>
<![CDATA[<p>"Error: You don't have permission to access that port"  </p><br/><br/><p>That's the bottom line.  You don't have access.</p><br/><br/><p>Port 80 requires a privileged process like Apache.  The built-in server with Django is not privileged and should not be used for anything but development.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECOMMEND WAY TO SERIAL DJANGO DATA TO JSON TO WORK WITH JQGRID
    </pattern>
    <template>
<![CDATA[<p>I ended up creating a django template that matched the json format I wanted.  This turned out to be a couple of lines so I can't imagine making it any simpler, especially when the names have to be manually assigned anyway.</p><br/><br/><p>example..something similar to this:</p><br/><br/><pre><code>[{% for herp in derps %}<br/>    { "id":"{{ herp.id }}___", "value":"{{ herp.value }}"}{% if not forloop.last %},{% endif %}<br/>{% endfor %}]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON AS DICTIONARI IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It looks like the template variable <code>interests</code> is just a string with the json response. The string gets escaped in the template, that's why you end up with all the &quot;. Check if the response from the server is correctly parsed.</p><br/><br/><p>To verify the type, you can use the type class, i.e. <code>type(ResultDict)</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEB BASH
    </pattern>
    <template>
<![CDATA[<p><strong>Well i found an answer myself.</strong> </p><br/><br/><p>Didn't magically code it yet , but soon will . <br/>  So as we all know we have a Linux command  <strong>screen</strong>. This command can make logs of everything that is happening in your screen , by pushing "ctrl-A H" , who uses it knows. But the problem is, that logs  are not written immediately , so it doesn't help much . But <strong>screen</strong> command has also another interesting command called hardcopy , which basically forcefully dumps all screen content copy to a file , where from you'll be able to get result as soon as you'll type it.  </p><br/><br/><p>I maybe be not accurate and right about explanations of commands , but generally it works like this .</p><br/><br/><p><strong>Security</strong></p><br/><br/><p>I am in no way Linux expert , and haven't done it yet , but as much as i understand person is logged as user in a screen session , unless he knows root login and password or is super mega hacker which can obtain it, there is basically nothing he can do to destroy the system.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDIT FORM FROM MODEL CONTAIN FOREIGNKEY
    </pattern>
    <template>
<![CDATA[<pre><code>@login_required<br/>def edit_dependents(request, id):<br/>employee = request.user.get_profile() <br/>try:<br/>    dependent = employee.dependent.get(id=id)<br/>except Dependent.DoesNotExist:<br/>    messages.error(request, "You can't edit this dependent(id: %s)." %id)<br/>    return HttpResponseRedirect(reverse('core_show_dependent_details'))<br/>dependent_relation = DependentRelation.objects.get(dependent=dependent, employee=employee)<br/>if request.method == "POST":<br/>    form = DependentForm(data=request.POST, instance=dependent)<br/>    if form.is_valid():<br/>        dependent = form.save(commit=False)<br/>        dependent_relation = DependentRelation.objects.get(dependent=dependent, employee=employee)<br/>        dependent_relation.relationship = form.cleaned_data['relationship']<br/>        try:<br/>            dependent_relation.full_clean()<br/>        except ValidationError, e:<br/>             form = DependentForm(data=request.POST)<br/>        dependent.save()<br/>        dependent_relation.save()<br/>    return HttpResponseRedirect(reverse('core_show_dependent_details'))<br/>else:<br/>    form = DependentForm(instance=dependent,<br/>        initial={'relationship': dependent_relation.relationship})<br/>dictionary = {'form':form,'title':'Edit Dependents',}<br/>return render_to_response('core/create_edit_form.html',dictionary, context_instance = RequestContext(request))<br/></code></pre><br/><br/><p>As I have defined my model form in my question, I created an edit form from the same with passing two arguments one is the instance of the dependent person with the query as</p><br/><br/><pre><code>dependent = employee.dependent.get(id = id)<br/></code></pre><br/><br/><p>where the second id is the dependent's id.</p><br/><br/><p>Secondly I saved the relationship in the DependentRelationship model with all its attributes, having the value of relationship, and dependent from the ModelForm.</p><br/><br/><p>So in this way I was able to create the edit form for my app. After a long search which is working good. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UPSTART PROBLEM WITH VIRTUALENV PYTHON UBUNTU
    </pattern>
    <template>
<![CDATA[<p>It could be what <code>~</code> resolves to when running under Upstart. Try specifying an absolute path for <code>WORKON_HOME</code> and check that the user the job runs as has permissions to all relevant directories and files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANI FIELD AUTOMAT IN DJANGO MODEL
    </pattern>
    <template>
<![CDATA[<p>Your model is fine you just need to query the relationship since now you have a "through" relationship with extra fields. The relationship is created automatically as topping_relationship in your case, so your query should be:</p><br/><br/><pre><code>pizza.toppings.order_by('topping_relationship__order_to_add_topping')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIND OUT IF USER IS AUTHENT IN CUSTOM TAG
    </pattern>
    <template>
<![CDATA[<p>I ended up just passing the "user" parameter to the tag and using that to decide if the user was auth'd or not.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AJAX POST AND USER VERIF
    </pattern>
    <template>
<![CDATA[<p>When the user logons at <a href="http://yourserver.com" rel="nofollow">http://yourserver.com</a>, you can set a permanent cookie to identify him. (see <code>SESSION_EXPIRE_AT_BROWSER_CLOSE</code> and <code>COOKIE_AGE</code> variables in django)</p><br/><br/><p>Then, when he embeds any JS from another site from yourserver.com domain, the cookies are automatically sent for this domain, and you can check on your django side for the cookie existence and validity and give the good JS.</p><br/><br/><p>Because of crossdomain issues, you should better use form POST as an alternative as AJAX as it is not security restricted. You can then <a href="http://softwareas.com/cross-domain-communication-with-iframes" rel="nofollow">play with iframes and javascript to make both domains communicates</a>.</p><br/><br/><p>To embed the JS in another website, you can use a browser extension, or a simple <a href="http://en.wikipedia.org/wiki/Bookmarklet" rel="nofollow">bookmarklet</a>, which will load your code in the current page when the user clicks it from any webpage. </p><br/><br/><p>My 2 cents;</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI IN DJANGO TO RENDER IN JQUERI LEVEL OF QUESTION BEGINN
    </pattern>
    <template>
<![CDATA[<pre><code>import json<br/><br/>data = json.dumps(errors)<br/><br/>return HttpResponse(data,mimetype="application/json")<br/></code></pre><br/><br/><p>You're asking how to turn a dictionary into a JSON object, so your jQuery/javascript can read it. json.dumps allows this to happen.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DEFAULT PYTHON VERSION ON WINDOW XP
    </pattern>
    <template>
<![CDATA[<p>Change your PATH system environment variable to point to the version of Python you want to use.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INHERIT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>It's probably something like:</p><br/><br/><pre><code>p = Parent()<br/>p.user_ptr = user<br/>p.contact_means = ...<br/>p.save()<br/></code></pre><br/><br/><p>(Django creates the foreign key for you when doing model inheritance, plus the attribute ending in _ptr)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ENCAPSUL JSON IN PARENTHES
    </pattern>
    <template>
<![CDATA[<p>You can do it this way, but it's not viewable in browser now. I'f that's not a problem, here's the code :</p><br/><br/><pre><code>callback = request.GET.get('callback', '')<br/>objects = Event.objects.all()<br/>i = 0<br/>dict = {}<br/>small_dict = {}<br/>for o in objects:<br/>    small_dict = {'id': o.id, 'url': o.url, 'name': o.name, 'image': o.image}<br/>    dict[str(i+1)] = small_dict<br/>    small_dict = {}<br/><br/>response = simplejson.dumps(dict)<br/>response = callback + '(' + response + ')';<br/><br/>return HttpResponse(response,<br/>    mimetype ='application/json; charset=utf8')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLATETAG
    </pattern>
    <template>
<![CDATA[<p>Here is my implementation of this. It actually chops a sentence not a paragraph but anyway you should get an idea.</p><br/><br/><pre><code>{% splitarticle some_data word_count %}<br/>    {{ pre_part }}<br/>    {% if post_part %}<br/>       {{ post_part }}<br/>     {% endif %}<br/></code></pre><br/><br/><p>And it will return two variables </p><br/><br/><p>And the code. You should put in &lt; your_app >/templatetags/</p><br/><br/><pre><code>from django import template<br/>from django.utils.encoding import force_unicode<br/><br/>def split_by_sentence(text, word_count):<br/>    words = force_unicode(text).strip().split(' ')<br/>    word_count = int(word_count)<br/>    if len(words)&gt;word_count:<br/>        cnt = word_count<br/>        for word in words[word_count:]:<br/>            cnt+=1<br/>            if '.' in word or '?' in word or '!' in word:<br/>                break<br/>        if cnt&gt;=len(words):<br/>            cnt = word_count<br/><br/>        pre = ' '.join(words[:cnt])<br/>        post = ' '.join(words[cnt:])<br/>        return pre, post    <br/>    else:<br/>        return text, None<br/><br/>register = template.Library()<br/>@register.tag<br/>def splitarticle(parser, token):<br/>    try:<br/>        tag, data, word_count = token.split_contents()<br/>    except ValueError:<br/>        raise template.TemplateSyntaxError('splitarticle parsing error')<br/>    return SplitArticleNode(data, word_count)<br/><br/>class SplitArticleNode(template.Node):<br/>    def __init__(self, data, word_count):<br/>        self.data = template.Variable(data)<br/>        self.word_count = word_count<br/>    def render(self, context):<br/>        data = self.data.resolve(context)<br/>        context['pre_part'], context['post_part'] = split_by_sentence(data, self.word_count)<br/>        return ''<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGERPROPERTI TO FLOATPROPERTI OF EXIST APPENGIN DATASTOR
    </pattern>
    <template>
<![CDATA[<p>The easiest way to do this is to change the model to inherit from db.Expando, and delete the integer properties from the definion. Then, load each instance and do "instance.foo = float(instance.foo)" on each, before saving them back to the datastore - you'll probably want to use the mapreduce API for this. Finally, make the model extend db.Model again, and add the FloatProperties back.</p><br/><br/><p>You really, really don't want to use a float for currency, though: floats are susceptible to rounding errors, which means you can lose (or gain!) money. Instead, use an IntegerProperty that counts the number of cents.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO PISTON TO RETURN A RESPONS IN TEXT PLAIN
    </pattern>
    <template>
<![CDATA[<p>Sounds like you want a string emitter, and not one of the built-in JSONEmitter, XMLEmitter, etc.</p><br/><br/><p>Have a look at the docs for emitters: <a href="https://bitbucket.org/jespern/django-piston/wiki/Documentation" rel="nofollow">https://bitbucket.org/jespern/django-piston/wiki/Documentation</a></p><br/><br/><p>And the existing emitter definitions here: <br/><a href="https://bitbucket.org/jespern/django-piston/src/c4b2d21db51a/piston/emitters.py" rel="nofollow">https://bitbucket.org/jespern/django-piston/src/c4b2d21db51a/piston/emitters.py</a></p><br/><br/><p>A definition of a plain text emitter might look like this:</p><br/><br/><pre><code>from piston.emitters import Emitter<br/>from piston.utils import Mimer    <br/><br/>class TextEmitter(Emitter):<br/>    def render(self, request):<br/>        return self.construct()<br/>Emitter.register('text', TextEmitter)<br/>Mimer.register('text', None, ('text/plain',))<br/></code></pre><br/><br/><p>You'd get your resource to use this emitter in your urls.py like so:</p><br/><br/><pre><code>urlpatterns = patterns('',<br/>   url(r'^blogposts$', resource_here, { 'emitter_format': 'text' }),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS NEVER SENT. WHI
    </pattern>
    <template>
<![CDATA[<pre><code>jQuery.ajax({<br/>    url: "mostRecentTransaction",<br/>    type: "GET",<br/>    data: { id : 2008010661301520679 },<br/>    success: function(data) {<br/>        alert(data);<br/>        jQuery('#shownoti').html(data).hide().fadeIn(1500);<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PHPMYADMIN AND MYSQL
    </pattern>
    <template>
<![CDATA[<p>You can definitely manage Mysql through the XAMPP interface. Try setting the DB_HOST in settings.py to "localhost". If it doesn't work, try "127.0.0.1". This is typically caused by the python-mysql module expecting the mysql unix socket to be in another place than it is. Actually, I'm unsure if the mysql server uses a unix socket on Windows. Anyway, one of both should work :)<br/>You can use the credentials you use to login with phpmyAdmin also for Django. Many consider it bad style to use root for non-administration tasks (and I agree), but for starters and on your development machine it isn't too big of an issue.<br/>phpMyAdmin should work out of the box with your django-managed databases.</p><br/><br/><p>My database settings.py block for mysql looks something like this:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.<br/>        'NAME': 'DBNAME',                      # Or path to database file if using sqlite3.<br/>        'USER': 'USER',                      # Not used with sqlite3.<br/>        'PASSWORD': 'PASSWORD',                  # Not used with sqlite3.<br/>        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.<br/>        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.<br/>    }<br/>}<br/></code></pre><br/><br/><p>This is for django 1.2 and above. Replace DBNAME, USER and PASSWORD with the respective values and try '127.0.0.1' as HOST if you run into problems. Obviously, you'd need to run 'manage.py syncdb' as you did with sqlite before you can use it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BUILD A QUICK WEB BACKEND FOR A MOBIL APPLIC RUBI ON RAIL OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>I can't answer about Django, but if you want to write it in Ruby, you should consider using <a href="http://www.sinatrarb.com/" rel="nofollow">Sinatra</a> as a lightweight alternative to Rails.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISTINCT ORDER BY CREAT BY DJANGO WORK IN MYSQL AND SQLITE NOT POSTGRESQL
    </pattern>
    <template>
<![CDATA[<p>As <a href="http://stackoverflow.com/questions/4823888/select-distinct-order-by-created-by-django-works-in-mysql-and-sqlite-not-postgr/4826393#4826393">@Catcall said</a>, technically this statement is illegal and nonsensical in SQL.</p><br/><br/><p>However, MySQL and SQLite allow you to do a <code>SELECT DISTINCT id FROM test ORDER BY whatever</code>, while PostgreSQL does not.  It's as simple as that.</p><br/><br/><p>MySQL and SQLite may produce non-deterministic results using this method, I'm not sure.</p><br/><br/><p>However if you are ordering by <code>'?'</code>, it should be fine.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIRST LINE OF AN UPLOAD TEXT FILE IN PYTHON DJANGO
    </pattern>
    <template>
<![CDATA[<p>Django's UploadedFile has a <code>content_type</code> attribute which returns MIME type of the uploaded file supplied by user. </p><br/><br/><p>If you want to read the first line anyway, then you could use <code>readline()</code> method on the uploaded file object to get the first line. As Django's UploadedFile objects are file like objects, they support the commonly used methods of file objects.</p><br/><br/><p><a href="http://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs#uploadedfile-objects" rel="nofollow">Django docs on UploadedFile</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNICOD STRING TO UTF 8 IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>The comma at the end of <code>games["name"] = name,</code> makes it a 1-tuple. Remove it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RESPONS NOT A TRUE STRING WHEN PASS TO HTML TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>In the <a href="http://docs.djangoproject.com/en/dev/topics/templates/#variables" rel="nofollow">django template language</a> dictionary-, list index and attribute lookups are made using a dot ('.').</p><br/><br/><p>For that reason it should be something like <code>{{ result.mylink.0.url }}</code>, but this will most like not work using slashes in the key!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAIL MUCH BETTER FOR INTERACT WEBSIT COMPAR TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't think AJAX functionality will define which framework you find yourself preferring. </p><br/><br/><p>I can't answer most of your question relating to ajax, but still think this post could be useful for you: it's highlighting a huge difference between ROR and django -- mainly RoR uses magic, django doesn't.</p><br/><br/><p>I prefer django for exactly that. Others may prefer RoR for the same reason I don't.</p><br/><br/><p><a href="http://stackoverflow.com/questions/441717/whats-wrong-with-magic/442088#442088">What's wrong with "magic"?</a></p><br/><br/><blockquote><br/>  <p>Rails' developers are of the opinion<br/>  that this sort of "magic" is a good<br/>  thing because it makes it easier to<br/>  quickly get something working, and<br/>  doesn't bore you with lots of details<br/>  unless you want to reach in and start<br/>  overriding things.</p><br/>  <br/>  <p>Django's developers are of the opinion<br/>  that this sort of "magic" is a bad<br/>  thing because doesn't really save all<br/>  that much time (a few import<br/>  statements isn't a big deal in the<br/>  grand scheme of things), and has the<br/>  effect of hiding what's really going<br/>  on, making it harder to work out how<br/>  to override stuff, or harder to debug<br/>  if something goes wrong.</p><br/>  <br/>  <p>Both of these are, of course, valid<br/>  stances to take, and generally it<br/>  seems that people just naturally<br/>  gravitate to one or the other; those<br/>  who like the "magic" congregate around<br/>  Rails or frameworks which try to<br/>  emulate it, those who don't congregate<br/>  around Django or frameworks which try<br/>  to emulate it (and, in a broader<br/>  sense, these stances are somewhat<br/>  stereotypical of Ruby and Python<br/>  developers; Ruby developers tend to<br/>  like doing things one way, Python<br/>  developers tend to like doing things<br/>  another way).</p><br/></blockquote><br/><br/><p>So I think one will click for you regardless of out of the box ajax support.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON MIMETYP
    </pattern>
    <template>
<![CDATA[<p>There was a bug with jquery validate plugin, updating to most recent version solved the problem.</p><br/><br/><p>More info about the issue here:<br/><a href="https://forum.jquery.com/topic/getjson-and-jquery-1-5" rel="nofollow">https://forum.jquery.com/topic/getjson-and-jquery-1-5</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERMISS FOR DJANGO MODUL
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>I have tried this code in my template:</p><br/></blockquote><br/><br/><p>This kind of complex decision-making goes in the view functions.</p><br/><br/><p>Or it goes into the context which is then presented to the template.</p><br/><br/><p><a href="http://stackoverflow.com/search?q=%5Bdjango%5D+context">http://stackoverflow.com/search?q=%5Bdjango%5D+context</a></p><br/><br/><p><a href="http://stackoverflow.com/questions/2880940/when-to-use-context-processor">When to use context processor</a></p><br/><br/><p>Do this in your view</p><br/><br/><pre><code>def my_view( request ):<br/>    followup= user.has_perm('followup.add_followup')<br/>    # etc.<br/>    return render_to_response( template, {'followup':followup,... )<br/></code></pre><br/><br/><p>Then your template is simply</p><br/><br/><pre><code>{% if followup %}<br/>&lt;li&gt;&lt;a href="{% url followup-new p.id %}"&gt;Log&lt;/a&gt;&lt;/li&gt;<br/>{% endif %}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAGE.PI TEST FAIL TABL ALREADI EXIST
    </pattern>
    <template>
<![CDATA[<p>It might be an error in one of your south migrations. You don't see the problem on the real db because the migration has been executed (with the--fake option maybe)</p><br/><br/><p>You can try to recreate the db from scracth and see if it works.</p><br/><br/><p>You can also disable South for unit-tests by adding <code>SOUTH_TESTS_MIGRATE = False</code> in your settings.py. With this option a regular syncdb will be done to create the test database. It will also speed the testing process.</p><br/><br/><p>I hope it helps</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ANI IMAG UPLOAD AND DISPLAY METHOD USE AJAX
    </pattern>
    <template>
<![CDATA[<p>I would probably use:</p><br/><br/><p><a href="http://jquery.malsup.com/form/" rel="nofollow">http://jquery.malsup.com/form/</a></p><br/><br/><p>submit the form with ajax and then load the image into the dom with the success callback.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANYFIELD
    </pattern>
    <template>
<![CDATA[<p>Well, it should be more like this:</p><br/><br/><pre><code>models.py<br/><br/>class Tag(models.Model):<br/>    name = models.CharField(max_length=200)<br/><br/>class Poll(models.Model):<br/>    topic = models.CharField(max_length=200)<br/>    tags = models.ManyToManyField(Tag)<br/><br/>in views.py:<br/><br/>poll = Poll(topic="My topic")<br/>poll.save()<br/>for splitTag in splitTags:<br/>    tag = Tag(name = splitTag.lower())<br/>    tag.save()<br/>    poll.tags.add(tag)<br/>poll.save()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SECUR LOGIN WITH AJAX FROM HTTP PAGE
    </pattern>
    <template>
<![CDATA[<p>If you'd check what your browser is sending over the net you'd see that it's not POST as you wanted but OPTIONS request. It's caused because https XHTTPRequest (AJAX) from http page is treated same way as cross-domain, check <a href="http://stackoverflow.com/questions/1743845/jquery-i-get-options-request-instead-of-get">jQuery: I get OPTIONS request instead of GET</a> for answer on handling that.</p><br/><br/><p>And one more thing, whole:</p><br/><br/><pre><code>json_data=json.dumps(user_data)<br/>response=HttpResponse()<br/>response['Content-Type']="text/javascript"<br/>response.write(json_data)<br/>return response<br/></code></pre><br/><br/><p>Could be replaced just by:</p><br/><br/><pre><code>return HttpResponse(json.dumps(user_data), mimetype='text/javascript')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON RETURN JSON DICTIONARI AS TEXT PLAIN WHENEV I CHANG THE RESPONS TYPE
    </pattern>
    <template>
<![CDATA[<p>I ran into a very similar problem. After digging through Piston and Django source I decided to try this and it worked:</p><br/><br/><pre><code>resp = rc.CREATED<br/>resp.content = dict(<br/>    attendee_id=attendee.id,<br/>    order_id=order.id,<br/>)<br/>return resp<br/></code></pre><br/><br/><p>That yields this in HTTP (some headers removed for brevity).</p><br/><br/><pre><code>&lt; HTTP/1.1 201 CREATED<br/>&lt; Date: Thu, 27 Jan 2011 16:59:38 GMT<br/>&lt; Server: WSGIServer/0.1 Python/2.6.5<br/>&lt; Vary: Authorization<br/>&lt; Content-Type: application/json; charset=utf-8<br/>&lt; Transfer-Encoding: chunked<br/>&lt; <br/>{<br/>    "order_id": 22446505, <br/>    "attendee_id": 18<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + DJANGO WEB SERVIC
    </pattern>
    <template>
<![CDATA[<ol><br/><li>There are plenty of good python json libraries. The best ones are fairly simple. django actually HAS one  built in, though I can't remember the name.  something like django.json.</li><br/><li>you can POST and GET json by simply passing it in as a parameter in the request.</li><br/><li>A servlet that recognizes the json input parameter, gets the JSON and deserializes it for consumption by the server.</li><br/><li>write the JSON to the response as a name/value parameter pair.</li><br/><li>I don't have a good answer for this. Not sure I entirely understand what you are looking for.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DATA WITH AJAX WITH MODEL.FORM IN DJANGO AND JQUERI
    </pattern>
    <template>
<![CDATA[<p>Try this :</p><br/><br/><pre><code>def post_test(request):<br/>    if request.method == 'POST':<br/>        form = TestForm(request.POST)<br/>        if form.is_valid():<br/>            form.save()<br/>            return HttpResponse('success')<br/>        else:<br/>            return HttpResponse('failed')  <br/></code></pre><br/><br/><p>I strongly suggest you study the tutorial <a href="http://docs.djangoproject.com/en/1.2/topics/forms/" rel="nofollow">here</a> before implementing the above ..</p><br/><br/><p><strong>Edit:</strong><br/>Your urls.py should look something like this:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from test_project.main.views import post_test<br/><br/>urlpatterns = patterns('',<br/>  url(r'^post/$', post_test, name = 'post_test'),<br/>)<br/></code></pre><br/><br/><p>And your templates:</p><br/><br/><pre><code>&lt;script&gt;<br/>function click(){<br/>    $.post('{% url post_test %}', {<br/>        text: "eqweqeqeqweqw"<br/>    }<br/>)};<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>Pls note that {% url post_test %}, doesn't work in external js files.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OBJ FROM A START DATA AND A END DATA USE DJANGO
    </pattern>
    <template>
<![CDATA[<p>in addition to sushanath's answer, you can also use the date range lookup<br/><a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#range" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/models/querysets/#range</a></p><br/><br/><pre><code>location.objects.filter(pub_date__range=(start_date, end_date))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUICKLI DUMP A QUERI RESULT SET INTO JSON
    </pattern>
    <template>
<![CDATA[<p>How about <a href="http://docs.djangoproject.com/en/dev/topics/serialization/" rel="nofollow">http://docs.djangoproject.com/en/dev/topics/serialization/</a></p><br/><br/><p>?</p><br/><br/><pre><code>from django.core import serializers<br/>data = serializers.serialize('json', SomeModel.objects.all())<br/><br/># it's pretty useful and quick.<br/>data = serializers.serialize('json', SomeModel.objects.all(), fields=('foo','bar'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THI JAVASCRIPT ERROR WHEN I M DO MY DJANGO
    </pattern>
    <template>
<![CDATA[<p>You have to do:</p><br/><br/><pre><code>var params = JSON.parse('{{ all_params_in_json|escapejs }}');<br/></code></pre><br/><br/><p>Otherwise e.g ' char inside <code>all_params_in_json</code> variable terminates string and all hell breaks loose.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      KEY AND VALU REVERS IN JSON STRING SENT TO DJANGO VIEW VIA POST
    </pattern>
    <template>
<![CDATA[<p>You're sending the <em>string</em> as a parameter to <code>$.post</code>. Instead of calling "JSON.stringify()" yourself, just pass in your raw JavaScript object as the second parameter to <code>$.post()</code>.</p><br/><br/><pre><code>$.post("/some/form/page/", {'testA':{'testa':'some data'},'testB':{'test2':'more data'}}, updateForm, 'json');<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO SWITCH THE LINUX USER THROUGH THE WEB ( DJANGO ) WITHOUT SUDO
    </pattern>
    <template>
<![CDATA[<p>I'm not sure what "standard" approaches are for dealing with this problem.  However, this is a simple technique for environments with a small number of users that doesn't involve <code>sudo</code>, nor changing UID inside the web server (this is likely to be <strong>very</strong> problematic for concurrent access by multiple users).</p><br/><br/><p>Launch a daemon process for each user having access to this application.  This process should itself serve web requests for that user over FastCGI (substitute for protocol of your choice).  Your web server should have some user to port number mapping.  Then, redirect your gateway's requests to the proper FastCGI process based on the logon used by the Django user.</p><br/><br/><p>Example (using <code>internal</code> redirects by NGINX, assuming setup with FastCGI):</p><br/><br/><ol><br/><li>User <code>foo</code> logs on to Django web application</li><br/><li>User requests page <code>/.../</code></li><br/><li>Django application receives request for <code>/.../</code> by user <code>foo</code></li><br/><li>Django application returns custom HTTP header <a href="http://wiki.nginx.org/XSendfile" rel="nofollow"><code>X-Accel-Redirect</code></a> to indicate internal redirect to <code>/delegate/foo/.../</code>.</li><br/><li>NGINX forwards finds location <code>/delegate/foo/</code> associated to a FastCGI handler on port 9000</li><br/><li>FastCGI handler is running as user <code>foo</code> and grants access to stuff in home directory.</li><br/></ol><br/><br/><p>You can substitute the web server and communication protocol to combinations of your choice.  I used FastCGI here because it allows to write <em>both</em> the gateway <em>and</em> the handler as Django applications.  I chose NGINX because of the <code>internal</code> redirect feature.  This prevents impersonation by direct use of <code>/delegate/foo/.../</code> URLs by users other than <code>foo</code>.</p><br/><br/><h3>Update</h3><br/><br/><p><strong>Example:</strong></p><br/><br/><p>Assuming you have the <code>flup</code> module, you can start a FastCGI server directly using Django.  To start a Django application over FastCGI under a specific user account, you can use:</p><br/><br/><pre><code>sudo -u $user python /absolute/path/to/manage.py runfcgi host=127.0.0.1 port=$port<br/></code></pre><br/><br/><p>Substitute the <code>$user</code> for the user name and <code>$port</code> for a unique port for that user (no two users can share the same port).</p><br/><br/><p>Assuming an NGINX configuration, you can set this up like:</p><br/><br/><pre><code>location /user/$user {<br/>    internal;<br/><br/>    fastcgi_pass 127.0.0.1:$port;<br/>    # additional FastCGI configuration...<br/>}<br/></code></pre><br/><br/><p>Make sure to add one such directive for each <code>$user</code> and <code>$port</code> combination above.</p><br/><br/><p>Then, from your front-end Django application, you can check permissions and stuff using:</p><br/><br/><pre><code>@login_required<br/>def central_dispatch_view ( request ):<br/>    response = HttpResponse()<br/>    response['X-Accel-Redirect'] = '/user/'+request.user.username<br/>    return response<br/></code></pre><br/><br/><p><strong>Disclaimer:</strong> This is totally untested, and almost a year after the original answer, I'm not sure this is possible, mainly because the documentation on <a href="http://wiki.nginx.org/XSendfile" rel="nofollow">XSendFile</a> in NGINX specifies that this should work with <em>static files</em>.  I haven't inquired any further to know if you can actually perform an <em>internal</em> NGINX redirect from a FastCGI application.</p><br/><br/><p><strong>Alternate solution:</strong><br/>A better approach might not involve internal redirects, but instead to use a FastCGI authorizer.   Basically, a FastCGI is a program that your webserver runs before serving a request.  Then, you can bypass the shady internal redirect thing and just have a FastCGI authorizer that check if the request accessing <code>/user/foo/</code> actually can from a Django user logged in as <code>foo</code>.  This authorizer program won't be able to run as a Django application (since this is not an HTTP request/response cycle), but you can write it using <code>flup</code> and access your Django settings.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIZE OF THUMBNAIL FOR PHOTO THAT ARE HOST EXTERN
    </pattern>
    <template>
<![CDATA[<p>I'm <em>fairly</em> sure I saw something exactly like this recently, where you could point a Django model field to a remote image URL and have thumbnails done, but you could also have it upload the image files too. Darned if I cant find it now.</p><br/><br/><p>Ah ha! Maybe sorl-thumbnail. Gives this example:</p><br/><br/><pre><code>{% thumbnail "http://www.aino.se/media/i/logo.png" "40x40" crop="80% top" as im %}<br/>    &lt;img src="{{ im.url }}"&gt;<br/>{% endthumbnail %}<br/></code></pre><br/><br/><p>Assuming you can replace a literal string with a URL field (and not an ImageField) from your model ( lot.remoteimageurl for example) then I think that's it. </p><br/><br/><p>sorl-thumbnail will handle thumbnail creation and caching for you.</p><br/><br/><p><a href="http://thumbnail.sorl.net/index.html#" rel="nofollow">http://thumbnail.sorl.net/index.html#</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APPEND TO JSON AFTER SERIALIZERS.SERIALZ HA BEEN RUN ON A QUERYSET
    </pattern>
    <template>
<![CDATA[<p>Just switch the order of the operations.  And put the entire <code>gene</code> object into the list so it is properly serialized.</p><br/><br/><pre><code>genome_parents = list( Genome.objects.filter(genes=cus_id) )<br/>genome_parents.append(gene)<br/><br/>json_genome_parents = serializers.serialize('json', genome_parents, use_natural_keys=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO FORM FIELD TO A HIDDEN FIELD
    </pattern>
    <template>
<![CDATA[<p>If you have a custom template and view you may  exclude the field and use <code>{{ modelform.instance.field }}</code> to get the value.</p><br/><br/><p>also you may prefer to use in the view:</p><br/><br/><pre><code>form.fields['field_name'].widget = forms.HiddenInput()<br/></code></pre><br/><br/><p>but I'm not sure it will protect save method on post.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON PROPERLI FORMAT POST DATA FROM A CLIENT APPLIC
    </pattern>
    <template>
<![CDATA[<p>I solved this for myself.</p><br/><br/><p>The relevant cause of the error is this line in the create method</p><br/><br/><pre><code>if request.content_type:<br/></code></pre><br/><br/><p>which does not evaluate as <code>True</code> as I think the creators of the django-piston documentation intended. Even if the value is a string with a value.</p><br/><br/><p>Removing this line solved it. And I'm sure you can probably just do a string evaluation.</p><br/><br/><p>Not really sure what they were thinking there.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SAME FORMAT FOR A JAVASCRIPT ARRAY AND DJANGO SET ON THE BACKEND
    </pattern>
    <template>
<![CDATA[<p>You are sending a JavaScript array in the query string of your GET request. Therefore you should use <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict.getlist" rel="nofollow">request.GET.getlist</a>. Just using <code>request.GET[key]</code> gives you the last value for that key.</p><br/><br/><pre><code>&gt;&gt; request.GET['foo[]']<br/>u'5'<br/>&gt;&gt; request.GET.getlist('foo[]')<br/>[u'1', u'2', u'4', u'5']<br/></code></pre><br/><br/><p>Note that the values are unicode, but you probably need them as integers, so be sure to convert them.</p><br/><br/><pre><code>uids = request.GET.getlist('foo[]')<br/>uids = set([int(x) for x in uids])<br/></code></pre><br/><br/><p>I'm not sure why my key is actually <code>foo[]</code> and not just <code>foo</code>, but as you get no <code>KeyError</code>, <code>request.GET.getlist('ingredients')</code> should work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMMAND WSGIRELOADMECHAN IN MY APACH SITE S CONFIG FILE
    </pattern>
    <template>
<![CDATA[<p>Remove the whole line:</p><br/><br/><pre><code>WSGIReloadMechanism Process<br/></code></pre><br/><br/><p>It isn't needed any more and the directive was removed completely in mod_wsgi 3.X.</p><br/><br/><p>You should preferable not rely on old blog posts for how to set up mod_wsgi and use the actual mod_wsgi documentation on the mod_wsgi site instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ON USE FORMAT MODULE PATH
    </pattern>
    <template>
<![CDATA[<p>I couldn't make it work using the FORMAT_MODULE_PATH setting, but I have managed to this using formats.get_format('DATE_INPUT_FORMATS')[0]. You can find this in <a href="http://stackoverflow.com/questions/5072190/making-django-queries-with-localized-dates/5195248#5195248">my answer</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET THE SHOP LANGUAG IN SATCHMO
    </pattern>
    <template>
<![CDATA[<p>I also had to setup the shop to an "almost" new language 'es' Spanish. So I'll just put in here any differences from our installation:</p><br/><br/><p>In my settings I also have:</p><br/><br/><pre><code>LC_CTYPE = 'es_ES.utf8'<br/>TIME_ZONE = 'Europe/Madrid'<br/></code></pre><br/><br/><p><code>'allow_translation_choice': False,</code>  &lt;- this is strange, that worked just fine for me... is this maybe overriden in your local-settings file?  </p><br/><br/><p>I also changed this on settings.py</p><br/><br/><pre><code>#### Satchmo unique variables ####<br/>from django.conf.urls.defaults import patterns, include<br/>SATCHMO_SETTINGS = {<br/>    'SHOP_BASE' : '',<br/>    'MULTISHOP' : False,<br/>    #'SHOP_URLS' : patterns('satchmo_store.shop.views',)<br/>    'SHOP_URLS' :  patterns('', (r'^i18n/', include('l10n.urls')),),<br/>    'CUSTOM_SHIPPING_MODULES': ['FLAT_SHIPPING_NORMAL',],<br/>    #'SSL': True<br/>}<br/></code></pre><br/><br/><p>If that all doesn't help, have you tried adding more languages, like de, en and enable the language selector to see if it changes to e.g. german?  This way your can find out if it's just a problem with the dutch-translation.</p><br/><br/><p>Did you translated any missing messages... I've just looked in my installation, and it already has po-files for nl. And at least the product-po looks fine. So you probably didn't need to run makemessages/compilemessages... that's only needed for "new" languages, or when you want to update the po-files (in case the source-files changed)... </p><br/><br/><p>But if you need to update-translations I would recommend you to take a look to rosetta... it's great!  Have sometimes some bugs with new generated translation-files (only with the headers, I had to put some of them manually, based on existing files from the django-src: <code>"Content-Type: text/plain; charset=UTF-8\n" and  "Content-Transfer-Encoding: 8bit\n"</code>) but after adding the headers to new files, it works great. And you don't have to compile the po-files yourself, as rosetta does this when you save.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDIT FILTER LIST OF A QUERYSET
    </pattern>
    <template>
<![CDATA[<h3>Short answer:</h3><br/><br/><p>No, you <em>cannot</em> do that.</p><br/><br/><h3>Long answer:</h3><br/><br/><p>Theoretically, it may be possible (to some extent anyway) but <em>certainly not advisable</em>. </p><br/><br/><p><em>(I have not fully studied the django source, so what follows is a result of a simple climb up the call tree.)</em></p><br/><br/><p>Looking at the <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/query.py?rev=15491#L559" rel="nofollow">source for QuerySet</a>, <code>filter()</code> and <code>exclude()</code> return a clone of the queryset itself with the new rule added on (using <code>clone.query.add_q()</code>). </p><br/><br/><p><code>clone.query</code> is an <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/query.py?rev=15491#L90" rel="nofollow">object representing an SQL Query</a> while the <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/query.py?rev=15491#L1139" rel="nofollow">add_q()</a> method adds the new rule to <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/where.py?rev=15491#L23" rel="nofollow"><code>clone.query.where</code></a> which is essentially a root node of a <a href="http://code.djangoproject.com/browser/django/trunk/django/utils/tree.py?rev=15491#L8" rel="nofollow">tree</a>. </p><br/><br/><p>How the new node is added to the tree depends on whether the rule is to be connected with an <code>AND</code> or an <code>OR</code> clause. This is important as it affects the correctness of the final SQL query that is <a href="http://code.djangoproject.com/browser/django/trunk/django/db/models/sql/where.py?rev=15491#L75" rel="nofollow">generated</a>.</p><br/><br/><p>So, to list filters assigned to a queryset, one <em>"simply"</em> need to understand how the <code>queryset.query.where</code> tree is represented (see <a href="http://code.djangoproject.com/browser/django/trunk/django/utils/tree.py?rev=15491" rel="nofollow"><code>django.utils.tree</code></a>). </p><br/><br/><p>The difficult bit is of course the removing filters such that it does not affect the remaining rules. I shall refrain from offering a solution as there is no guarantee that the implementation will not change thus invalidating the solution. I suspect it is possible to do but it smells of something that should only be done out of academic interest, or not at all.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO COMMAND FROM SHELL SCRIPT DIFFER FROM MANUAL CALL
    </pattern>
    <template>
<![CDATA[<p>First of all you should have <code>#!/bin/sh</code> before first line of the script. </p><br/><br/><p>And of course you have to check that editor that you're using saves UNIX <a href="http://en.wikipedia.org/wiki/Newline" rel="nofollow">line endings</a> (<code>\n</code>) rather than Windows ones (<code>\r\n</code>). </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COMPRESS JSON REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>GZipping is handled by the webserver and browser. So you should check your webserver and webservers configuration, that it gzips the response.</p><br/><br/><p>For the minification: JSON is already a pretty minimal protocol. For still shortening it and its indices you probably won't find something, as you'll also have to map it on both sides, server in PHP and client in JavaScript. Adapting existing minifiers also requires attention, as it has to be consistent and map, not only minify, as you'll have to decode it on the other side again.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON AND ITER THROUGH ITEM IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Once you've used Python's <code>json</code> or <code>simplejson</code> module to <code>load</code> the JSON data into Python objects, everything should just work in your template.</p><br/><br/><p>Before sending things to your template I would pull out the results like so...</p><br/><br/><pre><code>def foo_view(request):<br/>    ....<br/>    decoded_json = json.loads(json_string)<br/>    return render_to_response('foo.html',{'results':decoded_json['Result']})<br/></code></pre><br/><br/><p>That way in your template you'll be able to work on each result like so...</p><br/><br/><pre><code>&lt;ul id="results"&gt;<br/>     {% for result in results %}<br/>     &lt;li&gt;Result{{ forloop.counter }}: {{ result.URL }}, {{ result.PlaylistID }}, {{ result.Name }} ...&lt;/li&gt;<br/>     {% endfor %}<br/>&lt;/ul&gt;<br/></code></pre><br/><br/><p>The data in the output will appear in the same order as it did in the JSON array at <code>Results</code>. If you need to sort the data then you will need to do that in your view, NOT in your template.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR SERILA OUTPUT OF QUERI INTO JSON
    </pattern>
    <template>
<![CDATA[<p>Instead of using serializer, trying doing this:</p><br/><br/><pre><code>return HttpResponse(simplejson.dumps(items_list),'application/json'))<br/></code></pre><br/><br/><p>see <a href="http://stackoverflow.com/questions/798111/how-do-i-json-serialize-a-python-dictionary">this answer</a> for more info</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PERSIAN ARAB DATA IN MYSQL WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>If you're running into the problem where unicode items in your Django / MySQL project are displayed as question marks, here's the likely problem and solution, found in this django-users thread:</p><br/><br/><p>The likely problem is that your MySQL encoding is set to latin1, as opposed to utf8. You can check this via:</p><br/><br/><pre><code> mysqld --verbose --help | grep character-set<br/></code></pre><br/><br/><p>You'll probably see:</p><br/><br/><pre><code>character-set-server              latin1<br/></code></pre><br/><br/><p>You want this to be uft8. To modify it, edit your my.conf file ( /etc/mysql/my.conf on ubuntu ), adding the following lines to the appropriate sections:</p><br/><br/><pre><code>[client]<br/>...<br/>default-character-set = utf8<br/><br/>[mysqld]<br/>...<br/>character-set-server=utf8<br/>collation-server=utf8_unicode_ci<br/>init_connect='set collation_connection = utf8_unicode_ci;'<br/></code></pre><br/><br/><p>Now restart mysql:</p><br/><br/><pre><code>sudo /etc/init.d/mysql restart<br/></code></pre><br/><br/><p>And alter your existing tables to use the utf8 encoding:</p><br/><br/><pre><code>mysql your_db_name<br/></code></pre><br/><br/><p>alter table your_table_name convert to character set utf8;</p><br/><br/><p>And that should do it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MESSAG BE DISPLAY TWICE
    </pattern>
    <template>
<![CDATA[<p>Turns out this was a template inheritance issue. Double check and make sure you don't have the same block in two different templates.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO HOW TO OWN A LONG RUNE PROCESS
    </pattern>
    <template>
<![CDATA[<p>My final solution was to write a custom "mailbox" based on pidbox.Mailbox.  Their implementation was horribly broken but the algorithm was solid.</p><br/><br/><p>I basically stood up a REST API hosted via django and then had that rest api send a message to a AMQP Queue(QPID implementation).</p><br/><br/><p>I then had a process that sits, monitors the queues, and passess along any commands as they came in.</p><br/><br/><p>It worked well and was pretty awesome when it came together.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU JSON STRING PYTHON ( DJANGO )
    </pattern>
    <template>
<![CDATA[<p>Within your page you can build an array and post those values manually as stated below:</p><br/><br/><pre><code>values=[[datetime1, value1],[datetime2,value2]]<br/></code></pre><br/><br/><p>Or you could loop over all items and build the list:</p><br/><br/><pre><code>$.each($('.datetime'), function(i, item){<br/>    datetime_values.append($(item).value());<br/>}<br/></code></pre><br/><br/><p>Within your view you can get a list of values passed as:</p><br/><br/><pre><code>request.POST.getlist('datetime')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN CHANGEFORM EXTRA CONTENT BESID A FIELD
    </pattern>
    <template>
<![CDATA[<p>Yes, there is, but the js way is much easier.</p><br/><br/><p>You need to create a custom widget class, then set the particular field to use that widget. Example:</p><br/><br/><pre><code>class FooWidget(Widget):<br/>    def render(self, *args, **kwargs):<br/>        output = super(FooWidget, self).render(*args, **kwargs)<br/>        output += "&lt;p&gt;I'm a widget!&lt;/p&gt;"<br/>        return mark_safe(output)<br/><br/>class BarAdmin(ModelAdmin):<br/>    formfield_overrides = { models.TextField: {'widget': FooWidget} }<br/></code></pre><br/><br/><p>This will override all TextField fields with your custom FooWidget.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RAW ( ) QUERI CALCUL FIELD IN WHERE CLAUS
    </pattern>
    <template>
<![CDATA[<p>It actually has nothing to do with Django itself, but with the way MySQL works.</p><br/><br/><p>You can't use aliases in WHERE conditions, because WHERE clause evaluation precedes the aliases evaluation. </p><br/><br/><p>You can either:</p><br/><br/><ul><br/><li><p>Repeat the clause:</p><br/><br/><pre><code>Company.objects.raw('''SELECT *,core_location.a + core_location.b as dist<br/>FROM core_location,core_company<br/>WHERE (core_location.a + core_location.b)&lt;10    <br/>ORDER BY dist''')<br/></code></pre></li><br/><li><p>Do a subselect:</p><br/><br/><pre><code>Company.objects.raw('''SELECT * FROM (<br/>    SELECT *,core_location.a + core_location.b as dist<br/>    FROM core_location,core_company            <br/>) as subselect<br/>WHERE dist&lt;10  <br/>ORDER BY dist''')<br/></code></pre></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON OS SYSTEM MODUL INSID DJANGO
    </pattern>
    <template>
<![CDATA[<p>This should work fine. Why don't you try it?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SYSADMIN TASK WITH PYTHON DJANGO VIA WEB INTERFAC
    </pattern>
    <template>
<![CDATA[<p>If all you want is to do administration tasks then I suggest using <a href="http://www.webmin.com/" rel="nofollow">webmin</a>. If you just want to do this to learn django/python then feel free to use the functionality of webmin as a guide. Think about all the steps involved in taking backups, moving files around and other admin tasks. This should help you understand the problem better and break it into manageable chunks. </p><br/><br/><p>Remember that django is really just python underneath and it can be a vastly powerful tool. Try looking at some of your python scripts that you use for systems administration. Maybe you can adapt those as a web interface.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LOG FILE IN PYTHON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You're trying to open a directory. Don't do that. Open a file instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR LOST CONNECT TO MYSQL SERVER DURE QUERI WITH DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>The solution is do sleep between the adjacent database calls.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CONSUM XML REST
    </pattern>
    <template>
<![CDATA[<p>I took your question as an opportunity to learn a bit more about Django. I used <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">The Django Book</a> as a reference.</p><br/><br/><p>Starting with an empty Django site (<code>django-admin.py startproject testsite</code>), I've changed <code>urls.py</code> to this:</p><br/><br/><pre><code>from django.conf.urls.defaults import patterns, include, url<br/>from testsite.views import index<br/><br/>urlpatterns = patterns('',<br/>    url(r'^(\d+)$', index),<br/>)<br/></code></pre><br/><br/><p>And <code>views.py</code> to this:</p><br/><br/><pre><code>from django.http import HttpResponse<br/>from xml.dom.minidom import parseString<br/>import xml<br/>import urllib<br/><br/>def index(request, number):<br/>    data = open('myfile.xml', 'r').read()<br/>    dom = parseString(data)<br/>    rows = (dom.getElementsByTagName("card")[0]<br/>               .getElementsByTagName("markers")[0]<br/>               .getElementsByTagName("marker"))<br/><br/>    for row in rows:<br/>        if row.getAttribute("number") == str(number):<br/>             return HttpResponse(str(xml.dumps({'long': row.getAttribute("lng"), <br/>                    'lat': row.getAttribute("lat")}, sort_keys=True, indent=4)))<br/>    return HttpResponse("Not Found")<br/></code></pre><br/><br/><p>Caveat: I've not tested the XML code, only Django-related one, which I've tested via <code>python manage.py runserver</code>.</p><br/><br/><p>The Django Book contains a lot of information, including how to deploy this on a production server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON RESPONS TO JQUERI
    </pattern>
    <template>
<![CDATA[<p>There's a syntax error in your javascript. You're missing a semicolon. Should be:</p><br/><br/><pre><code>$(document).ready(function(){<br/>    $.getJSON('http://myserver:8000/get_yellow/', <br/>    function(data) {<br/>        alert('Fetched ' + data.length + ' items!');<br/>    });<br/>});<br/></code></pre><br/><br/><p>Also, if all you're looking for is a way to debug your api code, simply type the url (<a href="http://myserver:8000/get_yellow/" rel="nofollow">http://myserver:8000/get_yellow/</a>) into the address bar of your current browser. You should probably be doing this first before trying to call it using javascript.</p><br/><br/><p><strong>Update:</strong></p><br/><br/><p>If this is not a cross browser request, your call should look like:</p><br/><br/><pre><code>$(document).ready(function(){<br/>    $.getJSON('get_yellow/', <br/>    function(data) {<br/>        alert('Fetched ' + data.length + ' items!');<br/>    });<br/>});<br/></code></pre><br/><br/><p>If it is a cross browser request, you should use jsonp instead:</p><br/><br/><pre><code>$(document).ready(function(){<br/>    $.ajax({<br/>       type: "GET",<br/>       url: "http://myserver:8000/get_yellow/",<br/>       dataType: "jsonp",<br/>       success: function(data) {<br/>           alert('Fetched ' + data.length + ' items!');<br/>       }<br/>     });<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IN DJANGO ADMIN PANEL
    </pattern>
    <template>
<![CDATA[<p>Take a look at this this snippet: <a href="http://djangosnippets.org/snippets/2154/" rel="nofollow">Google map on admin address field</a> </p><br/><br/><p>It demonstrates the general idea and should be easily adjustable to your specific needs,</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DICTIONARI TO JSON PROBLEM
    </pattern>
    <template>
<![CDATA[<p>The code in your question does not contain the key bit we need to see - how you are serialising your dictionary into a string. If you are just doing <code>str(dictionary)</code> then that will not work, you need to encoded it using <a href="http://pypi.python.org/pypi/simplejson/" rel="nofollow"><code>simplejson</code></a>. You can install this library with easy_install, or if you're using Python 2.6+ then it's included as <code>json</code>.</p><br/><br/><p>To encode a Python object as a JSON string simple use <code>json.dumps(dictionary)</code>.</p><br/><br/><p>You say that your Javascript code is expecting an object containing nested lists, but your Python code seems to be generating an object like <code>{"aaData": [{..:.., ..:..},{..:.., ..:..}]}</code>, i.e. a dictionary, inside a list, inside a dictionary. If the problem isn't with how you're encoding the JSON string can be clearer about the object you're expecting?</p><br/><br/><p><strong>EDIT</strong></p><br/><br/><p>As Ignacio Vazquez-Abrams states in your Python code you're adding dictionaries to the list then expecting them to have magically transformed into lists when they're encoded as JSON. You either need to convert your Javascript to work with the data you are sending at the moment, or replace your current Python code with something similar to what Ignacio suggests.</p><br/><br/><p>I would suggest the first of these options as it is easy to get things wrong when using a list to represent a structure and you'll end up using the wrong value because you got the indexes wrong. If you keep it as a dictionary/object then you can access things by name and you avoid that problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO CLASH WITH RELAT M2M FIELD ERROR
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/db/models/#be-careful-with-related-name" rel="nofollow">I found a solution in Django documention</a>.</p><br/><br/><p>It's possible to write in abstract models things like this:<code>related_name="%(app_label)s_%(class)s_related"</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ROW TO JQGRID WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>The problem was around <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/" rel="nofollow">CSRF protection in Django</a>. <br/>In my case JqGrid created a form without the CSRF token, so CSRF verification was failed.<br/><a href="http://stackoverflow.com/questions/5100539/django-csrf-check-failing-with-an-ajax-post-request">Here</a> is a good solution for the problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF TOKEN DAJAXIC
    </pattern>
    <template>
<![CDATA[<p>From <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/" rel="nofollow">django doc</a>:</p><br/><br/><ol><br/><li><p>Add the middleware 'django.middleware.csrf.CsrfViewMiddleware' to your list of middleware classes, MIDDLEWARE_CLASSES. (It should come before CsrfResponseMiddleware if that is being used, and before any view middleware that assume that CSRF attacks have been dealt with.) <br/>Alternatively, you can use the decorator django.views.decorators.csrf.csrf_protect on particular views you want to protect (see below).</p></li><br/><li><p>In any template that uses a POST form, use the csrf_token tag inside the  element if the form is for an internal URL:</p><br/><br/><p>{% csrf_token %}</p></li><br/></ol><br/><br/><p>This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.</p><br/><br/><ol><br/><li><p>In the corresponding view functions, ensure that the 'django.core.context_processors.csrf' context processor is being used. Usually, this can be done in one of two ways:</p><br/><br/><p>3.1 Use RequestContext, which always uses 'django.core.context_processors.csrf' (no matter what your TEMPLATE_CONTEXT_PROCESSORS setting). If you are using generic views or contrib apps, you are covered already, since these apps use RequestContext throughout.</p><br/><br/><p>3.2 Manually import and use the processor to generate the CSRF token and add it to the template context.</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SET COOKI ON TEST CLIENT
    </pattern>
    <template>
<![CDATA[<p>The <code>client.get</code> method takes a <code>follow</code> argument which allows it to follow redirects:</p><br/><br/><pre><code>response = self.client.get('/contact/', follow=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTTPRESPONS IN VIEW IN DJANGO WHILE USE AJAX
    </pattern>
    <template>
<![CDATA[<p>Perhaps <code>if request.is_ajax():</code> is returning False, if that's your entire view function?</p><br/><br/><p>Typically, you should follow this pattern when making Django view functions:</p><br/><br/><pre><code>def my_view(request):<br/>    if request.method == 'POST':<br/>        form = MyForm(data=request.POST, files=request.FILES)<br/>        if form.is_valid():<br/>            # do something with form...<br/>    else:<br/>        initial = {...}<br/>        form = MyForm(initial=initial)<br/>    context = {'form':form, ...}<br/>    return render_to_response('path/to/template.html', context, context_instance=RequestContext(request))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTO PDF USE PYTHON
    </pattern>
    <template>
<![CDATA[<p>Configuring Pisa for Django shouldn't be <a href="http://stackoverflow.com/questions/1377446/html-to-pdf-for-a-django-site/1377652#1377652">too hard</a>.</p><br/><br/><p>There are really several examples on the net that show you how to do it and<br/>explain how to link to external resources in your templates:</p><br/><br/><ul><br/><li><a href="http://www.arnebrodowski.de/blog/501-Pisa-and-Reportlab-pitfalls.html" rel="nofollow">http://www.arnebrodowski.de/blog/501-Pisa-and-Reportlab-pitfalls.html</a></li><br/><li><a href="http://stackoverflow.com/questions/2179958/django-pisa-adding-images-to-pdf-output/2180417#2180417">django - pisa : adding images to PDF output</a></li><br/><li><a href="http://antydba.blogspot.com/2009/12/django-pisa-polskie-czcionki.html" rel="nofollow">http://antydba.blogspot.com/2009/12/django-pisa-polskie-czcionki.html</a></li><br/><li><a href="http://www.20seven.org/journal/2008/11/pdf-generation-with-pisa-in-django.html" rel="nofollow">http://www.20seven.org/journal/2008/11/pdf-generation-with-pisa-in-django.html</a></li><br/></ul><br/><br/><p>In your case you should try the link-callback-function mentioned in the first blog post:</p><br/><br/><pre><code>def fetch_resources(uri, rel):<br/>    """<br/>    Callback to allow pisa/reportlab to retrieve Images,Stylesheets, etc.<br/>    'uri' is the href attribute from the html link element.<br/>    'rel' gives a relative path, but it's not used here.<br/><br/>    """<br/>    path = os.path.join(settings.MEDIA_ROOT, uri.replace(settings.MEDIA_URL, ""))<br/>    return path<br/></code></pre><br/><br/><p>For newer Django-Version you probably should use <code>STATIC_ROOT</code> instead of <code>MEDIA_ROOT</code></p><br/><br/><p>Then use <code>fetch resources</code> accordingly in your render-method:</p><br/><br/><pre><code>pdf = pisa.pisaDocument(StringIO.StringIO(<br/>        html.encode("UTF-8")), <br/>        result, <br/>        link_callback=fetch_resources,<br/>        encoding="utf-8")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      M WITH AJAX AND GET
    </pattern>
    <template>
<![CDATA[<p>Use HTML5 History API, to manipulate browser history via script (that would be inside a success function).</p><br/><br/><p>In your case, ajax request does not need to be POST since, searching does not change anything.</p><br/><br/><p>For more info about History Api check:</p><br/><br/><ul><br/><li><a href="http://diveintohtml5.ep.io/history.html" rel="nofollow">http://diveintohtml5.ep.io/history.html</a></li><br/></ul><br/><br/><p>There is a jquery plugin for ajax with permalinks, demo included:  </p><br/><br/><ul><br/><li><a href="https://github.com/defunkt/jquery-pjax" rel="nofollow">https://github.com/defunkt/jquery-pjax</a></li><br/></ul><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CROSS DOMAIN DATA USE JAVASCRIPT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I don't know about django, but the other domain must support CORS (see <a href="http://en.wikipedia.org/wiki/Cross-Origin_Resource_Sharing" rel="nofollow">Wikipedia</a> and <a href="http://www.w3.org/TR/cors/" rel="nofollow">the w3 spec</a>).</p><br/><br/><p>Basically, the remote server must support the <code>Access-Control-Allow-Origin</code> header. Usually I just have my server set the header value to <code>*</code> to allow all origins to access data.</p><br/><br/><p>You might need to find more specific documentation for your particular webserver.  You might also want to watch the conversation between servers using <a href="http://www.wireshark.org/" rel="nofollow">wireshark</a>. It's a great little utility for finding out what's really happening with your HTTP requests/responses...</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N AJAX SEARCH IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>well i used <a href="http://jqueryui.com/demos/autocomplete/" rel="nofollow">jqueryui autocomplete</a> to make the ajax call<br/>and <a href="https://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">piston</a> to read the models.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERIALIS HTML AND OUTPUT AS JSON
    </pattern>
    <template>
<![CDATA[<p>If you truly need to parse an HTML page in Python, you should be using <a href="http://www.crummy.com/software/BeautifulSoup/" rel="nofollow">Beautiful Soup</a>. I question whether you really should be doing this though. Are the HTML pages and JSON outputs using the same Django instance? Are they all apart of the same project?</p><br/><br/><p>If they <em>are</em> apart of the same project, then you can use something like <a href="https://bitbucket.org/jespern/django-piston/wiki/Home" rel="nofollow">django-piston</a> which is a RESTful framework for python. This will allow you to define the data that should be exposed, and output in multiple formats such as HTML/Django Template, JSON, XML, or YAML. You can also create your own emitters to output as a different format.</p><br/><br/><p>That way, you can expose a particular URL as a regular template, or get the same data as JSON would will be much easier to parse than HTML.</p><br/><br/><p>Sorry if I'm misunderstanding your problem. But it really does sound like you want to expose a view as several different formats, and a RESTful framework will help with that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A MODEL TO JSON WITH A NEST CLASS DOE N T EXPOS THE NEST CLASS
    </pattern>
    <template>
<![CDATA[<p>I couldn't figure out how to expose the inner class over JSON so I chose an alternative way of doing it and dropping django-imagekit and manually resizing the image to a thumbnail and saving it in the model's save() function.</p><br/><br/><pre><code>im = ImageOps.fit(im, (sizes['thumbnail']['width'], sizes['thumbnail']['height'],), method=Image.ANTIALIAS)<br/>thumbname = filename + "_" + str(sizes['thumbnail']['width']) + "x" + str(sizes['thumbnail']['height']) + ".jpg"<br/>im.save(fullpath + '/' + thumbname)<br/></code></pre><br/><br/><p>It's a less than clean approach but it works for now.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REGARD API DESIGN
    </pattern>
    <template>
<![CDATA[<p>You're right on track, but I would use <code>request.is_ajax()</code> to check if it's actually a ajax request to return the response accordingly. from the <a href="http://docs.djangoproject.com/en/dev/ref/request-response/#methods" rel="nofollow">django request docs</a> </p><br/><br/><blockquote><br/>  <p>Returns True if the request was made via an XMLHttpRequest, by checking the HTTP_X_REQUESTED_WITH header for the string 'XMLHttpRequest'. Most modern JavaScript libraries send this header. If you write your own XMLHttpRequest call (on the browser side), you'll have to set this header manually if you want is_ajax() to work.</p><br/></blockquote><br/><br/><p>This will allow you to separate return values for users that have javascript disabled, allowing them to still use your site correctly.  If you're not using a javascript library, you set this yourself.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL MODEL IN DICTIONARI JSON
    </pattern>
    <template>
<![CDATA[<p>You could pass in the values of the models and convert it to a list:</p><br/><br/><pre><code>results = {}<br/>results["game_info_db"] = list(db.gameInfo.objects.get(name='name').values())<br/>results["dlc_list_db"] = list(db.gameAddon.objects.filter(game__name='name').values())<br/><br/>return HttpResponse(json.dumps(results), mimetype='application/javascript')<br/></code></pre><br/><br/><p>The data will appear as objects on the javascript side.  Assuming you have a <code>name</code> column, you can access the attributes like the following:</p><br/><br/><pre><code>$.getJSON("/ajax/", function(data) {<br/>    var dlcs = data.dlc_list_db;<br/>    for (i = 0; i &lt; dlcs.length; i++) {<br/>        var dlc = dlcs[i];<br/>        alert(dlc.name);<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STRUGGL WITH A LONGITUDE LATITUD SQL QUERI I COPI FROM PHP INTO OUR NEW PYTHON BACKEND. NEED SOME SECOND OPINION
    </pattern>
    <template>
<![CDATA[<p>I noticed that you're converting the latitude and longitude on <code>orderloc</code> to floats. What field type are they on your model in the first place? Django has a <code>FloatField</code> field type, so if you're dealing with floats, you should use that field type on your model. I'm thinking based on this that it might be an issue of comparing the actual true-blue float with something like a CHAR value, and it's not exactly matching.</p><br/><br/><p>Alternatively, floats in Python can be a little weird sometimes, returning numbers like 25.00000000001 instead of an even 25 after doing calculations. Since you're dealing with latitude and longitude, which typically have a fixed set of digits, you might also try using <code>DecimalFields</code>. These essentially function like floats, but limit stored data to a defined number of places. Again, just throwing out ideas.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM + ERROR IN JSON + JQUERI SYNTAX ERROR SOLV
    </pattern>
    <template>
<![CDATA[<p>Here I post the solution:</p><br/><br/><p>switched from </p><br/><br/><pre><code>$.post()<br/></code></pre><br/><br/><p>to</p><br/><br/><pre><code>$.ajax(url, function() {}, dataType:'JSON');<br/></code></pre><br/><br/><p>It worked.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RUN PYTHON MANAGE.PI SYNCDB
    </pattern>
    <template>
<![CDATA[<p>So I am answering it here so that other people can have answer of same problem:</p><br/><br/><p>As said by Bill Kary: <br/>He have solved this himself. Change all the collation of ALL tables AND fields to utf (utf8_general_ci) stops the error beautifully.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT INPUT FIELD LOOK DISABL BUT ACT READONLI
    </pattern>
    <template>
<![CDATA[<p>Here is workaround: You have input disabled where you want ( just for displaying value ) and have a hidden input with name and value you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOST MULTIPL SITE WITH ONE DJANGO INSTAL
    </pattern>
    <template>
<![CDATA[<p>Yes. </p><br/><br/><p>On the Apache side, you will want to look into virtual hosts. You provide a different configuration for each site, based on the hostname, and Apache routes the incoming requests accordingly. See <a href="http://httpd.apache.org/docs/2.2/vhosts/" rel="nofollow">http://httpd.apache.org/docs/2.2/vhosts/</a></p><br/><br/><p>As for Python packages, including South, Celery, and Django itself, you can certainly share them between all your sites. That's what happens by default. However, the Right Way to do things would be to use a different virtualenv for each site. That way you can, for example, upgrade the version of Django one site runs on but not the other. See <a href="http://pypi.python.org/pypi/virtualenv" rel="nofollow">http://pypi.python.org/pypi/virtualenv</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EGEO AND GOOGL MAP
    </pattern>
    <template>
<![CDATA[<p>try to replace</p><br/><br/><pre><code>var marker = new google.maps.Marker({<br/>   map: map,<br/>   position: [lat , lng]<br/>   });<br/></code></pre><br/><br/><p>with </p><br/><br/><pre><code>var marker = new google.maps.Marker({<br/>   map: map,<br/>   position: new google.maps.LatLng(lat, lng);<br/>   });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PART OF DJANGO MODEL WITHOUT AN HTML FORM
    </pattern>
    <template>
<![CDATA[<p>I would just use a <code>button</code> input that uses AJAX to send the data to the server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEARCH FOR INVALID CHARACT IN PYTHON
    </pattern>
    <template>
<![CDATA[<p>For a regex solution, there are two ways to go here:</p><br/><br/><ol><br/><li>Find one invalid char anywhere in the string.</li><br/><li>Validate every char in the string.</li><br/></ol><br/><br/><p>Here is a script that implements both:</p><br/><br/><br/><br/><pre class="lang-py prettyprint-override"><code>import re<br/>topic_message = 'This topic is a-ok'<br/><br/># Option 1: Invalidate one char in string.<br/>re1 = re.compile(r"[&lt;&gt;/{}[\]~']");<br/>if re1.search(topic_message):<br/>    print ("RE1: Invalid char detected.")<br/>else:<br/>    print ("RE1: No invalid char detected.")<br/><br/># Option 2: Validate all chars in string.<br/>re2 =  re.compile(r"^[^&lt;&gt;/{}[\]~']*$");<br/>if re2.match(topic_message):<br/>    print ("RE2: All chars are valid.")<br/>else:<br/>    print ("RE2: Not all chars are valid.")<br/></code></pre><br/><br/><p>Take your pick.</p><br/><br/><p>Note: the original regex erroneously has a right square bracket in the character class which needs to be escaped.</p><br/><br/><p><strong>Benchmarks:</strong> After seeing gnibbler's interesting solution using <code>set()</code>, I was curious to find out which of these methods would actually be fastest, so I decided to measure them. Here are the benchmark data and statements measured and the <code>timeit</code> result values:</p><br/><br/><p><strong>Test data:</strong></p><br/><br/><br/><br/><pre class="lang-py prettyprint-override"><code>r"""<br/>TEST topic_message STRINGS:<br/>ok:  'This topic is A-ok.     This topic is     A-ok.'<br/>bad: 'This topic is &lt;not&gt;-ok. This topic is {not}-ok.'<br/><br/>MEASURED PYTHON STATEMENTS:<br/>Method 1: 're1.search(topic_message)'<br/>Method 2: 're2.match(topic_message)'<br/>Method 3: 'set(invalid_chars).intersection(topic_message)'<br/>"""<br/></code></pre><br/><br/><p><strong>Results:</strong></p><br/><br/><br/><br/><pre class="lang-py prettyprint-override"><code>r"""<br/>Seconds to perform 1000000 Ok-match/Bad-no-match loops:<br/>Method  Ok-time  Bad-time<br/>1        1.054    1.190<br/>2        1.830    1.636<br/>3        4.364    4.577<br/>"""<br/></code></pre><br/><br/><p>The benchmark tests show that Option 1 is slightly faster than option 2 and both are much faster than the <code>set().intersection()</code> method. This is true for strings which both match and don't match.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR GLOBAL NAME IS NOT DEFIN
    </pattern>
    <template>
<![CDATA[<p>That is probably <code>zipstream</code> and not <code>zipf</code>. So replace that with <code>zipstream</code> and it might work.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MORE PYTHON WAY TO WRITE THI FUNCTION DECLAR
    </pattern>
    <template>
<![CDATA[<p>Use <a href="http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow" title="4. More Control Flow Tools - Python v2.7.1 documentation">unpacking of arguments</a>:</p><br/><br/><pre><code>def create_action(*args, **kwargs):<br/>    action = Action(*args, **kwargs)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITI FIELD VALU WHEN USER CLICK ON RESPECT BOX
    </pattern>
    <template>
<![CDATA[<p>One way is to use HTML5's placeholder attribute directly from Django:</p><br/><br/><pre><code>descr = forms.CharField(widget=forms.TextInput(attrs={<br/>    'placeholder': 'Please insert a relevant description ...'}))<br/></code></pre><br/><br/><p>The unique constraint is that it is not yet supported by Internet Explorer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEMPLAT ARRAY ELEMENT ACCESS
    </pattern>
    <template>
<![CDATA[<p>Your template code runs completely independently of JavaScript.</p><br/><br/><p>The browser runs JavaScript when the page loads, based on whatever raw code your template produced.</p><br/><br/><p>Generate a JavaScript array via the template language that your script can use, or use AJAX to request the data from django for a given point.</p><br/><br/><pre><code>day_records = new Array();<br/>{% for point in day_records %}<br/>    day_records[{{ forloop.counter0 }}] = '{{ point.date }}';<br/>{% endfor %}<br/><br/>plant.bind("plothover",<br/>       function(event,pos,item){<br/>       if(item){<br/>           removeTooltip();<br/>           var point = item.dataIndex;           <br/>           showTooltip(item.pageX,item.pageY, day_records[point]);<br/>       }else{<br/>           removeTooltip();<br/>       }<br/>       });<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AUTH.US WITH UNIQU EMAIL
    </pattern>
    <template>
<![CDATA[<p>add this to your form. But this isn't perfect way. race condition is available  by only using this form. I recommend you to add unique constraint at db level.</p><br/><br/><pre><code>def clean_email(self):<br/>    data = self.cleaned_data['email']<br/>    if User.objects.filter(email=data).exists():<br/>        raise forms.ValidationError("This email already used")<br/>    return data<br/></code></pre><br/><br/><p>SQL to add unique constraint:</p><br/><br/><pre><code>ALTER TABLE auth_user ADD UNIQUE (email)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUSH TO A REMOT ONLI SOME DIRECTORI OR FILE IN GIT
    </pattern>
    <template>
<![CDATA[<p>First, if you're doing active development in Heroku then you may be dead in the water. But if your doing development on your local machine - branches may be able to help you out.</p><br/><br/><p>My advice to you would be to create a separate branch for deploying code to heroku. In this scenario you could use the master branch for active development, and keep those virtual environment folders in there - and have a separate branch (say, "production") for deploying the code to heroku.</p><br/><br/><p>Whenever you're ready to release a new version of your code, you should switch over to the production branch, merge in the changes from master, delete those virtual environment folders, then push to Heroku. In practice, that command sequence will look something like this.</p><br/><br/><pre><code>$ git checkout production<br/>$ git merge master<br/>$ rm -Rf bin build include lib .Python *.pyc<br/>$ git commit -a -m "Cleanup for production."<br/>$ git push heroku production<br/></code></pre><br/><br/><p>That seems as though it will be the best working solution. Some vectors you may want to look into on your own:</p><br/><br/><ul><br/><li>Ways to automate the process of deleting the files via shell scripts and git hooks.</li><br/><li>To make sure that Heroku can use a branch other than "master" for running code (I would think that it should be able to).</li><br/><li>To see if it may be possible to use different <code>.gitignore</code> files in different branches, and if so - whether or not that will remove the cleanup process of deleting those files manually.</li><br/></ul><br/><br/><p>Hope this helps!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TIMER JAVASCRIPT COMPON IN A DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>The easiest to implement would be to just pass the current timer value in the POST parameters, and restart the timer using that timer value on the next page.</p><br/><br/><p>Its probably better to use ajax (possibly through a django library like <a href="http://www.dajaxproject.com/" rel="nofollow">dajax</a>) seems like a good way to go, and have the timer on one page (which continuously updates the questions as they move along).  </p><br/><br/><p>Also, if this online test is used in any way (e.g., as a quiz grade for a class), you should record the initial and final timestamp on the server and go by that difference only (possibly giving several extra seconds to account for communication lag).  In general you can't trust that the javascript running hasn't been altered.  It can still be there as a convenience to let them know how much time is left, but remember that all client side java-script is easily modified by the user to give themselves more time.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PATCH REVIEW WEB BASE SYSTEM
    </pattern>
    <template>
<![CDATA[<p>If you need a web-based submit and review system for git, have a look at <a href="http://source.android.com/source/life-of-a-patch.html" rel="nofollow">Gerrit</a> from Google.  </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON WITH SIMPLEJSON
    </pattern>
    <template>
<![CDATA[<p>You should be able to tell that you recieved a 404, because the response code was not 200.  That is:</p><br/><br/><pre><code>import urllib<br/>resp = urllib.urlopen('http://example.com/')<br/><br/>if resp.getcode() == 200:<br/>    rejoice()<br/>if resp.getcode() == 404:<br/>    sulk()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL SERIAL
    </pattern>
    <template>
<![CDATA[<p><a href="http://docs.djangoproject.com/en/1.3/topics/serialization/#dependencies-during-serialization" rel="nofollow">http://docs.djangoproject.com/en/1.3/topics/serialization/#dependencies-during-serialization</a></p><br/><br/><p>Covers the essence of this.  The resulting file is not <em>precisely</em> what's required, since the objects won't be nested.  However it is what Django produces by default and it's what Django will use for deserialization.</p><br/><br/><p>If you use <a href="https://bitbucket.org/jespern/django-piston/wiki/Documentation#!emitters" rel="nofollow">Piston</a> you can easily define a Handler which will produce nested JSON, but it won't be <em>precisely</em> as shown because Piston's JSON emitter isn't precisely in the Django format.</p><br/><br/><p>Getting to <em>precisely</em> what's hoped-for leads to extending the Django serializer to produce a nested JSON object as the natural key. See <a href="http://code.djangoproject.com/browser/django/trunk/django/core/serializers/python.py" rel="nofollow">http://code.djangoproject.com/browser/django/trunk/django/core/serializers/python.py</a>.  Lines 47-59</p><br/><br/><p>Or, you can define a <code>natural_key</code> method which uses Django's 'django.core.serializers.json .Serializer' to emit the JSON serialization of the object instead of some other natural key value.  This is a little weird semantically, but it may do what you want. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO LOGIN ( ) WITHOUT A REQUEST OBJECT
    </pattern>
    <template>
<![CDATA[<p>Using <code>login()</code> without a request object doesn't make any sense, because what <code>login()</code> does is <a href="http://code.djangoproject.com/browser/django/tags/releases/1.3/django/contrib/auth/__init__.py#L65" rel="nofollow">"coupling" user to request</a>: </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON FROM ASIHTTPREQUEST TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>This might be a little cumbersome but you may try some simple regexp in <code>objective c</code> just to see if that is really the case</p><br/><br/><pre><code>NSError *error = NULL;<br/>NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@"\"" options:NSRegularExpressionCaseInsensitive error:&amp;error];<br/>NSString *json = [regex stringByReplacingMatchesInString:jsonPerson options:0 range:NSMakeRange(0, [jsonPerson length]) withTemplate:@"'"];<br/></code></pre><br/><br/><p>There might be some errors because I didn't run the code.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TEXT FILE CONTENT TO DB INCORRECT STRING VALU XEF XBB XBF # W... FOR COLUMN CONTENT AT ROW 1
    </pattern>
    <template>
<![CDATA[<p>You're on the right path. Check the charset of your database (is it utf-8?). If it isn't and you want to use UTF-8, change the charset by using this SQL command</p><br/><br/><pre><code>alter table yourTableName DEFAULT CHARACTER SET utf8;<br/></code></pre><br/><br/><p>And read <a href="http://www.evanjones.ca/python-utf8.html" rel="nofollow">this great tutorial</a> on using UTF-8 in Python if you want to convert your UTF-8 string back. </p><br/><br/><p>You can strip the DOM by using this command</p><br/><br/><blockquote><br/>  <p># Strip the BOM from the beginning of the Unicode string, if it exists<br><br/>  u.lstrip( unicode( codecs.BOM_UTF8,<br/>  "utf8" ) )</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      4.0 DJANGO AND EXTDIRECT
    </pattern>
    <template>
<![CDATA[<blockquote><br/>  <p>Do you know if I can use this Django<br/>  Ext.Direct router with ExtJS 4.0?</p><br/></blockquote><br/><br/><p>We recently switched from Ext3 to Ext4 (with Django as backend). </p><br/><br/><p>Our experience involved a lot of trouble with changes in the ExtJS 4 API (especially in the area of datagrid stores). All reasonable and good changes but huge. Given the activity of the GitHub project above (2/2010) I would judge it's <strong>nearly 100%</strong> sure that <strong>it will not work</strong> with the current version of ExtJS.</p><br/><br/><p>On the other hand ExtJS4 has very good support for backend/frontend conversions (we got rid of a lot of conversions). So I assume there is not that much need for the Django router any more.</p><br/><br/><blockquote><br/>  <p>Can I use ExtJS library drawing (or<br/>  charts) to draw a hall where clients<br/>  can click on empty seats and purchase<br/>  a tickets?</p><br/></blockquote><br/><br/><p>This is a <strong>very special use case</strong> and far away form the charting approach in ExtJS (or any other charting lib I know of). ExtJS charts are working with data stores to display basically numerical data. I'm pretty sure you need to write this <strong>from scratch</strong>.</p><br/><br/><blockquote><br/>  <p>I'm new to JavaScript programming.</p><br/></blockquote><br/><br/><p>ExtJS is a very sophisticated framework. Prepare for serious stuff. These guys understand JavaScript very well and put it in action as if it is a "real" object oriented language (did I just wrote this - prepare for flamewars. ;-) ).<br/>Seriously, you need to invest some time to understand their philosophy (but it's worth the effort).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      GIT SUBMODUL ON PYTHONPATH WHEN USE VIRTUALENV
    </pattern>
    <template>
<![CDATA[<p>dump all your installed packages in a requirement file (requirements.txt looks the standard naming) using</p><br/><br/><pre><code>pip freeze &gt; requirements.txt<br/></code></pre><br/><br/><p>everytime you need a fresh virtualenv you just have to do:</p><br/><br/><pre><code>virtualenv &lt;name&gt; --no-site-packages<br/>pip install -r requirements.txt<br/></code></pre><br/><br/><p>the install -r requirements.txt works great also if you want to update to newer packages</p><br/><br/><p>just keep requirements.txt in sync with your packages (by running pip freeze every time something changes) and you're done, no matter how many virtualenv you have.</p><br/><br/><p>NOTE: if you need to do some development on a package you can install that using the -e (editable) param, this way you can edit the package and you don't have to uninstall/install every time you want to test new stuff :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESERIALIS ( DESERI ) HTML FRAGMENT IN JSON FROM SIMPLEJSON.DUMP
    </pattern>
    <template>
<![CDATA[<p>I don't understand why you need to unescape your json string, while it should be escaped to be a valid javascript and python string ?</p><br/><br/><p>And by the way the newlines <code>\n</code> don't have nothing to do with json dumper is just because the value of the key "somehhtml" is a multiline string that contain new lines (which i think is a mistake maybe you wanted to put <code>&lt;br /&gt;</code>).</p><br/><br/><p>For summary let's put some code :) :</p><br/><br/><p><strong>python</strong></p><br/><br/><pre><code>&gt;&gt;&gt; import json<br/>&gt;&gt;&gt; json.dumps(d)<br/>'{"hits": 22, "page": 3, "somehhtml": "&lt;div id=\'item1\'&gt;Something&lt;/div&gt;&lt;div id=\'item2\'&gt;More Stuff&lt;/div&gt;\\n\\n&lt;p&gt;More after some linebreaks.&lt;/p&gt;"}'<br/></code></pre><br/><br/><p><strong>javascript</strong></p><br/><br/><pre><code>&gt;&gt;&gt; s = '{"hits": 22, "page": 3, "somehhtml": "&lt;div id=\'item1\'&gt;Something&lt;/div&gt;&lt;div id=\'item2\'&gt;More Stuff&lt;/div&gt;\\n\\n&lt;p&gt;More after some linebreaks.&lt;/p&gt;"}'<br/>&gt;&gt;&gt; JSON.parse(s)<br/>Object { hits=22, page=3, somehhtml="&lt;div id='item1'&gt;Somethi...er some linebreaks.&lt;/p&gt;"}<br/>// eval is not safe, but you should add a parentheses as a workaround  <br/>&gt;&gt;&gt; eval('(' + s + ')')<br/>Object { hits=22, page=3, somehhtml="&lt;div id='item1'&gt;Somethi...er some linebreaks.&lt;/p&gt;"}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SLICKGRID AND JSON LOAD
    </pattern>
    <template>
<![CDATA[<p>After trying slickgrid and dojo &amp; dojango, I ended up finally finding success with JQuery and <a href="https://github.com/gerry/django-jqgrid" rel="nofollow">django-jqgrid</a> (although not without frustration). </p><br/><br/><p>While this is not an answer to the question, it was a solution to this problem for me. I say solution, not workaround, because I didn't need slickgrid, just any editable grid.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL QUERI EXECUT BUT NOTH HAPPEN
    </pattern>
    <template>
<![CDATA[<p>Perhaps you have to commit your changes:</p><br/><br/><pre><code>cursor.execute('COMMIT')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      COLLECT BASE ON CURRENT USER LOCAL ON A DJANGO SITE
    </pattern>
    <template>
<![CDATA[<p>The solution I ended up taking is just converting the utf-8 string to ASCII and stripping the diacritics just for the sort operation. Not ideal but it ended up working for this specific case.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANYTOMANI FIELD NOT SAVE WHEN USE DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>So it turns out the above was not the correct way to implement it. The code belonged in StoreAdmin, by overriding model_save().</p><br/><br/><p>This is how I solved it:</p><br/><br/><pre><code>class StoreAdmin(admin.ModelAdmin):<br/>    def save_model(self, request, obj, form, change):<br/>        if obj.copy_holidays_from:<br/>            form.cleaned_data['holidays'] = obj.copy_holidays_from.holidays.all()<br/><br/>        super(StoreAdmin, self).save_model(request, obj, form, change)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERS FOR GET ABSOLUTE URL WITH MANI TO MANI FIELD
    </pattern>
    <template>
<![CDATA[<p>without seeing the url pattern. </p><br/><br/><p><code>self.filter_ids</code> does not return a list of ids, something like.</p><br/><br/><p><code>self.filter_ids.all().values_list('id', flat=True)</code></p><br/><br/><p>would return <code>[1,2,3]</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INITIAL DATA JSON FIXTUR FOR MANY TO MANI RELAT
    </pattern>
    <template>
<![CDATA[<p>I'm pretty sure the manytomany field of your model can be written like a simple list:</p><br/><br/><pre><code> [<br/>    { <br/>        "model": "sites.word", <br/>        "pk": 1,<br/>        "fields": { <br/>            "name": "apple",<br/>            "my_m2m_field_name": [1,2,3],<br/>        }<br/>     }<br/>]<br/></code></pre><br/><br/><p>where 1, 2, 3 are the primary keys for the relations</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO RECEIV HOOK ON SERVER RESPOND TO COLLECTSTAT WITH YE
    </pattern>
    <template>
<![CDATA[<pre><code>python manage.py collectstatic --noinput<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INTEGR EXIST SCRIPT INTO DJANGO
    </pattern>
    <template>
<![CDATA[<p>You want do siplay external script results in the web browser? Then, I suggest you make those scripts write their results to database and then use django models to fetch and display the info.</p><br/><br/><p>If you want to execute the script each time user opens the webpage and display a result, use this python code:</p><br/><br/><pre><code>def command_output(cmd):<br/>    """ Capture a command's standard output."""<br/>    import subprocess;<br/>    return subprocess.Popen(cmd.split(), stdout=subprocess.PIPE).communicate()[0];<br/><br/>result = command_output('ls -al');<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SQL TRANSACT GET LATEST TIMESTAMP ROW FROM TABL IN POSTGR
    </pattern>
    <template>
<![CDATA[<h3>Revised answer after some consideration</h3><br/><br/><pre><code>SELECT *<br/>  FROM ta_price a<br/>  JOIN (<br/>   SELECT catalogproduct_id, max(timestamp) ts<br/>     FROM ta_price<br/>    GROUP BY catalogproduct_id<br/>        ) b ON a.catalogproduct_id = b.catalogproduct_id<br/>           AND a.timestamp = b.ts<br/>           AND a.buy &gt; a.sell;<br/></code></pre><br/><br/><p><code>buy</code>and <code>sell</code> are not qualified in your question. Depending on the selectivity of <code>buy &gt; sell</code> you can speed up the query by adding the same <code>WHERE</code>-clause to the subselect. <br/>However, this yields <strong>different results</strong>. I add it on the off chance, that you might have overlooked it:</p><br/><br/><pre><code>SELECT *<br/>  FROM ta_price a<br/>  JOIN (<br/>   SELECT catalogproduct_id, max(timestamp) ts<br/>     FROM ta_price<br/>    WHERE buy &gt; sell<br/>    GROUP BY catalogproduct_id<br/>        ) b ON a.catalogproduct_id = b.catalogproduct_id<br/>           AND a.timestamp = b.ts<br/> WHERE a.buy &gt; a.sell;<br/></code></pre><br/><br/><p>Either way, a simple index like @Will implies will help:<br><br/><strike>CREATE INDEX my_idx ON ta_price (catalogproduct_id, timestamp);</strike>  </p><br/><br/><p>There is a superior approach, though.<br><br/>An unconditional <code>max()</code> in the subselect will result in a sequential table scan regardless of indexes. Such an operation will never be fast with 2.2m rows.<br><br/>The <code>JOIN</code> condition, combined with the <code>WHERE</code> clause of the outer <code>SELECT</code>, will profit from an index like the one above. Depending on the selectivity of <code>buy &gt; sell</code> a <a href="http://www.postgresql.org/docs/current/interactive/indexes-partial.html" rel="nofollow">partial index</a> will be a little or substantially faster and, correspondingly, smaller on disc and in RAM:</p><br/><br/><pre><code>CREATE INDEX my_partial_idx ON ta_price (catalogproduct_id, timestamp)<br/> WHERE buy &gt; sell;<br/></code></pre><br/><br/><p>The order of the columns in the index does not matter in this case. It will also speed ab my second variant of the query.</p><br/><br/><p>You mentioned the table was for "historic" purposes? If that means no new data, you could speed things up greatly with a <em>materialized view</em>.</p><br/><br/><hr><br/><br/><p>On a side note: I would not use <code>timestamp</code> as a column name. It is allowed in PostgreSQL, but it's a <a href="http://www.postgresql.org/docs/current/interactive/sql-keywords-appendix.html" rel="nofollow">reserved word</a> in all SQL standards.</p><br/><br/><hr><br/><br/><p>OK, <strong>first things last</strong>: for a table of 2.2m rows you need <strong>way more</strong> resources than postgres has out of the box. </p><br/><br/><ul><br/><li>Look at your postgresql.conf file and inspect the settings for <code>shared_buffers</code> and <code>work_mem</code> for a start.</li><br/><li>Consult the <a href="http://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server" rel="nofollow">postgres wiki for performance tuning</a></li><br/><li>Consult the fine manual on <a href="http://www.postgresql.org/docs/current/interactive/runtime-config-resource.html" rel="nofollow">ressource consumption</a></li><br/><li>Consult the fine manual on <a href="http://www.postgresql.org/docs/current/interactive/runtime-config-query.html#RUNTIME-CONFIG-QUERY-CONSTANTS" rel="nofollow">planner costs</a></li><br/><li><p>Increase these statistics setting:<br><br/><code>ALTER TABLE tmp.ta_price ALTER COLUMN buy SET STATISTICS 1000;<br><br/>ALTER TABLE tmp.ta_price ALTER COLUMN sell SET STATISTICS 1000;<br><br/>ALTER TABLE tmp.ta_price ALTER COLUMN ts SET STATISTICS 1000;</code>  </p><br/><br/><p>Then run <code>ANALYZE tmp.ta_price;</code>  </p></li><br/><li><p>Be sure that <a href="http://www.postgresql.org/docs/current/interactive/routine-vacuuming.html" rel="nofollow">autovacuum</a> is running. If in doubt, run <code>VACUUM ANALYZE ta_price</code> and see if it had an effect.</p><br/><br/><hr></li><br/></ul><br/><br/><p>I have played with the test setup of wildplasser (<strong>which was very helpful!</strong>) on a pg 8.4 installation with limited ressources.<br/>Here are the  <strong>total runtimes fom <code>EXPLAIN ANYLYZE</code></strong>  </p><br/><br/><pre><br/>Erwin 1)        901.487 ms  <br/>wildplasser 1) 1148.045 ms  <br/>A.H.           2922.113 ms  <br/></pre><br/><br/><p>Variant 2 with the additional (buy > sell) clause:  </p><br/><br/><pre><br/>Erwin 2)        536.678 ms  <br/>wildplasser 2)  809.215 ms  <br/></pre><br/><br/><h3>With partial index:</h3><br/><br/><pre><br/>Erwin 1)       1166.793 ms  -- slower (!), than unexpected<br/></pre><br/><br/><p><sub>Probably planner costs are off, this test db cluster is optimized for main db which <br/>has way more resources.</sub>  </p><br/><br/><pre><br/>wildplasser 1) 1122.609 ms -- rest is faster as expected  <br/><br/>Erwin 2)        481.487 ms  <br/>wildplasser 2)  769.887 ms  <br/></pre><br/><br/><h3>Resumé</h3><br/><br/><p>A.H.'s version takes much longer (same result as you reported). Window functions tend to be slow, especially on older versions of postgres. My alternative query is twice as fast, as expected. Question is, if the different results are desired - maybe not.</p><br/><br/><p>Anyway, that were 300k rows. Query takes 0.5 - 1s on version 8.4 with limited resources (but proper settings, mostly) on a 5 year old server. With a decent machine and decent settings (enough RAM!) you should bring it down to <strong>under 10s</strong> at least.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON EXCEPT VALU MODEL FIELD1 FIELD2 ... IS NOT JSON SERIALIZ
    </pattern>
    <template>
<![CDATA[<p>That's because the <code>json</code> module only serializes native data types by default, you have to tell it how to serialize arbitrary objects. Django has <a href="https://docs.djangoproject.com/en/dev/topics/serialization/" rel="nofollow">built-in support for serializing querysets and objects</a>, or you can write your own serializer:</p><br/><br/><pre><code>from django.core import serializers<br/>json_serializer = serializers.get_serializer("json")()<br/>json_serializer.serialize(queryset)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DENI FOR .IPYTHON AFTER INSTAL DJANGO CM
    </pattern>
    <template>
<![CDATA[<p>The user with which you are trying to access /var/www isn't allowed to do so. You either use a different user or you change the permissions of /var/www.</p><br/><br/><p>This is btw not a python question, it's a linux question.</p><br/><br/><p>With <code>ls -l /var/www</code> you can see who is allowed to create new files inside the directory.</p><br/><br/><p>A little guide that shall explain to you how permissions work in linux: <a href="http://www.linuxquestions.org/linux/answers/Security/Quick_and_Dirty_Guide_to_Linux_File_Permissions" rel="nofollow">http://www.linuxquestions.org/linux/answers/Security/Quick_and_Dirty_Guide_to_Linux_File_Permissions</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SRF ERROR WHEN GO FROM PERL TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>Are you passing the CSRF token back to django?</p><br/><br/><p>Check out the CSRF docs <br/><a href="http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#exceptions" rel="nofollow">http://docs.djangoproject.com/en/dev/ref/contrib/csrf/#exceptions</a><br><br/>There is lots of good info there.</p><br/><br/><p>For example, note about subdomains:</p><br/><br/><blockquote><br/>  <p>Subdomains<br/>  By default, CSRF cookies are specific to the subdomain they are set<br/>  for. This means that a form served<br/>  from one subdomain (e.g.<br/>  server1.example.com) will not be able<br/>  to have a target on another subdomain<br/>  (e.g. server2.example.com). This<br/>  restriction can be removed by setting<br/>  CSRF_COOKIE_DOMAIN to be something<br/>  like ".example.com".</p><br/></blockquote><br/><br/><p>You could also disable CSRF protection for whatever view is throwing that error (in link above) via the <code>@csrf_exempt</code> decorator.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + JQUERI .POST + DJANGO PARSERERROR SYNTAXERROR INVALID LABEL
    </pattern>
    <template>
<![CDATA[<p>you need to add "json" after the callback to let jquery know that the return data should be json. jQuery will then automatically parse your json string into a JavaScript object.</p><br/><br/><pre><code>$(".edit_rec").click(function () {<br/>    var rec_id = $(this).attr('name');<br/>    $.post("/edit/", {<br/>        editid: rec_id<br/>    }, function (content) {<br/>        var to = new String(content.to_date);<br/>        var from = new String(content.from_date);<br/>    },"json");<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HAVE A WORK DJANGO AJAX FORM EXAMPL
    </pattern>
    <template>
<![CDATA[<p>I wrote a couple of form classes, one for regular forms, one for model forms, that return any errors as json. I have a working example of how to use the form, and also how to process the json response back to your page using jQuery. The code is available at: <a href="http://djangosnippets.org/snippets/2393/" rel="nofollow">http://djangosnippets.org/snippets/2393/</a></p><br/><br/><p>Hope that helps you out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RENDER TO STR NOT WORK
    </pattern>
    <template>
<![CDATA[<p>Model method 'save' doesn't return an object. So you 'objs' variable is empty. You should write</p><br/><br/><pre><code>html = render_to_string('includes/tr_inc.html',{"r":obj, "topic":topic})<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO QUERYSET WITH JQUERI USE AJAX
    </pattern>
    <template>
<![CDATA[<p>Based on your edits:</p><br/><br/><pre><code>$.each(data, function(key, value){<br/>        alert( key + ': ' + value.fields.name );<br/>    });<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      1.3 REQUESTCONTEXT NOT RENDER TO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You need to add the <a href="https://docs.djangoproject.com/en/1.3/ref/templates/api/#django-core-context-processors-request" rel="nofollow"><code>django.core.context_processors.request</code></a> context processor.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      YSTACK SOLR SEARCH ALL FIELD
    </pattern>
    <template>
<![CDATA[<p>@neolaser: I think what you want can be achieved by using DisMax search. It allows searching through multiple fields and specify the boost value for each of them. For more details:</p><br/><br/><p><a href="http://wiki.apache.org/solr/SolrRelevancyFAQ" rel="nofollow">http://wiki.apache.org/solr/SolrRelevancyFAQ</a></p><br/><br/><p><a href="http://wiki.apache.org/solr/DisMaxQParserPlugin" rel="nofollow">http://wiki.apache.org/solr/DisMaxQParserPlugin</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON LIST INTO A JAVASCRIPT ARRAY
    </pattern>
    <template>
<![CDATA[<p>This portion of code is wrong:</p><br/><br/><pre><code>var preselect = function () {<br/>    var results = $.ajax({<br/>        url: "/autofill_featured",<br/>        dataType: "json",<br/>        data: {show_id: $("#id_show_id").val()}<br/>    });<br/>    return results;<br/>};<br/></code></pre><br/><br/><p><code>$.ajax</code> function does return <code>jqXHR</code> object, not ajax call result. What You need is to add success callback (Browser JS is all about callbacks) to Your ajax call.</p><br/><br/><pre><code>$.ajax({<br/>    /* ... */<br/>    success: function (data) {<br/>        /* Set date pickers date <br/>           I am  not sure about multiDatePicker API */<br/>    }<br/>});<br/></code></pre><br/><br/><p>But I think it is wrong approach to make additional request just to prefill some date picker. Maybe, You can pass dates list when You are actually generating Your view with date picker?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SHOW HID THE CHANGE LIST FILTER IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>OK what I did was I added some javascript into the change_list.html like this:</p><br/><br/><pre><code>&lt;script type="text/javascript"&gt;<br/>(function($) {<br/>    $(document).ready(function($) {<br/>        $("tr input.action-select").actions();<br/>        $('&lt;div id="show-filters" style="float: right;"&gt;&lt;a href="#"&gt;Show Filters&lt;/a&gt;&lt;/p&gt;').prependTo('div.actions');<br/>        $('#show-filters').hide();<br/>        $('#changelist-filter h2').html('&lt;a style="color: white;" id="hide-filters" href="#"&gt;Filter &amp;rarr;&lt;/a&gt;');<br/><br/>        $('#show-filters').click(function() {<br/>            $('#changelist-filter').show('fast');<br/>            $('#changelist').addClass('filtered');<br/>            $('#show-filters').hide();<br/>        });<br/><br/>        $('#hide-filters').click( function() {<br/>            $('#changelist-filter').hide('fast');<br/>            $('#show-filters').show();<br/>            $('#changelist').removeClass('filtered');<br/>        });<br/>    });<br/>})(django.jQuery);<br/>&lt;/script&gt;<br/></code></pre><br/><br/><p>Worked like a charm. I found the actual javascript <a href="https://gist.github.com/922207" rel="nofollow">here</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERYUI DIALOG BOX HOW CAN I INTEGR DJANGO WITH JQUERYUI DIALOG BOX
    </pattern>
    <template>
<![CDATA[<p>Say you have something like this in your template:</p><br/><br/><pre><code>&lt;div id="dialog" title="Confirm delete"&gt;Are you sure?&lt;/div&gt;<br/>{% for object in object_list %}<br/># display whatever you like here<br/>&lt;a id="{{ object.id }}" class="delete" href="#"&gt;Delete&lt;/a&gt;<br/>{% endfor %}<br/></code></pre><br/><br/><p>Then something like this (in your <code>$(document).ready</code>) would work  -- notice how we set the callback function that the dialog calls when the delete button is pressed (using the dialog's <a href="http://jqueryui.com/demos/dialog/#method-option" rel="nofollow">option method</a>) in the <code>click</code> handler:</p><br/><br/><pre><code>$("#dialog").dialog({<br/>    modal: true,<br/>    autoOpen: false<br/>});<br/>$("a.delete").click(function(e) {<br/>    e.preventDefault();<br/>    var id = $(this).attr('id');<br/>    $("#dialog").dialog('option', 'buttons', {<br/>        "Delete": function() {<br/>            $.post({<br/>                url: {% url myapp.views.delete %},<br/>                data: {'id': id},<br/>                success: function() {<br/>                   # whatever you like, some fancy effect that removes the object<br/>                }<br/>            });<br/>            $(this).dialog("close");<br/>        },<br/>        "Cancel": function() {<br/>            $(this).dialog("close");<br/>        }<br/>    });<br/>    $("#dialog").dialog("open");<br/>    return false;<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON NOT INSTAL WITH BITNAMI DJANGO STACK ERROR LOAD MYSQLDB MODUL NO MODUL NAME MYSQLDB
    </pattern>
    <template>
<![CDATA[<p>You'll need to install MySQL for python as Django needs this to do the connecting, once you have the package installed you shouldn't need to configure it though as Django just needs to import from it. </p><br/><br/><p>Edit: from your comments there is a setuptools bundled but it has been replaced by the package distribute, install this python package and you should have access to easy_install which makes it really easy to get new packages. Assuming you've added PYTHONPATH/scripts to your environment variables, you can call easy_install mysql_python</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISPLAY AN IMAG
    </pattern>
    <template>
<![CDATA[<pre><code>{% if comment.photo %} &lt;img src="{{ comment.photo.url }}" alt="Photo" /&gt; {% endif %}<br/></code></pre><br/><br/><p>See Geoffrey's comment for how to upload the image correctly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PISTON DJANGO HOW MANI METHOD SHOULD A SINGL HANDLER CONTAIN
    </pattern>
    <template>
<![CDATA[<p>The documentations seems very clear <a href="https://bitbucket.org/jespern/django-piston/wiki/Documentation#!resources" rel="nofollow">https://bitbucket.org/jespern/django-piston/wiki/Documentation#!resources</a></p><br/><br/><pre><code>from piston.handler import BaseHandler<br/>from myapp.models import Blogpost<br/><br/>class BlogpostHandler(BaseHandler):<br/>   allowed_methods = ('GET',)<br/>   model = Blogpost   <br/><br/>   def read(self, request, post_slug):<br/>      ...<br/></code></pre><br/><br/><blockquote><br/>  <p>Piston lets you map resource to<br/>  models, and by doing so, it will do a<br/>  lot of the heavy lifting for you.</p><br/>  <br/>  <p>A resource can be just a class, but<br/>  usually you would want to define at<br/>  least 1 of 4 methods:</p><br/>  <br/>  <p><code>read</code> is called on GET requests, and<br/>  should never modify data (idempotent.)</p><br/>  <br/>  <p><code>create</code> is called on POST, and creates<br/>  new objects, and should return them<br/>  (or <code>rc.CREATED</code>.)</p><br/>  <br/>  <p><code>update</code> is called on PUT, and should<br/>  update an existing product and return<br/>  them (or <code>rc.ALL_OK</code>.)</p><br/>  <br/>  <p><code>delete</code> is called on DELETE, and should<br/>  delete an existing object. Should not<br/>  return anything, just <code>rc.DELETED</code>.</p><br/></blockquote><br/><br/><p>Also <a href="https://bitbucket.org/jespern/django-piston/wiki/Documentation#!mapping-urls" rel="nofollow">https://bitbucket.org/jespern/django-piston/wiki/Documentation#!mapping-urls</a></p><br/><br/><p>In urls.py:</p><br/><br/><pre><code>from django.conf.urls.defaults import *<br/>from piston.resource import Resource<br/>from mysite.myapp.api.handlers import BlogpostHandler<br/><br/>blogpost_handler = Resource(BlogpostHandler)<br/><br/>urlpatterns = patterns('',<br/>   url(r'^blogpost/(?P&lt;post_slug&gt;[^/]+)/', blogpost_handler),<br/>   url(r'^blogposts/', blogpost_handler),<br/>)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JQUERI HOW DO YOU MINGL JQUERI TEMPLAT TAG WITH DJANGO TEMPLAT TAG WITHOUT CONFLICT
    </pattern>
    <template>
<![CDATA[<p>The built-in solutions in django that can help with this somewhat are</p><br/><br/><p>The <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#templatetag" rel="nofollow">templatetag</a> tag with:</p><br/><br/><pre><code>{% templatetag openvariable %}<br/>{% templatetag closevariable %}<br/></code></pre><br/><br/><p>Whenever you need to use {{ or }} in your javascript which unfortunately will severely impact the readability of your code.</p><br/><br/><p>Alternatively if your javascript is static, then putting it in a separate file and including it with <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#ssi" rel="nofollow">{% ssi %}</a> without parsing it as a template would prevent conflicts.</p><br/><br/><p>There's no really clean way to escape template tags in django templates that I know of.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REVERS RELAT WITH SELECT REL
    </pattern>
    <template>
<![CDATA[<p>See docs on <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#prefetch-related">prefetch_related</a>. It's dev only at the moment, but will hit with Django 1.4. If you can wait or you can run on trunk. You'll be able to use that.</p><br/><br/><p>In the meantime, you can try <a href="https://github.com/lilspikey/django-batch-select">django-batch-select</a>. It essentially serves the same purpose.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN SINGL OBJECT FROM DJANGO VIEW TO JQUERI
    </pattern>
    <template>
<![CDATA[<p>Read the docs on <a href="https://docs.djangoproject.com/en/dev/topics/serialization/#serializing-data" rel="nofollow">serialization</a></p><br/><br/><blockquote><br/>  <p>The arguments to the serialize<br/>  function are the format to serialize<br/>  the data to (see Serialization<br/>  formats) and a QuerySet to serialize.<br/>  (Actually, the second argument can be<br/>  any iterator that yields Django<br/>  objects, but it'll almost always be a<br/>  QuerySet).</p><br/></blockquote><br/><br/><p>And then try like this:</p><br/><br/><pre><code>data = serializers.serialize('json', [singleObject])<br/></code></pre><br/><br/><p>Also, <a href="http://stackoverflow.com/questions/757022/how-do-you-serialize-a-model-instance-in-django">this thread answers</a> your question.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UP VALU IN DJANGO JSON OBJECT
    </pattern>
    <template>
<![CDATA[<p>Python dictionaries can be accessed in the same way as lists. Here is an example.</p><br/><br/><pre><code>state_lookup = {"Alabama":"AL", "Alaska":"AK", ... "Wyoming":"WY"}<br/>state = 'Alabama'<br/>abbrev = state_lookup[state] # abbrev should be 'AL' now<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VERI VERI BASIC JAVASCRIPT BUTTON IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>This isn't really "very, very basic".</p><br/><br/><p>For a start, it's Ajax, rather than simple Javascript. Javascript on its own can alter anything on the page, but you want to send something to the server and get a response, which is more complicated - not massively, but enough.</p><br/><br/><p>Note that you really need something in your markup to identify the post being liked:</p><br/><br/><pre><code>&lt;a class="favorite" id="{{ post.id }}" title="Like this post"&gt;Like?&lt;/a&gt;<br/><br/>$.ready(function() {<br/>    $('.favorite').click(function() {<br/>        var $this = $(this);<br/>        var post_id = this.id;<br/>        $.post('/like/' + id + '/', function() {<br/>            $this.replaceWith("&lt;span class='liked'&gt;Liked&lt;/span&gt;");<br/>        });<br/>    });<br/>});<br/></code></pre><br/><br/><p>...</p><br/><br/><pre><code>if request.is_ajax():<br/>    post.likes.add(request.user)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      NO MODUL NAME PIL
    </pattern>
    <template>
<![CDATA[<p><a href="http://stackoverflow.com/users/754484/samuele-mattiuzzo">Samuele Mattiuzzo</a> gave me the answer:</p><br/><br/><blockquote><br/>  <p>have you tried with import Image instead of from PIL import Image? sometimes this solves the issue</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS JSON RESPONS FROM VIEW
    </pattern>
    <template>
<![CDATA[<p>been there. I wrote the solution my own (since it's simple. I dont know if theres a module out there for this). This is just a json response wrapper</p><br/><br/><pre><code>from django.utils import simplejson<br/>from django.http import HttpResponse<br/><br/>class JsonResponse(HttpResponse):<br/>    def __init__(self, data):<br/>        content = simplejson.dumps(data)<br/>        super(JsonResponse, self).__init__(content=content,<br/>                                           mimetype='application/json')<br/><br/>class Success(JsonResponse):<br/>    def __init__(self, something):<br/>        x = something # set your data here<br/>        content = {'success': {'data': x}}<br/>        super(Success, self).__init__(content)<br/><br/><br/>class Failure(JsonResponse):<br/>    def __init__(self, something):<br/>        x = something # set your data<br/>        content = {'failures': {'errors': x}}<br/>        super(Failure, self).__init__(content)<br/></code></pre><br/><br/><p>something like that. In my case, I make <code>Success</code> and <code>Failure</code> accept a string and a dictionary for arguments (like <code>Success(data)</code>) to make it even easier</p><br/><br/><p>If your structure is quite complex (or youre too lazy too write them manually), write your own wrapper for that complicated structure (so you can create the response with even less typing), and make the Success/Failure accepts that as argument.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BROWSER BACK BUTTON AFTER LOGOUT
    </pattern>
    <template>
<![CDATA[<p>Finally found the solution:</p><br/><br/><pre><code>from django.views.decorators.cache import cache_control<br/><br/>@cache_control(no_cache=True, must_revalidate=True)<br/>def func()<br/>  #some code<br/>  return<br/></code></pre><br/><br/><p>This will force the browser to make request to server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      .PARS GIVE UNCAUGHT SYNTAXERROR UNEXPECT TOKEN ( DJANGO JSON SERIAL QUERYSET )
    </pattern>
    <template>
<![CDATA[<p>When you set <code>dataType</code> to <code>json</code>, jQuery parses the data for you. So you don't need to put it through <code>JSON.parse</code>, you can just refer to <code>data</code> as a normal Javascript object.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASS EXCEPT TO DEBUGG
    </pattern>
    <template>
<![CDATA[<p>See "Notes on Debugger Configuration" in the following:  <a href="http://wingware.com/doc/howtos/django" rel="nofollow">http://wingware.com/doc/howtos/django</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISPLAY ONE RADIO BUTTON WIDGET FROM A DJANGO RADIOSELECT
    </pattern>
    <template>
<![CDATA[<p>This page has information on how to iterate over each radio button:<br/><a href="https://docs.djangoproject.com/en/dev/ref/forms/widgets/" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/forms/widgets/</a></p><br/><br/><p>See "class RadioSelect".</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WARN MODUL MYSQL WA ALREADI IMPORT FROM USR LIB PYMODULES PYTHON2.6 MYSQL.SO
    </pattern>
    <template>
<![CDATA[<p>I have simply removed django_pytest from INSTALLED_APPS. The problem is now gone. Not nice but it works (tm).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAJAX POW LOAD ANOTH PAGE
    </pattern>
    <template>
<![CDATA[<p>You need a <code>return false;</code> in your <code>onClick</code> handler after the call to Dajax.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DUMP JSON DATA
    </pattern>
    <template>
<![CDATA[<p>Without seeing the traceback, my guess is that what's failing is [one of]:</p><br/><br/><pre><code># A) This path is not resolving correctly (see named-URLs in Django's docs)<br/>reverse('post.views.lecture_display', args=(l.id,))<br/><br/># B) This word has unicode data, which can't simply be passed to ''str''<br/>str(oldWord.word)<br/></code></pre><br/><br/><p>Open the URL directly in your browser, and you'll get the default Django traceback, 500 view.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WHEN PARAMET IS NONE DJANGO
    </pattern>
    <template>
<![CDATA[<p>I do not know, if I get your question, but</p><br/><br/><pre><code>Model.objects.filter(x=x, y__isnull = False, z=z)<br/></code></pre><br/><br/><p>gives you the queryset, where the <code>y</code>column is non-null (<code>IS NOT NULL</code>).</p><br/><br/><p><a href="https://docs.djangoproject.com/en/1.3/ref/models/querysets/#isnull" rel="nofollow">Here's</a> the relevant documentation.</p><br/><br/><p>EDIT: Check if y is None and build your queryset dynamically:</p><br/><br/><pre><code>if y is None:<br/>    qs = Model.objects.filter(x=x).filter(z=z)<br/>elif z is None:<br/>    qs = Model.objects.filter(x=x).filter(y=y)<br/>...<br/></code></pre><br/><br/><p>If there are too many arguments to deal with, you could use something like this; assuming that <code>x</code>, <code>y</code>, <code>z</code> are stored in a dictionary <code>your values</code>: </p><br/><br/><pre><code>your_values = { 'x' : 'x value', 'y' : 'y value', 'z' : 'value'}<br/>arguments = {}<br/>for k, v in your_values.items():<br/>    if v:<br/>        arguments[k] = v<br/><br/>Model.objects.filter(**arguments)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FASTEST WAY TO COPI DATA FROM ONE TABL TO ANOTH IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>My opinion is that today they are <strong>not reason to <a href="http://en.wikipedia.org/wiki/Denormalization" rel="nofollow">denormalize database</a></strong> in this way to improve performance. Indexes or <strong>partitioning + indexes should be enought</strong>.</p><br/><br/><p>Also, in case that, for semantic reasons, you prefer have <strong>two tables (models)</strong> like: Chat and ChatHistory (or ChatCurrent and ChatActive) as you say and manage it with django, I thing that the right way to keep consistence is to <strong>create ToArchive() method in ChatCurrent</strong>. This method will move chat entries to historical chat model. You can perform this operation in <strong>background mode</strong>, then you can thread the swap in a <a href="http://celeryproject.org/" rel="nofollow">celery</a> process, in this way online users avoid wait for request. Into celery process the fastest method to copy data is a <strong><a href="https://docs.djangoproject.com/en/dev/topics/db/sql/#executing-custom-sql-directly" rel="nofollow">raw sql</a></strong>. Remember that you can encapsulate sql into a <strong>stored procedure</strong>.</p><br/><br/><p><strong>Edited to include reply to your comment</strong></p><br/><br/><p>You can perform ChatCurrent.ToArchive() in ChatCurrent.save() method:</p><br/><br/><pre><code>class ChatCurrent(model.Model):<br/>    closed=models.BooleanField()<br/><br/>    def save(self, *args, **kwargs):<br/>        super(Model, self).save(*args, **kwargs)<br/>        if self.closed:<br/>            self.ToArchive()<br/><br/>    def ToArchive(self):<br/>        from django.db import connection, transaction<br/>        cursor = connection.cursor()            <br/>        cursor.execute("insert into blah blah")<br/>        transaction.commit_unless_managed()<br/>        #self.delete()  #if needed (perhaps deleted on raw sql)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO MODEL METHOD IN JSON
    </pattern>
    <template>
<![CDATA[<p>The short answer is no, the long answer, is you could serialize your <code>MyModel</code> instance yourself:</p><br/><br/><pre><code>simplejson.dumps([{'pk': m.pk, 'name': m.name} for m in MyModel.objects.filter(...)])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      E.PI RUNSERV ERROR ERRNO 10013
    </pattern>
    <template>
<![CDATA[<p>If you don't have permission to bind to a socket, you can try <code>sudo manage.py runserver</code> to do it with root privileges. </p><br/><br/><p>With Windows Vista / 7 you need to run the shell with administrator privileges. You can right click on the icon and select "Run as administrator" or go to <code>c:\windows\system32\</code> and right click on <code>cmd.exe</code> and select "Run as administrator".</p><br/><br/><p>Edit: OK, this error occurs when another process is already using the same port. To change the port, do <code>manage.py runserver 8080</code> where the number at the end is the port you want.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARS JSON DATA STRUCTUR IN JAVASCRIPT
    </pattern>
    <template>
<![CDATA[<p>Because <code>data</code> is a string (of json) - note the output of your first alert().</p><br/><br/><p>try something like:</p><br/><br/><pre><code>$('#updateform').wl_Form({ <br/>    onSuccess: function(response, status){<br/>        var data = $.parseJSON(response); <br/>        alert(data);<br/>        alert(data.page);<br/>        //...<br/>    }<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISQU GARGOYL FOR WHOLE APP
    </pattern>
    <template>
<![CDATA[<p>That doesn't seem to be how Gargoyle works. In the simplest sense, Gargoyle is just a set of conditions you add. You use decorators and such to test if a view or a piece of code is allowed to run based on whether it meets the specified conditions.</p><br/><br/><p>I'm sure you understand that, but it fundamentally colors your question. Gargoyle does nothing until you evoke it by checking a condition's status. It's not actively running in the background doing it's own checking, so you can't tell it turn off an entire app on it's own.</p><br/><br/><p>The only way I could see it working the way you want is to use <code>gargoyle.is_active</code> directly in your settings.py file:</p><br/><br/><pre><code>INSTALLED_APPS = [<br/>  # always on apps<br/>]<br/><br/>from gargoyle import gargoyle<br/>if gargoyle.is_active('my_switch'):<br/>    INSTALLED_APPS.append('my_conditional_app')<br/></code></pre><br/><br/><p>However, I have no idea whether that would actually work in practice, and even if it does, whether or not it might wreck havoc in some other way.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR WHEN USE SOUTH MIGRAT UNKNOWN COLUMN IN FIELD LIST
    </pattern>
    <template>
<![CDATA[<p>The problem is not that you have a <code>ForeignKey</code> pointed to the model you are migrating. That is a very common situation, and <code>South</code> definitely deals fine with that.<br/>The real problem is that you are doing something <strong>very very bad</strong> in that FK declaration.</p><br/><br/><pre><code>video = models.ForeignKey(Video, default=Video.objects.all()[0])<br/></code></pre><br/><br/><p>This default declaration is going to execute the query at import time and take it's first value. Things that execute at import time are a big no-no (especially a query).<br/>So what happens is, when <code>South</code> imports the models so that it can introspect them and generate the schemamigration, <code>Video.objects.all()</code> is executed. But because <code>Video</code> model was changed (you've just added a new field), which doesn't exist yet in DB, Django's ORM raises an error.</p><br/><br/><p>If you really want to set that as your default value, then use a callable instead</p><br/><br/><pre><code>def get_default_video():<br/>     return Video.objects.all()[0]<br/><br/>...<br/>video = models.ForeignKey(Video, default=get_default_video)<br/></code></pre><br/><br/><p><strong>Note</strong>: Although I cannot think of a good reason in the first place, for setting the first <code>Video</code> record as default value for the video FK. What are you trying to do?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WITH APP ENGIN AND ECLIPS
    </pattern>
    <template>
<![CDATA[<p>The AppEngine documentation has a section about <a href="https://code.google.com/appengine/articles/django.html" rel="nofollow">django integration</a>, it could be useful as a start point. There are also several other articles around the web about this topic, just google <code>django appengine</code>.</p><br/><br/><p>Regarding the IDE, i'd suggest using <a href="http://www.jetbrains.com/pycharm/" rel="nofollow">PyCharm</a>, it's not free, but it has great integration for <code>appengine</code> and <code>Django</code> (even both together), and is a great IDE.</p><br/><br/><p><strong>EDIT:</strong></p><br/><br/><p>Here is a <a href="http://www.franciscosouza.com/2010/08/flying-with-django-on-google-app-engine/" rel="nofollow">tutorial</a> that looks nice, i used another tutorial from this guy to create an <code>appengine</code> project using the <code>Flask</code> framework, and it was really useful.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SIMPL DJANGO IF STATEMENT WORK
    </pattern>
    <template>
<![CDATA[<p><code>is_open</code> is probably a <code>BooleanField</code>, so its python value is a boolean, not a string. Use <code>{% if latest_session.chat_room.is_open %}</code> to check for it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAJAXIC CALLBACK
    </pattern>
    <template>
<![CDATA[<p>your code seems to be ok... anyway you can also create the "colores" function directly before the ready() function. What error you have in the browser?</p><br/><br/><pre><code>&lt;script&gt;<br/>    function colores (data){<br/>        ....<br/>        Magic!<br/>        ....<br/>    }<br/>    jQuery.noConflict();<br/>    jQuery(document).ready(function($){<br/>         ....<br/>         ....<br/>         Dajaxice.ajax.colors(colores);<br/>         ....<br/>         ....<br/>    });<br/>&lt;/script&gt;<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARRAY OF INTEG TO DJANGO
    </pattern>
    <template>
<![CDATA[<p>You'd need to use <code>simplejson.loads</code>, for example if you'd pass the anSelected array as <code>arr</code> you'd use something like this </p><br/><br/><pre><code>from django.utils import simplejson<br/><br/>array = simplejson.loads(request.POST['arr'])<br/>try:<br/>    ModelName.objects.filter(pk__in=array).delete()<br/>except:<br/>    return HttpResponse(simplejson.dumps({'ok': False}))<br/>return HttpResponse(simplejson.dumps({'ok': True}))<br/></code></pre><br/><br/><p>and in your javascript this something along these lines:</p><br/><br/><pre><code>$.post(<br/>    '/delete/',<br/>    {arr: anSelected},<br/>    function(data){<br/>        if(data.ok){<br/>            //Everything went smoothly<br/>        }else{<br/>            //Something failed, you can send extra info from django like the name of the exception thrown if you'd want and display it<br/>        }<br/>    }<br/>);<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A FORM WITHOUT REFRESHING REDIRECT OF THE CURRENT PAGE ( PYTHON ( DJANGO ) + JQUERI + AJAX )
    </pattern>
    <template>
<![CDATA[<p>You could handle this by instead of using jquery's form, use jquery's ajaxPost. This will allow you to <code>.serialize()</code> the form (to get the parameters) and be able to return to a JS function to do what you want after the 'form is submitted'. Check out <a href="http://api.jquery.com/jQuery.post/" rel="nofollow"><code>jQuery.post()</code></a></p><br/><br/><p><a href="http://jsfiddle.net/4xDFK/4/" rel="nofollow">jsFiddle</a></p><br/><br/><p>This will not refresh the page as the post happens through an AJAX call. It allows you to run a function after the post goes through and do w/e you want (if the post returns data, it will be available here... if you want to do another GET or POST after this one was a success, it can be done here... so on and so forth)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + JQUERI AJAX POST
    </pattern>
    <template>
<![CDATA[<p>Please add in your urls.py an url like </p><br/><br/><pre><code>(r'^ajaxrequest$', 'app.views.iEventAjax')<br/></code></pre><br/><br/><p>and then change</p><br/><br/><pre><code>$(document).ready(function() {<br/>    $.post("/ajaxrequest", {<br/>        lat : searchResult._point.__lat,<br/>        lng : searchResult._point.__lng,<br/>        text : searchResult.text<br/>    },  function(data) {<br/>           alert(data);<br/>        });<br/>    });<br/></code></pre><br/><br/><p>in your views.py of your app</p><br/><br/><pre><code>def iEventAjax(request):<br/>    return HttpResponse("ok")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST IN DJANGO WITHOUT FORM ELEMENT
    </pattern>
    <template>
<![CDATA[<p><code>ensure_csrf_cookie</code> may only be a 1.4 alpha feature if you're having trouble importing it -- I can import it just fine with the same statement on trunk.</p><br/><br/><p>The simplest solution here is to pass the csrf_token VALUE in the ajax call itself.</p><br/><br/><p>You said you were using jQuery.</p><br/><br/><pre><code>    $.ajax({<br/>        url: "",<br/>        type: 'POST',<br/>        data: {<br/>             csrfmiddlewaretoken: '{{ csrf_token }}' // just the token value<br/>        },<br/>        success: function(response) {<br/>        }<br/>    })<br/></code></pre><br/><br/><p>It appears this <code>ensure_csrf_cookie</code> forces the view to set the csrf cookie that would be required for use in the automatic cookie based csrf protection mechanism for jquery ajax calls described here: <a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAX ON DROPDOWN BUTTON
    </pattern>
    <template>
<![CDATA[<p>If you want to just add <code>onchange</code> attr, then:</p><br/><br/><pre><code>class Language(forms.Form):<br/>    language = forms.ModelChoiceField(queryset=Category.objects.all(), widget=forms.Select(attrs={'onchange':'ajaxfunction()'}))<br/></code></pre><br/><br/><p>Or you can render form manually.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DOWNLOAD PAGE THING THAT NEED TO BE CONSID
    </pattern>
    <template>
<![CDATA[<p>It depends on how many users controls do you want to add...</p><br/><br/><p>1) You can add a captcha control for every download attempt</p><br/><br/><p>2) You can "show" it only when some user (identified by IP) download N files, simply get the IP and add into a database (for history pourpose) with date time, if a user try to download another (or the same) file in less than X time you can show a captcha or block the download.</p><br/><br/><p>3) considering what you wrote in the answer I suppose that you know how to create a downloader.php that send the file itself and not the direct link to the file.</p><br/><br/><p>Best way I know to protect a file from unauthorized access/download is to put it into a folder not reachable from web, using php to load it and let the user download, or copy it to a temporary directory accessible from web and give the user the tmp link (created dinamically).</p><br/><br/><p>In the second case you need to clean the tmp directory once in a while </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DAJAX PROCESS NOT BE PROCESS
    </pattern>
    <template>
<![CDATA[<p>I had the same problem, then ran across this function on this site: <a href="http://stackoverflow.com/questions/1184624/serialize-form-to-json-with-jquery">Serialize form to JSON with jQuery</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AND PYTHON DJANGO CA N T GET AROUND SAME ORIGIN ISSUE CALLBACK FUNCTION IS N T CALL
    </pattern>
    <template>
<![CDATA[<p>You are returning JSON (with a plain text content-type), not JSON-P.</p><br/><br/><p>You need to look at the value of <code>callback</code> in the query string and wrap the JSON in that function call.</p><br/><br/><p>e.g. for <code>?callback=foo</code>:</p><br/><br/><pre><code>foo(/* Your JSON here */);<br/></code></pre><br/><br/><p>You should also use the correct content type (<code>application/javascript</code>).</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ARE THERE ANI TOOLS TRICK TO USE ON DEBUG AJAX RESPONS
    </pattern>
    <template>
<![CDATA[<ol><br/><li>Turn on debug mode</li><br/><li>Fire up chrome</li><br/><li>Push cmd+option+j (open dev tools)</li><br/><li>Go to the network tab</li><br/><li>Click on the ajax request</li><br/><li>Click on the preview or response tab</li><br/></ol><br/><br/><p>Awesome! I just realized Chrome implemented <em>rendering</em> of the response as well.</p><br/><br/><p><img src="http://i.stack.imgur.com/CVMho.png" alt="enter image description here"></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HALF PART OF FORLOOP IN DJANGO TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You could make two context variables in your view:</p><br/><br/><pre><code>offset = len(lines) / 2<br/><br/>if offset % 2 != 0:<br/>    # ensure that the second col does not contain more than the first one<br/>    offset += 1<br/><br/>lines_col0 = lines[:offset]<br/>lines_col1 = lines[offset:]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WEBSIT LOAD FASTER
    </pattern>
    <template>
<![CDATA[<p>Couple of points need to be considered for better page loads<br><br/>1) Put all javascripts externally, and always load scripts at the end of the page (in footer).<br><br/>2) Always minify javscripts and css.<br><br/>3) Merge all CSS and javascript into one file during load.<br><br/>4) Make use of browser caching (for css, javascript and images).<br><br/>5) Host static files like css, javascript and images over different domain.  (Ex : static. shopperspoll.com )<br><br/>6) Use tools likes firebug &amp; yslow to check the load time.<br><br/>7) use cdn. </p><br/><br/><p>Also refer this URL (better web performance from yahoo) :  <a href="http://developer.yahoo.com/performance/rules.html" rel="nofollow">http://developer.yahoo.com/performance/rules.html</a></p><br/><br/><p>i hope this helps.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO TEMPLAT WITH A JSON OBJECT
    </pattern>
    <template>
<![CDATA[<p>The issue (as pointed out by Tomasz Zielinski in a comment)  that django supports dictionary objects directly - not json.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SETTINGS MODUL NOT IMPORT MY MODEL CLASS
    </pattern>
    <template>
<![CDATA[<p><code>DJANGO_SETTINGS_MODULE = APPNAME.settings</code> should be <code>PROJECT.settings</code>. I usually avoid that approach, and prefer using <code>setup_environ</code> at the top of my standalone script.</p><br/><br/><pre><code>from django.core.management import setup_environ<br/>from yourproject import settings<br/><br/>setup_environ(settings)<br/><br/>from yourproject.app.models import YourModel<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ALTERN TO DJANGO SENTRI FOR LOG
    </pattern>
    <template>
<![CDATA[<p>Sentry being overkill and Djangodblog being deprecated, I rolled my own, cannibalising the necessary parts from both. </p><br/><br/><p>How it works is by catching the error signal. Then it uses Django's inbuilt exception reporter to generate the fancy 500 error page that Django displays when debugging is enabled. We store this in the DB and render it in the admin console.</p><br/><br/><p>Here's my implementation:</p><br/><br/><p>Model:</p><br/><br/><pre><code>class Error(Model):<br/>    """<br/>    Model for storing the individual errors.<br/>    """<br/>    kind = CharField( _('type'),<br/>        null=True, blank=True, max_length=128, db_index=True<br/>    )<br/>    info = TextField(<br/>        null=False,<br/>    )<br/>    data = TextField(<br/>        blank=True, null=True<br/>    )<br/>    path = URLField(<br/>        null=True, blank=True, verify_exists=False,<br/>    )<br/>    when = DateTimeField(<br/>        null=False, auto_now_add=True, db_index=True,<br/>    )<br/>    html = TextField(<br/>        null=True, blank=True,<br/>    )<br/><br/>    class Meta:<br/>        """<br/>        Meta information for the model.<br/>        """<br/>        verbose_name = _('Error')<br/>        verbose_name_plural = _('Errors')<br/><br/>    def __unicode__(self):<br/>        """<br/>        String representation of the object.<br/>        """<br/>        return "%s: %s" % (self.kind, self.info)<br/></code></pre><br/><br/><p>Admin:</p><br/><br/><pre><code>class ErrorAdmin(admin.ModelAdmin):<br/>    list_display    = ('path', 'kind', 'info', 'when')<br/>    list_display_links = ('path',)<br/>    ordering        = ('-id',)<br/>    search_fields   = ('path', 'kind', 'info', 'data')<br/>    readonly_fields = ('path', 'kind', 'info', 'data', 'when', 'html',)<br/>    fieldsets       = (<br/>        (None, {<br/>            'fields': ('kind', 'data', 'info')<br/>        }),<br/>    )<br/><br/>    def has_delete_permission(self, request, obj=None):<br/>        """<br/>        Disabling the delete permissions<br/>        """<br/>        return False<br/><br/>    def has_add_permission(self, request):<br/>        """<br/>        Disabling the create permissions<br/>        """<br/>        return False<br/><br/>    def change_view(self, request, object_id, extra_context={}):<br/>        """<br/>        The detail view of the error record.<br/>        """<br/>        obj = self.get_object(request, unquote(object_id))<br/><br/>        extra_context.update({<br/>            'instance': obj,<br/>            'error_body': mark_safe(obj.html),<br/>        })<br/><br/>        return super(ErrorAdmin, self).change_view(request, object_id, extra_context)<br/><br/>admin.site.register(Error, ErrorAdmin)<br/></code></pre><br/><br/><p>Helper:</p><br/><br/><pre><code>class LoggingExceptionHandler(object):<br/>    """<br/>    The logging exception handler<br/>    """<br/>    @staticmethod<br/>    def create_from_exception(sender, request=None, *args, **kwargs):<br/>        """<br/>        Handles the exception upon receiving the signal.<br/>        """<br/>        kind, info, data = sys.exc_info()<br/><br/>        if not issubclass(kind, Http404):<br/><br/>            error = Error.objects.create(<br/>                kind = kind.__name__,<br/>                html = ExceptionReporter(request, kind, info, data).get_traceback_html(),<br/>                path = request.build_absolute_uri(),<br/>                info = info,<br/>                data = '\n'.join(traceback.format_exception(kind, info, data)),<br/>            )<br/>            error.save()<br/></code></pre><br/><br/><p>Init:</p><br/><br/><pre><code>from django.core.signals import got_request_exception<br/><br/>from modules.error.signals import LoggingExceptionHandler<br/><br/>got_request_exception.connect(LoggingExceptionHandler.create_from_exception)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL REMOT WHAT TO DO WITH IGNORED PRIV FILE
    </pattern>
    <template>
<![CDATA[<p>For starters, storing your config in files is the wrong way to go about this, so don't do it.</p><br/><br/><p>From the <a href="http://www.12factor.net/config" rel="nofollow">12factor app</a>:</p><br/><br/><blockquote><br/>  <p>An app's config is everything that is likely to vary between deploys<br/>  (staging, production, developer environments, etc). This includes:</p><br/>  <br/>  <ul><br/>  <li>Resource handles to the database, Memcached, and other backing<br/>  services </li><br/>  <li>Credentials to external services such as Amazon S3 or Twitter</li><br/>  <li>Per-deploy values such as the canonical hostname for the deploy </li><br/>  </ul><br/>  <br/>  <p>Apps<br/>  sometimes store config as constants in the code. This is a violation<br/>  of twelve-factor, which requires strict separation of config from<br/>  code. Config varies substantially across deploys, code does not.</p><br/>  <br/>  <p>A litmus test for whether an app has all config correctly factored out<br/>  of the code is whether the codebase could be made open source at any<br/>  moment, without compromising any credentials.</p><br/>  <br/>  <p>Note that this definition of "config" does not include internal<br/>  application config, such as config/routes.rb in Rails, or how code<br/>  modules are connected in Spring. This type of config does not vary<br/>  between deploys, and so is best done in the code.</p><br/>  <br/>  <p>Another approach to config is the use of config files which are not<br/>  checked into revision control, such as config/database.yml in Rails.<br/>  This is a huge improvement over using constants which are checked into<br/>  the code repo, but still has weaknesses: it's easy to mistakenly check<br/>  in a config file to the repo; there is a tendency for config files to<br/>  be scattered about in different places and different formats, making<br/>  it hard to see and manage all the config in one place. Further, these<br/>  formats tend to be language- or framework-specific.</p><br/>  <br/>  <p>The twelve-factor app stores config in environment variables (often<br/>  shortened to env vars or env). Env vars are easy to change between<br/>  deploys without changing any code; unlike config files, there is<br/>  little chance of them being checked into the code repo accidentally;<br/>  and unlike custom config files, or other config mechanisms such as<br/>  Java System Properties, they are a language- and OS-agnostic standard.</p><br/>  <br/>  <p>Another aspect of config management is grouping. Sometimes apps batch<br/>  config into named groups (often called "environments") named after<br/>  specific deploys, such as the development, test, and production<br/>  environments in Rails. This method does not scale cleanly: as more<br/>  deploys of the app are created, new environment names are necessary,<br/>  such as staging or qa. As the project grows further, developers may<br/>  add their own special environments like joes-staging, resulting in a<br/>  combinatorial explosion of config which makes managing deploys of the<br/>  app very brittle.</p><br/>  <br/>  <p>In a twelve-factor app, env vars are granular controls, each fully<br/>  orthogonal to other env vars. They are never grouped together as<br/>  "environments," but instead are independently managed for each deploy.<br/>  This is a model that scales up smoothly as the app naturally expands<br/>  into more deploys over its lifetime.</p><br/></blockquote><br/><br/><p>For Python, your config can be found in <code>os.environ</code>.  For specific config, particularly the database you want to be using something like:</p><br/><br/><pre><code>import os<br/>import sys<br/>import urlparse<br/><br/># Register database schemes in URLs.<br/>urlparse.uses_netloc.append('postgres')<br/>urlparse.uses_netloc.append('mysql')<br/><br/>try:<br/><br/>    # Check to make sure DATABASES is set in settings.py file.<br/>    # If not default to {}<br/><br/>    if 'DATABASES' not in locals():<br/>        DATABASES = {}<br/><br/>    if 'DATABASE_URL' in os.environ:<br/>        url = urlparse.urlparse(os.environ['DATABASE_URL'])<br/><br/>        # Ensure default database exists.<br/>        DATABASES['default'] = DATABASES.get('default', {})<br/><br/>        # Update with environment configuration.<br/>        DATABASES['default'].update({<br/>            'NAME': url.path[1:],<br/>            'USER': url.username,<br/>            'PASSWORD': url.password,<br/>            'HOST': url.hostname,<br/>            'PORT': url.port,<br/>        })<br/>        if url.scheme == 'postgres':<br/>            DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql_psycopg2'<br/><br/>        if url.scheme == 'mysql':<br/>            DATABASES['default']['ENGINE'] = 'django.db.backends.mysql'<br/>except Exception:<br/>    print 'Unexpected error:', sys.exc_info()<br/></code></pre><br/><br/><p>For more info on config vars, see here: <a href="https://devcenter.heroku.com/articles/config-vars" rel="nofollow">https://devcenter.heroku.com/articles/config-vars</a></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNICOD
    </pattern>
    <template>
<![CDATA[<p>Must be caused by mixed tab/space indentation...</p><br/><br/><p>Your code pasted in the comment was messed up but I had a look at the HTML source code and found that the lines you typed in (around the <code>__unicode__</code> methods, specifically) were indented using mixed tabs/spaces. Maybe you're using an editor where you configured the "tab width" to be 4 so that the a tab indentation level looks the same as 4 spaces. However the python interpreter considers a tab equivalent as 8 spaces (two indent levels). So the lines you typed (or lines with tabs) are wrongly indented.</p><br/><br/><p>Here I mark all the tabs in your code with "<code>&lt;T&gt;</code>"</p><br/><br/><pre><code>from django.db import models<br/><br/>import datetime<br/><br/>class Poll(models.Model):<br/>    question = models.CharField(max_length=200)<br/>    pub_date = models.DateTimeField('date published')<br/>    def was_published_today(self):<br/>    &lt;T&gt; return self.pub_date.date() ==datetime.date.today()<br/>&lt;T&gt; def __unicode__(self):<br/>&lt;T&gt; &lt;T&gt; return self.question<br/><br/>class Choice(models.Model):<br/>    poll = models.ForeignKey(Poll)<br/>    choice = models.CharField(max_length=200)<br/>    votes = models.IntegerField()<br/>    def __unicode__(self):<br/>&lt;T&gt; &lt;T&gt; return self.choice<br/></code></pre><br/><br/><p>NEVER mix tabs and spaces, in any language. And in Python we always use 4 spaces to indent as recommended by <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP-8</a>.</p><br/><br/><p>Whatever editor you use, google for how to configure it to automatically expand tabs into 4 spaces.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARSERERROR ON SIMPL JSON RETURN FROM DJANGO
    </pattern>
    <template>
<![CDATA[<p>The JSON is not valid. You need quotation marks around the identifiers, so <code>"success"</code> instead of <code>success</code> and <code>"cause"</code> instead of <code>cause</code>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      AN IMAGEFIELD IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>I wrote an extension to the simplejson encoder. Instead to serializing the image to base643, it returns the path of the image. Here's a snippet:</p><br/><br/><pre><code>def encode_datetime(obj):<br/>    """<br/>    Extended encoder function that helps to serialize dates and images<br/>    """<br/>    if isinstance(obj, datetime.date):<br/>        try:<br/>            return obj.strftime('%Y-%m-%d')<br/>        except ValueError, e:<br/>            return ''<br/><br/>    if isinstance(obj, ImageFieldFile):<br/>        try:<br/>            return obj.path<br/>        except ValueError, e:<br/>            return ''<br/><br/>    raise TypeError(repr(obj) + " is not JSON serializable")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL WITH A LIST CONTAIN THE FIELD AND THE VALU
    </pattern>
    <template>
<![CDATA[<pre><code>Foo.objects.filter(**dict(bar))<br/></code></pre><br/><br/><p>This isn't a django issue, this is a python issue.  You want to pass the keyword pairs as keyword arguments (kwargs) to the filter.  Your <code>bar</code> is <em>perfect</em> as a kwarg set, so the <code>dict(bar)</code> converts it to the dictionary, and the <code>**</code> prefix informs the python parser that the dictionary is to be interpreted as keyword arguments by the receiver.</p><br/><br/><p>Stack overflow entry <a href="http://stackoverflow.com/questions/1769403/understanding-kwargs-in-python">Understanding kwargs in Python</a> covers this in more detail.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CANON WAY TO SERV JSON DATA WITH DJANGO
    </pattern>
    <template>
<![CDATA[<p>If using python 2.6 or higher:</p><br/><br/><pre><code>import json<br/></code></pre><br/><br/><p>Else:</p><br/><br/><pre><code>import simplejson as json<br/></code></pre><br/><br/><p>Then you can use this in your view code:</p><br/><br/><pre><code>foo = {'bar': ['baz', 'etc']}<br/>return HttpResponse(json.dumps(foo), content_type="application/json")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TRANSACT MANAG BLOCK END WITH PEND COMMIT ROLLBACK ERROR ACROSS METHOD
    </pattern>
    <template>
<![CDATA[<p>Django's default transaction management doesn't support nested transactions. In general, transactions <em>can't</em> be nested. Everything that's done in the midst of a transaction is either committed or rolledback. So when you commit the transaction, no matter where you commit the transaction, it's atomic.</p><br/><br/><p>Looking around online, I found a <a href="http://djangosnippets.org/snippets/2515/" rel="nofollow">snippet</a> that might be a good starting point for you. It essentially overrides the <code>commit_on_success</code> decorator, adding a form of reference counting. In a sense, it forgoes committing if it's not the last out.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST.POST AFTER UPGRAD TO DJANGO 1.3
    </pattern>
    <template>
<![CDATA[<p>I recall having a problem of this kind, it turned out that accessing <code>request.raw_post_data</code> prevented the <code>request.POST</code> dict from being subsequently populated with the post params. What happens if you remove the logging.debug line?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TASTYPI QUESTION
    </pattern>
    <template>
<![CDATA[<pre><code>class NewsBodyResource(ModelResource):<br/>    class Meta:<br/>        queryset = ArticleBody.objects.all()<br/>        resource_name = 'article_body'<br/><br/>class NewsResource(ModelResource):<br/>    newsbodies = fields.ToManyField('yourapp.api.resources.NewsBodyResource', 'articlebody_set', full=True)<br/><br/>    class Meta:<br/>        queryset = Article.objects.filter(status='PU', date_published__lt=datetime.datetime.now).order_by('-date_published')<br/>        resource_name = 'news'<br/></code></pre><br/><br/><p>The parameters to <code>ToManyField</code> represent the following respectively:</p><br/><br/><ol><br/><li><p>project-relative import path to the resource representing the set</p></li><br/><li><p>the name of field if it's on the parent model or the <code>related_name</code><br/>attribute of the field if it's on the child model</p></li><br/><li><p>whether or not to embed<br/>the full data of each child into the feed (True) or just resource<br/>links to each child (False)</p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORRI ABOUT FORM WIZARD IN DJANGO AJAX CONDIT
    </pattern>
    <template>
<![CDATA[<p>In the end, the answers to my questions were "No," and "No."  Standard formWizards just don't do AJAX and complex conditionals gracefully, so I ended up writing my own set of classes to do it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BOOK ABOUT NEW VERSION OF DJANGO AND RAIL
    </pattern>
    <template>
<![CDATA[<p>This is the latest edition of <a href="http://www.djangobook.com/en/2.0/" rel="nofollow">The Django Book</a> and for Rails maybe this <a href="http://rads.stackoverflow.com/amzn/click/0321601661" rel="nofollow">Rails 3 Way</a>.<br/>But I strongly believe you don't need "books" to learn these frameworks to start it. Just start with them by referring to some online tutorial, that's all you need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RY EXCEPT IN LIST COMPREHENS
    </pattern>
    <template>
<![CDATA[<p>Since, based on your other questions, you're using Django, just check the <a href="https://docs.djangoproject.com/en/dev/ref/models/fields/#database-representation" rel="nofollow">actual field</a>.</p><br/><br/><pre><code>cleaned_list = [item for item in dirty_list if item.video_id is not None]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      APACH VIA DJANGO TO CONNECT TO MONGOOS ( ANOTH HTTP SERVER )
    </pattern>
    <template>
<![CDATA[<p>You could use <a href="http://docs.python.org/library/httplib.html" rel="nofollow">httplib</a> or <a href="http://docs.python.org/library/urllib2.html" rel="nofollow">urllib2</a> (both supplied in the Python standard library) in your Django view to send HTTP requests to the device running mongoose.</p><br/><br/><p>Alternatively you could use the <a href="http://docs.python-requests.org/en/latest/index.html" rel="nofollow">Requests</a> library which provides a less verbose API for generating HTTP requests - see also <a href="http://pydanny.blogspot.com/2011/05/python-http-requests-for-humans.html" rel="nofollow">this blog post</a>.</p><br/><br/><p>(Also, I would strongly recommend that you use mod_wsgi rather than mod_python as mod_wsgi is being actively maintained and performs better than mod_python, which was last updated in 2007)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EVERI BROWSER TO SET THE FORM DATA TO IT S ACTUAL VALU
    </pattern>
    <template>
<![CDATA[<p>You can use the</p><br/><br/><pre><code>autocomplete="off"<br/></code></pre><br/><br/><p>attribute on your input but this is unreliable.</p><br/><br/><p>The best way is to randomize your form input names. Each time the form is rendered, you could generate a random string like "klsdjhfsdf". Then, name your input like this:</p><br/><br/><pre><code>&lt;input name="klsdjhfsdf-MyRealInputName" ...&gt;<br/></code></pre><br/><br/><p>Server-side you parse the received inputs and look at everything after the first hyphen to get the input name.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RECEIV JSON FROM GOOGL MAP API
    </pattern>
    <template>
<![CDATA[<p>Google maps returns response in ISO-8859-1 encoding. You need to decode the <code>data</code> bytestring before passing it to simplejson:</p><br/><br/><pre><code>jsondata = simplejson.loads(data.decode('ISO-8859-1'))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      3.OPERATIONALERROR UNABL TO OPEN DATABAS FILE
    </pattern>
    <template>
<![CDATA[<p><a href="https://code.djangoproject.com/wiki/NewbieMistakes#DjangosaysUnabletoOpenDatabaseFilewhenusingSQLite3" rel="nofollow">Djano NewbieMistakes</a></p><br/><br/><blockquote><br/>  <p>PROBLEM  You're using SQLite3, your DATABASE_NAME is set to the<br/>  database file's full path, the database file is writeable by Apache,<br/>  but you still get the above error.</p><br/>  <br/>  <p>SOLUTION Make sure Apache can also write to the parent directory of<br/>  the database. SQLite needs to be able to write to this directory.</p><br/>  <br/>  <p>Make sure each folder of your database file's full path does not start<br/>  with number, eg. /www/4myweb/db (observed on Windows 2000).</p><br/>  <br/>  <p>If DATABASE_NAME is set to something like<br/>  '/Users/yourname/Sites/mydjangoproject/db/db', make sure you've<br/>  created the 'db' directory first.</p><br/>  <br/>  <p>Make sure your /tmp directory is world-writable (an unlikely cause as<br/>  other thing on your system will also not work). ls /tmp -ald should<br/>  produce drwxrwxrwt ....</p><br/>  <br/>  <p>Make sure the path to the database specified in settings.py is a full<br/>  path.</p><br/></blockquote><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BETTER FOR MY PROJECT DJANGO PLONE PHP OR RUBI ON RAIL
    </pattern>
    <template>
<![CDATA[<p>I think you should stick with PHP : </p><br/><br/><ul><br/><li>you already know the language</li><br/><li>you already have the tools for development</li><br/><li>you already have a code base</li><br/></ul><br/><br/><p>I think you should see how your site behaves in production and see what are the most wanted user needs before spending time rewriting everything, and during this time not beeing able to answer correctly to their needs.</p><br/><br/><p>And while your site sends its first bits, it will give you a lot more info on what to expect from the version 2, from a technical point of view.</p><br/><br/><p>Edit : I am not pro-php, I just think you should stick whit the language you already know, until your business gives you time to learn something else.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EERROR COLUMN DOE NOT EXIST . BUT SHOW IN MY MANAGE.PI SQL
    </pattern>
    <template>
<![CDATA[<p><code>syncdb</code> doesn't change existing tables in your database, so if you run that, and then change your model, your model is now out of sync with the table it represents. Running <code>syncdb</code> again will not fix that.</p><br/><br/><p>You either need to use something like <a href="http://south.aeracode.org/" rel="nofollow">south</a> to do a migration, delete the table from your DB so that <code>syncdb</code> will recreate it, or manually run an ALTER TABLE on your DB.</p><br/><br/><p><strong>EDIT (greater detail)</strong></p><br/><br/><p>When you create a subclass of <code>Model</code> in models.py, it acts as a <em>representation</em> of a database table, but doesn't automatically have a database table. You get that by running <code>python manage.py syncdb</code>. Django, then, looks through all your models.py files, generates the SQL required to actually create a table like that and then runs it on your database. The end result is that you end up with actual database tables that are tied to your models.</p><br/><br/><p>However, <code>syncdb</code> only <em>creates</em> tables. It does not alter them. So, if you go and change one of your models (add a field, change the name of a field, etc.), nothing has happened at the database level. Running <code>syncdb</code> again will not help, either, because there's no <em>new</em> tables to create. You have to somehow get the table to match the model and vice versa, though, so that's where your options come in:</p><br/><br/><ol><br/><li><p>Use South (link above). South enables you to create <em>migrations</em>, so when you change something on your models you can run:</p><br/><br/><pre><code>python manage.py schemamigration --auto yourapp<br/></code></pre><br/><br/><p>And it will generate code that will alter the table to match your model. You then need only apply the migration with:</p><br/><br/><pre><code>python manage.py migrate yourapp<br/></code></pre><br/><br/><p>And you're done. The table now matches your model and all is right in the world again.</p></li><br/><li><p>You can manually delete the table from your database. You wouldn't want to do this in production because all the data in that table will go along with it, but in development it shouldn't be a problem. After the table is gone, you can then run:</p><br/><br/><pre><code>python manage.py syncdb<br/></code></pre><br/><br/><p>Because, the table no longer exists, Django will create it, but it will create it based on your current model's state. The net result is the same, your model and table match, so you're good to go.</p></li><br/><li><p>You can manually alter the table. This requires that you figure out what SQL needs to be applied to change the table to match your model. You run this SQL on your database, and then the table is in parity with the model.</p></li><br/></ol><br/><br/><p>The point is that somehow, someway, you must update the table to reflect any changes you make to your models. The model isn't the table, it's just a programmatic representation of it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      2.7 VIRTUALENV PATH ISSU ON OSX 10.5
    </pattern>
    <template>
<![CDATA[<p>As I pointed out in my reply to my own question and as others have replied it's not possible to use different version of python with mod_wsgi. My solution was to install and setup gunicorn for my specific site that needed a different version of python.</p><br/><br/><p>First I installed gunicorn...</p><br/><br/><pre><code>$ /usr/local/virtualenvs/my.examplesite/bin/activate<br/>$ pip install gunicorn<br/></code></pre><br/><br/><p>Then I setup a launchd.plist to run gunicorn in <code>/Library/LaunchDaemons/my.examplesite.com.plist</code>:</p><br/><br/><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br/>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;<br/>&lt;plist version="1.0"&gt;<br/>    &lt;dict&gt;<br/>        &lt;key&gt;Label&lt;/key&gt;&lt;string&gt;my.examplesite.com&lt;/string&gt;<br/>        &lt;key&gt;EnvironmentVariables&lt;/key&gt;<br/>        &lt;dict&gt;<br/>            &lt;key&gt;DJANGO_SETTINGS_MODULE&lt;/key&gt;&lt;string&gt;config.settings&lt;/string&gt;<br/>        &lt;/dict&gt;<br/>        &lt;key&gt;UserName&lt;/key&gt;&lt;string&gt;_www&lt;/string&gt;<br/>        &lt;key&gt;ProgramArguments&lt;/key&gt;<br/>        &lt;array&gt;<br/>            &lt;string&gt;/usr/local/virtualenvs/my.examplesite/bin/gunicorn_django&lt;/string&gt;<br/>            &lt;string&gt;--bind=127.0.0.1:8001&lt;/string&gt;<br/>        &lt;/array&gt;<br/>        &lt;key&gt;RunAtLoad&lt;/key&gt;&lt;true/&gt;<br/>        &lt;key&gt;StandardErrorPath&lt;/key&gt;&lt;string&gt;/var/log/gunicorn/my.examplesite.com.error.log&lt;/string&gt;<br/>        &lt;key&gt;StandardOutPath&lt;/key&gt;&lt;string&gt;/var/log/gunicorn/my.examplesite.com.access.log&lt;/string&gt;<br/>    &lt;/dict&gt;<br/>&lt;/plist&gt;<br/></code></pre><br/><br/><p>Next I setup nginx to server media and proxy to my gunicorn server:</p><br/><br/><pre><code>server {<br/><br/>    listen       80;<br/>    server_name  my.examplesite.com;<br/>    access_log   /var/log/nginx/my.examplesite.com.access.log;<br/>    error_log    /var/log/nginx/my.examplesite.com.error.log;<br/><br/>    location = /favicon.ico {<br/>        return  404;<br/>    }<br/><br/>    location  /static/ {<br/>        root  /path/to/site/root/;<br/>    }<br/><br/>    location  /media/ {<br/>        root  /path/to/site/root/;<br/>    }<br/><br/>    location  / {<br/>        proxy_pass            http://127.0.0.1:8001/;<br/>        proxy_redirect        off;<br/>        proxy_set_header      Host             $host;<br/>        proxy_set_header      X-Real-IP        $remote_addr;<br/>        proxy_set_header      X-Forwarded-For  $proxy_add_x_forwarded_for;<br/>        client_max_body_size  10m;<br/>    }<br/><br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JAVASCRIPT IN DIFFER LANGUAG
    </pattern>
    <template>
<![CDATA[<p>Your channel file must be on the same domain, the requesting document is served from.<br/>Well, you can check if it's working when you request the URL in the browser and getting content ;)</p><br/><br/><p>I switch the language of the JS-SDK in the following way for my projects:<br/>With the signed request, there is a "locale" variable passed to your server.<br/>You can grab it by decoding the SR and accessing $sr['user']['locale'] (or pass the decoded SR to your template engine and access it via {{SR.user.locale}} - this maps to a string formatted like "en_US" or whatever language the user has set on facebook.<br/>Embedding the JS-SDK in the correct localization is a snap, then:</p><br/><br/><pre><code>//connect.facebook.net/{{SR.user.locale}}/all.js<br/></code></pre><br/><br/><p>Well, if you want to keep only the Protugese/English switch because it would look weird to serve for example german dialogs when your app is only PT/EN, then include it as following:</p><br/><br/><pre><code>//connect.facebook.net/{% if SR.user.locale == "pt_BR" %}pt_BR{% else %}en_US{% endif %}/all.js<br/></code></pre><br/><br/><p>But I would stick with the first solution, because the dialogs opened by the SDK would be experienced by the user as a part of facebook - and they would exept it in the language they set facebook to.</p><br/><br/><p>Hope this helps you!<br/>(Also remember to cache this locale setting if your app has multiple pages, because you only get the RT on the first request ;) )</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CROSS DOMAIN ERROR
    </pattern>
    <template>
<![CDATA[<p>you have to use JSONP (JSON Padding) to do cross domain AJAX requests. }</p><br/><br/><p>Refer to this link for info on JSONP</p><br/><br/><p><a href="http://www.ibm.com/developerworks/library/wa-aj-jsonp1/" rel="nofollow">http://www.ibm.com/developerworks/library/wa-aj-jsonp1/</a></p><br/><br/><p>And jquery also has JSONP feature. Check that out in jquery documentation</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UTHSUB ( 404 NOT FOUND UNKNOWN USER. )
    </pattern>
    <template>
<![CDATA[<p>I got it!!! GD_CLIENT = gdata.photos.service.PhotosService() needed <code>email</code> keyword argument as Google account user name.</p><br/><br/><p>gdata.photos.sevice.py</p><br/><br/><pre><code>class PhotosService(gdata.service.GDataService):<br/>  ssl = True<br/>  userUri = '/data/feed/api/user/%s'<br/><br/>  def __init__(self, email=None, password=None, source=None,<br/>           server='picasaweb.google.com', additional_headers=None,<br/>           **kwargs):<br/></code></pre><br/><br/><p>So it should be:</p><br/><br/><pre><code>GD_CLIENT = gdata.photos.service.PhotosService(email='username')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DESERI FOR IO
    </pattern>
    <template>
<![CDATA[<p>If you are trying to remove the escape inside python:</p><br/><br/><pre><code>import re, json<br/>myjson = re.sub(r"\\", "", "[{\"pk\": 4161, \"model\": \"news.article\", \"fields\": {\"date_live\": \"2011-11-03 00:00:01\", \"date_added\": \"2011-11-03 03:10:59\", \"date_modified\": \"2011-11-03 03:10:59\", \"slug\": \"thursday-feature-backup-comic\", \"title\": \"THURSDAY FEATURE --&gt; Backup Comic\"}}]")<br/>myjson = json.loads(myjson) # will decode json<br/></code></pre><br/><br/><p>But if you want to remove the escape from javascript:</p><br/><br/><pre><code>myjson = "[{\"pk\": 4161, \"model\": \"news.article\", \"fields\": {\"date_live\": \"2011-11-03 00:00:01\", \"date_added\": \"2011-11-03 03:10:59\", \"date_modified\": \"2011-11-03 03:10:59\", \"slug\": \"thursday-feature-backup-comic\", \"title\": \"THURSDAY FEATURE --&gt; Backup Comic\"}}]";<br/>myjson = eval(myjson.replace(/\\/, "")); // will encode json<br/></code></pre><br/><br/><p><strong>Note:</strong> You forgot a ] at the end of your string. At least I had an error when I've tryed to eval it. I put the ] at the end and eval worked.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LF PRODUCT TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>i've manage this adding a template tag...<br><br/>Not exacly what i wanted..but works fine. </p><br/><br/><pre><code>@register.inclusion_tag('tagging/lateral_menu.html', takes_context=True)<br/>def lateral_menu(context):  <br/>    object = context.get("category") or context.get("product")<br/><br/>if object.__class__.__name__.lower() == "product":<br/>    request = context.get("request")<br/>    category=lfs.catalog.utils.get_current_product_category(request, object)<br/>else:<br/>    category = object<br/><br/>top_category=category<br/>while top_category.parent is not None:<br/>    top_category = category.parent<br/><br/>categories =top_category.get_all_children()<br/>return {"category" :category, "top_category" : top_category, "categories" : categories }<br/></code></pre><br/><br/><p>Then in the template i can obtain al the data i need.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PYTHON SCRIPT AS PART OF RPM INSTAL PROCESS
    </pattern>
    <template>
<![CDATA[<p>I ended up moving the scripts from %post to %build.  That took care of the issue.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WORDPRESS TO DJANGO WITHOUT LOSE PAGERANK
    </pattern>
    <template>
<![CDATA[<p>If you have a high pagerank, that is probably because you have content and the content is linked to by other people.  You should try to keep that content in some form (it doesn't have to be exactly the same form), or at least ensure that every URL that is being linked to redirects to something useful.  No one who follows a previously valid link to your website should get a 404.</p><br/><br/><p>Your content and your inbound links together are responsible for your pagerank, so if you let both die then you're back at square one, regardless of what web application framework you are using.</p><br/><br/><p>If I were doing it I would probably set up the new blog with Django and import the data manually.  Or, if there is simply way too much data, I could move the Wordpress server to be served from a directory such as /archive and instruct my webserver to 301 redirect all of the old Wordpress blog entry URLs to the new directory.  You would have to continue to maintain the Wordpress installation to some degree, but you would be 100% certain to keep all of your pagerank.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS THERE A GENER HANDLER TO INSERT A POST OBJECT DIRECTLI INTO THE DATABAS
    </pattern>
    <template>
<![CDATA[<p>There is nothing about forms that requires you to actually draw a form.  ModelForms are the right thing to use if you're not going to go with piston or tastypie or something like that.</p><br/><br/><p>Put this in your page:<br/><a href="https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#ajax</a></p><br/><br/><pre><code>class ObjectAjaxForm(forms.ModelForm):<br/>  class Meta:<br/>     model = Object<br/>     fields = ("field1", "field2", "field3", "field4")<br/><br/><br/>#or, if you don't want the "free" csrf protection<br/>#@csrf_exempt<br/>def ajax_store_object(request):<br/>    #request.POST can be substituted with any dictionary/dictionary like object<br/>    form = ObjectAjaxForm(request.POST)<br/>    if form.is_valid():<br/>      form.save()<br/>      return HttpResponse(json.dumps({"status":"Success"}), mimetype="application/json")<br/>    else:<br/>      return HttpResponse(json.dumps({"status":"Failed"}), mimetype="application/json")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ND PARS DJANGO SIMPLEJSON HTTPRESPONS JQUERI
    </pattern>
    <template>
<![CDATA[<p>This is solved - the problem was with opening the file locally with Chrome as related to this question: <a href="http://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains">Access-Control-Allow-Origin Multiple Origin Domains?</a>. Moving the file to the external server allowed it to work as desired. Thanks for the help.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOME MESSAG WHEN USE PYLINT IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>You can disable a warning by adding a comment to each python file where the warning is raised.</p><br/><br/><pre><code># pylint: disable-msg=w0614<br/></code></pre><br/><br/><p>If you don't want to add the comment to each python file, see the question <a href="http://stackoverflow.com/questions/4341746/how-do-i-disable-a-pylint-warning">How do I disable a PyLint warning?</a> for a global solution.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      URBOGEARS2 ANALOG OF DJANGO CONTEXT PROCESSOR
    </pattern>
    <template>
<![CDATA[<p>You have three possible solutions to achieve this.</p><br/><br/><p>First you can use <code>tg.tmpl_context</code> which is available inside every template as <code>tmpl_context</code>.<br/>You can fill the variables inside the <code>BaseController.__call__</code> so that they are available everywhere. </p><br/><br/><p>Another approach is to register <code>base_config.variable_provider</code> inside <code>app_cfg.py</code> which must be a function that returns a dictionary of variables that will be available inside any template. Those variables will be overridden from the controller returned ones if there is a name collision, so it is a good way to provide defaults for controller returned variables.</p><br/><br/><p>Otherwise in recent versions it is also possible to register the <code>before_render</code> hook systemwide using <code>base_config.register_hook</code> inside <code>app_cfg.py</code> the callback can append and override any template parameter.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM DROPDOWN LIST OF NUMBER
    </pattern>
    <template>
<![CDATA[<p>You're looking for a <code>ChoiceField</code> which renders as a <code>select</code> html element by default.<br/><a href="https://docs.djangoproject.com/en/dev/ref/forms/fields/#choicefield" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/forms/fields/#choicefield</a></p><br/><br/><pre><code>class CronForm(forms.Form):<br/>    days = forms.ChoiceField(choices=[(x, x) for x in range(1, 32)])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STATIC FILE IN A 404 TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>It appears, <code>staticfiles</code> app does work with <code>DEBUG = False</code>. Only it doesn't pick up files from individual apps' <code>static</code> directories. It would serve files from the global <code>STATIC_ROOR</code> directory. So you need to run the <a href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#collectstatic" rel="nofollow"><code>collectstatic</code> command</a>:</p><br/><br/><pre><code>python manage.py collectstatic<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STREAM DUMPDATA
    </pattern>
    <template>
<![CDATA[<p>You can try a patch from <a href="https://code.djangoproject.com/ticket/5423" rel="nofollow">https://code.djangoproject.com/ticket/5423</a>, but I think a better way is to dump data to sql.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DISABL INPUT DURE AJAX SUBMIT
    </pattern>
    <template>
<![CDATA[<p>maybe u can disable your form in click func, and then enable in success</p><br/><br/><pre><code>$('#save').live('click', function () {<br/><br/>            $(myForm).attr('disabled', true);<br/>            alert('before submit');<br/><br/>            $('#save_form').ajaxSubmit({<br/>                success:function (data, statusText, xhr, $form) {<br/>                    $(myForm).attr('disabled', false);<br/>                    alert('success');<br/>                    $form.find('.error').remove();<br/>                    if (data['result'] == 'success') {<br/>                        $('#success').show("slow");<br/>                    }<br/>                    else if (data['result'] == 'error') {<br/>                        $('#error').show("fast");<br/>                        //calling procedure to show errors<br/>                    }<br/>                    $('#load').hide("fast");<br/>                },<br/>.<br/>.<br/>.<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON RESPONS WITH SERIAL OBJECT
    </pattern>
    <template>
<![CDATA[<p>Rather than serializing the graph queryset to json the first time, use <code>serializers.serialize('python',  g)</code> to convert it to a Python dictionary first. Then the whole thing will be converted to json at the end. </p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      CAN I ADD A TUPL TO A GENER
    </pattern>
    <template>
<![CDATA[<p>This seems like a bad use of generators. A generator is not a list, it is a function that generates a sequence of values, so it is not possible to "add a tuple to a generator".</p><br/><br/><p>The generator will be exhausted after the model initialization. You might for instance want to use DAY_CHOICES again later -- which will not be possible.</p><br/><br/><p>If you do not have any very specific reason for using a generator here, I would recommend turning DAY_CHOICES to a list instead:</p><br/><br/><pre><code>DAY_CHOICES = [('', 'Day')] + [(str(x), x) for x in range(1,32)]<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PAGIN RAIS TYPEERROR
    </pattern>
    <template>
<![CDATA[<p>Try changing this line:</p><br/><br/><pre><code>page = request.GET.get('page')<br/></code></pre><br/><br/><p>To this:</p><br/><br/><pre><code>page = request.GET.get('page', '1')<br/></code></pre><br/><br/><p>The problem is you're getting a parameter that doesn't exist. Indexing using <code>[]</code> would result in a <code>KeyError</code>, but the <code>get</code> method returns <code>None</code> if it doesn't exist. The paginator is calling <code>int(None)</code>, which fails.</p><br/><br/><p>The second parameter to the <code>get</code> method is a default to return if the key doesn't exist rather than <code>None</code>. I passed <code>'1'</code> which <code>int</code> should not fail on.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALUEDICTKEYERROR TRI TO LEARN DJANGO FROM VIDEO TUTORI WIKICAMP
    </pattern>
    <template>
<![CDATA[<p>Makes much more sense with full trace, though I should have seen it before just with your example code.</p><br/><br/><p>The "content" key only exists in <code>request.POST</code> after the page has been posted. It looks like you're using a separate view for the POST, though, so it should be in there. Nevertheless, you never want to directly reference a key in a dictionary that you're not 120% sure is in there. Instead, use <code>dict.get</code>:</p><br/><br/><pre><code>content = request.POST.get('content')<br/></code></pre><br/><br/><p>That will store <code>None</code> if the key isn't set. You can also specify a default value:</p><br/><br/><pre><code>content = request.POST.get('content', 'this is the default')<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      RETURN TO PREVIOU PAGE AFTER FORM POST SUBMIT
    </pattern>
    <template>
<![CDATA[<p>You can supply a <code>next</code> GET parameter when submitting the form, similar to django.contrib.auth's <code>login()</code> method:</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login" rel="nofollow">https://docs.djangoproject.com/en/dev/topics/auth/#django.contrib.auth.views.login</a>:</p><br/><br/><pre><code>&lt;form action="/url/to/post/form/?next={{ some_variable }}"&gt;<br/></code></pre><br/><br/><p>where the variable can simply be the current URL (taken from the request) or a generated URL. In the view processing the form, simply check for a <code>next</code> parameter and redirect appropriately: </p><br/><br/><pre><code>from django.shortcuts import redirect<br/>if 'next' in request.GET:<br/>    return redirect(request.GET['next'])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TO NGINX UWSGI DJANGO SET NOT FOUND
    </pattern>
    <template>
<![CDATA[<p>First of all you do not need all of those sys.path mess, your nginx vars already set the virtualenv for you.</p><br/><br/><p>I suggest you to go in static mode, as dynamic virtualhosting mode is very complex and often hard to debug. Simply change your command line and remove the three uwsgi_param entry from nginx:</p><br/><br/><p>/usr/local/sbin/uwsgi<br/>--uid www-data<br/>--socket 127.0.0.1:5050<br/>--master<br/>--logto /var/log/uwsgi_main.log<br/>--logdate<br/>--optimize 2<br/>--processes 4<br/>--harakiri 120<br/>--virtualenv /home/USER/virtualenv/<br/>--pythonpath /home/USER/virtualenv/<br/>--chdir /home/USER/virtualenv/PROJECT<br/>--env DJANGO_SETTINGS_MODULE=PROJECT.settings<br/>--module "django.core.handlers.wsgi:WSHIHandler()"</p><br/><br/><p>should be enough (and obviously you can throw away the wsgi script)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EDECODEERROR WITH JSON
    </pattern>
    <template>
<![CDATA[<p>For some reason, it worked when I removed the call to <code>unicode()</code> around my strings. Whatever, as long as it works :)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST COMMENT WITH AJAX THROUGH DJANGO
    </pattern>
    <template>
<![CDATA[<p>Thanks for the response, next time I will definitely leave a more detailed post.  My problem was in the jquery script.  I was trying to pass dataString as form data to the view, when it was a DOM object not the actual form data.  Here's the final working script.</p><br/><br/><pre><code>$(document).ready(function() {<br/>  $('#comment_form').submit(function(e) {<br/>  e.preventDefault();<br/>  $.ajax({<br/>    type: 'POST',<br/>    url: '{% url art.views.post %}',<br/>    data: $('#comment_form').serialize(),<br/>    dataType: 'json',<br/>    success: function() {<br/>      location.reload();<br/>$('#comment_form').get(0).reset();<br/>  },<br/> });<br/> return false;<br/> });<br/>});<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      LINUX OR A VIRTUALENV ERROR
    </pattern>
    <template>
<![CDATA[<p>Stop using <code>su</code> and <code>sudo</code> to run virtualenv. You need to run virtualenv as your normal user. You have created the virtualenv with <code>sudo</code> which is why you are getting these errors.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO SENTRI ON WINDOW
    </pattern>
    <template>
<![CDATA[<p>if you read that issue, the point is that sentry <strong>requires</strong> python-deamon, which happens to be *nix only. In other words, sentry currently doesn't work on windows. </p><br/><br/><p>that's like saying "i know my car needs an engine to run, but since i could't find a suitable one, i just didn't put one in. and now i don't understand why my car doesn't work"</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      VALU IN OBJECT IN DJANGO IS NOT EQUAL TO NONE
    </pattern>
    <template>
<![CDATA[<p>If you want to know if your queryset returned any results, call the <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#exists" rel="nofollow"><code>exists</code></a> method.</p><br/><br/><pre><code>x = Booking.objects.filter(date_select='2011-12-3')<br/>if x.exists():<br/>   # There are some results from this query set<br/></code></pre><br/><br/><p>If you want to know how many items, you can use <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#count" rel="nofollow"><code>count</code></a></p><br/><br/><pre><code>x = Booking.objects.filter(date_select='2011-12-3')<br/>print x.count()<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PASSWORD RESET EMAIL SUBJECT
    </pattern>
    <template>
<![CDATA[<p><strong>Development Version</strong></p><br/><br/><p>Just create new file <code>registration/password_reset_subject.txt</code> in your templates dir. This will override default django subject</p><br/><br/><p>See <a href="https://github.com/django/django/blob/master/django/contrib/auth/templates/registration/password_reset_subject.txt" rel="nofollow">https://github.com/django/django/blob/master/django/contrib/auth/templates/registration/password_reset_subject.txt</a></p><br/><br/><p>and <a href="https://github.com/django/django/blob/master/django/contrib/auth/forms.py" rel="nofollow">https://github.com/django/django/blob/master/django/contrib/auth/forms.py</a> line 150</p><br/><br/><p><strong>In Django 1.3</strong> </p><br/><br/><p>if you use internalization just add in <code>.po</code> file </p><br/><br/><pre><code>#: forms.py:143<br/>#, python-format<br/>msgid "Password reset on %s"<br/>msgstr "YOUR SUBJECT HERE %s"<br/></code></pre><br/><br/><p>if not folow next steps</p><br/><br/><p>in root urls.py</p><br/><br/><pre><code># change to your custom view<br/>(r'^password_reset/$', 'your_app.views.password_reset'),<br/></code></pre><br/><br/><p>in your your_app/views.py</p><br/><br/><pre><code>from django.contrib.auth.views import password_reset as django_password_reset<br/>from .forms import CustomPasswordResetForm<br/><br/># reuse Django view, but change form<br/>def password_reset(*args, **kwargs):<br/>    kwargs['password_reset_form'] = CustomPasswordResetForm<br/>    django_password_reset(*args, **kwargs):<br/></code></pre><br/><br/><p>rewrite save method in your your_app/forms.py (I know it not DRY but should work :)</p><br/><br/><pre><code>class CustomPasswordResetForm(PasswordResetForm):<br/>    def save(self, domain_override=None, email_template_name='registration/password_reset_email.html',<br/>         use_https=False, token_generator=default_token_generator, request=None):<br/>        from django.core.mail import send_mail<br/>        for user in self.users_cache:<br/>            if not domain_override:<br/>                current_site = get_current_site(request)<br/>                site_name = current_site.name<br/>                domain = current_site.domain<br/>            else:<br/>                 site_name = domain = domain_override<br/>            t = loader.get_template(email_template_name)<br/>            c = {<br/>            'email': user.email,<br/>            'domain': domain,<br/>            'site_name': site_name,<br/>            'uid': int_to_base36(user.id),<br/>            'user': user,<br/>            'token': token_generator.make_token(user),<br/>            'protocol': use_https and 'https' or 'http',<br/>            }<br/>            send_mail(_("YOUR SUBJECT HERE %s") % site_name,<br/>                t.render(Context(c)), None, [user.email])<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UNBOUNDLOCALERROR LOCAL VARIABL PROD AVAIL REFERENC BEFOR ASSIGN
    </pattern>
    <template>
<![CDATA[<p>Sometimes you loop is not entered, so <code>prod_Available</code> is not created, but you try to reference it.</p><br/><br/><p>Before the loop put <code>prod_Available = 0</code>:</p><br/><br/><pre><code>    prod = Product.objects.get(id=product_id)<br/><br/>    prod_Available = 0 # !<br/><br/>    for x in range(start_date,end_date + 1):<br/>        x = x - start_date<br/>        delta = datetime.timedelta(days=x)<br/>        all_date = check_in + delta<br/>        sumOfQuantity = HotelCheck.objects.filter(date_booked=all_date, product=prod).aggregate(Sum('quantity'))['quantity__sum']<br/>        if sumOfQuantity == None:<br/>            sumOfQuantity = 0<br/>        prod_Available = prod.quantity - sumOfQuantity<br/>        #global prod_Available<br/>    if prod_Available &lt;= 0:<br/>        status = 0<br/>    else:<br/>        status = 1<br/><br/>    return status<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WITH REMOT MYSQL
    </pattern>
    <template>
<![CDATA[<p>This was the MySQL lag. After implementing the replication (circular in my case) all servers work flawlessly and MySQL replication is really fast!</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UGHT UNICODEENCODEERROR WHILE RENDER ASCII CODEC CA N T ENCOD CHARACT IN POSIT 4 5 ORDIN NOT IN RANG ( 128 )
    </pattern>
    <template>
<![CDATA[<p>Your <code>__unicode__</code> method is unfortunately nonsense.</p><br/><br/><p><code>decode</code> is for converting bytestrings to unicode, but <code>self.company</code> is <em>already</em> unicode. So calling <code>decode('utf-8')</code> on it means that Python has to implicitly encode it to a bytestring first, which it does by the default <code>ascii</code> encoding - which will fail as soon as you have any accented characters.</p><br/><br/><p>I don't know what you were trying to do with that method, but <code>__unicode__</code> methods should always return unicode. Just <code>return self.company</code> is the correct thing to do here.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD A FORM INTO MY DJANGO FILE
    </pattern>
    <template>
<![CDATA[<p>You need something like this (read about form fields validation yourself):</p><br/><br/><p>models.py:</p><br/><br/><pre><code>from django.db import models<br/><br/>class Player(models.Model):<br/>    user_name = models.CharField()<br/>    real_name = models.CharField()<br/>    site_played = models.CharField()<br/></code></pre><br/><br/><p>forms.py:</p><br/><br/><pre><code>from django import forms<br/><br/>MyForm(forms.Form):<br/>   user_name = forms.CharField()<br/>   real_name = forms.CharField()<br/>   site_played = forms.CharField()<br/></code></pre><br/><br/><p>views.py:</p><br/><br/><pre><code>from forms import MyForm<br/>from models import Player<br/><br/>def new_player(request):<br/>    #...<br/>    if request.method == 'POST':<br/>        form = MyForm(request.POST)<br/><br/>        if form.is_valid():<br/>            player = Player()<br/>            player.user_name = form.cleaned_data.get('user_name')<br/>            player.real_name = form.cleaned_data.get('real_name')<br/>            player.site_played = form.cleaned_data.get('site_played')<br/>            player.save()<br/>    #...<br/>    return render_to_response('stakeme/new_player.html',<br/>                              context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>UPDATE:<br/>After you get the idea, you might want to have a look at <a href="http://wtforms.simplecodes.com/docs/dev/forms.html" rel="nofollow">WTForms</a> library.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PARS THE REMAIND IN TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>Although the import statement is not part of the template language, this isn't actually your problem - it will just show as text. The actual problem is your function call: Django doesn't allow calls with parentheses in templates. Only functions with no parameters are allowed. You need to do the lookup in the view and pass it in the context.</p><br/><br/><p>Of course, this is all <a href="https://docs.djangoproject.com/en/1.3/topics/templates/#accessing-method-calls" rel="nofollow">clearly explained</a> in the documentation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      OS.GETENV ON OSX ( DJANGO 1.4 )
    </pattern>
    <template>
<![CDATA[<p>The immediate resolution for this, assuming you are using bash as your shell:</p><br/><br/><p><code>$ export LC_ALL=en_US.UTF-8</code></p><br/><br/><p><code>$ export LANG=en_US.UTF-8</code></p><br/><br/><p>This will set your locale for that session, and syncdb will work. You can add this to your profile and make it permanent for your shells.</p><br/><br/><p>You can use the <code>locale</code> command to see the current settings, and <code>locale -a</code> to see what locales are available to you. <code>en_US.UTF-8</code> is a generic safe one, but you may have other preferences.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HYBRID WEB DESKTOP APP RUBI ON RAIL OR DJANGO ON PYTHON
    </pattern>
    <template>
<![CDATA[<p>I would do neither. Use an event subsystem such as Twisted, glib, Qt, etc. and have it act as both a GUI mainloop and a web server.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SERV LARG FILE ( WITH HIGH LOAD ) IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Your opening of the image loads it in memory and this is what causes the increase in load under heavy use. As posted by Martin the real solution is to serve the file directly.</p><br/><br/><p>Here is another approach, which will stream your file in chunks without loading it in memory.</p><br/><br/><pre><code>import os<br/>import mimetypes<br/>from django.core.servers.basehttp import FileWrapper<br/><br/><br/>def download_file(request):<br/>   the_file = '/some/file/name.png'<br/>   filename = os.path.basename(the_file)<br/>   response = HttpResponse(FileWrapper(open(the_file)),<br/>                           content_type=mimetypes.guess_type(the_file)[0])<br/>   response['Content-Length'] = os.path.getsize(the_file)    <br/>   response['Content-Disposition'] = "attachment; filename=%s" % filename<br/>   return response<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      UWSGI ERROR PYTHON APPLIC NOT FOUND
    </pattern>
    <template>
<![CDATA[<p>you have a typo in django_wsgi.py file</p><br/><br/><p>the callable must be 'application'</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR NO MODUL NAME GRAPPELLI
    </pattern>
    <template>
<![CDATA[<p>Check if grappelli in your PYTHONPATH. Run this in console:</p><br/><br/><pre><code>$ python<br/>&gt;&gt; import grappelli<br/></code></pre><br/><br/><p>If this throw ImportError you not installed this package.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN LIST DISPLAY + FOREIGNKEY EMPTI CHANG LIST
    </pattern>
    <template>
<![CDATA[<p>I second <strong>Stefano</strong> on the fact that <code>null=True, blank=True</code> is to be added. But, I think you only need to add it to the <code>org_name</code> field of the <code>Organization</code> model. That should make your way through. It has to be done because you have run <code>inspectdb</code> to create models from your legacy DB. And probably the <code>organization</code> table in the DB has an empty string stored. So, adding the above would allow the Admin to have a blank field/column displayed.</p><br/><br/><p>Moreover, you can also try using <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display" rel="nofollow">callbacks</a> in situations where you don't want to make changes to your model definition like the above.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MODEL ERROR TYPEERROR XXX IS AN INVALID KEYWORD ARGUMENT FOR THI FUNCTION
    </pattern>
    <template>
<![CDATA[<ol><br/><li><p><strong>Instanciate your model without many to many</strong>, <code>investment1 = Investment()</code></p></li><br/><li><p><strong>Save your model</strong>, <code>investment1.save()</code></p></li><br/><li><p><strong>Add many to many</strong>, there are <a href="https://docs.djangoproject.com/en/1.3/ref/models/relations/" rel="nofollow">several ways to do it</a> like <code>investment1.person.add(person_model)</code> or <code>investment1.person.create(name='foo')</code></p></li><br/></ol><br/><br/><p><strong>You may not use a ManyToMany relation until a model is saved</strong>, this is because a row in a ManyToMany relation table needs the pk of the models at the two sides of the relations.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( ) IS NOT WORK
    </pattern>
    <template>
<![CDATA[<p>This line</p><br/><br/><pre><code>return HttpResponseRedirect(reverse('reg.views.thanks', args=(id,)))<br/></code></pre><br/><br/><p>Is trying to construct a url to your view <code>reg.views.thanks</code>, with the <code>id</code> variable used as a parameter.</p><br/><br/><p>This line in urls.py</p><br/><br/><pre><code>url(r'^thanks/$', 'reg.views.thanks'),<br/></code></pre><br/><br/><p>Does not have anywhere for that parameter to go.</p><br/><br/><p>The first thing that you need to figure out is whether you actually want to send an HTTP redirect to the browser to tell it to go to the 'thanks' page. If you really do, then you need a way to send that id in the URL. You can do it as part of the URL path itself, as @moguzalp suggests, or you can put it in the query string, like</p><br/><br/><pre><code>/thanks/?id=12345<br/></code></pre><br/><br/><p>Or you can do other things, like stashing the id in the user's session, and pulling it out when they request the thanks page. That's a bit more complicated, though.</p><br/><br/><p>If you don't actually need to issue an HTTP redirect, then there's nothing stopping you from just calling the thanks() function from inside your view function, like this:</p><br/><br/><pre><code>def registration(request):<br/>    if request.method == 'POST':<br/>        form = registrationform(request.POST)<br/>        if form.is_valid():<br/>            data = form.save()<br/>            id = data.id<br/>            return thanks(request, id)<br/>    else:<br/>        form = registrationform()<br/>    return render_to_response('registration.html', {'form' : form}, context_instance=RequestContext(request))<br/></code></pre><br/><br/><p>The URL won't change in the browser, but the correct ID will be used, and doesn't need to appear anywhere else, in the URL, the query parameters, or the session</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FORM GET VALU FROM PREVIOU INSTANC
    </pattern>
    <template>
<![CDATA[<p>Use <strong>copy.deepcopy</strong>() rather than copy.copy (wild guess: probably it's sharing the data dict instance ...).</p><br/><br/><blockquote><br/>  <p>but now, after I saved v1, v2 (a completly new instance) has a<br/>  position setted to the same one that was set on v1 (not expected)</p><br/></blockquote><br/><br/><p>That is incorrect. A modelform instance sets self.instance in <strong>init</strong> and then only works on that. If you copy the reference to form.instance and then modify it outside the form, it will of course be reflected on form.instance.</p><br/><br/><p>deepcopy vs. copy:</p><br/><br/><pre><code>In [1]: import copy<br/><br/>In [2]: a={'foo':'bar'}<br/><br/>In [3]: b={'x': a}<br/><br/>In [4]: bb=copy.copy(b)<br/><br/>In [5]: b['x']['foo']<br/>Out[5]: 'bar'<br/><br/>In [6]: b['x']['foo'] = 'test'<br/><br/>In [8]: bb['x']['foo']<br/>Out[8]: 'test'<br/><br/>In [9]: bbb=copy.deepcopy(b)<br/><br/>In [10]: bbb['x']['foo'] = 'y'<br/><br/>In [11]: bb['x']['foo']<br/>Out[11]: 'test'<br/><br/>In [12]: b['x']['foo']<br/>Out[12]: 'test'<br/><br/>In [13]: bbb['x']['foo']<br/>Out[13]: 'y'<br/></code></pre><br/><br/><p>The thing is that copy will just copy a value, and the references it contains are preserved. deepcopy() copies a value and all the values it contains.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ( RUN ) JUMO ( PYTHON DJANGO ) ON LOCALHOST
    </pattern>
    <template>
<![CDATA[<p>This project has a lot of external requirements which are not listed anywhere and unless you are comfortable and familiar with django, I wouldn't recommend installing it. Here are some <strong><em>but not all</em></strong> of the requirements that you'll need running:</p><br/><br/><ol><br/><li><a href="http://www.celeryproject.org/install/" rel="nofollow">Celery</a> and <a href="https://github.com/ask/django-celery" rel="nofollow">django-celery</a></li><br/><li><a href="http://www.rabbitmq.com/download.html" rel="nofollow">RabbitMQ</a> (a broker for Celery), or another broker but then you'll have to edit <a href="https://github.com/jumoconnect/openjumo/blob/master/jumodjango/settings.py" rel="nofollow">settings.py</a> again.</li><br/><li><a href="http://www.couchbase.com/downloads/membase-server/community" rel="nofollow">memcached</a> (this is optional, as you can use django's own session middleware for development), but if you simply download the code and try to run it, you'll run into an error since the default <a href="https://github.com/jumoconnect/openjumo/blob/master/jumodjango/settings.py" rel="nofollow">settings.py</a> has the default middleware commented out.</li><br/><li><a href="https://github.com/sehmaschine/django-grappelli" rel="nofollow">grappelli</a></li><br/><li><a href="https://github.com/kmmbvnr/django-jenkins" rel="nofollow">django-jenkins</a> (not required, but again, unless you edit the default <a href="https://github.com/jumoconnect/openjumo/blob/master/jumodjango/settings.py" rel="nofollow">settings.py</a>, you'll get errors).</li><br/><li><a href="https://github.com/toastdriven/django-tastypie" rel="nofollow">django-tastypie</a></li><br/><li><a href="https://github.com/django-debug-toolbar/django-debug-toolbar" rel="nofollow">django-debug-toolbar</a></li><br/><li><a href="http://www.datasciencetoolkit.org/developerdocs#setup" rel="nofollow">Data science toolkit server</a></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TWITTER AND GOOGL LOGIN EXAMPL IN RAILS DJANGO
    </pattern>
    <template>
<![CDATA[<p>You mean an app like <a href="http://social.matiasaguirre.net/" rel="nofollow">django-social-auth</a>?</p><br/><br/><p>Check <a href="http://djangopackages.com/grids/g/authentication/" rel="nofollow">Django Packages</a> to find more.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN DATE AND TIME PICKER NOT WORK
    </pattern>
    <template>
<![CDATA[<p>It was a problem of django installation, i've reinstalled it and is now working properly.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      THE FORMAT OF JSON SERIAL IN DJANGO
    </pattern>
    <template>
<![CDATA[<pre><code>from django.forms.models import model_to_dict<br/>model_to_dict(intance, fields=[], exclude=[])<br/></code></pre><br/><br/><p>With this function you get the expected result.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      N IMAGEFIELD URL WITHIN A TEMPLAT
    </pattern>
    <template>
<![CDATA[<p>You need {{ image.image.url }} &amp; {{ image.image.path }}, while {{ image }} - just an Image object</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMAGEKIT PROCESS THE ORIGIN IMAG
    </pattern>
    <template>
<![CDATA[<p>You can use <code>ProcessedImageField</code>:</p><br/><br/><pre><code>from imagekit.models import ProcessedImageField<br/><br/>class Photo(models.Model):<br/>    original = ProcessedImageField(etcetera)<br/></code></pre><br/><br/><p>There is <a href="https://github.com/jdriscoll/django-imagekit/blob/eb801d75f55c6fbea58809c78837f205f237481e/imagekit/models.py#L350" rel="nofollow">in-code documentation</a> on this class, but it looks like it's not being picked up by <a href="http://django-imagekit.readthedocs.org/en/latest/" rel="nofollow">readthedocs</a>' autodoc module right now.</p><br/><br/><p>I reopened <a href="https://github.com/jdriscoll/django-imagekit/issues/56" rel="nofollow">a bug</a> to fix the documentation.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      POST MY URL 500 ( OK ) WHEN USE .AJAX POST TO SEND JSON TO DJANGO VIEW
    </pattern>
    <template>
<![CDATA[<p><code>data: "events"</code> should be <code>data: events</code>. Your server might not like a non-json payload.</p><br/><br/><p>You also want to add <code>contentType: 'application/json'</code> since you want to post json, not form-encoded values. If you <em>do</em> expect form-encoded values on the server-side though, use <code>data: {events: events}</code> to get a POST data field <code>events</code> containing the JSON string.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      READ ARRAY OF JSON OBJECT FROM QUERYDICT
    </pattern>
    <template>
<![CDATA[<p>This is actually jQuery, not Django, being strange. Your <code>test</code> variable does not contain JSON, but actual JS objects. jQuery, for reasons best known to itself, parses this into some very weird format before posting, hence the result you get. If you did this instead (note the quotes around the whole thing):</p><br/><br/><pre><code>var test = '[{"id": 1},{"id": 2},{"id": 3}]';<br/></code></pre><br/><br/><p>you'd find you get very nearly the QueryDict you expect: the only thing you then need to do is to call <code>json.loads(ret['json_data'])</code>.</p><br/><br/><p>Also for reasons that I can't understand. jQuery doesn't contain any functionality to convert your array of objects to JSON. You'll need to find a plugin or separate library for that.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EERROR TOO MANI VALU TO UNPACK DJANGO
    </pattern>
    <template>
<![CDATA[<p>Yes, there is a problem in the password.</p><br/><br/><p>The error is in the way the password has been encrypted and stored in the DB. It can be clearly seen from the statement <code>algo, salt, hsh = enc_password.split('$')</code> in the traceback. The encrypted password splitting returns more than 3 values.</p><br/><br/><p>So, please have look at the password encryption schemes and related.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IS THROW A 123L 123L IS NOT JSON SERIALIZ
    </pattern>
    <template>
<![CDATA[<p>This works for me:</p><br/><br/><pre><code>from django.db.models.query import ValuesListQuerySet<br/><br/>def default(o):<br/>    if isinstance(o, ValuesListQuerySet):<br/>        return list(o)<br/>    raise TypeError(repr(o) + " is not JSON serializable")<br/><br/>json.dumps(valueListObject, default=default)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      QUICK ADD LINK TO A RELAT MODEL IN DJANGO ADMIN
    </pattern>
    <template>
<![CDATA[<p>Model A has a <strong>reverse foreign key</strong> to B, because B has a foreign key to A:</p><br/><br/><ul><br/><li>B().a is a foreign key</li><br/><li>A().bet_set is a <strong>reverse foreign key</strong></li><br/></ul><br/><br/><p>Django offers "<strong>inlines</strong>" to deal with <strong>reverse foreign keys</strong>.</p><br/><br/><ol><br/><li><p>In the context of forms in <strong>user defined views</strong>/<em>your code</em>, use <a href="https://docs.djangoproject.com/en/dev/topics/forms/modelforms/#inline-formsets" rel="nofollow">inline model formsets</a>.</p></li><br/><li><p>In the context of <strong>Django admin</strong>, use a <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-objects" rel="nofollow">InlineModelAdmin</a> like <em>StackedInline</em> or <em>TabularInline</em></p></li><br/></ol><br/><br/><p>If you do not want the inline formset to be generated from existing objects, then override the <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-options" rel="nofollow">queryset() method of your admin inline formset class</a>, to return something like: YourModel.objects.none()</p><br/><br/><p>This will make the inline formset to be always empty. If you only want one extra form then set extra=1.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN CHANG FIELD VALU IN CHANG FORM BEFOR RENDER
    </pattern>
    <template>
<![CDATA[<p>I just figured that ModelAdmin.add_view uses request.GET to set initial in django/contrib/admin/options.py line 900.</p><br/><br/><p>So to prepopulate the "name" field of the someapp.somemodel add form with 'bar', just open: /admin/someapp/somemodel/add/?name=bar</p><br/><br/><p>Now if you want a similar behaviour in the change form, override get_object method as such:</p><br/><br/><pre><code>def get_object(self, request, object_id):<br/>    obj = super(YourModelAdmin, self).get_object(request, object_id)<br/>    for key, value in request.GET.items():<br/>        setattr(obj, key, value)<br/>    return obj<br/></code></pre><br/><br/><p>Now open /admin/someapp/somemodel/1/?name=bar and the field "name" will have value "bar" in the form.</p><br/><br/><p>This is tested <strong>hack</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      JSON DICT OBJECT HA NO ATTRIBUT META
    </pattern>
    <template>
<![CDATA[<pre><code>events=Event.objects.filter(e_date__year=datetime.today().year).filter(e_date__month=datetime.today().month,e_status=1).only('e_name','e_date')<br/></code></pre><br/><br/><p>Serializer waits for normal queryset, not <code>ValuesQuerySet</code> (which is returned by <code>values</code>). If you want to query only certain fileds, use <code>only.</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO.COR JSON SERIAL WITH JQUERI SYNTAX INCONSIST
    </pattern>
    <template>
<![CDATA[<p>I suspect the issue is that you're using render_to_response, and not setting a mimetype. Try just returning <code>HttpResponse(data, mimetype='application/json')</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      BLANK FORM FIELD ARE NOT ACCEPT
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/ref/forms/fields/#required" rel="nofollow">Django forms documentation</a>:</p><br/><br/><blockquote><br/>  <p>By default, each Field class assumes the value is required</p><br/></blockquote><br/><br/><p>Set the "required" argument to False as such:</p><br/><br/><pre><code>Name = forms.CharField(required = False, label = "Имя ", widget = forms.TextInput(attrs = {'size': 15}))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      REQUEST.USER.IS AUTHENT IS ALWAY TRUE
    </pattern>
    <template>
<![CDATA[<p>Shouldn't it be request.user.is_authenticated()  ie with brackets as it's a function ?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TTRIBUTEERROR SET OBJECT HA NO ATTRIBUT DATABASE ENGINE
    </pattern>
    <template>
<![CDATA[<p>What is <code>/Users/Kinnovate/Desktop/fsdjango/platformsite/common/fields/pickle.py</code>? Is it your code? Then you have an error in it, because you really don't have <code>DATABASE_ENGINE</code> in your seetings. Use <code>settings.DATABASES['default']['ENGINE']</code> instead.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      USER WHEN DELET USERPROFIL
    </pattern>
    <template>
<![CDATA[<p>First, to answer <em>why "delete()" is not called from the admin</em>. This statement is:</p><br/><br/><ol><br/><li><strong>True in the case of deleting objects from the list view</strong>, ie. /admin/auth/user/ check some boxes then click Actions -> delete), this is because the delete() method of a <strong>queryset</strong> is called,</li><br/><li><strong>Wrong in the case of deleting an object from the change_form</strong>, ie. /admin/auth/user/1/ click on delete, this is where the delete() method of the <strong>object</strong> is called</li><br/></ol><br/><br/><p>That said, <a href="https://docs.djangoproject.com/en/dev/ref/signals/#django.db.models.signals.pre_delete" rel="nofollow">_delete signals</a> are well supported. Here is how you can use it:</p><br/><br/><pre><code>from django.db.models import signals<br/><br/>def delete_user(sender, instance=None, **kwargs):<br/>    try:<br/>        instance.user<br/>    except User.DoesNotExist:<br/>        pass<br/>    else:<br/>        instance.user.delete()<br/>signals.post_delete.connect(delete_user, sender=UserProfile)<br/></code></pre><br/><br/><p>This is how i tested it:</p><br/><br/><pre><code>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()<br/><br/>In [2]: user=User(username='foo'); user.save()<br/><br/>In [3]: profile=UserProfile(user=user); profile.save()<br/><br/>In [4]: UserProfile.objects.all().delete()<br/><br/>In [5]: User.objects.all()<br/>Out[5]: []<br/></code></pre><br/><br/><p>Of course, this also works when the delete() method <strong>of the object</strong> is called:</p><br/><br/><pre><code>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()<br/><br/>In [2]: user=User(username='foo'); user.save()<br/><br/>In [3]: profile=UserProfile(user=user); profile.save()<br/><br/>In [4]: profile.delete()<br/><br/>In [5]: User.objects.all()<br/>Out[5]: []<br/></code></pre><br/><br/><p>Note that because of <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#deleting-objects" rel="nofollow">cascade delete</a>, this works both ways:</p><br/><br/><pre><code>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()<br/><br/>In [2]: user=User(username='foo'); user.save()<br/><br/>In [3]: profile=UserProfile(user=user); profile.save()<br/><br/>In [4]: user.delete()<br/><br/>In [5]: User.objects.all()<br/>Out[5]: []<br/><br/>In [6]: UserProfile.objects.all()<br/>Out[6]: []<br/></code></pre><br/><br/><p>If you need to know more about signals, refer to <a href="https://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow">Django's extensive documentation</a>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A POST REQUEST IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>request.GET/POST are <a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict" rel="nofollow">QueryDict</a> instances. According to the documentation on <a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict" rel="nofollow">QueryDict</a>, there are indeed "immutable" <strong>unless you clone them</strong>:</p><br/><br/><blockquote><br/>  <p>QueryDict instances are immutable, unless you create a copy() of them. That means you can't change attributes of request.POST and request.GET directly.</p><br/></blockquote><br/><br/><p>You can <strong>copy, update and re-assign QueryDicts</strong> as such:</p><br/><br/><pre><code>ipdb&gt; request.GET<br/>&lt;QueryDict: {u'x': [u'1']}&gt;<br/>ipdb&gt; request.POST<br/>&lt;QueryDict: {}&gt;<br/>ipdb&gt; request.REQUEST<br/>MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)<br/>ipdb&gt; new_post = request.POST.copy()<br/>ipdb&gt; new_post.update(request.GET)<br/>ipdb&gt; request.POST = new_post<br/>ipdb&gt; request.POST<br/>&lt;QueryDict: {u'x': [u'1']}&gt;<br/>ipdb&gt; request.GET<br/>&lt;QueryDict: {u'x': [u'1']}&gt;<br/>ipdb&gt; request.REQUEST<br/>MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)<br/></code></pre><br/><br/><p>The trick to <strong>update the MergeDict</strong> is to override its <em>dicts</em> attribute as such:</p><br/><br/><pre><code>ipdb&gt; request.REQUEST<br/>MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)<br/>ipdb&gt; request.REQUEST.dicts = (request.POST, request.GET)<br/>ipdb&gt; request.REQUEST<br/>MergeDict(&lt;QueryDict: {u'x': [u'1']}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)<br/></code></pre><br/><br/><p>Note that <strong>MergeDict</strong> is defined in module <strong>django.utils.datastructures</strong>, and instanciated in <strong>django.core.handlers.wsgi</strong> (and django.core.handlers.modpython) as such: <code>self._request = datastructures.MergeDict(self.POST, self.GET)</code>.</p><br/><br/><p><strong>DISCLAMER</strong>: MergeDict is not documented, will break one day, and probably even <strong>kill some kittens</strong>. Use at your own discretion and with your own kittens. That said I like your use case, it's a pretty good idea.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO COMMENT
    </pattern>
    <template>
<![CDATA[<p>2 things are necessary for your system to work:</p><br/><br/><ol><br/><li><p><strong>The  tag has an enctype attribute allowing file uploads</strong>, e.g. <code>&lt;form enctype="multipart/form-data" method="post" action=""&gt;</code>, or the browser will <strong>not</strong> send the file</p></li><br/><li><p><strong>The form is instanciated with both request.POST and request.FILES</strong>, e.g. <code>form = form_class(request.POST, request.FILES)</code>. Else the FileField will not have any value.</p></li><br/></ol><br/><br/><p>So really what's missing from your topic are:</p><br/><br/><ol><br/><li><p><strong>The form HTML</strong> and </p></li><br/><li><p><strong>The view python</strong> code, <em>hint: make sure you inspect request.FILES there BTW</em></p></li><br/></ol><br/><br/><p>For me to make a perhaps more specific answer.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INDIRECT JOIN QUERI
    </pattern>
    <template>
<![CDATA[<p>Consider <a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#select-related" rel="nofollow">select_related()</a>.</p><br/><br/><p>From 3 queries, to 2 queries with just select_related(), to 1 query with select_related() given better arguments.</p><br/><br/><pre><code>In [17]: [q.user.userdata.access_token for q in Question.objects.all()]<br/>DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id" FROM "testapp_question"; args=()<br/>DEBUG (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)<br/>DEBUG (0.000) SELECT "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_userdata" WHERE "testapp_userdata"."user_id" = 1 ; args=(1,)<br/>Out[17]: [u'1']<br/><br/>In [18]: [q.user.userdata.access_token for q in Question.objects.all().select_related()]<br/>DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "testapp_question" INNER JOIN "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id"); args=()<br/>DEBUG (0.000) SELECT "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_userdata" WHERE "testapp_userdata"."user_id" = 1 ; args=(1,)<br/>Out[18]: [u'1']<br/><br/>In [19]: [q.user.userdata.access_token for q in Question.objects.all().select_related('user__userdata')]<br/>DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined", "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_question" INNER JOIN "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id") LEFT OUTER JOIN "testapp_userdata" ON ("auth_user"."id" = "testapp_userdata"."user_id"); args=()<br/>Out[19]: [u'1']<br/></code></pre><br/><br/><p>It is interresting to note that you don't have to call selected related with <code>('user', 'user__userdata')</code>: You can see the last query fetches data from the 3 tables with just '<code>user__userdata</code>':</p><br/><br/><pre><code>SELECT <br/>    "testapp_question"."id", "testapp_question"."description" [...]<br/>    "auth_user"."id", "auth_user"."username" [...]<br/>    "testapp_userdata"."id", "testapp_userdata"."user_id"  [...]<br/>FROM<br/>    "testapp_question" INNER JOIN <br/>    "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id") LEFT OUTER JOIN <br/>    "testapp_userdata" ON ("auth_user"."id" = "testapp_userdata"."user_id")<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      IMPORT SET MYPROJECT.SET ( IS IT ON SYS.PATH ) NO MODUL NAME PINAX
    </pattern>
    <template>
<![CDATA[<p>There were 2 issues,</p><br/><br/><ol><br/><li><p>The virtualenv should be loaded in ~/apache2/bin/start with these lines, </p><br/><br/><p><code>WORKON_HOME=/home/pawesome/envs/pinax072/<br/>. $WORKON_HOME/bin/activate</code></p></li><br/><li><p>You should be using the wsgi file provided by pinax and not the one our installer provides as pinax has some custom path code that is needed, </p><br/><br/><p><code>#WSGIScriptAlias / /home/pawesome/webapps/qtsocial/myproject.wsgi</code><br/><code>WSGIScriptAlias / /home/pawesome/webapps/qtsocial/myproject/deploy/pinax.wsgi</code></p></li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      METHOD TO USE TO FIGUR OUT IF USER IS CONNECT TO FACEBOOK
    </pattern>
    <template>
<![CDATA[<p>You can check if the user has any facebook account as such:</p><br/><br/><pre><code>for usersocialauth in request.user.usersocialauth_set.all():<br/>    print usersocialauth.provider<br/></code></pre><br/><br/><p>You might as well get the list of providers for the user:</p><br/><br/><pre><code>request.user.usersocialauth_set.values_list('provider')<br/></code></pre><br/><br/><p>Beware: a cosmic backward compatibility break was introduced in commit 7f967702. Read answer comment for detail.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HOW TO GET A STATIC FILE S FILEPATH IN A DEVELOP ENVIRON
    </pattern>
    <template>
<![CDATA[<p>If using django.contrib.staticfiles, here's an extract of the findstatic command (django/contrib/staticfiles/management/commands/findstatic.py) that should help.</p><br/><br/><pre><code>    from django.contrib.staticfiles import finders<br/><br/>    result = finders.find(path, all=options['all'])<br/><br/>    path = smart_unicode(path)<br/>    if result:<br/>        if not isinstance(result, (list, tuple)):<br/>            result = [result]<br/>        output = u'\n  '.join(<br/>            (smart_unicode(os.path.realpath(path)) for path in result))<br/>        self.stdout.write(<br/>            smart_str(u"Found '%s' here:\n  %s\n" % (path, output)))<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      HTML5 CANVA AND PYTHON
    </pattern>
    <template>
<![CDATA[<p>The server side is much more developed than the client side in this case. (Rich JS libraries are a newer phenomenon, is all.) Django is an acceptable choice on the server, although I would at least consider <a href="http://twistedmatrix.com/" rel="nofollow">Twisted</a>.</p><br/><br/><p>My recommendation on the client side:</p><br/><br/><ol><br/><li><p>First choice is <a href="http://paperjs.org/" rel="nofollow">paper.js</a> which is a library for manipulating canvas. Excellent performance, allows event binding, rich graphics operations, tutorials are fantastic. Seems to have a very gentle learning curve as well, compared to similar software.</p></li><br/><li><p>Second choice would be <a href="http://raphaeljs.com/" rel="nofollow">raphael</a> or a similar SVG library. Performance not quite as good as paper.js although it depends a lot on what will be onscreen.</p></li><br/></ol><br/><br/><p>Can you elaborate on what kind of things you will be doing on the client? Number of visible objects, what events will be bound to what objects, types of graphics filters you need, and so on, all inform this choice heavily.</p><br/><br/><p>You will probably find yourself fighting to get good graphics performance on the client, so expect to spend a lot of time on that.</p><br/><br/><p>Edit: Based on your comments, I think you would find either solution workable, so I would lean toward paper.js only because it's a little more fun, and if you do go somewhere unexpected it will be able to go there with you.</p><br/><br/><p>Since your application sounds like it has to do with a lot of charting, I would suggest you check out <a href="http://www.highcharts.com/" rel="nofollow">HighCharts</a> or another charting library, of which there are several, both commercial and non-. HighCharts itself is free for everything <em>except</em> production use in a for-profit application, and reasonably priced otherwise.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SEE COMPLET EXAMPL OF CLASS BASE VIEW CRUD INCLUD TEMPLAT
    </pattern>
    <template>
<![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#createview" rel="nofollow">CreateView</a> <strong>inherits from <a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.edit.ModelFormMixin" rel="nofollow">ModelFormMixin</a></strong>, which in turn <strong>inherits from <a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.edit.FormMixin" rel="nofollow">FormMixin</a> and <a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.detail.SingleObjectMixin" rel="nofollow">SingleObjectMixin</a></strong>.</p><br/><br/><p><a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.detail.SingleObjectMixin" rel="nofollow">SingleObjectMixin</a> provides the object template context variable, which is probably not going to be any use in the case of CreateView:</p><br/><br/><blockquote><br/>  <p>object: The object that this view is displaying. If context_object_name is specified, that variable will also be set in the context, with the same value as object.</p><br/></blockquote><br/><br/><p>But <strong><a href="https://docs.djangoproject.com/en/dev/ref/class-based-views/#django.views.generic.edit.FormMixin" rel="nofollow">FormMixin</a> provides the form context variable</strong>:</p><br/><br/><blockquote><br/>  <p>form: The form instance that was generated for the view.</p><br/></blockquote><br/><br/><p>Thus, you can <strong>refer to the documentation to <a href="https://docs.djangoproject.com/en/dev/topics/forms/#displaying-a-form-using-a-template" rel="nofollow">display a form with a template</a></strong>:</p><br/><br/><pre><code>&lt;form action="/contact/" method="post"&gt;{% csrf_token %}<br/>{{ form.as_p }}<br/>&lt;input type="submit" value="Submit" /&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Which means that the very template you posted should <strong>almost</strong> work with the class based view:</p><br/><br/><pre><code>{% extends 'head-plain.html' %}<br/>{% block title %}{% endblock %}<br/>{% block headstuff %}{% endblock %}<br/>{% block content %}   <br/>&lt;form action="" method="post"&gt;<br/>{% csrf_token %}{{ form.as_p }}<br/>&lt;input type="submit" value="Submit" /&gt; &lt;/form&gt;    <br/>{% endblock %}<br/></code></pre><br/><br/><p>I removed <code>{{ action }}</code> because <strong>it is not part of the context</strong>, neither in the old-style view, neither with the class based view, so it doesn't make any sense. You should know that <strong>if action="" then the browser will submit to the current url</strong>. You can force the action to the current url with action="{{ request.path }}" or you can specify another url with the <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#url" rel="nofollow">url template tag</a>.</p><br/><br/><p>Suppose apply the best practice of <a href="https://docs.djangoproject.com/en/dev/topics/http/urls/#naming-url-patterns" rel="nofollow">naming url patterns</a>, by changing:</p><br/><br/><pre><code>(r'^brand_create2$',    BrandCreate.as_view()),<br/></code></pre><br/><br/><p>to:</p><br/><br/><pre><code>(r'^brand_create2$',    BrandCreate.as_view(), name='band_create'),<br/></code></pre><br/><br/><p>Then you can use: <code>action="{% url band_create %}"</code>.</p><br/><br/><p>You can also <a href="https://docs.djangoproject.com/en/dev/topics/forms/#customizing-the-form-template" rel="nofollow">customize further</a>:</p><br/><br/><pre><code>&lt;form action="/contact/" method="post"&gt;<br/>    {% csrf_token %}<br/>    {{ form.non_field_errors }}<br/>    &lt;div class="fieldWrapper"&gt;<br/>        {{ form.subject.errors }}<br/>        &lt;label for="id_subject"&gt;Email subject:&lt;/label&gt;<br/>        {{ form.subject }}<br/>    &lt;/div&gt;<br/>    &lt;div class="fieldWrapper"&gt;<br/>        {{ form.message.errors }}<br/>        &lt;label for="id_message"&gt;Your message:&lt;/label&gt;<br/>        {{ form.message }}<br/>    &lt;/div&gt;<br/>    &lt;div class="fieldWrapper"&gt;<br/>        {{ form.sender.errors }}<br/>        &lt;label for="id_sender"&gt;Your email address:&lt;/label&gt;<br/>        {{ form.sender }}<br/>    &lt;/div&gt;<br/>    &lt;div class="fieldWrapper"&gt;<br/>        {{ form.cc_myself.errors }}<br/>        &lt;label for="id_cc_myself"&gt;CC yourself?&lt;/label&gt;<br/>        {{ form.cc_myself }}<br/>    &lt;/div&gt;<br/>    &lt;p&gt;&lt;input type="submit" value="Send message" /&gt;&lt;/p&gt;<br/>&lt;/form&gt;<br/></code></pre><br/><br/><p>Of course, <strong>the fields available in the form depend on your Model</strong>.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER BI FOREIGNKEY SET MODEL
    </pattern>
    <template>
<![CDATA[<p>You may not use methods in order_by <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#lookups-that-span-relationships" rel="nofollow">lookups</a> because <strong>they are converted to SQL</strong>.</p><br/><br/><p>So, why not <strong>convert get_last_comment_date into a field</strong> ? e.g. using a <a href="https://docs.djangoproject.com/en/dev/topics/signals/" rel="nofollow">signal receiver</a>:</p><br/><br/><pre><code>from django.db.models import signals<br/><br/>class Post(models.Model):<br/>    title = models.CharField(max_length=240)<br/>    last_comment_date = models.DateField(null=True, blank=True)<br/><br/>def post_last_comment_date(sender, instance=None, **kwargs):<br/>    try:<br/>        last_comment_date = self.comment_set.order_by('-date')[0].date<br/>    except Comment.DoesNotExist:<br/>        return<br/><br/>    if last_comment_date != comment.post.last_comment_date:<br/>        comment.post.last_comment_date = last_comment_date<br/>        comment.post.save()<br/><br/>signals.post_save.connect(post_last_comment_date, sender=Comment)<br/></code></pre><br/><br/><p>Now, you can: <code>Comment.objects.order_by('post__last_comment_date', '-date')</code></p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ERROR USE DJANGO SOCIAL AUH
    </pattern>
    <template>
<![CDATA[<p>Did you try this ?</p><br/><br/><pre><code>from social_auth.backends import get_backend<br/></code></pre><br/><br/><p>You should not hardcode the name of your project in your code. That makes the code less portable.</p><br/><br/><p>If that doesn't work, then you haven't install django-social-auth correctly. Fix your setup:</p><br/><br/><ol><br/><li><p><strong>Create a virtualenv</strong>, in the parent directory of your project seems fair: <code>virtualenv /path/to/venv</code></p></li><br/><li><p><strong>Activate the virtualenv</strong>: <code>source /path/to/venv/bin/activate</code></p></li><br/><li><p><strong>Install an app</strong> ie. from git: <code>pip install -e git+git://github.com/omab/django-social-auth.git#egg=social_auth</code></p></li><br/></ol><br/><br/><p>I also wrote a more detailed article on <a href="http://blog.yourlabs.org/103518532" rel="nofollow">django, virtualenv and pip</a> which should be of your interrest.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXTEND THE SESSION MIDDLEWAR
    </pattern>
    <template>
<![CDATA[<p>Looking at the <a href="https://docs.djangoproject.com/en/dev/ref/settings/#std%3asetting-SESSION_ENGINE" rel="nofollow">documentation of SESSION_ENGINE</a>, take such an example: <code>django.contrib.sessions.backends.file</code>. The source of this module defines a SessionStore class. So that's what you should do too:</p><br/><br/><p>./tcore/my_sessions.py:</p><br/><br/><pre><code>from django.contrib.sessions.backends.db import SessionStore as DbSessionStore<br/><br/>class SessionStore(DbSessionStore):<br/>    def __init__(self, *args, **kwargs):<br/>        print 'hello from SessionStore'<br/>        super(SessionStore, self).__init__(*args, **kwargs)<br/></code></pre><br/><br/><p>settings.py:</p><br/><br/><pre><code>SESSION_ENGINE='tcore.my_sessions'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MANAGE.PI SYNCDB ERROR
    </pattern>
    <template>
<![CDATA[<p>Your database is named <strong>GlobalXdb</strong> and yet in this line...</p><br/><br/><pre><code>#give user permissions to db <br/>GRANT ALL ON django.* TO 'django_user'@'localhost'<br/></code></pre><br/><br/><p>you grant permissions to django_user on database named <strong>django</strong>.</p><br/><br/><p>Give permissions to the correct database <strong>GlobalXdb</strong> should solve your problem.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WHI DO I GET PROBLEM WITH UTF 8 ENCOD STRING
    </pattern>
    <template>
<![CDATA[<p>Prefixing your strings with <code>u</code> is the solution.</p><br/><br/><p>If it's a problem for you, then it looks like a symptom of a more general problem: you have a lot of <a href="http://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants" rel="nofollow">magic constants</a> in your code. It is bad (and you already see why). Try to avoid them, for example you can use <a href="https://docs.djangoproject.com/en/dev/topics/http/shortcuts/#redirect" rel="nofollow">named url pattern or view name</a> for redirecting instead of re-typing the part of URL.</p><br/><br/><p>If you can't avoid them, turn them into named constants, and place their assignments in one place. Then, you'll see that all of them are prefixed properly, and it will be difficult to overlook it.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      403 CSRF VERIF FAIL WHEN LOG THROUGH PYTHON REQUEST
    </pattern>
    <template>
<![CDATA[<p>Your post is not handing the CSRF Token to the login. Does this work:</p><br/><br/><pre><code>r = requests.post(self.loginurl, data={'csrf_token': django.middleware.csrf.get_token(), 'username':self.username, 'password': self.password}, auth=(self.username, self.password),allow_redirects=True)<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      INCLUD PARTIAL VIEW IN WEB2PI PASS SPECIF VARIABL INTO IT
    </pattern>
    <template>
<![CDATA[<p>Interrobang's answer is correct -- variables returned by the controller will be available even in included (as well as extended) views. So, you can do:</p><br/><br/><p>In mycontroller.py:</p><br/><br/><pre><code>def myfunc():<br/>    return dict(caption='Me', source='http://example.com/img.png')<br/></code></pre><br/><br/><p>and then in /views/mycontroller/myfunc.html:</p><br/><br/><pre><code>{{include 'image.html'}}<br/></code></pre><br/><br/><p>In that case, <code>caption</code> and <code>source</code> will be available in the image.html view. Instead of returning <code>caption</code> and <code>source</code> from the controller, another option is just to define them in the view before the <code>include</code> directive:</p><br/><br/><pre><code>{{caption = 'Me'<br/>  source = 'http://example.com/img.png'}}<br/>{{include 'image.html'}}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      TASTYPI MANYTOMANI FIELD POST JSON ERROR
    </pattern>
    <template>
<![CDATA[<p>I fixed the error myself. The culprit was that i was using "through" in my models.py for the ManyToMany field connector. Removing through made it easy to take care of m2m saves. Else, my thing using 'through' should also work but I will have to make a resource of the connector and send the appropriate endpoints.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      EXCLUD A CONTEXT PROCESSOR IN A VIEW
    </pattern>
    <template>
<![CDATA[<p>This is what Django's lazy objects are for. Rather than calculate the actual contents in the context processor, you provide a lazy object with an associated function; when something actually tries to use the object, e.g. in a template, then it calls the function. <a href="http://stackoverflow.com/a/8564778/344821">This answer</a> gives an example for the same problem.</p><br/><br/><p>Be careful about memoization if you use the variable more than once; some of the options will re-call the function, while some will save the result. You can look at <a href="https://github.com/django/django/blob/master/django/utils/functional.py#L52" rel="nofollow">the source</a> to be sure. I think <code>SimpleLazyObject</code> (as in the answer above) does what you want, but I haven't used this recently enough to be sure.</p><br/><br/><p>(An answer by request....)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MYSQL ERROR
    </pattern>
    <template>
<![CDATA[<p>Replacing 'ENGINE': 'mysql' with django.db.backends.mysql' is correct.</p><br/><br/><p>Now, you have to change from:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'mysql',<br/>        'NAME': 'test',<br/>        'DATABASE_USER': 'root',<br/>        'DATABASE_PASSWORD': 'pass',<br/>    }<br/>}<br/></code></pre><br/><br/><p>to:</p><br/><br/><pre><code>DATABASES = {<br/>    'default': {<br/>        'ENGINE': 'mysql',<br/>        'NAME': 'test',<br/>        'USER': 'root',<br/>        'PASSWORD': 'pass',<br/>    }<br/>}<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ORDER OF MIXIN AFFECT THE DERIV CLASS
    </pattern>
    <template>
<![CDATA[<p>The MRO is basically depth-first, left-to-right. See <a href="http://stackoverflow.com/questions/1848474/method-resolution-order-mro-in-new-style-python-classes">Method Resolution Order (MRO) in new style Python classes</a> for some more info.</p><br/><br/><p>You can look at the <a href="http://docs.python.org/reference/datamodel.html#invoking-descriptors" rel="nofollow"><code>__mro__</code> attribute</a> of the class to check, but <code>FooMixin</code> should be first if you want to do "check A" first.</p><br/><br/><pre><code>class UltimateBase(object):<br/>    def dispatch(self, *args, **kwargs):<br/>        print 'base dispatch'<br/><br/>class FooMixin(object):<br/>    def dispatch(self, *args, **kwargs):<br/>        print 'perform check A'<br/>        return super(FooMixin, self).dispatch(*args, **kwargs)<br/><br/>class BarMixin(object):<br/>    def dispatch(self, *args, **kwargs):<br/>        print 'perform check B'<br/>        return super(BarMixin, self).dispatch(*args, **kwargs)<br/><br/>class FooBar(FooMixin, BarMixin, UltimateBase):<br/>    pass<br/><br/>FooBar().dispatch()<br/></code></pre><br/><br/><p><code>View</code> has to be last so that it "catches" any attribute lookups that weren't on any mixins, without hiding any methods on those mixins. I'm not sure I understand that part of your question -- what it "why is it added at all" or "why is it added last"?</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      PUT TEMPLAT IN DJANGO 1.4
    </pattern>
    <template>
<![CDATA[<p>I don't think this is 1.4 specific.  If you will want your template in a subfolder, specify <code>template_name = 'subfolde/template.html'</code></p><br/><br/><p>Regarding template dirs, from the <a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types" rel="nofollow">docs</a>:</p><br/><br/><blockquote><br/>  <p>... For each app in<br/>  INSTALLED_APPS, the loader looks for a templates subdirectory. If the<br/>  directory exists, Django looks for templates in there.</p><br/></blockquote><br/><br/><p>So the actual dir is:</p><br/><br/><pre><code>projectname/appname/templates/appname/objectname_list.html<br/>            ^^^               ^^^<br/></code></pre><br/><br/><p>This helps you keep everything inside the app folder and does not require you to configure anything,  </p><br/><br/><p>This also means that if you have apps <code>foo</code>, <code>bar</code> and <code>baz</code>, you can still have one <code>templates</code> dir under one of the apps:</p><br/><br/><pre><code>myproj/foo/templates/foo/...<br/>myproj/foo/templates/bar/...<br/>myproj/foo/templates/baz/...<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      SOCI DATA MINE RUBI OR DJANGO
    </pattern>
    <template>
<![CDATA[<p>They both have all what you need. But Python does better here I think. Python has a very interesting library for text mining called <a href="http://www.nltk.org/">NLTK</a>, and <a href="http://numpy.scipy.org">Numpy/Scipy</a> for analytical computations which allow you to achieve almost c comparable performances. On the other hand for pure data mining I'd suggest python+<a href="http://pandas.pydata.org/">Pandas</a> (Pandas is really well written and fast and there is no ruby equivalent as far as I know) or python + some R code called thru <a href="http://rpy.sourceforge.net/">rpy</a>. If in your data mining code you need to compute some symbolic math you can decide to use <a href="http://code.google.com/p/sympy/">Sympy</a> (slower because it's written in python but very complete) or <a href="http://deeplearning.net/software/theano/">Theano</a> (way faster but with less features; it can even make your code run on the GPU thru CUDA)</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      WSGI PYTHON
    </pattern>
    <template>
<![CDATA[<p>Have you read any of the actual mod_wsgi documentation or watch the presentation about it:</p><br/><br/><p><a href="http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide" rel="nofollow">http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide</a><br/>  <a href="http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations" rel="nofollow">http://code.google.com/p/modwsgi/wiki/WhereToGetHelp?tm=6#Conference_Presentations</a></p><br/><br/><p>You either never set up WSGIScriptAlias or didn't enable the site for Apache properly to read it or didn't restart Apache.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      A DATA FIXTUR WITH GET BY NATURAL KEY ( ) ON CONTENTTYP FOREIGN KEY IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>natural key in Django is </p><br/><br/><blockquote><br/>  <p>The default serialization strategy for foreign keys and many-to-many relations is to serialize the value of the primary key(s) of the objects in the relation.</p><br/></blockquote><br/><br/><p>You don't need to implement methods such as natural_key and get_by_natural_key in Manager for those models which do not occur as ForeignKey/ManyToManyField in targets to dump. So you could remove InlineTypeManager() lines.</p><br/><br/><p>Also, the values of content_type field inside dumped initial_data.json are incorrect. Django only treats a list as natural key, a string like "image" is still treated as surrogate key and will fail because it cannot be coerced to int successfully. Correct ContentType dump looks like</p><br/><br/><pre><code>from django.contrib.contenttypes.models import ContentType<br/>from django.utils import simplejson<br/><br/>&gt;&gt;&gt; simplejson.dumps(ContentType.objects.get(model='user').natural_key())<br/>'["auth", "user"]'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      FIELD TO SQL TABL FROM DJANGO APPLIC
    </pattern>
    <template>
<![CDATA[<p>You really don't want to implement each question/answer as a separate DB field.</p><br/><br/><p>Instead, make a table of questions and a table of answers, and have a field in the answers table (in general, a <code>ForeignKey</code>) to indicate which question a given answer is associated with.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO 1.5 ADMIN CSS NOT WORK
    </pattern>
    <template>
<![CDATA[<p>How did you configure it? For admin app to load static files, you need to create a symbolic link inside your app's <code>static</code> directory. Have you done this?</p><br/><br/><p><code>ls -l</code> should give something like:</p><br/><br/><pre><code>admin -&gt; /usr/local/lib/python2.6/dist-packages/django/contrib/admin/media<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      MULTIPL VALU IN A M2M RELATIONSHIP IN DJANGO
    </pattern>
    <template>
<![CDATA[<p>Simply do:</p><br/><br/><pre><code>def has_roles(user, roles):<br/>    return user.profile.user_types.filter(pk__in=roles).count() == len(roles)<br/><br/>print has_roles(user, [6,7,8])<br/></code></pre><br/><br/><p>P.S. I would shy away from using hard coded PK ID numbers as your identifiers. Too many things can go wrong with that. Instead define a mapping at runtime and reference them by names. Multiple things will improve:</p><br/><br/><ul><br/><li>Your code will be much easier to read </li><br/><li>Django will offload model instance matching to the DB the first item</li><br/><li>From then on you can cache the ID and not ask the DB again</li><br/></ul><br/><br/><p>Then you can do:</p><br/><br/><pre><code>class UserType( models.Model ):<br/>    TYPES = (( 'tenant', 'Tenant'),<br/>             ( 'propman', 'Property Manager'),<br/>             ( 'propown', 'Property Owner'),<br/>             ( 'vendman', 'Vendor Manager'),<br/>             ( 'vendor', 'Vendor'),<br/>             ( 'viewer', 'Viewer'),<br/>             ( 'moderator', 'Moderator'),<br/>             ( 'admin', 'Administrator'))<br/><br/>    name = models.CharField( max_length = 135, choices=TYPES )<br/><br/>def has_role(user, role):<br/>    return user.profile.user_types.filter(name=role).count() == 1<br/><br/>def has_roles(user, roles):<br/>    return user.profile.user_types.filter(name__in=roles).count() == len(roles)<br/><br/>print has_roles(user, ['viewer','moderator','admin'])<br/></code></pre><br/><br/><p>Finally, you can add the two functions above to:</p><br/><br/><pre><code>class UserProfile( models.Model ) :<br/>    user       = models.OneToOneField( User )<br/>    user_types = models.ManyToManyField( UserType, null = True, blank = True )<br/><br/><br/>    def has_role(self, role):<br/>        return self.user_types.filter(name=role).count() == 1<br/><br/>    def has_roles(self, roles):<br/>        return self.user_types.filter(name__in=roles).count() == len(roles)<br/></code></pre><br/><br/><p>And then use it like this in the future:</p><br/><br/><pre><code>u = User.objects.get(username='me')<br/>if u.userprofile.has_role('admin'):<br/>    print 'I have the powah!'<br/></code></pre><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      + WAMP + DJANGO IMPORTERROR NO MODUL NAME OS
    </pattern>
    <template>
<![CDATA[<p>This can occur when your Python/mod_wsgi installation has been done wrong. Key things to check are:</p><br/><br/><ol><br/><li>That Python was installed for all users.</li><br/><li>That Python, Apache and mod_wsgi are all 32 bit or all 64 bit. You cannot mix 32 bit and 64 bit.</li><br/><li>That mod_wsgi was compiled for the version of Python you are using.</li><br/></ol><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      ADMIN SITE
    </pattern>
    <template>
<![CDATA[<p>Django is having trouble loading your urls file (which is why it thinks you don't have any urls configured).</p><br/><br/><p>From your <code>INSTALLED_APPS</code>, it appears that your <em>site</em> is named <code>micopiloto</code>, not your app - are you sure that <code>micopiloto.views.home</code> is the right path to your views?</p><br/><br/><p>If you've already created an app, make sure your urls point to that, not the site; if you haven't created an app, you should do that first.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      DJANGO WEBSIT ON COMPANI INTRANET
    </pattern>
    <template>
<![CDATA[<p>Quite easy: <a href="https://docs.djangoproject.com/en/dev/howto/deployment/" rel="nofollow">https://docs.djangoproject.com/en/dev/howto/deployment/</a></p><br/><br/><p>However, as your place is a Windows shop it might be worth evaluating ASP.net MVC especially if this is already in use.</p><br/><br/><p>Once you've done your research speak to whomever administers servers at your place of work and see if your plans fit within your company's existing standards.</p><br/><br/><p>Don't forget about backups and internal DNS.</p><br/>]]>    </template>
  </category>
  <category>
    <pattern>
      STORE HTML INPUT ARRAY FROM POST
    </pattern>
    <template>
<![CDATA[<p>After having a look at the documentation in django I found that request.POST is an QueryDict object.</p><br/><br/><blockquote><br/>  <p>class QueryDict</p><br/>  <br/>  <p>In an HttpRequest object, the GET and POST attributes<br/>  are instances of django.http.QueryDict. QueryDict is a dictionary-like<br/>  class customized to deal with multiple values for the same key. This<br/>  is necessary because some HTML form elements, notably , pass multiple values for the same key.</p><br/></blockquote><br/><br/><p>at <a href="https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict" rel="nofollow">https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.QueryDict</a> .</p><br/><br/><p>As a dictionary (JSON object or Python dict) cannot have more than one key the JSON serialiser is throwing the MultiValueDictKeyError saying that you have multiple keys that are the same.</p><br/><br/><p>Not sure how php was doing it, but a fix would be either of the following</p><br/><br/><ol><br/><li><p>Copy the POST QueryDict and modify the contents so there isn't any duplicate keys.</p></li><br/><li><p>Change the form data that is being submitted.</p></li><br/></ol><br/><br/><p>The reason for the QUeryDict is that for forms being submitted you might validly get multiple keys from the form, for multi-select fields etc.</p><br/><br/><p>hope that helps.</p><br/><br/><p>Mark</p><br/>]]>    </template>
  </category>
</aiml>
